//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistaddlaterdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrWaitingListDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageSurgicalContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPeripheralLocationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTransportRequiredComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ApptTransportType getValue()
				{
					return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbInterpreterRequiredComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Language value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Language value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Language getValue()
				{
					return (ims.core.vo.lookups.Language)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Language value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLateralitySecondComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRB getValue()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRB value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLateralityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRB getValue()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRB value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPriorityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.ReferralUrgency getValue()
				{
					return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAnaestheticTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.AnaestheticType getValue()
				{
					return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbNamedConsultantComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbProcedureSecondComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureVo getValue()
				{
					return (ims.core.vo.ProcedureVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbElectiveListComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.ElectiveListConfigurationWLVo getValue()
				{
					return (ims.RefMan.vo.ElectiveListConfigurationWLVo)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.ElectiveListConfigurationWLVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbProcedureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureVo getValue()
				{
					return (ims.core.vo.ProcedureVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class GroupProcedureCarriedOutRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 736, 368, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Other HCP", startTabIndex.intValue() + 45);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 566, 368, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "SPR / Associate Specialist", startTabIndex.intValue() + 44);
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 438, 368, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Named Consultant", startTabIndex.intValue() + 43);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 328, 368, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(3, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Any Consultant", startTabIndex.intValue() + 42);
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 188, 368, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(4, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "", startTabIndex.intValue() + 41);
				}
				public void setText(GroupProcedureCarriedOutEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupProcedureCarriedOutEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupProcedureCarriedOutEnumeration.None;
						case 0: return GroupProcedureCarriedOutEnumeration.rdoOther;
						case 1: return GroupProcedureCarriedOutEnumeration.rdoAny;
						case 2: return GroupProcedureCarriedOutEnumeration.rdoNamedConsultant;
						case 3: return GroupProcedureCarriedOutEnumeration.rdoAnyConsultant;
						case 4: return GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn;
					}
					return null;
				}
				public void setValue(GroupProcedureCarriedOutEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupProcedureCarriedOutEnumeration.None.id);
				}
				public boolean isEnabled(GroupProcedureCarriedOutEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupProcedureCarriedOutEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupProcedureCarriedOutEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupProcedureCarriedOutEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupProcedureCarriedOutEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupProcedureCarriedOutEnumeration None = new GroupProcedureCarriedOutEnumeration(-1);
				public static GroupProcedureCarriedOutEnumeration rdoOther = new GroupProcedureCarriedOutEnumeration(0);
				public static GroupProcedureCarriedOutEnumeration rdoAny = new GroupProcedureCarriedOutEnumeration(1);
				public static GroupProcedureCarriedOutEnumeration rdoNamedConsultant = new GroupProcedureCarriedOutEnumeration(2);
				public static GroupProcedureCarriedOutEnumeration rdoAnyConsultant = new GroupProcedureCarriedOutEnumeration(3);
				public static GroupProcedureCarriedOutEnumeration rdoNameOfClinicianLoggedIn = new GroupProcedureCarriedOutEnumeration(4);
				private GroupProcedureCarriedOutEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupProcedureCarriedOutEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupDaySurgMainTheatreRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 600, 475, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Peripheral Location", startTabIndex.intValue() + 55);
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 464, 475, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Inpatient Theatre", startTabIndex.intValue() + 54);
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 312, 473, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Day Surgery Theatre", startTabIndex.intValue() + 53);
				}
				public void setText(GroupDaySurgMainTheatreEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupDaySurgMainTheatreEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupDaySurgMainTheatreEnumeration.None;
						case 0: return GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation;
						case 1: return GroupDaySurgMainTheatreEnumeration.rdoMainTheatre;
						case 2: return GroupDaySurgMainTheatreEnumeration.rdoDaySurgery;
					}
					return null;
				}
				public void setValue(GroupDaySurgMainTheatreEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupDaySurgMainTheatreEnumeration.None.id);
				}
				public boolean isEnabled(GroupDaySurgMainTheatreEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupDaySurgMainTheatreEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupDaySurgMainTheatreEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupDaySurgMainTheatreEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupDaySurgMainTheatreEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupDaySurgMainTheatreEnumeration None = new GroupDaySurgMainTheatreEnumeration(-1);
				public static GroupDaySurgMainTheatreEnumeration rdoPeripheralLocation = new GroupDaySurgMainTheatreEnumeration(0);
				public static GroupDaySurgMainTheatreEnumeration rdoMainTheatre = new GroupDaySurgMainTheatreEnumeration(1);
				public static GroupDaySurgMainTheatreEnumeration rdoDaySurgery = new GroupDaySurgMainTheatreEnumeration(2);
				private GroupDaySurgMainTheatreEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupDaySurgMainTheatreEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupAdditionalProcedureSurgicalRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 312, 112, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "All Procedures", startTabIndex.intValue() + 20);
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 192, 112, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 19);
				}
				public void setText(GroupAdditionalProcedureSurgicalEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAdditionalProcedureSurgicalEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAdditionalProcedureSurgicalEnumeration.None;
						case 0: return GroupAdditionalProcedureSurgicalEnumeration.rdoAllProceduresForAdditionalProcedureSurgical;
						case 1: return GroupAdditionalProcedureSurgicalEnumeration.rdoSpecialtyHotlistForAdditionalProceduresSurgical;
					}
					return null;
				}
				public void setValue(GroupAdditionalProcedureSurgicalEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAdditionalProcedureSurgicalEnumeration.None.id);
				}
				public boolean isEnabled(GroupAdditionalProcedureSurgicalEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAdditionalProcedureSurgicalEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAdditionalProcedureSurgicalEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAdditionalProcedureSurgicalEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAdditionalProcedureSurgicalEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAdditionalProcedureSurgicalEnumeration None = new GroupAdditionalProcedureSurgicalEnumeration(-1);
				public static GroupAdditionalProcedureSurgicalEnumeration rdoAllProceduresForAdditionalProcedureSurgical = new GroupAdditionalProcedureSurgicalEnumeration(0);
				public static GroupAdditionalProcedureSurgicalEnumeration rdoSpecialtyHotlistForAdditionalProceduresSurgical = new GroupAdditionalProcedureSurgicalEnumeration(1);
				private GroupAdditionalProcedureSurgicalEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAdditionalProcedureSurgicalEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPrimaryProcedureSurgicalRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 312, 51, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "All Procedures", startTabIndex.intValue() + 15);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 192, 51, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 14);
				}
				public void setText(GroupPrimaryProcedureSurgicalEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPrimaryProcedureSurgicalEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPrimaryProcedureSurgicalEnumeration.None;
						case 0: return GroupPrimaryProcedureSurgicalEnumeration.rdoAllProceduresSurgical;
						case 1: return GroupPrimaryProcedureSurgicalEnumeration.rdoSpecialtyHotListSurgical;
					}
					return null;
				}
				public void setValue(GroupPrimaryProcedureSurgicalEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPrimaryProcedureSurgicalEnumeration.None.id);
				}
				public boolean isEnabled(GroupPrimaryProcedureSurgicalEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPrimaryProcedureSurgicalEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPrimaryProcedureSurgicalEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPrimaryProcedureSurgicalEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPrimaryProcedureSurgicalEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPrimaryProcedureSurgicalEnumeration None = new GroupPrimaryProcedureSurgicalEnumeration(-1);
				public static GroupPrimaryProcedureSurgicalEnumeration rdoAllProceduresSurgical = new GroupPrimaryProcedureSurgicalEnumeration(0);
				public static GroupPrimaryProcedureSurgicalEnumeration rdoSpecialtyHotListSurgical = new GroupPrimaryProcedureSurgicalEnumeration(1);
				private GroupPrimaryProcedureSurgicalEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPrimaryProcedureSurgicalEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPlanedProceduresSurgicalRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 376, 30, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "Months", startTabIndex.intValue() + 10);
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 312, 30, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "Weeks", startTabIndex.intValue() + 9);
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 256, 30, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper15.getX(), anchoringHelper15.getY(), anchoringHelper15.getWidth(), "Days", startTabIndex.intValue() + 8);
				}
				public void setText(GroupPlanedProceduresSurgicalEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPlanedProceduresSurgicalEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPlanedProceduresSurgicalEnumeration.None;
						case 0: return GroupPlanedProceduresSurgicalEnumeration.rdoMonth;
						case 1: return GroupPlanedProceduresSurgicalEnumeration.rdoWeeks;
						case 2: return GroupPlanedProceduresSurgicalEnumeration.rdoDays;
					}
					return null;
				}
				public void setValue(GroupPlanedProceduresSurgicalEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPlanedProceduresSurgicalEnumeration.None.id);
				}
				public boolean isEnabled(GroupPlanedProceduresSurgicalEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPlanedProceduresSurgicalEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPlanedProceduresSurgicalEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPlanedProceduresSurgicalEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPlanedProceduresSurgicalEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPlanedProceduresSurgicalEnumeration None = new GroupPlanedProceduresSurgicalEnumeration(-1);
				public static GroupPlanedProceduresSurgicalEnumeration rdoMonth = new GroupPlanedProceduresSurgicalEnumeration(0);
				public static GroupPlanedProceduresSurgicalEnumeration rdoWeeks = new GroupPlanedProceduresSurgicalEnumeration(1);
				public static GroupPlanedProceduresSurgicalEnumeration rdoDays = new GroupPlanedProceduresSurgicalEnumeration(2);
				private GroupPlanedProceduresSurgicalEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPlanedProceduresSurgicalEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupQuestion1RadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 320, 320, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "Unknown", startTabIndex.intValue() + 36);
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 278, 320, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "No", startTabIndex.intValue() + 35);
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 232, 320, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper18.getX(), anchoringHelper18.getY(), anchoringHelper18.getWidth(), "Yes", startTabIndex.intValue() + 34);
				}
				public void setText(GroupQuestion1Enumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupQuestion1Enumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupQuestion1Enumeration.None;
						case 0: return GroupQuestion1Enumeration.rdoUnknownQuestion1;
						case 1: return GroupQuestion1Enumeration.rdoNoQuestion1;
						case 2: return GroupQuestion1Enumeration.rdoYesQuestion1;
					}
					return null;
				}
				public void setValue(GroupQuestion1Enumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupQuestion1Enumeration.None.id);
				}
				public boolean isEnabled(GroupQuestion1Enumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupQuestion1Enumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupQuestion1Enumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupQuestion1Enumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupQuestion1Enumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupQuestion1Enumeration None = new GroupQuestion1Enumeration(-1);
				public static GroupQuestion1Enumeration rdoUnknownQuestion1 = new GroupQuestion1Enumeration(0);
				public static GroupQuestion1Enumeration rdoNoQuestion1 = new GroupQuestion1Enumeration(1);
				public static GroupQuestion1Enumeration rdoYesQuestion1 = new GroupQuestion1Enumeration(2);
				private GroupQuestion1Enumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupQuestion1Enumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPerioperativeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 744, 320, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper19.getX(), anchoringHelper19.getY(), anchoringHelper19.getWidth(), "No", startTabIndex.intValue() + 38);
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 696, 320, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper20.getX(), anchoringHelper20.getY(), anchoringHelper20.getWidth(), "Yes", startTabIndex.intValue() + 37);
				}
				public void setText(GroupPerioperativeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPerioperativeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPerioperativeEnumeration.None;
						case 0: return GroupPerioperativeEnumeration.rdoNoPerioperative;
						case 1: return GroupPerioperativeEnumeration.rdoYesPerioperative;
					}
					return null;
				}
				public void setValue(GroupPerioperativeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPerioperativeEnumeration.None.id);
				}
				public boolean isEnabled(GroupPerioperativeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPerioperativeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPerioperativeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPerioperativeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPerioperativeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPerioperativeEnumeration None = new GroupPerioperativeEnumeration(-1);
				public static GroupPerioperativeEnumeration rdoNoPerioperative = new GroupPerioperativeEnumeration(0);
				public static GroupPerioperativeEnumeration rdoYesPerioperative = new GroupPerioperativeEnumeration(1);
				private GroupPerioperativeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPerioperativeEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupElectiveListReasonRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 280, 10, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper21.getX(), anchoringHelper21.getY(), anchoringHelper21.getWidth(), "Diagnostic", startTabIndex.intValue() + 6);
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 192, 10, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "Treatment", startTabIndex.intValue() + 5);
				}
				public void setText(GroupElectiveListReasonEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupElectiveListReasonEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupElectiveListReasonEnumeration.None;
						case 0: return GroupElectiveListReasonEnumeration.rdoDiagnostic;
						case 1: return GroupElectiveListReasonEnumeration.rdoTreatment;
					}
					return null;
				}
				public void setValue(GroupElectiveListReasonEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupElectiveListReasonEnumeration.None.id);
				}
				public boolean isEnabled(GroupElectiveListReasonEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupElectiveListReasonEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupElectiveListReasonEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupElectiveListReasonEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupElectiveListReasonEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupElectiveListReasonEnumeration None = new GroupElectiveListReasonEnumeration(-1);
				public static GroupElectiveListReasonEnumeration rdoDiagnostic = new GroupElectiveListReasonEnumeration(0);
				public static GroupElectiveListReasonEnumeration rdoTreatment = new GroupElectiveListReasonEnumeration(1);
				private GroupElectiveListReasonEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupElectiveListReasonEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 191, 404, 625, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccResponsibleHCPSUrgicalForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper23.getSize(), instance1, startTabIndex.intValue() + 47, skipContextValidation);
				//ims.framework.Control m_ccResponsibleHCPSUrgicalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(191), new Integer(404), new Integer(625), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 47), m_ccResponsibleHCPSUrgicalForm, instance1 } );
				ims.framework.Control m_ccResponsibleHCPSUrgicalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 47), m_ccResponsibleHCPSUrgicalForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccResponsibleHCPSUrgicalControl);
				Menu[] menus1 = m_ccResponsibleHCPSUrgicalForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 406, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 544, 451, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 480, 30, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Planned Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 30, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Procedure In:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 521, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Special Requirements:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 448, 497, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 497, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interpreter Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 244, 157, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-Assessment Required?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 448, 260, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Days", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 344, 449, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nights", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 449, 225, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-operative overnight stay required?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 479, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post - Operative Stay:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 415, 344, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 288, 346, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minutes", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 415, 321, 266, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Guidelines in relation to stopping medication?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 415, 305, 283, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Are you happy to follow the Trust's Perioperative", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 328, 284, 222, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Email letter to Pre-Assessment Anaesthetist", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 504, 260, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Critical Care Bed Required?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 131, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 155, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 232, 30, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date given to patient:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 30, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Possible date given to patient?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 427, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 8, 68, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 8, 91, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 179, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 202, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 224, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 260, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Short Notice:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 256, 260, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notice required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 284, 284, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessment of Risk by an Anaesthetist Required?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 321, 215, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "anticoagulant / antiplatelet therapy?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 305, 198, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is this patient currently receiving ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 346, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Length:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 379, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "carried out by:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 365, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "This procedure is to be", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 206, 368, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name Of Clinician Logged In", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 545, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 256, 473, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nights", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 467, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anticipated", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 512, 199, 120, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Update Urgency", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 776, 152, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "-", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 776, 91, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "+", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 224, 521, 576, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 736, 471, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 812, 364, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 472, 341, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 784, 317, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 393, 318, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 360, 10, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 192, 177, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 192, 545, 608, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 632, 28, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 376, 28, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 600, 449, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPeripheralLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 56), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPeripheralLocationTemp);
				cmbPeripheralLocationComboBox cmbPeripheralLocation = (cmbPeripheralLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeripheralLocationComboBox.class, m_cmbPeripheralLocationTemp);
				super.addComboBox(cmbPeripheralLocation);
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 600, 497, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTransportRequiredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 60), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTransportRequiredTemp);
				cmbTransportRequiredComboBox cmbTransportRequired = (cmbTransportRequiredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportRequiredComboBox.class, m_cmbTransportRequiredTemp);
				super.addComboBox(cmbTransportRequired);
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 224, 497, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbInterpreterRequiredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbInterpreterRequiredTemp);
				cmbInterpreterRequiredComboBox cmbInterpreterRequired = (cmbInterpreterRequiredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInterpreterRequiredComboBox.class, m_cmbInterpreterRequiredTemp);
				super.addComboBox(cmbInterpreterRequired);
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 192, 153, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLateralitySecondTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLateralitySecondTemp);
				cmbLateralitySecondComboBox cmbLateralitySecond = (cmbLateralitySecondComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralitySecondComboBox.class, m_cmbLateralitySecondTemp);
				super.addComboBox(cmbLateralitySecond);
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 192, 89, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLateralityTemp);
				cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
				super.addComboBox(cmbLaterality);
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 191, 200, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPriorityTemp);
				cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
				super.addComboBox(cmbPriority);
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 191, 222, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbAnaestheticTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbAnaestheticTypeTemp);
				cmbAnaestheticTypeComboBox cmbAnaestheticType = (cmbAnaestheticTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticTypeComboBox.class, m_cmbAnaestheticTypeTemp);
				super.addComboBox(cmbAnaestheticType);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 440, 383, 247, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbNamedConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbNamedConsultantTemp);
				qmbNamedConsultantComboBox qmbNamedConsultant = (qmbNamedConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbNamedConsultantComboBox.class, m_qmbNamedConsultantTemp);
				super.addComboBox(qmbNamedConsultant);
				RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 192, 129, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureSecondTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureSecondTemp);
				qmbProcedureSecondComboBox qmbProcedureSecond = (qmbProcedureSecondComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureSecondComboBox.class, m_qmbProcedureSecondTemp);
				super.addComboBox(qmbProcedureSecond);
				RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 191, 425, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbElectiveListTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbElectiveListTemp);
				qmbElectiveListComboBox qmbElectiveList = (qmbElectiveListComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListComboBox.class, m_qmbElectiveListTemp);
				super.addComboBox(qmbElectiveList);
				RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 192, 68, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureTemp);
				qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
				super.addComboBox(qmbProcedure);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 296, 284, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 432, 112, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Multiservice Case", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 192, 521, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 576, 497, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 192, 497, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 191, 244, 17, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 240, 449, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 664, 260, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 192, 30, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 191, 260, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 192, 28, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 264, 447, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 360, 258, 69, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 191, 344, 81, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 192, 473, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(3)}));
		
				// RadioButton Controls
				RadioButton tmpGroupProcedureCarriedOut = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupProcedureCarriedOut);
				GroupProcedureCarriedOutRadioButton GroupProcedureCarriedOut = (GroupProcedureCarriedOutRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupProcedureCarriedOutRadioButton.class, tmpGroupProcedureCarriedOut);
				GroupProcedureCarriedOut.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupProcedureCarriedOut);
				RadioButton tmpGroupDaySurgMainTheatre = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupDaySurgMainTheatre);
				GroupDaySurgMainTheatreRadioButton GroupDaySurgMainTheatre = (GroupDaySurgMainTheatreRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupDaySurgMainTheatreRadioButton.class, tmpGroupDaySurgMainTheatre);
				GroupDaySurgMainTheatre.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupDaySurgMainTheatre);
				RadioButton tmpGroupAdditionalProcedureSurgical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupAdditionalProcedureSurgical);
				GroupAdditionalProcedureSurgicalRadioButton GroupAdditionalProcedureSurgical = (GroupAdditionalProcedureSurgicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAdditionalProcedureSurgicalRadioButton.class, tmpGroupAdditionalProcedureSurgical);
				GroupAdditionalProcedureSurgical.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAdditionalProcedureSurgical);
				RadioButton tmpGroupPrimaryProcedureSurgical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupPrimaryProcedureSurgical);
				GroupPrimaryProcedureSurgicalRadioButton GroupPrimaryProcedureSurgical = (GroupPrimaryProcedureSurgicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPrimaryProcedureSurgicalRadioButton.class, tmpGroupPrimaryProcedureSurgical);
				GroupPrimaryProcedureSurgical.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPrimaryProcedureSurgical);
				RadioButton tmpGroupPlanedProceduresSurgical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupPlanedProceduresSurgical);
				GroupPlanedProceduresSurgicalRadioButton GroupPlanedProceduresSurgical = (GroupPlanedProceduresSurgicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPlanedProceduresSurgicalRadioButton.class, tmpGroupPlanedProceduresSurgical);
				GroupPlanedProceduresSurgical.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPlanedProceduresSurgical);
				RadioButton tmpGroupQuestion1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupQuestion1);
				GroupQuestion1RadioButton GroupQuestion1 = (GroupQuestion1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion1RadioButton.class, tmpGroupQuestion1);
				GroupQuestion1.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupQuestion1);
				RadioButton tmpGroupPerioperative = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupPerioperative);
				GroupPerioperativeRadioButton GroupPerioperative = (GroupPerioperativeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPerioperativeRadioButton.class, tmpGroupPerioperative);
				GroupPerioperative.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPerioperative);
				RadioButton tmpGroupElectiveListReason = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupElectiveListReason);
				GroupElectiveListReasonRadioButton GroupElectiveListReason = (GroupElectiveListReasonRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListReasonRadioButton.class, tmpGroupElectiveListReason);
				GroupElectiveListReason.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupElectiveListReason);
			}

			public ims.core.forms.mosquery.IComponent ccResponsibleHCPSUrgical()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccResponsibleHCPSUrgicalValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccResponsibleHCPSUrgicalVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccResponsibleHCPSUrgicalVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccResponsibleHCPSUrgicalEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccResponsibleHCPSUrgicalEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblElectiveListReason()
			{
				return (Label)super.getControl(1);
			}
			public Label lblPeripheralHospital()
			{
				return (Label)super.getControl(3);
			}
			public Label lblRequestedPlannedDateSurgical()
			{
				return (Label)super.getControl(4);
			}
			public Label lblPlanProcedureInSurgical()
			{
				return (Label)super.getControl(5);
			}
			public Label lblTransportRequired()
			{
				return (Label)super.getControl(7);
			}
			public Label lblPreAssessmentRequired()
			{
				return (Label)super.getControl(9);
			}
			public Label lblDaysOfNoticeReq()
			{
				return (Label)super.getControl(10);
			}
			public Label lblpreoperativeOverNights()
			{
				return (Label)super.getControl(11);
			}
			public Label lblReason()
			{
				return (Label)super.getControl(14);
			}
			public Label lblHappyToFollowPerioperativeGuidelines2()
			{
				return (Label)super.getControl(16);
			}
			public Label lblHappyToFollowPerioperativeGuidelines1()
			{
				return (Label)super.getControl(17);
			}
			public Label lblEmailLetterToPreAssessmnetAnaesthetist()
			{
				return (Label)super.getControl(18);
			}
			public Label lblCriticalCareBedRequired()
			{
				return (Label)super.getControl(19);
			}
			public Label lblIntendedProcedureSecond()
			{
				return (Label)super.getControl(20);
			}
			public Label lblLateralitySecond()
			{
				return (Label)super.getControl(21);
			}
			public Label lblDateGivenToPatient()
			{
				return (Label)super.getControl(22);
			}
			public Label lblPosibleDateGivenToPatient()
			{
				return (Label)super.getControl(23);
			}
			public Label lblElectiveList()
			{
				return (Label)super.getControl(24);
			}
			public Label lblProcedure()
			{
				return (Label)super.getControl(25);
			}
			public Label lblLaterality()
			{
				return (Label)super.getControl(26);
			}
			public Label lblDetails()
			{
				return (Label)super.getControl(27);
			}
			public Label lblPriority()
			{
				return (Label)super.getControl(28);
			}
			public Label lblAnaestheticType()
			{
				return (Label)super.getControl(29);
			}
			public Label lblShortNotice()
			{
				return (Label)super.getControl(30);
			}
			public Label lblnumberofdaysofnoticerequired()
			{
				return (Label)super.getControl(31);
			}
			public Label lblDoyouwantthispatientohaveanassessmentofriskbyanAnaesthetist()
			{
				return (Label)super.getControl(32);
			}
			public Label lblIfthispatientisonanticoagulanttherapyareyouhapytooperatewithoutstoppingorchangingthis1()
			{
				return (Label)super.getControl(33);
			}
			public Label lblIfthispatientisonanticoagulanttherapyareyouhapytooperatewithoutstoppingorchangingthis()
			{
				return (Label)super.getControl(34);
			}
			public Label lblProcedureLength()
			{
				return (Label)super.getControl(35);
			}
			public Label lblIsProcedureToBeCarriedOutByConsultant1()
			{
				return (Label)super.getControl(36);
			}
			public Label lblIsProcedureToBeCarriedOutByConsultant()
			{
				return (Label)super.getControl(37);
			}
			public Label lblNameOfClinicianLoggedIn()
			{
				return (Label)super.getControl(38);
			}
			public Label lblComment()
			{
				return (Label)super.getControl(39);
			}
			public Label lblNights()
			{
				return (Label)super.getControl(40);
			}
			public Label lblAnticipatedStay()
			{
				return (Label)super.getControl(41);
			}
			public Button btnUpdateUrgencySurgical()
			{
				return (Button)super.getControl(42);
			}
			public Button btnHideSecondSurgicalProcedure()
			{
				return (Button)super.getControl(43);
			}
			public Button btnShowSecondSurgicalProcedure()
			{
				return (Button)super.getControl(44);
			}
			public TextBox txtSpecialRequirements()
			{
				return (TextBox)super.getControl(45);
			}
			public TextBox txtdummyGroupDaySurgMainTheatre()
			{
				return (TextBox)super.getControl(46);
			}
			public TextBox txtdummyProcedureIstoBeCarriedOut()
			{
				return (TextBox)super.getControl(47);
			}
			public TextBox txtReason()
			{
				return (TextBox)super.getControl(48);
			}
			public TextBox txtdummySurgicalPerioperative()
			{
				return (TextBox)super.getControl(49);
			}
			public TextBox txtdummySurgicalQuestion1()
			{
				return (TextBox)super.getControl(50);
			}
			public TextBox txtdummySurgicalElectiveListReason()
			{
				return (TextBox)super.getControl(51);
			}
			public TextBox txtdetails()
			{
				return (TextBox)super.getControl(52);
			}
			public TextBox txtComment()
			{
				return (TextBox)super.getControl(53);
			}
			public DateControl dteRequestedPlannedDateSurgical()
			{
				return (DateControl)super.getControl(54);
			}
			public DateControl dteDateGivenToPatient()
			{
				return (DateControl)super.getControl(55);
			}
			public cmbPeripheralLocationComboBox cmbPeripheralLocation()
			{
				return (cmbPeripheralLocationComboBox)super.getComboBox(0);
			}
			public cmbTransportRequiredComboBox cmbTransportRequired()
			{
				return (cmbTransportRequiredComboBox)super.getComboBox(1);
			}
			public cmbInterpreterRequiredComboBox cmbInterpreterRequired()
			{
				return (cmbInterpreterRequiredComboBox)super.getComboBox(2);
			}
			public cmbLateralitySecondComboBox cmbLateralitySecond()
			{
				return (cmbLateralitySecondComboBox)super.getComboBox(3);
			}
			public cmbLateralityComboBox cmbLaterality()
			{
				return (cmbLateralityComboBox)super.getComboBox(4);
			}
			public cmbPriorityComboBox cmbPriority()
			{
				return (cmbPriorityComboBox)super.getComboBox(5);
			}
			public cmbAnaestheticTypeComboBox cmbAnaestheticType()
			{
				return (cmbAnaestheticTypeComboBox)super.getComboBox(6);
			}
			public qmbNamedConsultantComboBox qmbNamedConsultant()
			{
				return (qmbNamedConsultantComboBox)super.getComboBox(7);
			}
			public qmbProcedureSecondComboBox qmbProcedureSecond()
			{
				return (qmbProcedureSecondComboBox)super.getComboBox(8);
			}
			public qmbElectiveListComboBox qmbElectiveList()
			{
				return (qmbElectiveListComboBox)super.getComboBox(9);
			}
			public qmbProcedureComboBox qmbProcedure()
			{
				return (qmbProcedureComboBox)super.getComboBox(10);
			}
			public CheckBox chkAnaesthesisRiskAssessmentRequest()
			{
				return (CheckBox)super.getControl(67);
			}
			public CheckBox chkMultiserviceCase()
			{
				return (CheckBox)super.getControl(68);
			}
			public CheckBox chkSpecialRequirements()
			{
				return (CheckBox)super.getControl(69);
			}
			public CheckBox chkTransportRequired()
			{
				return (CheckBox)super.getControl(70);
			}
			public CheckBox chkInterpreterRequired()
			{
				return (CheckBox)super.getControl(71);
			}
			public CheckBox chkPreassessmentRequired()
			{
				return (CheckBox)super.getControl(72);
			}
			public CheckBox chkPreoperativeOvernightStay()
			{
				return (CheckBox)super.getControl(73);
			}
			public CheckBox chkCriticalCareBedRequired()
			{
				return (CheckBox)super.getControl(74);
			}
			public CheckBox chkPatientDateGivenToPatient()
			{
				return (CheckBox)super.getControl(75);
			}
			public CheckBox chkShortNotice()
			{
				return (CheckBox)super.getControl(76);
			}
			public IntBox intPlanProcedureIn()
			{
				return (IntBox)super.getControl(77);
			}
			public IntBox intPreoperativeOverNights()
			{
				return (IntBox)super.getControl(78);
			}
			public IntBox intNumberOfDaysOfNoticeReq()
			{
				return (IntBox)super.getControl(79);
			}
			public IntBox intProcedureLength()
			{
				return (IntBox)super.getControl(80);
			}
			public IntBox intAnticipatedNights()
			{
				return (IntBox)super.getControl(81);
			}
			public GroupProcedureCarriedOutRadioButton GroupProcedureCarriedOut()
			{
				return (GroupProcedureCarriedOutRadioButton)super.getRadioButton(0);
			}
			public GroupDaySurgMainTheatreRadioButton GroupDaySurgMainTheatre()
			{
				return (GroupDaySurgMainTheatreRadioButton)super.getRadioButton(1);
			}
			public GroupAdditionalProcedureSurgicalRadioButton GroupAdditionalProcedureSurgical()
			{
				return (GroupAdditionalProcedureSurgicalRadioButton)super.getRadioButton(2);
			}
			public GroupPrimaryProcedureSurgicalRadioButton GroupPrimaryProcedureSurgical()
			{
				return (GroupPrimaryProcedureSurgicalRadioButton)super.getRadioButton(3);
			}
			public GroupPlanedProceduresSurgicalRadioButton GroupPlanedProceduresSurgical()
			{
				return (GroupPlanedProceduresSurgicalRadioButton)super.getRadioButton(4);
			}
			public GroupQuestion1RadioButton GroupQuestion1()
			{
				return (GroupQuestion1RadioButton)super.getRadioButton(5);
			}
			public GroupPerioperativeRadioButton GroupPerioperative()
			{
				return (GroupPerioperativeRadioButton)super.getRadioButton(6);
			}
			public GroupElectiveListReasonRadioButton GroupElectiveListReason()
			{
				return (GroupElectiveListReasonRadioButton)super.getRadioButton(7);
			}
		}
		public static class tabPageMedicalContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTransportRequiredMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ApptTransportType getValue()
				{
					return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbInterpreterRequiredMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Language value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Language value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Language getValue()
				{
					return (ims.core.vo.lookups.Language)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Language value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPriorityMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.ReferralUrgency getValue()
				{
					return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLateralitySecondMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRB getValue()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRB value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLateralityMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRB getValue()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRB value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbWardComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbProcedureSecondMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureVo getValue()
				{
					return (ims.core.vo.ProcedureVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbProcedureMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureVo getValue()
				{
					return (ims.core.vo.ProcedureVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbElectiveListMedicalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.ElectiveListConfigurationWLVo getValue()
				{
					return (ims.RefMan.vo.ElectiveListConfigurationWLVo)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.ElectiveListConfigurationWLVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class GroupAdditionalProcedureMedicalRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 312, 144, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper105.getX(), anchoringHelper105.getY(), anchoringHelper105.getWidth(), "All Procedures", startTabIndex.intValue() + 79);
					RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 192, 144, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper106.getX(), anchoringHelper106.getY(), anchoringHelper106.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 78);
				}
				public void setText(GroupAdditionalProcedureMedicalEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAdditionalProcedureMedicalEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAdditionalProcedureMedicalEnumeration.None;
						case 0: return GroupAdditionalProcedureMedicalEnumeration.rdoAllProceduresAdditionalProcMedical;
						case 1: return GroupAdditionalProcedureMedicalEnumeration.rdoSpecialtyHotListAdditionalProcMedical;
					}
					return null;
				}
				public void setValue(GroupAdditionalProcedureMedicalEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAdditionalProcedureMedicalEnumeration.None.id);
				}
				public boolean isEnabled(GroupAdditionalProcedureMedicalEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAdditionalProcedureMedicalEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAdditionalProcedureMedicalEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAdditionalProcedureMedicalEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAdditionalProcedureMedicalEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAdditionalProcedureMedicalEnumeration None = new GroupAdditionalProcedureMedicalEnumeration(-1);
				public static GroupAdditionalProcedureMedicalEnumeration rdoAllProceduresAdditionalProcMedical = new GroupAdditionalProcedureMedicalEnumeration(0);
				public static GroupAdditionalProcedureMedicalEnumeration rdoSpecialtyHotListAdditionalProcMedical = new GroupAdditionalProcedureMedicalEnumeration(1);
				private GroupAdditionalProcedureMedicalEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAdditionalProcedureMedicalEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPrimaryProcedureMedicalRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 312, 64, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper107.getX(), anchoringHelper107.getY(), anchoringHelper107.getWidth(), "All Procedures", startTabIndex.intValue() + 74);
					RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 192, 64, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper108.getX(), anchoringHelper108.getY(), anchoringHelper108.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 73);
				}
				public void setText(GroupPrimaryProcedureMedicalEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPrimaryProcedureMedicalEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPrimaryProcedureMedicalEnumeration.None;
						case 0: return GroupPrimaryProcedureMedicalEnumeration.rdoAllProceduresPrimaryProcMedical;
						case 1: return GroupPrimaryProcedureMedicalEnumeration.rdoSpecialtyHotlistPrinaryProcMedical;
					}
					return null;
				}
				public void setValue(GroupPrimaryProcedureMedicalEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPrimaryProcedureMedicalEnumeration.None.id);
				}
				public boolean isEnabled(GroupPrimaryProcedureMedicalEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPrimaryProcedureMedicalEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPrimaryProcedureMedicalEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPrimaryProcedureMedicalEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPrimaryProcedureMedicalEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPrimaryProcedureMedicalEnumeration None = new GroupPrimaryProcedureMedicalEnumeration(-1);
				public static GroupPrimaryProcedureMedicalEnumeration rdoAllProceduresPrimaryProcMedical = new GroupPrimaryProcedureMedicalEnumeration(0);
				public static GroupPrimaryProcedureMedicalEnumeration rdoSpecialtyHotlistPrinaryProcMedical = new GroupPrimaryProcedureMedicalEnumeration(1);
				private GroupPrimaryProcedureMedicalEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPrimaryProcedureMedicalEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPlanedProceduresMedicalRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 376, 42, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper109.getX(), anchoringHelper109.getY(), anchoringHelper109.getWidth(), "Months", startTabIndex.intValue() + 69);
					RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 312, 42, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper110.getX(), anchoringHelper110.getY(), anchoringHelper110.getWidth(), "Weeks", startTabIndex.intValue() + 68);
					RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 256, 42, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper111.getX(), anchoringHelper111.getY(), anchoringHelper111.getWidth(), "Days", startTabIndex.intValue() + 67);
				}
				public void setText(GroupPlanedProceduresMedicalEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPlanedProceduresMedicalEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPlanedProceduresMedicalEnumeration.None;
						case 0: return GroupPlanedProceduresMedicalEnumeration.rdoMonthPlannedMedical;
						case 1: return GroupPlanedProceduresMedicalEnumeration.rdoWeeksPlannedMedical;
						case 2: return GroupPlanedProceduresMedicalEnumeration.rdoDaysPlannedMedical;
					}
					return null;
				}
				public void setValue(GroupPlanedProceduresMedicalEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPlanedProceduresMedicalEnumeration.None.id);
				}
				public boolean isEnabled(GroupPlanedProceduresMedicalEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPlanedProceduresMedicalEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPlanedProceduresMedicalEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPlanedProceduresMedicalEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPlanedProceduresMedicalEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPlanedProceduresMedicalEnumeration None = new GroupPlanedProceduresMedicalEnumeration(-1);
				public static GroupPlanedProceduresMedicalEnumeration rdoMonthPlannedMedical = new GroupPlanedProceduresMedicalEnumeration(0);
				public static GroupPlanedProceduresMedicalEnumeration rdoWeeksPlannedMedical = new GroupPlanedProceduresMedicalEnumeration(1);
				public static GroupPlanedProceduresMedicalEnumeration rdoDaysPlannedMedical = new GroupPlanedProceduresMedicalEnumeration(2);
				private GroupPlanedProceduresMedicalEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPlanedProceduresMedicalEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupElectiveListReasonMedicalRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 280, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper112.getX(), anchoringHelper112.getY(), anchoringHelper112.getWidth(), "Diagnostic", startTabIndex.intValue() + 65);
					RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 192, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper113.getX(), anchoringHelper113.getY(), anchoringHelper113.getWidth(), "Treatment", startTabIndex.intValue() + 64);
				}
				public void setText(GroupElectiveListReasonMedicalEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupElectiveListReasonMedicalEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupElectiveListReasonMedicalEnumeration.None;
						case 0: return GroupElectiveListReasonMedicalEnumeration.rdoDiagnosticMedical;
						case 1: return GroupElectiveListReasonMedicalEnumeration.rdoTreatmentMedical;
					}
					return null;
				}
				public void setValue(GroupElectiveListReasonMedicalEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupElectiveListReasonMedicalEnumeration.None.id);
				}
				public boolean isEnabled(GroupElectiveListReasonMedicalEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupElectiveListReasonMedicalEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupElectiveListReasonMedicalEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupElectiveListReasonMedicalEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupElectiveListReasonMedicalEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupElectiveListReasonMedicalEnumeration None = new GroupElectiveListReasonMedicalEnumeration(-1);
				public static GroupElectiveListReasonMedicalEnumeration rdoDiagnosticMedical = new GroupElectiveListReasonMedicalEnumeration(0);
				public static GroupElectiveListReasonMedicalEnumeration rdoTreatmentMedical = new GroupElectiveListReasonMedicalEnumeration(1);
				private GroupElectiveListReasonMedicalEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupElectiveListReasonMedicalEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 192, 376, 624, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccResponsibleHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper114.getSize(), instance1, startTabIndex.intValue() + 89, skipContextValidation);
				//ims.framework.Control m_ccResponsibleHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(192), new Integer(376), new Integer(624), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 89), m_ccResponsibleHCPForm, instance1 } );
				ims.framework.Control m_ccResponsibleHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1092),  new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 89), m_ccResponsibleHCPForm, instance1, Boolean.TRUE } );
				super.addControl(m_ccResponsibleHCPControl);
				Menu[] menus1 = m_ccResponsibleHCPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 480, 42, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Planned Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Procedure In:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 8, 506, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Special Requirements:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 448, 482, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 8, 482, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interpreter Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 8, 378, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 443, 314, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Days", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 8, 536, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 256, 346, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nights", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper124 = new RuntimeAnchoring(designSize, runtimeSize, 8, 346, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper124.getX()), new Integer(anchoringHelper124.getY()), new Integer(anchoringHelper124.getWidth()), new Integer(anchoringHelper124.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anticipated Stay:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper125 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper125.getX()), new Integer(anchoringHelper125.getY()), new Integer(anchoringHelper125.getWidth()), new Integer(anchoringHelper125.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Short Notice:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper126 = new RuntimeAnchoring(designSize, runtimeSize, 257, 314, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper126.getX()), new Integer(anchoringHelper126.getY()), new Integer(anchoringHelper126.getWidth()), new Integer(anchoringHelper126.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notice required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper127 = new RuntimeAnchoring(designSize, runtimeSize, 8, 234, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper127.getX()), new Integer(anchoringHelper127.getY()), new Integer(anchoringHelper127.getWidth()), new Integer(anchoringHelper127.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper128 = new RuntimeAnchoring(designSize, runtimeSize, 8, 274, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper128.getX()), new Integer(anchoringHelper128.getY()), new Integer(anchoringHelper128.getWidth()), new Integer(anchoringHelper128.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper129 = new RuntimeAnchoring(designSize, runtimeSize, 8, 454, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper129.getX()), new Integer(anchoringHelper129.getY()), new Integer(anchoringHelper129.getWidth()), new Integer(anchoringHelper129.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper130 = new RuntimeAnchoring(designSize, runtimeSize, 8, 162, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper130.getX()), new Integer(anchoringHelper130.getY()), new Integer(anchoringHelper130.getWidth()), new Integer(anchoringHelper130.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper131 = new RuntimeAnchoring(designSize, runtimeSize, 8, 194, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper131.getX()), new Integer(anchoringHelper131.getY()), new Integer(anchoringHelper131.getWidth()), new Integer(anchoringHelper131.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper132 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper132.getX()), new Integer(anchoringHelper132.getY()), new Integer(anchoringHelper132.getWidth()), new Integer(anchoringHelper132.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper133 = new RuntimeAnchoring(designSize, runtimeSize, 8, 122, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper133.getX()), new Integer(anchoringHelper133.getY()), new Integer(anchoringHelper133.getWidth()), new Integer(anchoringHelper133.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper134 = new RuntimeAnchoring(designSize, runtimeSize, 232, 42, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper134.getX()), new Integer(anchoringHelper134.getY()), new Integer(anchoringHelper134.getWidth()), new Integer(anchoringHelper134.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date given to patient:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper135 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper135.getX()), new Integer(anchoringHelper135.getY()), new Integer(anchoringHelper135.getWidth()), new Integer(anchoringHelper135.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Possible date given to patient?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper136 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper136.getX()), new Integer(anchoringHelper136.getY()), new Integer(anchoringHelper136.getWidth()), new Integer(anchoringHelper136.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper137 = new RuntimeAnchoring(designSize, runtimeSize, 8, 402, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper137.getX()), new Integer(anchoringHelper137.getY()), new Integer(anchoringHelper137.getWidth()), new Integer(anchoringHelper137.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper138 = new RuntimeAnchoring(designSize, runtimeSize, 8, 427, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper138.getX()), new Integer(anchoringHelper138.getY()), new Integer(anchoringHelper138.getWidth()), new Integer(anchoringHelper138.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper139 = new RuntimeAnchoring(designSize, runtimeSize, 512, 271, 120, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper139.getX()), new Integer(anchoringHelper139.getY()), new Integer(anchoringHelper139.getWidth()), new Integer(anchoringHelper139.getHeight()), new Integer(startTabIndex.intValue() + 85), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Update Urgency", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper140 = new RuntimeAnchoring(designSize, runtimeSize, 776, 191, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper140.getX()), new Integer(anchoringHelper140.getY()), new Integer(anchoringHelper140.getWidth()), new Integer(anchoringHelper140.getHeight()), new Integer(startTabIndex.intValue() + 82), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "-", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper141 = new RuntimeAnchoring(designSize, runtimeSize, 776, 120, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper141.getX()), new Integer(anchoringHelper141.getY()), new Integer(anchoringHelper141.getWidth()), new Integer(anchoringHelper141.getHeight()), new Integer(startTabIndex.intValue() + 77), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "+", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper142 = new RuntimeAnchoring(designSize, runtimeSize, 224, 504, 576, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper142.getX()), new Integer(anchoringHelper142.getY()), new Integer(anchoringHelper142.getWidth()), new Integer(anchoringHelper142.getHeight()), new Integer(startTabIndex.intValue() + 99), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper143 = new RuntimeAnchoring(designSize, runtimeSize, 192, 536, 608, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper143.getX()), new Integer(anchoringHelper143.getY()), new Integer(anchoringHelper143.getWidth()), new Integer(anchoringHelper143.getHeight()), new Integer(startTabIndex.intValue() + 100), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper144 = new RuntimeAnchoring(designSize, runtimeSize, 192, 232, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper144.getX()), new Integer(anchoringHelper144.getY()), new Integer(anchoringHelper144.getWidth()), new Integer(anchoringHelper144.getHeight()), new Integer(startTabIndex.intValue() + 83), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper145 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1123), new Integer(anchoringHelper145.getX()), new Integer(anchoringHelper145.getY()), new Integer(anchoringHelper145.getWidth()), new Integer(anchoringHelper145.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper146 = new RuntimeAnchoring(designSize, runtimeSize, 632, 40, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1124), new Integer(anchoringHelper146.getX()), new Integer(anchoringHelper146.getY()), new Integer(anchoringHelper146.getWidth()), new Integer(anchoringHelper146.getHeight()), new Integer(startTabIndex.intValue() + 70), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper147 = new RuntimeAnchoring(designSize, runtimeSize, 368, 40, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1125), new Integer(anchoringHelper147.getX()), new Integer(anchoringHelper147.getY()), new Integer(anchoringHelper147.getWidth()), new Integer(anchoringHelper147.getHeight()), new Integer(startTabIndex.intValue() + 72), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper148 = new RuntimeAnchoring(designSize, runtimeSize, 608, 480, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTransportRequiredMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1126), new Integer(anchoringHelper148.getX()), new Integer(anchoringHelper148.getY()), new Integer(anchoringHelper148.getWidth()), new Integer(anchoringHelper148.getHeight()), new Integer(startTabIndex.intValue() + 97), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTransportRequiredMedicalTemp);
				cmbTransportRequiredMedicalComboBox cmbTransportRequiredMedical = (cmbTransportRequiredMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportRequiredMedicalComboBox.class, m_cmbTransportRequiredMedicalTemp);
				super.addComboBox(cmbTransportRequiredMedical);
				RuntimeAnchoring anchoringHelper149 = new RuntimeAnchoring(designSize, runtimeSize, 224, 480, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbInterpreterRequiredMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1127), new Integer(anchoringHelper149.getX()), new Integer(anchoringHelper149.getY()), new Integer(anchoringHelper149.getWidth()), new Integer(anchoringHelper149.getHeight()), new Integer(startTabIndex.intValue() + 95), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbInterpreterRequiredMedicalTemp);
				cmbInterpreterRequiredMedicalComboBox cmbInterpreterRequiredMedical = (cmbInterpreterRequiredMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInterpreterRequiredMedicalComboBox.class, m_cmbInterpreterRequiredMedicalTemp);
				super.addComboBox(cmbInterpreterRequiredMedical);
				RuntimeAnchoring anchoringHelper150 = new RuntimeAnchoring(designSize, runtimeSize, 192, 272, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbPriorityMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1128), new Integer(anchoringHelper150.getX()), new Integer(anchoringHelper150.getY()), new Integer(anchoringHelper150.getWidth()), new Integer(anchoringHelper150.getHeight()), new Integer(startTabIndex.intValue() + 84), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPriorityMedicalTemp);
				cmbPriorityMedicalComboBox cmbPriorityMedical = (cmbPriorityMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityMedicalComboBox.class, m_cmbPriorityMedicalTemp);
				super.addComboBox(cmbPriorityMedical);
				RuntimeAnchoring anchoringHelper151 = new RuntimeAnchoring(designSize, runtimeSize, 192, 192, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLateralitySecondMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1129), new Integer(anchoringHelper151.getX()), new Integer(anchoringHelper151.getY()), new Integer(anchoringHelper151.getWidth()), new Integer(anchoringHelper151.getHeight()), new Integer(startTabIndex.intValue() + 81), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLateralitySecondMedicalTemp);
				cmbLateralitySecondMedicalComboBox cmbLateralitySecondMedical = (cmbLateralitySecondMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralitySecondMedicalComboBox.class, m_cmbLateralitySecondMedicalTemp);
				super.addComboBox(cmbLateralitySecondMedical);
				RuntimeAnchoring anchoringHelper152 = new RuntimeAnchoring(designSize, runtimeSize, 192, 120, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLateralityMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1130), new Integer(anchoringHelper152.getX()), new Integer(anchoringHelper152.getY()), new Integer(anchoringHelper152.getWidth()), new Integer(anchoringHelper152.getHeight()), new Integer(startTabIndex.intValue() + 76), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLateralityMedicalTemp);
				cmbLateralityMedicalComboBox cmbLateralityMedical = (cmbLateralityMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityMedicalComboBox.class, m_cmbLateralityMedicalTemp);
				super.addComboBox(cmbLateralityMedical);
				RuntimeAnchoring anchoringHelper153 = new RuntimeAnchoring(designSize, runtimeSize, 192, 425, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1131), new Integer(anchoringHelper153.getX()), new Integer(anchoringHelper153.getY()), new Integer(anchoringHelper153.getWidth()), new Integer(anchoringHelper153.getHeight()), new Integer(startTabIndex.intValue() + 92), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbHospitalTemp);
				cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
				super.addComboBox(cmbHospital);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper154 = new RuntimeAnchoring(designSize, runtimeSize, 192, 452, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1132), new Integer(anchoringHelper154.getX()), new Integer(anchoringHelper154.getY()), new Integer(anchoringHelper154.getWidth()), new Integer(anchoringHelper154.getHeight()), new Integer(startTabIndex.intValue() + 93), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbWardTemp);
				qmbWardComboBox qmbWard = (qmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbWardComboBox.class, m_qmbWardTemp);
				super.addComboBox(qmbWard);
				RuntimeAnchoring anchoringHelper155 = new RuntimeAnchoring(designSize, runtimeSize, 192, 160, 608, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureSecondMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1133), new Integer(anchoringHelper155.getX()), new Integer(anchoringHelper155.getY()), new Integer(anchoringHelper155.getWidth()), new Integer(anchoringHelper155.getHeight()), new Integer(startTabIndex.intValue() + 80), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureSecondMedicalTemp);
				qmbProcedureSecondMedicalComboBox qmbProcedureSecondMedical = (qmbProcedureSecondMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureSecondMedicalComboBox.class, m_qmbProcedureSecondMedicalTemp);
				super.addComboBox(qmbProcedureSecondMedical);
				RuntimeAnchoring anchoringHelper156 = new RuntimeAnchoring(designSize, runtimeSize, 192, 80, 608, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1134), new Integer(anchoringHelper156.getX()), new Integer(anchoringHelper156.getY()), new Integer(anchoringHelper156.getWidth()), new Integer(anchoringHelper156.getHeight()), new Integer(startTabIndex.intValue() + 75), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureMedicalTemp);
				qmbProcedureMedicalComboBox qmbProcedureMedical = (qmbProcedureMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureMedicalComboBox.class, m_qmbProcedureMedicalTemp);
				super.addComboBox(qmbProcedureMedical);
				RuntimeAnchoring anchoringHelper157 = new RuntimeAnchoring(designSize, runtimeSize, 192, 400, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbElectiveListMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1135), new Integer(anchoringHelper157.getX()), new Integer(anchoringHelper157.getY()), new Integer(anchoringHelper157.getWidth()), new Integer(anchoringHelper157.getHeight()), new Integer(startTabIndex.intValue() + 91), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbElectiveListMedicalTemp);
				qmbElectiveListMedicalComboBox qmbElectiveListMedical = (qmbElectiveListMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListMedicalComboBox.class, m_qmbElectiveListMedicalTemp);
				super.addComboBox(qmbElectiveListMedical);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper158 = new RuntimeAnchoring(designSize, runtimeSize, 192, 506, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1136), new Integer(anchoringHelper158.getX()), new Integer(anchoringHelper158.getY()), new Integer(anchoringHelper158.getWidth()), new Integer(anchoringHelper158.getHeight()), new Integer(startTabIndex.intValue() + 98), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper159 = new RuntimeAnchoring(designSize, runtimeSize, 576, 482, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1137), new Integer(anchoringHelper159.getX()), new Integer(anchoringHelper159.getY()), new Integer(anchoringHelper159.getWidth()), new Integer(anchoringHelper159.getHeight()), new Integer(startTabIndex.intValue() + 96), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper160 = new RuntimeAnchoring(designSize, runtimeSize, 192, 482, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1138), new Integer(anchoringHelper160.getX()), new Integer(anchoringHelper160.getY()), new Integer(anchoringHelper160.getWidth()), new Integer(anchoringHelper160.getHeight()), new Integer(startTabIndex.intValue() + 94), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper161 = new RuntimeAnchoring(designSize, runtimeSize, 192, 314, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1139), new Integer(anchoringHelper161.getX()), new Integer(anchoringHelper161.getY()), new Integer(anchoringHelper161.getWidth()), new Integer(anchoringHelper161.getHeight()), new Integer(startTabIndex.intValue() + 86), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper162 = new RuntimeAnchoring(designSize, runtimeSize, 192, 42, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1140), new Integer(anchoringHelper162.getX()), new Integer(anchoringHelper162.getY()), new Integer(anchoringHelper162.getWidth()), new Integer(anchoringHelper162.getHeight()), new Integer(startTabIndex.intValue() + 71), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper163 = new RuntimeAnchoring(designSize, runtimeSize, 192, 40, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1141), new Integer(anchoringHelper163.getX()), new Integer(anchoringHelper163.getY()), new Integer(anchoringHelper163.getWidth()), new Integer(anchoringHelper163.getHeight()), new Integer(startTabIndex.intValue() + 66), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper164 = new RuntimeAnchoring(designSize, runtimeSize, 192, 344, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1142), new Integer(anchoringHelper164.getX()), new Integer(anchoringHelper164.getY()), new Integer(anchoringHelper164.getWidth()), new Integer(anchoringHelper164.getHeight()), new Integer(startTabIndex.intValue() + 88), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper165 = new RuntimeAnchoring(designSize, runtimeSize, 361, 312, 69, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1143), new Integer(anchoringHelper165.getX()), new Integer(anchoringHelper165.getY()), new Integer(anchoringHelper165.getWidth()), new Integer(anchoringHelper165.getHeight()), new Integer(startTabIndex.intValue() + 87), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpGroupAdditionalProcedureMedical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1144), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupAdditionalProcedureMedical);
				GroupAdditionalProcedureMedicalRadioButton GroupAdditionalProcedureMedical = (GroupAdditionalProcedureMedicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAdditionalProcedureMedicalRadioButton.class, tmpGroupAdditionalProcedureMedical);
				GroupAdditionalProcedureMedical.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAdditionalProcedureMedical);
				RadioButton tmpGroupPrimaryProcedureMedical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1145), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupPrimaryProcedureMedical);
				GroupPrimaryProcedureMedicalRadioButton GroupPrimaryProcedureMedical = (GroupPrimaryProcedureMedicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPrimaryProcedureMedicalRadioButton.class, tmpGroupPrimaryProcedureMedical);
				GroupPrimaryProcedureMedical.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPrimaryProcedureMedical);
				RadioButton tmpGroupPlanedProceduresMedical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1146), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupPlanedProceduresMedical);
				GroupPlanedProceduresMedicalRadioButton GroupPlanedProceduresMedical = (GroupPlanedProceduresMedicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPlanedProceduresMedicalRadioButton.class, tmpGroupPlanedProceduresMedical);
				GroupPlanedProceduresMedical.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPlanedProceduresMedical);
				RadioButton tmpGroupElectiveListReasonMedical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1147), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupElectiveListReasonMedical);
				GroupElectiveListReasonMedicalRadioButton GroupElectiveListReasonMedical = (GroupElectiveListReasonMedicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListReasonMedicalRadioButton.class, tmpGroupElectiveListReasonMedical);
				GroupElectiveListReasonMedical.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupElectiveListReasonMedical);
			}

			public ims.core.forms.mosquery.IComponent ccResponsibleHCP()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccResponsibleHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccResponsibleHCPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccResponsibleHCPVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccResponsibleHCPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccResponsibleHCPEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblRequestedPlannedMedical()
			{
				return (Label)super.getControl(1);
			}
			public Label lblPlanProcedureInMedical()
			{
				return (Label)super.getControl(2);
			}
			public Label lblTransportRequiredMedical()
			{
				return (Label)super.getControl(4);
			}
			public Label lblDaysMedical()
			{
				return (Label)super.getControl(7);
			}
			public Label lblCommentMedical()
			{
				return (Label)super.getControl(8);
			}
			public Label lblNightsMedical()
			{
				return (Label)super.getControl(9);
			}
			public Label lblAnticipatedStayMedical()
			{
				return (Label)super.getControl(10);
			}
			public Label lblShortNoticeMedical()
			{
				return (Label)super.getControl(11);
			}
			public Label lblnumberofdaysofnoticerequiredMedical()
			{
				return (Label)super.getControl(12);
			}
			public Label lblDetailsMedical()
			{
				return (Label)super.getControl(13);
			}
			public Label lblPriorityMedical()
			{
				return (Label)super.getControl(14);
			}
			public Label lblIntendedProcedureSecondMedical()
			{
				return (Label)super.getControl(16);
			}
			public Label lblLateralitySecondMedical()
			{
				return (Label)super.getControl(17);
			}
			public Label lblProcedureMedical()
			{
				return (Label)super.getControl(18);
			}
			public Label lblLateralityMedical()
			{
				return (Label)super.getControl(19);
			}
			public Label lblDateGivenToPatientMedical()
			{
				return (Label)super.getControl(20);
			}
			public Label lblPosibleDateGivenToPatientMedical()
			{
				return (Label)super.getControl(21);
			}
			public Label lblElectiveListReasonMedical()
			{
				return (Label)super.getControl(22);
			}
			public Label lblElectiveListMedical()
			{
				return (Label)super.getControl(23);
			}
			public Button btnUpdateUrgencyMedical()
			{
				return (Button)super.getControl(25);
			}
			public Button btnHideSecondMedicalProcedure()
			{
				return (Button)super.getControl(26);
			}
			public Button btnShowSecondMedicalProcedure()
			{
				return (Button)super.getControl(27);
			}
			public TextBox txtSpecialRequirementsMedical()
			{
				return (TextBox)super.getControl(28);
			}
			public TextBox txtCommentMedical()
			{
				return (TextBox)super.getControl(29);
			}
			public TextBox txtdetailsMedical()
			{
				return (TextBox)super.getControl(30);
			}
			public TextBox txtDummyElectiveReasonMedical()
			{
				return (TextBox)super.getControl(31);
			}
			public DateControl dteRequestedPlannedMedical()
			{
				return (DateControl)super.getControl(32);
			}
			public DateControl dteDateGivemToPatientMedical()
			{
				return (DateControl)super.getControl(33);
			}
			public cmbTransportRequiredMedicalComboBox cmbTransportRequiredMedical()
			{
				return (cmbTransportRequiredMedicalComboBox)super.getComboBox(0);
			}
			public cmbInterpreterRequiredMedicalComboBox cmbInterpreterRequiredMedical()
			{
				return (cmbInterpreterRequiredMedicalComboBox)super.getComboBox(1);
			}
			public cmbPriorityMedicalComboBox cmbPriorityMedical()
			{
				return (cmbPriorityMedicalComboBox)super.getComboBox(2);
			}
			public cmbLateralitySecondMedicalComboBox cmbLateralitySecondMedical()
			{
				return (cmbLateralitySecondMedicalComboBox)super.getComboBox(3);
			}
			public cmbLateralityMedicalComboBox cmbLateralityMedical()
			{
				return (cmbLateralityMedicalComboBox)super.getComboBox(4);
			}
			public cmbHospitalComboBox cmbHospital()
			{
				return (cmbHospitalComboBox)super.getComboBox(5);
			}
			public qmbWardComboBox qmbWard()
			{
				return (qmbWardComboBox)super.getComboBox(6);
			}
			public qmbProcedureSecondMedicalComboBox qmbProcedureSecondMedical()
			{
				return (qmbProcedureSecondMedicalComboBox)super.getComboBox(7);
			}
			public qmbProcedureMedicalComboBox qmbProcedureMedical()
			{
				return (qmbProcedureMedicalComboBox)super.getComboBox(8);
			}
			public qmbElectiveListMedicalComboBox qmbElectiveListMedical()
			{
				return (qmbElectiveListMedicalComboBox)super.getComboBox(9);
			}
			public CheckBox chkSpecialRequirementsMedical()
			{
				return (CheckBox)super.getControl(44);
			}
			public CheckBox chkTransportRequiredNedical()
			{
				return (CheckBox)super.getControl(45);
			}
			public CheckBox chkInterpreterRequiredMedical()
			{
				return (CheckBox)super.getControl(46);
			}
			public CheckBox chkShortNoticeMedical()
			{
				return (CheckBox)super.getControl(47);
			}
			public CheckBox chkPatientDateGivenToPatientMedical()
			{
				return (CheckBox)super.getControl(48);
			}
			public IntBox intPlanProcedureInMedical()
			{
				return (IntBox)super.getControl(49);
			}
			public IntBox intAnticipatedNightsMedical()
			{
				return (IntBox)super.getControl(50);
			}
			public IntBox intNumberOfDaysOfNoticeReqMedical()
			{
				return (IntBox)super.getControl(51);
			}
			public GroupAdditionalProcedureMedicalRadioButton GroupAdditionalProcedureMedical()
			{
				return (GroupAdditionalProcedureMedicalRadioButton)super.getRadioButton(0);
			}
			public GroupPrimaryProcedureMedicalRadioButton GroupPrimaryProcedureMedical()
			{
				return (GroupPrimaryProcedureMedicalRadioButton)super.getRadioButton(1);
			}
			public GroupPlanedProceduresMedicalRadioButton GroupPlanedProceduresMedical()
			{
				return (GroupPlanedProceduresMedicalRadioButton)super.getRadioButton(2);
			}
			public GroupElectiveListReasonMedicalRadioButton GroupElectiveListReasonMedical()
			{
				return (GroupElectiveListReasonMedicalRadioButton)super.getRadioButton(3);
			}
		}
		public static class tabPageEndoscopyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTransportRequiredEndoscopyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ApptTransportType getValue()
				{
					return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbInterpreterRequiredEndoscopyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Language value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Language value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Language getValue()
				{
					return (ims.core.vo.lookups.Language)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Language value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbUrgencyEndoscopyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.ReferralUrgency getValue()
				{
					return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbProcedureEndoscopyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureVo getValue()
				{
					return (ims.core.vo.ProcedureVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbElectiveListEndoscopyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.ElectiveListConfigurationWLVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.ElectiveListConfigurationWLVo getValue()
				{
					return (ims.RefMan.vo.ElectiveListConfigurationWLVo)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.ElectiveListConfigurationWLVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class GroupPrecolonoscopyReqRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper166 = new RuntimeAnchoring(designSize, runtimeSize, 248, 208, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper166.getX(), anchoringHelper166.getY(), anchoringHelper166.getWidth(), "No", startTabIndex.intValue() + 121);
					RuntimeAnchoring anchoringHelper167 = new RuntimeAnchoring(designSize, runtimeSize, 192, 208, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper167.getX(), anchoringHelper167.getY(), anchoringHelper167.getWidth(), "Yes", startTabIndex.intValue() + 120);
				}
				public void setText(GroupPrecolonoscopyReqEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPrecolonoscopyReqEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPrecolonoscopyReqEnumeration.None;
						case 0: return GroupPrecolonoscopyReqEnumeration.rdoNoPreColonoscopyR;
						case 1: return GroupPrecolonoscopyReqEnumeration.rdoYesPreColonoscopyR;
					}
					return null;
				}
				public void setValue(GroupPrecolonoscopyReqEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPrecolonoscopyReqEnumeration.None.id);
				}
				public boolean isEnabled(GroupPrecolonoscopyReqEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPrecolonoscopyReqEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPrecolonoscopyReqEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPrecolonoscopyReqEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPrecolonoscopyReqEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPrecolonoscopyReqEnumeration None = new GroupPrecolonoscopyReqEnumeration(-1);
				public static GroupPrecolonoscopyReqEnumeration rdoNoPreColonoscopyR = new GroupPrecolonoscopyReqEnumeration(0);
				public static GroupPrecolonoscopyReqEnumeration rdoYesPreColonoscopyR = new GroupPrecolonoscopyReqEnumeration(1);
				private GroupPrecolonoscopyReqEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPrecolonoscopyReqEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPatientMedicationStopRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper168 = new RuntimeAnchoring(designSize, runtimeSize, 640, 266, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper168.getX(), anchoringHelper168.getY(), anchoringHelper168.getWidth(), "Unknown", startTabIndex.intValue() + 129);
					RuntimeAnchoring anchoringHelper169 = new RuntimeAnchoring(designSize, runtimeSize, 584, 266, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper169.getX(), anchoringHelper169.getY(), anchoringHelper169.getWidth(), "No", startTabIndex.intValue() + 128);
					RuntimeAnchoring anchoringHelper170 = new RuntimeAnchoring(designSize, runtimeSize, 528, 266, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper170.getX(), anchoringHelper170.getY(), anchoringHelper170.getWidth(), "Yes", startTabIndex.intValue() + 127);
				}
				public void setText(GroupPatientMedicationStopEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPatientMedicationStopEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPatientMedicationStopEnumeration.None;
						case 0: return GroupPatientMedicationStopEnumeration.rdoUnknownPatientMedicationStop;
						case 1: return GroupPatientMedicationStopEnumeration.rdoNoPatientMedicationStop;
						case 2: return GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop;
					}
					return null;
				}
				public void setValue(GroupPatientMedicationStopEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPatientMedicationStopEnumeration.None.id);
				}
				public boolean isEnabled(GroupPatientMedicationStopEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPatientMedicationStopEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPatientMedicationStopEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPatientMedicationStopEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPatientMedicationStopEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPatientMedicationStopEnumeration None = new GroupPatientMedicationStopEnumeration(-1);
				public static GroupPatientMedicationStopEnumeration rdoUnknownPatientMedicationStop = new GroupPatientMedicationStopEnumeration(0);
				public static GroupPatientMedicationStopEnumeration rdoNoPatientMedicationStop = new GroupPatientMedicationStopEnumeration(1);
				public static GroupPatientMedicationStopEnumeration rdoYesPatientMedicationStop = new GroupPatientMedicationStopEnumeration(2);
				private GroupPatientMedicationStopEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPatientMedicationStopEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPlanedProceduresEndoscopyRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper171 = new RuntimeAnchoring(designSize, runtimeSize, 376, 32, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper171.getX(), anchoringHelper171.getY(), anchoringHelper171.getWidth(), "Months", startTabIndex.intValue() + 106);
					RuntimeAnchoring anchoringHelper172 = new RuntimeAnchoring(designSize, runtimeSize, 312, 32, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper172.getX(), anchoringHelper172.getY(), anchoringHelper172.getWidth(), "Weeks", startTabIndex.intValue() + 105);
					RuntimeAnchoring anchoringHelper173 = new RuntimeAnchoring(designSize, runtimeSize, 256, 32, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper173.getX(), anchoringHelper173.getY(), anchoringHelper173.getWidth(), "Days", startTabIndex.intValue() + 104);
				}
				public void setText(GroupPlanedProceduresEndoscopyEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPlanedProceduresEndoscopyEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPlanedProceduresEndoscopyEnumeration.None;
						case 0: return GroupPlanedProceduresEndoscopyEnumeration.MonthsEndoscopy;
						case 1: return GroupPlanedProceduresEndoscopyEnumeration.rdoWeeksEndoscopy;
						case 2: return GroupPlanedProceduresEndoscopyEnumeration.rdoDaysEndoscopy;
					}
					return null;
				}
				public void setValue(GroupPlanedProceduresEndoscopyEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPlanedProceduresEndoscopyEnumeration.None.id);
				}
				public boolean isEnabled(GroupPlanedProceduresEndoscopyEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPlanedProceduresEndoscopyEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPlanedProceduresEndoscopyEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPlanedProceduresEndoscopyEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPlanedProceduresEndoscopyEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPlanedProceduresEndoscopyEnumeration None = new GroupPlanedProceduresEndoscopyEnumeration(-1);
				public static GroupPlanedProceduresEndoscopyEnumeration MonthsEndoscopy = new GroupPlanedProceduresEndoscopyEnumeration(0);
				public static GroupPlanedProceduresEndoscopyEnumeration rdoWeeksEndoscopy = new GroupPlanedProceduresEndoscopyEnumeration(1);
				public static GroupPlanedProceduresEndoscopyEnumeration rdoDaysEndoscopy = new GroupPlanedProceduresEndoscopyEnumeration(2);
				private GroupPlanedProceduresEndoscopyEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPlanedProceduresEndoscopyEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupKeyTherapeuticEquipmentRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper174 = new RuntimeAnchoring(designSize, runtimeSize, 424, 366, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper174.getX(), anchoringHelper174.getY(), anchoringHelper174.getWidth(), "No", startTabIndex.intValue() + 135);
					RuntimeAnchoring anchoringHelper175 = new RuntimeAnchoring(designSize, runtimeSize, 368, 366, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper175.getX(), anchoringHelper175.getY(), anchoringHelper175.getWidth(), "Yes", startTabIndex.intValue() + 134);
				}
				public void setText(GroupKeyTherapeuticEquipmentEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupKeyTherapeuticEquipmentEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupKeyTherapeuticEquipmentEnumeration.None;
						case 0: return GroupKeyTherapeuticEquipmentEnumeration.rdoNoKeyTherapeuticEquipment;
						case 1: return GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment;
					}
					return null;
				}
				public void setValue(GroupKeyTherapeuticEquipmentEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupKeyTherapeuticEquipmentEnumeration.None.id);
				}
				public boolean isEnabled(GroupKeyTherapeuticEquipmentEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupKeyTherapeuticEquipmentEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupKeyTherapeuticEquipmentEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupKeyTherapeuticEquipmentEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupKeyTherapeuticEquipmentEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupKeyTherapeuticEquipmentEnumeration None = new GroupKeyTherapeuticEquipmentEnumeration(-1);
				public static GroupKeyTherapeuticEquipmentEnumeration rdoNoKeyTherapeuticEquipment = new GroupKeyTherapeuticEquipmentEnumeration(0);
				public static GroupKeyTherapeuticEquipmentEnumeration rdoYesKeyTherapeuticEquipment = new GroupKeyTherapeuticEquipmentEnumeration(1);
				private GroupKeyTherapeuticEquipmentEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupKeyTherapeuticEquipmentEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupAssessmentOfRenalFunctionRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper176 = new RuntimeAnchoring(designSize, runtimeSize, 552, 333, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper176.getX(), anchoringHelper176.getY(), anchoringHelper176.getWidth(), "No", startTabIndex.intValue() + 133);
					RuntimeAnchoring anchoringHelper177 = new RuntimeAnchoring(designSize, runtimeSize, 496, 333, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper177.getX(), anchoringHelper177.getY(), anchoringHelper177.getWidth(), "Yes", startTabIndex.intValue() + 132);
				}
				public void setText(GroupAssessmentOfRenalFunctionEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAssessmentOfRenalFunctionEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAssessmentOfRenalFunctionEnumeration.None;
						case 0: return GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction;
						case 1: return GroupAssessmentOfRenalFunctionEnumeration.rdoYesAssessmentOfRenalFunction;
					}
					return null;
				}
				public void setValue(GroupAssessmentOfRenalFunctionEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAssessmentOfRenalFunctionEnumeration.None.id);
				}
				public boolean isEnabled(GroupAssessmentOfRenalFunctionEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAssessmentOfRenalFunctionEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAssessmentOfRenalFunctionEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAssessmentOfRenalFunctionEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAssessmentOfRenalFunctionEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAssessmentOfRenalFunctionEnumeration None = new GroupAssessmentOfRenalFunctionEnumeration(-1);
				public static GroupAssessmentOfRenalFunctionEnumeration rdoNoAssessmentOfRenalFunction = new GroupAssessmentOfRenalFunctionEnumeration(0);
				public static GroupAssessmentOfRenalFunctionEnumeration rdoYesAssessmentOfRenalFunction = new GroupAssessmentOfRenalFunctionEnumeration(1);
				private GroupAssessmentOfRenalFunctionEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAssessmentOfRenalFunctionEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupAnticoagulantReceivingRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper178 = new RuntimeAnchoring(designSize, runtimeSize, 552, 249, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper178.getX(), anchoringHelper178.getY(), anchoringHelper178.getWidth(), "Unknown", startTabIndex.intValue() + 126);
					RuntimeAnchoring anchoringHelper179 = new RuntimeAnchoring(designSize, runtimeSize, 499, 249, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper179.getX(), anchoringHelper179.getY(), anchoringHelper179.getWidth(), "No", startTabIndex.intValue() + 125);
					RuntimeAnchoring anchoringHelper180 = new RuntimeAnchoring(designSize, runtimeSize, 448, 249, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper180.getX(), anchoringHelper180.getY(), anchoringHelper180.getWidth(), "Yes", startTabIndex.intValue() + 124);
				}
				public void setText(GroupAnticoagulantReceivingEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAnticoagulantReceivingEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAnticoagulantReceivingEnumeration.None;
						case 0: return GroupAnticoagulantReceivingEnumeration.rdoUnknownAnticoagulantReceiving;
						case 1: return GroupAnticoagulantReceivingEnumeration.rdoNoAnticoagulantReceiving;
						case 2: return GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving;
					}
					return null;
				}
				public void setValue(GroupAnticoagulantReceivingEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAnticoagulantReceivingEnumeration.None.id);
				}
				public boolean isEnabled(GroupAnticoagulantReceivingEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAnticoagulantReceivingEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAnticoagulantReceivingEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAnticoagulantReceivingEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAnticoagulantReceivingEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAnticoagulantReceivingEnumeration None = new GroupAnticoagulantReceivingEnumeration(-1);
				public static GroupAnticoagulantReceivingEnumeration rdoUnknownAnticoagulantReceiving = new GroupAnticoagulantReceivingEnumeration(0);
				public static GroupAnticoagulantReceivingEnumeration rdoNoAnticoagulantReceiving = new GroupAnticoagulantReceivingEnumeration(1);
				public static GroupAnticoagulantReceivingEnumeration rdoYesAnticoagulantReceiving = new GroupAnticoagulantReceivingEnumeration(2);
				private GroupAnticoagulantReceivingEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAnticoagulantReceivingEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupProcCarriedByNurseRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper181 = new RuntimeAnchoring(designSize, runtimeSize, 629, 186, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper181.getX(), anchoringHelper181.getY(), anchoringHelper181.getWidth(), "No", startTabIndex.intValue() + 119);
					RuntimeAnchoring anchoringHelper182 = new RuntimeAnchoring(designSize, runtimeSize, 573, 186, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper182.getX(), anchoringHelper182.getY(), anchoringHelper182.getWidth(), "Yes", startTabIndex.intValue() + 118);
				}
				public void setText(GroupProcCarriedByNurseEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupProcCarriedByNurseEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupProcCarriedByNurseEnumeration.None;
						case 0: return GroupProcCarriedByNurseEnumeration.rdoNoProcCarriedByNurse;
						case 1: return GroupProcCarriedByNurseEnumeration.rdoYesProcCarriedByNurse;
					}
					return null;
				}
				public void setValue(GroupProcCarriedByNurseEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupProcCarriedByNurseEnumeration.None.id);
				}
				public boolean isEnabled(GroupProcCarriedByNurseEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupProcCarriedByNurseEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupProcCarriedByNurseEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupProcCarriedByNurseEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupProcCarriedByNurseEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupProcCarriedByNurseEnumeration None = new GroupProcCarriedByNurseEnumeration(-1);
				public static GroupProcCarriedByNurseEnumeration rdoNoProcCarriedByNurse = new GroupProcCarriedByNurseEnumeration(0);
				public static GroupProcCarriedByNurseEnumeration rdoYesProcCarriedByNurse = new GroupProcCarriedByNurseEnumeration(1);
				private GroupProcCarriedByNurseEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupProcCarriedByNurseEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupGeneralAnaestheticRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper183 = new RuntimeAnchoring(designSize, runtimeSize, 248, 186, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper183.getX(), anchoringHelper183.getY(), anchoringHelper183.getWidth(), "No", startTabIndex.intValue() + 117);
					RuntimeAnchoring anchoringHelper184 = new RuntimeAnchoring(designSize, runtimeSize, 192, 186, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper184.getX(), anchoringHelper184.getY(), anchoringHelper184.getWidth(), "Yes", startTabIndex.intValue() + 116);
				}
				public void setText(GroupGeneralAnaestheticEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupGeneralAnaestheticEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupGeneralAnaestheticEnumeration.None;
						case 0: return GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic;
						case 1: return GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic;
					}
					return null;
				}
				public void setValue(GroupGeneralAnaestheticEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupGeneralAnaestheticEnumeration.None.id);
				}
				public boolean isEnabled(GroupGeneralAnaestheticEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupGeneralAnaestheticEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupGeneralAnaestheticEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupGeneralAnaestheticEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupGeneralAnaestheticEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupGeneralAnaestheticEnumeration None = new GroupGeneralAnaestheticEnumeration(-1);
				public static GroupGeneralAnaestheticEnumeration rdoNoGeneralAnaesthetic = new GroupGeneralAnaestheticEnumeration(0);
				public static GroupGeneralAnaestheticEnumeration rdoYesGeneralAnaesthetic = new GroupGeneralAnaestheticEnumeration(1);
				private GroupGeneralAnaestheticEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupGeneralAnaestheticEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupElectiveListReasonEndoscopyRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper185 = new RuntimeAnchoring(designSize, runtimeSize, 280, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper185.getX(), anchoringHelper185.getY(), anchoringHelper185.getWidth(), "Diagnostic", startTabIndex.intValue() + 102);
					RuntimeAnchoring anchoringHelper186 = new RuntimeAnchoring(designSize, runtimeSize, 192, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper186.getX(), anchoringHelper186.getY(), anchoringHelper186.getWidth(), "Treatment", startTabIndex.intValue() + 101);
				}
				public void setText(GroupElectiveListReasonEndoscopyEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupElectiveListReasonEndoscopyEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupElectiveListReasonEndoscopyEnumeration.None;
						case 0: return GroupElectiveListReasonEndoscopyEnumeration.rdoDiagnosticEndoscopy;
						case 1: return GroupElectiveListReasonEndoscopyEnumeration.rdoTreatmentEndoscopy;
					}
					return null;
				}
				public void setValue(GroupElectiveListReasonEndoscopyEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupElectiveListReasonEndoscopyEnumeration.None.id);
				}
				public boolean isEnabled(GroupElectiveListReasonEndoscopyEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupElectiveListReasonEndoscopyEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupElectiveListReasonEndoscopyEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupElectiveListReasonEndoscopyEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupElectiveListReasonEndoscopyEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupElectiveListReasonEndoscopyEnumeration None = new GroupElectiveListReasonEndoscopyEnumeration(-1);
				public static GroupElectiveListReasonEndoscopyEnumeration rdoDiagnosticEndoscopy = new GroupElectiveListReasonEndoscopyEnumeration(0);
				public static GroupElectiveListReasonEndoscopyEnumeration rdoTreatmentEndoscopy = new GroupElectiveListReasonEndoscopyEnumeration(1);
				private GroupElectiveListReasonEndoscopyEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupElectiveListReasonEndoscopyEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper187 = new RuntimeAnchoring(designSize, runtimeSize, 192, 390, 624, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccResponsibleHCPEndoscopyForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper187.getSize(), instance1, startTabIndex.intValue() + 137, skipContextValidation);
				//ims.framework.Control m_ccResponsibleHCPEndoscopyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1148), new Integer(192), new Integer(390), new Integer(624), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 137), m_ccResponsibleHCPEndoscopyForm, instance1 } );
				ims.framework.Control m_ccResponsibleHCPEndoscopyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1149),  new Integer(anchoringHelper187.getX()), new Integer(anchoringHelper187.getY()), new Integer(anchoringHelper187.getWidth()), new Integer(anchoringHelper187.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 137), m_ccResponsibleHCPEndoscopyForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccResponsibleHCPEndoscopyControl);
				Menu[] menus1 = m_ccResponsibleHCPEndoscopyForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper188 = new RuntimeAnchoring(designSize, runtimeSize, 8, 215, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1150), new Integer(anchoringHelper188.getX()), new Integer(anchoringHelper188.getY()), new Integer(anchoringHelper188.getWidth()), new Integer(anchoringHelper188.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "assessment required?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper189 = new RuntimeAnchoring(designSize, runtimeSize, 5, 202, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1151), new Integer(anchoringHelper189.getX()), new Integer(anchoringHelper189.getY()), new Integer(anchoringHelper189.getWidth()), new Integer(anchoringHelper189.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Is pre-colonoscopy ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper190 = new RuntimeAnchoring(designSize, runtimeSize, 8, 392, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1152), new Integer(anchoringHelper190.getX()), new Integer(anchoringHelper190.getY()), new Integer(anchoringHelper190.getWidth()), new Integer(anchoringHelper190.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper191 = new RuntimeAnchoring(designSize, runtimeSize, 192, 534, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1153), new Integer(anchoringHelper191.getX()), new Integer(anchoringHelper191.getY()), new Integer(anchoringHelper191.getWidth()), new Integer(anchoringHelper191.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper192 = new RuntimeAnchoring(designSize, runtimeSize, 8, 534, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1154), new Integer(anchoringHelper192.getX()), new Integer(anchoringHelper192.getY()), new Integer(anchoringHelper192.getWidth()), new Integer(anchoringHelper192.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Vetting Endoscopist:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper193 = new RuntimeAnchoring(designSize, runtimeSize, 192, 510, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1155), new Integer(anchoringHelper193.getX()), new Integer(anchoringHelper193.getY()), new Integer(anchoringHelper193.getWidth()), new Integer(anchoringHelper193.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper194 = new RuntimeAnchoring(designSize, runtimeSize, 8, 510, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1156), new Integer(anchoringHelper194.getX()), new Integer(anchoringHelper194.getY()), new Integer(anchoringHelper194.getWidth()), new Integer(anchoringHelper194.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper195 = new RuntimeAnchoring(designSize, runtimeSize, 480, 32, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1157), new Integer(anchoringHelper195.getX()), new Integer(anchoringHelper195.getY()), new Integer(anchoringHelper195.getWidth()), new Integer(anchoringHelper195.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Planned Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper196 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1158), new Integer(anchoringHelper196.getX()), new Integer(anchoringHelper196.getY()), new Integer(anchoringHelper196.getWidth()), new Integer(anchoringHelper196.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Procedure In:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper197 = new RuntimeAnchoring(designSize, runtimeSize, 8, 462, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1159), new Integer(anchoringHelper197.getX()), new Integer(anchoringHelper197.getY()), new Integer(anchoringHelper197.getWidth()), new Integer(anchoringHelper197.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Special Requirements:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper198 = new RuntimeAnchoring(designSize, runtimeSize, 448, 439, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1160), new Integer(anchoringHelper198.getX()), new Integer(anchoringHelper198.getY()), new Integer(anchoringHelper198.getWidth()), new Integer(anchoringHelper198.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper199 = new RuntimeAnchoring(designSize, runtimeSize, 8, 439, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1161), new Integer(anchoringHelper199.getX()), new Integer(anchoringHelper199.getY()), new Integer(anchoringHelper199.getWidth()), new Integer(anchoringHelper199.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interpreter Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper200 = new RuntimeAnchoring(designSize, runtimeSize, 8, 231, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1162), new Integer(anchoringHelper200.getX()), new Integer(anchoringHelper200.getY()), new Integer(anchoringHelper200.getWidth()), new Integer(anchoringHelper200.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-Assessment Required? ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper201 = new RuntimeAnchoring(designSize, runtimeSize, 194, 99, 263, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1163), new Integer(anchoringHelper201.getX()), new Integer(anchoringHelper201.getY()), new Integer(anchoringHelper201.getWidth()), new Integer(anchoringHelper201.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Please complete a paper request for this procedure.", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper202 = new RuntimeAnchoring(designSize, runtimeSize, 8, 485, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1164), new Integer(anchoringHelper202.getX()), new Integer(anchoringHelper202.getY()), new Integer(anchoringHelper202.getWidth()), new Integer(anchoringHelper202.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper203 = new RuntimeAnchoring(designSize, runtimeSize, 488, 367, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1165), new Integer(anchoringHelper203.getX()), new Integer(anchoringHelper203.getY()), new Integer(anchoringHelper203.getWidth()), new Integer(anchoringHelper203.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper204 = new RuntimeAnchoring(designSize, runtimeSize, 8, 367, 359, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1166), new Integer(anchoringHelper204.getX()), new Integer(anchoringHelper204.getY()), new Integer(anchoringHelper204.getWidth()), new Integer(anchoringHelper204.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "cognitive or physical capacity issues not covered by this form?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper205 = new RuntimeAnchoring(designSize, runtimeSize, 8, 351, 308, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1167), new Integer(anchoringHelper205.getX()), new Integer(anchoringHelper205.getY()), new Integer(anchoringHelper205.getWidth()), new Integer(anchoringHelper205.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Are there key therapeutic equipment and / or patient", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper206 = new RuntimeAnchoring(designSize, runtimeSize, 608, 333, 209, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1168), new Integer(anchoringHelper206.getX()), new Integer(anchoringHelper206.getY()), new Integer(anchoringHelper206.getWidth()), new Integer(anchoringHelper206.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Please request U&Es, Creatinine and eGFR", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper207 = new RuntimeAnchoring(designSize, runtimeSize, 8, 333, 411, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1169), new Integer(anchoringHelper207.getX()), new Integer(anchoringHelper207.getY()), new Integer(anchoringHelper207.getWidth()), new Integer(anchoringHelper207.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Did patient have an assessment of Renal Function in the last 3 months?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper208 = new RuntimeAnchoring(designSize, runtimeSize, 8, 313, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1170), new Integer(anchoringHelper208.getX()), new Integer(anchoringHelper208.getY()), new Integer(anchoringHelper208.getWidth()), new Integer(anchoringHelper208.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pacemaker / Defibrillator?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper209 = new RuntimeAnchoring(designSize, runtimeSize, 8, 289, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1171), new Integer(anchoringHelper209.getX()), new Integer(anchoringHelper209.getY()), new Integer(anchoringHelper209.getWidth()), new Integer(anchoringHelper209.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Drug Information:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper210 = new RuntimeAnchoring(designSize, runtimeSize, 8, 360, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1172), new Integer(anchoringHelper210.getX()), new Integer(anchoringHelper210.getY()), new Integer(anchoringHelper210.getWidth()), new Integer(anchoringHelper210.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper211 = new RuntimeAnchoring(designSize, runtimeSize, 8, 266, 512, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1173), new Integer(anchoringHelper211.getX()), new Integer(anchoringHelper211.getY()), new Integer(anchoringHelper211.getWidth()), new Integer(anchoringHelper211.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is this patient on any medication that should be stopped prior to oral bowel preparation?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper212 = new RuntimeAnchoring(designSize, runtimeSize, 8, 249, 416, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1174), new Integer(anchoringHelper212.getX()), new Integer(anchoringHelper212.getY()), new Integer(anchoringHelper212.getWidth()), new Integer(anchoringHelper212.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is this patient currently receiving anticoagulant / antiplatelet therapy? :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper213 = new RuntimeAnchoring(designSize, runtimeSize, 312, 212, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1175), new Integer(anchoringHelper213.getX()), new Integer(anchoringHelper213.getY()), new Integer(anchoringHelper213.getWidth()), new Integer(anchoringHelper213.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper214 = new RuntimeAnchoring(designSize, runtimeSize, 312, 186, 262, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1176), new Integer(anchoringHelper214.getX()), new Integer(anchoringHelper214.getY()), new Integer(anchoringHelper214.getWidth()), new Integer(anchoringHelper214.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Can the procedure be carried out by a Nurse?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper215 = new RuntimeAnchoring(designSize, runtimeSize, 8, 186, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1177), new Integer(anchoringHelper215.getX()), new Integer(anchoringHelper215.getY()), new Integer(anchoringHelper215.getWidth()), new Integer(anchoringHelper215.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "General Anaesthetic?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper216 = new RuntimeAnchoring(designSize, runtimeSize, 521, 162, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1178), new Integer(anchoringHelper216.getX()), new Integer(anchoringHelper216.getY()), new Integer(anchoringHelper216.getWidth()), new Integer(anchoringHelper216.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minutes", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper217 = new RuntimeAnchoring(designSize, runtimeSize, 312, 162, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1179), new Integer(anchoringHelper217.getX()), new Integer(anchoringHelper217.getY()), new Integer(anchoringHelper217.getWidth()), new Integer(anchoringHelper217.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Length:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper218 = new RuntimeAnchoring(designSize, runtimeSize, 8, 162, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1180), new Integer(anchoringHelper218.getX()), new Integer(anchoringHelper218.getY()), new Integer(anchoringHelper218.getWidth()), new Integer(anchoringHelper218.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Points:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper219 = new RuntimeAnchoring(designSize, runtimeSize, 8, 140, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1181), new Integer(anchoringHelper219.getX()), new Integer(anchoringHelper219.getY()), new Integer(anchoringHelper219.getWidth()), new Integer(anchoringHelper219.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Suspected GI Bleed?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper220 = new RuntimeAnchoring(designSize, runtimeSize, 8, 76, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1182), new Integer(anchoringHelper220.getX()), new Integer(anchoringHelper220.getY()), new Integer(anchoringHelper220.getWidth()), new Integer(anchoringHelper220.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper221 = new RuntimeAnchoring(designSize, runtimeSize, 8, 118, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1183), new Integer(anchoringHelper221.getX()), new Integer(anchoringHelper221.getY()), new Integer(anchoringHelper221.getWidth()), new Integer(anchoringHelper221.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper222 = new RuntimeAnchoring(designSize, runtimeSize, 8, 54, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1184), new Integer(anchoringHelper222.getX()), new Integer(anchoringHelper222.getY()), new Integer(anchoringHelper222.getWidth()), new Integer(anchoringHelper222.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper223 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1185), new Integer(anchoringHelper223.getX()), new Integer(anchoringHelper223.getY()), new Integer(anchoringHelper223.getWidth()), new Integer(anchoringHelper223.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper224 = new RuntimeAnchoring(designSize, runtimeSize, 8, 413, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1186), new Integer(anchoringHelper224.getX()), new Integer(anchoringHelper224.getY()), new Integer(anchoringHelper224.getWidth()), new Integer(anchoringHelper224.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper225 = new RuntimeAnchoring(designSize, runtimeSize, 512, 115, 120, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1187), new Integer(anchoringHelper225.getX()), new Integer(anchoringHelper225.getY()), new Integer(anchoringHelper225.getWidth()), new Integer(anchoringHelper225.getHeight()), new Integer(startTabIndex.intValue() + 111), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Update Urgency", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper226 = new RuntimeAnchoring(designSize, runtimeSize, 288, 206, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1188), new Integer(anchoringHelper226.getX()), new Integer(anchoringHelper226.getY()), new Integer(anchoringHelper226.getWidth()), new Integer(anchoringHelper226.getHeight()), new Integer(startTabIndex.intValue() + 159), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper227 = new RuntimeAnchoring(designSize, runtimeSize, 464, 362, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1189), new Integer(anchoringHelper227.getX()), new Integer(anchoringHelper227.getY()), new Integer(anchoringHelper227.getWidth()), new Integer(anchoringHelper227.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper228 = new RuntimeAnchoring(designSize, runtimeSize, 592, 330, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1190), new Integer(anchoringHelper228.getX()), new Integer(anchoringHelper228.getY()), new Integer(anchoringHelper228.getWidth()), new Integer(anchoringHelper228.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper229 = new RuntimeAnchoring(designSize, runtimeSize, 725, 262, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1191), new Integer(anchoringHelper229.getX()), new Integer(anchoringHelper229.getY()), new Integer(anchoringHelper229.getWidth()), new Integer(anchoringHelper229.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper230 = new RuntimeAnchoring(designSize, runtimeSize, 224, 460, 576, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1192), new Integer(anchoringHelper230.getX()), new Integer(anchoringHelper230.getY()), new Integer(anchoringHelper230.getWidth()), new Integer(anchoringHelper230.getHeight()), new Integer(startTabIndex.intValue() + 145), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper231 = new RuntimeAnchoring(designSize, runtimeSize, 192, 483, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1193), new Integer(anchoringHelper231.getX()), new Integer(anchoringHelper231.getY()), new Integer(anchoringHelper231.getWidth()), new Integer(anchoringHelper231.getHeight()), new Integer(startTabIndex.intValue() + 146), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper232 = new RuntimeAnchoring(designSize, runtimeSize, 552, 365, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1194), new Integer(anchoringHelper232.getX()), new Integer(anchoringHelper232.getY()), new Integer(anchoringHelper232.getWidth()), new Integer(anchoringHelper232.getHeight()), new Integer(startTabIndex.intValue() + 136), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper233 = new RuntimeAnchoring(designSize, runtimeSize, 192, 287, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1195), new Integer(anchoringHelper233.getX()), new Integer(anchoringHelper233.getY()), new Integer(anchoringHelper233.getWidth()), new Integer(anchoringHelper233.getHeight()), new Integer(startTabIndex.intValue() + 130), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper234 = new RuntimeAnchoring(designSize, runtimeSize, 632, 246, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1196), new Integer(anchoringHelper234.getX()), new Integer(anchoringHelper234.getY()), new Integer(anchoringHelper234.getWidth()), new Integer(anchoringHelper234.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper235 = new RuntimeAnchoring(designSize, runtimeSize, 368, 210, 432, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1197), new Integer(anchoringHelper235.getX()), new Integer(anchoringHelper235.getY()), new Integer(anchoringHelper235.getWidth()), new Integer(anchoringHelper235.getHeight()), new Integer(startTabIndex.intValue() + 123), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper236 = new RuntimeAnchoring(designSize, runtimeSize, 664, 182, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1198), new Integer(anchoringHelper236.getX()), new Integer(anchoringHelper236.getY()), new Integer(anchoringHelper236.getWidth()), new Integer(anchoringHelper236.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper237 = new RuntimeAnchoring(designSize, runtimeSize, 288, 184, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1199), new Integer(anchoringHelper237.getX()), new Integer(anchoringHelper237.getY()), new Integer(anchoringHelper237.getWidth()), new Integer(anchoringHelper237.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper238 = new RuntimeAnchoring(designSize, runtimeSize, 192, 74, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1200), new Integer(anchoringHelper238.getX()), new Integer(anchoringHelper238.getY()), new Integer(anchoringHelper238.getWidth()), new Integer(anchoringHelper238.getHeight()), new Integer(startTabIndex.intValue() + 109), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper239 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1201), new Integer(anchoringHelper239.getX()), new Integer(anchoringHelper239.getY()), new Integer(anchoringHelper239.getWidth()), new Integer(anchoringHelper239.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper240 = new RuntimeAnchoring(designSize, runtimeSize, 632, 30, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1202), new Integer(anchoringHelper240.getX()), new Integer(anchoringHelper240.getY()), new Integer(anchoringHelper240.getWidth()), new Integer(anchoringHelper240.getHeight()), new Integer(startTabIndex.intValue() + 107), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper241 = new RuntimeAnchoring(designSize, runtimeSize, 608, 437, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTransportRequiredEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1203), new Integer(anchoringHelper241.getX()), new Integer(anchoringHelper241.getY()), new Integer(anchoringHelper241.getWidth()), new Integer(anchoringHelper241.getHeight()), new Integer(startTabIndex.intValue() + 143), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTransportRequiredEndoscopyTemp);
				cmbTransportRequiredEndoscopyComboBox cmbTransportRequiredEndoscopy = (cmbTransportRequiredEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportRequiredEndoscopyComboBox.class, m_cmbTransportRequiredEndoscopyTemp);
				super.addComboBox(cmbTransportRequiredEndoscopy);
				RuntimeAnchoring anchoringHelper242 = new RuntimeAnchoring(designSize, runtimeSize, 224, 437, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbInterpreterRequiredEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1204), new Integer(anchoringHelper242.getX()), new Integer(anchoringHelper242.getY()), new Integer(anchoringHelper242.getWidth()), new Integer(anchoringHelper242.getHeight()), new Integer(startTabIndex.intValue() + 141), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbInterpreterRequiredEndoscopyTemp);
				cmbInterpreterRequiredEndoscopyComboBox cmbInterpreterRequiredEndoscopy = (cmbInterpreterRequiredEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInterpreterRequiredEndoscopyComboBox.class, m_cmbInterpreterRequiredEndoscopyTemp);
				super.addComboBox(cmbInterpreterRequiredEndoscopy);
				RuntimeAnchoring anchoringHelper243 = new RuntimeAnchoring(designSize, runtimeSize, 192, 116, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbUrgencyEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1205), new Integer(anchoringHelper243.getX()), new Integer(anchoringHelper243.getY()), new Integer(anchoringHelper243.getWidth()), new Integer(anchoringHelper243.getHeight()), new Integer(startTabIndex.intValue() + 110), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbUrgencyEndoscopyTemp);
				cmbUrgencyEndoscopyComboBox cmbUrgencyEndoscopy = (cmbUrgencyEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgencyEndoscopyComboBox.class, m_cmbUrgencyEndoscopyTemp);
				super.addComboBox(cmbUrgencyEndoscopy);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper244 = new RuntimeAnchoring(designSize, runtimeSize, 192, 52, 608, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1206), new Integer(anchoringHelper244.getX()), new Integer(anchoringHelper244.getY()), new Integer(anchoringHelper244.getWidth()), new Integer(anchoringHelper244.getHeight()), new Integer(startTabIndex.intValue() + 108), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureEndoscopyTemp);
				qmbProcedureEndoscopyComboBox qmbProcedureEndoscopy = (qmbProcedureEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureEndoscopyComboBox.class, m_qmbProcedureEndoscopyTemp);
				super.addComboBox(qmbProcedureEndoscopy);
				RuntimeAnchoring anchoringHelper245 = new RuntimeAnchoring(designSize, runtimeSize, 192, 413, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbElectiveListEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1207), new Integer(anchoringHelper245.getX()), new Integer(anchoringHelper245.getY()), new Integer(anchoringHelper245.getWidth()), new Integer(anchoringHelper245.getHeight()), new Integer(startTabIndex.intValue() + 139), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbElectiveListEndoscopyTemp);
				qmbElectiveListEndoscopyComboBox qmbElectiveListEndoscopy = (qmbElectiveListEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListEndoscopyComboBox.class, m_qmbElectiveListEndoscopyTemp);
				super.addComboBox(qmbElectiveListEndoscopy);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper246 = new RuntimeAnchoring(designSize, runtimeSize, 192, 462, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1208), new Integer(anchoringHelper246.getX()), new Integer(anchoringHelper246.getY()), new Integer(anchoringHelper246.getWidth()), new Integer(anchoringHelper246.getHeight()), new Integer(startTabIndex.intValue() + 144), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper247 = new RuntimeAnchoring(designSize, runtimeSize, 576, 439, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1209), new Integer(anchoringHelper247.getX()), new Integer(anchoringHelper247.getY()), new Integer(anchoringHelper247.getWidth()), new Integer(anchoringHelper247.getHeight()), new Integer(startTabIndex.intValue() + 142), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper248 = new RuntimeAnchoring(designSize, runtimeSize, 192, 439, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1210), new Integer(anchoringHelper248.getX()), new Integer(anchoringHelper248.getY()), new Integer(anchoringHelper248.getWidth()), new Integer(anchoringHelper248.getHeight()), new Integer(startTabIndex.intValue() + 140), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper249 = new RuntimeAnchoring(designSize, runtimeSize, 192, 231, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1211), new Integer(anchoringHelper249.getX()), new Integer(anchoringHelper249.getY()), new Integer(anchoringHelper249.getWidth()), new Integer(anchoringHelper249.getHeight()), new Integer(startTabIndex.intValue() + 122), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper250 = new RuntimeAnchoring(designSize, runtimeSize, 192, 313, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1212), new Integer(anchoringHelper250.getX()), new Integer(anchoringHelper250.getY()), new Integer(anchoringHelper250.getWidth()), new Integer(anchoringHelper250.getHeight()), new Integer(startTabIndex.intValue() + 131), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper251 = new RuntimeAnchoring(designSize, runtimeSize, 632, 162, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1213), new Integer(anchoringHelper251.getX()), new Integer(anchoringHelper251.getY()), new Integer(anchoringHelper251.getWidth()), new Integer(anchoringHelper251.getHeight()), new Integer(startTabIndex.intValue() + 115), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Suitable for Training", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper252 = new RuntimeAnchoring(designSize, runtimeSize, 192, 140, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1214), new Integer(anchoringHelper252.getX()), new Integer(anchoringHelper252.getY()), new Integer(anchoringHelper252.getWidth()), new Integer(anchoringHelper252.getHeight()), new Integer(startTabIndex.intValue() + 112), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper253 = new RuntimeAnchoring(designSize, runtimeSize, 192, 30, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1215), new Integer(anchoringHelper253.getX()), new Integer(anchoringHelper253.getY()), new Integer(anchoringHelper253.getWidth()), new Integer(anchoringHelper253.getHeight()), new Integer(startTabIndex.intValue() + 103), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper254 = new RuntimeAnchoring(designSize, runtimeSize, 192, 160, 81, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1216), new Integer(anchoringHelper254.getX()), new Integer(anchoringHelper254.getY()), new Integer(anchoringHelper254.getWidth()), new Integer(anchoringHelper254.getHeight()), new Integer(startTabIndex.intValue() + 113), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper255 = new RuntimeAnchoring(designSize, runtimeSize, 424, 160, 81, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1217), new Integer(anchoringHelper255.getX()), new Integer(anchoringHelper255.getY()), new Integer(anchoringHelper255.getWidth()), new Integer(anchoringHelper255.getHeight()), new Integer(startTabIndex.intValue() + 114), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpGroupPrecolonoscopyReq = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1218), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupPrecolonoscopyReq);
				GroupPrecolonoscopyReqRadioButton GroupPrecolonoscopyReq = (GroupPrecolonoscopyReqRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPrecolonoscopyReqRadioButton.class, tmpGroupPrecolonoscopyReq);
				GroupPrecolonoscopyReq.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPrecolonoscopyReq);
				RadioButton tmpGroupPatientMedicationStop = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1219), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupPatientMedicationStop);
				GroupPatientMedicationStopRadioButton GroupPatientMedicationStop = (GroupPatientMedicationStopRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPatientMedicationStopRadioButton.class, tmpGroupPatientMedicationStop);
				GroupPatientMedicationStop.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPatientMedicationStop);
				RadioButton tmpGroupPlanedProceduresEndoscopy = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1220), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupPlanedProceduresEndoscopy);
				GroupPlanedProceduresEndoscopyRadioButton GroupPlanedProceduresEndoscopy = (GroupPlanedProceduresEndoscopyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPlanedProceduresEndoscopyRadioButton.class, tmpGroupPlanedProceduresEndoscopy);
				GroupPlanedProceduresEndoscopy.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPlanedProceduresEndoscopy);
				RadioButton tmpGroupKeyTherapeuticEquipment = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1221), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupKeyTherapeuticEquipment);
				GroupKeyTherapeuticEquipmentRadioButton GroupKeyTherapeuticEquipment = (GroupKeyTherapeuticEquipmentRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupKeyTherapeuticEquipmentRadioButton.class, tmpGroupKeyTherapeuticEquipment);
				GroupKeyTherapeuticEquipment.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupKeyTherapeuticEquipment);
				RadioButton tmpGroupAssessmentOfRenalFunction = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1222), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupAssessmentOfRenalFunction);
				GroupAssessmentOfRenalFunctionRadioButton GroupAssessmentOfRenalFunction = (GroupAssessmentOfRenalFunctionRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAssessmentOfRenalFunctionRadioButton.class, tmpGroupAssessmentOfRenalFunction);
				GroupAssessmentOfRenalFunction.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAssessmentOfRenalFunction);
				RadioButton tmpGroupAnticoagulantReceiving = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1223), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupAnticoagulantReceiving);
				GroupAnticoagulantReceivingRadioButton GroupAnticoagulantReceiving = (GroupAnticoagulantReceivingRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAnticoagulantReceivingRadioButton.class, tmpGroupAnticoagulantReceiving);
				GroupAnticoagulantReceiving.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAnticoagulantReceiving);
				RadioButton tmpGroupProcCarriedByNurse = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1224), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupProcCarriedByNurse);
				GroupProcCarriedByNurseRadioButton GroupProcCarriedByNurse = (GroupProcCarriedByNurseRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupProcCarriedByNurseRadioButton.class, tmpGroupProcCarriedByNurse);
				GroupProcCarriedByNurse.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupProcCarriedByNurse);
				RadioButton tmpGroupGeneralAnaesthetic = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1225), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupGeneralAnaesthetic);
				GroupGeneralAnaestheticRadioButton GroupGeneralAnaesthetic = (GroupGeneralAnaestheticRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupGeneralAnaestheticRadioButton.class, tmpGroupGeneralAnaesthetic);
				GroupGeneralAnaesthetic.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupGeneralAnaesthetic);
				RadioButton tmpGroupElectiveListReasonEndoscopy = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1226), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupElectiveListReasonEndoscopy);
				GroupElectiveListReasonEndoscopyRadioButton GroupElectiveListReasonEndoscopy = (GroupElectiveListReasonEndoscopyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListReasonEndoscopyRadioButton.class, tmpGroupElectiveListReasonEndoscopy);
				GroupElectiveListReasonEndoscopy.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupElectiveListReasonEndoscopy);
			}

			public ims.core.forms.mosquery.IComponent ccResponsibleHCPEndoscopy()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccResponsibleHCPEndoscopyValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccResponsibleHCPEndoscopyVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccResponsibleHCPEndoscopyVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccResponsibleHCPEndoscopyEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccResponsibleHCPEndoscopyEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblIsPreColonoscopyRequired2()
			{
				return (Label)super.getControl(1);
			}
			public Label lblIsPreColonoscopyRequired1()
			{
				return (Label)super.getControl(2);
			}
			public Label lblValueForVettingEndoscopist()
			{
				return (Label)super.getControl(4);
			}
			public Label lblVettingEndoscopist()
			{
				return (Label)super.getControl(5);
			}
			public Label lblValueForAuthoringHCP()
			{
				return (Label)super.getControl(6);
			}
			public Label lblAuthoringHCP()
			{
				return (Label)super.getControl(7);
			}
			public Label lblRequestedPlannedEndoscopy()
			{
				return (Label)super.getControl(8);
			}
			public Label lblPlannedProcedureInEndoscopy()
			{
				return (Label)super.getControl(9);
			}
			public Label lblTransportRequiredEndoscopy()
			{
				return (Label)super.getControl(11);
			}
			public Label lblPreassessmentRequiredEndoscopy()
			{
				return (Label)super.getControl(13);
			}
			public Label lblCompleteAPaper()
			{
				return (Label)super.getControl(14);
			}
			public Label lblKeyTherapeuticEquipmentComment()
			{
				return (Label)super.getControl(16);
			}
			public Label lblKeyTherapeuticEquipment1()
			{
				return (Label)super.getControl(17);
			}
			public Label lblKeyTherapeuticEquipment()
			{
				return (Label)super.getControl(18);
			}
			public Label lblPleaserequestUAndEsCreatinineandeGFR()
			{
				return (Label)super.getControl(19);
			}
			public Label lblAssessmentOfRenalFunction()
			{
				return (Label)super.getControl(20);
			}
			public Label lblPacemakerDefibrilatorEndoscopy()
			{
				return (Label)super.getControl(21);
			}
			public Label lblDrugInformation()
			{
				return (Label)super.getControl(22);
			}
			public Label lblPatientMedicationStop()
			{
				return (Label)super.getControl(24);
			}
			public Label lblAnticoagulantReceiving()
			{
				return (Label)super.getControl(25);
			}
			public Label lblDetailsEndoscopy()
			{
				return (Label)super.getControl(26);
			}
			public Label lblCanProcedureCarriedoutByNurse()
			{
				return (Label)super.getControl(27);
			}
			public Label lblGeneralAnaesthetic()
			{
				return (Label)super.getControl(28);
			}
			public Label lblMinutesEndoscopy()
			{
				return (Label)super.getControl(29);
			}
			public Label lblProcedureLengthEndoscopy()
			{
				return (Label)super.getControl(30);
			}
			public Label lblPoints()
			{
				return (Label)super.getControl(31);
			}
			public Label lblSuspectedGIBleed()
			{
				return (Label)super.getControl(32);
			}
			public Label lblDetailsFirstEndoscopy()
			{
				return (Label)super.getControl(33);
			}
			public Label lblUrgencyEndoscopy()
			{
				return (Label)super.getControl(34);
			}
			public Label lblIntendedProcedureEndoscopy()
			{
				return (Label)super.getControl(35);
			}
			public Label lblElectiveListReasonEndoscopy()
			{
				return (Label)super.getControl(36);
			}
			public Label lblElectiveListEndoscopy()
			{
				return (Label)super.getControl(37);
			}
			public Button btnUpdateUrgencyEndoscopy()
			{
				return (Button)super.getControl(38);
			}
			public TextBox txtdummyIsPreColonscopy()
			{
				return (TextBox)super.getControl(39);
			}
			public TextBox txtdummyAreThereKeyTherapeu()
			{
				return (TextBox)super.getControl(40);
			}
			public TextBox txtdummyDidPatienthaveAs()
			{
				return (TextBox)super.getControl(41);
			}
			public TextBox txtdummyForBowelPreparation()
			{
				return (TextBox)super.getControl(42);
			}
			public TextBox txtSpecialRequiredEndoscopy()
			{
				return (TextBox)super.getControl(43);
			}
			public TextBox txtCommentEndoscopy()
			{
				return (TextBox)super.getControl(44);
			}
			public TextBox txtKeyTherapeuticEquipment()
			{
				return (TextBox)super.getControl(45);
			}
			public TextBox txtDrugInformation()
			{
				return (TextBox)super.getControl(46);
			}
			public TextBox txtdummyAnticoag()
			{
				return (TextBox)super.getControl(47);
			}
			public TextBox txtDetailsEndoscopy()
			{
				return (TextBox)super.getControl(48);
			}
			public TextBox txtdummyProcCarriedByNurse()
			{
				return (TextBox)super.getControl(49);
			}
			public TextBox txtdummyGeneralAnaesthetic()
			{
				return (TextBox)super.getControl(50);
			}
			public TextBox txtEndoscopyDetails()
			{
				return (TextBox)super.getControl(51);
			}
			public TextBox txtdummyElectiveReasonEndoscopy()
			{
				return (TextBox)super.getControl(52);
			}
			public DateControl dteRequestedPlannedEndoscopy()
			{
				return (DateControl)super.getControl(53);
			}
			public cmbTransportRequiredEndoscopyComboBox cmbTransportRequiredEndoscopy()
			{
				return (cmbTransportRequiredEndoscopyComboBox)super.getComboBox(0);
			}
			public cmbInterpreterRequiredEndoscopyComboBox cmbInterpreterRequiredEndoscopy()
			{
				return (cmbInterpreterRequiredEndoscopyComboBox)super.getComboBox(1);
			}
			public cmbUrgencyEndoscopyComboBox cmbUrgencyEndoscopy()
			{
				return (cmbUrgencyEndoscopyComboBox)super.getComboBox(2);
			}
			public qmbProcedureEndoscopyComboBox qmbProcedureEndoscopy()
			{
				return (qmbProcedureEndoscopyComboBox)super.getComboBox(3);
			}
			public qmbElectiveListEndoscopyComboBox qmbElectiveListEndoscopy()
			{
				return (qmbElectiveListEndoscopyComboBox)super.getComboBox(4);
			}
			public CheckBox chkSpecialRequirementsEndoscopy()
			{
				return (CheckBox)super.getControl(59);
			}
			public CheckBox chkTransportRequiredEndoscopy()
			{
				return (CheckBox)super.getControl(60);
			}
			public CheckBox chkInterpreterRequiredEndoscopy()
			{
				return (CheckBox)super.getControl(61);
			}
			public CheckBox chkPreassessmentRequiredEndoscopy()
			{
				return (CheckBox)super.getControl(62);
			}
			public CheckBox chkPacemakerDefibrilatorEndoscopy()
			{
				return (CheckBox)super.getControl(63);
			}
			public CheckBox chkSuitableforCaseStudy()
			{
				return (CheckBox)super.getControl(64);
			}
			public CheckBox chkSuspectedGIBleed()
			{
				return (CheckBox)super.getControl(65);
			}
			public IntBox intPlannedProcedureInEndoscopy()
			{
				return (IntBox)super.getControl(66);
			}
			public IntBox intPoints()
			{
				return (IntBox)super.getControl(67);
			}
			public IntBox intProcedureLengthEndoscopy()
			{
				return (IntBox)super.getControl(68);
			}
			public GroupPrecolonoscopyReqRadioButton GroupPrecolonoscopyReq()
			{
				return (GroupPrecolonoscopyReqRadioButton)super.getRadioButton(0);
			}
			public GroupPatientMedicationStopRadioButton GroupPatientMedicationStop()
			{
				return (GroupPatientMedicationStopRadioButton)super.getRadioButton(1);
			}
			public GroupPlanedProceduresEndoscopyRadioButton GroupPlanedProceduresEndoscopy()
			{
				return (GroupPlanedProceduresEndoscopyRadioButton)super.getRadioButton(2);
			}
			public GroupKeyTherapeuticEquipmentRadioButton GroupKeyTherapeuticEquipment()
			{
				return (GroupKeyTherapeuticEquipmentRadioButton)super.getRadioButton(3);
			}
			public GroupAssessmentOfRenalFunctionRadioButton GroupAssessmentOfRenalFunction()
			{
				return (GroupAssessmentOfRenalFunctionRadioButton)super.getRadioButton(4);
			}
			public GroupAnticoagulantReceivingRadioButton GroupAnticoagulantReceiving()
			{
				return (GroupAnticoagulantReceivingRadioButton)super.getRadioButton(5);
			}
			public GroupProcCarriedByNurseRadioButton GroupProcCarriedByNurse()
			{
				return (GroupProcCarriedByNurseRadioButton)super.getRadioButton(6);
			}
			public GroupGeneralAnaestheticRadioButton GroupGeneralAnaesthetic()
			{
				return (GroupGeneralAnaestheticRadioButton)super.getRadioButton(7);
			}
			public GroupElectiveListReasonEndoscopyRadioButton GroupElectiveListReasonEndoscopy()
			{
				return (GroupElectiveListReasonEndoscopyRadioButton)super.getRadioButton(8);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper256 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 596, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabPageSurgical = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1227), new Integer(anchoringHelper256.getX()), new Integer(anchoringHelper256.getY()), new Integer(anchoringHelper256.getWidth()), new Integer(anchoringHelper256.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT," ", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageSurgicalContainer m_tabPageSurgicalContainer = (tabPageSurgicalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSurgicalContainer.class, m_tabPageSurgical, factory);
			super.addContainer(m_tabPageSurgical, m_tabPageSurgicalContainer);
			ims.framework.utils.SizeInfo m_tabPageSurgicalDesignSize = new ims.framework.utils.SizeInfo(832, 596);
			ims.framework.utils.SizeInfo m_tabPageSurgicalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper256.getWidth(), anchoringHelper256.getHeight());
			m_tabPageSurgicalContainer.setContext(form, appForm, m_tabPageSurgical, loader, startControlID, m_tabPageSurgicalDesignSize, m_tabPageSurgicalRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper257 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 596, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabPageMedical = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1228), new Integer(anchoringHelper257.getX()), new Integer(anchoringHelper257.getY()), new Integer(anchoringHelper257.getWidth()), new Integer(anchoringHelper257.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT," ", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageMedicalContainer m_tabPageMedicalContainer = (tabPageMedicalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageMedicalContainer.class, m_tabPageMedical, factory);
			super.addContainer(m_tabPageMedical, m_tabPageMedicalContainer);
			ims.framework.utils.SizeInfo m_tabPageMedicalDesignSize = new ims.framework.utils.SizeInfo(832, 596);
			ims.framework.utils.SizeInfo m_tabPageMedicalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper257.getWidth(), anchoringHelper257.getHeight());
			m_tabPageMedicalContainer.setContext(form, appForm, m_tabPageMedical, loader, startControlID, m_tabPageMedicalDesignSize, m_tabPageMedicalRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper258 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 596, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabPageEndoscopy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1229), new Integer(anchoringHelper258.getX()), new Integer(anchoringHelper258.getY()), new Integer(anchoringHelper258.getWidth()), new Integer(anchoringHelper258.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT," ", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageEndoscopyContainer m_tabPageEndoscopyContainer = (tabPageEndoscopyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageEndoscopyContainer.class, m_tabPageEndoscopy, factory);
			super.addContainer(m_tabPageEndoscopy, m_tabPageEndoscopyContainer);
			ims.framework.utils.SizeInfo m_tabPageEndoscopyDesignSize = new ims.framework.utils.SizeInfo(832, 596);
			ims.framework.utils.SizeInfo m_tabPageEndoscopyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper258.getWidth(), anchoringHelper258.getHeight());
			m_tabPageEndoscopyContainer.setContext(form, appForm, m_tabPageEndoscopy, loader, startControlID, m_tabPageEndoscopyDesignSize, m_tabPageEndoscopyRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageSurgical().setVisible(false);
			tabPageMedical().setVisible(false);
			tabPageEndoscopy().setVisible(false);
		}
		public void showtabPageSurgical()
		{
			tabPageMedical().setVisible(false);
			tabPageEndoscopy().setVisible(false);
			tabPageSurgical().setVisible(true);
		}
		public void showtabPageMedical()
		{
			tabPageSurgical().setVisible(false);
			tabPageEndoscopy().setVisible(false);
			tabPageMedical().setVisible(true);
		}
		public void showtabPageEndoscopy()
		{
			tabPageSurgical().setVisible(false);
			tabPageMedical().setVisible(false);
			tabPageEndoscopy().setVisible(true);
		}

		public tabPageSurgicalContainer tabPageSurgical()
		{
			return (tabPageSurgicalContainer)super.layers.get(0);
		}
		public tabPageMedicalContainer tabPageMedical()
		{
			return (tabPageMedicalContainer)super.layers.get(1);
		}
		public tabPageEndoscopyContainer tabPageEndoscopy()
		{
			return (tabPageEndoscopyContainer)super.layers.get(2);
		}
	}
	public static class cmbPatientCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatientStatus getValue()
		{
			return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatientStatus value)
		{
			super.control.setValue(value);
		}
	}

	public static class GroupAdmissionTypeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper259 = new RuntimeAnchoring(designSize, runtimeSize, 201, 6, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper259.getX(), anchoringHelper259.getY(), anchoringHelper259.getWidth(), "Surgical", startTabIndex.intValue() + 1);
			RuntimeAnchoring anchoringHelper260 = new RuntimeAnchoring(designSize, runtimeSize, 374, 6, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper260.getX(), anchoringHelper260.getY(), anchoringHelper260.getWidth(), "Endoscopy", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper261 = new RuntimeAnchoring(designSize, runtimeSize, 289, 6, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper261.getX(), anchoringHelper261.getY(), anchoringHelper261.getWidth(), "Medical", startTabIndex.intValue() + 2);
		}
		public void setText(GroupAdmissionTypeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupAdmissionTypeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupAdmissionTypeEnumeration.None;
				case 0: return GroupAdmissionTypeEnumeration.rdoSurgical;
				case 1: return GroupAdmissionTypeEnumeration.rdoEndoscopy;
				case 2: return GroupAdmissionTypeEnumeration.rdoMedical;
			}
			return null;
		}
		public void setValue(GroupAdmissionTypeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupAdmissionTypeEnumeration.None.id);
		}
		public boolean isEnabled(GroupAdmissionTypeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupAdmissionTypeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupAdmissionTypeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupAdmissionTypeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupAdmissionTypeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupAdmissionTypeEnumeration None = new GroupAdmissionTypeEnumeration(-1);
		public static GroupAdmissionTypeEnumeration rdoSurgical = new GroupAdmissionTypeEnumeration(0);
		public static GroupAdmissionTypeEnumeration rdoEndoscopy = new GroupAdmissionTypeEnumeration(1);
		public static GroupAdmissionTypeEnumeration rdoMedical = new GroupAdmissionTypeEnumeration(2);
		private GroupAdmissionTypeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupAdmissionTypeEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 672);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper262 = new RuntimeAnchoring(designSize, runtimeSize, 11, 597, 376, 53, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_ccAuthoringHCPDTForm = loader.loadComponent(102228, appForm, startControlID * 10 + 4000, anchoringHelper262.getSize(), instance1, startTabIndex.intValue() + 147, skipContextValidation);
		//ims.framework.Control m_ccAuthoringHCPDTControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1230), new Integer(11), new Integer(597), new Integer(376), new Integer(53), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 147), m_ccAuthoringHCPDTForm, instance1 } );
		ims.framework.Control m_ccAuthoringHCPDTControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1231),  new Integer(anchoringHelper262.getX()), new Integer(anchoringHelper262.getY()), new Integer(anchoringHelper262.getWidth()), new Integer(anchoringHelper262.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 147), m_ccAuthoringHCPDTForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccAuthoringHCPDTControl);
		Menu[] menus1 = m_ccAuthoringHCPDTForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper263 = new RuntimeAnchoring(designSize, runtimeSize, 576, 605, 253, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccRecordingMOSForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper263.getSize(), instance2, startTabIndex.intValue() + 150, skipContextValidation);
		//ims.framework.Control m_ccRecordingMOSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1232), new Integer(576), new Integer(605), new Integer(253), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 150), m_ccRecordingMOSForm, instance2 } );
		ims.framework.Control m_ccRecordingMOSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1233),  new Integer(anchoringHelper263.getX()), new Integer(anchoringHelper263.getY()), new Integer(anchoringHelper263.getWidth()), new Integer(anchoringHelper263.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 150), m_ccRecordingMOSForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccRecordingMOSControl);
		Menu[] menus2 = m_ccRecordingMOSForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Layer Clasess
		lyrWaitingListDetailsLayer m_lyrWaitingListDetailsLayer = (lyrWaitingListDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrWaitingListDetailsLayer.class, this, factory);
		super.addLayer(m_lyrWaitingListDetailsLayer);
		m_lyrWaitingListDetailsLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper264 = new RuntimeAnchoring(designSize, runtimeSize, 18, 8, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1234), new Integer(anchoringHelper264.getX()), new Integer(anchoringHelper264.getY()), new Integer(anchoringHelper264.getWidth()), new Integer(anchoringHelper264.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper265 = new RuntimeAnchoring(designSize, runtimeSize, 440, 628, 131, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1235), new Integer(anchoringHelper265.getX()), new Integer(anchoringHelper265.getY()), new Integer(anchoringHelper265.getWidth()), new Integer(anchoringHelper265.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Recording Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper266 = new RuntimeAnchoring(designSize, runtimeSize, 440, 607, 95, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1236), new Integer(anchoringHelper266.getX()), new Integer(anchoringHelper266.getY()), new Integer(anchoringHelper266.getWidth()), new Integer(anchoringHelper266.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Recording MOS:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper267 = new RuntimeAnchoring(designSize, runtimeSize, 496, 8, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1237), new Integer(anchoringHelper267.getX()), new Integer(anchoringHelper267.getY()), new Integer(anchoringHelper267.getWidth()), new Integer(anchoringHelper267.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper268 = new RuntimeAnchoring(designSize, runtimeSize, 8, 649, 224, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1238), new Integer(anchoringHelper268.getX()), new Integer(anchoringHelper268.getY()), new Integer(anchoringHelper268.getWidth()), new Integer(anchoringHelper268.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Suitable for Telephone Pre-Assessment", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper269 = new RuntimeAnchoring(designSize, runtimeSize, 355, 648, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1239), new Integer(anchoringHelper269.getX()), new Integer(anchoringHelper269.getY()), new Integer(anchoringHelper269.getWidth()), new Integer(anchoringHelper269.getHeight()), new Integer(startTabIndex.intValue() + 155), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add/Edit Comments", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper270 = new RuntimeAnchoring(designSize, runtimeSize, 516, 648, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1240), new Integer(anchoringHelper270.getX()), new Integer(anchoringHelper270.getY()), new Integer(anchoringHelper270.getWidth()), new Integer(anchoringHelper270.getHeight()), new Integer(startTabIndex.intValue() + 156), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper271 = new RuntimeAnchoring(designSize, runtimeSize, 245, 648, 262, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1241), new Integer(anchoringHelper271.getX()), new Integer(anchoringHelper271.getY()), new Integer(anchoringHelper271.getWidth()), new Integer(anchoringHelper271.getHeight()), new Integer(startTabIndex.intValue() + 154), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Undo Suitable for Telephone Pre-Assessment", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper272 = new RuntimeAnchoring(designSize, runtimeSize, 8, 647, 240, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1242), new Integer(anchoringHelper272.getX()), new Integer(anchoringHelper272.getY()), new Integer(anchoringHelper272.getWidth()), new Integer(anchoringHelper272.getHeight()), new Integer(startTabIndex.intValue() + 153), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Suitable for Telephone Pre-Assessment", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper273 = new RuntimeAnchoring(designSize, runtimeSize, 764, 648, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1243), new Integer(anchoringHelper273.getX()), new Integer(anchoringHelper273.getY()), new Integer(anchoringHelper273.getWidth()), new Integer(anchoringHelper273.getHeight()), new Integer(startTabIndex.intValue() + 158), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper274 = new RuntimeAnchoring(designSize, runtimeSize, 684, 648, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1244), new Integer(anchoringHelper274.getX()), new Integer(anchoringHelper274.getY()), new Integer(anchoringHelper274.getWidth()), new Integer(anchoringHelper274.getHeight()), new Integer(startTabIndex.intValue() + 157), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper275 = new RuntimeAnchoring(designSize, runtimeSize, 456, 8, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1245), new Integer(anchoringHelper275.getX()), new Integer(anchoringHelper275.getY()), new Integer(anchoringHelper275.getWidth()), new Integer(anchoringHelper275.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper276 = new RuntimeAnchoring(designSize, runtimeSize, 576, 626, 237, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1246), new Integer(anchoringHelper276.getX()), new Integer(anchoringHelper276.getY()), new Integer(anchoringHelper276.getWidth()), new Integer(anchoringHelper276.getHeight()), new Integer(startTabIndex.intValue() + 152), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper277 = new RuntimeAnchoring(designSize, runtimeSize, 608, 6, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPatientCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1247), new Integer(anchoringHelper277.getX()), new Integer(anchoringHelper277.getY()), new Integer(anchoringHelper277.getWidth()), new Integer(anchoringHelper277.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPatientCategoryTemp);
		cmbPatientCategoryComboBox cmbPatientCategory = (cmbPatientCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientCategoryComboBox.class, m_cmbPatientCategoryTemp);
		super.addComboBox(cmbPatientCategory);

		// RadioButton Controls
		RadioButton tmpGroupAdmissionType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1248), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupAdmissionType);
		GroupAdmissionTypeRadioButton GroupAdmissionType = (GroupAdmissionTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAdmissionTypeRadioButton.class, tmpGroupAdmissionType);
		GroupAdmissionType.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupAdmissionType);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.authoringinfo.IComponent ccAuthoringHCPDT()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccAuthoringHCPDTValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccAuthoringHCPDTVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccAuthoringHCPDTVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccAuthoringHCPDTEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccAuthoringHCPDTEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccRecordingMOS()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccRecordingMOSValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccRecordingMOSVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccRecordingMOSVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccRecordingMOSEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccRecordingMOSEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public lyrWaitingListDetailsLayer lyrWaitingListDetails()
	{
		return (lyrWaitingListDetailsLayer)super.getLayer(0);
	}
	public Label lblRecordingDateTime()
	{
		return (Label)super.getControl(6);
	}
	public Label lblRecordingMOS()
	{
		return (Label)super.getControl(7);
	}
	public Label lblSuitableForTelephonePreAssessment()
	{
		return (Label)super.getControl(9);
	}
	public Button btnAddEditComments()
	{
		return (Button)super.getControl(10);
	}
	public Button btnRIE()
	{
		return (Button)super.getControl(11);
	}
	public Button btnUndoSuitableForTelephonePreAssessment()
	{
		return (Button)super.getControl(12);
	}
	public Button btnSuitableForTelephonePreAssessment()
	{
		return (Button)super.getControl(13);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(14);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtdummyAdmissionType()
	{
		return (TextBox)super.getControl(16);
	}
	public DateTimeControl dtimRecordingDateTime()
	{
		return (DateTimeControl)super.getControl(17);
	}
	public cmbPatientCategoryComboBox cmbPatientCategory()
	{
		return (cmbPatientCategoryComboBox)super.getComboBox(0);
	}
	public GroupAdmissionTypeRadioButton GroupAdmissionType()
	{
		return (GroupAdmissionTypeRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ElectiveListAddLaterDialog = new LocalFormName(134247);
				PreAssessmentWorklist = new LocalFormName(134272);
				PreAssessmentOutcomeDlg = new LocalFormName(134273);
				EndoscopyVettingWorklist = new LocalFormName(134287);
				UpdateUrgency = new LocalFormName(134275);
			}
			public final FormName ElectiveListAddLaterDialog;
			public final FormName PreAssessmentWorklist;
			public final FormName PreAssessmentOutcomeDlg;
			public final FormName EndoscopyVettingWorklist;
			public final FormName UpdateUrgency;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				AppointmentOutcomeDialog = new LocalFormName(114171);
			}
			public final FormName AppointmentOutcomeDialog;
		}

		public CoreForms Core;
		public RefManForms RefMan;
		public SchedulingForms Scheduling;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_Action = new ims.framework.ContextVariable("Action", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Action_" + componentIdentifier + "");
			cxl_Referral = new ims.framework.ContextVariable("Referral", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Referral_" + componentIdentifier + "");
			cxl_Appointment = new ims.framework.ContextVariable("Appointment", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier + "");
			cxl_AnticoagulantTherapy = new ims.framework.ContextVariable("AnticoagulantTherapy", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__AnticoagulantTherapy_" + componentIdentifier + "");
			cxl_ShowSecondSurgicalProcedure = new ims.framework.ContextVariable("ShowSecondSurgicalProcedure", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__ShowSecondSurgicalProcedure_" + componentIdentifier + "");
			cxl_ShowSecondMedicalProcedure = new ims.framework.ContextVariable("ShowSecondMedicalProcedure", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__ShowSecondMedicalProcedure_" + componentIdentifier + "");
			cxl_PatientSHort = new ims.framework.ContextVariable("PatientSHort", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier + "");
			cxl_ElectiveListAddLaterDlgOpenMode = new ims.framework.ContextVariable("ElectiveListAddLaterDlgOpenMode", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__ElectiveListAddLaterDlgOpenMode_" + componentIdentifier + "");
			cxl_IsVisibleSurgicalTheatreType = new ims.framework.ContextVariable("IsVisibleSurgicalTheatreType", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__IsVisibleSurgicalTheatreType_" + componentIdentifier + "");
			cxl_IsSuitableForTelephonePreAssessment = new ims.framework.ContextVariable("IsSuitableForTelephonePreAssessment", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__IsSuitableForTelephonePreAssessment_" + componentIdentifier + "");
			cxl_RIERecord = new ims.framework.ContextVariable("RIERecord", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier + "");
			cxl_BookingAppointmentOutcomeVo = new ims.framework.ContextVariable("BookingAppointmentOutcomeVo", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier + "");
			cxl_LoggedInUser = new ims.framework.ContextVariable("LoggedInUser", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUser_" + componentIdentifier + "");
			cxl_isLoggedInUserMedicByHcpAndService = new ims.framework.ContextVariable("isLoggedInUserMedicByHcpAndService", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__isLoggedInUserMedicByHcpAndService_" + componentIdentifier + "");
			cxl_HcpLiteUser = new ims.framework.ContextVariable("HcpLiteUser", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HcpLiteUser_" + componentIdentifier + "");
			cxl_HCPFromReferral = new ims.framework.ContextVariable("HCPFromReferral", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HCPFromReferral_" + componentIdentifier + "");
			cxl_AddEditComments = new ims.framework.ContextVariable("AddEditComments", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__AddEditComments_" + componentIdentifier + "");
			cxl_IsAddEditCommentsButtonPressed = new ims.framework.ContextVariable("IsAddEditCommentsButtonPressed", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__IsAddEditCommentsButtonPressed_" + componentIdentifier + "");
			cxl_LoggedInUserHCpAssociatedWithService = new ims.framework.ContextVariable("LoggedInUserHCpAssociatedWithService", prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUserHCpAssociatedWithService_" + componentIdentifier + "");
		}
		
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListAddLaterVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListAddLaterVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListAddLaterVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getActionIsNotNull()
		{
			return !cxl_Action.getValueIsNull(context);
		}
		public ims.admin.vo.enums.ElectiveListDetails getAction()
		{
			return (ims.admin.vo.enums.ElectiveListDetails)cxl_Action.getValue(context);
		}
		public void setAction(ims.admin.vo.enums.ElectiveListDetails value)
		{
			cxl_Action.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Action = null;
		public boolean getReferralIsNotNull()
		{
			return !cxl_Referral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralforElectiveListDetailsVo getReferral()
		{
			return (ims.RefMan.vo.CatsReferralforElectiveListDetailsVo)cxl_Referral.getValue(context);
		}
		public void setReferral(ims.RefMan.vo.CatsReferralforElectiveListDetailsVo value)
		{
			cxl_Referral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Referral = null;
		public boolean getAppointmentIsNotNull()
		{
			return !cxl_Appointment.getValueIsNull(context);
		}
		public ims.scheduling.vo.BookingAppointmentOutcomeVo getAppointment()
		{
			return (ims.scheduling.vo.BookingAppointmentOutcomeVo)cxl_Appointment.getValue(context);
		}
		public void setAppointment(ims.scheduling.vo.BookingAppointmentOutcomeVo value)
		{
			cxl_Appointment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Appointment = null;
		public boolean getAnticoagulantTherapyIsNotNull()
		{
			return !cxl_AnticoagulantTherapy.getValueIsNull(context);
		}
		public Integer getAnticoagulantTherapy()
		{
			return (Integer)cxl_AnticoagulantTherapy.getValue(context);
		}
		public void setAnticoagulantTherapy(Integer value)
		{
			cxl_AnticoagulantTherapy.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnticoagulantTherapy = null;
		public boolean getShowSecondSurgicalProcedureIsNotNull()
		{
			return !cxl_ShowSecondSurgicalProcedure.getValueIsNull(context);
		}
		public Boolean getShowSecondSurgicalProcedure()
		{
			return (Boolean)cxl_ShowSecondSurgicalProcedure.getValue(context);
		}
		public void setShowSecondSurgicalProcedure(Boolean value)
		{
			cxl_ShowSecondSurgicalProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowSecondSurgicalProcedure = null;
		public boolean getShowSecondMedicalProcedureIsNotNull()
		{
			return !cxl_ShowSecondMedicalProcedure.getValueIsNull(context);
		}
		public Boolean getShowSecondMedicalProcedure()
		{
			return (Boolean)cxl_ShowSecondMedicalProcedure.getValue(context);
		}
		public void setShowSecondMedicalProcedure(Boolean value)
		{
			cxl_ShowSecondMedicalProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowSecondMedicalProcedure = null;
		public boolean getPatientSHortIsNotNull()
		{
			return !cxl_PatientSHort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientSHort()
		{
			return (ims.core.vo.PatientShort)cxl_PatientSHort.getValue(context);
		}
		public void setPatientSHort(ims.core.vo.PatientShort value)
		{
			cxl_PatientSHort.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientSHort = null;
		public boolean getElectiveListAddLaterDlgOpenModeIsNotNull()
		{
			return !cxl_ElectiveListAddLaterDlgOpenMode.getValueIsNull(context);
		}
		public  ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode getElectiveListAddLaterDlgOpenMode()
		{
			return ( ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode)cxl_ElectiveListAddLaterDlgOpenMode.getValue(context);
		}
		public void setElectiveListAddLaterDlgOpenMode( ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode value)
		{
			cxl_ElectiveListAddLaterDlgOpenMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ElectiveListAddLaterDlgOpenMode = null;
		public boolean getIsVisibleSurgicalTheatreTypeIsNotNull()
		{
			return !cxl_IsVisibleSurgicalTheatreType.getValueIsNull(context);
		}
		public Boolean getIsVisibleSurgicalTheatreType()
		{
			return (Boolean)cxl_IsVisibleSurgicalTheatreType.getValue(context);
		}
		public void setIsVisibleSurgicalTheatreType(Boolean value)
		{
			cxl_IsVisibleSurgicalTheatreType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsVisibleSurgicalTheatreType = null;
		public boolean getIsSuitableForTelephonePreAssessmentIsNotNull()
		{
			return !cxl_IsSuitableForTelephonePreAssessment.getValueIsNull(context);
		}
		public Boolean getIsSuitableForTelephonePreAssessment()
		{
			return (Boolean)cxl_IsSuitableForTelephonePreAssessment.getValue(context);
		}
		public void setIsSuitableForTelephonePreAssessment(Boolean value)
		{
			cxl_IsSuitableForTelephonePreAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsSuitableForTelephonePreAssessment = null;
		public boolean getRIERecordIsNotNull()
		{
			return !cxl_RIERecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListAddLaterVo getRIERecord()
		{
			return (ims.RefMan.vo.PatientElectiveListAddLaterVo)cxl_RIERecord.getValue(context);
		}
		public void setRIERecord(ims.RefMan.vo.PatientElectiveListAddLaterVo value)
		{
			cxl_RIERecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIERecord = null;
		public boolean getBookingAppointmentOutcomeVoIsNotNull()
		{
			return !cxl_BookingAppointmentOutcomeVo.getValueIsNull(context);
		}
		public ims.scheduling.vo.BookingAppointmentOutcomeVo getBookingAppointmentOutcomeVo()
		{
			return (ims.scheduling.vo.BookingAppointmentOutcomeVo)cxl_BookingAppointmentOutcomeVo.getValue(context);
		}
		public void setBookingAppointmentOutcomeVo(ims.scheduling.vo.BookingAppointmentOutcomeVo value)
		{
			cxl_BookingAppointmentOutcomeVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BookingAppointmentOutcomeVo = null;
		public boolean getLoggedInUserIsNotNull()
		{
			return !cxl_LoggedInUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getLoggedInUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_LoggedInUser.getValue(context);
		}
		public void setLoggedInUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_LoggedInUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedInUser = null;
		public boolean getisLoggedInUserMedicByHcpAndServiceIsNotNull()
		{
			return !cxl_isLoggedInUserMedicByHcpAndService.getValueIsNull(context);
		}
		public Boolean getisLoggedInUserMedicByHcpAndService()
		{
			return (Boolean)cxl_isLoggedInUserMedicByHcpAndService.getValue(context);
		}
		public void setisLoggedInUserMedicByHcpAndService(Boolean value)
		{
			cxl_isLoggedInUserMedicByHcpAndService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isLoggedInUserMedicByHcpAndService = null;
		public boolean getHcpLiteUserIsNotNull()
		{
			return !cxl_HcpLiteUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getHcpLiteUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_HcpLiteUser.getValue(context);
		}
		public void setHcpLiteUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_HcpLiteUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HcpLiteUser = null;
		public boolean getHCPFromReferralIsNotNull()
		{
			return !cxl_HCPFromReferral.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getHCPFromReferral()
		{
			return (ims.core.vo.HcpLiteVo)cxl_HCPFromReferral.getValue(context);
		}
		public void setHCPFromReferral(ims.core.vo.HcpLiteVo value)
		{
			cxl_HCPFromReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HCPFromReferral = null;
		public boolean getAddEditCommentsIsNotNull()
		{
			return !cxl_AddEditComments.getValueIsNull(context);
		}
		public Boolean getAddEditComments()
		{
			return (Boolean)cxl_AddEditComments.getValue(context);
		}
		public void setAddEditComments(Boolean value)
		{
			cxl_AddEditComments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AddEditComments = null;
		public boolean getIsAddEditCommentsButtonPressedIsNotNull()
		{
			return !cxl_IsAddEditCommentsButtonPressed.getValueIsNull(context);
		}
		public Boolean getIsAddEditCommentsButtonPressed()
		{
			return (Boolean)cxl_IsAddEditCommentsButtonPressed.getValue(context);
		}
		public void setIsAddEditCommentsButtonPressed(Boolean value)
		{
			cxl_IsAddEditCommentsButtonPressed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsAddEditCommentsButtonPressed = null;
		public boolean getLoggedInUserHCpAssociatedWithServiceIsNotNull()
		{
			return !cxl_LoggedInUserHCpAssociatedWithService.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getLoggedInUserHCpAssociatedWithService()
		{
			return (ims.core.vo.HcpLiteVo)cxl_LoggedInUserHCpAssociatedWithService.getValue(context);
		}
		public void setLoggedInUserHCpAssociatedWithService(ims.core.vo.HcpLiteVo value)
		{
			cxl_LoggedInUserHCpAssociatedWithService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedInUserHCpAssociatedWithService = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[461];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REFERRAL", "Referral");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DATEONLIST", "DateOnList");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PRIORITY", "Priority");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ISCONSULTANTPERFORMINGPROCEDURE", "IsConsultantPerformingProcedure");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHESISRISKASSESSMENTREQUEST", "AnaesthesisRiskAssessmentRequest");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-OPERATEONANTICOAGULANTCOMMENT", "OperateOnAnticoagulantComment");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-COMMENTS", "Comments");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CREATINGAPPOINTMENT", "CreatingAppointment");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-APPOINTMENTOUTCOMEACTION", "AppointmentOutcomeAction");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TCIGIVEN", "TCIGiven");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TAKESLONGERTHANSTANDARDTIME", "TakesLongerThanStandardTime");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHETISTREQUIREDINTHEATRE", "AnaesthetistRequiredInTheatre");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CAREGIVEN", "CareGiven");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMITTEDIN", "AdmittedIn");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMITTEDINUNITOFTIME", "AdmittedInUnitOfTime");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WASPOSSIBLEDATEGIVEN", "WasPossibleDateGiven");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DATEGIVENTOPATIENT", "DateGivenToPatient");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLANAESTHETICTYPE", "WLAnaestheticType");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLAVAILABLEATSHORTNOTICE", "WLAvailableAtShortNotice");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLAVAILABLEATSHORTNOTICEPERIOD", "WLAvailableAtShortNoticePeriod");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLPREOPERATIVEOVERNIGHTSTAYREQUIRED", "WLPreOperativeOvernightStayRequired");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLNOOFPREOPERATIVENIGHTS", "WLNoOfPreOperativeNights");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLANTICIPATEDSTAY", "WLAnticipatedStay");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CRITICALCAREBEDREQUIRED", "CriticalCareBedRequired");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-HDUBEDREQUIRED", "HDUBedRequired");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ITUBEDREQUIRED", "ITUBedRequired");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENTRECEIVINGANTICOAGULANTTHERAPY", "PatientReceivingAnticoagulantTherapy");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLPATIENTRECEIVINGANTICOAGULANTTHERAPY", "WLPatientReceivingAnticoagulantTherapy");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-FOLLOWPERIOPERATIVEGUIDELINES", "FollowPeriOperativeguidelines");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PERIOPNOREASONCOMMENTS", "PeriOpNoReasonComments");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-LANGUAGE", "Language");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TRANSPORT", "Transport");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SUSPECTEDGIBLEED", "SuspectedGIBleed");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-POINTS", "Points");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SUITABLEFORTRAINING", "SuitableforTraining");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CANNURSECARRYOUTPROCEDURE", "CanNurseCarryOutProcedure");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DETAILSFORNONGAENDOPROCEDURE", "DetailsForNonGAEndoProcedure");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-MEDICATIONSHOULDBESTOPPEDORALBOWELPREP", "MedicationShouldBeStoppedOralBowelPrep");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DRUGINFORMATION", "DrugInformation");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-HASPACEMAKERDEFIB", "HasPacemakerDefib");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-RENALFUNCTIONASSESSMENT", "RenalFunctionAssessment");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ARETHEREKEYTHERAPEUTIC", "AreThereKeyTherapeutic");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-COGNITIVECOMMENTS", "CognitiveComments");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TOBEPLANNEDIN", "ToBePlannedIn");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TOBEPLANNEDINUNIT", "ToBePlannedInUnit");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PLANNEDDATE", "PlannedDate");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ISSUITABLEFORTELEPHONEASSESSMENT", "IsSuitableForTelephoneAssessment");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-MULTISERVICECASE", "MultiServiceCase");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REQUIRESVETTING", "RequiresVetting");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-VETTINGDATE", "VettingDate");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[220] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREASSESSMENTOUTCOME", "PreAssessmentOutcome");
			fields[221] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PRECOLONOSCOPYASSESSMENTREQUIRED", "PreColonoscopyAssessmentRequired");
			fields[222] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REFERRAL", "Referral");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ISCONSULTANTPERFORMINGPROCEDURE", "IsConsultantPerformingProcedure");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANAESTHESISRISKASSESSMENTREQUEST", "AnaesthesisRiskAssessmentRequest");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-OPERATEONANTICOAGULANTCOMMENT", "OperateOnAnticoagulantComment");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-COMMENTS", "Comments");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CREATINGAPPOINTMENT", "CreatingAppointment");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-APPOINTMENTOUTCOMEACTION", "AppointmentOutcomeAction");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TCIGIVEN", "TCIGiven");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TAKESLONGERTHANSTANDARDTIME", "TakesLongerThanStandardTime");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANAESTHETISTREQUIREDINTHEATRE", "AnaesthetistRequiredInTheatre");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CAREGIVEN", "CareGiven");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ADMITTEDIN", "AdmittedIn");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ADMITTEDINUNITOFTIME", "AdmittedInUnitOfTime");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WASPOSSIBLEDATEGIVEN", "WasPossibleDateGiven");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEGIVENTOPATIENT", "DateGivenToPatient");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLANAESTHETICTYPE", "WLAnaestheticType");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLAVAILABLEATSHORTNOTICE", "WLAvailableAtShortNotice");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLAVAILABLEATSHORTNOTICEPERIOD", "WLAvailableAtShortNoticePeriod");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLPREOPERATIVEOVERNIGHTSTAYREQUIRED", "WLPreOperativeOvernightStayRequired");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLNOOFPREOPERATIVENIGHTS", "WLNoOfPreOperativeNights");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLANTICIPATEDSTAY", "WLAnticipatedStay");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CRITICALCAREBEDREQUIRED", "CriticalCareBedRequired");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-HDUBEDREQUIRED", "HDUBedRequired");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ITUBEDREQUIRED", "ITUBedRequired");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTRECEIVINGANTICOAGULANTTHERAPY", "PatientReceivingAnticoagulantTherapy");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLPATIENTRECEIVINGANTICOAGULANTTHERAPY", "WLPatientReceivingAnticoagulantTherapy");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-FOLLOWPERIOPERATIVEGUIDELINES", "FollowPeriOperativeguidelines");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PERIOPNOREASONCOMMENTS", "PeriOpNoReasonComments");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-LANGUAGE", "Language");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SUSPECTEDGIBLEED", "SuspectedGIBleed");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-POINTS", "Points");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SUITABLEFORTRAINING", "SuitableforTraining");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CANNURSECARRYOUTPROCEDURE", "CanNurseCarryOutProcedure");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DETAILSFORNONGAENDOPROCEDURE", "DetailsForNonGAEndoProcedure");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-MEDICATIONSHOULDBESTOPPEDORALBOWELPREP", "MedicationShouldBeStoppedOralBowelPrep");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DRUGINFORMATION", "DrugInformation");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-HASPACEMAKERDEFIB", "HasPacemakerDefib");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-RENALFUNCTIONASSESSMENT", "RenalFunctionAssessment");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ARETHEREKEYTHERAPEUTIC", "AreThereKeyTherapeutic");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-COGNITIVECOMMENTS", "CognitiveComments");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDIN", "ToBePlannedIn");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDINUNIT", "ToBePlannedInUnit");
			fields[292] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PLANNEDDATE", "PlannedDate");
			fields[293] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ISSUITABLEFORTELEPHONEASSESSMENT", "IsSuitableForTelephoneAssessment");
			fields[294] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-MULTISERVICECASE", "MultiServiceCase");
			fields[295] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REQUIRESVETTING", "RequiresVetting");
			fields[296] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-VETTINGDATE", "VettingDate");
			fields[297] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[298] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[299] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PREASSESSMENTOUTCOME", "PreAssessmentOutcome");
			fields[300] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRECOLONOSCOPYASSESSMENTREQUIRED", "PreColonoscopyAssessmentRequired");
			fields[301] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[302] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-PATIENT", "Patient");
			fields[303] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[304] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-URGENCY", "Urgency");
			fields[305] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-CANCERTYPE", "CancerType");
			fields[306] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-PATIENTCATEGORY", "PatientCategory");
			fields[307] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[308] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[309] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[310] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[311] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-APPTSTATUSREAS", "ApptStatusReason");
			fields[312] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-APPTCONFIRMSTATUS", "ApptConfirmStatus");
			fields[313] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-STATUSSAVEDFROMOUTCOME", "StatusSavedFromOutcome");
			fields[314] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-SEENTIME", "SeenTime");
			fields[315] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOME", "Outcome");
			fields[316] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOMEREASON", "OutcomeReason");
			fields[317] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOMEDATETIME", "OutcomeDateTime");
			fields[318] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-WASFIRSTDEFINITIVETREATMENT", "WasFirstDefinitiveTreatment");
			fields[319] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[320] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOMEHASRTTCLOCKIMPACT", "OutcomeHasRTTClockImpact");
			fields[321] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-FIRSTCONSULTATIONACTIVITY", "FirstConsultationActivity");
			fields[322] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[323] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[324] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[325] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[326] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[327] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[328] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[329] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[330] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[331] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[332] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[333] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[334] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[335] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[336] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[337] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[338] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[339] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[340] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[341] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[342] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__PatientSHort_" + componentIdentifier, "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[343] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[344] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[345] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-REFERRAL", "Referral");
			fields[346] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[347] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[348] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[349] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[350] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[351] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[352] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[353] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[354] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ISCONSULTANTPERFORMINGPROCEDURE", "IsConsultantPerformingProcedure");
			fields[355] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[356] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ANAESTHESISRISKASSESSMENTREQUEST", "AnaesthesisRiskAssessmentRequest");
			fields[357] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-OPERATEONANTICOAGULANTCOMMENT", "OperateOnAnticoagulantComment");
			fields[358] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[359] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-COMMENTS", "Comments");
			fields[360] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-CREATINGAPPOINTMENT", "CreatingAppointment");
			fields[361] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-APPOINTMENTOUTCOMEACTION", "AppointmentOutcomeAction");
			fields[362] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-TCIGIVEN", "TCIGiven");
			fields[363] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-TAKESLONGERTHANSTANDARDTIME", "TakesLongerThanStandardTime");
			fields[364] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[365] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ANAESTHETISTREQUIREDINTHEATRE", "AnaesthetistRequiredInTheatre");
			fields[366] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-CAREGIVEN", "CareGiven");
			fields[367] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[368] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[369] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ADMITTEDIN", "AdmittedIn");
			fields[370] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ADMITTEDINUNITOFTIME", "AdmittedInUnitOfTime");
			fields[371] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WASPOSSIBLEDATEGIVEN", "WasPossibleDateGiven");
			fields[372] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-DATEGIVENTOPATIENT", "DateGivenToPatient");
			fields[373] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[374] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WLANAESTHETICTYPE", "WLAnaestheticType");
			fields[375] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[376] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[377] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WLAVAILABLEATSHORTNOTICE", "WLAvailableAtShortNotice");
			fields[378] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WLAVAILABLEATSHORTNOTICEPERIOD", "WLAvailableAtShortNoticePeriod");
			fields[379] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[380] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WLPREOPERATIVEOVERNIGHTSTAYREQUIRED", "WLPreOperativeOvernightStayRequired");
			fields[381] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[382] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WLNOOFPREOPERATIVENIGHTS", "WLNoOfPreOperativeNights");
			fields[383] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WLANTICIPATEDSTAY", "WLAnticipatedStay");
			fields[384] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-CRITICALCAREBEDREQUIRED", "CriticalCareBedRequired");
			fields[385] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-HDUBEDREQUIRED", "HDUBedRequired");
			fields[386] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ITUBEDREQUIRED", "ITUBedRequired");
			fields[387] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PATIENTRECEIVINGANTICOAGULANTTHERAPY", "PatientReceivingAnticoagulantTherapy");
			fields[388] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-WLPATIENTRECEIVINGANTICOAGULANTTHERAPY", "WLPatientReceivingAnticoagulantTherapy");
			fields[389] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-FOLLOWPERIOPERATIVEGUIDELINES", "FollowPeriOperativeguidelines");
			fields[390] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PERIOPNOREASONCOMMENTS", "PeriOpNoReasonComments");
			fields[391] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[392] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-LANGUAGE", "Language");
			fields[393] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[394] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[395] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[396] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[397] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-SUSPECTEDGIBLEED", "SuspectedGIBleed");
			fields[398] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-POINTS", "Points");
			fields[399] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-SUITABLEFORTRAINING", "SuitableforTraining");
			fields[400] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[401] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-CANNURSECARRYOUTPROCEDURE", "CanNurseCarryOutProcedure");
			fields[402] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-DETAILSFORNONGAENDOPROCEDURE", "DetailsForNonGAEndoProcedure");
			fields[403] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[404] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-MEDICATIONSHOULDBESTOPPEDORALBOWELPREP", "MedicationShouldBeStoppedOralBowelPrep");
			fields[405] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-DRUGINFORMATION", "DrugInformation");
			fields[406] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-HASPACEMAKERDEFIB", "HasPacemakerDefib");
			fields[407] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-RENALFUNCTIONASSESSMENT", "RenalFunctionAssessment");
			fields[408] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ARETHEREKEYTHERAPEUTIC", "AreThereKeyTherapeutic");
			fields[409] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-COGNITIVECOMMENTS", "CognitiveComments");
			fields[410] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDIN", "ToBePlannedIn");
			fields[411] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDINUNIT", "ToBePlannedInUnit");
			fields[412] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PLANNEDDATE", "PlannedDate");
			fields[413] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-ISSUITABLEFORTELEPHONEASSESSMENT", "IsSuitableForTelephoneAssessment");
			fields[414] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-MULTISERVICECASE", "MultiServiceCase");
			fields[415] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-REQUIRESVETTING", "RequiresVetting");
			fields[416] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-VETTINGDATE", "VettingDate");
			fields[417] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[418] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[419] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PREASSESSMENTOUTCOME", "PreAssessmentOutcome");
			fields[420] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1014100020-PRECOLONOSCOPYASSESSMENTREQUIRED", "PreColonoscopyAssessmentRequired");
			fields[421] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[422] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[423] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[424] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[425] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-APPTSTATUSREAS", "ApptStatusReason");
			fields[426] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-APPTCONFIRMSTATUS", "ApptConfirmStatus");
			fields[427] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-STATUSSAVEDFROMOUTCOME", "StatusSavedFromOutcome");
			fields[428] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-SEENTIME", "SeenTime");
			fields[429] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-OUTCOME", "Outcome");
			fields[430] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-OUTCOMEREASON", "OutcomeReason");
			fields[431] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-OUTCOMEDATETIME", "OutcomeDateTime");
			fields[432] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-WASFIRSTDEFINITIVETREATMENT", "WasFirstDefinitiveTreatment");
			fields[433] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[434] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-OUTCOMEHASRTTCLOCKIMPACT", "OutcomeHasRTTClockImpact");
			fields[435] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-FIRSTCONSULTATIONACTIVITY", "FirstConsultationActivity");
			fields[436] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__BookingAppointmentOutcomeVo_" + componentIdentifier, "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[437] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[438] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[439] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[440] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[441] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[442] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[443] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[444] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[445] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[446] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[447] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[448] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[449] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HCPFromReferral_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[450] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HCPFromReferral_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[451] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HCPFromReferral_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[452] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HCPFromReferral_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[453] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HCPFromReferral_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[454] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__HCPFromReferral_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[455] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUserHCpAssociatedWithService_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[456] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUserHCpAssociatedWithService_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[457] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUserHCpAssociatedWithService_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[458] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUserHCpAssociatedWithService_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[459] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUserHCpAssociatedWithService_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[460] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListAddLaterDialog.__internal_x_context__LoggedInUserHCpAssociatedWithService_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
