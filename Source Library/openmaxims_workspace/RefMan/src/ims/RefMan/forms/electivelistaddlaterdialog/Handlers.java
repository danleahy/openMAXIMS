//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistaddlaterdialog;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbPatientCategoryLookup();
	abstract protected void defaultcmbPatientCategoryLookupValue();
	abstract protected void bindcmbTransportRequiredLookup();
	abstract protected void defaultcmbTransportRequiredLookupValue();
	abstract protected void bindcmbInterpreterRequiredLookup();
	abstract protected void defaultcmbInterpreterRequiredLookupValue();
	abstract protected void bindcmbLateralitySecondLookup();
	abstract protected void defaultcmbLateralitySecondLookupValue();
	abstract protected void bindcmbLateralityLookup();
	abstract protected void defaultcmbLateralityLookupValue();
	abstract protected void bindcmbPriorityLookup();
	abstract protected void defaultcmbPriorityLookupValue();
	abstract protected void bindcmbAnaestheticTypeLookup();
	abstract protected void defaultcmbAnaestheticTypeLookupValue();
	abstract protected void bindcmbTransportRequiredMedicalLookup();
	abstract protected void defaultcmbTransportRequiredMedicalLookupValue();
	abstract protected void bindcmbInterpreterRequiredMedicalLookup();
	abstract protected void defaultcmbInterpreterRequiredMedicalLookupValue();
	abstract protected void bindcmbPriorityMedicalLookup();
	abstract protected void defaultcmbPriorityMedicalLookupValue();
	abstract protected void bindcmbLateralitySecondMedicalLookup();
	abstract protected void defaultcmbLateralitySecondMedicalLookupValue();
	abstract protected void bindcmbLateralityMedicalLookup();
	abstract protected void defaultcmbLateralityMedicalLookupValue();
	abstract protected void bindcmbTransportRequiredEndoscopyLookup();
	abstract protected void defaultcmbTransportRequiredEndoscopyLookupValue();
	abstract protected void bindcmbInterpreterRequiredEndoscopyLookup();
	abstract protected void defaultcmbInterpreterRequiredEndoscopyLookupValue();
	abstract protected void bindcmbUrgencyEndoscopyLookup();
	abstract protected void defaultcmbUrgencyEndoscopyLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddEditCommentsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcAuthoringHCPDTValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupAdmissionTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPatientCategoryValueSet(Object value);
	abstract protected void onBtnRIEClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUndoSuitableForTelephonePreAssessmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSuitableForTelephonePreAssessmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateUrgencySurgicalClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcResponsibleHCPSUrgicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupDaySurgMainTheatreValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbNamedConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbNamedConsultantTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAnaesthesisRiskAssessmentRequestValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkMultiserviceCaseValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnHideSecondSurgicalProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteRequestedPlannedDateSurgicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPlanedProceduresSurgicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntPlanProcedureInValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupQuestion1ValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSpecialRequirementsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTransportRequiredValueSet(Object value);
	abstract protected void onChkTransportRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkInterpreterRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbInterpreterRequiredValueSet(Object value);
	abstract protected void onChkPreassessmentRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnShowSecondSurgicalProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkPreoperativeOvernightStayValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPerioperativeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureSecondValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureSecondTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbLateralitySecondValueSet(Object value);
	abstract protected void onChkPatientDateGivenToPatientValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbLateralityValueSet(Object value);
	abstract protected void oncmbPriorityValueSet(Object value);
	abstract protected void oncmbAnaestheticTypeValueSet(Object value);
	abstract protected void onCmbAnaestheticTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkShortNoticeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupProcedureCarriedOutValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntAnticipatedNightsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateUrgencyMedicalClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnHideSecondMedicalProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteRequestedPlannedMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPlanedProceduresMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntPlanProcedureInMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSpecialRequirementsMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTransportRequiredMedicalValueSet(Object value);
	abstract protected void onChkTransportRequiredNedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkInterpreterRequiredMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbInterpreterRequiredMedicalValueSet(Object value);
	abstract protected void onCcResponsibleHCPValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnShowSecondMedicalProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkShortNoticeMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPriorityMedicalValueSet(Object value);
	abstract protected void onQmbWardValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureSecondMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureSecondMedicalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbLateralitySecondMedicalValueSet(Object value);
	abstract protected void onQmbProcedureMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureMedicalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbLateralityMedicalValueSet(Object value);
	abstract protected void onChkPatientDateGivenToPatientMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListMedicalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateUrgencyEndoscopyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcResponsibleHCPEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteRequestedPlannedEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPlanedProceduresEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntPlannedProcedureInEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntPointsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSpecialRequirementsEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTransportRequiredEndoscopyValueSet(Object value);
	abstract protected void onChkTransportRequiredEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkInterpreterRequiredEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbInterpreterRequiredEndoscopyValueSet(Object value);
	abstract protected void onRadioButtonGroupKeyTherapeuticEquipmentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupAssessmentOfRenalFunctionValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPatientMedicationStopValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupAnticoagulantReceivingValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupProcCarriedByNurseValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupGeneralAnaestheticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSuspectedGIBleedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbUrgencyEndoscopyValueSet(Object value);
	abstract protected void onQmbProcedureEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureEndoscopyTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupElectiveListReasonEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListEndoscopyTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnAddEditComments().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddEditCommentsClick();
			}
		});
		this.form.setccAuthoringHCPDTValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcAuthoringHCPDTValueChanged();
			}
		});
		this.form.GroupAdmissionType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupAdmissionTypeValueChanged();
			}
		});
		this.form.cmbPatientCategory().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPatientCategoryValueSet(value);
			}
		});
		this.form.btnRIE().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRIEClick();
			}
		});
		this.form.btnUndoSuitableForTelephonePreAssessment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUndoSuitableForTelephonePreAssessmentClick();
			}
		});
		this.form.btnSuitableForTelephonePreAssessment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSuitableForTelephonePreAssessmentClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().btnUpdateUrgencySurgical().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateUrgencySurgicalClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().setccResponsibleHCPSUrgicalValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcResponsibleHCPSUrgicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupDaySurgMainTheatreValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbNamedConsultantValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbNamedConsultantTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAnaesthesisRiskAssessmentRequestValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkMultiserviceCaseValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().btnHideSecondSurgicalProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnHideSecondSurgicalProcedureClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteRequestedPlannedDateSurgicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPlanedProceduresSurgicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntPlanProcedureInValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupQuestion1ValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSpecialRequirementsValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTransportRequiredValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkTransportRequiredValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkInterpreterRequiredValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInterpreterRequiredValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPreassessmentRequiredValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().btnShowSecondSurgicalProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnShowSecondSurgicalProcedureClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPreoperativeOvernightStayValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPerioperativeValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureSecondValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureSecondTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLateralitySecondValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPatientDateGivenToPatientValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLateralityValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPriorityValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAnaestheticTypeValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbAnaestheticTypeValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkShortNoticeValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupProcedureCarriedOutValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntAnticipatedNightsValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().btnUpdateUrgencyMedical().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateUrgencyMedicalClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().btnHideSecondMedicalProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnHideSecondMedicalProcedureClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteRequestedPlannedMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPlanedProceduresMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntPlanProcedureInMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSpecialRequirementsMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTransportRequiredMedicalValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkTransportRequiredNedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkInterpreterRequiredMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInterpreterRequiredMedicalValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().setccResponsibleHCPValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcResponsibleHCPValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().btnShowSecondMedicalProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnShowSecondMedicalProcedureClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkShortNoticeMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPriorityMedicalValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbWard().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbWardValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbWard().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbWardTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureSecondMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureSecondMedicalTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLateralitySecondMedicalValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureMedicalTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLateralityMedicalValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPatientDateGivenToPatientMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListMedicalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListMedicalTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageMedical().cmbHospital().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbHospitalValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().btnUpdateUrgencyEndoscopy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateUrgencyEndoscopyClick();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().setccResponsibleHCPEndoscopyValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcResponsibleHCPEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteRequestedPlannedEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPlanedProceduresEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntPlannedProcedureInEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntPointsValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().chkSpecialRequirementsEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSpecialRequirementsEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTransportRequiredEndoscopyValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkTransportRequiredEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkInterpreterRequiredEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInterpreterRequiredEndoscopyValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupKeyTherapeuticEquipmentValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupAssessmentOfRenalFunctionValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPatientMedicationStopValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupAnticoagulantReceivingValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupProcCarriedByNurseValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupGeneralAnaestheticValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSuspectedGIBleedValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbUrgencyEndoscopyValueSet(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureEndoscopyTextSubmited(value);
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupElectiveListReasonEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListEndoscopyValueChanged();
			}
		});
		this.form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListEndoscopyTextSubmited(value);
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbPatientCategoryLookup();
		bindcmbTransportRequiredLookup();
		bindcmbInterpreterRequiredLookup();
		bindcmbLateralitySecondLookup();
		bindcmbLateralityLookup();
		bindcmbPriorityLookup();
		bindcmbAnaestheticTypeLookup();
		bindcmbTransportRequiredMedicalLookup();
		bindcmbInterpreterRequiredMedicalLookup();
		bindcmbPriorityMedicalLookup();
		bindcmbLateralitySecondMedicalLookup();
		bindcmbLateralityMedicalLookup();
		bindcmbTransportRequiredEndoscopyLookup();
		bindcmbInterpreterRequiredEndoscopyLookup();
		bindcmbUrgencyEndoscopyLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbPatientCategoryLookup();
		bindcmbTransportRequiredLookup();
		bindcmbInterpreterRequiredLookup();
		bindcmbLateralitySecondLookup();
		bindcmbLateralityLookup();
		bindcmbPriorityLookup();
		bindcmbAnaestheticTypeLookup();
		bindcmbTransportRequiredMedicalLookup();
		bindcmbInterpreterRequiredMedicalLookup();
		bindcmbPriorityMedicalLookup();
		bindcmbLateralitySecondMedicalLookup();
		bindcmbLateralityMedicalLookup();
		bindcmbTransportRequiredEndoscopyLookup();
		bindcmbInterpreterRequiredEndoscopyLookup();
		bindcmbUrgencyEndoscopyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbPatientCategoryLookupValue();
		defaultcmbTransportRequiredLookupValue();
		defaultcmbInterpreterRequiredLookupValue();
		defaultcmbLateralitySecondLookupValue();
		defaultcmbLateralityLookupValue();
		defaultcmbPriorityLookupValue();
		defaultcmbAnaestheticTypeLookupValue();
		defaultcmbTransportRequiredMedicalLookupValue();
		defaultcmbInterpreterRequiredMedicalLookupValue();
		defaultcmbPriorityMedicalLookupValue();
		defaultcmbLateralitySecondMedicalLookupValue();
		defaultcmbLateralityMedicalLookupValue();
		defaultcmbTransportRequiredEndoscopyLookupValue();
		defaultcmbInterpreterRequiredEndoscopyLookupValue();
		defaultcmbUrgencyEndoscopyLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
