//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Michael Noonan using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.rttmanagementeditevent;

import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.pathways.vo.PathwayRTTStatusRefVo;
import ims.pathways.vo.PathwayRTTStatusVo;
import ims.pathways.vo.RTTStatusPointLiteVo;
import ims.pathways.vo.RTTStatusPointLiteVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args!=null
				&&args[0]!=null
				&&args[0] instanceof PathwayRTTStatusRefVo)
		{
			PathwayRTTStatusRefVo statusRef = (PathwayRTTStatusRefVo)args[0];
			PathwayRTTStatusVo status= domain.getRTTStatusFromRef(statusRef);
			form.getLocalContext().setRTTStatusVo(status);
			form.cmbStatusPoint().clear();
			RTTStatusPointLiteVoCollection rTTStatusPointLiteVoCollection= domain.listRelatedRTTStatusPoints(status.getRTTStatus());
			if(rTTStatusPointLiteVoCollection!=null)
			{
				for (RTTStatusPointLiteVo rttStatusPointLiteVo : rTTStatusPointLiteVoCollection) {
					form.cmbStatusPoint().newRow(rttStatusPointLiteVo, getDescription(rttStatusPointLiteVo));
				}
			}
			form.cmbStatusPoint().setValue(status.getRTTStatus());
			form.cmbUpdateReason().setValue(status.getRTTStatusUpdateReason());
			form.txtUpdateComment().setValue(status.getRTTStatusUpdateComment());
		}
	}
	
	private String getDescription(RTTStatusPointLiteVo status) {
		if(status!=null)
		{
			String retVal = ((status.getNationalCode()!=null?status.getNationalCode().toString():"")  +" - "+status.getDescription());
			return retVal; 
		}
		return null;
	}

	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PathwayRTTStatusVo status = form.getLocalContext().getRTTStatusVo();

		status.setRTTStatus(form.cmbStatusPoint().getValue());
		status.setRTTStatusUpdateReason(form.cmbUpdateReason().getValue());
		status.setRTTStatusUpdateComment(form.txtUpdateComment().getValue());
//		String[] errors = status.validate();
	
		
		try {
			domain.saveRTTStatus(status);
		} catch (StaleObjectException e) {
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
