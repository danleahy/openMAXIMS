//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3175.20077)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.bookappointment;

import ims.admin.vo.PDSConfigurationVo;
import ims.RefMan.forms.bookappointment.GenForm.grdApptRow;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ReferralBookingVo;
import ims.RefMan.vo.TCIForReferralBookingVo;
import ims.RefMan.vo.lookups.AcceptedActionsRequired;
import ims.RefMan.vo.lookups.CatsReferralCategory;
import ims.RefMan.vo.lookups.ERODType;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceFunctionRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.clinical.vo.ServiceRefVoCollection;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.helper.PdsException;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.resource.place.vo.LocationRefVoCollection;
import ims.core.vo.ActivitySchedVo;
import ims.core.vo.ActivitySchedVoCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationListVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.LocationServiceLiteVo;
import ims.core.vo.MissingMappingVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PdsErrorVo;
import ims.core.vo.PersonName;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.ActivityType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.core.vo.lookups.PatientStatus;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.SourceOfReferral;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.UrlParam;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.icp.vo.PatientICPFullVo;
import ims.ocrr.vo.OrderInvestigationBookingVo;
import ims.ocrr.vo.ProviderSystemLiteVo;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentLiteVo;
import ims.scheduling.vo.BookingAppointmentLiteVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentRefVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Booking_AppointmentVoCollection;
import ims.scheduling.vo.Profile_BookRightsVo;
import ims.scheduling.vo.Sch_BookingVo;
import ims.scheduling.vo.Sch_SessionRefVoCollection;
import ims.scheduling.vo.SessionListOwnerLiteVo;
import ims.scheduling.vo.SessionListVo;
import ims.scheduling.vo.SessionParentChildSlotForBookingVo;
import ims.scheduling.vo.SessionParentChildSlotListVo;
import ims.scheduling.vo.SessionParentChildSlotListVoCollection;
import ims.scheduling.vo.SessionParentChildSlotRefVoCollection;
import ims.scheduling.vo.SessionParentChildSlotVoCollection;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotListVo;
import ims.scheduling.vo.SessionSlotListVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.SessionSlotWithStatusOnlyVo;
import ims.scheduling.vo.Session_ListOwnerVoCollection;
import ims.scheduling.vo.Session_SlotRefVo;
import ims.scheduling.vo.lookups.ConsultationMediaType;
import ims.scheduling.vo.lookups.ProfileListType;
import ims.scheduling.vo.lookups.SchedulingPriority;
import ims.scheduling.vo.lookups.Status_Reason;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;
	private static final int CURRENT_APPT_NODE = 1;
	private static final int REBOOK_APPT_NODE = 2;
	private static final int INV_NODE = 3;
	private static final int OTHER_NODE = 4;
	private static final int TCI_NODE = 5;
	//private static final int SELECT_COLUMN_ID = 4;

	//private static final int APPT_CONSULTATION_MEDIA_COL_INDEX = 3;
	//private static final int APPT_PATIENT_CATEGORY_COL_INDEX = 4;

	private static final String	COLUMN_URGENCY  		= "0";
	private static final String	COLUMN_TIME 			= "1";
	private static final String	COLUMN_ACTIVITY         = "2";
	private static final String	COLUMN_SLOT_TYPE       	= "3";
	private static final String	COLUMN_FUNCTIONS   		= "4";
	private static final String	COLUMN_COMMENTS   		= "5";
	//private static final String COLUMN_DISTANCE 		= "6";
	private static final String	COLUMN_SELECT           = "7";
	private static final String	COLUMN_HOSPITAL			= "8";
	private static final String	COLUMN_PROFILE			= "9";

	//private static final String LINK_APPTS_MESSAGE_QUESTION = "There are multiple appointments selected. Do you wish to link them?";
	// private static final int REASONABLE_DAYS_LIMIT = 21;


	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//wdev-22219
		if (args != null)
		{
			if( args.length > 0 && args[0] != null && args[0] instanceof Boolean )
			{
				form.getLocalContext().setShouldNotDefaultService((Boolean) args[0]);
			}
			//WDEV-22894
			if( args.length > 0 && args[1] != null && args[1] instanceof Boolean )
			{
				form.getLocalContext().setShouldNotDefaultListOwner((Boolean) args[1]);
			}
		}
		//--------- end wdev-22219
		
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			form.btnBook().setPostbackRequirePdsAuthentication(true);

		initialize();
		open();

		updateControlState(); //WDEV-19543
	}

	private void open()
	{
		loadReferralDetails();
		clearSearchCriteria();
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.bookingCalendarAppts().setEnabled(false);
		form.bookingCalendarAppts().setCurrentMonth(new Date());
		form.getLocalContext().setSch_Booking(new Sch_BookingVo());
		form.getLocalContext().setisLinkingOrderInv(false);
		clearBookingCalendar();

		form.cmbService().setEnabled(true);
		form.cmbActivity().setEnabled(true);
		form.qmbListOwner().setEnabled(true); // WDEV-18411
		form.cmbListType().setEnabled(true);	//wdev-19419
		form.imbClear().setEnabled(true);

		removeAllRadiologyServices();

		// WDEV-17903 - If Service in GC, default the value in
		if (form.getGlobalContext().Scheduling.getBookingServiceIsNotNull())
		{
			form.cmbService().setValue(form.getGlobalContext().Scheduling.getBookingService());
			boolean isApptForRebookFlexible = form.getGlobalContext().Scheduling.getBookingAppointment() != null && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getBookingAppointment().getIsFlexibleAppointment()); //WDEV-23889
			
			if (form.cmbService().getValue() == null && form.getGlobalContext().Scheduling.getBookingService() instanceof ServiceLiteVo)
			{
				form.cmbService().newRow(form.getGlobalContext().Scheduling.getBookingService(), ((ServiceLiteVo) form.getGlobalContext().Scheduling.getBookingService()).getServiceName());
				form.cmbService().setValue(form.getGlobalContext().Scheduling.getBookingService());
			}

			loadActivities();
			updateClinicType(isApptForRebookFlexible); //WDEV-23889
		}

		//WDEV-20768 default values, but not for re-book
		if (form.getGlobalContext().Scheduling.getBookingAppointment() == null && form.getLocalContext().getCatsReferralListVo() != null && form.getLocalContext().getCatsReferralListVo().getReferralDetails() != null)
		{
			if (form.getGlobalContext().Scheduling.getBookingService() == null) //make sure service wasn't already defaulted
			{
				if( !Boolean.TRUE.equals(form.getLocalContext().getShouldNotDefaultService()))		//wdev-22219
				{
					form.cmbService().setValue(form.getLocalContext().getCatsReferralListVo().getReferralDetails().getService());
					loadActivities();
					updateClinicType(false);
				}
			}

			//default List Owner
			if (form.getLocalContext().getCatsReferralListVo().getReferralDetails().getConsultant() != null)
			{
				if( !Boolean.TRUE.equals(form.getLocalContext().getShouldNotDefaultListOwner()))		//WDEV-22894
				{
    				HcpLiteVo listOwner = domain.getHCPLite(form.getLocalContext().getCatsReferralListVo().getReferralDetails().getConsultant());
    
    				form.qmbListOwner().newRow(listOwner, listOwner.getName().toString());
    				form.qmbListOwner().setValue(listOwner);
				}
			}
		}

		if (form.getGlobalContext().Scheduling.getServiceFunctionRef() != null)
		{
			form.cmbClinicType().setValue(form.getGlobalContext().Scheduling.getServiceFunctionRef());
		}

		// rebooking WDEV-5213
		repopulateScreen();

		// wdev-12682
		if (form.getGlobalContext().RefMan.getReferralContractTypeForPatientIsNotNull() && form.getGlobalContext().RefMan.getReferralContractTypeForPatient().equals(ReferralManagementContractType.DIAGNOSTIC) && form.getGlobalContext().Scheduling.getBookingAppointment() == null)
		{
			if (engine.getCurrentLocation() != null)
			{
				for (int i = 0; i < form.cmbLocation().getValues().size(); i++)
				{
					if (((LocationRefVo) form.cmbLocation().getValues().get(i)).getID_Location().equals(engine.getCurrentLocation().getID()))
					{
						form.cmbLocation().setValue(((LocationRefVo) form.cmbLocation().getValues().get(i)));
						break;
					}
				}
			}
		}
	}

	private void repopulateScreen()
	{
		if (form.getGlobalContext().Scheduling.getBookingAppointment() == null)
			return;

		// SITE-508
		Booking_AppointmentVo bookingAppointment = domain.getBookingAppointment(form.getGlobalContext().Scheduling.getBookingAppointment());
		form.getGlobalContext().Scheduling.setBookingAppointment(bookingAppointment);

		// store the same booking record
		Sch_BookingVo voBooking = domain.getSch_BookingByAppt(form.getGlobalContext().Scheduling.getBookingAppointment());
		form.getLocalContext().setSch_Booking(voBooking);
		if (voBooking != null)
			form.txtBookingComments().setValue(voBooking.getBookingComments());

		form.cmbService().setValue(form.getGlobalContext().Scheduling.getBookingService());
		if (form.cmbService().getValue() == null && form.getGlobalContext().Scheduling.getBookingService() instanceof ServiceLiteVo)
		{
			form.cmbService().newRow(form.getGlobalContext().Scheduling.getBookingService(), ((ServiceLiteVo) form.getGlobalContext().Scheduling.getBookingService()).getServiceName());
			form.cmbService().setValue(form.getGlobalContext().Scheduling.getBookingService());
		}

		loadActivities();

		form.cmbClinicType().setValue(form.getGlobalContext().Scheduling.getBookingAppointment().getServiceFunction());
		form.getLocalContext().setClinicType(form.cmbClinicType().getValue());

		if (form.getGlobalContext().Scheduling.getBookingActivityIsNotNull())
		{
			for (int i = 0; i < form.cmbActivity().getValues().size(); i++)
			{
				if (((ActivitySchedVo) form.cmbActivity().getValues().get(i)).getID_Activity().equals(form.getGlobalContext().Scheduling.getBookingActivity().getID_Activity()))
				{
					form.cmbActivity().setValue((ActivitySchedVo) form.cmbActivity().getValues().get(i));
					form.getLocalContext().setActivity(form.cmbActivity().getValue());

					defaultListType();
					break;
				}
			}
		}

		//WDEV-22494
		form.cmbListType().setValue(bookingAppointment.getSessionIsNotNull() ? bookingAppointment.getSession().getListType():null);
		form.cmbUrgency().setValue(bookingAppointment.getPriority());
		
		//WDEV-23889
		boolean hasLocation = bookingAppointment.getSessionIsNotNull() &&  bookingAppointment.getSession().getSchLocationIsNotNull() && bookingAppointment.getSession().getSchLocation().getID_LocationIsNotNull();
		boolean isApptForRebookFlexible = Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getBookingAppointment().getIsFlexibleAppointment());
		
		if(hasLocation)
		{
			form.cmbHospital().setValue(domain.getHospitalForCurrentLocation(bookingAppointment.getSession().getSchLocation()));
			loadLocations(form.cmbHospital().getValue());
			form.cmbLocation().setValue(bookingAppointment.getSession().getSchLocation());
		}
		
		HcpLiteVo bookingListOwner = bookingAppointment.getListOwnerBooked();
		if(bookingListOwner != null && bookingListOwner.getName() != null)
		{
			form.qmbListOwner().newRow(bookingListOwner,bookingListOwner.getName().toString());
			form.qmbListOwner().setValue(bookingListOwner);
		}
		// end - WDEV-22494

		form.getLocalContext().setFlexibleSessions(isApptForRebookFlexible);

		showTimeControlsForFlexibleAppts(form.getLocalContext().getFlexibleSessions());

		//default the previous required time
		if (Boolean.TRUE.equals(form.getLocalContext().getFlexibleSessions())) 
		{
			Time endTime = form.getGlobalContext().Scheduling.getBookingAppointment().getApptEndTime();
			Time startTime = form.getGlobalContext().Scheduling.getBookingAppointment().getApptStartTime();

			if (endTime != null && startTime != null)
			{
				form.intActivityTimeReq().setValue(endTime.getTotalMinutes() - startTime.getTotalMinutes());
			}
		}

		createSessionSlotsGrid(form.getLocalContext().getFlexibleSessions());

		if (validateSearchCriteria() == null)
		{
			loadSessions();
			// set a flag to say that the appt to be rebooked hasn't yet been
			// selected
			form.getLocalContext().setIsRebookApptSelected(false);
			form.setMode(FormMode.EDIT);
			form.bookingCalendarAppts().setSelectedDay(new Date());
			bookingCalendarDateSelected(new Date());
			form.btnCancel().setEnabled(true);

			form.cmbService().setEnabled(false);
			form.cmbActivity().setEnabled(false);
			form.imbClear().setEnabled(false);
			form.cmbClinicType().setEnabled(!isApptForRebookFlexible); //WDEV-23889
		}
	}

	private void loadServices()
	{
		form.cmbService().clear();
		form.cmbClinicType().setEnabled(false);

		ServiceLiteVoCollection voCollServices = domain.listActiveCanBeScheduledService();
		if (voCollServices != null)
		{
			for (int i = 0; i < voCollServices.size(); i++)
				form.cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}

		loadActivities();
	}

	private void clearBookingCalendar()
	{
		form.bookingCalendarAppts().clearBookedChecks();
		form.bookingCalendarAppts().clearChecks();
		form.bookingCalendarAppts().clearPercentages();
		form.bookingCalendarAppts().clearNoSessionDates();
		form.bookingCalendarAppts().clearNoSlotDates();
		form.bookingCalendarAppts().clearBackColors();

		Date dateStart = new Date(form.bookingCalendarAppts().getCurrentMonth().getYear(), form.bookingCalendarAppts().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendarAppts().getCurrentMonth().getYear(), form.bookingCalendarAppts().getCurrentMonth().getMonth(), form.bookingCalendarAppts().getCurrentMonth().getNumberOfDaysInTheMonth());

		while (dateStart.isLessOrEqualThan(dateEnd))
		{
			form.bookingCalendarAppts().addNoSessionDates(new Date(dateStart));
			dateStart.addDay(1);
		}
	}

	private void loadReferralDetails()
	{
		ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());

		form.getLocalContext().setReferral(voReferral);
		populateReferralDetailsControlsFromData(voReferral);
	}

	private void populateReferralDetailsControlsFromData(ReferralBookingVo voReferral)
	{
		clearReferralDetails();
		if (voReferral == null)
			return;

		if (voReferral.getReferralLetterDetailIsNotNull())
		{

			if (voReferral.getReferralLetterDetail().getService() != null)
			{
				form.lblReferralService().setValue(voReferral.getReferralLetterDetail().getService().getServiceName());
			}

			//form.lblFirstApptKPI().setValue(voReferral.getReferralLetterDetail().getDayTo1stAppIsNotNull() ? "End " + voReferral.getReferralLetterDetail().getDayTo1stApp() + " day KPI:" : "End day KPI:");// WDEV-11713
			//form.lblFirstApptKPI().setValue(voReferral.getReferralLetterDetail().getEndXdayKPI() != null ? voReferral.getReferralLetterDetail().getEndXdayKPI().toString() : "");
			form.lblFirstApptKPI().setValue(voReferral.getReferralLetterDetail().getEndDateKPI() != null ? voReferral.getReferralLetterDetail().getEndDateKPI().toString() : "");		//wdev-20946
			form.lblRttBreachDate().setValue(voReferral.getReferralLetterDetail().getEnd18WW() != null ? voReferral.getReferralLetterDetail().getEnd18WW().toString() : "");
			form.getLocalContext().setKPIDays(voReferral.getReferralLetterDetail().getKPIDays());
		}

		// WDEV-18411
		form.getLocalContext().setReferralCategory(voReferral.getReferralCategory());
		form.getLocalContext().setTriageDateTime(voReferral.getTriageDateTime());
		form.getLocalContext().setLastReferralEROD(voReferral.getReferralEROD());
		form.getLocalContext().setCurrentClock(voReferral.getCurrentClock());
		form.getLocalContext().setIsCAB(voReferral.getIsCAB());

		populateInvApptTree(voReferral);
	}

	private void clearReferralDetails()
	{
		form.lblFirstApptKPI().setValue("");
		form.lblReferralService().setValue("");
		form.lblRttBreachDate().setValue("");
		form.treInvAppts().clear();

	}

	private void populateInvApptTree(ReferralBookingVo voReferral)
	{
		if (voReferral.getCurrentAppointmentsIsNotNull() && voReferral.getCurrentAppointments().size() > 0)
		{
			TreeNode apptNode = form.treInvAppts().getNodes().add(CURRENT_APPT_NODE, "Current Appointments");
			apptNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			apptNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (BookingAppointmentLiteVo voAppt : voReferral.getCurrentAppointments())
			{
				TreeNode node = apptNode.getNodes().add(voAppt, voAppt.toString());
				//WDEV-20692
				if(Boolean.TRUE.equals(voAppt.getIsWardAttendance()))
				{
					node.setCollapsedImage(form.getImages().RefMan.Admission16);
					node.setExpandedImage(form.getImages().RefMan.Admission16);
				}
				else
				{
					node.setCollapsedImage(form.getImages().Core.Date);
					node.setExpandedImage(form.getImages().Core.Date);
				}
			}

			apptNode.setExpanded(true);
		}
		if (voReferral.getAppointmentsRequiringRebookIsNotNull() && voReferral.getAppointmentsRequiringRebook().size() > 0)
		{
			TreeNode rebookNode = form.treInvAppts().getNodes().add(REBOOK_APPT_NODE, "Appointments Requiring a Rebook");

			rebookNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			rebookNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (BookingAppointmentLiteVo voAppt : voReferral.getAppointmentsRequiringRebook())
			{
				TreeNode node = rebookNode.getNodes().add(voAppt, voAppt.toString());
				//WDEV-20692
				if(Boolean.TRUE.equals(voAppt.getIsWardAttendance()))
				{
					node.setCollapsedImage(form.getImages().RefMan.Admission16);
					node.setExpandedImage(form.getImages().RefMan.Admission16);
				}
				else
				{
					node.setCollapsedImage(form.getImages().Core.Date);
					node.setExpandedImage(form.getImages().Core.Date);
				}
			}

			rebookNode.setExpanded(true);
		}
		if (voReferral.getOrdersRequiringApptIsNotNull() && voReferral.getOrdersRequiringAppt().size() > 0)
		{
			TreeNode invNode = form.treInvAppts().getNodes().add(INV_NODE, "Investigations requiring an Appointment");

			invNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			invNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (OrderInvestigationBookingVo voOrderInv : voReferral.getOrdersRequiringAppt())
			{
				TreeNode node = invNode.getNodes().add(voOrderInv, voOrderInv.toString());
				node.setCollapsedImage(form.getImages().OCRR.Investigation);
				node.setExpandedImage(form.getImages().OCRR.Investigation);
			}

			invNode.setExpanded(true);
		}
		if (voReferral.getOtherAppointmentsIsNotNull() && voReferral.getOtherAppointments().size() > 0)
		{
			TreeNode theatreNode = form.treInvAppts().getNodes().add(OTHER_NODE, "Theatre Appointments");

			theatreNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			theatreNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (BookingAppointmentLiteVo voAppt : voReferral.getOtherAppointments())
			{
				TreeNode node = theatreNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
				node.setEnabled(false);
			}

			theatreNode.setExpanded(true);
		}

		if(voReferral.getCurrentTCIs() != null && voReferral.getCurrentTCIs().size() > 0)
		{
			TreeNode apptNode = form.treInvAppts().getNodes().add(TCI_NODE, "Current TCIs");
			apptNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			apptNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (TCIForReferralBookingVo tci : voReferral.getCurrentTCIs())
			{
				TreeNode node = apptNode.getNodes().add(tci, getTCIDisplayString(tci));
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}

			apptNode.setExpanded(true);
		}
	}

	private String getTCIDisplayString(TCIForReferralBookingVo tci)
	{
		if(tci == null)
			return null;

		StringBuffer text = new StringBuffer();
		if(tci.getTCIDate() != null)
			text.append(tci.getTCIDate().toString());
		if(tci.getTCITime() != null)
			text.append(" " + tci.getTCITime().toString());

		if(tci.getTCIWard() != null)
		{
			text.append(" - " + tci.getTCIWard().getName());
		}
		if(tci.getTCIHospital() != null)
		{
			text.append(" - " + tci.getTCIHospital().getName());
		}

		return text.toString();
	}

	private void clearSearchCriteria()
	{
		form.cmbActivity().setValue(null);
		form.cmbService().setValue(null);
		form.cmbClinicType().setValue(null);
		form.qmbListOwner().clear(); 		// WDEV-18411
		form.cmbListType().setValue(null);	//wdev-19419 WDEV-20070
		
		//WDEV-21690
		form.cmbHospital().setValue(null);
		loadLocations(form.cmbHospital().getValue());
		
		form.cmbLocation().setValue(null);
		form.cmbUrgency().setValue(null);
		form.intActivityTimeReq().setValue(null);
	}

	private void initialize()
	{
		form.getLocalContext().setCatsReferralListVo(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));//WDEV-20643
		if (engine.isDialog())
		{
			form.setMode(FormMode.VIEW);
		}

		form.getLocalContext().setisLinkingOrderInv(false);
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(false);
		form.bookingCalendarAppts().setEnabled(false);
		form.bookingCalendarAppts().setChecksReadOnly(true);

		form.bookingCalendarAppts().setCurrentMonth(new Date());
		loadServices();
		loadHospitals();
		form.getLocalContext().setApptStatus(null);
		// wdev-12090
		form.getLocalContext().setSessionSlotDNAorDisplaced(null);
		// ----------

		form.getLocalContext().setReferralERODForRebooking(domain.getReferralERODByAppointment(form.getGlobalContext().Scheduling.getBookingAppointment()));

		//WDEV-19543
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);

		form.dyngrdSessionSlots().setSelectable(false);

		//WDEV-20589, WDEV-20747
		form.getLocalContext().setformOpenedFromPreAssessmentWorklist(engine.getPreviosFormName() != null && engine.getPreviosFormName().getID() == form.getForms().RefMan.PreAssessmentWorklist.getID());
	}

	private void loadHospitals()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voCollLoc = domain.getHospitals();

		if (voCollLoc != null)
		{
			for (LocationLiteVo item : voCollLoc)
				form.cmbHospital().newRow(item, item.getName());
		}

		loadLocations(null);
	}

	private void createSessionSlotsGrid(boolean flexibleSessions)
	{
		form.dyngrdSessionSlots().getColumns().clear();

		DynamicGridColumn column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_HOSPITAL);

		column.setWidth(60);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setDynamicWidthSupported(true);

		column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_PROFILE);

		column.setWidth(0);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setDynamicWidthSupported(true);	


		column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_URGENCY);

		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);

		column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_TIME);

		column.setWidth(50);

		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);

		column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_ACTIVITY);

		if (flexibleSessions)
		{
			column.setWidth(300);
		}
		else 
			column.setWidth(145);

		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);

		if (!flexibleSessions)
		{
			column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_SLOT_TYPE);

			column.setWidth(50);
			column.setAlignment(Alignment.LEFT);
			column.setReadOnly(true);
			column.setCanGrow(false);

			column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_FUNCTIONS);

			column.setWidth(150);
			column.setAlignment(Alignment.LEFT);
			column.setReadOnly(true);
			column.setCanGrow(true);
		}

		column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_COMMENTS);

		column.setWidth(24);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);

		/*
		column = form.dyngrdSessionSlots().getColumns().newColumn("Distance", COLUMN_DISTANCE);

		column.setWidth(80);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		 */

		column = form.dyngrdSessionSlots().getColumns().newColumn(" ", COLUMN_SELECT);

		column.setWidth(-1);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(false);
		column.setCanGrow(true);

	}

	private void loadLocations(LocationRefVo hospital)
	{
		form.cmbLocation().clear();

		LocationLiteVoCollection voCollLoc = domain.getLocations(hospital, form.getGlobalContext().Scheduling.getWardAttendance());

		/*
		if (ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue())
		{
			// single site
			voCollLoc = domain.listLocationLite();
		}
		else
		{
			// multi site
			voCollLoc = domain.listLocationLiteForReferralContract(form.getGlobalContext().RefMan.getCatsReferral());
		}
		 */

		if (voCollLoc != null)
		{
			for (LocationLiteVo item : voCollLoc)
				form.cmbLocation().newRow(item, item.getName());
		}
	}

	private void loadActivities()
	{
		form.cmbActivity().clear();

		ActivitySchedVoCollection voCollActivities = domain.listActivitiesForType(ActivityType.APPOINTMENTTYPES, form.getGlobalContext().RefMan.getCatsReferral(), form.cmbService().getValue());

		if (voCollActivities != null)
		{
			for (int i = 0; i < voCollActivities.size(); i++)
			{
				if (voCollActivities.get(i).getNameIsNotNull())
					form.cmbActivity().newRow(voCollActivities.get(i), voCollActivities.get(i).getName());
			}
		}
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearScreen(true);
		form.bookingCalendarAppts().setCurrentMonth(new Date());
		form.getLocalContext().setCurrentDate(null);
		clearBookingCalendar();

		updateControlState();
	}

	private void clearScreen(boolean leaveInstantiatedData)
	{
		form.dyngrdSessionSlots().getRows().clear();

		if (!leaveInstantiatedData)
		{
			form.grdAppt().getRows().clear();
			form.txtBookingComments().setValue(null);
			form.getLocalContext().setSelectedAppointments(null);
		}

		form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_SLOTItem().setVisible(false);
		form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem().setVisible(false);
	}

	private void clearGlobalContexts()
	{
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().RefMan.setReferralEROD(null); // WDEV-18411
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().RefMan.setSelectedSessions(null);
		form.getLocalContext().setIsRebookApptSelected(null);
		
		// form.getLocalContext().setSelectedErodDates(null);
		form.getLocalContext().setSelectedDates(null); // WDEV-18557
		form.getLocalContext().setSelectedAppointments(null);
		form.getLocalContext().setSelectedSessions(null);
		// wdev-12090
		form.getLocalContext().setSessionSlotDNAorDisplaced(null);
		// ------------
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			form.getLocalContext().setIsRebookApptSelected(false);
		if (form.cmbActivity().getValue() != null)
			form.getLocalContext().setActivity(form.cmbActivity().getValue().toActivityRefVo());
		else
			form.getLocalContext().setActivity(null);

		//WDEV-20070
		form.getLocalContext().setUrgency(form.cmbUrgency().getValue());
		form.getLocalContext().setClinicType(form.cmbClinicType().getValue());
		form.getLocalContext().setListOwner(form.qmbListOwner().getValue());
		form.getLocalContext().setFlexibleSessions(form.intActivityTimeReq().isVisible());

		createSessionSlotsGrid(form.getLocalContext().getFlexibleSessions());

		String[] errors = validateSearchCriteria();
		if (errors == null)
			loadSessions();
		else
			engine.showErrors(errors);
		updateControlState();
	}

	private String[] validateSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();

		if (form.cmbService().getValue() == null)
			errors.add("Service is mandatory");

		if (form.cmbActivity().getValue() == null)
			errors.add("Activity is mandatory");

		if (form.intActivityTimeReq().isVisible() && form.intActivityTimeReq().getValue() == null)
			errors.add("Time Required is mandatory");

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private void loadSessions()
	{
		clearBookingCalendar();
		form.getLocalContext().setSelectedDates(null); // WDEV-18557
		form.bookingCalendarAppts().clearNoSessionDates();
		listSessions();
		clearScreen(true);
		initialiseCalendar();
		form.bookingCalendarAppts().setEnabled(true);
	}

	private void listSessions()
	{

		LocationRefVoCollection locationList = null;

		if (form.cmbLocation().getValues() != null && form.cmbLocation().getValues().size() > 0)
		{
			locationList = new LocationRefVoCollection();
			for (int i = 0; i < form.cmbLocation().getValues().size(); i++)
			{
				locationList.add((LocationRefVo) form.cmbLocation().getValues().get(i));
			}
		}

		Date currentDate = domain.getCurrentMonth(form.cmbActivity().getValue(), form.cmbService().getValue(), form.cmbLocation().getValue(), form.cmbClinicType().getValue(), locationList, form.qmbListOwner().getValue(),form.cmbListType().getValue());	//wdev-19419
		if (currentDate != null)
		{
			if (!form.getLocalContext().getCurrentDateIsNotNull())
			{
				form.bookingCalendarAppts().setCurrentMonth(currentDate);
				form.getLocalContext().setCurrentDate(currentDate);
			}
		}

		Date dateStart = new Date(form.bookingCalendarAppts().getCurrentMonth().getYear(), form.bookingCalendarAppts().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendarAppts().getCurrentMonth().getYear(), form.bookingCalendarAppts().getCurrentMonth().getMonth(), form.bookingCalendarAppts().getCurrentMonth().getNumberOfDaysInTheMonth());

		SessionShortVoCollection  voCollSessionShort =  new SessionShortVoCollection();

		if (form.cmbLocation().getValue() != null || (locationList != null && locationList.size() > 0))
		{
			// this means we have to search for flexible profiles
			if (Boolean.TRUE.equals(form.getLocalContext().getFlexibleSessions()))
			{
				voCollSessionShort = domain.listFlexibleSessions(dateStart, dateEnd, form.cmbActivity().getValue(), form.cmbService().getValue(), form.cmbLocation().getValue(), form.qmbListOwner().getValue(), form.cmbClinicType().getValue(), locationList, form.cmbListType().getValue(), form.cmbUrgency().getValue(), form.getGlobalContext().Scheduling.getWardAttendance());
			}
			else
				voCollSessionShort = domain.listSession(dateStart, dateEnd, form.cmbActivity().getValue(), form.cmbService().getValue(), form.cmbLocation().getValue(), form.qmbListOwner().getValue(), form.cmbClinicType().getValue(), // WDEV-18411
						locationList, form.cmbListType().getValue(), form.cmbUrgency().getValue()); // wdev-19419
		}

		form.getLocalContext().setSessions(voCollSessionShort);
	}

	private void initialiseCalendar()
	{
		SessionShortVoCollection sessions = form.getLocalContext().getSessions();

		if (sessions == null)
			return;

		// Go through the sessions for this month and where there are no
		// sessions for a given calendar date
		// call addNoSessionDates which effectively disables that date on the
		// calendar
		Date dateStart = new Date(form.bookingCalendarAppts().getCurrentMonth().getYear(), form.bookingCalendarAppts().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendarAppts().getCurrentMonth().getYear(), form.bookingCalendarAppts().getCurrentMonth().getMonth(), form.bookingCalendarAppts().getCurrentMonth().getNumberOfDaysInTheMonth());

		Date dateSession = dateStart;
		while (dateSession.isLessOrEqualThan(dateEnd))
		{
			boolean bFound = false;

			for (SessionShortVo session : sessions)
			{
				if (session.getSessionDate().equals(dateSession))
				{
					bFound = true;
					form.bookingCalendarAppts().addPercentage(dateSession, calculatePercentage(dateSession));
				}
			}

			if (!bFound)
				form.bookingCalendarAppts().addNoSessionDates(new Date(dateSession));

			dateSession.addDay(1);
		}

		ServiceLiteVo referralService = form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getReferralLetterDetail() != null ? form.getLocalContext().getReferral().getReferralLetterDetail().getService() : null;

		//WDEV-19388
		if (referralService != null && form.cmbService().getValue() != null && referralService.getID_Service().equals(form.cmbService().getValue().getID_Service()) && form.cmbActivity().getValue() != null && Boolean.TRUE.equals(form.cmbActivity().getValue().getFirstAppointment()))
			addColoursForKPIDate();
	}

	/**
	 * WDEV-5680
	 */
	private void addColoursForKPIDate()
	{
		Date[] arrDates = form.getLocalContext().getKPIDays();
		if (arrDates == null || arrDates.length == 0)// WDEV-11713
			return;
		// WDEV-11761 Start
		int noOfColors = (int) Math.ceil((float) arrDates.length / 5);
		float colorGap = 510;
		float realValue = 0;
		if (noOfColors > 2)
			colorGap = colorGap / (noOfColors - 1);
		if (colorGap < 1)
			colorGap = 1;
		int[] startColor = new int[] { 0, 255, 0 };
		int[] middleColor = new int[] { 255, 255, 0 };
		int[] endColor = new int[] { 255, 0, 0 };

		int[] currColor = startColor;
		int weekForColor = 0;
		for (int i = 0; i < arrDates.length; i++)
		{
			int colorNo = (int) Math.floor(i / 5);
			if (colorNo == 0)
			{
				// First color
				form.bookingCalendarAppts().setBackColor(arrDates[i], Color.fromRGB(startColor[0], startColor[1], startColor[2]));
				continue;
			}
			if (colorNo + 1 >= noOfColors)
			{
				// Red - Last color
				form.bookingCalendarAppts().setBackColor(arrDates[i], Color.fromRGB(endColor[0], endColor[1], endColor[2]));
				continue;
			}
			// should show yellow color?
			if ((noOfColors % 2 == 1) && (colorNo == noOfColors / 2))
			{
				form.bookingCalendarAppts().setBackColor(arrDates[i], Color.fromRGB(middleColor[0], middleColor[1], middleColor[2]));
				currColor = middleColor;
				realValue = 255;
				continue;
			}
			// Calculate color
			if (weekForColor == colorNo)
			{
				form.bookingCalendarAppts().setBackColor(arrDates[i], Color.fromRGB(currColor[0], currColor[1], currColor[2]));
			}
			else
			{
				// Calculate next color
				float rest = colorGap;
				if (currColor[0] < 255)
				{
					rest = realValue + colorGap - 255;
					realValue += colorGap;
					currColor[0] = (int) realValue;
					if (rest < 0)
						rest = 0;
					if (currColor[0] > 255)
					{
						realValue = 255;
						currColor[0] = 255;
					}

				}
				if (currColor[0] == 255)
				{

					realValue = realValue - rest;
					currColor[1] = (int) realValue;

					if (currColor[1] < 0)
						currColor[1] = 0;

				}
				weekForColor = colorNo;
				form.bookingCalendarAppts().setBackColor(arrDates[i], Color.fromRGB(currColor[0], currColor[1], currColor[2]));
			}
		}

		//for 60 days past KPI date, add a different colour
		Date dateFrom = arrDates[arrDates.length - 1].copy();
		Date dateTo = dateFrom.copy();
		dateTo.addDay(60);

		while (dateFrom.isLessOrEqualThan(dateTo))
		{
			dateFrom.addDay(1);
			form.bookingCalendarAppts().setDateColor(dateFrom.copy(), Color.Red, Color.White);
		}

		// WDEV-11761 End

		/*
		 * //WDEV-11761 //WDEV-11713 Start //Get no of weeks int noOfWeeks =
		 * (int) Math.ceil((float)arrDates.length/5);
		 * 
		 * int colorInterval = 18; if (noOfWeeks > 1) colorInterval = (int)
		 * Math.floor(18/(noOfWeeks-1));
		 * 
		 * if (colorInterval <= 0) colorInterval = 1;
		 * 
		 * 
		 * for (int i = 0 ; i < arrDates.length ; i++) { int week = (int)
		 * Math.floor(i/5);
		 * 
		 * int colorIndex = week*colorInterval; if (colorIndex > 17 || week ==
		 * noOfWeeks-1) { colorIndex = 17; }
		 * 
		 * form.bookingCalendarAppts().setBackColor(arrDates[i],
		 * Color.fromRGB(colors
		 * [colorIndex][0],colors[colorIndex][1],colors[colorIndex][2])); }
		 */
		// WDEV-11713 Stop
		/*
		 * WDEV-11713 if (arrDates.length > 0) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[0],
		 * Color.fromRGB(0, 128, 0)); if (arrDates.length > 1) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[1],
		 * Color.fromRGB(0, 125, 0)); if (arrDates.length > 2) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[2],
		 * Color.fromRGB(255, 255, 0)); if (arrDates.length > 3) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[3],
		 * Color.fromRGB(206, 206, 0)); if (arrDates.length > 4) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[4],
		 * Color.fromRGB(255, 181, 145)); if (arrDates.length > 5) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[5],
		 * Color.fromRGB(255, 128, 66)); if (arrDates.length > 6) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[6],
		 * Color.fromRGB(255, 99, 23)); if (arrDates.length > 7) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[7],
		 * Color.fromRGB(255, 147, 147)); if (arrDates.length > 8) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[8],
		 * Color.fromRGB(255, 53, 53)); if (arrDates.length > 9) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[9],
		 * Color.fromRGB(217, 0, 0)); } } } } } } } } } }
		 */
	}

	private int calculatePercentage(Date dateSession)
	{
		SessionShortVoCollection selectedSessions = new SessionShortVoCollection();

		// go through Sessions Collection get matching ones for this day
		for (SessionShortVo session : form.getLocalContext().getSessions())
		{
			if (session.getSessionDate().equals(dateSession))
				selectedSessions.add(session);
		}

		// When calculating percentage use the Calendar Slots (unmapped
		// collection) from VO - as this contains only the slots
		// the activity that was queried by, not the indiscriminately total /
		// remaining slots variables from BO
		int totalSlotsForActivity = 0;
		int remainingSlotsForActivity = 0;

		for (SessionShortVo session : selectedSessions)
		{
			if (session.getCalendarSlots() != null)
			{
				totalSlotsForActivity += session.getCalendarSlots().size();

				for (SessionSlotWithStatusOnlyVo slot : session.getCalendarSlots())
				{
					if (Status_Reason.SLOTOPENED.equals(slot.getStatus()))
					{
						remainingSlotsForActivity++;
					}
				}
			}
		}

		int bookedSlotsForActivity = totalSlotsForActivity - remainingSlotsForActivity;

		return (int) (bookedSlotsForActivity * 100.0f / totalSlotsForActivity);
	}

	protected void onCmbServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadActivities();

		boolean isFlexible = domain.isActivityFlexible(form.cmbService().getValue(), form.cmbActivity().getValue());

		showTimeControlsForFlexibleAppts(isFlexible);
		updateClinicType(isFlexible);

		clearSearchResults();
		
		//WDEV-22344 Clear list owner query combo
		form.qmbListOwner().setValue(null);
		form.qmbListOwner().clear();

	}

	private void clearSearchResults()
	{
		clearBookingCalendar();
		form.getLocalContext().setSelectedDates(null); 
		clearScreen(true);
		form.bookingCalendarAppts().setEnabled(false);

	}

	private void updateClinicType(boolean isFlexible)
	{
		ServiceFunctionRefVo storedValue = form.cmbClinicType().getValue();

		form.cmbClinicType().clear();
		form.cmbClinicType().setEnabled(false);

		if (form.cmbService().getValue() == null || isFlexible || Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getWardAttendance()))
			return;

		ServiceFunctionLiteVoCollection voServiceFunctions = domain.listServiceFunctionsLite(form.cmbService().getValue());

		if (voServiceFunctions != null)
		{
			for (int i = 0; i < voServiceFunctions.size(); i++)
			{
				ServiceFunctionLiteVo voServiceFunctionLite = voServiceFunctions.get(i);
				form.cmbClinicType().newRow(voServiceFunctionLite, voServiceFunctionLite.getFunction().getText());
			}
		}

		form.cmbClinicType().setEnabled(voServiceFunctions != null);

		form.cmbClinicType().setValue(storedValue);

	}

	// WDEV-20279
	private boolean checkBetweenFirstAppts()
	{
		Booking_AppointmentVoCollection appts = form.getLocalContext().getSelectedAppointments();
		for (int i = 0; i < appts.size(); i++)
		{
			for(int j = i+1; j < appts.size(); j++)
			{
				if (appts.get(i).getActivity() != null && 
						Boolean.TRUE.equals(appts.get(i).getActivity().getFirstAppointment()) && 
						Boolean.TRUE.equals(appts.get(j).getActivity().getFirstAppointment()) && 
						appts.get(i).getSession() != null && appts.get(i).getSession().getService() != null &&
						appts.get(i).getSession().getService().equals(appts.get(j).getSession().getService()))
				{
					return true;
				}
			}
		}

		return false;
	}

	//start WDEV-20279
	private boolean existsFirstAppts()
	{
		CatsReferralRefVo referral =  form.getGlobalContext().RefMan.getCatsReferral();

		ServiceRefVoCollection services = new ServiceRefVoCollection();

		for (Booking_AppointmentVo appointment : form.getLocalContext().getSelectedAppointments())
		{
			if (appointment.getActivity() != null && Boolean.TRUE.equals(appointment.getActivity().getFirstAppointment()) 
					&& appointment.getSession() != null && appointment.getSession().getService() != null)
			{
				services.add(appointment.getSession().getService());
			}
		}

		Integer conflictAppointments = domain.countFirstActivityAppointmentsForServices(referral, services);

		if (conflictAppointments > 0)
			return true;

		return false;
	}

	private Patient updateLocalPatientWithPds(Patient initialPatient, Patient pdsPatient, PdsRequestParameters params, MissingMappingVoCollection missingMappings)
	{
		ArrayList errors = new ArrayList();
		Patient pat = null;

		if(missingMappings != null && missingMappings.size() > 0)
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(this.domain);
			helper.displayMissingMappings(missingMappings, engine);
		}
		
		try
		{
			pat = domain.updateLocalPatientWithPds(initialPatient, pdsPatient, errors, form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole(), missingMappings);
		}
		catch (DomainInterfaceException e1)
		{
			e1.printStackTrace();
		}
		catch (StaleObjectException e1)
		{
			e1.printStackTrace();
		}
		catch (ForeignKeyViolationException e1)
		{
			e1.printStackTrace();
		}

		if(errors.size() > 0)
		{
			String[] template = new String[] {""};
			String[] patErrors = (String[]) errors.toArray(template);
			if (patErrors != null)
			{
				engine.showErrors(patErrors);
				return null;
			}
		}

		return pat;
	}

	protected void onBtnBookClick() throws ims.framework.exceptions.PresentationLogicException
	{	

		//WDEV-22023
		//WDEV-20534
		PDSConfigurationVo config = domain.getPDSConfiguration();
		if (config!=null && config.getTP_BookOutpatientApptIsNotNull() && config.getTP_BookOutpatientAppt())
		{
			if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			{
				// PDS AUTHENTICATION
				PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
				if(pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
				{
					form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
					if (Boolean.FALSE.equals(ConfigFlag.GEN.BOOKING_APPOINTMENT_PERFORM_AUTO_PDS_LOOKUP.getValue()))
					{
						engine.open(form.getForms().Core.PDSDemographicsDialog);
						return;
					}
					else
					{
						pdsLookup();
					}
				}
				// END PDS AUTHENTICATION
			}
			else
			{
				engine.open(form.getForms().Core.PDSDemographicsDialog);
				return;
			}
		}
		else
			//no demographics display

		bookHandler();		
		//WDEV-20534 ends here
		//WDEV-22023
	}

	private void pdsLookup()
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
			PatientShort pat = form.getGlobalContext().Core.getPatientShort();
			PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());
			Patient pdsPatient = null;
			Patient initialPatient = null;

			try
			{
				initialPatient = domain.getPatient(pat);
			}
			catch (StaleObjectException e2)
			{
				e2.printStackTrace();

				engine.showMessage("Error getting the patient record: " + e2.toString());
				return;
			}

			if(initialPatient.getSCN() == null)
			{
				if(initialPatient.getNhsn() == null)
				{
					try
					{
						helper.setPatientInContext(initialPatient);
						helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PDS_SYNC_REQUIRED,  "The current patient doesn not have an NHS number", PDSBackOfficeWorkPriority.P1);
						return;
					}
					catch (PdsException e1)
					{
						e1.printStackTrace();
						String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
						engine.showMessage(err);
					}

				}
			}

			if (pat.getNhsn() != null)
			{

				try
				{
					pdsPatient = helper.makeRequest(params, pat.getNhsn() != null ? pat.getNhsn().getIdValue() : "", PdsRetrievalQueryHelper.HistoricDataIndicator.ON);

					if(pdsPatient == null)
					{
						//spine returned an error
						PdsErrorVo pdsError = helper.getLastErrorDetails();
						String err = "";

						if(PdsQuery.NO_MATCH.equals(pdsError.getQueryResponseCode()))
						{
							engine.showMessage("This record is found to be invalid. Please treat all demographic and clinical data on the record with caution.");

							try
							{
								helper.createBackOfficeItemAndNotification(PDSBackOfficeType.GENERAL, "Review Invalid record", PDSBackOfficeWorkPriority.P1);
								return;
							}
							catch (PdsException e1)
							{
								e1.printStackTrace();
								err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
								engine.showMessage(err);
							}
						}
						else
						{
							err = "Error calling PdsRetrievalQuery, query response code: " + pdsError.getQueryResponseCode();
							engine.showMessage(err);

							try
							{
								helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  err, PDSBackOfficeWorkPriority.P1);
								return;
							}
							catch (PdsException e1)
							{
								e1.printStackTrace();
								err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
								engine.showMessage(err);
							}
						}
					}
				}
				catch (PdsException e)
				{
					e.printStackTrace();

					engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString());

					helper.setPdsErrorFromException(e);
					try
					{
						helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  e.toString(), PDSBackOfficeWorkPriority.P1);
						return;
					}
					catch (PdsException e1)
					{
						e1.printStackTrace();
						String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
						engine.showMessage(err);
					}
				}
			}
			updateLocalPatientWithPds(initialPatient, pdsPatient, params, helper.getMissingMappings());
		}

	private void bookHandler()
	{
		//WDEV-22307
		if(Boolean.FALSE.equals(ConfigFlag.DOM.SCHEDULING_ALLOW_MULTIPLE_FIRST_ACTIVITIES_FOR_THE_SAME_SERVICE.getValue()))
		{
    		//WDEV-20279
    		if(checkBetweenFirstAppts())
    		{
    			engine.showMessage("More than one First Activity Appointment for Service selected.", "Errors");
    			return;
    		}
    
    		if (existsFirstAppts() 
    				&& 			//If a rebook of a first appointment (already saved) we dont want this message  wdev-21206
    				(form.getLocalContext().getIsRebookApptSelected() == null || (form.getLocalContext().getIsRebookApptSelectedIsNotNull() &&  ! form.getLocalContext().getIsRebookApptSelected())) )
    		{
    			engine.showMessage("This Referral already has a First Activity Appointment booked for the Service.", "Errors");		//http://jira/browse/WDEV-21154
    			return;
    		}
		}

		if (form.cmbActivity().getValue() != null && Boolean.TRUE.equals(form.cmbActivity().getValue().getFirstAppointment()) && appointmentsPastFirstApptKPIDateWereSelected())
		{
			engine.open(form.getForms().RefMan.ReasonForBookingPastFirstApptKPIDialog);
			return;
		}

		bookAppointment();
	}

	private boolean appointmentsPastFirstApptKPIDateWereSelected()
	{
		if (form.getLocalContext().getSelectedAppointments() != null)
		{
			Date kpiDate = form.getLocalContext().getReferral() != null
			&& form.getLocalContext().getReferral().getReferralLetterDetail() != null ? form.getLocalContext().getReferral().getReferralLetterDetail().getEndDateKPI() : null; //wdev-21286

			if (kpiDate == null 
					||	(form.getLocalContext().getReferralIsNotNull() //wdev-21286
							&& form.getLocalContext().getReferral().getReferralLetterDetailIsNotNull()
							&& form.getLocalContext().getReferral().getReferralLetterDetail().getReferrerTypeIsNotNull()
							&& SourceOfReferral.ED.equals(form.getLocalContext().getReferral().getReferralLetterDetail().getReferrerType()) ))
				return false;

			for (int i = 0; i < form.getLocalContext().getSelectedAppointments().size(); i++)
			{
				Booking_AppointmentVo appointment = form.getLocalContext().getSelectedAppointments().get(i);

				if (appointment.getAppointmentDate() != null
						&& appointment.getAppointmentDate().getDate().after(kpiDate.getDate()))
					return true;
			}
		}

		return false;
	}

	private void bookAppointment()
	{
		Sch_BookingVo voBooking = form.getLocalContext().getSch_Booking();
		voBooking.setPatient(form.getLocalContext().getPatient());
		voBooking.setBookingComments(form.txtBookingComments().getValue());

		// WDEV-5829 - set the new slot for the rebookedappt in the appointments
		// collection
		if (form.getLocalContext().getIsRebookApptSelectedIsNotNull() && form.getLocalContext().getIsRebookApptSelected())
		{
			for (Booking_AppointmentVo item : voBooking.getAppointments())
			{
				if (item.getID_Booking_Appointment().equals(form.getLocalContext().getSelectedAppointments().get(0).getID_Booking_Appointment()))
				{
					voBooking.getAppointments().remove(item);
					voBooking.getAppointments().add(form.getLocalContext().getSelectedAppointments().get(0));
					break;
				}
			}
		}
		else
		{	
			voBooking.setAppointments(form.getLocalContext().getSelectedAppointments());
		}
		
		if (voBooking.getAppointmentsIsNotNull())
		{
			Date kpiDate = form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getReferralLetterDetail() != null ? form.getLocalContext().getReferral().getReferralLetterDetail().getEndDateKPI() : null;//wdev-21286

			for (int i = 0; i < voBooking.getAppointments().size(); i++)
			{
				// if we are rebooking only set the status to BOOKED for the
				// selected rebooked appt
				if (Boolean.TRUE.equals(form.getLocalContext().getIsRebookApptSelected()))
				{
					if (form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull())
					{
						if (voBooking.getAppointments().get(i).equals(form.getGlobalContext().Scheduling.getBookingAppointment()))
						{
							voBooking.getAppointments().get(i).setApptStatus(Status_Reason.BOOKED);
							voBooking.getAppointments().get(i).setLinkedAppointments(form.getGlobalContext().Scheduling.getBookingAppointment().getLinkedAppointments());//WDEV-19543
							if (Boolean.TRUE.equals(voBooking.getAppointments().get(i).getIsDisplaced()))	//WDEV-23881 
								voBooking.getAppointments().get(i).setIsDisplaced(false);
						}
					}
				}
				else
				{	
					voBooking.getAppointments().get(i).setApptStatus(Status_Reason.BOOKED);
				}	

				if (voBooking.getAppointments().get(i).getIsCABBooking() == null)
					voBooking.getAppointments().get(i).setIsCABBooking(false);

				voBooking.getAppointments().get(i).setPatient(form.getGlobalContext().Core.getPatientShort());

				//WDEV-19388 if the appointment is past the First Appointment KPI Date, populate the reason
				if (form.cmbActivity().getValue() != null && Boolean.TRUE.equals(form.cmbActivity().getValue().getFirstAppointment()) && voBooking.getAppointments().get(i).getAppointmentDate() != null
						&& voBooking.getAppointments().get(i).getAppointmentDate().isGreaterThan(kpiDate) && form.getGlobalContext().RefMan.getReasonPastFirstApptKPI() != null)
				{
					voBooking.getAppointments().get(i).setReasonForBreachingFirstApptKPI(form.getGlobalContext().RefMan.getReasonPastFirstApptKPI().getReason());
					voBooking.getAppointments().get(i).setCommentsForBreachingFirstApptKPI(form.getGlobalContext().RefMan.getReasonPastFirstApptKPI().getComment());
				}

				// associate the inv with the appt (OrdInvAppt) - this field is
				// unmapped and the domain needs to handle the association with
				// the catsreferral
				if (form.treInvAppts().getValue() != null)
				{
					if (form.treInvAppts().getValue() instanceof OrderInvestigationBookingVo)
						voBooking.getAppointments().get(i).setOrderInvestigation((OrderInvestigationBookingVo) form.treInvAppts().getValue());
				}

				//WDEV-20643
				if (Boolean.TRUE.equals(form.getGlobalContext().RefMan.getCatsRefConsultationActivityRequired()) && voBooking.getAppointments().get(i)!=null && voBooking.getAppointments().get(i).getActivity()!=null  &&  Boolean.TRUE.equals(voBooking.getAppointments().get(i).getActivity().getFirstAppointment()))
				{
					voBooking.getAppointments().get(i).setFirstConsultationActivity(true);
				}

				//WDEV-20589
				if (form.getLocalContext().getformOpenedFromPreAssessmentWorklist() && form.getGlobalContext().RefMan.getPatientElectiveListRefIsNotNull())
				{
					voBooking.getAppointments().get(i).setElectiveList(form.getGlobalContext().RefMan.getPatientElectiveListRef());
				}

				// if we are rebooking now set the requires rebooking to false
				// for the appt
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull() && form.getLocalContext().getIsRebookApptSelected())
				{
					if (form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull())
					{
						if (voBooking.getAppointments().get(i).equals(form.getGlobalContext().Scheduling.getBookingAppointment()))
							voBooking.getAppointments().get(i).setRequiresRebook(false);

						// WDEV-8376
						ArrayList<Integer> ids = new ArrayList<Integer>();
						ids.add(form.getGlobalContext().Scheduling.getBookingAppointment().getID_Booking_Appointment());
						form.getGlobalContext().Scheduling.setAppointmentIds(ids);
					}
				}

				if (form.grdAppt().getRows().size()==1) //if booking only one appt, it takes the selected appt from Link Appointments Dialog
				{
					form.getGlobalContext().RefMan.setLinkApptsOnMultipleBooking(null);//WDEV-20053
					
					if (form.getGlobalContext().RefMan.getLinkedAppointmentsCollection() != null && form.getGlobalContext().RefMan.getLinkedAppointmentsCollection().size() > 0)
						voBooking.getAppointments().get(i).setLinkedAppointments(form.getGlobalContext().RefMan.getLinkedAppointmentsCollection()); //WDEV-19543
				}
			}
		}
		// WDEV-18411
		updateAppointmentswithAdditionalDetails(voBooking.getAppointments());

		form.getLocalContext().setSch_Booking(voBooking);

		//WDEV-19543
		if (form.grdAppt().getRows().size()>1)
		{
			form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);
			engine.open(form.getForms().RefMan.LinkAppointments, new Object[] {true, form.grdAppt().getValues()}); //WDEV-20053
			return;
		}

		if (ConfigFlag.UI.DISPLAY_WARNING_MESSAGE_IF_BOOKING_IN_PAST.getValue())
		{
			if (isApptInthePast(voBooking))
			{
				form.getLocalContext().setMessageBoxId(engine.showMessage("The selected date of the appointment is in the past. Do you wish to continue to book the appointment?", "Book Historical Appointment", MessageButtons.YESNO));
				return;
			}
		}

		if(form.getLocalContext().getClashesAppointments() != null && form.getLocalContext().getClashesAppointments().size() > 0)
		{
			form.getLocalContext().setClashesAppointmentsMessageBoxId(engine.showMessage("This patient already has appointments/TCIs on " + getClashesAppointmentsText() + ". Do you wish to continue and book this appointment?", "", MessageButtons.YESNO));
			return;
		}
		
		Date referralDate = form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getReferralLetterDetail() != null ? form.getLocalContext().getReferral().getReferralLetterDetail().getDateOfReferral()  : null;
		if(apptCommunicatedMessageNeeded(voBooking,referralDate)) //http://jira/browse/WDEV-21154
		{
			form.getLocalContext().setCommunicatedMessageBoxId(engine.showMessage("Has the appointment date been communicated to and agreed with Patient?", "Appointment communicated?", MessageButtons.YESNO));
			return;
		}
		if(voBooking!=null&&voBooking.getAppointments()!=null)
		{
			for (Booking_AppointmentVo appt :voBooking.getAppointments()) // clear if its a rebooking and now falls out of requirements
			{
				appt.setWasApptCommunicated(null);
			}
		}
		saveBooking(voBooking, 0);
	}

	private boolean apptCommunicatedMessageNeeded(Sch_BookingVo voBooking, Date referralDate)
	{
		if (voBooking == null)  
			throw new CodingRuntimeException("voBooking cannot be null in method apptCommunicatedMessageNeeded");
		if(form.getGlobalContext().Core.getPatientShort()==null)
			throw new CodingRuntimeException("Global Context patient cannot be null in method apptCommunicatedMessageNeeded");
		
		if(!form.getGlobalContext().Core.getPatientShort().isPaediatricOn(referralDate)&&!isCancerPathway())
		{
			if (voBooking.getAppointmentsIsNotNull())
			{
				for (Booking_AppointmentVo voAppt : voBooking.getAppointments())
				{
					if (voAppt.getID_Booking_Appointment() == null || (voAppt.getRequiresRebookIsNotNull() && voAppt.equals(form.getGlobalContext().Scheduling.getBookingAppointment())))// WDEV-12259
					{
						if (voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().isLessThan(new Date().addDay(21)))
							return true;
					}
				}
			}
		}
		return false;
	}


	private boolean isCancerPathway()
	{
		return domain.isCancerPathwayReferral(form.getGlobalContext().RefMan.getCatsReferral());
	}

	private String getClashesAppointmentsText()
	{
		if(form.getLocalContext().getClashesAppointments() == null || form.getLocalContext().getClashesAppointments().size() == 0)
			return "";

		String text = "";

		for(Iterator iter = form.getLocalContext().getClashesAppointments().iterator(); iter.hasNext(); )
		{
			Object element = iter.next();

			if(element == null)
				continue;

			text += (text.length() > 0 ? ", " : "") + element.toString();
		}

		return text;
	}

	/*
	 * WDEV-18411 private String checkReasonableDate(
	 * ReferralERODForBookAppointmentVoCollection referralERODCollection) { if
	 * (referralERODCollection == null || referralERODCollection.size() == 0)
	 * return null;
	 * 
	 * String warnings = ""; int numberOfDates = 0;
	 * 
	 * for (int i = 0; i < referralERODCollection.size(); i++) { if
	 * (referralERODCollection.get(i) == null) continue;
	 * 
	 * if (referralERODCollection.get(i).getERODDate1() .isLessThan(new
	 * Date().addDay(REASONABLE_DAYS_LIMIT))) { warnings +=
	 * "'Earliest Date Offered' is less than " + REASONABLE_DAYS_LIMIT +
	 * " days"; numberOfDates++; }
	 * 
	 * if (referralERODCollection.get(i).getERODDate2() != null &&
	 * referralERODCollection .get(i) .getERODDate2() .isLessThan( new
	 * Date().addDay(REASONABLE_DAYS_LIMIT))) { warnings += (warnings.length() >
	 * 0 ? "\n" : "") + "'Second Date Offered' is less than " +
	 * REASONABLE_DAYS_LIMIT + " days"; numberOfDates++; } }
	 * 
	 * if (warnings.length() > 0) { warnings += "\nDid the patient confirm " +
	 * (numberOfDates >= 2 ? "these dates" : "this date") + "?"; }
	 * 
	 * return warnings.length() > 0 ? warnings : null; }
	 */
	// WDEV-18411 //WDEV-18557
	private void updateAppointmentswithAdditionalDetails(Booking_AppointmentVoCollection appts)
	{

		if (appts == null || (appts != null && appts.size() == 0))
			return;

		for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		{
			grdApptRow row = form.grdAppt().getRows().get(i);

			if (row != null && row.getValue() != null)
			{
				Booking_AppointmentVoCollection selectedApptsForBooking = form.getLocalContext().getSelectedAppointments();

				for (int j = 0; j < selectedApptsForBooking.size(); j++)
				{
					Booking_AppointmentVo appt = selectedApptsForBooking.get(j);

					if (appt != null && appt.equals(row.getValue()))
					{
						appt.setConsMediaType(row.getcolConsMedia());
						appt.setPatientCategory(row.getcolPatCategory());
						appt.setDoNotMove(row.getcolDoNotMove());
					}
				}
			}
		}
	}

	private boolean isSafetyQuestionnaireCompleted(Sch_BookingVo voBooking)
	{
		// Check booking parameter
		if (voBooking == null || voBooking.getAppointments() == null || voBooking.getAppointments().size() == 0)
			throw new CodingRuntimeException("Can not check safety questionnaire for null record.");

		// Check if booking has OrderInvestigation associated
		if (voBooking.getAppointments().get(0).getOrderInvestigationIsNotNull())
		{
			OrderInvestigationBookingVo investigation = voBooking.getAppointments().get(0).getOrderInvestigation();

			// If the investigation hasn't a provider system then terminate
			// function and allow to proceed with booking
			if (investigation == null || investigation.getInvestigation() == null || investigation.getInvestigation().getProviderService() == null || investigation.getInvestigation().getProviderService().getProviderSystem() == null)
				return true;

			ProviderSystemLiteVo providerSystem = investigation.getInvestigation().getProviderService().getProviderSystem();

			// If the investigation provider system has 'Send Questionnaire'
			// marked as true - then check if the CATS Referral has Safety
			// Questionnaire completed
			if (Boolean.TRUE.equals(providerSystem.getSendQuestionnaire()))
			{
				LocationServiceLiteVo locationService = investigation.getInvestigation().getProviderService().getLocationService();

				// Check if a service can be reached
				// WDEV-14580 - Services no longer require to have a speciality
				if (locationService == null || locationService.getService() == null)
					return false;

				// Check if the referral has no documents
				if (Boolean.TRUE.equals(domain.hasSafetyQuestionnarie(form.getGlobalContext().RefMan.getCatsReferral(), locationService.getService())))
					return true;

				// If the safety questionnaire is required but not found - stop
				// the booking process
				return false;
			}
		}

		// Allow booking - can reach this case when safety questionnaire is not
		// required
		return true;
	}

	private boolean isApptInthePast(Sch_BookingVo voBooking)
	{
		if (voBooking == null)
			throw new CodingRuntimeException("voBooking cannot be null in method isApptInthePast");

		if (voBooking.getAppointmentsIsNotNull())
		{
			for (Booking_AppointmentVo voAppt : voBooking.getAppointments())
			{
				if (voAppt.getID_Booking_Appointment() == null || (voAppt.getRequiresRebookIsNotNull() && voAppt.equals(form.getGlobalContext().Scheduling.getBookingAppointment())))// WDEV-12259
				{

					if (voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().isLessThan(new Date()))
						return true;
				}
			}
		}

		return false;
	}

	/**
	 * @param voBooking
	 */
	private void saveBooking(Sch_BookingVo voBooking, int staleCount)
	{
		try
		{
			// WDEV-13999 - CARE UK only functionality
			// Check if the appointment has OrderInvestigation
			// WDEV-14580 - Moved 'Safety Questionnaire' check at save time
			if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK"))
			{
				if (isSafetyQuestionnaireCompleted(voBooking) == false)
				{
					engine.showMessage("It is not possible to book an appointment for this investigation as no safety questionnaire is complete.");
					return;
				}
			}

			voBooking.setSessionSlotDNAorDisplaced(form.getLocalContext().getSessionSlotDNAorDisplaced()); // wdev-12090

			// WDEV-18411
			boolean isERODUpdatedOnBooking = form.getGlobalContext().RefMan.getReferralERODIsNotNull() && ERODType.OUTPATIENT.equals(form.getGlobalContext().RefMan.getReferralEROD().getERODType());

			// wdev-12682
			voBooking = domain.saveBooking(voBooking, form.getGlobalContext().RefMan.getCatsReferral(), form.getLocalContext().getIsRebookApptSelectedIsNotNull() && form.getLocalContext().getIsRebookApptSelected(), form.getLocalContext().getReferralERODForSaving(), isERODUpdatedOnBooking, form.getGlobalContext().RefMan.getLinkedAppointmentsCollection(), form.getGlobalContext().RefMan.getLinkApptsOnMultipleBooking()); //WDEV-19543  //WDEV-20053
			
			Booking_AppointmentRefVo firstBookedAppt = getFirsrBookedAppointment(voBooking);
			domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral(), firstBookedAppt);
			// wdev-12826
			if (form.getGlobalContext().RefMan.getCatsReferral() != null)
				form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));
			// -----------
			form.getLocalContext().setSelectedAppointments(voBooking.getAppointments());
			if (ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
				savePatientICP();
		}
		catch (StaleObjectException e)
		{
			staleCount++;

			// WDEV-9008 catch attempting to book appointment into slot thats
			// already has an appt when rebooking
			// only possible fix is to kick user out of screen
			if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			{
				if (engine.isDialog())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					engine.close(DialogResult.OK);
					return;
				}
			}

			// WDEV-19050
			if (staleCount==1 && e.getStaleObject().getClass().isAssignableFrom(Sch_Session.class))
			{
				System.out.println("StaleObjectException on session - retrying");
				saveBooking(voBooking, staleCount);
				return;
			}

			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			clearScreen(false);

			open();
			form.setMode(FormMode.VIEW);
			return;
		}
		catch (DomainInterfaceException e)
		{

			engine.showMessage(e.getMessage());
			return;
		}

		clearScreen(false);
		clearGlobalContexts();
		open();
		form.setMode(FormMode.VIEW);
		// WDEV-8376
		if (form.getGlobalContext().Scheduling.getAppointmentIds() == null)
			form.getGlobalContext().Scheduling.setAppointmentIds(voBooking.getApptIds());

		//WDEV-18517
		form.getGlobalContext().RefMan.setAppointmentSaved(Boolean.TRUE);

		engine.open(form.getForms().Scheduling.PrintAppointment, false); //WDEV-22308
	}

	//WDEV-23545
	private Booking_AppointmentRefVo getFirsrBookedAppointment(Sch_BookingVo voBooking)
	{
		if(voBooking == null || voBooking.getAppointments() == null || voBooking.getAppointments().size() == 0)
			return null;
		
		for(Booking_AppointmentVo appt : voBooking.getAppointments())
		{
			if(appt == null || appt.getCurrentStatusRecord() == null)
				continue;
			
			if(Status_Reason.BOOKED.equals(appt.getCurrentStatusRecord().getStatus()))
				return appt;
		}
		
		return null;
	}

	private void savePatientICP()
	{
		PatientICPFullVo voICP = domain.getPatientICP(form.getGlobalContext().Core.getCurrentCareContext());

		if (voICP != null)
		{
			Booking_AppointmentRefVoCollection voApptsColl = voICP.getAppointments();
			if (voApptsColl == null)
				voApptsColl = new Booking_AppointmentRefVoCollection();

			Booking_AppointmentVoCollection voCollBookAppointments = form.getLocalContext().getSelectedAppointments();
			for (int i = 0; i < voCollBookAppointments.size(); i++)
			{
				voApptsColl.add(voCollBookAppointments.get(i));
			}

			voICP.setAppointments(voApptsColl);

			String[] strErr = voICP.validate();
			if (strErr != null)
			{
				engine.showErrors(strErr);
				return;
			}

			try
			{
				voICP = domain.savePatientICP(voICP);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
		}
	}

	/*
	 * WDEV-18411 private String[] updateAppointmentsWithErodDate(
	 * Booking_AppointmentVoCollection appointments, Date erodDate, Date
	 * erodDate2, SessionSlotVo sessionSlot, Boolean colEROD) {
	 * ArrayList<String> errors = new ArrayList<String>();
	 * 
	 * if (appointments == null || sessionSlot == null) return null;
	 * 
	 * if (erodDate == null && colEROD == true) {
	 * errors.add("'Earliest Date Offered' is mandatory when EROD is checked");
	 * } else { for (Booking_AppointmentVo voAppt : appointments) { if
	 * (voAppt.getSessionSlotIsNotNull() &&
	 * voAppt.getSessionSlot().equals(sessionSlot)) if (erodDate == null ||
	 * erodDate.isGreaterOrEqualThan(new Date())) {
	 * voAppt.setEarliestOfferedDate(erodDate); //
	 * ------------------------wdev-9744 updateHistoryStatus(voAppt); //
	 * --------------------------- } else {
	 * errors.add("'Earliest Date Offered' must be greater than or equal to Today"
	 * ); break; } } }
	 * 
	 * if (erodDate2 == null && colEROD == true) {
	 * errors.add("'Second Date Offered' is mandatory when EROD is checked"); }
	 * 
	 * if (Boolean.TRUE.equals(colEROD) && erodDate != null && erodDate2 != null
	 * && erodDate.isGreaterOrEqualThan(erodDate2)) { errors.add(
	 * "'Second Date Offered' must be greater than 'Earliest Date Offered'"); }
	 * 
	 * return (String[]) (errors.size() > 0 ? errors.toArray(new String[0]) :
	 * null); }
	 */

	/*
	private void updateHistoryStatus(Booking_AppointmentVo appoitment)
	{
		if (appoitment == null)
			return;

		Appointment_StatusVoCollection tempCol = form.getLocalContext().getApptStatus();
		for (Appointment_StatusVo statusVo : appoitment.getApptStatusHistory())
		{
			for (Appointment_StatusVo statusVo1 : tempCol)
			{
				if (statusVo.equals(statusVo1))
					statusVo.setEarliestOfferedDate(appoitment.getEarliestOfferedDate());
			}
		}
	}
	*/

	private void highlightPossibleConflicts(Object rowValue, boolean isChecked)
	{
		Date slotDate = form.bookingCalendarAppts().getSelectedDay();

		if(slotDate == null)
			return;

		for(int i=0; i<form.treInvAppts().getNodes().size(); i++)
		{
			TreeNode parentNode = form.treInvAppts().getNodes().get(i);

			if(parentNode == null || parentNode.getValue().equals(REBOOK_APPT_NODE))
				continue;

			for(int j=0; j<parentNode.getNodes().size(); j++)
			{
				TreeNode childNode = parentNode.getNodes().get(j);

				if(childNode == null)
					continue;

				if(form.getLocalContext().getIsRebookApptSelected() != null)
					childNode.setTextColor(Color.Default);

				if((childNode.getValue() instanceof BookingAppointmentLiteVo && slotDate.equals(((BookingAppointmentLiteVo) childNode.getValue()).getAppointmentDate()))
						|| (childNode.getValue() instanceof TCIForReferralBookingVo && ((TCIForReferralBookingVo) childNode.getValue()).getTCIDate() != null && ((TCIForReferralBookingVo) childNode.getValue()).getTCIDate().equals(slotDate)))
				{
					childNode.setTextColor(isChecked || areStillApptBookedOnDate(slotDate) ? Color.Red : Color.Default);

					if(isChecked)
					{
						if(form.getLocalContext().getClashesAppointments() == null)
							form.getLocalContext().setClashesAppointments(new HashSet<Date>());

						form.getLocalContext().getClashesAppointments().add(slotDate);
					}
					else if(!areStillApptBookedOnDate(slotDate))
					{
						if(form.getLocalContext().getClashesAppointments() != null)
							form.getLocalContext().getClashesAppointments().remove(slotDate);
					}
				}
			}
		}
	}

	private boolean areStillApptBookedOnDate(Date slotDate)
	{
		if(slotDate == null)
			return false;

		int count = 0;
		for(int i=0; i<form.grdAppt().getRows().size(); i++)
		{
			if(form.grdAppt().getRows().get(i).getValue() == null)
				continue;

			if(slotDate.equals(form.grdAppt().getRows().get(i).getValue().getAppointmentDate()))
				count++;
		}

		if(count > 1)
			return true;

		return false;
	}

	/*
	private boolean checkIfThereIsFirstApptPerClock(SessionSlotListVo checkedSessionSlot)
	{
		if (checkedSessionSlot == null || checkedSessionSlot.getID_Session_Slot() == null)
			return false;

		// check locally
		boolean areFirstAppointmentsLocally = false;

		for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		{
			grdApptRow row = form.grdAppt().getRows().get(i);
			if (row.getValue() != null && row.getValue().getActivity() != null && Boolean.TRUE.equals(row.getValue().getActivity().getFirstAppointment()) && form.getLocalContext().getCurrentClock() != null && form.getLocalContext().getCurrentClock().equals(row.getValue().getPathwayClock()))
			{
				areFirstAppointmentsLocally = true;
			}
		}

		// check from DB
		return domain.checkIfThereIsFirstApptPerClock(form.getGlobalContext().RefMan.getCatsReferral(), areFirstAppointmentsLocally, checkedSessionSlot);
	}
	*/

	private void clearAllOtherSelections(DynamicGridRow row)
	{
		// clear the only other appt entry as only allow rebook one appt
		for (int i = 0; i < form.dyngrdSessionSlots().getRows().size(); i++)
		{
			DynamicGridRow sRow = form.dyngrdSessionSlots().getRows().get(i);
			if (row != null)
			{
				if (!sRow.isReadOnly() && !sRow.getValue().equals(row.getValue()))
				{
					DynamicGridCell cellSelect = sRow.getCells().get(getColumnById(COLUMN_SELECT));

					if (Boolean.TRUE.equals(cellSelect.getValue()))
						cellSelect.setValue(false);
				}
			}
		}
	}

	// WDEV-18557
	private ConsMediaAndCategory retrieveConsMediaAndCategoryData(Session_SlotRefVo sessionSlot)
	{

		Map map = form.getLocalContext().getSelectedDates();
		if (map == null)
			return null;

		return (ConsMediaAndCategory) map.get(sessionSlot.getID_Session_Slot());
	}

	private void storeConsMediaAndCategorySelection(Booking_AppointmentVo appointment, ConsMediaAndCategory consMediaCateg)
	{
		Map map = form.getLocalContext().getSelectedDates();

		if (map == null)
			map = new HashMap();

		if (appointment.getSessionSlot() != null)
			map.put(appointment.getSessionSlot().getID_Session_Slot(), consMediaCateg);
		else if (appointment.getParentChildSlot() != null)
			map.put(appointment.getParentChildSlot().getID_SessionParentChildSlot(), consMediaCateg);

		form.getLocalContext().setSelectedDates(map);
	}

	private class ConsMediaAndCategory
	{
		private ConsultationMediaType consMedia;
		private PatientStatus refCategory;

		public ConsMediaAndCategory(ConsultationMediaType consMedia, PatientStatus refCategory)
		{
			this.consMedia = consMedia;
			this.refCategory = refCategory;

		}

		/*
		public void setConsMedia(ConsultationMediaType consMedia)
		{
			this.consMedia = consMedia;
		}

		public void setCategory(PatientStatus refCategory)
		{
			this.refCategory = refCategory;
		}
		*/

		public ConsultationMediaType getConsMedia()
		{
			return consMedia;
		}

		public PatientStatus getCategory()
		{
			return refCategory;
		}
	}

	/**
	 * When rebooking pass the original voAppt to this method in all other cases
	 * create a new appointment
	 * 
	 * @param voAppt
	 * @param slot
	 * @return
	 */
	private Booking_AppointmentVo createAppointment(Booking_AppointmentVo voAppt, SessionSlotListVo sessionSlot)
	{
		Booking_AppointmentVo voBookAppt = voAppt;
		SessionSlotVo slot = domain.getSessionSlot(sessionSlot);

		if (slot.getVersion_Session_Slot() != sessionSlot.getVersion_Session_Slot())
		{
			engine.showMessage("An appointment has already been booked for this slot. Screen will be refreshed.");
			bookingCalendarDateSelected(form.bookingCalendarAppts().getSelectedDay());
			return null;
		}

		if (voBookAppt == null)
		{
			voBookAppt = new Booking_AppointmentVo();
			voBookAppt.setConsMediaType(slot != null && slot.getSession() != null ? slot.getSession().getConsMediaType() : null);
			voBookAppt.setCategory((CatsReferralCategory) (form.getLocalContext().getReferralCategoryIsNotNull() ? form.getLocalContext().getReferralCategory() : null));
			voBookAppt.setPatientCategory(form.getLocalContext().getCatsReferralListVo().getPatientCategory());//WDEV-20719
		}

		voBookAppt.setSessionSlot(slot);
		voBookAppt.setSession(slot.getSession());
		voBookAppt.setServiceFunction(slot.getFunctions() != null && slot.getFunctions().size() > 0 ? slot.getFunctions().get(0) : null);
		voBookAppt.setAppointmentDate(form.bookingCalendarAppts().getSelectedDay());
		voBookAppt.setApptStartTime(slot.getStartTm());
		voBookAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(slot.getStartTm(), slot.getDuration().intValue()));
		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		voBookAppt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());// WDEV-18194
		voBookAppt.setPriority(slot.getPriority());//WDEV-22366
		
		Session_ListOwnerVoCollection listOwnerBySlots = domain.getListOwnerBySlots(slot.getSession());
		
		if(listOwnerBySlots != null &&  listOwnerBySlots.size() > 0)
			voBookAppt.setListOwnerBooked(listOwnerBySlots.get(0).getHcp());//WDEV-22366
		
		// WDEV-6049
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBookAppt.getAppointmentDate());
		voStatus.setApptTime(voBookAppt.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(voBookAppt.getApptStatus());
		// ---wdev-9744
		voStatus.setEarliestOfferedDate(voBookAppt.getEarliestOfferedDate());
		// ------
		voStatus.setSession(voBookAppt.getSessionIsNotNull() ? voBookAppt.getSession() : null); //WDEV-23185
		
		voBookAppt.setCurrentStatusRecord(voStatus);
		if (voBookAppt.getApptStatusHistory() == null)
			voBookAppt.setApptStatusHistory(new Appointment_StatusVoCollection());
		voBookAppt.getApptStatusHistory().add(voStatus);
		// ---------------------------------------------wdev-9744

		Appointment_StatusVoCollection appstatusCol;
		if (form.getLocalContext().getApptStatus() == null)
		{
			form.getLocalContext().setApptStatus(new Appointment_StatusVoCollection());
			appstatusCol = form.getLocalContext().getApptStatus();
		}
		else
			appstatusCol = form.getLocalContext().getApptStatus();

		appstatusCol.add(voStatus);
		form.getLocalContext().setApptStatus(appstatusCol);

		// -----------------------------------------------

		if (!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"))
		{
			if (slot.getDirectoryOfServicesIsNotNull() && slot.getDirectoryOfServices().size() > 0)
				slot.getDirectoryOfServices().get(0).setUBRN(new DateTime().toString());
		}

		voBookAppt.setPathwayClock(form.getLocalContext().getCurrentClock());

		//WDEV-19388
		if (form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getReferralLetterDetail() != null)
		{
			voBookAppt.setRTTBreachKPIDate(form.getLocalContext().getReferral().getReferralLetterDetail().getEnd18WW());

			if (form.cmbActivity().getValue() != null && Boolean.TRUE.equals(form.cmbActivity().getValue().getFirstAppointment()))
				voBookAppt.setFirstApptKPIDate(form.getLocalContext().getReferral().getReferralLetterDetail().getEndDateKPI());//wdev-21286
		}

		return voBookAppt;
	}

	private Booking_AppointmentVo createAppointment(DynamicGridRow row)
	{
		Booking_AppointmentVo voBookAppt = null;
		if (row.getValue() instanceof Booking_AppointmentVo)
			voBookAppt = (Booking_AppointmentVo) row.getValue();
		else
			return null;

		voBookAppt.setAppointmentDate(form.bookingCalendarAppts().getSelectedDay());

		Time slotTime = row.getValue() instanceof SessionSlotVo ? ((SessionSlotVo) row.getValue()).getStartTm() : null;
		voBookAppt.setApptStartTime(row.getValue() instanceof SessionSlotVo ? ((SessionSlotVo) row.getValue()).getStartTm() : null);
		voBookAppt.setActivity(form.cmbActivity().getValue());
		voBookAppt.setPriority(voBookAppt.getPriority());//WDEV-22366
		
		Session_ListOwnerVoCollection listOwnerBySlots = domain.getListOwnerBySlots(voBookAppt.getSession());
		
		if(listOwnerBySlots != null &&  listOwnerBySlots.size() > 0)
			voBookAppt.setListOwnerBooked(listOwnerBySlots.get(0).getHcp());
		
		if (form.cmbActivity().getValue() != null && form.cmbActivity().getValue().getTmReqIsNotNull())
			voBookAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(slotTime, form.cmbActivity().getValue().getTmReq().intValue()));

		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		return voBookAppt;
	}

	private void loadAppointmentsGrid(Booking_AppointmentVoCollection voCollBookAppointments)
	{
		// set the appt type
		if (voCollBookAppointments != null)
		{
			for (int i = 0; i < voCollBookAppointments.size(); i++)
			{
				// WDEV-10291
				if (voCollBookAppointments.get(i).getActivity() == null)
					voCollBookAppointments.get(i).setActivity(form.cmbActivity().getValue());
			}
		}

		// Refresh appointments from grid values //WDEV-18557
		updateAppointmentswithAdditionalDetails(form.grdAppt().getValues());

		/*
		 * for (int i = 0; i < form.grdAppt().getRows().size(); i++) {
		 * Booking_AppointmentVo appt =
		 * form.grdAppt().getRows().get(i).getValue();
		 * appt.setConsMediaType(form
		 * .grdAppt().getRows().get(i).getcolConsMedia());
		 * appt.setCategory(form.
		 * grdAppt().getRows().get(i).getcolPatCategory()); }
		 */

		form.getLocalContext().setSelectedAppointments(voCollBookAppointments);
		form.grdAppt().getRows().clear();

		grdApptRow aRow = null;
		Booking_AppointmentVo voBookAppt = null;
		for (int i = 0; i < voCollBookAppointments.size(); i++)
		{
			aRow = form.grdAppt().getRows().newRow();
			voBookAppt = voCollBookAppointments.get(i);

			// WDEV-12645
			aRow.setcolApptDate(voBookAppt.getAppointmentDateIsNotNull() ? voBookAppt.getAppointmentDate().toString() : null);
			aRow.setTooltipForcolApptDate(voBookAppt.getAppointmentDateIsNotNull() ? voBookAppt.getAppointmentDate().toString() : null);
			aRow.setcolApptTime(voBookAppt.getApptStartTimeIsNotNull() ? voBookAppt.getApptStartTime().toString() : null);
			aRow.setTooltipForcolApptTime(voBookAppt.getApptStartTimeIsNotNull() ? voBookAppt.getApptStartTime().toString() : null);
			// WDEV-18411 //WDEV-18557
			aRow.setcolConsMedia(voBookAppt.getConsMediaType());
			aRow.setcolPatCategory(voBookAppt.getPatientCategory());
			aRow.setcolDoNotMove(Boolean.TRUE.equals(voBookAppt.getDoNotMove()));

			/*
			 * removed as part of WDEV-18411
			 * aRow.setcolErod(form.getLocalContext()
			 * .getReferralERODForRebooking() != null &&
			 * form.getLocalContext().getReferralERODForRebooking()
			 * .getERODDate1() != null);// voBookAppt.getEarliestOfferedDate()
			 * // != null); aRow.setcolErodReadOnly(!(voBookAppt.getActivity()
			 * != null && Boolean.TRUE.equals(voBookAppt.getActivity()
			 * .getFirstAppointment()) &&
			 * form.getLocalContext().getReferralERODForRebooking() == null &&
			 * (form .getLocalContext().getIsCAB() == null || Boolean.FALSE
			 * .equals(form.getLocalContext().getIsCAB()))));
			 * aRow.setcolErodDate(form.getLocalContext()
			 * .getReferralERODForRebooking() != null ? form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate1()
			 * : null); aRow.setTooltipForcolErodDate((form.getLocalContext()
			 * .getReferralERODForRebooking() != null && form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate1()
			 * != null) ? form.getLocalContext()
			 * .getReferralERODForRebooking().getERODDate1().toString() : null);
			 * aRow.setcolErodDateReadOnly((aRow.getcolErod() && form
			 * .getLocalContext().getReferralERODForRebooking() != null) ||
			 * !aRow.getcolErod());
			 * aRow.setcolErodDate2ReadOnly(!aRow.getcolErod());
			 * aRow.setcolErodDate2(form.getLocalContext()
			 * .getReferralERODForRebooking() != null ? form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate2()
			 * : null); aRow.setTooltipForcolErodDate2((form.getLocalContext()
			 * .getReferralERODForRebooking() != null && form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate2()
			 * != null) ? form.getLocalContext()
			 * .getReferralERODForRebooking().getERODDate2().toString() : null);
			 */

			aRow.setcolActivity(voBookAppt.getActivityIsNotNull() ? voBookAppt.getActivity().getName() : null);
			aRow.setTooltipForcolActivity(voBookAppt.getActivityIsNotNull() ? voBookAppt.getActivity().getName() : null);
			aRow.setcolClinic(voBookAppt.getSession().getName());
			aRow.setTooltipForcolClinic(voBookAppt.getSession().getName());

			aRow.setValue(voBookAppt);
		}

		form.grdAppt().setReadOnly(false);

		if (form.grdAppt().getRows().size() > 0)
			form.btnBook().setEnabled(true);
		else
			form.btnBook().setEnabled(false);
	}

	protected void onBookingCalendarApptsDateSelected(ims.framework.utils.Date date) throws ims.framework.exceptions.PresentationLogicException
	{
		bookingCalendarDateSelected(date);
		updateControlState();//WDEV-23885
	}

	private void bookingCalendarDateSelected(ims.framework.utils.Date date)
	{
		// go through sessions getting ones for the selected date
		SessionShortVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		if (voCollSessionShort == null)
			return;

		SessionShortVoCollection voCollSelectedSessions = new SessionShortVoCollection();
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(date))
				voCollSelectedSessions.add(voCollSessionShort.get(i));
		}

		form.getLocalContext().setSelectedSessions(voCollSelectedSessions);

		if (Boolean.TRUE.equals(form.getLocalContext().getFlexibleSessions()))
		{
			loadFlexibleSlots();
		}
		else
			loadSessionSlots();
	}

	private void loadFlexibleSlots()
	{
		form.dyngrdSessionSlots().getRows().clear();
		SessionShortVoCollection voCollSelectedSessions = form.getLocalContext().getSelectedSessions();

		if (voCollSelectedSessions == null || voCollSelectedSessions.size() == 0)
			return;

		//form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_SLOTItem().setVisible(true);		

		// Build collection of sessions for which to query for slots
		Sch_SessionRefVoCollection sessions = new Sch_SessionRefVoCollection();

		for (SessionShortVo session : voCollSelectedSessions)
		{
			if (!Boolean.TRUE.equals(session.getIsFixed()))
				sessions.add(session);
		}
		
		
		// List sessions slots from domain and populate them to grid
		populateFlexibleSlots(domain.listOutpatientFlexibleSlots(sessions, form.getLocalContext().getUrgency(), form.getLocalContext().getListOwner()));

		displaySelectedAppointments();
	}

	private void populateFlexibleSlots(SessionParentChildSlotListVoCollection slots)
	{
		// Clear session slots grid
		form.dyngrdSessionSlots().getRows().clear();

		if (slots == null)
			return;


		// Iterate collection and populate records to the screen
		for (SessionParentChildSlotListVo slot : slots)
		{
			//WDEV-23814
			if (slot.getAppointment() == null && !Status_Reason.SLOTOPENED.equals(slot.getStatus()))
				continue;
			
			DynamicGridRow rowHospital = getRowForHospital(slot.getSession().getLocation());

			if (rowHospital == null)
			{
				rowHospital = form.dyngrdSessionSlots().getRows().newRow();

				rowHospital.setValue(slot.getSession() != null ? slot.getSession().getLocation() : null);
				rowHospital.setBackColor(Color.LightGreen);

				LocationListVo hospital = getHospitalForLocation(slot.getSession() != null ? slot.getSession().getLocation() : null);

				String hospitalValue = hospital != null ?  hospital.getName() : "";
				hospitalValue += slot.getSession() != null && slot.getSession().getLocation() != null ? " - " + slot.getSession().getLocation().getName() : "";

				DynamicGridCell cellHospital = rowHospital.getCells().newCell(getColumnById(COLUMN_HOSPITAL), DynamicCellType.STRING);
				cellHospital.setValue(hospitalValue);
				cellHospital.setTooltip(hospitalValue);
				cellHospital.setWidth(560);

				rowHospital.setExpandedImage(form.getImages().Admin.Location);
				rowHospital.setCollapsedImage(form.getImages().Admin.Location);

				rowHospital.setExpanded(true);
				rowHospital.setReadOnly(true);
			}

			DynamicGridRow rowSession = getRowForSession(slot.getSession(), rowHospital);

			if (rowSession == null)
			{
				rowSession = rowHospital.getRows().newRow();

				rowSession.setValue(slot.getSession());
				rowSession.setBackColor(Color.LightBlue);

				DynamicGridCell cellProfile = rowSession.getCells().newCell(getColumnById(COLUMN_PROFILE), DynamicCellType.STRING);

				String profileText = formatFlexibleProfileCellText(slot);

				cellProfile.setValue(profileText);
				cellProfile.setTooltip(profileText);

				cellProfile.setWidth(500);

				rowSession.setExpandedImage(form.getImages().Admin.Clinic02);
				rowSession.setCollapsedImage(form.getImages().Admin.Clinic02);

				rowSession.setExpanded(true);
				rowSession.setReadOnly(true);
			}

			DynamicGridRow row = rowSession.getRows().newRow();

			DynamicGridCell cellUrgency = row.getCells().newCell(getColumnById(COLUMN_URGENCY), DynamicCellType.IMAGE);
			cellUrgency.setReadOnly(true);

			DynamicGridCell cellTime = row.getCells().newCell(getColumnById(COLUMN_TIME), DynamicCellType.STRING);
			cellTime.setReadOnly(true);

			DynamicGridCell cellActivity = row.getCells().newCell(getColumnById(COLUMN_ACTIVITY), DynamicCellType.STRING);
			cellActivity.setReadOnly(true);

			DynamicGridCell cellComments = row.getCells().newCell(getColumnById(COLUMN_COMMENTS), DynamicCellType.IMAGE);
			cellComments.setReadOnly(true);

			DynamicGridCell cellSelect = row.getCells().newCell(getColumnById(COLUMN_SELECT), DynamicCellType.BOOL);

			cellTime.setValue(slot.getStartTime() != null ? slot.getStartTime().toString() : "");
			
			//WDEV-22847
			String strCellTimeTooltip = slot.getStartTime() != null ? "<b>Start Time: </b>" + slot.getStartTime().toString() : "";
			strCellTimeTooltip+=strCellTimeTooltip.length()>0 ? "<br>" : "";
			strCellTimeTooltip+=slot.getDurationIsNotNull() ? "<b>Duration: </b>" + slot.getDuration() : "";
			cellTime.setTooltip(strCellTimeTooltip);

			if (slot.getPriority() != null)
			{
				cellUrgency.setValue(slot.getPriority().getImage());
				cellUrgency.setTooltip(slot.getPriority().getText());
			}

			if (slot.getSession() != null)
			{

				if (slot.getAppointment() != null)
				{
					StringBuffer activity = new StringBuffer();

					if (slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null)
						activity.append(slot.getAppointment().getPatient().getName().toString());

					if (slot.getAppointment().getActivity() != null && slot.getAppointment().getActivity().getName() != null)
						activity.append(" - " + slot.getAppointment().getActivity().getName());

					cellActivity.setValue(activity.toString());
					cellActivity.setTooltip(activity.toString());

					row.setBackColor(Color.LightGray);

					cellSelect.setReadOnly(true);
					cellSelect.setTooltip("Appointment booked");
				}
				else
				{
					cellActivity.setValue("Open");
					cellActivity.setTooltip("Open");

				}


				if (slot.getSession().getSessionComment() != null  || slot.getComment() != null)
				{
					cellComments.setValue(form.getImages().Core.Comment16);
					cellComments.setTooltip((slot.getSession() != null && slot.getSession().getSessionComment() != null ? "Clinic Comment: <b>" + slot.getSession().getSessionComment() + "</b>"  : "") +  (slot.getSession() != null && slot.getSession().getSessionComment() != null && slot.getSession().getSessionComment().length() > 0 ? "<br/>" : "")+ (slot.getComment() != null ? "Slot Comment: <b>" + slot.getComment() + "</b>" : ""));
				}

				cellSelect.setValue(false);
				cellSelect.setAutoPostBack(true);
			}

			row.setValue(slot);

			boolean hasBookingRights = hasBookingRights(slot.getSession());

			if (slot.getAppointment() == null && !hasBookingRights)
			{
				cellSelect.setReadOnly(true);
				cellSelect.setBackColor(Color.LightGray);
				cellSelect.setTooltip("Role does not have rights to book in this Session");
			}

			if (SchedulingPriority.URGENT.equals(slot.getPriority()))
				row.setTextColor(Color.Red);
		}

	}

	private LocationListVo getHospitalForLocation(LocationListVo location)
	{
		if (location == null)
			return null;

		if (LocationType.HOSP.equals(location.getType()))
			return  location;

		while (location.getParentLocation() != null)
		{
			location = location.getParentLocation();

			if (LocationType.HOSP.equals(location.getType()))
				return  location;

		}

		return  null;
	}

	private String formatFlexibleProfileCellText(SessionParentChildSlotListVo slot)
	{
		if (slot == null)
			return "";

		StringBuffer profileDetails = new StringBuffer();

		profileDetails.append(slot.getSession() != null ? "<b> Clinic: </b>" + slot.getSession().getName() : "");

		Date daySel = form.bookingCalendarAppts().getSelectedDay();

		if (daySel != null)
		{
			SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE");
			profileDetails.append("<b> Date: </b>" + dateFormat.format(daySel.getDate()) + " ");
			profileDetails.append(daySel + " ");
		}

		profileDetails.append( slot.getSession() != null && slot.getSession().getListType() != null ? "<b> List Type: </b>" + slot.getSession().getListType().getIItemText() : "");

		StringBuffer listOwners = new StringBuffer();

		if (slot.getSession() != null && slot.getSession().getListOwners() != null)
		{

			for (int i = 0; i < slot.getSession().getListOwners().size(); i++)
			{
				SessionListOwnerLiteVo listOwner = slot.getSession().getListOwners().get(i);

				if (listOwner == null)
					continue;

				if (listOwners.length() > 0)
					listOwners.append(", ");

				listOwners.append(listOwner.getHcp() != null && listOwner.getHcp().getMos() != null && listOwner.getHcp().getMos().getName() != null ? listOwner.getHcp().getMos().getName() : "");
			}
		}

		profileDetails.append("<b> List Owner(s): </b>" + listOwners);


		return profileDetails.toString();
	}

	protected void onBookingCalendarApptsMonthSelected(ims.framework.utils.Date date) throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateSearchCriteria() == null)
		{
			clearBookingCalendar();
			listSessions();
			form.bookingCalendarAppts().clearNoSessionDates();
			initialiseCalendar();
		}
	}

	/*
	private String stripspaces(String addressPostCode)
	{
		StringTokenizer st = new StringTokenizer(addressPostCode);
		String t = "";
		while (st.hasMoreElements())
			t += st.nextElement();
		return t;
	}
	*/

	private void loadSessionSlots()
	{
		form.dyngrdSessionSlots().getRows().clear();
		SessionShortVoCollection voCollSelectedSessions = form.getLocalContext().getSelectedSessions();

		if (voCollSelectedSessions == null || voCollSelectedSessions.size() == 0)
			return;
	

		// get available distances
		// Map<String, String> distanceMap = new HashMap();

		/*
		if (form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull())
		{
			try
			{

				// distanceMap =
				// engine.getAddressProvider().computeDistances(form.getGlobalContext().Core.getPatientShort().getAddress(),
				// "MILES");
				// WDEV-10194
				if (engine.getAddressProvider() != null)
					form.getLocalContext().setdistanceMap(engine.getAddressProvider().computeDistances(form.getGlobalContext().Core.getPatientShort().getAddress(), "MILES"));

			}
			catch (PresentationLogicException e)
			{
				engine.showMessage(e.getMessage());
			}
		}
		 */

		// Build collection of sessions for which to query for slots
		Sch_SessionRefVoCollection sessions = new Sch_SessionRefVoCollection();

		for (SessionShortVo session : voCollSelectedSessions)
		{
			if (Boolean.TRUE.equals(session.getIsFixed()))
				sessions.add(session);
		}

		// List sessions slots from domain and populate them to grid
		populateSlots(domain.listSessionSlot(sessions, form.getLocalContext().getActivity(), form.getLocalContext().getUrgency(), form.getLocalContext().getClinicType(), form.getLocalContext().getListOwner()));

		displaySelectedAppointments();

	}

	private void populateSlots(SessionSlotListVoCollection slots)
	{
		// Clear session slots grid
		form.dyngrdSessionSlots().getRows().clear();

		// Test slots collection - if null exit populate function
		if (slots == null)
			return;


		// Iterate collection and populate records to the screen
		for (SessionSlotListVo slot : slots)
		{

			DynamicGridRow rowHospital = getRowForHospital(slot.getSession().getLocation());

			if (rowHospital == null)
			{
				rowHospital = form.dyngrdSessionSlots().getRows().newRow();

				rowHospital.setValue(slot.getSession() != null ? slot.getSession().getLocation() : null);
				rowHospital.setBackColor(Color.LightGreen);

				LocationListVo hospital = getHospitalForLocation(slot.getSession() != null ? slot.getSession().getLocation() : null);

				String hospitalValue = hospital != null ?  hospital.getName() : "";
				hospitalValue += slot.getSession() != null && slot.getSession().getLocation() != null ? " - " + slot.getSession().getLocation().getName() : "";

				DynamicGridCell cellHospital = rowHospital.getCells().newCell(getColumnById(COLUMN_HOSPITAL), DynamicCellType.STRING);
				cellHospital.setValue(hospitalValue);
				cellHospital.setTooltip(hospitalValue);
				cellHospital.setWidth(560);

				rowHospital.setExpandedImage(form.getImages().Admin.Location);
				rowHospital.setCollapsedImage(form.getImages().Admin.Location);

				rowHospital.setExpanded(true);
				rowHospital.setReadOnly(true);
			}

			DynamicGridRow rowSession = getRowForSession(slot.getSession(), rowHospital);

			if (rowSession == null)
			{
				rowSession = rowHospital.getRows().newRow();

				rowSession.setValue(slot.getSession());
				rowSession.setBackColor(Color.LightBlue);

				DynamicGridCell cellProfile = rowSession.getCells().newCell(getColumnById(COLUMN_PROFILE), DynamicCellType.STRING);

				String profileText = formatFixedProfileCellText(slot);

				cellProfile.setValue(profileText);
				cellProfile.setTooltip(profileText);

				cellProfile.setWidth(500);

				rowSession.setExpandedImage(form.getImages().Admin.Clinic02);
				rowSession.setCollapsedImage(form.getImages().Admin.Clinic02);

				rowSession.setExpanded(true);
				rowSession.setReadOnly(true);
			}

			DynamicGridRow row = rowSession.getRows().newRow();

			DynamicGridCell cellUrgency = row.getCells().newCell(getColumnById(COLUMN_URGENCY), DynamicCellType.IMAGE);
			cellUrgency.setReadOnly(true);

			DynamicGridCell cellTime = row.getCells().newCell(getColumnById(COLUMN_TIME), DynamicCellType.STRING);
			cellTime.setReadOnly(true);

			DynamicGridCell cellActivity = row.getCells().newCell(getColumnById(COLUMN_ACTIVITY), DynamicCellType.STRING);
			cellActivity.setReadOnly(true);

			DynamicGridCell cellSlotType = row.getCells().newCell(getColumnById(COLUMN_SLOT_TYPE), DynamicCellType.STRING);
			cellSlotType.setReadOnly(true);

			DynamicGridCell cellFunctions = row.getCells().newCell(getColumnById(COLUMN_FUNCTIONS), DynamicCellType.STRING);
			cellFunctions.setReadOnly(true);

			/*
			DynamicGridCell cellDistance = row.getCells().newCell(getColumnById(COLUMN_DISTANCE), DynamicCellType.STRING);
			cellDistance.setReadOnly(true);
			 */

			DynamicGridCell cellComments = row.getCells().newCell(getColumnById(COLUMN_COMMENTS), DynamicCellType.IMAGE);
			cellComments.setReadOnly(true);

			DynamicGridCell cellSelect = row.getCells().newCell(getColumnById(COLUMN_SELECT), DynamicCellType.BOOL);

			// Set columns values
			//String timeString = getSlotDateTimeString(slot);

			cellTime.setValue(slot.getStartTm() != null ? slot.getStartTm().toString() : "");
			
			//WDEV-22847
			String strCellTimeTooltip = slot.getStartTm() != null ? "<b>Start Time: </b>" + slot.getStartTm().toString() : "";
			strCellTimeTooltip+=strCellTimeTooltip.length()>0 ? "<br>" : "";
			strCellTimeTooltip+=slot.getDurationIsNotNull() ? "<b>Duration: </b>" + slot.getDuration() : "";
			cellTime.setTooltip(strCellTimeTooltip);

			if (slot.getPriority() != null)
			{
				cellUrgency.setValue(slot.getPriority().getImage());
				cellUrgency.setTooltip(slot.getPriority().getText());
			}

			if (slot.getSession() != null)
			{
				/*
				// Set distance
				if (form.getLocalContext().getdistanceMap() != null && form.getLocalContext().getdistanceMap().size() > 0)
				{
					if (slot.getSession().getLocation() != null && slot.getSession().getLocation().getAddress() != null && slot.getSession().getLocation().getAddress().getPostCode() != null && slot.getSession().getLocation().getAddress().getPostCode() != "")
					{
						Object distance = form.getLocalContext().getdistanceMap().get(stripspaces(slot.getSession().getLocation().getAddress().getPostCode()));

						cellDistance.setValue(distance != null ? distance.toString() : null);
						cellDistance.setTooltip(distance != null ? distance.toString() : null);
					}
				}
				 */

				if (slot.getActivity() != null)
				{
					cellActivity.setValue(slot.getActivity().getName());
					cellActivity.setTooltip(slot.getActivity().getName());
				}

				if (slot.getDirectAccessSlot() != null)
				{
					cellSlotType.setValue(slot.getDirectAccessSlot().getText());
					cellSlotType.setTooltip(slot.getDirectAccessSlot().getText());
				}

				StringBuffer functionsForFixedSlots = new StringBuffer();

				if (slot.getFunctions() != null)
				{
					for (int j = 0; j < slot.getFunctions().size(); j++)
					{
						ServiceFunctionLiteVo function = slot.getFunctions().get(j);

						if (function == null)
							continue;

						if (functionsForFixedSlots.length() > 0)
							functionsForFixedSlots.append(", ");

						functionsForFixedSlots.append(function.getFunction() != null ? function.getFunction().getText() : "");
					}
				}

				cellFunctions.setValue(functionsForFixedSlots.toString());
				cellFunctions.setTooltip(functionsForFixedSlots.toString());

				//WDEV-19208 //WDEV-19739
				if (slot.getSession().getSessionComment() != null  || slot.getComment() != null)
				{
					cellComments.setValue(form.getImages().Core.Comment16);
					cellComments.setTooltip((slot.getSession() != null && slot.getSession().getSessionComment() != null ? "Clinic Comment: <b>" + slot.getSession().getSessionComment() + "</b>"  : "") +  (slot.getSession() != null && slot.getSession().getSessionComment() != null && slot.getSession().getSessionComment().length() > 0 ? "<br/>" : "")+ (slot.getComment() != null ? "Slot Comment: <b>" + slot.getComment() + "</b>" : ""));
				}

				cellSelect.setValue(false);
				cellSelect.setAutoPostBack(true);
			}

			row.setValue(slot);

			boolean hasBookingRights = hasBookingRights(slot.getSession());

			if (!hasBookingRights)
			{
				cellSelect.setReadOnly(true);
				cellSelect.setBackColor(Color.LightGray);
				cellSelect.setTooltip("Role does not have rights to book in this Session");
			}

			if (SchedulingPriority.URGENT.equals(slot.getPriority()))
				row.setTextColor(Color.Red);
		}
	}

	private String formatFixedProfileCellText(SessionSlotListVo slot)
	{
		if (slot == null)
			return "";

		StringBuffer profileDetails = new StringBuffer();

		profileDetails.append(slot.getSession() != null ? "<b> Clinic: </b>" + slot.getSession().getName() : "");

		Date daySel = form.bookingCalendarAppts().getSelectedDay();

		if (daySel != null)
		{
			SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE");
			profileDetails.append("<b> Date: </b>" + dateFormat.format(daySel.getDate()) + " ");
			profileDetails.append(daySel + " ");
		}

		profileDetails.append( slot.getSession() != null && slot.getSession().getListType() != null ? "<b> List Type: </b>" + slot.getSession().getListType().getIItemText() : "");

		StringBuffer listOwners = new StringBuffer();

		if (slot.getSession() != null && slot.getSession().getListOwners() != null)
		{

			for (int i = 0; i < slot.getSession().getListOwners().size(); i++)
			{
				SessionListOwnerLiteVo listOwner = slot.getSession().getListOwners().get(i);

				if (listOwner == null)
					continue;

				if (listOwners.length() > 0)
					listOwners.append(", ");

				listOwners.append(listOwner.getHcp() != null && listOwner.getHcp().getMos() != null && listOwner.getHcp().getMos().getName() != null ? listOwner.getHcp().getMos().getName() : "");
			}
		}

		profileDetails.append("<b> List Owner(s): </b>" + listOwners);


		return profileDetails.toString();
	}

	private DynamicGridRow getRowForSession(SessionListVo session, DynamicGridRow rowHospital)
	{
		if (session == null || rowHospital == null)
			return null;

		for (int i = 0; i < rowHospital.getRows().size(); i++)
		{
			DynamicGridRow row = rowHospital.getRows().get(i);

			if (row.getValue() instanceof SessionListVo && row.getValue().equals(session))
				return row;
		}

		return null;
	}

	private DynamicGridRow getRowForHospital(LocationListVo location)
	{
		if (location == null)
			return null;

		for (int i = 0; i < form.dyngrdSessionSlots().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdSessionSlots().getRows().get(i);

			if (row.getValue() instanceof LocationListVo && row.getValue().equals(location))
				return row;
		}

		return null;
	}

	private boolean hasBookingRights(SessionListVo session) //WDEV-21137
	{
		if (session == null || session.getSch_Profile() == null || session.getSch_Profile().getBookingRights() == null || session.getSch_Profile().getBookingRights().size()==0)
			return false;

		IAppRole role = engine.getLoggedInRole();

		for (Profile_BookRightsVo right : session.getSch_Profile().getBookingRights())
		{
			if (role.getId() == right.getRole().getId())
				return true;
		}

		return false;
	}

	/*
	private String getSlotDateTimeString(SessionSlotListVo slot)
	{
		String slotDateTime = "";

		Date daySel = form.bookingCalendarAppts().getSelectedDay();
		if (daySel != null)
			slotDateTime += daySel.toString();

		if (slot.getStartTmIsNotNull())
			slotDateTime += " " + slot.getStartTm();

		return slotDateTime;
	}

	
	private Boolean doesRoleHaveBookingRightsForSession(Sch_SessionRefVo voSession)
	{
		Map map = form.getLocalContext().getSessionBookingRights();
		if (map == null)
			map = new HashMap();

		Object entry = map.get(voSession.getID_Sch_Session());

		if (entry == null)
		{
			map.put(voSession.getID_Sch_Session(), domain.hasBookingRights(engine.getLoggedInRole(), voSession));
			entry = map.get(voSession.getID_Sch_Session());
		}

		form.getLocalContext().setSessionBookingRights(map);
		return (Boolean) entry;
	}
	*/

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearGlobalContexts();
		clearScreen(false);
		open();
		form.setMode(FormMode.VIEW);
	}

	protected void onTreInvApptsTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(false);
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (node != null)
			{
				removeAllRadiologyServices();
				if (node.getValue() instanceof BookingAppointmentLiteVo && node.getParent().equals(form.treInvAppts().getNodeByValue(REBOOK_APPT_NODE)))
					form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(true);
				if (node.getValue() instanceof OrderInvestigationBookingVo)
				{
					ServiceLiteVo voService = getService(((OrderInvestigationBookingVo) node.getValue()));
					if (!form.cmbService().getValues().contains(voService))
						form.cmbService().newRow(voService, voService.getServiceName());

					form.cmbService().setValue(voService);
					form.getLocalContext().setisLinkingOrderInv(true);
				}
			}
		}
	}

	private void removeAllRadiologyServices()
	{
		for (int i = 0; i < form.cmbService().getValues().size(); i++)
		{
			ServiceLiteVo voService = (ServiceLiteVo) form.cmbService().getValues().get(i);
			if (voService.getServiceCategoryIsNotNull())
			{
				if (voService.getServiceCategory().equals(ServiceCategory.RADIOLOGY_MODALITY))
					form.cmbService().removeRow(voService);
			}
		}
	}

	private ServiceLiteVo getService(OrderInvestigationBookingVo voOrderInv)
	{
		if (voOrderInv == null)
			return null;

		if (voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
			return voOrderInv.getInvestigation().getProviderService().getLocationService().getService();

		return null;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.RefManNamespace.BookAppointment.REBOOK_APPT:
			if (form.treInvAppts().getValue() instanceof BookingAppointmentLiteVo)
			{
				// get the full appointment record to be rebooked and set
				// the appropriate context to reinitialise the screen
				Booking_AppointmentVo voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo) form.treInvAppts().getValue());
				form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
				form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
				form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);
				reInitialize();
			}
			break;
		case GenForm.ContextMenus.RefManNamespace.BookAppointmentAddSlot.ADD_SLOT:
			// WDEV-11625
			addSlotsForBooking();
			break;
			
		case GenForm.ContextMenus.RefManNamespace.BookAppointmentAddSlot.ADD_FLEXIBLE_SLOT:
			addSlotsForBooking();
			break; 	

		case GenForm.ContextMenus.RefManNamespace.BookAppointmentCM.REMOVE_APPOINTMENT:

			removeSelectedAppointment();	
			updateControlState();

			break;

		default:
		}
	}

	private void addSlotsForBooking() 
	{
		if (form.cmbActivity().getValue() == null)
		{
			engine.showErrors(new String[] { "Activity is mandatory" });
			form.cmbActivity().setFocus();
		}
		else
		{
			Boolean rebooking = form.getGlobalContext().Scheduling.getBookingAppointment() != null;

			
			if (Boolean.TRUE.equals(form.getLocalContext().getFlexibleSessions()))
			{
				form.getGlobalContext().RefMan.setSelectedSessions(filterFixedSessions(form.getLocalContext().getSelectedSessions()));
				engine.open(form.getForms().Scheduling.SessionFlexibleSlotDialog, new Object[] {getSelectedSession(form.dyngrdSessionSlots().getSelectedRow()), Boolean.TRUE});
			}
			else
			{	
				form.getGlobalContext().RefMan.setSelectedSessions(form.getLocalContext().getSelectedSessions());
				form.getGlobalContext().Scheduling.setBookingActivity(form.cmbActivity().getValue());
				engine.open(form.getForms().Scheduling.SessionSlotDialog, new Object[] {getSelectedSession(form.dyngrdSessionSlots().getSelectedRow()), rebooking, form.getGlobalContext().RefMan.getCatsReferral()});
			}
		}
	}

	private SessionShortVoCollection filterFixedSessions(SessionShortVoCollection selectedSessions)
	{
		if (selectedSessions == null)
			return null;
		SessionShortVoCollection filteredList = new SessionShortVoCollection();
		for (SessionShortVo session : selectedSessions)
		{
			if (!Boolean.TRUE.equals(session.getIsFixed()))
				filteredList.add(session);
		}
		return filteredList;
	}

	private SessionShortVo getSelectedSession(DynamicGridRow row)
	{
		Object value = row.getValue();
		if (value == null)
			return null;
		SessionShortVoCollection sessions = form.getGlobalContext().RefMan.getSelectedSessions();
		if (value instanceof SessionListVo)
			return retrieveSession(sessions,(SessionListVo)value);
		if (value instanceof SessionSlotListVo)
			return retrieveSession(sessions,(SessionSlotListVo)value);
		else if (value instanceof SessionParentChildSlotListVo)
			return retrieveSession(sessions,(SessionParentChildSlotListVo)value);
		return null;
	}

	private SessionShortVo retrieveSession(SessionShortVoCollection sessions, Object value)
	{
		if (sessions == null || sessions.size() == 0)
			return null;
		for (SessionShortVo sess :sessions)
		{
			if (value instanceof SessionListVo)
			{
				SessionListVo session = (SessionListVo)value;
				if (session !=null && sess.getID_Sch_Session().equals(session.getID_Sch_Session()))
					return sess;
			}
			if (value instanceof SessionSlotListVo)
			{
				SessionSlotListVo fixedSlot = (SessionSlotListVo)value;
				if (fixedSlot.getSession() !=null && sess.getID_Sch_Session().equals(fixedSlot.getSession().getID_Sch_Session()))
					return sess;
			}
			if (value instanceof SessionParentChildSlotListVo)
			{
				SessionParentChildSlotListVo flexibleSlot = (SessionParentChildSlotListVo)value;
				if (flexibleSlot.getSession() !=null && sess.getID_Sch_Session().equals(flexibleSlot.getSession().getID_Sch_Session()))
					return sess;
			}				
		}
		return null;
	}

	private void removeSelectedAppointment()
	{
		Booking_AppointmentVo selectedAppt = form.grdAppt().getValue();

		if (selectedAppt == null)
			return;

		//update local context
		if (form.getLocalContext().getSelectedAppointments() != null)
			form.getLocalContext().getSelectedAppointments().remove(selectedAppt);

		//remove slot selection
		for (int i = 0; i < form.dyngrdSessionSlots().getRows().size(); i++)
		{
			DynamicGridRow locationRow = form.dyngrdSessionSlots().getRows().get(i);

			for (int k = 0; k < locationRow.getRows().size(); k++) // sesions
			{
				DynamicGridRow sessionRow = locationRow.getRows().get(k);

				for (int l = 0; l < sessionRow.getRows().size(); l++) // slots
				{
					DynamicGridRow rowSlot = sessionRow.getRows().get(l);

					if (rowSlot.getValue() instanceof SessionSlotListVo)
					{
						SessionSlotListVo slot = (SessionSlotListVo) rowSlot.getValue();

						if (selectedAppt.getSessionSlot() != null && slot.getID_Session_Slot().equals(selectedAppt.getSessionSlot().getID_Session_Slot()))
						{
							DynamicGridCell cell = rowSlot.getCells().get(getColumnById(COLUMN_SELECT));
							cell.setValue(false);
							break;
						}
					}
					else if (rowSlot.getValue() instanceof SessionSlotVo)
					{
						SessionSlotVo slot = (SessionSlotVo) rowSlot.getValue();

						if (selectedAppt.getSessionSlot() != null && slot.getID_Session_Slot().equals(selectedAppt.getSessionSlot().getID_Session_Slot()))
						{
							DynamicGridCell cell = rowSlot.getCells().get(getColumnById(COLUMN_SELECT));
							cell.setValue(false);
							break;
						}
					}
					else if (rowSlot.getValue() instanceof Booking_AppointmentVo)
					{
						Booking_AppointmentVo slot = (Booking_AppointmentVo) rowSlot.getValue();

						if (slot.getID_Booking_Appointment().equals(selectedAppt.getID_Booking_Appointment()))
						{
							DynamicGridCell cell = rowSlot.getCells().get(getColumnById(COLUMN_SELECT));
							cell.setValue(false);
							break;
						}
					}
					else if (rowSlot.getValue() instanceof SessionParentChildSlotListVo)
					{
						SessionParentChildSlotListVo slot = (SessionParentChildSlotListVo) rowSlot.getValue();

						if (selectedAppt.getParentChildSlot() != null && slot.getID_SessionParentChildSlot().equals(selectedAppt.getParentChildSlot().getID_SessionParentChildSlot()))
						{
							removeChildSlots(rowSlot, selectedAppt.getParentChildSlot().getChildSlots());
							DynamicGridCell cell = rowSlot.getCells().get(getColumnById(COLUMN_SELECT));
							cell.setValue(false);
							break;
						}
					}
				}
			}
		}

		//check if rebook was selected
		if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			form.getLocalContext().setIsRebookApptSelected(false);

		for (int j = 0; j < form.grdAppt().getRows().size(); j++)
		{
			grdApptRow aRow = form.grdAppt().getRows().get(j);

			if (aRow.getValue() instanceof Booking_AppointmentVo && aRow.getValue() != null)
			{
				storeConsMediaAndCategorySelection(aRow.getValue(), new ConsMediaAndCategory(aRow.getcolConsMedia(), aRow.getcolPatCategory()));
			}
		}

		// remove row from appointments grid
		form.grdAppt().removeSelectedRow();

		form.btnBook().setEnabled(form.grdAppt().getRows().size() > 0);

	}

	private void reInitialize()
	{
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(false);
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(true);
		form.bookingCalendarAppts().setEnabled(false);
		form.bookingCalendarAppts().setCurrentMonth(new Date());
		form.txtBookingComments().setValue(null);
		clearSearchCriteria();
		clearBookingCalendar();
		repopulateScreen();
	}

	/*
	 * removed as part of WDEV-18411 protected void
	 * onGrdApptGridCheckBoxClicked(int column, grdApptRow row, boolean
	 * isChecked) throws PresentationLogicException { // EROD if (column == 2) {
	 * row.setcolErodDateReadOnly(!isChecked);
	 * row.setcolErodDate2ReadOnly(!isChecked); if (!isChecked) {
	 * row.setcolErodDate(null); row.setcolErodDate2(null); } } }
	 */

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Scheduling.SessionSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				SessionSlotVoCollection voSlots = form.getGlobalContext().Scheduling.getSessionSlots();
				SessionShortVo voSession = form.getGlobalContext().RefMan.getSelectedSession();
				SessionSlotListVoCollection addedSlots = null;

				try
				{
					addedSlots = domain.addSlotsToSession(voSession, voSlots);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}

				listSessions();
				bookingCalendarDateSelected(form.bookingCalendarAppts().getSelectedDay());
				displaySelectedAppointments();

				//WDEV-19326
				if (addedSlots != null && addedSlots.size() > 0)
				{
					for (int i = 0; i < addedSlots.size(); i++)
					{
						form.dyngrdSessionSlots().setValue(addedSlots.get(i));
						DynamicGridRow row = form.dyngrdSessionSlots().getSelectedRow();

						boolean hasBookingRights = hasBookingRights(addedSlots.get(i).getSession());

						if (row != null && hasBookingRights)
						{
							DynamicGridCell cell = row.getCells().get(getColumnById(COLUMN_SELECT));
							cell.setValue(true);
							onDyngrdSessionSlotsCellValueChanged(cell);
						}
					}

					//form.dyngrdSessionSlots().setValue(null); //WDEV-22987
				}
			}		

			form.getGlobalContext().RefMan.setSelectedSession(null);
			updateControlState();
		}
		//WDEV-22973
		else if (formName.equals(form.getForms().Scheduling.SessionFlexibleSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				SessionParentChildSlotVoCollection voFlexibleSlots = form.getGlobalContext().Scheduling.getFlexibleSessionSlots();
				SessionShortVo voSession = form.getGlobalContext().RefMan.getSelectedSession();
				SessionParentChildSlotListVoCollection addedFlexibleSlots = null;

				try
				{
					addedFlexibleSlots = domain.addFlexibleSlotsToSession(voSession, voFlexibleSlots);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}

				listSessions();
				bookingCalendarDateSelected(form.bookingCalendarAppts().getSelectedDay());				
			}		

			form.getGlobalContext().RefMan.setSelectedSession(null);
			form.getGlobalContext().RefMan.setSelectedSessions(null);
			form.getGlobalContext().Scheduling.setFlexibleSessionSlots(null);
			updateControlState();
			
		}
		else if (formName.equals(form.getForms().RefMan.ERODDialog))
		{
			form.getLocalContext().setLastReferralEROD(domain.getLastOutpatientEROD(form.getGlobalContext().RefMan.getCatsReferral()));
			updateControlState();

		}
		else if (formName.equals(form.getForms().RefMan.ReasonForBookingPastFirstApptKPIDialog))
		{
			if (result.equals(DialogResult.OK))
				bookAppointment();

		}
		else if (formName.equals(form.getForms().RefMan.LinkAppointments)) //WDEV-19543
		{
			//WDEV-20053
			if (form.getGlobalContext().RefMan.getLinkedAppointmentsCollection()!=null)
				return;

			if (ConfigFlag.UI.DISPLAY_WARNING_MESSAGE_IF_BOOKING_IN_PAST.getValue())
			{
				if (isApptInthePast(form.getLocalContext().getSch_Booking()))
				{
					form.getLocalContext().setMessageBoxId(engine.showMessage("The selected date of the appointment is in the past. Do you wish to continue to book the appointment", "Booking Historical Appointment?", MessageButtons.YESNO));
					return;
				}
			}

			if(form.getLocalContext().getClashesAppointments() != null && form.getLocalContext().getClashesAppointments().size() > 0)
			{
				form.getLocalContext().setClashesAppointmentsMessageBoxId(engine.showMessage("This Patient already has Appointments/TCIs on " + getClashesAppointmentsText() + ". Do you wish to continue and book this appointment?", "", MessageButtons.YESNO));
				return;
			}

			saveBooking(form.getLocalContext().getSch_Booking(), 0);
		}
		else if (formName.equals(form.getForms().RefMan.ReferralTriage)) //WDEV-20711
		{
			return;
		}
		//WDEV-20534
		else if (formName.equals(form.getForms().Core.PDSDemographicsDialog))
		{	
			bookHandler();
		}
		//WDEV-20534 ends here
		else
		{
			if (engine.isDialog())
			{
				// WDEV-8376
				form.getGlobalContext().Scheduling.setAppointmentIds(null);
				engine.close(DialogResult.OK);
			}
		}
	}

	private void displaySelectedAppointments()
	{
		Booking_AppointmentVo voBookAppt = null;

		for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		{
			voBookAppt = form.grdAppt().getRows().get(i).getValue();

			if (voBookAppt == null)
				continue;

			// go through slots grid if a match is found for the slot for this appt setColselect(true)
			SessionSlotListVo voSlot = null;
			SessionParentChildSlotListVo voFlexibleSlot = null;

			for (int j = 0; j < form.dyngrdSessionSlots().getRows().size(); j++) // locations
			{
				DynamicGridRow locationRow = form.dyngrdSessionSlots().getRows().get(j);

				for (int k = 0; k < locationRow.getRows().size(); k++) // sesions
				{
					DynamicGridRow sessionRow = locationRow.getRows().get(k);

					for (int l = 0; l < sessionRow.getRows().size(); l++) // slots
					{
						if (sessionRow.getRows().get(l).getValue() instanceof SessionSlotListVo)
						{
							voSlot = (SessionSlotListVo) sessionRow.getRows().get(l).getValue();

							if (voSlot == null)
								continue;

							if (voBookAppt.getSessionSlot() != null && voBookAppt.getSessionSlot().getID_Session_Slot() != null && voBookAppt.getSessionSlot().getID_Session_Slot().equals(voSlot.getID_Session_Slot()))
							{
								DynamicGridRow row = sessionRow.getRows().get(l);
								DynamicGridCell cell = row.getCells().get(getColumnById(COLUMN_SELECT));
								cell.setValue(true);
							}
						}
						else if (sessionRow.getRows().get(l).getValue() instanceof SessionParentChildSlotListVo)
						{

							voFlexibleSlot = (SessionParentChildSlotListVo) sessionRow.getRows().get(l).getValue();

							if (voFlexibleSlot == null)
								continue;

							if (voBookAppt.getParentChildSlot() != null && voBookAppt.getParentChildSlot().getID_SessionParentChildSlot() != null && voBookAppt.getParentChildSlot().getID_SessionParentChildSlot().equals(voFlexibleSlot.getID_SessionParentChildSlot()))
							{
								DynamicGridRow row = sessionRow.getRows().get(l);
								DynamicGridCell cell = row.getCells().get(getColumnById(COLUMN_SELECT));
								cell.setValue(true);

								if(voBookAppt.getParentChildSlot().getChildSlots() != null)
								{
									for (int m = 0; m < voBookAppt.getParentChildSlot().getChildSlots().size(); m++)
									{
										l += 1;

										DynamicGridRow childRow = sessionRow.getRows().get(l);
										DynamicGridCell childSelectCell = childRow.getCells().get(getColumnById(COLUMN_SELECT));
										childSelectCell.setValue(Boolean.TRUE);
										childSelectCell.setReadOnly(true);
										childSelectCell.setBackColor(Color.LightGray);
									}
								}

							}

						}
					}
				}
			}
		}
	}

	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState()
	{
		form.btnClose().setVisible(engine.isDialog() && form.getMode().equals(FormMode.VIEW));
		form.btnEROD().setVisible(form.getLocalContext().getIsCAB() == null || Boolean.FALSE.equals(form.getLocalContext().getIsCAB()));
		// WDEV-18411
		form.btnEROD().setEnabled(true);			//wdev-19202
		form.btnEROD().setTooltip(getErodInfo());

		//WDEV-19543
		form.btnLinkAppointments().setVisible(Boolean.TRUE.equals(domain.isAnyApptToBeLinked(form.getGlobalContext().Core.getCurrentCareContext())) && (form.grdAppt().getRows().size() ==1 || (form.grdAppt().getRows().size() ==0 && form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull())));

		if (form.btnLinkAppointments().isVisible() && form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull())
		{
			form.btnLinkAppointments().setText("Linked Appointments");
		}
		else
		{
			form.btnLinkAppointments().setText("Link Appointments");
		}

		form.btnAllConsultationActivityBooked().setVisible(Boolean.TRUE.equals(form.getLocalContext().getCatsReferralListVo().getConsultationActivityRequired()) && Boolean.TRUE.equals(form.getLocalContext().getCatsReferralListVo().getHasAppointments()));//WDEV-20643 //WDEV-21189
		form.btnViewTriageOutcome().setVisible(Boolean.TRUE.equals(form.getLocalContext().getCatsReferralListVo().getConsultationActivityRequired()));//WDEV-20643

		if (form.cmbActivity().getValue() == null)
		{
			showTimeControlsForFlexibleAppts(false);
		}

		if (form.cmbService().getValue() == null)
			form.cmbClinicType().setEnabled(false);

		form.getContextMenus().RefMan.hideAllBookAppointmentCMMenuItems();

		form.getContextMenus().RefMan.getBookAppointmentCMREMOVE_APPOINTMENTItem().setVisible(form.grdAppt().getValue() != null);

		//WDEV-20944
		boolean isEmergencyReferral = Boolean.TRUE.equals(form.getLocalContext().getCatsReferralListVo().getIsEmergencyReferral());
		boolean hasEndDateKPI = form.getLocalContext().getCatsReferralListVoIsNotNull() && form.getLocalContext().getCatsReferralListVo().getReferralDetailsIsNotNull() ? form.getLocalContext().getCatsReferralListVo().getReferralDetails().getEndDateKPIIsNotNull():false;  //wdev-20946 
		form.lblRttDate().setVisible(!isEmergencyReferral);
		form.lblRttBreachDate().setVisible(!isEmergencyReferral);
		form.lblKPI().setVisible(!isEmergencyReferral && hasEndDateKPI);
		form.lblFirstApptKPI().setVisible(!isEmergencyReferral && hasEndDateKPI);
		
		form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem().setVisible(Boolean.TRUE.equals(form.getLocalContext().getFlexibleSessions()) && (form.dyngrdSessionSlots().getValue() instanceof SessionListVo  || form.dyngrdSessionSlots().getValue() instanceof SessionParentChildSlotListVo));
		form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_SLOTItem().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getFlexibleSessions()) && (form.dyngrdSessionSlots().getValue() instanceof SessionListVo  || form.dyngrdSessionSlots().getValue() instanceof SessionSlotListVo));
		
		
	}

	private void showTimeControlsForFlexibleAppts(boolean showControls)
	{
		form.lblTimeRequired().setVisible(showControls);
		form.intActivityTimeReq().setVisible(showControls);
		form.lblMins().setVisible(showControls);

		if (showControls && form.cmbActivity().getValue() != null)
			form.intActivityTimeReq().setValue(form.cmbActivity().getValue().getTmReq());
		else
			form.intActivityTimeReq().setValue(null);

	}

	private String getErodInfo()
	{
		if (form.getLocalContext().getLastReferralEROD() == null)
			return null;

		StringBuilder tooltip = new StringBuilder();

		tooltip.append("<b>Earliest Date Offered: </b>" + form.getLocalContext().getLastReferralEROD().getERODDate1());

		if (form.getLocalContext().getLastReferralEROD().getERODDate2() != null)
		{
			tooltip.append("<br><b>Second Date Offered: </b>" + form.getLocalContext().getLastReferralEROD().getERODDate2());
		}

		if (form.getLocalContext().getLastReferralEROD().getPatAvailFromDate() != null)
		{
			tooltip.append("<br><b>Patient Available from Date: </b>" + form.getLocalContext().getLastReferralEROD().getPatAvailFromDate());
		}

		tooltip.append("<br><b>EROD Type: </b>" + form.getLocalContext().getLastReferralEROD().getERODType().getText());

		if (form.getLocalContext().getLastReferralEROD().getAppointment() != null)
		{
			tooltip.append("<br><b>Appointment Date: </b>" + (form.getLocalContext().getLastReferralEROD().getAppointment() != null ? form.getLocalContext().getLastReferralEROD().getAppointment().getAppointmentDate() : ""));
			tooltip.append("<br><b>Clinic Name: </b>" + ((form.getLocalContext().getLastReferralEROD().getAppointment() != null && form.getLocalContext().getLastReferralEROD().getAppointment().getSession() != null) ? form.getLocalContext().getLastReferralEROD().getAppointment().getSession().getName() : ""));
		}

		return tooltip.toString();
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException //WDEV-20053
	{
		if (form.getLocalContext().getMessageBoxIdIsNotNull())
		{
			if (result.equals(DialogResult.YES) && form.getLocalContext().getMessageBoxId().equals(messageBoxId))
			{
				if(form.getLocalContext().getClashesAppointments() != null && form.getLocalContext().getClashesAppointments().size() > 0)
				{
					form.getLocalContext().setClashesAppointmentsMessageBoxId(engine.showMessage("This Patient already has Appointments/TCIs on " + getClashesAppointmentsText() + ". Do you wish to continue and book this appointment?", "", MessageButtons.YESNO));
					return;
				}

				saveBooking(form.getLocalContext().getSch_Booking(), 0);
			}
		} /*
		 * WDEV-18411 REMOVED else if
		 * (form.getLocalContext().getReasonableDateMessageBoxId() != null &&
		 * form.getLocalContext().getReasonableDateMessageBoxId() ==
		 * messageBoxId) { Boolean reasonableOffer = null; if
		 * (DialogResult.YES.equals(result)) { reasonableOffer = true; } else
		 * if (DialogResult.NO.equals(result)) { reasonableOffer = false; }
		 * 
		 * bookAppointment();
		 * 
		 * form.getLocalContext().setReasonableDateMessageBoxId(null); }
		 */

		if(form.getLocalContext().getClashesAppointmentsMessageBoxId() != null && form.getLocalContext().getClashesAppointmentsMessageBoxId().equals(messageBoxId))
		{
			if(result.equals(DialogResult.YES))
			{
				saveBooking(form.getLocalContext().getSch_Booking(), 0);
			}
		}
		if(form.getLocalContext().getCommunicatedMessageBoxId() != null && form.getLocalContext().getCommunicatedMessageBoxId().equals(messageBoxId)) //http://jira/browse/WDEV-21154
		{
			if(result.equals(DialogResult.YES))
			{
				for (Booking_AppointmentVo appt : form.getLocalContext().getSch_Booking().getAppointments())
				{
					appt.setWasApptCommunicated(Boolean.TRUE);
				}
			}
			else if(result.equals(DialogResult.NO))
			{
				for (Booking_AppointmentVo appt : form.getLocalContext().getSch_Booking().getAppointments())
				{
					appt.setWasApptCommunicated(Boolean.FALSE);
				}
			}
			saveBooking(form.getLocalContext().getSch_Booking(), 0);
		}
		
		//WDEV-22486
		if(form.getLocalContext().getIsThirtyMinCheckedMessageBoxID() != null && form.getLocalContext().getIsThirtyMinCheckedMessageBoxID().equals(messageBoxId))
		{
			DynamicGridRow row = form.dyngrdSessionSlots().getSelectedRow();
			DynamicGridCell cell = row.getCells().get(getColumnById(COLUMN_SELECT));
			
			if(result.equals(DialogResult.YES))
			{
				form.getLocalContext().setIsThirtyMinChecked(true);
				onDyngrdSessionSlotsCellValueChanged(cell);
			}
			else
			{
				cell.setValue(false);
			}
		}
		//--WDEV-22486
	}

	/*
	private class Erod
	{
		private boolean isSelected;
		private Date erodDate;
		private Date erodDate2;

		public Erod(Date erodDate, Date erodDate2, boolean isSelected)
		{
			this.erodDate = erodDate;
			this.erodDate2 = erodDate2;
			this.isSelected = isSelected;
		}

		public boolean isSelected()
		{
			return isSelected;
		}

		public Date getErodDate()
		{
			return erodDate;
		}

		public Date getErodDate2()
		{
			return erodDate2;
		}
	}
	*/

	@Override
	protected void onBtnERODClick() throws PresentationLogicException
	{
		Booking_AppointmentVo apptForERODVo = getFirstApptforEROD(form.grdAppt().getValues());
		engine.open(form.getForms().RefMan.ERODDialog, new Object[] { ERODType.OUTPATIENT, apptForERODVo != null ? FormMode.EDIT : null });
	}

	private Booking_AppointmentVo getFirstApptforEROD(Booking_AppointmentVoCollection selectedAppts)
	{
		if (selectedAppts == null || selectedAppts.size() == 0)
			return null;
		for (int i = 0; i < selectedAppts.size(); i++)
		{
			if (selectedAppts.get(i) == null)
				continue;
			if (selectedAppts.get(i).getActivityIsNotNull() && Boolean.TRUE.equals(selectedAppts.get(i).getActivity().getFirstAppointment()))
			{

				return selectedAppts.get(i);
			}
		}
		return null;
	}

	@Override
	protected void onCmbActivityValueChanged() throws PresentationLogicException
	{
		boolean isFlexible = domain.isActivityFlexible(form.cmbService().getValue(), form.cmbActivity().getValue());

		showTimeControlsForFlexibleAppts(isFlexible);
		updateClinicType(isFlexible);
		defaultListType();

		clearSearchResults();
	}

	private void defaultListType()
	{
		if(form.cmbActivity().getValue() == null || !Boolean.TRUE.equals(form.cmbActivity().getValue().getFirstAppointment()))
			return;

		if(form.getLocalContext().getReferral() == null || form.getLocalContext().getReferral().getTriageOutcome() == null || form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails() == null || form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails().getOPA() == null)
			return;

		if(AcceptedActionsRequired.OPA.equals(form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails().getActionRequired()) 
				|| AcceptedActionsRequired.OPA_AND_LINKED_DIAGNOSTICS.equals(form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails().getActionRequired())
				|| AcceptedActionsRequired.DIRECT_TO_LIST_AND_OPA.equals(form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails().getActionRequired()))
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails().getOPA().getConsultant()))
			{
				form.cmbListType().setValue(ProfileListType.CONSULTANT);
			}
			else if(Boolean.TRUE.equals(form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails().getOPA().getSPR()))
			{
				form.cmbListType().setValue(ProfileListType.REGISTRAR);
			}
			else if(Boolean.TRUE.equals(form.getLocalContext().getReferral().getTriageOutcome().getAcceptedDetails().getOPA().getAssociateSpecialist()))
			{
				form.cmbListType().setValue(ProfileListType.ASSOCIATE_SPECIALIST);
			}
		}
	}

	@Override
	protected void onBtnDashboardClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			if (ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue().length() == 0)
			{
				engine.showMessage("PATIENT_DASHBOARD_URL config flag was not set.");
				return;
			}
			
			//WDEV-22837
			List<UrlParam> params = new ArrayList<UrlParam>();
			if(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull())
				params.add(new UrlParam("PID", form.getGlobalContext().Core.getPatientShort().getID_Patient().toString()));
			engine.openDashboardCloseableOnContextChange(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue(), params);
			
			/*
			String url = ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() + "&PID=" + form.getGlobalContext().Core.getPatientShort().getID_Patient();

			List<WindowParam> params = new ArrayList<WindowParam>();

			params.add(new WindowParam("FullScreen", "false"));

			params.add(new WindowParam("ToolBar", "false"));

			params.add(new WindowParam("StatusBar", "false"));

			params.add(new WindowParam("StatusBar", "false"));

			params.add(new WindowParam("MenuBar", "false"));

			params.add(new WindowParam("AddressBar", "false"));

			params.add(new WindowParam("Resizable", "true"));

			params.add(new WindowParam("Visible", "true"));

			params.add(new WindowParam("Width", "1440"));

			params.add(new WindowParam("Height", "1000"));

			engine.openCustomUrlCloseableOnContextChange(url, params, true);
			*/
		}

	}

	// WDEV-18411
	@Override
	protected void onQmbListOwnerTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbListOwner().clear();

		HcpFilter filter = new HcpFilter();
		PersonName voName = new PersonName();
		voName.setSurname(value);
		filter.setQueryName(voName);

		//WDEV-22314 
		// Referrals - Booking Appointments - The List Owner list should be based on the service selected (P2-618)
//		HcpLiteVoCollection voCollHcp = domain.listClinicsListOwners(filter);
		ServiceRefVo serviceRefVo = form.cmbService().getValue();
		HcpLiteVoCollection voCollHcp = domain.listHcpLiteByServiceFunction(filter, serviceRefVo, null);
		//WDEV-22314
		
		if (voCollHcp.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.qmbListOwner().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			form.qmbListOwner().setValue(voCollHcp.get(0));
		else
			form.qmbListOwner().showOpened();
	}

	//WDEV-19543
	@Override
	protected void onBtnLinkAppointmentsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.LinkAppointments);
	}

	@Override
	protected void onGrdApptSelectionChanged() throws PresentationLogicException
	{
		updateControlState();

	}
	
	//WDEV-22486
	private boolean checkThirtyMinSlot(DynamicGridCell cell)
	{
		DynamicGridRow row = cell.getRow();
		boolean isInstance = false;
		
		Time timeEnd = null;
		int timeStartMinutes = 0;
		int endTimeMinutes = 0;
		
		if (row.getValue() instanceof SessionSlotListVo)
		{
			SessionSlotListVo checkedSlot = (SessionSlotListVo) row.getValue();
			
			timeStartMinutes = checkedSlot.getStartTm().copy().getTotalMinutes();

			timeEnd = checkedSlot.getStartTm().copy();
			timeEnd.addMinutes(checkedSlot.getDuration());
			endTimeMinutes = timeEnd.getTotalMinutes();
			
			isInstance = true;
		}
		else if (row.getValue() instanceof SessionParentChildSlotListVo)
		{
			SessionParentChildSlotListVo checkedSlot = (SessionParentChildSlotListVo) row.getValue();
			
			timeStartMinutes = checkedSlot.getStartTime().copy().getTotalMinutes();

			timeEnd = checkedSlot.getStartTime().copy();
			if(form.intActivityTimeReq().getValue() == null)
				return false;
			
			timeEnd.addMinutes(form.intActivityTimeReq().getValue());
			endTimeMinutes = timeEnd.getTotalMinutes();
			
			isInstance = true;
		}

		if (isInstance)
		{
			for (int i = 0; i < form.grdAppt().getRows().size(); i++)
			{
				grdApptRow aRow = form.grdAppt().getRows().get(i);

				if (aRow.getValue() instanceof Booking_AppointmentVo && aRow.getValue() != null)
				{
					int apptStartTimeMinutes = aRow.getValue().getApptStartTime().getTotalMinutes();
					int apptEndTimeMinutes = aRow.getValue().getApptEndTime().getTotalMinutes();
					
					
					if ((Math.abs(timeStartMinutes - apptStartTimeMinutes) <= 30 || Math.abs(timeStartMinutes - apptEndTimeMinutes) <= 30  || Math.abs(endTimeMinutes - apptStartTimeMinutes) <= 30 || Math.abs(endTimeMinutes - apptEndTimeMinutes) <= 30) && aRow.getValue().getAppointmentDate().equals(form.bookingCalendarAppts().getSelectedDay()))
					{
						form.getLocalContext().setIsThirtyMinCheckedMessageBoxID(engine.showMessage("Are you sure you wish to book an appointment that is within 30 mins of another appointment for the Patient?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
						return true;
					}
					
				}
			}
		
			BookingAppointmentLiteVoCollection appts = domain.getCurrentAppts(form.getGlobalContext().Core.getPatientShort(), form.bookingCalendarAppts().getSelectedDay());
			
			for (BookingAppointmentLiteVo voAppt : appts)
			{
				int apptStartTimeMinutes = voAppt.getApptStartTime().getTotalMinutes();
				int apptEndTimeMinutes = voAppt.getApptEndTime().getTotalMinutes();
					
				if ( Math.abs(timeStartMinutes - apptStartTimeMinutes) <= 30 || Math.abs(timeStartMinutes - apptEndTimeMinutes) <= 30  || Math.abs(endTimeMinutes - apptStartTimeMinutes) <= 30 || Math.abs(endTimeMinutes - apptEndTimeMinutes) <= 30 )
				{
					form.getLocalContext().setIsThirtyMinCheckedMessageBoxID(engine.showMessage("Are you sure you wish to book an appointment that is within 30 mins of another appointment for the Patient?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
					return true;
				}
			
			}
			
		}		
		
		return false;
	}

	@Override
	protected void onDyngrdSessionSlotsCellValueChanged(DynamicGridCell cell)
	{
		/* WDEV-19852
		if (isChecked && row.getValue() instanceof SessionSlotListVo && checkIfThereIsFirstApptPerClock((SessionSlotListVo) row.getValue()))
		{
			engine.showMessage("There is a first appointment activity already recorded for this pathway clock", "", MessageButtons.OK, MessageIcon.INFORMATION);
			row.setColSelect(false);
			return;
		}*/

		DynamicGridRow row = cell.getRow();

		boolean isChecked = Boolean.TRUE.equals(cell.getValue());

		//WDEV-22486
		if (!Boolean.TRUE.equals(form.getLocalContext().getIsThirtyMinChecked()) && isChecked && checkThirtyMinSlot(cell))
		{
			return;
		}

		form.getLocalContext().setIsThirtyMinChecked(null);
		//--WDEV-22486
		
		highlightPossibleConflicts(row.getValue(), isChecked);

		if (isChecked)
		{
			if (row.getValue() instanceof SessionSlotListVo)
			{
				SessionSlotListVo slot = (SessionSlotListVo) row.getValue();
				DateTime slotDateTime = new DateTime(form.bookingCalendarAppts().getSelectedDay(), slot.getStartTm());

				if (form.getLocalContext().getTriageDateTimeIsNotNull())
				{
					if (slotDateTime.isLessThan(form.getLocalContext().getTriageDateTime()))
					{
						engine.showMessage("Please note that the Appointment selected is before the date and time of Triage for this Referral");
					}
				}
			}
			else if (row.getValue() instanceof SessionParentChildSlotListVo)
			{
				if (form.intActivityTimeReq().getValue() == null)
				{
					engine.showMessage("Time Required is mandatory.");
					cell.setValue(false);
					return;
				}

				SessionParentChildSlotListVo slot = (SessionParentChildSlotListVo) row.getValue();
				DateTime slotDateTime = new DateTime(form.bookingCalendarAppts().getSelectedDay(), slot.getStartTime());

				if (form.getLocalContext().getTriageDateTimeIsNotNull())
				{
					if (slotDateTime.isLessThan(form.getLocalContext().getTriageDateTime()))
					{
						engine.showMessage("Please note that the Appointment selected is before the date and time of Triage for this Referral");
					}
				}
			}
		}

		// WDEV-18557
		for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		{
			grdApptRow aRow = form.grdAppt().getRows().get(i);

			if (aRow.getValue() instanceof Booking_AppointmentVo && aRow.getValue() != null)
			{
				storeConsMediaAndCategorySelection(aRow.getValue(), new ConsMediaAndCategory(aRow.getcolConsMedia(), aRow.getcolPatCategory()));
			}
		}
		/*
		 * WDEV-5941 removed as part of WDEV-18411 for (int i = 0; i <
		 * form.grdAppt().getRows().size(); i++) { grdApptRow aRow =
		 * form.grdAppt().getRows().get(i); if (aRow.getcolErod())
		 * storeErodSelection(aRow.getValue().getSessionSlot(), new
		 * Erod(aRow.getcolErodDate(), aRow.getcolErodDate2(),
		 * aRow.getcolErod())); }
		 */

		Booking_AppointmentVoCollection voCollBookAppointments = form.getLocalContext().getSelectedAppointments();
		if (voCollBookAppointments == null)
			voCollBookAppointments = new Booking_AppointmentVoCollection();

		if (Boolean.TRUE.equals(cell.getValue()))
		{
			boolean bInListAlready = false;

			// /////////////////////////////////////////
			// rebook///////////////////////////////////
			if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			{

				clearSlotSelection(row);

				// rebook appt already selected
				if (!form.getLocalContext().getIsRebookApptSelected().booleanValue())
				{
					form.getLocalContext().setIsRebookApptSelected(true);
					Booking_AppointmentVo voAppt = (Booking_AppointmentVo) form.getGlobalContext().Scheduling.getBookingAppointment().clone();
					if (voAppt == null)
						throw new CodingRuntimeException("Rebook appointment not set in Global Context");

					// wdev-12090
					if (voAppt.getSessionSlotIsNotNull() 
							&& voAppt.getSessionSlot().getStatusIsNotNull() 
							&& voAppt.getSessionSlot().getStatus().equals(Status_Reason.DNA))
						form.getLocalContext().setSessionSlotDNAorDisplaced(voAppt.getSessionSlot());
					else
						form.getLocalContext().setSessionSlotDNAorDisplaced(null);
					// ---------

					if (Boolean.TRUE.equals(voAppt.getIsDisplaced()))//wdev-21206
						form.getLocalContext().setSessionSlotDNAorDisplaced(voAppt.getSessionSlot());

					if (row.getValue() instanceof SessionSlotListVo)
					{
						SessionSlotVo updatedSlot = domain.getSessionSlot((SessionSlotListVo) row.getValue());

						if (updatedSlot.getVersion_Session_Slot() != ((SessionSlotListVo) row.getValue()).getVersion_Session_Slot())
						{
							engine.showMessage("An appointment has already been booked for this slot. Screen will be refreshed.");
							bookingCalendarDateSelected(form.bookingCalendarAppts().getSelectedDay());
							return;
						}

						voAppt.setSessionSlot(updatedSlot);
						voCollBookAppointments.add(createAppointment(voAppt, (SessionSlotListVo) row.getValue()));
					}
					else if (row.getValue() instanceof SessionParentChildSlotListVo)
					{
						SessionParentChildSlotForBookingVo updatedFlexibleSlot = domain.getSessionFlexibleSlot((SessionParentChildSlotListVo) row.getValue());

						if (updatedFlexibleSlot.getVersion_SessionParentChildSlot() != ((SessionParentChildSlotListVo) row.getValue()).getVersion_SessionParentChildSlot())
						{
							engine.showMessage("An appointment has already been booked for this slot. Screen will be refreshed.");
							bookingCalendarDateSelected(form.bookingCalendarAppts().getSelectedDay());
							return;
						}

						voAppt.setParentChildSlot(updatedFlexibleSlot);

						SessionParentChildSlotRefVoCollection childSlots = null;

						try
						{
							childSlots = getChildSlots(row);
						}
						catch (DomainInterfaceException e)
						{
							engine.showMessage(e.getMessage());
							return;
						}

						voCollBookAppointments.add(createAppointmentFromFlexibleSlot(voAppt, (SessionParentChildSlotListVo) row.getValue(), childSlots));
					}

					loadAppointmentsGrid(voCollBookAppointments);
					return;
				}
			}
			// end rebook/////////////////////////////////
			// ///////////////////////////////////////////

			if (row.getValue() instanceof SessionSlotListVo)
			{
				// when rebooking only one appt can be booked this replaces the
				// one in the list with the one selected in the slots grid
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
				{
					if (form.getLocalContext().getIsRebookApptSelected().booleanValue())
					{
						if (voCollBookAppointments != null && voCollBookAppointments.size() == 1)
						{
							voCollBookAppointments.clear();
							voCollBookAppointments.add(createAppointment((Booking_AppointmentVo) form.getGlobalContext().Scheduling.getBookingAppointment().clone(), (SessionSlotListVo) row.getValue()));
							loadAppointmentsGrid(voCollBookAppointments);
							return;
						}
					}
				}

				// only allow linking to one orderinv
				if (form.getLocalContext().getisLinkingOrderInvIsNotNull() && form.getLocalContext().getisLinkingOrderInv())
				{
					clearAllOtherSelections(row);
					if (voCollBookAppointments != null && voCollBookAppointments.size() == 1)
					{
						voCollBookAppointments.clear();
						voCollBookAppointments.add(createAppointment(form.getGlobalContext().Scheduling.getBookingAppointment(), (SessionSlotListVo) row.getValue()));
						loadAppointmentsGrid(voCollBookAppointments);
						return;
					}
				}

				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).getSessionSlot() != null && voCollBookAppointments.get(i).getSessionSlot().equals(row.getValue()))
						bInListAlready = true;
				}
				if (!bInListAlready)
					voCollBookAppointments.add(createAppointment(null, (SessionSlotListVo) row.getValue()));
			}
			else if (row.getValue() instanceof SessionParentChildSlotListVo)
			{

				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).getParentChildSlot() != null && voCollBookAppointments.get(i).getParentChildSlot().equals(row.getValue()))
						bInListAlready = true;
				}

				if (!bInListAlready)
				{
					SessionParentChildSlotRefVoCollection childSlots = null;

					try
					{
						childSlots = getChildSlots(row);
					}
					catch (DomainInterfaceException e)
					{
						engine.showMessage(e.getMessage());
						return;
					}

					if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
					{	
						voCollBookAppointments.clear();
						voCollBookAppointments.add(createAppointmentFromFlexibleSlot((Booking_AppointmentVo) form.getGlobalContext().Scheduling.getBookingAppointment().clone(), (SessionParentChildSlotListVo) row.getValue(), childSlots));
					}
					else 
						voCollBookAppointments.add(createAppointmentFromFlexibleSlot(null, (SessionParentChildSlotListVo) row.getValue(), childSlots));
				}
			}
			else if (row.getValue() instanceof Booking_AppointmentVo)
			{
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).equals(row.getValue()))
						bInListAlready = true;
				}
				if (!bInListAlready)
					voCollBookAppointments.add(createAppointment(row));
			}
		}
		else
		{
			if (row.getValue() instanceof SessionSlotVo)
			{
				// WDEV-9012 the unchecking of the slot during a rebook needs to
				// set that the new slot has not yet been selected
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
					form.getLocalContext().setIsRebookApptSelected(false);

				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).getSessionSlot().equals(row.getValue()))
						voCollBookAppointments.remove(voCollBookAppointments.get(i));
				}
			}
			else if (row.getValue() instanceof SessionSlotListVo)
			{
				SessionSlotListVo slot = (SessionSlotListVo) row.getValue();

				// WDEV-9012 the unchecking of the slot during a rebook needs to
				// set that the new slot has not yet been selected
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
					form.getLocalContext().setIsRebookApptSelected(false);

				for (int i = voCollBookAppointments.size() - 1; i >= 0; --i)
				{
					Booking_AppointmentVo appointment = voCollBookAppointments.get(i);

					// WDEV-17154
					if (appointment != null && appointment.getSessionSlot() != null && appointment.getSessionSlot().getID_Session_Slot().equals(slot.getID_Session_Slot()))
					{
						voCollBookAppointments.remove(appointment);
					}
				}

			}
			else if (row.getValue() instanceof Booking_AppointmentVo)
			{
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).equals(row.getValue()))
						voCollBookAppointments.remove(voCollBookAppointments.get(i));
				}
			}
			else if (row.getValue() instanceof SessionParentChildSlotListVo)
			{
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).getParentChildSlot() != null && voCollBookAppointments.get(i).getParentChildSlot().equals(row.getValue()))
					{
						removeChildSlots(row, voCollBookAppointments.get(i).getParentChildSlot().getChildSlots());
						voCollBookAppointments.remove(voCollBookAppointments.get(i));

					}
				}

			}
		}

		if (isChecked)
		{
			form.setMode(FormMode.EDIT);
			form.btnCancel().setEnabled(true);
		}

		loadAppointmentsGrid(voCollBookAppointments);

		/*
		 * WDEV-5941 - repopulate ErodSelected data //removed as part of
		 * WDEV-18411 for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		 * { grdApptRow aRow = form.grdAppt().getRows().get(i); Erod erodData =
		 * retrieveErodData(aRow.getValue().getSessionSlot()); if (erodData !=
		 * null) { aRow.setcolErod(erodData.isSelected());
		 * aRow.setcolErodDate(erodData.getErodDate());
		 * aRow.setcolErodDate2(erodData.getErodDate2());
		 * aRow.setcolErodDateReadOnly(!erodData.isSelected());
		 * aRow.setcolErodDate2ReadOnly(!erodData.isSelected()); } }
		 */
		// WDEV-18557
		if (isChecked)
		{
			for (int i = 0; i < form.grdAppt().getRows().size(); i++)
			{
				grdApptRow aRow = form.grdAppt().getRows().get(i);

				if (row.getValue() instanceof SessionSlotListVo && aRow.getValue().getSessionSlot() != null && ((SessionSlotListVo)row.getValue()).getBoId().equals(aRow.getValue().getSessionSlot().getID_Session_Slot()))
				{
					ConsMediaAndCategory consMediaCategData = retrieveConsMediaAndCategoryData(aRow.getValue().getSessionSlot());

					if (consMediaCategData != null)
					{
						aRow.setcolConsMedia(consMediaCategData.getConsMedia());
						aRow.setcolPatCategory(consMediaCategData.getCategory());
					}
					break;
				}
			}
		}

		updateControlState();

	}

	private void clearSlotSelection(DynamicGridRow row)
	{

		boolean shouldBreak = false;

		for (int i = 0; i < form.dyngrdSessionSlots().getRows().size(); i++) //locations
		{
			if (shouldBreak)
				break;

			DynamicGridRow locationRow = form.dyngrdSessionSlots().getRows().get(i);

			for (int j = 0; j < locationRow.getRows().size(); j++) //sessions
			{
				if (shouldBreak)
					break;

				DynamicGridRow sessionRow =locationRow.getRows().get(j);

				for (int k = 0; k < sessionRow.getRows().size(); k++) //flexible slots
				{
					if (shouldBreak)
						break;

					DynamicGridRow slotRow = sessionRow.getRows().get(k);

					Booking_AppointmentVoCollection selectedAppointments = form.getLocalContext().getSelectedAppointments();

					DynamicGridCell cellSelect = slotRow.getCells().get(getColumnById(COLUMN_SELECT));	

					if (Boolean.TRUE.equals(cellSelect.getValue()))
					{

						if (slotRow.getValue() instanceof SessionParentChildSlotListVo && selectedAppointments != null)
						{
							if (!slotRow.getValue().equals(row.getValue())) //not the same row as the selected one
								cellSelect.setValue(Boolean.FALSE);
							else
								continue;

							for (int l = 0; l < selectedAppointments.size(); l++)
							{
								if (selectedAppointments.get(l).getParentChildSlot().getID_SessionParentChildSlot().equals(((SessionParentChildSlotListVo) slotRow.getValue()).getID_SessionParentChildSlot()))
								{
									removeChildSlots(slotRow, selectedAppointments.get(l).getParentChildSlot().getChildSlots());
									selectedAppointments.remove(selectedAppointments.get(l));
									shouldBreak = true;
									break;
								}
							}
						}
						else if (!slotRow.isReadOnly() && !slotRow.getValue().equals(row.getValue()))
						{
							cellSelect.setValue(false);
						}

					}
				}
			}
		}

	}

	private void removeChildSlots(DynamicGridRow row, SessionParentChildSlotRefVoCollection childSlots)
	{
		if (childSlots == null || childSlots.size() == 0)
			return;

		DynamicGridRow parentRow = row.getParent();

		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			for (int j = 0; j < childSlots.size(); j++)
			{
				if (childSlots.get(j).getID_SessionParentChildSlot().equals(((SessionParentChildSlotListVo)parentRow.getRows().get(i).getValue()).getID_SessionParentChildSlot()))
				{
					DynamicGridCell selectCell = parentRow.getRows().get(i).getCells().get(getColumnById(COLUMN_SELECT));
					selectCell.setValue(Boolean.FALSE);
					selectCell.setReadOnly(false);
					selectCell.setBackColor(null);
				}
			}
		}
	}

	private SessionParentChildSlotRefVoCollection getChildSlots(DynamicGridRow row) throws DomainInterfaceException
	{

		SessionParentChildSlotRefVoCollection childSlots = new SessionParentChildSlotRefVoCollection();

		SessionParentChildSlotListVo slot = (SessionParentChildSlotListVo) row.getValue();

		Integer totalDuration = slot.getDuration();

		DynamicGridRow parentRow = row.getParent();

		int rowID = -1; //index of the selected row in the grid

		if (form.intActivityTimeReq().getValue().intValue() > slot.getDuration().intValue())
		{

			for (int i = 0; i < parentRow.getRows().size(); i++)
			{

				if (row.getValue().equals(parentRow.getRows().get(i).getValue()))
				{
					rowID = i;
					continue; //row found so the next one will be the child
				}

				if (rowID != -1)
				{

					DynamicGridCell selectCell = parentRow.getRows().get(i).getCells().get(getColumnById(COLUMN_SELECT));

					//slot is already marked as selected or has an appointment booked - not enough slots so break;
					if (Boolean.TRUE.equals(selectCell.getValue()) || ((SessionParentChildSlotListVo)parentRow.getRows().get(i).getValue()).getAppointment() != null)
						break;

					totalDuration += ((SessionParentChildSlotListVo) parentRow.getRows().get(i).getValue()).getDuration();

					childSlots.add((SessionParentChildSlotListVo) parentRow.getRows().get(i).getValue());

					if (totalDuration < form.intActivityTimeReq().getValue().intValue())
						continue;
					else
						break;
				}
			}
		}

		//not enough slots to book into
		if (totalDuration < form.intActivityTimeReq().getValue().intValue())
		{
			DynamicGridCell selectCell = row.getCells().get(getColumnById(COLUMN_SELECT));
			selectCell.setValue(Boolean.FALSE);

			throw new DomainInterfaceException("Not enough Slots available to Book into");

		}
		else
			//mark child slots as checked
			if (childSlots != null && childSlots.size() > 0)
			{
				for (int i = 0; i < parentRow.getRows().size(); i++)
				{

					for (int j = 0; j < childSlots.size(); j++)
					{
						if (childSlots.get(j).getID_SessionParentChildSlot().equals(((SessionParentChildSlotListVo)parentRow.getRows().get(i).getValue()).getID_SessionParentChildSlot()))
						{
							DynamicGridCell selectCell = parentRow.getRows().get(i).getCells().get(getColumnById(COLUMN_SELECT));
							selectCell.setValue(Boolean.TRUE);
							selectCell.setReadOnly(true);
							selectCell.setBackColor(Color.LightGray);
						}
					}
				}
			}

		return childSlots;
	}

	private Booking_AppointmentVo createAppointmentFromFlexibleSlot(Booking_AppointmentVo voAppt, SessionParentChildSlotListVo flexibleSlot, SessionParentChildSlotRefVoCollection childSlots)
	{
		Booking_AppointmentVo voBookAppt = voAppt;
		SessionParentChildSlotForBookingVo slot = domain.getSessionFlexibleSlot(flexibleSlot);

		if (slot.getVersion_SessionParentChildSlot() != flexibleSlot.getVersion_SessionParentChildSlot())
		{
			engine.showMessage("An appointment has already been booked for this slot. Screen will be refreshed.");
			bookingCalendarDateSelected(form.bookingCalendarAppts().getSelectedDay());
			return null;
		}

		if (voBookAppt == null)
		{
			voBookAppt = new Booking_AppointmentVo();
			voBookAppt.setConsMediaType(slot != null && slot.getSession() != null ? slot.getSession().getConsMediaType() : null);
			voBookAppt.setCategory((CatsReferralCategory) (form.getLocalContext().getReferralCategoryIsNotNull() ? form.getLocalContext().getReferralCategory() : null));
			voBookAppt.setPatientCategory(form.getLocalContext().getCatsReferralListVo().getPatientCategory());//WDEV-20719
		}

		slot.setChildSlots(childSlots);
		voBookAppt.setParentChildSlot(slot);
		voBookAppt.setSession(slot.getSession());
		voBookAppt.setAppointmentDate(form.bookingCalendarAppts().getSelectedDay());
		voBookAppt.setApptStartTime(slot.getStartTime());
		voBookAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(slot.getStartTime(), form.intActivityTimeReq().getValue()));
		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		voBookAppt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voBookAppt.setIsWardAttendance(Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getWardAttendance()));
		voBookAppt.setIsFlexibleAppointment(Boolean.TRUE);

		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBookAppt.getAppointmentDate());
		voStatus.setApptTime(voBookAppt.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(voBookAppt.getApptStatus());
		voStatus.setSession(voBookAppt.getSessionIsNotNull() ? voBookAppt.getSession() : null); //WDEV-23185
		
		voBookAppt.setPriority(flexibleSlot != null  ? flexibleSlot.getPriority() : null);//WDEV-22366
		
		Session_ListOwnerVoCollection listOwnerBySlots = domain.getListOwnerBySlots(slot.getSession());
		if(listOwnerBySlots != null &&  listOwnerBySlots.size() > 0)
			voBookAppt.setListOwnerBooked(listOwnerBySlots.get(0).getHcp());//WDEV-22366

		voStatus.setEarliestOfferedDate(voBookAppt.getEarliestOfferedDate());

		voBookAppt.setCurrentStatusRecord(voStatus);

		if (voBookAppt.getApptStatusHistory() == null)
			voBookAppt.setApptStatusHistory(new Appointment_StatusVoCollection());

		voBookAppt.getApptStatusHistory().add(voStatus);

		Appointment_StatusVoCollection appstatusCol;

		if (form.getLocalContext().getApptStatus() == null)
		{
			form.getLocalContext().setApptStatus(new Appointment_StatusVoCollection());
			appstatusCol = form.getLocalContext().getApptStatus();
		}
		else
			appstatusCol = form.getLocalContext().getApptStatus();

		appstatusCol.add(voStatus);
		form.getLocalContext().setApptStatus(appstatusCol);

		voBookAppt.setPathwayClock(form.getLocalContext().getCurrentClock());

		if (form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getReferralLetterDetail() != null)
		{
			voBookAppt.setRTTBreachKPIDate(form.getLocalContext().getReferral().getReferralLetterDetail().getEnd18WW());

			if (form.cmbActivity().getValue() != null && Boolean.TRUE.equals(form.cmbActivity().getValue().getFirstAppointment()))
				voBookAppt.setFirstApptKPIDate(form.getLocalContext().getReferral().getReferralLetterDetail().getEndDateKPI());//wdev-21286
		}

		return voBookAppt;
	}

	// WDEV-18557 - TO BE REVIEWED IN A LATER RELEASE
	/*
	 * @Override protected void onGrdApptGridComboBoxSelectionChanged(int
	 * column, grdApptRow row, Object value) throws PresentationLogicException {
	 * 
	 * if (row != null && row.getValue() != null &&
	 * row.getValue().getSessionIsNotNull() && row.getValue().getSessionSlot()
	 * != null) { Session_SlotRefVo slot = null; ConsMediaAndCategory
	 * consMediaAndCategforAppt = new ConsMediaAndCategory(null, null);
	 * 
	 * if (column == APPT_CONSULTATION_MEDIA_COL_INDEX &&
	 * row.getValue().getSession().getConsMediaTypeIsNotNull() &&
	 * !row.getValue().getSession().getConsMediaType().equals(value)) { slot =
	 * (Session_SlotRefVo) row.getValue().getSessionSlot();
	 * consMediaAndCategforAppt.setConsMedia(row.getcolConsMedia());
	 * consMediaAndCategforAppt.setCategory(row.getcolPatCategory());
	 * 
	 * } if (column == APPT_PATIENT_CATEGORY_COL_INDEX &&
	 * form.getLocalContext().getReferralCategoryIsNotNull() &&
	 * !((CatsReferralCategory)
	 * form.getLocalContext().getReferralCategory()).equals(value)) { slot =
	 * (Session_SlotRefVo) row.getValue().getSessionSlot();
	 * consMediaAndCategforAppt.setCategory(row.getcolPatCategory());
	 * consMediaAndCategforAppt.setConsMedia(row.getcolConsMedia()); }
	 * storeConsMediaAndCategorySelection(slot, consMediaAndCategforAppt); }
	 * 
	 * }
	 */

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.dyngrdSessionSlots().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		loadLocations(form.cmbHospital().getValue());

	}

	//WDEV-20643
	@Override
	protected void onBtnAllConsultationActivityBookedClick() throws PresentationLogicException
	{
		try
		{
			domain.updateCatsReferralConsultationActivityRequired(form.getGlobalContext().RefMan.getCatsReferral(),false);
			form.btnAllConsultationActivityBooked().setVisible(false);
			form.btnViewTriageOutcome().setVisible(false);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}

	//WDEV-20643
	@Override
	protected void onBtnViewTriageOutcomeClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ReferralTriage, new Object[] {null, FormMode.VIEW});
	}

	@Override
	protected void onDyngrdSessionSlotsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlState();		
	}

	//WDEV-23060
	@Override
	protected void onBtnOutpatientDashboardClick() throws PresentationLogicException
	{
		if (ConfigFlag.GEN.OUTPATIENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.OUTPATIENT_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("OUTPATIENT_DASHBOARD_URL config flag is not set");
			return;
		}
			
		engine.openDashboard(ConfigFlag.GEN.OUTPATIENT_DASHBOARD_URL.getValue(), null);
	}


}
