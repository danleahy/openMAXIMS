//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.bookappointment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.resource.place.vo.LocationRefVo getValue()
		{
			return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
		}
		public void setValue(ims.core.resource.place.vo.LocationRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbUrgencyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.SchedulingPriority getValue()
		{
			return (ims.scheduling.vo.lookups.SchedulingPriority)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbListTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.ProfileListType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.ProfileListType getValue()
		{
			return (ims.scheduling.vo.lookups.ProfileListType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.ProfileListType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbClinicTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.clinical.vo.ServiceFunctionRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.clinical.vo.ServiceFunctionRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.clinical.vo.ServiceFunctionRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.clinical.vo.ServiceFunctionRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.clinical.vo.ServiceFunctionRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.clinical.vo.ServiceFunctionRefVo getValue()
		{
			return (ims.core.clinical.vo.ServiceFunctionRefVo)super.control.getValue();
		}
		public void setValue(ims.core.clinical.vo.ServiceFunctionRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.resource.place.vo.LocationRefVo getValue()
		{
			return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
		}
		public void setValue(ims.core.resource.place.vo.LocationRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.clinical.vo.ServiceRefVo getValue()
		{
			return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
		}
		public void setValue(ims.core.clinical.vo.ServiceRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActivityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ActivitySchedVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ActivitySchedVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ActivitySchedVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ActivitySchedVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ActivitySchedVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ActivitySchedVo getValue()
		{
			return (ims.core.vo.ActivitySchedVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ActivitySchedVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbListOwnerComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdApptRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdApptRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolApptDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolApptDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolApptDateOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolApptDate(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolApptDate()
		{
			return (String)super.row.get(0);
		}
		public void setcolApptDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolApptDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolApptTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolApptTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolApptTimeOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolApptTime(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolApptTime()
		{
			return (String)super.row.get(1);
		}
		public void setcolApptTime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolApptTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolClinicReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolClinicReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolClinicOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolClinic(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolClinic()
		{
			return (String)super.row.get(2);
		}
		public void setcolClinic(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolClinicTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolConsMediaReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolConsMediaReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolConsMediaOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolConsMedia(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.scheduling.vo.lookups.ConsultationMediaType getcolConsMedia()
		{
			return (ims.scheduling.vo.lookups.ConsultationMediaType)super.row.get(3);
		}
		public void setcolConsMedia(ims.scheduling.vo.lookups.ConsultationMediaType value)
		{
			super.row.set(3, value, true);
		}
		public void setCellcolConsMediaTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolPatCategoryReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolPatCategoryReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolPatCategoryOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolPatCategory(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.lookups.PatientStatus getcolPatCategory()
		{
			return (ims.core.vo.lookups.PatientStatus)super.row.get(4);
		}
		public void setcolPatCategory(ims.core.vo.lookups.PatientStatus value)
		{
			super.row.set(4, value, true);
		}
		public void setCellcolPatCategoryTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolActivityReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolActivityReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolActivityOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolActivity(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolActivity()
		{
			return (String)super.row.get(5);
		}
		public void setcolActivity(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolActivityTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolDoNotMoveReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolDoNotMoveReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolDoNotMoveOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolDoNotMove(String value)
		{
			super.row.setTooltip(6, value);
		}
		public boolean getcolDoNotMove()
		{
			return ((Boolean)super.row.get(6)).booleanValue();
		}
		public void setcolDoNotMove(boolean value)
		{
			super.row.set(6, new Boolean(value));
		}
		public void setCellcolDoNotMoveTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.scheduling.vo.Booking_AppointmentVo getValue()
		{
			return (ims.scheduling.vo.Booking_AppointmentVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.Booking_AppointmentVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdApptRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdApptRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdApptRow get(int index)
		{
			return new grdApptRow(super.collection.get(index));
		}
		public grdApptRow newRow()
		{
			return new grdApptRow(super.collection.newRow());
		}
		public grdApptRow newRow(boolean autoSelect)
		{
			return new grdApptRow(super.collection.newRow(autoSelect));
		}
		public grdApptRow newRowAt(int index)
		{
			return new grdApptRow(super.collection.newRowAt(index));
		}
		public grdApptRow newRowAt(int index, boolean autoSelect)
		{
			return new grdApptRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdApptGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.scheduling.vo.Booking_AppointmentVoCollection getValues()
		{
			ims.scheduling.vo.Booking_AppointmentVoCollection listOfValues = new ims.scheduling.vo.Booking_AppointmentVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.Booking_AppointmentVo getValue()
		{
			return (ims.scheduling.vo.Booking_AppointmentVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.Booking_AppointmentVo value)
		{
			super.grid.setValue(value);
		}
		public grdApptRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdApptRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdApptRowCollection getRows()
		{
			return new grdApptRowCollection(super.grid.getRows());
		}
		public grdApptRow getRowByValue(ims.scheduling.vo.Booking_AppointmentVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdApptRow(row);
		}
		public void setcolApptDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolApptDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolApptTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolApptTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolClinicHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolClinicHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolConsMediaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolConsMediaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public GridComboBox colConsMediaComboBox()
		{
			return new GridComboBox(super.grid, 3);
		}
		public void setcolPatCategoryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolPatCategoryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public GridComboBox colPatCategoryComboBox()
		{
			return new GridComboBox(super.grid, 4);
		}
		public void setcolActivityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolActivityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolDoNotMoveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolDoNotMoveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 640);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuBookAppointmentAddSlot = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuBookAppointmentAddSlotADD_SLOTItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Slot", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2690001)))
			contextMenus.RefMan.contextMenuBookAppointmentAddSlot.add(contextMenus.RefMan.contextMenuBookAppointmentAddSlotADD_SLOTItem);
		contextMenus.RefMan.contextMenuBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Flexible Slot", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2690002)))
			contextMenus.RefMan.contextMenuBookAppointmentAddSlot.add(contextMenus.RefMan.contextMenuBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem);
		form.registerMenu(contextMenus.RefMan.contextMenuBookAppointmentAddSlot);
		contextMenus.RefMan.contextMenuBookAppointment = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuBookAppointmentREBOOK_APPTItem = factory.createMenuItem(startControlID.intValue() + 3, "Rebook Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2520001)))
			contextMenus.RefMan.contextMenuBookAppointment.add(contextMenus.RefMan.contextMenuBookAppointmentREBOOK_APPTItem);
		form.registerMenu(contextMenus.RefMan.contextMenuBookAppointment);
		contextMenus.RefMan.contextMenuBookAppointmentCM = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.RefMan.contextMenuBookAppointmentCMREMOVE_APPOINTMENTItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Appointment", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6100001)))
			contextMenus.RefMan.contextMenuBookAppointmentCM.add(contextMenus.RefMan.contextMenuBookAppointmentCMREMOVE_APPOINTMENTItem);
		form.registerMenu(contextMenus.RefMan.contextMenuBookAppointmentCM);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 287, 0, 560, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Referral Details", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 5, 115, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 166, 224, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mins", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 5, 166, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 5, 224, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Required:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 5, 90, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 5, 65, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 632, 40, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<value>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 385, 40, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<value>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 385, 22, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<value>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 295, 40, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Breach Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 519, 40, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "First Appointment KPI:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 295, 22, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Service:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 5, 40, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 5, 140, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 5, 15, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 5, 584, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 5, 192, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Activity:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 334, 608, 128, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View Triage Outcome", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 141, 608, 189, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "All Consultation Activity Booked", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 2, 608, 134, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Link Appointments", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 466, 609, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "EROD", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 575, 608, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 280, 163, 5, 325, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 703, 8, 136, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Outpatient Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 764, 32, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "LPR", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 667, 608, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Book", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 759, 608, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 73, 581, 774, 22, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 70, 113, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 70, 164, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbUrgencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbUrgencyTemp);
		cmbUrgencyComboBox cmbUrgency = (cmbUrgencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgencyComboBox.class, m_cmbUrgencyTemp);
		super.addComboBox(cmbUrgency);
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 70, 88, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbListTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbListTypeTemp);
		cmbListTypeComboBox cmbListType = (cmbListTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeComboBox.class, m_cmbListTypeTemp);
		super.addComboBox(cmbListType);
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 70, 38, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbClinicTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbClinicTypeTemp);
		cmbClinicTypeComboBox cmbClinicType = (cmbClinicTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClinicTypeComboBox.class, m_cmbClinicTypeTemp);
		super.addComboBox(cmbClinicType);
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 70, 138, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLocationTemp);
		cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
		super.addComboBox(cmbLocation);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 70, 13, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbServiceTemp);
		cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
		super.addComboBox(cmbService);
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 70, 190, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbActivityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActivityTemp);
		cmbActivityComboBox cmbActivity = (cmbActivityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActivityComboBox.class, m_cmbActivityTemp);
		super.addComboBox(cmbActivity);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 70, 63, 194, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbListOwnerTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbListOwnerTemp);
		qmbListOwnerComboBox qmbListOwner = (qmbListOwnerComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbListOwnerComboBox.class, m_qmbListOwnerTemp);
		super.addComboBox(qmbListOwner);

		// Grid Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 2, 492, 845, 85, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdApptTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuBookAppointmentCM, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdApptTemp);
		grdApptGrid grdAppt = (grdApptGrid)GridFlyweightFactory.getInstance().createGridBridge(grdApptGrid.class, m_grdApptTemp);
		grdAppt.addStringColumn("Appt Date", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppt.addStringColumn("Appt Time", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppt.addStringColumn("Clinic", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppt.addComboBoxColumn("Consultation Media", 0, 0, 135, false, true, false, false, true, -1);
		grdAppt.addComboBoxColumn("Patient Category", 0, 0, 135, false, true, false, false, true, -1);
		grdAppt.addStringColumn("Activity", 0, 0, 135, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppt.addBoolColumn("Do Not Move", 1, 1, 80, false, false, 0, true);
		super.addGrid(grdAppt);

		// Tree Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 295, 60, 544, 98, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.RefMan.contextMenuBookAppointment, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 288, 163, 559, 325, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, contextMenus.RefMan.contextMenuBookAppointmentAddSlot, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 96, 222, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(4)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 234, 222, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 200, 222, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// BookingCalendar Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 2, 258, 276, 230, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(BookingCalendar.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblMins()
	{
		return (Label)super.getControl(2);
	}
	public Label lblTimeRequired()
	{
		return (Label)super.getControl(4);
	}
	public Label lblFirstApptKPI()
	{
		return (Label)super.getControl(7);
	}
	public Label lblRttBreachDate()
	{
		return (Label)super.getControl(8);
	}
	public Label lblReferralService()
	{
		return (Label)super.getControl(9);
	}
	public Label lblRttDate()
	{
		return (Label)super.getControl(10);
	}
	public Label lblKPI()
	{
		return (Label)super.getControl(11);
	}
	public Button btnViewTriageOutcome()
	{
		return (Button)super.getControl(18);
	}
	public Button btnAllConsultationActivityBooked()
	{
		return (Button)super.getControl(19);
	}
	public Button btnLinkAppointments()
	{
		return (Button)super.getControl(20);
	}
	public Button btnEROD()
	{
		return (Button)super.getControl(21);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(22);
	}
	public Button btnDivider()
	{
		return (Button)super.getControl(23);
	}
	public Button btnOutpatientDashboard()
	{
		return (Button)super.getControl(24);
	}
	public Button btnDashboard()
	{
		return (Button)super.getControl(25);
	}
	public Button btnBook()
	{
		return (Button)super.getControl(26);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(27);
	}
	public TextBox txtBookingComments()
	{
		return (TextBox)super.getControl(28);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(0);
	}
	public cmbUrgencyComboBox cmbUrgency()
	{
		return (cmbUrgencyComboBox)super.getComboBox(1);
	}
	public cmbListTypeComboBox cmbListType()
	{
		return (cmbListTypeComboBox)super.getComboBox(2);
	}
	public cmbClinicTypeComboBox cmbClinicType()
	{
		return (cmbClinicTypeComboBox)super.getComboBox(3);
	}
	public cmbLocationComboBox cmbLocation()
	{
		return (cmbLocationComboBox)super.getComboBox(4);
	}
	public cmbServiceComboBox cmbService()
	{
		return (cmbServiceComboBox)super.getComboBox(5);
	}
	public cmbActivityComboBox cmbActivity()
	{
		return (cmbActivityComboBox)super.getComboBox(6);
	}
	public qmbListOwnerComboBox qmbListOwner()
	{
		return (qmbListOwnerComboBox)super.getComboBox(7);
	}
	public grdApptGrid grdAppt()
	{
		return (grdApptGrid)super.getGrid(0);
	}
	public TreeView treInvAppts()
	{
		return (TreeView)super.getControl(38);
	}
	public DynamicGrid dyngrdSessionSlots()
	{
		return (DynamicGrid)super.getControl(39);
	}
	public IntBox intActivityTimeReq()
	{
		return (IntBox)super.getControl(40);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(41);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(42);
	}
	public BookingCalendar bookingCalendarAppts()
	{
		return (BookingCalendar)super.getControl(43);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
			Core = new CoreForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				PrintAppointment = new LocalFormName(114163);
				SessionSlotDialog = new LocalFormName(114164);
				SessionFlexibleSlotDialog = new LocalFormName(114120);
			}
			public final FormName PrintAppointment;
			public final FormName SessionSlotDialog;
			public final FormName SessionFlexibleSlotDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ERODDialog = new LocalFormName(134216);
				ReasonForBookingPastFirstApptKPIDialog = new LocalFormName(134230);
				LinkAppointments = new LocalFormName(134242);
				PreAssessmentWorklist = new LocalFormName(134272);
				ReferralTriage = new LocalFormName(134267);
			}
			public final FormName ERODDialog;
			public final FormName ReasonForBookingPastFirstApptKPIDialog;
			public final FormName LinkAppointments;
			public final FormName PreAssessmentWorklist;
			public final FormName ReferralTriage;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PDSDemographicsDialog = new LocalFormName(102494);
			}
			public final FormName PDSDemographicsDialog;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
			Admin = new AdminImages();
			RefMan = new RefManImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClosedFolder = new ImageHelper(102135, "Images/Core/closed_folder.png", new Integer(16), new Integer(16));
				OpenFolder = new ImageHelper(102134, "Images/Core/open_folder_simple.png", new Integer(16), new Integer(16));
				Date = new ImageHelper(102236, "Images/Core/Control_MonthCalendar.gif", new Integer(16), new Integer(16));
				Comment16 = new ImageHelper(102625, "Images/Core/Comment16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClosedFolder;
			public final ims.framework.utils.Image OpenFolder;
			public final ims.framework.utils.Image Date;
			public final ims.framework.utils.Image Comment16;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Investigation;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(23), new Integer(23));
				Clinic02 = new ImageHelper(103161, "Images/Admin/Clinics.jpg", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image Clinic02;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Admission16 = new ImageHelper(134151, "Images/RefMan/Admission16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Admission16;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final AdminImages Admin;
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Sessions = new ims.framework.ContextVariable("Sessions", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sessions_" + componentIdentifier + "");
			cxl_SelectedSessions = new ims.framework.ContextVariable("SelectedSessions", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SelectedSessions_" + componentIdentifier + "");
			cxl_SelectedAppointments = new ims.framework.ContextVariable("SelectedAppointments", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SelectedAppointments_" + componentIdentifier + "");
			cxl_Patient = new ims.framework.ContextVariable("Patient", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier + "");
			cxl_SessionBookingRights = new ims.framework.ContextVariable("SessionBookingRights", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionBookingRights_" + componentIdentifier + "");
			cxl_CurrentDate = new ims.framework.ContextVariable("CurrentDate", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CurrentDate_" + componentIdentifier + "");
			cxl_StartDate = new ims.framework.ContextVariable("StartDate", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__StartDate_" + componentIdentifier + "");
			cxl_EndDate = new ims.framework.ContextVariable("EndDate", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__EndDate_" + componentIdentifier + "");
			cxl_Sch_Booking = new ims.framework.ContextVariable("Sch_Booking", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier + "");
			cxl_IsRebookApptSelected = new ims.framework.ContextVariable("IsRebookApptSelected", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__IsRebookApptSelected_" + componentIdentifier + "");
			cxl_KPIDays = new ims.framework.ContextVariable("KPIDays", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__KPIDays_" + componentIdentifier + "");
			cxl_SelectedDates = new ims.framework.ContextVariable("SelectedDates", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SelectedDates_" + componentIdentifier + "");
			cxl_TriageDateTime = new ims.framework.ContextVariable("TriageDateTime", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__TriageDateTime_" + componentIdentifier + "");
			cxl_isLinkingOrderInv = new ims.framework.ContextVariable("isLinkingOrderInv", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__isLinkingOrderInv_" + componentIdentifier + "");
			cxl_Activity = new ims.framework.ContextVariable("Activity", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Activity_" + componentIdentifier + "");
			cxl_distanceMap = new ims.framework.ContextVariable("distanceMap", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__distanceMap_" + componentIdentifier + "");
			cxl_ApptStatus = new ims.framework.ContextVariable("ApptStatus", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ApptStatus_" + componentIdentifier + "");
			cxl_MessageBoxId = new ims.framework.ContextVariable("MessageBoxId", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__MessageBoxId_" + componentIdentifier + "");
			cxl_SessionSlotDNAorDisplaced = new ims.framework.ContextVariable("SessionSlotDNAorDisplaced", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier + "");
			cxl_LastReferralEROD = new ims.framework.ContextVariable("LastReferralEROD", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier + "");
			cxl_ReferralERODForSaving = new ims.framework.ContextVariable("ReferralERODForSaving", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForSaving_" + componentIdentifier + "");
			cxl_ReferralERODForRebooking = new ims.framework.ContextVariable("ReferralERODForRebooking", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier + "");
			cxl_CurrentClock = new ims.framework.ContextVariable("CurrentClock", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CurrentClock_" + componentIdentifier + "");
			cxl_ReasonableDateMessageBoxId = new ims.framework.ContextVariable("ReasonableDateMessageBoxId", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReasonableDateMessageBoxId_" + componentIdentifier + "");
			cxl_IsCAB = new ims.framework.ContextVariable("IsCAB", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__IsCAB_" + componentIdentifier + "");
			cxl_ReferralCategory = new ims.framework.ContextVariable("ReferralCategory", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralCategory_" + componentIdentifier + "");
			cxl_Referral = new ims.framework.ContextVariable("Referral", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Referral_" + componentIdentifier + "");
			cxl_ClashesAppointments = new ims.framework.ContextVariable("ClashesAppointments", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ClashesAppointments_" + componentIdentifier + "");
			cxl_ClashesAppointmentsMessageBoxId = new ims.framework.ContextVariable("ClashesAppointmentsMessageBoxId", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ClashesAppointmentsMessageBoxId_" + componentIdentifier + "");
			cxl_Urgency = new ims.framework.ContextVariable("Urgency", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Urgency_" + componentIdentifier + "");
			cxl_FlexibleSessions = new ims.framework.ContextVariable("FlexibleSessions", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__FlexibleSessions_" + componentIdentifier + "");
			cxl_ClinicType = new ims.framework.ContextVariable("ClinicType", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ClinicType_" + componentIdentifier + "");
			cxl_formOpenedFromPreAssessmentWorklist = new ims.framework.ContextVariable("formOpenedFromPreAssessmentWorklist", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__formOpenedFromPreAssessmentWorklist_" + componentIdentifier + "");
			cxl_CatsReferralListVo = new ims.framework.ContextVariable("CatsReferralListVo", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier + "");
			cxl_CommunicatedMessageBoxId = new ims.framework.ContextVariable("CommunicatedMessageBoxId", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CommunicatedMessageBoxId_" + componentIdentifier + "");
			cxl_ListOwner = new ims.framework.ContextVariable("ListOwner", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ListOwner_" + componentIdentifier + "");
			cxl_ShouldNotDefaultService = new ims.framework.ContextVariable("ShouldNotDefaultService", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ShouldNotDefaultService_" + componentIdentifier + "");
			cxl_IsThirtyMinCheckedMessageBoxID = new ims.framework.ContextVariable("IsThirtyMinCheckedMessageBoxID", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__IsThirtyMinCheckedMessageBoxID_" + componentIdentifier + "");
			cxl_IsThirtyMinChecked = new ims.framework.ContextVariable("IsThirtyMinChecked", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__IsThirtyMinChecked_" + componentIdentifier + "");
			cxl_ShouldNotDefaultListOwner = new ims.framework.ContextVariable("ShouldNotDefaultListOwner", prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ShouldNotDefaultListOwner_" + componentIdentifier + "");
		}
		
		public boolean getSessionsIsNotNull()
		{
			return !cxl_Sessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVoCollection getSessions()
		{
			return (ims.scheduling.vo.SessionShortVoCollection)cxl_Sessions.getValue(context);
		}
		public void setSessions(ims.scheduling.vo.SessionShortVoCollection value)
		{
			cxl_Sessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sessions = null;
		public boolean getSelectedSessionsIsNotNull()
		{
			return !cxl_SelectedSessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVoCollection getSelectedSessions()
		{
			return (ims.scheduling.vo.SessionShortVoCollection)cxl_SelectedSessions.getValue(context);
		}
		public void setSelectedSessions(ims.scheduling.vo.SessionShortVoCollection value)
		{
			cxl_SelectedSessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSessions = null;
		public boolean getSelectedAppointmentsIsNotNull()
		{
			return !cxl_SelectedAppointments.getValueIsNull(context);
		}
		public ims.scheduling.vo.Booking_AppointmentVoCollection getSelectedAppointments()
		{
			return (ims.scheduling.vo.Booking_AppointmentVoCollection)cxl_SelectedAppointments.getValue(context);
		}
		public void setSelectedAppointments(ims.scheduling.vo.Booking_AppointmentVoCollection value)
		{
			cxl_SelectedAppointments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAppointments = null;
		public boolean getPatientIsNotNull()
		{
			return !cxl_Patient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatient()
		{
			return (ims.core.vo.PatientShort)cxl_Patient.getValue(context);
		}
		public void setPatient(ims.core.vo.PatientShort value)
		{
			cxl_Patient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Patient = null;
		public boolean getSessionBookingRightsIsNotNull()
		{
			return !cxl_SessionBookingRights.getValueIsNull(context);
		}
		public java.util.Map getSessionBookingRights()
		{
			return (java.util.Map)cxl_SessionBookingRights.getValue(context);
		}
		public void setSessionBookingRights(java.util.Map value)
		{
			cxl_SessionBookingRights.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionBookingRights = null;
		public boolean getCurrentDateIsNotNull()
		{
			return !cxl_CurrentDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getCurrentDate()
		{
			return (ims.framework.utils.Date)cxl_CurrentDate.getValue(context);
		}
		public void setCurrentDate(ims.framework.utils.Date value)
		{
			cxl_CurrentDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDate = null;
		public boolean getStartDateIsNotNull()
		{
			return !cxl_StartDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getStartDate()
		{
			return (ims.framework.utils.Date)cxl_StartDate.getValue(context);
		}
		public void setStartDate(ims.framework.utils.Date value)
		{
			cxl_StartDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StartDate = null;
		public boolean getEndDateIsNotNull()
		{
			return !cxl_EndDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getEndDate()
		{
			return (ims.framework.utils.Date)cxl_EndDate.getValue(context);
		}
		public void setEndDate(ims.framework.utils.Date value)
		{
			cxl_EndDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EndDate = null;
		public boolean getSch_BookingIsNotNull()
		{
			return !cxl_Sch_Booking.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_BookingVo getSch_Booking()
		{
			return (ims.scheduling.vo.Sch_BookingVo)cxl_Sch_Booking.getValue(context);
		}
		public void setSch_Booking(ims.scheduling.vo.Sch_BookingVo value)
		{
			cxl_Sch_Booking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sch_Booking = null;
		public boolean getIsRebookApptSelectedIsNotNull()
		{
			return !cxl_IsRebookApptSelected.getValueIsNull(context);
		}
		public Boolean getIsRebookApptSelected()
		{
			return (Boolean)cxl_IsRebookApptSelected.getValue(context);
		}
		public void setIsRebookApptSelected(Boolean value)
		{
			cxl_IsRebookApptSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRebookApptSelected = null;
		public boolean getKPIDaysIsNotNull()
		{
			return !cxl_KPIDays.getValueIsNull(context);
		}
		public ims.framework.utils.Date[] getKPIDays()
		{
			return (ims.framework.utils.Date[])cxl_KPIDays.getValue(context);
		}
		public void setKPIDays(ims.framework.utils.Date[] value)
		{
			cxl_KPIDays.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_KPIDays = null;
		public boolean getSelectedDatesIsNotNull()
		{
			return !cxl_SelectedDates.getValueIsNull(context);
		}
		public java.util.Map getSelectedDates()
		{
			return (java.util.Map)cxl_SelectedDates.getValue(context);
		}
		public void setSelectedDates(java.util.Map value)
		{
			cxl_SelectedDates.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedDates = null;
		public boolean getTriageDateTimeIsNotNull()
		{
			return !cxl_TriageDateTime.getValueIsNull(context);
		}
		public ims.framework.utils.DateTime getTriageDateTime()
		{
			return (ims.framework.utils.DateTime)cxl_TriageDateTime.getValue(context);
		}
		public void setTriageDateTime(ims.framework.utils.DateTime value)
		{
			cxl_TriageDateTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TriageDateTime = null;
		public boolean getisLinkingOrderInvIsNotNull()
		{
			return !cxl_isLinkingOrderInv.getValueIsNull(context);
		}
		public Boolean getisLinkingOrderInv()
		{
			return (Boolean)cxl_isLinkingOrderInv.getValue(context);
		}
		public void setisLinkingOrderInv(Boolean value)
		{
			cxl_isLinkingOrderInv.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isLinkingOrderInv = null;
		public boolean getActivityIsNotNull()
		{
			return !cxl_Activity.getValueIsNull(context);
		}
		public ims.core.resource.place.vo.ActivityRefVo getActivity()
		{
			return (ims.core.resource.place.vo.ActivityRefVo)cxl_Activity.getValue(context);
		}
		public void setActivity(ims.core.resource.place.vo.ActivityRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'Activity' RefVo context variable.");
			if(value == null)
				cxl_Activity.setValue(context, null);
			else
				cxl_Activity.setValue(context, new ims.core.resource.place.vo.ActivityRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_Activity = null;
		public boolean getdistanceMapIsNotNull()
		{
			return !cxl_distanceMap.getValueIsNull(context);
		}
		public java.util.Map getdistanceMap()
		{
			return (java.util.Map)cxl_distanceMap.getValue(context);
		}
		public void setdistanceMap(java.util.Map value)
		{
			cxl_distanceMap.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_distanceMap = null;
		public boolean getApptStatusIsNotNull()
		{
			return !cxl_ApptStatus.getValueIsNull(context);
		}
		public ims.scheduling.vo.Appointment_StatusVoCollection getApptStatus()
		{
			return (ims.scheduling.vo.Appointment_StatusVoCollection)cxl_ApptStatus.getValue(context);
		}
		public void setApptStatus(ims.scheduling.vo.Appointment_StatusVoCollection value)
		{
			cxl_ApptStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptStatus = null;
		public boolean getMessageBoxIdIsNotNull()
		{
			return !cxl_MessageBoxId.getValueIsNull(context);
		}
		public Integer getMessageBoxId()
		{
			return (Integer)cxl_MessageBoxId.getValue(context);
		}
		public void setMessageBoxId(Integer value)
		{
			cxl_MessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxId = null;
		public boolean getSessionSlotDNAorDisplacedIsNotNull()
		{
			return !cxl_SessionSlotDNAorDisplaced.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionSlotVo getSessionSlotDNAorDisplaced()
		{
			return (ims.scheduling.vo.SessionSlotVo)cxl_SessionSlotDNAorDisplaced.getValue(context);
		}
		public void setSessionSlotDNAorDisplaced(ims.scheduling.vo.SessionSlotVo value)
		{
			cxl_SessionSlotDNAorDisplaced.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionSlotDNAorDisplaced = null;
		public boolean getLastReferralERODIsNotNull()
		{
			return !cxl_LastReferralEROD.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODVo getLastReferralEROD()
		{
			return (ims.RefMan.vo.ReferralERODVo)cxl_LastReferralEROD.getValue(context);
		}
		public void setLastReferralEROD(ims.RefMan.vo.ReferralERODVo value)
		{
			cxl_LastReferralEROD.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastReferralEROD = null;
		public boolean getReferralERODForSavingIsNotNull()
		{
			return !cxl_ReferralERODForSaving.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODForBookAppointmentVoCollection getReferralERODForSaving()
		{
			return (ims.RefMan.vo.ReferralERODForBookAppointmentVoCollection)cxl_ReferralERODForSaving.getValue(context);
		}
		public void setReferralERODForSaving(ims.RefMan.vo.ReferralERODForBookAppointmentVoCollection value)
		{
			cxl_ReferralERODForSaving.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralERODForSaving = null;
		public boolean getReferralERODForRebookingIsNotNull()
		{
			return !cxl_ReferralERODForRebooking.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODVo getReferralERODForRebooking()
		{
			return (ims.RefMan.vo.ReferralERODVo)cxl_ReferralERODForRebooking.getValue(context);
		}
		public void setReferralERODForRebooking(ims.RefMan.vo.ReferralERODVo value)
		{
			cxl_ReferralERODForRebooking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralERODForRebooking = null;
		public boolean getCurrentClockIsNotNull()
		{
			return !cxl_CurrentClock.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayClockRefVo getCurrentClock()
		{
			return (ims.pathways.vo.PathwayClockRefVo)cxl_CurrentClock.getValue(context);
		}
		public void setCurrentClock(ims.pathways.vo.PathwayClockRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CurrentClock' RefVo context variable.");
			if(value == null)
				cxl_CurrentClock.setValue(context, null);
			else
				cxl_CurrentClock.setValue(context, new ims.pathways.vo.PathwayClockRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CurrentClock = null;
		public boolean getReasonableDateMessageBoxIdIsNotNull()
		{
			return !cxl_ReasonableDateMessageBoxId.getValueIsNull(context);
		}
		public Integer getReasonableDateMessageBoxId()
		{
			return (Integer)cxl_ReasonableDateMessageBoxId.getValue(context);
		}
		public void setReasonableDateMessageBoxId(Integer value)
		{
			cxl_ReasonableDateMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReasonableDateMessageBoxId = null;
		public boolean getIsCABIsNotNull()
		{
			return !cxl_IsCAB.getValueIsNull(context);
		}
		public Boolean getIsCAB()
		{
			return (Boolean)cxl_IsCAB.getValue(context);
		}
		public void setIsCAB(Boolean value)
		{
			cxl_IsCAB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsCAB = null;
		public boolean getReferralCategoryIsNotNull()
		{
			return !cxl_ReferralCategory.getValueIsNull(context);
		}
		public ims.vo.LookupInstVo getReferralCategory()
		{
			return (ims.vo.LookupInstVo)cxl_ReferralCategory.getValue(context);
		}
		public void setReferralCategory(ims.vo.LookupInstVo value)
		{
			cxl_ReferralCategory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralCategory = null;
		public boolean getReferralIsNotNull()
		{
			return !cxl_Referral.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralBookingVo getReferral()
		{
			return (ims.RefMan.vo.ReferralBookingVo)cxl_Referral.getValue(context);
		}
		public void setReferral(ims.RefMan.vo.ReferralBookingVo value)
		{
			cxl_Referral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Referral = null;
		public boolean getClashesAppointmentsIsNotNull()
		{
			return !cxl_ClashesAppointments.getValueIsNull(context);
		}
		public java.util.HashSet<ims.framework.utils.Date> getClashesAppointments()
		{
			return (java.util.HashSet<ims.framework.utils.Date>)cxl_ClashesAppointments.getValue(context);
		}
		public void setClashesAppointments(java.util.HashSet<ims.framework.utils.Date> value)
		{
			cxl_ClashesAppointments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClashesAppointments = null;
		public boolean getClashesAppointmentsMessageBoxIdIsNotNull()
		{
			return !cxl_ClashesAppointmentsMessageBoxId.getValueIsNull(context);
		}
		public Integer getClashesAppointmentsMessageBoxId()
		{
			return (Integer)cxl_ClashesAppointmentsMessageBoxId.getValue(context);
		}
		public void setClashesAppointmentsMessageBoxId(Integer value)
		{
			cxl_ClashesAppointmentsMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClashesAppointmentsMessageBoxId = null;
		public boolean getUrgencyIsNotNull()
		{
			return !cxl_Urgency.getValueIsNull(context);
		}
		public ims.scheduling.vo.lookups.SchedulingPriority getUrgency()
		{
			return (ims.scheduling.vo.lookups.SchedulingPriority)cxl_Urgency.getValue(context);
		}
		public void setUrgency(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			cxl_Urgency.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Urgency = null;
		public boolean getFlexibleSessionsIsNotNull()
		{
			return !cxl_FlexibleSessions.getValueIsNull(context);
		}
		public Boolean getFlexibleSessions()
		{
			return (Boolean)cxl_FlexibleSessions.getValue(context);
		}
		public void setFlexibleSessions(Boolean value)
		{
			cxl_FlexibleSessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FlexibleSessions = null;
		public boolean getClinicTypeIsNotNull()
		{
			return !cxl_ClinicType.getValueIsNull(context);
		}
		public ims.core.clinical.vo.ServiceFunctionRefVo getClinicType()
		{
			return (ims.core.clinical.vo.ServiceFunctionRefVo)cxl_ClinicType.getValue(context);
		}
		public void setClinicType(ims.core.clinical.vo.ServiceFunctionRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'ClinicType' RefVo context variable.");
			if(value == null)
				cxl_ClinicType.setValue(context, null);
			else
				cxl_ClinicType.setValue(context, new ims.core.clinical.vo.ServiceFunctionRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_ClinicType = null;
		public boolean getformOpenedFromPreAssessmentWorklistIsNotNull()
		{
			return !cxl_formOpenedFromPreAssessmentWorklist.getValueIsNull(context);
		}
		public Boolean getformOpenedFromPreAssessmentWorklist()
		{
			return (Boolean)cxl_formOpenedFromPreAssessmentWorklist.getValue(context);
		}
		public void setformOpenedFromPreAssessmentWorklist(Boolean value)
		{
			cxl_formOpenedFromPreAssessmentWorklist.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_formOpenedFromPreAssessmentWorklist = null;
		public boolean getCatsReferralListVoIsNotNull()
		{
			return !cxl_CatsReferralListVo.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralListVo getCatsReferralListVo()
		{
			return (ims.RefMan.vo.CatsReferralListVo)cxl_CatsReferralListVo.getValue(context);
		}
		public void setCatsReferralListVo(ims.RefMan.vo.CatsReferralListVo value)
		{
			cxl_CatsReferralListVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferralListVo = null;
		public boolean getCommunicatedMessageBoxIdIsNotNull()
		{
			return !cxl_CommunicatedMessageBoxId.getValueIsNull(context);
		}
		public Integer getCommunicatedMessageBoxId()
		{
			return (Integer)cxl_CommunicatedMessageBoxId.getValue(context);
		}
		public void setCommunicatedMessageBoxId(Integer value)
		{
			cxl_CommunicatedMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CommunicatedMessageBoxId = null;
		public boolean getListOwnerIsNotNull()
		{
			return !cxl_ListOwner.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.HcpRefVo getListOwner()
		{
			return (ims.core.resource.people.vo.HcpRefVo)cxl_ListOwner.getValue(context);
		}
		public void setListOwner(ims.core.resource.people.vo.HcpRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'ListOwner' RefVo context variable.");
			if(value == null)
				cxl_ListOwner.setValue(context, null);
			else
				cxl_ListOwner.setValue(context, new ims.core.resource.people.vo.HcpRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_ListOwner = null;
		public boolean getShouldNotDefaultServiceIsNotNull()
		{
			return !cxl_ShouldNotDefaultService.getValueIsNull(context);
		}
		public Boolean getShouldNotDefaultService()
		{
			return (Boolean)cxl_ShouldNotDefaultService.getValue(context);
		}
		public void setShouldNotDefaultService(Boolean value)
		{
			cxl_ShouldNotDefaultService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShouldNotDefaultService = null;
		public boolean getIsThirtyMinCheckedMessageBoxIDIsNotNull()
		{
			return !cxl_IsThirtyMinCheckedMessageBoxID.getValueIsNull(context);
		}
		public Integer getIsThirtyMinCheckedMessageBoxID()
		{
			return (Integer)cxl_IsThirtyMinCheckedMessageBoxID.getValue(context);
		}
		public void setIsThirtyMinCheckedMessageBoxID(Integer value)
		{
			cxl_IsThirtyMinCheckedMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsThirtyMinCheckedMessageBoxID = null;
		public boolean getIsThirtyMinCheckedIsNotNull()
		{
			return !cxl_IsThirtyMinChecked.getValueIsNull(context);
		}
		public Boolean getIsThirtyMinChecked()
		{
			return (Boolean)cxl_IsThirtyMinChecked.getValue(context);
		}
		public void setIsThirtyMinChecked(Boolean value)
		{
			cxl_IsThirtyMinChecked.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsThirtyMinChecked = null;
		public boolean getShouldNotDefaultListOwnerIsNotNull()
		{
			return !cxl_ShouldNotDefaultListOwner.getValueIsNull(context);
		}
		public Boolean getShouldNotDefaultListOwner()
		{
			return (Boolean)cxl_ShouldNotDefaultListOwner.getValue(context);
		}
		public void setShouldNotDefaultListOwner(Boolean value)
		{
			cxl_ShouldNotDefaultListOwner.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShouldNotDefaultListOwner = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class BookAppointmentAddSlot implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_SLOT = 1;
				public static final int ADD_FLEXIBLE_SLOT = 2;
			}
			public void disableAllBookAppointmentAddSlotMenuItems()
			{
				this.contextMenuBookAppointmentAddSlotADD_SLOTItem.setEnabled(false);
				this.contextMenuBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem.setEnabled(false);
			}
			public void hideAllBookAppointmentAddSlotMenuItems()
			{
				this.contextMenuBookAppointmentAddSlotADD_SLOTItem.setVisible(false);
				this.contextMenuBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem.setVisible(false);
			}
			private Menu contextMenuBookAppointmentAddSlot;
			public ReadOnlyMenuItem getBookAppointmentAddSlotADD_SLOTItem()
			{
				return this.contextMenuBookAppointmentAddSlotADD_SLOTItem;
			}
			private MenuItem contextMenuBookAppointmentAddSlotADD_SLOTItem;
			public ReadOnlyMenuItem getBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem()
			{
				return this.contextMenuBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem;
			}
			private MenuItem contextMenuBookAppointmentAddSlotADD_FLEXIBLE_SLOTItem;
			public final class BookAppointment implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int REBOOK_APPT = 3;
			}
			public void disableAllBookAppointmentMenuItems()
			{
				this.contextMenuBookAppointmentREBOOK_APPTItem.setEnabled(false);
			}
			public void hideAllBookAppointmentMenuItems()
			{
				this.contextMenuBookAppointmentREBOOK_APPTItem.setVisible(false);
			}
			private Menu contextMenuBookAppointment;
			public ReadOnlyMenuItem getBookAppointmentREBOOK_APPTItem()
			{
				return this.contextMenuBookAppointmentREBOOK_APPTItem;
			}
			private MenuItem contextMenuBookAppointmentREBOOK_APPTItem;
			public final class BookAppointmentCM implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int REMOVE_APPOINTMENT = 4;
			}
			public void disableAllBookAppointmentCMMenuItems()
			{
				this.contextMenuBookAppointmentCMREMOVE_APPOINTMENTItem.setEnabled(false);
			}
			public void hideAllBookAppointmentCMMenuItems()
			{
				this.contextMenuBookAppointmentCMREMOVE_APPOINTMENTItem.setVisible(false);
			}
			private Menu contextMenuBookAppointmentCM;
			public ReadOnlyMenuItem getBookAppointmentCMREMOVE_APPOINTMENTItem()
			{
				return this.contextMenuBookAppointmentCMREMOVE_APPOINTMENTItem;
			}
			private MenuItem contextMenuBookAppointmentCMREMOVE_APPOINTMENTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[352];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPROVIDERCANCELLATIONS", "NumProviderCancellations");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASPRINTED", "WasPrinted");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPATIENTCANCELLATIONS", "NumPatientCancellations");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTAPPTKPIDATE", "FirstApptKPIDate");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-RTTBREACHKPIDATE", "RTTBreachKPIDate");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REASONFORBREACHINGFIRSTAPPTKPI", "ReasonForBreachingFirstApptKPI");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTSFORBREACHINGFIRSTAPPTKPI", "CommentsForBreachingFirstApptKPI");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DONOTMOVE", "DoNotMove");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISFLEXIBLEAPPOINTMENT", "IsFlexibleAppointment");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISWARDATTENDANCE", "IsWardAttendance");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTCONSULTATIONACTIVITY", "FirstConsultationActivity");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ELECTIVELIST", "ElectiveList");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATIENTCATEGORY", "PatientCategory");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTBOOKEDONSAMEDAY", "ApptBookedOnSameDay");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASAPPTCOMMUNICATED", "WasApptCommunicated");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISDISPLACED", "IsDisplaced");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMEDATETIME", "OutcomeDateTime");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-NAME", "Name");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-REMAININGSLOTS", "RemainingSlots");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-TOTALSLOTS", "TotalSlots");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-THEATRETYPE", "TheatreType");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ISFIXED", "IsFixed");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-STARTTM", "StartTm");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ENDTM", "EndTm");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-REMAININGTIME", "RemainingTime");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-MAXCONTINUOUSAVAILABLEMINS", "MaxContinuousAvailableMins");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CONSMEDIATYPE", "ConsMediaType");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONSTATUS", "SessionStatus");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONCOMMENT", "SessionComment");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-LISTTYPE", "ListType");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-DESCRIPTION", "Description");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ISACTIVE", "IsActive");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-PASCLINIC", "PASClinic");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CANCELLATIONREASON", "CancellationReason");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-COMMENT", "Comment");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-WASSESSIONMOVED", "WasSessionMoved");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CASENOTEFOLDERNOTREQUIRED", "CaseNoteFolderNotRequired");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONPROFILETYPE", "SessionProfileType");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-LETTERREQUIRED", "LetterRequired");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SAFETYBRIEFDELAYREASON", "SafetyBriefDelayReason");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ID", "ID_ReferralEROD");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODTYPE", "ERODType");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-SEQUENCE", "Sequence");
			fields[220] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISACTIVE", "IsActive");
			fields[221] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[222] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODREASON", "ERODReason");
			fields[223] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[224] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[225] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[226] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[227] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-ID", "ID_Location");
			fields[228] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-NAME", "Name");
			fields[229] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-ISACTIVE", "IsActive");
			fields[230] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[231] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-TYPE", "Type");
			fields[232] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[233] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[234] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-ID", "ID_Location");
			fields[235] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-NAME", "Name");
			fields[236] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[237] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[238] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-TYPE", "Type");
			fields[239] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[240] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[241] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingListOwner", "BO-1006100000-ID", "ID_Hcp");
			fields[242] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingListOwner", "BO-1006100000-HCPTYPE", "HcpType");
			fields[243] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingListOwner", "BO-1006100000-ISACTIVE", "IsActive");
			fields[244] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingListOwner", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[245] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingListOwner", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[246] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingListOwner", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[247] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[248] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[249] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[250] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ServiceFunctionRef", "BO-1003100034-ID", "ID_ServiceFunction");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-ID", "ID_Sch_Booking");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-UBRN", "UBRN");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-REFERRERSDSID", "ReferrerSdsId");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-REFERRERSDSROLEID", "ReferrerSdsRoleId");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-REFERRERSDSORGID", "ReferrerSdsOrgId");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__Activity_" + componentIdentifier, "BO-1007100005-ID", "ID_Activity");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-ID", "ID_Session_Slot");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-STARTTM", "StartTm");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-DURATION", "Duration");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-PRIORITY", "Priority");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-ISACTIVE", "IsActive");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-DIRECTACCESSSLOT", "DirectAccessSlot");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-DEALLOCDATE", "DeallocDate");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-STATUS", "Status");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-STATUSREASON", "StatusReason");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-SESSDATETIME", "SessDateTime");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-CANCELBLOCKREASON", "CancelBlockReason");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-CANCELBLOCKCOMMENT", "CancelBlockComment");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-COMMENT", "Comment");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__SessionSlotDNAorDisplaced_" + componentIdentifier, "BO-1055100016-WASBLOCKEDCABSLOT", "WasBlockedCABSlot");
			fields[292] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ID", "ID_ReferralEROD");
			fields[293] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[294] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[295] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[296] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[297] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ERODTYPE", "ERODType");
			fields[298] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-SEQUENCE", "Sequence");
			fields[299] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ISACTIVE", "IsActive");
			fields[300] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[301] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ERODREASON", "ERODReason");
			fields[302] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[303] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[304] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[305] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__LastReferralEROD_" + componentIdentifier, "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[306] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ID", "ID_ReferralEROD");
			fields[307] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[308] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[309] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[310] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[311] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ERODTYPE", "ERODType");
			fields[312] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-SEQUENCE", "Sequence");
			fields[313] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ISACTIVE", "IsActive");
			fields[314] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[315] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ERODREASON", "ERODReason");
			fields[316] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[317] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[318] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[319] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ReferralERODForRebooking_" + componentIdentifier, "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[320] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CurrentClock_" + componentIdentifier, "BO-1088100005-ID", "ID_PathwayClock");
			fields[321] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ClinicType_" + componentIdentifier, "BO-1003100034-ID", "ID_ServiceFunction");
			fields[322] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[323] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[324] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[325] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[326] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-CARECONTEXT", "CareContext");
			fields[327] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[328] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[329] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[330] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[331] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[332] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISFLAGGEDFORREVIEW", "IsFlaggedForReview");
			fields[333] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[334] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[335] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[336] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASTLTSTARTCONTACT", "HasTLTStartContact");
			fields[337] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[338] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[339] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASTHEATREAPPT", "HasTheatreAppt");
			fields[340] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISCURRENTLYALLOCATED", "IsCurrentlyAllocated");
			fields[341] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[342] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-OPDLOCATION", "OPDLocation");
			fields[343] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-SUITABLEFORSURGERYDATE", "SuitableForSurgeryDate");
			fields[344] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[345] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[346] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-NUMPROVIDERCANCELLEDAPPTS", "NumProviderCancelledAppts");
			fields[347] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-NUMPATIENTCANCELLEDAPPTS", "NumPatientCancelledAppts");
			fields[348] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-CONSULTATIONACTIVITYREQUIRED", "ConsultationActivityRequired");
			fields[349] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PATIENTCATEGORY", "PatientCategory");
			fields[350] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISEMERGENCYREFERRAL", "IsEmergencyReferral");
			fields[351] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookAppointment.__internal_x_context__ListOwner_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
