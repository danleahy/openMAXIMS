//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistdetails;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		RefMan = new RefManContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getRieMessageIsNotNull()
		{
			return !cx_CoreRieMessage.getValueIsNull(context);
		}
		public String getRieMessage()
		{
			return (String)cx_CoreRieMessage.getValue(context);
		}
		public void setRieMessage(String value)
		{
			cx_CoreRieMessage.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreRieMessage = new ims.framework.ContextVariable("Core.RieMessage", "_cv_Core.RieMessage");
		public boolean getImsReportIdIsNotNull()
		{
			return !cx_CoreImsReportId.getValueIsNull(context);
		}
		public Integer getImsReportId()
		{
			return (Integer)cx_CoreImsReportId.getValue(context);
		}
		public void setImsReportId(Integer value)
		{
			cx_CoreImsReportId.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreImsReportId = new ims.framework.ContextVariable("Core.ImsReportId", "_cv_Core.ImsReportId");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		private ims.framework.Context context;
	}
	public final class RefManContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private RefManContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getTCIOutcomeForPatientElectiveListIsNotNull()
		{
			return !cx_RefManTCIOutcomeForPatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo getTCIOutcomeForPatientElectiveList()
		{
			return (ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo)cx_RefManTCIOutcomeForPatientElectiveList.getValue(context);
		}
		public void setTCIOutcomeForPatientElectiveList(ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo value)
		{
			cx_RefManTCIOutcomeForPatientElectiveList.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManTCIOutcomeForPatientElectiveList = new ims.framework.ContextVariable("RefMan.TCIOutcomeForPatientElectiveList", "_cv_RefMan.TCIOutcomeForPatientElectiveList");
		public boolean getPatientElectiveListNotesIsNotNull()
		{
			return !cx_RefManPatientElectiveListNotes.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListNotesVo getPatientElectiveListNotes()
		{
			return (ims.RefMan.vo.PatientElectiveListNotesVo)cx_RefManPatientElectiveListNotes.getValue(context);
		}
		public void setPatientElectiveListNotes(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			cx_RefManPatientElectiveListNotes.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManPatientElectiveListNotes = new ims.framework.ContextVariable("RefMan.PatientElectiveListNotes", "_cv_RefMan.PatientElectiveListNotes");
		public boolean getPELProcedureDetailsForBookingIsNotNull()
		{
			return !cx_RefManPELProcedureDetailsForBooking.getValueIsNull(context);
		}
		public String getPELProcedureDetailsForBooking()
		{
			return (String)cx_RefManPELProcedureDetailsForBooking.getValue(context);
		}
		public void setPELProcedureDetailsForBooking(String value)
		{
			cx_RefManPELProcedureDetailsForBooking.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManPELProcedureDetailsForBooking = new ims.framework.ContextVariable("RefMan.PELProcedureDetailsForBooking", "_cv_RefMan.PELProcedureDetailsForBooking");
		public boolean getPatientElectiveListRefIsNotNull()
		{
			return !cx_RefManPatientElectiveListRef.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListRefVo getPatientElectiveListRef()
		{
			return (ims.RefMan.vo.PatientElectiveListRefVo)cx_RefManPatientElectiveListRef.getValue(context);
		}
		public void setPatientElectiveListRef(ims.RefMan.vo.PatientElectiveListRefVo value)
		{
			cx_RefManPatientElectiveListRef.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManPatientElectiveListRef = new ims.framework.ContextVariable("RefMan.PatientElectiveListRef", "_cv_RefMan.PatientElectiveListRef");
		public boolean getTCIHistorySelectedIsNotNull()
		{
			return !cx_RefManTCIHistorySelected.getValueIsNull(context);
		}
		public ims.RefMan.vo.TCIForPatientElectiveListDetailsVo getTCIHistorySelected()
		{
			return (ims.RefMan.vo.TCIForPatientElectiveListDetailsVo)cx_RefManTCIHistorySelected.getValue(context);
		}
		public void setTCIHistorySelected(ims.RefMan.vo.TCIForPatientElectiveListDetailsVo value)
		{
			cx_RefManTCIHistorySelected.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManTCIHistorySelected = new ims.framework.ContextVariable("RefMan.TCIHistorySelected", "_cv_RefMan.TCIHistorySelected");
		public boolean getSelectedERODIsNotNull()
		{
			return !cx_RefManSelectedEROD.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODDetailsVo getSelectedEROD()
		{
			return (ims.RefMan.vo.ReferralERODDetailsVo)cx_RefManSelectedEROD.getValue(context);
		}
		public void setSelectedEROD(ims.RefMan.vo.ReferralERODDetailsVo value)
		{
			cx_RefManSelectedEROD.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManSelectedEROD = new ims.framework.ContextVariable("RefMan.SelectedEROD", "_cv_RefMan.SelectedEROD");
		public boolean getSelectedTCIHistoryIsNotNull()
		{
			return !cx_RefManSelectedTCIHistory.getValueIsNull(context);
		}
		public ims.RefMan.vo.TCIForPatientElectiveListRefVo getSelectedTCIHistory()
		{
			return (ims.RefMan.vo.TCIForPatientElectiveListRefVo)cx_RefManSelectedTCIHistory.getValue(context);
		}
		public void setSelectedTCIHistory(ims.RefMan.vo.TCIForPatientElectiveListRefVo value)
		{
			cx_RefManSelectedTCIHistory.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManSelectedTCIHistory = new ims.framework.ContextVariable("RefMan.SelectedTCIHistory", "_cv_RefMan.SelectedTCIHistory");

		private ims.framework.Context context;
	}

	public CoreContext Core;
	public RefManContext RefMan;
}
