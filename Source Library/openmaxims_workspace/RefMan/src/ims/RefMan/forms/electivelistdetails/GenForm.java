//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistdetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrWaitingListDetailsLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabPageSurgicalContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbPeripheralLocationComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.LocationLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.LocationLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.LocationLiteVo getValue()
					{
						return (ims.core.vo.LocationLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.LocationLiteVo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbTransportRequiredComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
					{
						return super.control.removeRow(value);
					}
					public ims.scheduling.vo.lookups.ApptTransportType getValue()
					{
						return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
					}
					public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbInterpreterRequiredComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.Language value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.Language value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.Language getValue()
					{
						return (ims.core.vo.lookups.Language)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.Language value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLateralitySecondComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LateralityLRB getValue()
					{
						return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LateralityLRB value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLateralityComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LateralityLRB getValue()
					{
						return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LateralityLRB value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPriorityComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
					{
						return super.control.removeRow(value);
					}
					public ims.RefMan.vo.lookups.ReferralUrgency getValue()
					{
						return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
					}
					public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbAnaestheticTypeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.AnaestheticType getValue()
					{
						return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
					{
						super.control.setValue(value);
					}
				}
				public static class qmbProcedureSecondComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.ProcedureLiteVo getValue()
					{
						return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.ProcedureLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbElectiveListComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo getValue()
					{
						return (ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo)super.control.getValue();
					}
					public void setValue(ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbProcedureComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.ProcedureLiteVo getValue()
					{
						return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.ProcedureLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
			
				public static class GroupProcedureCarriedOutRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 710, 374, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Other HCP", -1);
						RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 544, 374, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "SPR / Associate Specialist", -1);
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 416, 374, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Named Consultant", -1);
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 304, 374, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(3, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Any Consultant", -1);
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 189, 374, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(4, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "", -1);
					}
					public void setText(GroupProcedureCarriedOutEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupProcedureCarriedOutEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupProcedureCarriedOutEnumeration.None;
							case 0: return GroupProcedureCarriedOutEnumeration.rdoOther;
							case 1: return GroupProcedureCarriedOutEnumeration.rdoAny;
							case 2: return GroupProcedureCarriedOutEnumeration.rdoNamedConsultant;
							case 3: return GroupProcedureCarriedOutEnumeration.rdoAnyConsultant;
							case 4: return GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn;
						}
						return null;
					}
					public void setValue(GroupProcedureCarriedOutEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupProcedureCarriedOutEnumeration.None.id);
					}
					public boolean isEnabled(GroupProcedureCarriedOutEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupProcedureCarriedOutEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupProcedureCarriedOutEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupProcedureCarriedOutEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupProcedureCarriedOutEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupProcedureCarriedOutEnumeration None = new GroupProcedureCarriedOutEnumeration(-1);
					public static GroupProcedureCarriedOutEnumeration rdoOther = new GroupProcedureCarriedOutEnumeration(0);
					public static GroupProcedureCarriedOutEnumeration rdoAny = new GroupProcedureCarriedOutEnumeration(1);
					public static GroupProcedureCarriedOutEnumeration rdoNamedConsultant = new GroupProcedureCarriedOutEnumeration(2);
					public static GroupProcedureCarriedOutEnumeration rdoAnyConsultant = new GroupProcedureCarriedOutEnumeration(3);
					public static GroupProcedureCarriedOutEnumeration rdoNameOfClinicianLoggedIn = new GroupProcedureCarriedOutEnumeration(4);
					private GroupProcedureCarriedOutEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupProcedureCarriedOutEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupDaySurgMainTheatreRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 576, 488, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Peripheral Location", startTabIndex.intValue() + 57);
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 448, 487, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Inpatient Theatre", -1);
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 304, 487, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Day Surgery Theatre", -1);
					}
					public void setText(GroupDaySurgMainTheatreEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupDaySurgMainTheatreEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupDaySurgMainTheatreEnumeration.None;
							case 0: return GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation;
							case 1: return GroupDaySurgMainTheatreEnumeration.rdoMainTheatre;
							case 2: return GroupDaySurgMainTheatreEnumeration.rdoDaySurgery;
						}
						return null;
					}
					public void setValue(GroupDaySurgMainTheatreEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupDaySurgMainTheatreEnumeration.None.id);
					}
					public boolean isEnabled(GroupDaySurgMainTheatreEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupDaySurgMainTheatreEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupDaySurgMainTheatreEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupDaySurgMainTheatreEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupDaySurgMainTheatreEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupDaySurgMainTheatreEnumeration None = new GroupDaySurgMainTheatreEnumeration(-1);
					public static GroupDaySurgMainTheatreEnumeration rdoPeripheralLocation = new GroupDaySurgMainTheatreEnumeration(0);
					public static GroupDaySurgMainTheatreEnumeration rdoMainTheatre = new GroupDaySurgMainTheatreEnumeration(1);
					public static GroupDaySurgMainTheatreEnumeration rdoDaySurgery = new GroupDaySurgMainTheatreEnumeration(2);
					private GroupDaySurgMainTheatreEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupDaySurgMainTheatreEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupPlanedProceduresSurgicalRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 376, 34, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "Months", startTabIndex.intValue() + 13);
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 312, 34, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Weeks", startTabIndex.intValue() + 12);
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 256, 34, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "Days", startTabIndex.intValue() + 11);
					}
					public void setText(GroupPlanedProceduresSurgicalEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupPlanedProceduresSurgicalEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupPlanedProceduresSurgicalEnumeration.None;
							case 0: return GroupPlanedProceduresSurgicalEnumeration.rdoMonth;
							case 1: return GroupPlanedProceduresSurgicalEnumeration.rdoWeeks;
							case 2: return GroupPlanedProceduresSurgicalEnumeration.rdoDays;
						}
						return null;
					}
					public void setValue(GroupPlanedProceduresSurgicalEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupPlanedProceduresSurgicalEnumeration.None.id);
					}
					public boolean isEnabled(GroupPlanedProceduresSurgicalEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupPlanedProceduresSurgicalEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupPlanedProceduresSurgicalEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupPlanedProceduresSurgicalEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupPlanedProceduresSurgicalEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupPlanedProceduresSurgicalEnumeration None = new GroupPlanedProceduresSurgicalEnumeration(-1);
					public static GroupPlanedProceduresSurgicalEnumeration rdoMonth = new GroupPlanedProceduresSurgicalEnumeration(0);
					public static GroupPlanedProceduresSurgicalEnumeration rdoWeeks = new GroupPlanedProceduresSurgicalEnumeration(1);
					public static GroupPlanedProceduresSurgicalEnumeration rdoDays = new GroupPlanedProceduresSurgicalEnumeration(2);
					private GroupPlanedProceduresSurgicalEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupPlanedProceduresSurgicalEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupQuestion1RadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 320, 306, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Unknown", -1);
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 278, 306, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 232, 306, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "Yes", -1);
					}
					public void setText(GroupQuestion1Enumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupQuestion1Enumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupQuestion1Enumeration.None;
							case 0: return GroupQuestion1Enumeration.rdoUnknownQuestion1;
							case 1: return GroupQuestion1Enumeration.rdoNoQuestion1;
							case 2: return GroupQuestion1Enumeration.rdoYesQuestion1;
						}
						return null;
					}
					public void setValue(GroupQuestion1Enumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupQuestion1Enumeration.None.id);
					}
					public boolean isEnabled(GroupQuestion1Enumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupQuestion1Enumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupQuestion1Enumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupQuestion1Enumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupQuestion1Enumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupQuestion1Enumeration None = new GroupQuestion1Enumeration(-1);
					public static GroupQuestion1Enumeration rdoUnknownQuestion1 = new GroupQuestion1Enumeration(0);
					public static GroupQuestion1Enumeration rdoNoQuestion1 = new GroupQuestion1Enumeration(1);
					public static GroupQuestion1Enumeration rdoYesQuestion1 = new GroupQuestion1Enumeration(2);
					private GroupQuestion1Enumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupQuestion1Enumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupPerioperativeRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 752, 306, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper15.getX(), anchoringHelper15.getY(), anchoringHelper15.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 696, 306, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "Yes", -1);
					}
					public void setText(GroupPerioperativeEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupPerioperativeEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupPerioperativeEnumeration.None;
							case 0: return GroupPerioperativeEnumeration.rdoNoPerioperative;
							case 1: return GroupPerioperativeEnumeration.rdoYesPerioperative;
						}
						return null;
					}
					public void setValue(GroupPerioperativeEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupPerioperativeEnumeration.None.id);
					}
					public boolean isEnabled(GroupPerioperativeEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupPerioperativeEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupPerioperativeEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupPerioperativeEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupPerioperativeEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupPerioperativeEnumeration None = new GroupPerioperativeEnumeration(-1);
					public static GroupPerioperativeEnumeration rdoNoPerioperative = new GroupPerioperativeEnumeration(0);
					public static GroupPerioperativeEnumeration rdoYesPerioperative = new GroupPerioperativeEnumeration(1);
					private GroupPerioperativeEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupPerioperativeEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupElectiveListReasonRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 280, 10, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "Diagnostic", -1);
						RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 192, 10, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper18.getX(), anchoringHelper18.getY(), anchoringHelper18.getWidth(), "Treatment", -1);
					}
					public void setText(GroupElectiveListReasonEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupElectiveListReasonEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupElectiveListReasonEnumeration.None;
							case 0: return GroupElectiveListReasonEnumeration.rdoDiagnostic;
							case 1: return GroupElectiveListReasonEnumeration.rdoTreatment;
						}
						return null;
					}
					public void setValue(GroupElectiveListReasonEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupElectiveListReasonEnumeration.None.id);
					}
					public boolean isEnabled(GroupElectiveListReasonEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupElectiveListReasonEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupElectiveListReasonEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupElectiveListReasonEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupElectiveListReasonEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupElectiveListReasonEnumeration None = new GroupElectiveListReasonEnumeration(-1);
					public static GroupElectiveListReasonEnumeration rdoDiagnostic = new GroupElectiveListReasonEnumeration(0);
					public static GroupElectiveListReasonEnumeration rdoTreatment = new GroupElectiveListReasonEnumeration(1);
					private GroupElectiveListReasonEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupElectiveListReasonEnumeration)o).id;
					}
					private int id;
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 192, 413, 624, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_ccResponsibleHCPSUrgicalForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper19.getSize(), instance1, -1, skipContextValidation);
					//ims.framework.Control m_ccResponsibleHCPSUrgicalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(192), new Integer(413), new Integer(624), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccResponsibleHCPSUrgicalForm, instance1 } );
					ims.framework.Control m_ccResponsibleHCPSUrgicalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccResponsibleHCPSUrgicalForm, instance1, Boolean.FALSE } );
					super.addControl(m_ccResponsibleHCPSUrgicalControl);
					Menu[] menus1 = m_ccResponsibleHCPSUrgicalForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
					ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 497, 390, 247, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_ccNamedConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper20.getSize(), instance2, -1, skipContextValidation);
					//ims.framework.Control m_ccNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(497), new Integer(390), new Integer(247), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccNamedConsultantForm, instance2 } );
					ims.framework.Control m_ccNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccNamedConsultantForm, instance2, Boolean.FALSE } );
					super.addControl(m_ccNamedConsultantControl);
					Menu[] menus2 = m_ccNamedConsultantForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus2.length; x++)
					{
						form.registerMenu(menus2[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 415, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 544, 463, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 480, 34, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Planned Date:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Procedure In:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 537, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Special Requirements:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 448, 513, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 513, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interpreter Required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 230, 157, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-Assessment Required?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 440, 250, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Days", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 328, 463, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nights", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 463, 225, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-operative overnight stay required?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 493, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post - Operative Stay:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 415, 338, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 288, 340, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minutes", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 415, 314, 266, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Guidelines in relation to stopping medication?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 415, 298, 283, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Are you happy to follow the Trust's Perioperative", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 376, 274, 222, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Email letter to Pre-Assessment Anaesthetist", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 504, 250, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Critical Care bed required?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 108, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Procedure:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 132, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 232, 34, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date given to patient:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Possible date given to patient?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 437, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 60, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Procedure:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 84, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 156, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 8, 180, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 8, 204, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Type:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 250, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Short Notice:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 256, 250, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notice required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 274, 284, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessment of Risk by an Anaesthetist Required?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 223, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "anticoagulant / antiplatelet therapy? :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 298, 198, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is this patient currently receiving ", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 340, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Length:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 382, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "carried out by:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 366, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "This procedure is to be", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 207, 374, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name Of Clinician Logged In", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 561, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 248, 487, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nights", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 480, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anticipated", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 224, 535, 576, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 576, 459, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 472, 338, 328, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 393, 306, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 529, 274, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 192, 154, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 192, 561, 608, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// Date Controls
					RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 632, 32, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 376, 32, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 600, 461, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPeripheralLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 72), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPeripheralLocationTemp);
					cmbPeripheralLocationComboBox cmbPeripheralLocation = (cmbPeripheralLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeripheralLocationComboBox.class, m_cmbPeripheralLocationTemp);
					super.addComboBox(cmbPeripheralLocation);
					RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 608, 511, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbTransportRequiredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbTransportRequiredTemp);
					cmbTransportRequiredComboBox cmbTransportRequired = (cmbTransportRequiredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportRequiredComboBox.class, m_cmbTransportRequiredTemp);
					super.addComboBox(cmbTransportRequired);
					RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 224, 511, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbInterpreterRequiredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbInterpreterRequiredTemp);
					cmbInterpreterRequiredComboBox cmbInterpreterRequired = (cmbInterpreterRequiredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInterpreterRequiredComboBox.class, m_cmbInterpreterRequiredTemp);
					super.addComboBox(cmbInterpreterRequired);
					RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 192, 130, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbLateralitySecondTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLateralitySecondTemp);
					cmbLateralitySecondComboBox cmbLateralitySecond = (cmbLateralitySecondComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralitySecondComboBox.class, m_cmbLateralitySecondTemp);
					super.addComboBox(cmbLateralitySecond);
					RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 192, 82, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLateralityTemp);
					cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
					super.addComboBox(cmbLaterality);
					RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 191, 178, 305, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPriorityTemp);
					cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
					super.addComboBox(cmbPriority);
					RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 191, 202, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbAnaestheticTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbAnaestheticTypeTemp);
					cmbAnaestheticTypeComboBox cmbAnaestheticType = (cmbAnaestheticTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticTypeComboBox.class, m_cmbAnaestheticTypeTemp);
					super.addComboBox(cmbAnaestheticType);
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 192, 106, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_qmbProcedureSecondTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbProcedureSecondTemp);
					qmbProcedureSecondComboBox qmbProcedureSecond = (qmbProcedureSecondComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureSecondComboBox.class, m_qmbProcedureSecondTemp);
					super.addComboBox(qmbProcedureSecond);
					RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 192, 437, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_qmbElectiveListTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbElectiveListTemp);
					qmbElectiveListComboBox qmbElectiveList = (qmbElectiveListComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListComboBox.class, m_qmbElectiveListTemp);
					super.addComboBox(qmbElectiveList);
					RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 192, 58, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbProcedureTemp);
					qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
					super.addComboBox(qmbProcedure);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 312, 274, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 192, 537, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 576, 513, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 192, 513, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 191, 230, 17, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 240, 463, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 664, 250, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 192, 34, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 191, 250, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 192, 32, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
					RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 264, 461, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 360, 248, 69, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 191, 338, 81, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 191, 485, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(3)}));
			
					// RadioButton Controls
					RadioButton tmpGroupProcedureCarriedOut = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupProcedureCarriedOut);
					GroupProcedureCarriedOutRadioButton GroupProcedureCarriedOut = (GroupProcedureCarriedOutRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupProcedureCarriedOutRadioButton.class, tmpGroupProcedureCarriedOut);
					GroupProcedureCarriedOut.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupProcedureCarriedOut);
					RadioButton tmpGroupDaySurgMainTheatre = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupDaySurgMainTheatre);
					GroupDaySurgMainTheatreRadioButton GroupDaySurgMainTheatre = (GroupDaySurgMainTheatreRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupDaySurgMainTheatreRadioButton.class, tmpGroupDaySurgMainTheatre);
					GroupDaySurgMainTheatre.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupDaySurgMainTheatre);
					RadioButton tmpGroupPlanedProceduresSurgical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupPlanedProceduresSurgical);
					GroupPlanedProceduresSurgicalRadioButton GroupPlanedProceduresSurgical = (GroupPlanedProceduresSurgicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPlanedProceduresSurgicalRadioButton.class, tmpGroupPlanedProceduresSurgical);
					GroupPlanedProceduresSurgical.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupPlanedProceduresSurgical);
					RadioButton tmpGroupQuestion1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupQuestion1);
					GroupQuestion1RadioButton GroupQuestion1 = (GroupQuestion1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupQuestion1RadioButton.class, tmpGroupQuestion1);
					GroupQuestion1.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupQuestion1);
					RadioButton tmpGroupPerioperative = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupPerioperative);
					GroupPerioperativeRadioButton GroupPerioperative = (GroupPerioperativeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPerioperativeRadioButton.class, tmpGroupPerioperative);
					GroupPerioperative.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupPerioperative);
					RadioButton tmpGroupElectiveListReason = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpGroupElectiveListReason);
					GroupElectiveListReasonRadioButton GroupElectiveListReason = (GroupElectiveListReasonRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListReasonRadioButton.class, tmpGroupElectiveListReason);
					GroupElectiveListReason.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupElectiveListReason);
				}
	
				public ims.core.forms.mosquery.IComponent ccResponsibleHCPSUrgical()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
				}
				public void setccResponsibleHCPSUrgicalValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
				}
				public void setccResponsibleHCPSUrgicalVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setVisible(value);
				}
				public boolean isccResponsibleHCPSUrgicalVisible()
				{
					return ((ims.framework.Control)super.getControl(0)).isVisible();
				}
				public void setccResponsibleHCPSUrgicalEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setEnabled(value);
				}
				public boolean isccResponsibleHCPSUrgicalEnabled()
				{
					return ((ims.framework.Control)super.getControl(0)).isEnabled();
				}
				public ims.core.forms.mosquery.IComponent ccNamedConsultant()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
				}
				public void setccNamedConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
				}
				public void setccNamedConsultantVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(1)).setVisible(value);
				}
				public boolean isccNamedConsultantVisible()
				{
					return ((ims.framework.Control)super.getControl(1)).isVisible();
				}
				public void setccNamedConsultantEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(1)).setEnabled(value);
				}
				public boolean isccNamedConsultantEnabled()
				{
					return ((ims.framework.Control)super.getControl(1)).isEnabled();
				}
				public Label lblPeripheralHospital()
				{
					return (Label)super.getControl(3);
				}
				public Label lblRequestedPlannedDateSurgical()
				{
					return (Label)super.getControl(4);
				}
				public Label lblPlanProcedureInSurgical()
				{
					return (Label)super.getControl(5);
				}
				public Label lbl4()
				{
					return (Label)super.getControl(7);
				}
				public Label lblPreAssessmentRequired()
				{
					return (Label)super.getControl(9);
				}
				public Label lblDaysOfNoticeReq()
				{
					return (Label)super.getControl(10);
				}
				public Label lblpreoperativeOverNights()
				{
					return (Label)super.getControl(11);
				}
				public Label lblReason()
				{
					return (Label)super.getControl(14);
				}
				public Label lblHappyToFollowPerioperativeGuidelines2()
				{
					return (Label)super.getControl(16);
				}
				public Label lblHappyToFollowPerioperativeGuidelines1()
				{
					return (Label)super.getControl(17);
				}
				public Label lblEmailLetterToPreAssessmnetAnaesthetist()
				{
					return (Label)super.getControl(18);
				}
				public Label lblCriticalCareBedRequired()
				{
					return (Label)super.getControl(19);
				}
				public Label lblIntendedProcedureSecond()
				{
					return (Label)super.getControl(20);
				}
				public Label lblLateralitySecond()
				{
					return (Label)super.getControl(21);
				}
				public Label lblDateGivenToPatient()
				{
					return (Label)super.getControl(22);
				}
				public Label lblPosibleDateGivenToPatient()
				{
					return (Label)super.getControl(23);
				}
				public Label lbl21()
				{
					return (Label)super.getControl(24);
				}
				public Label lbl22()
				{
					return (Label)super.getControl(25);
				}
				public Label lbl23()
				{
					return (Label)super.getControl(26);
				}
				public Label lblLaterality()
				{
					return (Label)super.getControl(27);
				}
				public Label lbl25()
				{
					return (Label)super.getControl(28);
				}
				public Label lblPriority()
				{
					return (Label)super.getControl(29);
				}
				public Label lbl27()
				{
					return (Label)super.getControl(30);
				}
				public Label lblShortNotice()
				{
					return (Label)super.getControl(31);
				}
				public Label lblnumberofdaysofnoticerequired()
				{
					return (Label)super.getControl(32);
				}
				public Label lblDoyouwantthispatientohaveanassessmentofriskbyanAnaesthetist()
				{
					return (Label)super.getControl(33);
				}
				public Label lbl31()
				{
					return (Label)super.getControl(34);
				}
				public Label lbl32()
				{
					return (Label)super.getControl(35);
				}
				public Label lbl33()
				{
					return (Label)super.getControl(36);
				}
				public Label lbl34()
				{
					return (Label)super.getControl(37);
				}
				public Label lbl35()
				{
					return (Label)super.getControl(38);
				}
				public Label lblNameOfClinicianLoggedIn()
				{
					return (Label)super.getControl(39);
				}
				public Label lbl37()
				{
					return (Label)super.getControl(40);
				}
				public Label lblNights()
				{
					return (Label)super.getControl(41);
				}
				public Label lbl39()
				{
					return (Label)super.getControl(42);
				}
				public TextBox txtSpecialRequirements()
				{
					return (TextBox)super.getControl(43);
				}
				public TextBox txtdummyGroupDaySurgMainTheatre()
				{
					return (TextBox)super.getControl(44);
				}
				public TextBox txtReason()
				{
					return (TextBox)super.getControl(45);
				}
				public TextBox txtdummySurgicalQuestion1()
				{
					return (TextBox)super.getControl(46);
				}
				public TextBox txtdummySurgicalRiskByAnaesthetist()
				{
					return (TextBox)super.getControl(47);
				}
				public TextBox txtdetails()
				{
					return (TextBox)super.getControl(48);
				}
				public TextBox txtComment()
				{
					return (TextBox)super.getControl(49);
				}
				public DateControl dteRequestedPlannedDateSurgical()
				{
					return (DateControl)super.getControl(50);
				}
				public DateControl dteDateGivenToPatient()
				{
					return (DateControl)super.getControl(51);
				}
				public cmbPeripheralLocationComboBox cmbPeripheralLocation()
				{
					return (cmbPeripheralLocationComboBox)super.getComboBox(0);
				}
				public cmbTransportRequiredComboBox cmbTransportRequired()
				{
					return (cmbTransportRequiredComboBox)super.getComboBox(1);
				}
				public cmbInterpreterRequiredComboBox cmbInterpreterRequired()
				{
					return (cmbInterpreterRequiredComboBox)super.getComboBox(2);
				}
				public cmbLateralitySecondComboBox cmbLateralitySecond()
				{
					return (cmbLateralitySecondComboBox)super.getComboBox(3);
				}
				public cmbLateralityComboBox cmbLaterality()
				{
					return (cmbLateralityComboBox)super.getComboBox(4);
				}
				public cmbPriorityComboBox cmbPriority()
				{
					return (cmbPriorityComboBox)super.getComboBox(5);
				}
				public cmbAnaestheticTypeComboBox cmbAnaestheticType()
				{
					return (cmbAnaestheticTypeComboBox)super.getComboBox(6);
				}
				public qmbProcedureSecondComboBox qmbProcedureSecond()
				{
					return (qmbProcedureSecondComboBox)super.getComboBox(7);
				}
				public qmbElectiveListComboBox qmbElectiveList()
				{
					return (qmbElectiveListComboBox)super.getComboBox(8);
				}
				public qmbProcedureComboBox qmbProcedure()
				{
					return (qmbProcedureComboBox)super.getComboBox(9);
				}
				public CheckBox chkAnaesthesisRiskAssessmentRequest()
				{
					return (CheckBox)super.getControl(62);
				}
				public CheckBox chkSpecialRequirements()
				{
					return (CheckBox)super.getControl(63);
				}
				public CheckBox chkTransportRequired()
				{
					return (CheckBox)super.getControl(64);
				}
				public CheckBox chkInterpreterRequired()
				{
					return (CheckBox)super.getControl(65);
				}
				public CheckBox chkPreassessmentRequired()
				{
					return (CheckBox)super.getControl(66);
				}
				public CheckBox chkPreoperativeOvernightStay()
				{
					return (CheckBox)super.getControl(67);
				}
				public CheckBox chkCriticalCareBedRequired()
				{
					return (CheckBox)super.getControl(68);
				}
				public CheckBox chkPatientDateGivenToPatient()
				{
					return (CheckBox)super.getControl(69);
				}
				public CheckBox chkShortNotice()
				{
					return (CheckBox)super.getControl(70);
				}
				public IntBox intPlanProcedureIn()
				{
					return (IntBox)super.getControl(71);
				}
				public IntBox intPreoperativeOverNights()
				{
					return (IntBox)super.getControl(72);
				}
				public IntBox intNumberOfDaysOfNoticeReq()
				{
					return (IntBox)super.getControl(73);
				}
				public IntBox intProcedureLength()
				{
					return (IntBox)super.getControl(74);
				}
				public IntBox intAnticipatedNights()
				{
					return (IntBox)super.getControl(75);
				}
				public GroupProcedureCarriedOutRadioButton GroupProcedureCarriedOut()
				{
					return (GroupProcedureCarriedOutRadioButton)super.getRadioButton(0);
				}
				public GroupDaySurgMainTheatreRadioButton GroupDaySurgMainTheatre()
				{
					return (GroupDaySurgMainTheatreRadioButton)super.getRadioButton(1);
				}
				public GroupPlanedProceduresSurgicalRadioButton GroupPlanedProceduresSurgical()
				{
					return (GroupPlanedProceduresSurgicalRadioButton)super.getRadioButton(2);
				}
				public GroupQuestion1RadioButton GroupQuestion1()
				{
					return (GroupQuestion1RadioButton)super.getRadioButton(3);
				}
				public GroupPerioperativeRadioButton GroupPerioperative()
				{
					return (GroupPerioperativeRadioButton)super.getRadioButton(4);
				}
				public GroupElectiveListReasonRadioButton GroupElectiveListReason()
				{
					return (GroupElectiveListReasonRadioButton)super.getRadioButton(5);
				}
			}
			public static class tabPageMedicalContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbTransportRequiredMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
					{
						return super.control.removeRow(value);
					}
					public ims.scheduling.vo.lookups.ApptTransportType getValue()
					{
						return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
					}
					public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbInterpreterRequiredMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.Language value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.Language value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.Language getValue()
					{
						return (ims.core.vo.lookups.Language)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.Language value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPriorityMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
					{
						return super.control.removeRow(value);
					}
					public ims.RefMan.vo.lookups.ReferralUrgency getValue()
					{
						return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
					}
					public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLateralitySecondMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LateralityLRB getValue()
					{
						return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LateralityLRB value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLateralityMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LateralityLRB getValue()
					{
						return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LateralityLRB value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbHospitalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.LocationLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.LocationLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.LocationLiteVo getValue()
					{
						return (ims.core.vo.LocationLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.LocationLiteVo value)
					{
						super.control.setValue(value);
					}
				}
				public static class qmbWardComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.LocationLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.LocationLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.LocationLiteVo getValue()
					{
						return (ims.core.vo.LocationLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.LocationLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbProcedureSecondMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.ProcedureLiteVo getValue()
					{
						return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.ProcedureLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbProcedureMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.ProcedureLiteVo getValue()
					{
						return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.ProcedureLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbElectiveListMedicalComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.admin.vo.ElectiveListConfigLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.admin.vo.ElectiveListConfigLiteVo getValue()
					{
						return (ims.admin.vo.ElectiveListConfigLiteVo)super.control.getValue();
					}
					public void setValue(ims.admin.vo.ElectiveListConfigLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
			
				public static class GroupPlanedProceduresMedicalRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 376, 42, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper95.getX(), anchoringHelper95.getY(), anchoringHelper95.getWidth(), "Months", startTabIndex.intValue() + 21);
						RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 312, 42, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper96.getX(), anchoringHelper96.getY(), anchoringHelper96.getWidth(), "Weeks", startTabIndex.intValue() + 20);
						RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 256, 42, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper97.getX(), anchoringHelper97.getY(), anchoringHelper97.getWidth(), "Days", startTabIndex.intValue() + 19);
					}
					public void setText(GroupPlanedProceduresMedicalEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupPlanedProceduresMedicalEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupPlanedProceduresMedicalEnumeration.None;
							case 0: return GroupPlanedProceduresMedicalEnumeration.rdoMonthPlannedMedical;
							case 1: return GroupPlanedProceduresMedicalEnumeration.rdoWeeksPlannedMedical;
							case 2: return GroupPlanedProceduresMedicalEnumeration.rdoDaysPlannedMedical;
						}
						return null;
					}
					public void setValue(GroupPlanedProceduresMedicalEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupPlanedProceduresMedicalEnumeration.None.id);
					}
					public boolean isEnabled(GroupPlanedProceduresMedicalEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupPlanedProceduresMedicalEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupPlanedProceduresMedicalEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupPlanedProceduresMedicalEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupPlanedProceduresMedicalEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupPlanedProceduresMedicalEnumeration None = new GroupPlanedProceduresMedicalEnumeration(-1);
					public static GroupPlanedProceduresMedicalEnumeration rdoMonthPlannedMedical = new GroupPlanedProceduresMedicalEnumeration(0);
					public static GroupPlanedProceduresMedicalEnumeration rdoWeeksPlannedMedical = new GroupPlanedProceduresMedicalEnumeration(1);
					public static GroupPlanedProceduresMedicalEnumeration rdoDaysPlannedMedical = new GroupPlanedProceduresMedicalEnumeration(2);
					private GroupPlanedProceduresMedicalEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupPlanedProceduresMedicalEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupElectiveListReasonMedicalRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 280, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper98.getX(), anchoringHelper98.getY(), anchoringHelper98.getWidth(), "Diagnostic", -1);
						RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 192, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper99.getX(), anchoringHelper99.getY(), anchoringHelper99.getWidth(), "Treatment", -1);
					}
					public void setText(GroupElectiveListReasonMedicalEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupElectiveListReasonMedicalEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupElectiveListReasonMedicalEnumeration.None;
							case 0: return GroupElectiveListReasonMedicalEnumeration.rdoDiagnosticMedical;
							case 1: return GroupElectiveListReasonMedicalEnumeration.rdoTreatmentMedical;
						}
						return null;
					}
					public void setValue(GroupElectiveListReasonMedicalEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupElectiveListReasonMedicalEnumeration.None.id);
					}
					public boolean isEnabled(GroupElectiveListReasonMedicalEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupElectiveListReasonMedicalEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupElectiveListReasonMedicalEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupElectiveListReasonMedicalEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupElectiveListReasonMedicalEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupElectiveListReasonMedicalEnumeration None = new GroupElectiveListReasonMedicalEnumeration(-1);
					public static GroupElectiveListReasonMedicalEnumeration rdoDiagnosticMedical = new GroupElectiveListReasonMedicalEnumeration(0);
					public static GroupElectiveListReasonMedicalEnumeration rdoTreatmentMedical = new GroupElectiveListReasonMedicalEnumeration(1);
					private GroupElectiveListReasonMedicalEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupElectiveListReasonMedicalEnumeration)o).id;
					}
					private int id;
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 192, 376, 624, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_ccResponsibleHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper100.getSize(), instance1, -1, skipContextValidation);
					//ims.framework.Control m_ccResponsibleHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(192), new Integer(376), new Integer(624), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccResponsibleHCPForm, instance1 } );
					ims.framework.Control m_ccResponsibleHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1085),  new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccResponsibleHCPForm, instance1, Boolean.TRUE } );
					super.addControl(m_ccResponsibleHCPControl);
					Menu[] menus1 = m_ccResponsibleHCPForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 480, 42, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Planned Date:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Procedure In:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 8, 506, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Special Requirements:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 448, 482, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 8, 482, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interpreter Required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 8, 378, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 443, 314, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Days", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 8, 536, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 256, 346, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Nights", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 8, 346, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anticipated Stay:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Short Notice:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 257, 314, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notice required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 8, 234, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 8, 274, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 8, 454, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 8, 162, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Procedure:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 8, 194, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Procedure:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 8, 122, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 232, 42, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date given to patient:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Possible date given to patient?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 8, 402, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper124 = new RuntimeAnchoring(designSize, runtimeSize, 8, 427, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper124.getX()), new Integer(anchoringHelper124.getY()), new Integer(anchoringHelper124.getWidth()), new Integer(anchoringHelper124.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper125 = new RuntimeAnchoring(designSize, runtimeSize, 224, 504, 576, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper125.getX()), new Integer(anchoringHelper125.getY()), new Integer(anchoringHelper125.getWidth()), new Integer(anchoringHelper125.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper126 = new RuntimeAnchoring(designSize, runtimeSize, 192, 536, 601, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper126.getX()), new Integer(anchoringHelper126.getY()), new Integer(anchoringHelper126.getWidth()), new Integer(anchoringHelper126.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper127 = new RuntimeAnchoring(designSize, runtimeSize, 192, 232, 601, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper127.getX()), new Integer(anchoringHelper127.getY()), new Integer(anchoringHelper127.getWidth()), new Integer(anchoringHelper127.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper128 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper128.getX()), new Integer(anchoringHelper128.getY()), new Integer(anchoringHelper128.getWidth()), new Integer(anchoringHelper128.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// Date Controls
					RuntimeAnchoring anchoringHelper129 = new RuntimeAnchoring(designSize, runtimeSize, 632, 40, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper129.getX()), new Integer(anchoringHelper129.getY()), new Integer(anchoringHelper129.getWidth()), new Integer(anchoringHelper129.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper130 = new RuntimeAnchoring(designSize, runtimeSize, 368, 40, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper130.getX()), new Integer(anchoringHelper130.getY()), new Integer(anchoringHelper130.getWidth()), new Integer(anchoringHelper130.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper131 = new RuntimeAnchoring(designSize, runtimeSize, 608, 480, 192, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbTransportRequiredMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper131.getX()), new Integer(anchoringHelper131.getY()), new Integer(anchoringHelper131.getWidth()), new Integer(anchoringHelper131.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbTransportRequiredMedicalTemp);
					cmbTransportRequiredMedicalComboBox cmbTransportRequiredMedical = (cmbTransportRequiredMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportRequiredMedicalComboBox.class, m_cmbTransportRequiredMedicalTemp);
					super.addComboBox(cmbTransportRequiredMedical);
					RuntimeAnchoring anchoringHelper132 = new RuntimeAnchoring(designSize, runtimeSize, 224, 480, 192, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbInterpreterRequiredMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper132.getX()), new Integer(anchoringHelper132.getY()), new Integer(anchoringHelper132.getWidth()), new Integer(anchoringHelper132.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbInterpreterRequiredMedicalTemp);
					cmbInterpreterRequiredMedicalComboBox cmbInterpreterRequiredMedical = (cmbInterpreterRequiredMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInterpreterRequiredMedicalComboBox.class, m_cmbInterpreterRequiredMedicalTemp);
					super.addComboBox(cmbInterpreterRequiredMedical);
					RuntimeAnchoring anchoringHelper133 = new RuntimeAnchoring(designSize, runtimeSize, 192, 272, 305, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbPriorityMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper133.getX()), new Integer(anchoringHelper133.getY()), new Integer(anchoringHelper133.getWidth()), new Integer(anchoringHelper133.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPriorityMedicalTemp);
					cmbPriorityMedicalComboBox cmbPriorityMedical = (cmbPriorityMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityMedicalComboBox.class, m_cmbPriorityMedicalTemp);
					super.addComboBox(cmbPriorityMedical);
					RuntimeAnchoring anchoringHelper134 = new RuntimeAnchoring(designSize, runtimeSize, 192, 192, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbLateralitySecondMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper134.getX()), new Integer(anchoringHelper134.getY()), new Integer(anchoringHelper134.getWidth()), new Integer(anchoringHelper134.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLateralitySecondMedicalTemp);
					cmbLateralitySecondMedicalComboBox cmbLateralitySecondMedical = (cmbLateralitySecondMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralitySecondMedicalComboBox.class, m_cmbLateralitySecondMedicalTemp);
					super.addComboBox(cmbLateralitySecondMedical);
					RuntimeAnchoring anchoringHelper135 = new RuntimeAnchoring(designSize, runtimeSize, 192, 120, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbLateralityMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper135.getX()), new Integer(anchoringHelper135.getY()), new Integer(anchoringHelper135.getWidth()), new Integer(anchoringHelper135.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLateralityMedicalTemp);
					cmbLateralityMedicalComboBox cmbLateralityMedical = (cmbLateralityMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityMedicalComboBox.class, m_cmbLateralityMedicalTemp);
					super.addComboBox(cmbLateralityMedical);
					RuntimeAnchoring anchoringHelper136 = new RuntimeAnchoring(designSize, runtimeSize, 192, 425, 304, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper136.getX()), new Integer(anchoringHelper136.getY()), new Integer(anchoringHelper136.getWidth()), new Integer(anchoringHelper136.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbHospitalTemp);
					cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
					super.addComboBox(cmbHospital);
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper137 = new RuntimeAnchoring(designSize, runtimeSize, 192, 452, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_qmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper137.getX()), new Integer(anchoringHelper137.getY()), new Integer(anchoringHelper137.getWidth()), new Integer(anchoringHelper137.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbWardTemp);
					qmbWardComboBox qmbWard = (qmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbWardComboBox.class, m_qmbWardTemp);
					super.addComboBox(qmbWard);
					RuntimeAnchoring anchoringHelper138 = new RuntimeAnchoring(designSize, runtimeSize, 192, 160, 601, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_qmbProcedureSecondMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1123), new Integer(anchoringHelper138.getX()), new Integer(anchoringHelper138.getY()), new Integer(anchoringHelper138.getWidth()), new Integer(anchoringHelper138.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbProcedureSecondMedicalTemp);
					qmbProcedureSecondMedicalComboBox qmbProcedureSecondMedical = (qmbProcedureSecondMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureSecondMedicalComboBox.class, m_qmbProcedureSecondMedicalTemp);
					super.addComboBox(qmbProcedureSecondMedical);
					RuntimeAnchoring anchoringHelper139 = new RuntimeAnchoring(designSize, runtimeSize, 192, 80, 601, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_qmbProcedureMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1124), new Integer(anchoringHelper139.getX()), new Integer(anchoringHelper139.getY()), new Integer(anchoringHelper139.getWidth()), new Integer(anchoringHelper139.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbProcedureMedicalTemp);
					qmbProcedureMedicalComboBox qmbProcedureMedical = (qmbProcedureMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureMedicalComboBox.class, m_qmbProcedureMedicalTemp);
					super.addComboBox(qmbProcedureMedical);
					RuntimeAnchoring anchoringHelper140 = new RuntimeAnchoring(designSize, runtimeSize, 192, 400, 608, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_qmbElectiveListMedicalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1125), new Integer(anchoringHelper140.getX()), new Integer(anchoringHelper140.getY()), new Integer(anchoringHelper140.getWidth()), new Integer(anchoringHelper140.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbElectiveListMedicalTemp);
					qmbElectiveListMedicalComboBox qmbElectiveListMedical = (qmbElectiveListMedicalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListMedicalComboBox.class, m_qmbElectiveListMedicalTemp);
					super.addComboBox(qmbElectiveListMedical);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper141 = new RuntimeAnchoring(designSize, runtimeSize, 192, 506, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1126), new Integer(anchoringHelper141.getX()), new Integer(anchoringHelper141.getY()), new Integer(anchoringHelper141.getWidth()), new Integer(anchoringHelper141.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper142 = new RuntimeAnchoring(designSize, runtimeSize, 576, 482, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1127), new Integer(anchoringHelper142.getX()), new Integer(anchoringHelper142.getY()), new Integer(anchoringHelper142.getWidth()), new Integer(anchoringHelper142.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper143 = new RuntimeAnchoring(designSize, runtimeSize, 192, 482, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1128), new Integer(anchoringHelper143.getX()), new Integer(anchoringHelper143.getY()), new Integer(anchoringHelper143.getWidth()), new Integer(anchoringHelper143.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper144 = new RuntimeAnchoring(designSize, runtimeSize, 192, 314, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1129), new Integer(anchoringHelper144.getX()), new Integer(anchoringHelper144.getY()), new Integer(anchoringHelper144.getWidth()), new Integer(anchoringHelper144.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper145 = new RuntimeAnchoring(designSize, runtimeSize, 192, 42, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1130), new Integer(anchoringHelper145.getX()), new Integer(anchoringHelper145.getY()), new Integer(anchoringHelper145.getWidth()), new Integer(anchoringHelper145.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper146 = new RuntimeAnchoring(designSize, runtimeSize, 192, 40, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1131), new Integer(anchoringHelper146.getX()), new Integer(anchoringHelper146.getY()), new Integer(anchoringHelper146.getWidth()), new Integer(anchoringHelper146.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
					RuntimeAnchoring anchoringHelper147 = new RuntimeAnchoring(designSize, runtimeSize, 192, 344, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1132), new Integer(anchoringHelper147.getX()), new Integer(anchoringHelper147.getY()), new Integer(anchoringHelper147.getWidth()), new Integer(anchoringHelper147.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(3)}));
					RuntimeAnchoring anchoringHelper148 = new RuntimeAnchoring(designSize, runtimeSize, 361, 312, 69, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1133), new Integer(anchoringHelper148.getX()), new Integer(anchoringHelper148.getY()), new Integer(anchoringHelper148.getWidth()), new Integer(anchoringHelper148.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
			
					// RadioButton Controls
					RadioButton tmpGroupPlanedProceduresMedical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1134), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupPlanedProceduresMedical);
					GroupPlanedProceduresMedicalRadioButton GroupPlanedProceduresMedical = (GroupPlanedProceduresMedicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPlanedProceduresMedicalRadioButton.class, tmpGroupPlanedProceduresMedical);
					GroupPlanedProceduresMedical.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupPlanedProceduresMedical);
					RadioButton tmpGroupElectiveListReasonMedical = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1135), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpGroupElectiveListReasonMedical);
					GroupElectiveListReasonMedicalRadioButton GroupElectiveListReasonMedical = (GroupElectiveListReasonMedicalRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListReasonMedicalRadioButton.class, tmpGroupElectiveListReasonMedical);
					GroupElectiveListReasonMedical.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupElectiveListReasonMedical);
				}
	
				public ims.core.forms.mosquery.IComponent ccResponsibleHCP()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
				}
				public void setccResponsibleHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
				}
				public void setccResponsibleHCPVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setVisible(value);
				}
				public boolean isccResponsibleHCPVisible()
				{
					return ((ims.framework.Control)super.getControl(0)).isVisible();
				}
				public void setccResponsibleHCPEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setEnabled(value);
				}
				public boolean isccResponsibleHCPEnabled()
				{
					return ((ims.framework.Control)super.getControl(0)).isEnabled();
				}
				public Label lblRequestedPlannedMedical()
				{
					return (Label)super.getControl(1);
				}
				public Label lblPlanProcedureInMedical()
				{
					return (Label)super.getControl(2);
				}
				public Label lblTransportRequiredMedical()
				{
					return (Label)super.getControl(4);
				}
				public Label lblDaysMedical()
				{
					return (Label)super.getControl(7);
				}
				public Label lbl47()
				{
					return (Label)super.getControl(8);
				}
				public Label lblNightsMedical()
				{
					return (Label)super.getControl(9);
				}
				public Label lbl49()
				{
					return (Label)super.getControl(10);
				}
				public Label lbl50()
				{
					return (Label)super.getControl(11);
				}
				public Label lblnumberofdaysofnoticerequiredMedical()
				{
					return (Label)super.getControl(12);
				}
				public Label lbl52()
				{
					return (Label)super.getControl(13);
				}
				public Label lblPriorityMedical()
				{
					return (Label)super.getControl(14);
				}
				public Label lblIntendedProcedureSecondMedical()
				{
					return (Label)super.getControl(16);
				}
				public Label lblLateralitySecondMedical()
				{
					return (Label)super.getControl(17);
				}
				public Label lbl57()
				{
					return (Label)super.getControl(18);
				}
				public Label lblLateralityMedical()
				{
					return (Label)super.getControl(19);
				}
				public Label lblDateGivenToPatientMedical()
				{
					return (Label)super.getControl(20);
				}
				public Label lblPosibleDateGivenToPatientMedical()
				{
					return (Label)super.getControl(21);
				}
				public Label lbl61()
				{
					return (Label)super.getControl(22);
				}
				public Label lbl62()
				{
					return (Label)super.getControl(23);
				}
				public TextBox txtSpecialRequirementsMedical()
				{
					return (TextBox)super.getControl(25);
				}
				public TextBox txtCommentMedical()
				{
					return (TextBox)super.getControl(26);
				}
				public TextBox txtdetailsMedical()
				{
					return (TextBox)super.getControl(27);
				}
				public TextBox txtDummyElectiveReasonMedical()
				{
					return (TextBox)super.getControl(28);
				}
				public DateControl dteRequestedPlannedMedical()
				{
					return (DateControl)super.getControl(29);
				}
				public DateControl dteDateGivemToPatientMedical()
				{
					return (DateControl)super.getControl(30);
				}
				public cmbTransportRequiredMedicalComboBox cmbTransportRequiredMedical()
				{
					return (cmbTransportRequiredMedicalComboBox)super.getComboBox(0);
				}
				public cmbInterpreterRequiredMedicalComboBox cmbInterpreterRequiredMedical()
				{
					return (cmbInterpreterRequiredMedicalComboBox)super.getComboBox(1);
				}
				public cmbPriorityMedicalComboBox cmbPriorityMedical()
				{
					return (cmbPriorityMedicalComboBox)super.getComboBox(2);
				}
				public cmbLateralitySecondMedicalComboBox cmbLateralitySecondMedical()
				{
					return (cmbLateralitySecondMedicalComboBox)super.getComboBox(3);
				}
				public cmbLateralityMedicalComboBox cmbLateralityMedical()
				{
					return (cmbLateralityMedicalComboBox)super.getComboBox(4);
				}
				public cmbHospitalComboBox cmbHospital()
				{
					return (cmbHospitalComboBox)super.getComboBox(5);
				}
				public qmbWardComboBox qmbWard()
				{
					return (qmbWardComboBox)super.getComboBox(6);
				}
				public qmbProcedureSecondMedicalComboBox qmbProcedureSecondMedical()
				{
					return (qmbProcedureSecondMedicalComboBox)super.getComboBox(7);
				}
				public qmbProcedureMedicalComboBox qmbProcedureMedical()
				{
					return (qmbProcedureMedicalComboBox)super.getComboBox(8);
				}
				public qmbElectiveListMedicalComboBox qmbElectiveListMedical()
				{
					return (qmbElectiveListMedicalComboBox)super.getComboBox(9);
				}
				public CheckBox chkSpecialRequirementsMedical()
				{
					return (CheckBox)super.getControl(41);
				}
				public CheckBox chkTransportRequiredNedical()
				{
					return (CheckBox)super.getControl(42);
				}
				public CheckBox chkInterpreterRequiredMedical()
				{
					return (CheckBox)super.getControl(43);
				}
				public CheckBox chkShortNoticeMedical()
				{
					return (CheckBox)super.getControl(44);
				}
				public CheckBox chkPatientDateGivenToPatientMedical()
				{
					return (CheckBox)super.getControl(45);
				}
				public IntBox intPlanProcedureInMedical()
				{
					return (IntBox)super.getControl(46);
				}
				public IntBox intAnticipatedNightsMedical()
				{
					return (IntBox)super.getControl(47);
				}
				public IntBox intNumberOfDaysOfNoticeReqMedical()
				{
					return (IntBox)super.getControl(48);
				}
				public GroupPlanedProceduresMedicalRadioButton GroupPlanedProceduresMedical()
				{
					return (GroupPlanedProceduresMedicalRadioButton)super.getRadioButton(0);
				}
				public GroupElectiveListReasonMedicalRadioButton GroupElectiveListReasonMedical()
				{
					return (GroupElectiveListReasonMedicalRadioButton)super.getRadioButton(1);
				}
			}
			public static class tabPageEndoscopyContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbTransportRequiredEndoscopyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
					{
						return super.control.removeRow(value);
					}
					public ims.scheduling.vo.lookups.ApptTransportType getValue()
					{
						return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
					}
					public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbInterpreterRequiredEndoscopyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.Language value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.Language value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.Language getValue()
					{
						return (ims.core.vo.lookups.Language)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.Language value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbUrgencyEndoscopyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
					{
						return super.control.removeRow(value);
					}
					public ims.RefMan.vo.lookups.ReferralUrgency getValue()
					{
						return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
					}
					public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
					{
						super.control.setValue(value);
					}
				}
				public static class qmbProcedureEndoscopyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.ProcedureLiteVo getValue()
					{
						return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.ProcedureLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbElectiveListEndoscopyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.admin.vo.ElectiveListConfigLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.admin.vo.ElectiveListConfigLiteVo getValue()
					{
						return (ims.admin.vo.ElectiveListConfigLiteVo)super.control.getValue();
					}
					public void setValue(ims.admin.vo.ElectiveListConfigLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
			
				public static class GroupPrecolonoscopyReqRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper149 = new RuntimeAnchoring(designSize, runtimeSize, 248, 224, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper149.getX(), anchoringHelper149.getY(), anchoringHelper149.getWidth(), "No", startTabIndex.intValue() + 74);
						RuntimeAnchoring anchoringHelper150 = new RuntimeAnchoring(designSize, runtimeSize, 192, 224, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper150.getX(), anchoringHelper150.getY(), anchoringHelper150.getWidth(), "Yes", startTabIndex.intValue() + 73);
					}
					public void setText(GroupPrecolonoscopyReqEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupPrecolonoscopyReqEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupPrecolonoscopyReqEnumeration.None;
							case 0: return GroupPrecolonoscopyReqEnumeration.rdoNoPrecolonoscopyReq;
							case 1: return GroupPrecolonoscopyReqEnumeration.rdoYesPrecolonoscopyReq;
						}
						return null;
					}
					public void setValue(GroupPrecolonoscopyReqEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupPrecolonoscopyReqEnumeration.None.id);
					}
					public boolean isEnabled(GroupPrecolonoscopyReqEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupPrecolonoscopyReqEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupPrecolonoscopyReqEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupPrecolonoscopyReqEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupPrecolonoscopyReqEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupPrecolonoscopyReqEnumeration None = new GroupPrecolonoscopyReqEnumeration(-1);
					public static GroupPrecolonoscopyReqEnumeration rdoNoPrecolonoscopyReq = new GroupPrecolonoscopyReqEnumeration(0);
					public static GroupPrecolonoscopyReqEnumeration rdoYesPrecolonoscopyReq = new GroupPrecolonoscopyReqEnumeration(1);
					private GroupPrecolonoscopyReqEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupPrecolonoscopyReqEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupPatientMedicationStopRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper151 = new RuntimeAnchoring(designSize, runtimeSize, 634, 296, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper151.getX(), anchoringHelper151.getY(), anchoringHelper151.getWidth(), "Unknown", -1);
						RuntimeAnchoring anchoringHelper152 = new RuntimeAnchoring(designSize, runtimeSize, 584, 296, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper152.getX(), anchoringHelper152.getY(), anchoringHelper152.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper153 = new RuntimeAnchoring(designSize, runtimeSize, 528, 296, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper153.getX(), anchoringHelper153.getY(), anchoringHelper153.getWidth(), "Yes", -1);
					}
					public void setText(GroupPatientMedicationStopEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupPatientMedicationStopEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupPatientMedicationStopEnumeration.None;
							case 0: return GroupPatientMedicationStopEnumeration.rdoUnknownPatientMedicationStop;
							case 1: return GroupPatientMedicationStopEnumeration.rdoNoPatientMedicationStop;
							case 2: return GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop;
						}
						return null;
					}
					public void setValue(GroupPatientMedicationStopEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupPatientMedicationStopEnumeration.None.id);
					}
					public boolean isEnabled(GroupPatientMedicationStopEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupPatientMedicationStopEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupPatientMedicationStopEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupPatientMedicationStopEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupPatientMedicationStopEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupPatientMedicationStopEnumeration None = new GroupPatientMedicationStopEnumeration(-1);
					public static GroupPatientMedicationStopEnumeration rdoUnknownPatientMedicationStop = new GroupPatientMedicationStopEnumeration(0);
					public static GroupPatientMedicationStopEnumeration rdoNoPatientMedicationStop = new GroupPatientMedicationStopEnumeration(1);
					public static GroupPatientMedicationStopEnumeration rdoYesPatientMedicationStop = new GroupPatientMedicationStopEnumeration(2);
					private GroupPatientMedicationStopEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupPatientMedicationStopEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupPlanedProceduresEndoscopyRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper154 = new RuntimeAnchoring(designSize, runtimeSize, 376, 32, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper154.getX(), anchoringHelper154.getY(), anchoringHelper154.getWidth(), "Months", startTabIndex.intValue() + 29);
						RuntimeAnchoring anchoringHelper155 = new RuntimeAnchoring(designSize, runtimeSize, 312, 32, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper155.getX(), anchoringHelper155.getY(), anchoringHelper155.getWidth(), "Weeks", startTabIndex.intValue() + 28);
						RuntimeAnchoring anchoringHelper156 = new RuntimeAnchoring(designSize, runtimeSize, 256, 32, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper156.getX(), anchoringHelper156.getY(), anchoringHelper156.getWidth(), "Days", startTabIndex.intValue() + 27);
					}
					public void setText(GroupPlanedProceduresEndoscopyEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupPlanedProceduresEndoscopyEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupPlanedProceduresEndoscopyEnumeration.None;
							case 0: return GroupPlanedProceduresEndoscopyEnumeration.MonthsEndoscopy;
							case 1: return GroupPlanedProceduresEndoscopyEnumeration.rdoWeeksEndoscopy;
							case 2: return GroupPlanedProceduresEndoscopyEnumeration.rdoDaysEndoscopy;
						}
						return null;
					}
					public void setValue(GroupPlanedProceduresEndoscopyEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupPlanedProceduresEndoscopyEnumeration.None.id);
					}
					public boolean isEnabled(GroupPlanedProceduresEndoscopyEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupPlanedProceduresEndoscopyEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupPlanedProceduresEndoscopyEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupPlanedProceduresEndoscopyEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupPlanedProceduresEndoscopyEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupPlanedProceduresEndoscopyEnumeration None = new GroupPlanedProceduresEndoscopyEnumeration(-1);
					public static GroupPlanedProceduresEndoscopyEnumeration MonthsEndoscopy = new GroupPlanedProceduresEndoscopyEnumeration(0);
					public static GroupPlanedProceduresEndoscopyEnumeration rdoWeeksEndoscopy = new GroupPlanedProceduresEndoscopyEnumeration(1);
					public static GroupPlanedProceduresEndoscopyEnumeration rdoDaysEndoscopy = new GroupPlanedProceduresEndoscopyEnumeration(2);
					private GroupPlanedProceduresEndoscopyEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupPlanedProceduresEndoscopyEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupKeyTherapeuticEquipmentRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper157 = new RuntimeAnchoring(designSize, runtimeSize, 432, 400, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper157.getX(), anchoringHelper157.getY(), anchoringHelper157.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper158 = new RuntimeAnchoring(designSize, runtimeSize, 376, 400, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper158.getX(), anchoringHelper158.getY(), anchoringHelper158.getWidth(), "Yes", -1);
					}
					public void setText(GroupKeyTherapeuticEquipmentEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupKeyTherapeuticEquipmentEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupKeyTherapeuticEquipmentEnumeration.None;
							case 0: return GroupKeyTherapeuticEquipmentEnumeration.rdoNoKeyTherapeuticEquipment;
							case 1: return GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment;
						}
						return null;
					}
					public void setValue(GroupKeyTherapeuticEquipmentEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupKeyTherapeuticEquipmentEnumeration.None.id);
					}
					public boolean isEnabled(GroupKeyTherapeuticEquipmentEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupKeyTherapeuticEquipmentEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupKeyTherapeuticEquipmentEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupKeyTherapeuticEquipmentEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupKeyTherapeuticEquipmentEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupKeyTherapeuticEquipmentEnumeration None = new GroupKeyTherapeuticEquipmentEnumeration(-1);
					public static GroupKeyTherapeuticEquipmentEnumeration rdoNoKeyTherapeuticEquipment = new GroupKeyTherapeuticEquipmentEnumeration(0);
					public static GroupKeyTherapeuticEquipmentEnumeration rdoYesKeyTherapeuticEquipment = new GroupKeyTherapeuticEquipmentEnumeration(1);
					private GroupKeyTherapeuticEquipmentEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupKeyTherapeuticEquipmentEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupAssessmentOfRenalFunctionRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper159 = new RuntimeAnchoring(designSize, runtimeSize, 552, 368, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper159.getX(), anchoringHelper159.getY(), anchoringHelper159.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper160 = new RuntimeAnchoring(designSize, runtimeSize, 496, 368, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper160.getX(), anchoringHelper160.getY(), anchoringHelper160.getWidth(), "Yes", -1);
					}
					public void setText(GroupAssessmentOfRenalFunctionEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupAssessmentOfRenalFunctionEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupAssessmentOfRenalFunctionEnumeration.None;
							case 0: return GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction;
							case 1: return GroupAssessmentOfRenalFunctionEnumeration.rdoYesAssessmentOfRenalFunction;
						}
						return null;
					}
					public void setValue(GroupAssessmentOfRenalFunctionEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupAssessmentOfRenalFunctionEnumeration.None.id);
					}
					public boolean isEnabled(GroupAssessmentOfRenalFunctionEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupAssessmentOfRenalFunctionEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupAssessmentOfRenalFunctionEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupAssessmentOfRenalFunctionEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupAssessmentOfRenalFunctionEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupAssessmentOfRenalFunctionEnumeration None = new GroupAssessmentOfRenalFunctionEnumeration(-1);
					public static GroupAssessmentOfRenalFunctionEnumeration rdoNoAssessmentOfRenalFunction = new GroupAssessmentOfRenalFunctionEnumeration(0);
					public static GroupAssessmentOfRenalFunctionEnumeration rdoYesAssessmentOfRenalFunction = new GroupAssessmentOfRenalFunctionEnumeration(1);
					private GroupAssessmentOfRenalFunctionEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupAssessmentOfRenalFunctionEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupAnticoagulantReceivingRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper161 = new RuntimeAnchoring(designSize, runtimeSize, 552, 272, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper161.getX(), anchoringHelper161.getY(), anchoringHelper161.getWidth(), "Unknown", -1);
						RuntimeAnchoring anchoringHelper162 = new RuntimeAnchoring(designSize, runtimeSize, 504, 272, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper162.getX(), anchoringHelper162.getY(), anchoringHelper162.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper163 = new RuntimeAnchoring(designSize, runtimeSize, 448, 272, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(2, anchoringHelper163.getX(), anchoringHelper163.getY(), anchoringHelper163.getWidth(), "Yes", -1);
					}
					public void setText(GroupAnticoagulantReceivingEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupAnticoagulantReceivingEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupAnticoagulantReceivingEnumeration.None;
							case 0: return GroupAnticoagulantReceivingEnumeration.rdoUnknownAnticoagulantReceiving;
							case 1: return GroupAnticoagulantReceivingEnumeration.rdoNoAnticoagulantReceiving;
							case 2: return GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving;
						}
						return null;
					}
					public void setValue(GroupAnticoagulantReceivingEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupAnticoagulantReceivingEnumeration.None.id);
					}
					public boolean isEnabled(GroupAnticoagulantReceivingEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupAnticoagulantReceivingEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupAnticoagulantReceivingEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupAnticoagulantReceivingEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupAnticoagulantReceivingEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupAnticoagulantReceivingEnumeration None = new GroupAnticoagulantReceivingEnumeration(-1);
					public static GroupAnticoagulantReceivingEnumeration rdoUnknownAnticoagulantReceiving = new GroupAnticoagulantReceivingEnumeration(0);
					public static GroupAnticoagulantReceivingEnumeration rdoNoAnticoagulantReceiving = new GroupAnticoagulantReceivingEnumeration(1);
					public static GroupAnticoagulantReceivingEnumeration rdoYesAnticoagulantReceiving = new GroupAnticoagulantReceivingEnumeration(2);
					private GroupAnticoagulantReceivingEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupAnticoagulantReceivingEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupProcCarriedByNurseRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper164 = new RuntimeAnchoring(designSize, runtimeSize, 624, 200, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper164.getX(), anchoringHelper164.getY(), anchoringHelper164.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper165 = new RuntimeAnchoring(designSize, runtimeSize, 568, 200, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper165.getX(), anchoringHelper165.getY(), anchoringHelper165.getWidth(), "Yes", -1);
					}
					public void setText(GroupProcCarriedByNurseEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupProcCarriedByNurseEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupProcCarriedByNurseEnumeration.None;
							case 0: return GroupProcCarriedByNurseEnumeration.rdoNoProcCarriedByNurse;
							case 1: return GroupProcCarriedByNurseEnumeration.rdoYesProcCarriedByNurse;
						}
						return null;
					}
					public void setValue(GroupProcCarriedByNurseEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupProcCarriedByNurseEnumeration.None.id);
					}
					public boolean isEnabled(GroupProcCarriedByNurseEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupProcCarriedByNurseEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupProcCarriedByNurseEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupProcCarriedByNurseEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupProcCarriedByNurseEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupProcCarriedByNurseEnumeration None = new GroupProcCarriedByNurseEnumeration(-1);
					public static GroupProcCarriedByNurseEnumeration rdoNoProcCarriedByNurse = new GroupProcCarriedByNurseEnumeration(0);
					public static GroupProcCarriedByNurseEnumeration rdoYesProcCarriedByNurse = new GroupProcCarriedByNurseEnumeration(1);
					private GroupProcCarriedByNurseEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupProcCarriedByNurseEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupGeneralAnaestheticRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper166 = new RuntimeAnchoring(designSize, runtimeSize, 248, 200, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper166.getX(), anchoringHelper166.getY(), anchoringHelper166.getWidth(), "No", -1);
						RuntimeAnchoring anchoringHelper167 = new RuntimeAnchoring(designSize, runtimeSize, 192, 200, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper167.getX(), anchoringHelper167.getY(), anchoringHelper167.getWidth(), "Yes", -1);
					}
					public void setText(GroupGeneralAnaestheticEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupGeneralAnaestheticEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupGeneralAnaestheticEnumeration.None;
							case 0: return GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic;
							case 1: return GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic;
						}
						return null;
					}
					public void setValue(GroupGeneralAnaestheticEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupGeneralAnaestheticEnumeration.None.id);
					}
					public boolean isEnabled(GroupGeneralAnaestheticEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupGeneralAnaestheticEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupGeneralAnaestheticEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupGeneralAnaestheticEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupGeneralAnaestheticEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupGeneralAnaestheticEnumeration None = new GroupGeneralAnaestheticEnumeration(-1);
					public static GroupGeneralAnaestheticEnumeration rdoNoGeneralAnaesthetic = new GroupGeneralAnaestheticEnumeration(0);
					public static GroupGeneralAnaestheticEnumeration rdoYesGeneralAnaesthetic = new GroupGeneralAnaestheticEnumeration(1);
					private GroupGeneralAnaestheticEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupGeneralAnaestheticEnumeration)o).id;
					}
					private int id;
				}
			
				public static class GroupElectiveListReasonEndoscopyRadioButton extends RadioButtonBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
					{
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex ");
						RuntimeAnchoring anchoringHelper168 = new RuntimeAnchoring(designSize, runtimeSize, 280, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(0, anchoringHelper168.getX(), anchoringHelper168.getY(), anchoringHelper168.getWidth(), "Diagnostic", -1);
						RuntimeAnchoring anchoringHelper169 = new RuntimeAnchoring(designSize, runtimeSize, 192, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						control.addButton(1, anchoringHelper169.getX(), anchoringHelper169.getY(), anchoringHelper169.getWidth(), "Treatment", -1);
					}
					public void setText(GroupElectiveListReasonEndoscopyEnumeration option, String value)
					{
						if(option != null && option.id >= 0 && value != null)
							control.setText(option.id, value);
					}
					public GroupElectiveListReasonEndoscopyEnumeration getValue()
					{
						switch (super.control.getValue())
						{
							case -1: return GroupElectiveListReasonEndoscopyEnumeration.None;
							case 0: return GroupElectiveListReasonEndoscopyEnumeration.rdoDiagnosticEndoscopy;
							case 1: return GroupElectiveListReasonEndoscopyEnumeration.rdoTreatmentEndoscopy;
						}
						return null;
					}
					public void setValue(GroupElectiveListReasonEndoscopyEnumeration value)
					{
						if(value != null)
							super.control.setValue(value.id);
						else
							super.control.setValue(GroupElectiveListReasonEndoscopyEnumeration.None.id);
					}
					public boolean isEnabled(GroupElectiveListReasonEndoscopyEnumeration option)
					{
						return super.control.isEnabled(option.id);
					}
					public void setEnabled(GroupElectiveListReasonEndoscopyEnumeration option, boolean value)
					{
						super.control.setEnabled(option.id, value);
					}
					public boolean isVisible(GroupElectiveListReasonEndoscopyEnumeration option)
					{
						return super.control.isVisible(option.id);
					}
					public void setVisible(GroupElectiveListReasonEndoscopyEnumeration option, boolean value)
					{
						super.control.setVisible(option.id, value);
					}
					public void setVisible(boolean value)
					{
						super.control.setVisible(value);
					}
					public void setEnabled(boolean value)
					{
						super.control.setEnabled(value);
					}
				}
				public static class GroupElectiveListReasonEndoscopyEnumeration implements java.io.Serializable
				{
					private static final long serialVersionUID = 1L;
					public static GroupElectiveListReasonEndoscopyEnumeration None = new GroupElectiveListReasonEndoscopyEnumeration(-1);
					public static GroupElectiveListReasonEndoscopyEnumeration rdoDiagnosticEndoscopy = new GroupElectiveListReasonEndoscopyEnumeration(0);
					public static GroupElectiveListReasonEndoscopyEnumeration rdoTreatmentEndoscopy = new GroupElectiveListReasonEndoscopyEnumeration(1);
					private GroupElectiveListReasonEndoscopyEnumeration(int id)
					{
						this.id = id;
					}
					public boolean equals(Object o)
					{
						return this.id == ((GroupElectiveListReasonEndoscopyEnumeration)o).id;
					}
					private int id;
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper170 = new RuntimeAnchoring(designSize, runtimeSize, 192, 431, 624, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_ccResponsibleHCPEndoscopyForm = loader.loadComponent(102256, appForm, startControlID * 10 + 4000, anchoringHelper170.getSize(), instance1, startTabIndex.intValue() + 75, skipContextValidation);
					//ims.framework.Control m_ccResponsibleHCPEndoscopyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1136), new Integer(192), new Integer(431), new Integer(624), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 75), m_ccResponsibleHCPEndoscopyForm, instance1 } );
					ims.framework.Control m_ccResponsibleHCPEndoscopyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1137),  new Integer(anchoringHelper170.getX()), new Integer(anchoringHelper170.getY()), new Integer(anchoringHelper170.getWidth()), new Integer(anchoringHelper170.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 75), m_ccResponsibleHCPEndoscopyForm, instance1, Boolean.FALSE } );
					super.addControl(m_ccResponsibleHCPEndoscopyControl);
					Menu[] menus1 = m_ccResponsibleHCPEndoscopyForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper171 = new RuntimeAnchoring(designSize, runtimeSize, 8, 230, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1138), new Integer(anchoringHelper171.getX()), new Integer(anchoringHelper171.getY()), new Integer(anchoringHelper171.getWidth()), new Integer(anchoringHelper171.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "assessment required?:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper172 = new RuntimeAnchoring(designSize, runtimeSize, 5, 216, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1139), new Integer(anchoringHelper172.getX()), new Integer(anchoringHelper172.getY()), new Integer(anchoringHelper172.getWidth()), new Integer(anchoringHelper172.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Is pre-colonoscopy ", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper173 = new RuntimeAnchoring(designSize, runtimeSize, 8, 433, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1140), new Integer(anchoringHelper173.getX()), new Integer(anchoringHelper173.getY()), new Integer(anchoringHelper173.getWidth()), new Integer(anchoringHelper173.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper174 = new RuntimeAnchoring(designSize, runtimeSize, 192, 554, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1141), new Integer(anchoringHelper174.getX()), new Integer(anchoringHelper174.getY()), new Integer(anchoringHelper174.getWidth()), new Integer(anchoringHelper174.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper175 = new RuntimeAnchoring(designSize, runtimeSize, 8, 554, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1142), new Integer(anchoringHelper175.getX()), new Integer(anchoringHelper175.getY()), new Integer(anchoringHelper175.getWidth()), new Integer(anchoringHelper175.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Vetting Endoscopist:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper176 = new RuntimeAnchoring(designSize, runtimeSize, 476, 32, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1143), new Integer(anchoringHelper176.getX()), new Integer(anchoringHelper176.getY()), new Integer(anchoringHelper176.getWidth()), new Integer(anchoringHelper176.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Planned Date:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper177 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1144), new Integer(anchoringHelper177.getX()), new Integer(anchoringHelper177.getY()), new Integer(anchoringHelper177.getWidth()), new Integer(anchoringHelper177.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Procedure In:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper178 = new RuntimeAnchoring(designSize, runtimeSize, 8, 502, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1145), new Integer(anchoringHelper178.getX()), new Integer(anchoringHelper178.getY()), new Integer(anchoringHelper178.getWidth()), new Integer(anchoringHelper178.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Special Requirements:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper179 = new RuntimeAnchoring(designSize, runtimeSize, 448, 478, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1146), new Integer(anchoringHelper179.getX()), new Integer(anchoringHelper179.getY()), new Integer(anchoringHelper179.getWidth()), new Integer(anchoringHelper179.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper180 = new RuntimeAnchoring(designSize, runtimeSize, 8, 478, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1147), new Integer(anchoringHelper180.getX()), new Integer(anchoringHelper180.getY()), new Integer(anchoringHelper180.getWidth()), new Integer(anchoringHelper180.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interpreter Required:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper181 = new RuntimeAnchoring(designSize, runtimeSize, 8, 248, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1148), new Integer(anchoringHelper181.getX()), new Integer(anchoringHelper181.getY()), new Integer(anchoringHelper181.getWidth()), new Integer(anchoringHelper181.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-Assessment Required? ", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper182 = new RuntimeAnchoring(designSize, runtimeSize, 194, 105, 263, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1149), new Integer(anchoringHelper182.getX()), new Integer(anchoringHelper182.getY()), new Integer(anchoringHelper182.getWidth()), new Integer(anchoringHelper182.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Please complete a paper request for this procedure.", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper183 = new RuntimeAnchoring(designSize, runtimeSize, 8, 525, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1150), new Integer(anchoringHelper183.getX()), new Integer(anchoringHelper183.getY()), new Integer(anchoringHelper183.getWidth()), new Integer(anchoringHelper183.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper184 = new RuntimeAnchoring(designSize, runtimeSize, 488, 400, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1151), new Integer(anchoringHelper184.getX()), new Integer(anchoringHelper184.getY()), new Integer(anchoringHelper184.getWidth()), new Integer(anchoringHelper184.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper185 = new RuntimeAnchoring(designSize, runtimeSize, 8, 408, 359, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1152), new Integer(anchoringHelper185.getX()), new Integer(anchoringHelper185.getY()), new Integer(anchoringHelper185.getWidth()), new Integer(anchoringHelper185.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "cognitive or physical capacity issues not covered by this form?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper186 = new RuntimeAnchoring(designSize, runtimeSize, 8, 392, 308, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1153), new Integer(anchoringHelper186.getX()), new Integer(anchoringHelper186.getY()), new Integer(anchoringHelper186.getWidth()), new Integer(anchoringHelper186.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Are there key therapeutic equipment and / or patient", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper187 = new RuntimeAnchoring(designSize, runtimeSize, 600, 368, 209, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1154), new Integer(anchoringHelper187.getX()), new Integer(anchoringHelper187.getY()), new Integer(anchoringHelper187.getWidth()), new Integer(anchoringHelper187.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Please request U&Es, Creatinine and eGFR", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper188 = new RuntimeAnchoring(designSize, runtimeSize, 8, 368, 411, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1155), new Integer(anchoringHelper188.getX()), new Integer(anchoringHelper188.getY()), new Integer(anchoringHelper188.getWidth()), new Integer(anchoringHelper188.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Did patient have an assessment of Renal Function in the last 3 months?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper189 = new RuntimeAnchoring(designSize, runtimeSize, 8, 347, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1156), new Integer(anchoringHelper189.getX()), new Integer(anchoringHelper189.getY()), new Integer(anchoringHelper189.getWidth()), new Integer(anchoringHelper189.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pacemaker / Defibrillator?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper190 = new RuntimeAnchoring(designSize, runtimeSize, 8, 320, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1157), new Integer(anchoringHelper190.getX()), new Integer(anchoringHelper190.getY()), new Integer(anchoringHelper190.getWidth()), new Integer(anchoringHelper190.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Drug Information:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper191 = new RuntimeAnchoring(designSize, runtimeSize, 8, 375, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1158), new Integer(anchoringHelper191.getX()), new Integer(anchoringHelper191.getY()), new Integer(anchoringHelper191.getWidth()), new Integer(anchoringHelper191.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper192 = new RuntimeAnchoring(designSize, runtimeSize, 8, 296, 512, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1159), new Integer(anchoringHelper192.getX()), new Integer(anchoringHelper192.getY()), new Integer(anchoringHelper192.getWidth()), new Integer(anchoringHelper192.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is this patient on any medication that should be stopped prior to oral bowel preparation?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper193 = new RuntimeAnchoring(designSize, runtimeSize, 8, 272, 416, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1160), new Integer(anchoringHelper193.getX()), new Integer(anchoringHelper193.getY()), new Integer(anchoringHelper193.getWidth()), new Integer(anchoringHelper193.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is this patient currently receiving anticoagulant / antiplatelet therapy? :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper194 = new RuntimeAnchoring(designSize, runtimeSize, 312, 224, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1161), new Integer(anchoringHelper194.getX()), new Integer(anchoringHelper194.getY()), new Integer(anchoringHelper194.getWidth()), new Integer(anchoringHelper194.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper195 = new RuntimeAnchoring(designSize, runtimeSize, 312, 200, 245, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1162), new Integer(anchoringHelper195.getX()), new Integer(anchoringHelper195.getY()), new Integer(anchoringHelper195.getWidth()), new Integer(anchoringHelper195.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Can the procedure carried out by a Nurse?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper196 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1163), new Integer(anchoringHelper196.getX()), new Integer(anchoringHelper196.getY()), new Integer(anchoringHelper196.getWidth()), new Integer(anchoringHelper196.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "General Anaesthetic?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper197 = new RuntimeAnchoring(designSize, runtimeSize, 521, 176, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1164), new Integer(anchoringHelper197.getX()), new Integer(anchoringHelper197.getY()), new Integer(anchoringHelper197.getWidth()), new Integer(anchoringHelper197.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minutes", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper198 = new RuntimeAnchoring(designSize, runtimeSize, 312, 176, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1165), new Integer(anchoringHelper198.getX()), new Integer(anchoringHelper198.getY()), new Integer(anchoringHelper198.getWidth()), new Integer(anchoringHelper198.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Length:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper199 = new RuntimeAnchoring(designSize, runtimeSize, 8, 176, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1166), new Integer(anchoringHelper199.getX()), new Integer(anchoringHelper199.getY()), new Integer(anchoringHelper199.getWidth()), new Integer(anchoringHelper199.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Points:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper200 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1167), new Integer(anchoringHelper200.getX()), new Integer(anchoringHelper200.getY()), new Integer(anchoringHelper200.getWidth()), new Integer(anchoringHelper200.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Suspected GI Bleed?", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper201 = new RuntimeAnchoring(designSize, runtimeSize, 8, 83, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1168), new Integer(anchoringHelper201.getX()), new Integer(anchoringHelper201.getY()), new Integer(anchoringHelper201.getWidth()), new Integer(anchoringHelper201.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper202 = new RuntimeAnchoring(designSize, runtimeSize, 8, 130, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1169), new Integer(anchoringHelper202.getX()), new Integer(anchoringHelper202.getY()), new Integer(anchoringHelper202.getWidth()), new Integer(anchoringHelper202.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper203 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1170), new Integer(anchoringHelper203.getX()), new Integer(anchoringHelper203.getY()), new Integer(anchoringHelper203.getWidth()), new Integer(anchoringHelper203.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Procedure:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper204 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1171), new Integer(anchoringHelper204.getX()), new Integer(anchoringHelper204.getY()), new Integer(anchoringHelper204.getWidth()), new Integer(anchoringHelper204.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper205 = new RuntimeAnchoring(designSize, runtimeSize, 8, 455, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1172), new Integer(anchoringHelper205.getX()), new Integer(anchoringHelper205.getY()), new Integer(anchoringHelper205.getWidth()), new Integer(anchoringHelper205.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper206 = new RuntimeAnchoring(designSize, runtimeSize, 224, 500, 576, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1173), new Integer(anchoringHelper206.getX()), new Integer(anchoringHelper206.getY()), new Integer(anchoringHelper206.getWidth()), new Integer(anchoringHelper206.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper207 = new RuntimeAnchoring(designSize, runtimeSize, 192, 523, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1174), new Integer(anchoringHelper207.getX()), new Integer(anchoringHelper207.getY()), new Integer(anchoringHelper207.getWidth()), new Integer(anchoringHelper207.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper208 = new RuntimeAnchoring(designSize, runtimeSize, 552, 400, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1175), new Integer(anchoringHelper208.getX()), new Integer(anchoringHelper208.getY()), new Integer(anchoringHelper208.getWidth()), new Integer(anchoringHelper208.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper209 = new RuntimeAnchoring(designSize, runtimeSize, 192, 320, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1176), new Integer(anchoringHelper209.getX()), new Integer(anchoringHelper209.getY()), new Integer(anchoringHelper209.getWidth()), new Integer(anchoringHelper209.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper210 = new RuntimeAnchoring(designSize, runtimeSize, 368, 224, 432, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1177), new Integer(anchoringHelper210.getX()), new Integer(anchoringHelper210.getY()), new Integer(anchoringHelper210.getWidth()), new Integer(anchoringHelper210.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper211 = new RuntimeAnchoring(designSize, runtimeSize, 664, 198, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1178), new Integer(anchoringHelper211.getX()), new Integer(anchoringHelper211.getY()), new Integer(anchoringHelper211.getWidth()), new Integer(anchoringHelper211.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper212 = new RuntimeAnchoring(designSize, runtimeSize, 288, 198, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1179), new Integer(anchoringHelper212.getX()), new Integer(anchoringHelper212.getY()), new Integer(anchoringHelper212.getWidth()), new Integer(anchoringHelper212.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper213 = new RuntimeAnchoring(designSize, runtimeSize, 192, 81, 601, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1180), new Integer(anchoringHelper213.getX()), new Integer(anchoringHelper213.getY()), new Integer(anchoringHelper213.getWidth()), new Integer(anchoringHelper213.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper214 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1181), new Integer(anchoringHelper214.getX()), new Integer(anchoringHelper214.getY()), new Integer(anchoringHelper214.getWidth()), new Integer(anchoringHelper214.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// Date Controls
					RuntimeAnchoring anchoringHelper215 = new RuntimeAnchoring(designSize, runtimeSize, 624, 30, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1182), new Integer(anchoringHelper215.getX()), new Integer(anchoringHelper215.getY()), new Integer(anchoringHelper215.getWidth()), new Integer(anchoringHelper215.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper216 = new RuntimeAnchoring(designSize, runtimeSize, 608, 476, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbTransportRequiredEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1183), new Integer(anchoringHelper216.getX()), new Integer(anchoringHelper216.getY()), new Integer(anchoringHelper216.getWidth()), new Integer(anchoringHelper216.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbTransportRequiredEndoscopyTemp);
					cmbTransportRequiredEndoscopyComboBox cmbTransportRequiredEndoscopy = (cmbTransportRequiredEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportRequiredEndoscopyComboBox.class, m_cmbTransportRequiredEndoscopyTemp);
					super.addComboBox(cmbTransportRequiredEndoscopy);
					RuntimeAnchoring anchoringHelper217 = new RuntimeAnchoring(designSize, runtimeSize, 224, 476, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbInterpreterRequiredEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1184), new Integer(anchoringHelper217.getX()), new Integer(anchoringHelper217.getY()), new Integer(anchoringHelper217.getWidth()), new Integer(anchoringHelper217.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbInterpreterRequiredEndoscopyTemp);
					cmbInterpreterRequiredEndoscopyComboBox cmbInterpreterRequiredEndoscopy = (cmbInterpreterRequiredEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInterpreterRequiredEndoscopyComboBox.class, m_cmbInterpreterRequiredEndoscopyTemp);
					super.addComboBox(cmbInterpreterRequiredEndoscopy);
					RuntimeAnchoring anchoringHelper218 = new RuntimeAnchoring(designSize, runtimeSize, 192, 128, 297, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbUrgencyEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1185), new Integer(anchoringHelper218.getX()), new Integer(anchoringHelper218.getY()), new Integer(anchoringHelper218.getWidth()), new Integer(anchoringHelper218.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbUrgencyEndoscopyTemp);
					cmbUrgencyEndoscopyComboBox cmbUrgencyEndoscopy = (cmbUrgencyEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgencyEndoscopyComboBox.class, m_cmbUrgencyEndoscopyTemp);
					super.addComboBox(cmbUrgencyEndoscopy);
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper219 = new RuntimeAnchoring(designSize, runtimeSize, 192, 56, 601, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_qmbProcedureEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1186), new Integer(anchoringHelper219.getX()), new Integer(anchoringHelper219.getY()), new Integer(anchoringHelper219.getWidth()), new Integer(anchoringHelper219.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbProcedureEndoscopyTemp);
					qmbProcedureEndoscopyComboBox qmbProcedureEndoscopy = (qmbProcedureEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureEndoscopyComboBox.class, m_qmbProcedureEndoscopyTemp);
					super.addComboBox(qmbProcedureEndoscopy);
					RuntimeAnchoring anchoringHelper220 = new RuntimeAnchoring(designSize, runtimeSize, 192, 453, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_qmbElectiveListEndoscopyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1187), new Integer(anchoringHelper220.getX()), new Integer(anchoringHelper220.getY()), new Integer(anchoringHelper220.getWidth()), new Integer(anchoringHelper220.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbElectiveListEndoscopyTemp);
					qmbElectiveListEndoscopyComboBox qmbElectiveListEndoscopy = (qmbElectiveListEndoscopyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListEndoscopyComboBox.class, m_qmbElectiveListEndoscopyTemp);
					super.addComboBox(qmbElectiveListEndoscopy);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper221 = new RuntimeAnchoring(designSize, runtimeSize, 192, 502, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1188), new Integer(anchoringHelper221.getX()), new Integer(anchoringHelper221.getY()), new Integer(anchoringHelper221.getWidth()), new Integer(anchoringHelper221.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper222 = new RuntimeAnchoring(designSize, runtimeSize, 576, 478, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1189), new Integer(anchoringHelper222.getX()), new Integer(anchoringHelper222.getY()), new Integer(anchoringHelper222.getWidth()), new Integer(anchoringHelper222.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper223 = new RuntimeAnchoring(designSize, runtimeSize, 192, 478, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1190), new Integer(anchoringHelper223.getX()), new Integer(anchoringHelper223.getY()), new Integer(anchoringHelper223.getWidth()), new Integer(anchoringHelper223.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper224 = new RuntimeAnchoring(designSize, runtimeSize, 192, 248, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1191), new Integer(anchoringHelper224.getX()), new Integer(anchoringHelper224.getY()), new Integer(anchoringHelper224.getWidth()), new Integer(anchoringHelper224.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper225 = new RuntimeAnchoring(designSize, runtimeSize, 192, 347, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1192), new Integer(anchoringHelper225.getX()), new Integer(anchoringHelper225.getY()), new Integer(anchoringHelper225.getWidth()), new Integer(anchoringHelper225.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper226 = new RuntimeAnchoring(designSize, runtimeSize, 632, 176, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1193), new Integer(anchoringHelper226.getX()), new Integer(anchoringHelper226.getY()), new Integer(anchoringHelper226.getWidth()), new Integer(anchoringHelper226.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Suitable for Training", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper227 = new RuntimeAnchoring(designSize, runtimeSize, 192, 152, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1194), new Integer(anchoringHelper227.getX()), new Integer(anchoringHelper227.getY()), new Integer(anchoringHelper227.getWidth()), new Integer(anchoringHelper227.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper228 = new RuntimeAnchoring(designSize, runtimeSize, 192, 30, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1195), new Integer(anchoringHelper228.getX()), new Integer(anchoringHelper228.getY()), new Integer(anchoringHelper228.getWidth()), new Integer(anchoringHelper228.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
					RuntimeAnchoring anchoringHelper229 = new RuntimeAnchoring(designSize, runtimeSize, 192, 174, 81, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1196), new Integer(anchoringHelper229.getX()), new Integer(anchoringHelper229.getY()), new Integer(anchoringHelper229.getWidth()), new Integer(anchoringHelper229.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper230 = new RuntimeAnchoring(designSize, runtimeSize, 424, 174, 81, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1197), new Integer(anchoringHelper230.getX()), new Integer(anchoringHelper230.getY()), new Integer(anchoringHelper230.getWidth()), new Integer(anchoringHelper230.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			
					// RadioButton Controls
					RadioButton tmpGroupPrecolonoscopyReq = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1198), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpGroupPrecolonoscopyReq);
					GroupPrecolonoscopyReqRadioButton GroupPrecolonoscopyReq = (GroupPrecolonoscopyReqRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPrecolonoscopyReqRadioButton.class, tmpGroupPrecolonoscopyReq);
					GroupPrecolonoscopyReq.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupPrecolonoscopyReq);
					RadioButton tmpGroupPatientMedicationStop = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1199), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupPatientMedicationStop);
					GroupPatientMedicationStopRadioButton GroupPatientMedicationStop = (GroupPatientMedicationStopRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPatientMedicationStopRadioButton.class, tmpGroupPatientMedicationStop);
					GroupPatientMedicationStop.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupPatientMedicationStop);
					RadioButton tmpGroupPlanedProceduresEndoscopy = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1200), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupPlanedProceduresEndoscopy);
					GroupPlanedProceduresEndoscopyRadioButton GroupPlanedProceduresEndoscopy = (GroupPlanedProceduresEndoscopyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPlanedProceduresEndoscopyRadioButton.class, tmpGroupPlanedProceduresEndoscopy);
					GroupPlanedProceduresEndoscopy.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupPlanedProceduresEndoscopy);
					RadioButton tmpGroupKeyTherapeuticEquipment = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1201), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpGroupKeyTherapeuticEquipment);
					GroupKeyTherapeuticEquipmentRadioButton GroupKeyTherapeuticEquipment = (GroupKeyTherapeuticEquipmentRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupKeyTherapeuticEquipmentRadioButton.class, tmpGroupKeyTherapeuticEquipment);
					GroupKeyTherapeuticEquipment.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupKeyTherapeuticEquipment);
					RadioButton tmpGroupAssessmentOfRenalFunction = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1202), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupAssessmentOfRenalFunction);
					GroupAssessmentOfRenalFunctionRadioButton GroupAssessmentOfRenalFunction = (GroupAssessmentOfRenalFunctionRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAssessmentOfRenalFunctionRadioButton.class, tmpGroupAssessmentOfRenalFunction);
					GroupAssessmentOfRenalFunction.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupAssessmentOfRenalFunction);
					RadioButton tmpGroupAnticoagulantReceiving = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1203), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupAnticoagulantReceiving);
					GroupAnticoagulantReceivingRadioButton GroupAnticoagulantReceiving = (GroupAnticoagulantReceivingRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAnticoagulantReceivingRadioButton.class, tmpGroupAnticoagulantReceiving);
					GroupAnticoagulantReceiving.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupAnticoagulantReceiving);
					RadioButton tmpGroupProcCarriedByNurse = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1204), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpGroupProcCarriedByNurse);
					GroupProcCarriedByNurseRadioButton GroupProcCarriedByNurse = (GroupProcCarriedByNurseRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupProcCarriedByNurseRadioButton.class, tmpGroupProcCarriedByNurse);
					GroupProcCarriedByNurse.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupProcCarriedByNurse);
					RadioButton tmpGroupGeneralAnaesthetic = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1205), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
					super.addControl(tmpGroupGeneralAnaesthetic);
					GroupGeneralAnaestheticRadioButton GroupGeneralAnaesthetic = (GroupGeneralAnaestheticRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupGeneralAnaestheticRadioButton.class, tmpGroupGeneralAnaesthetic);
					GroupGeneralAnaesthetic.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupGeneralAnaesthetic);
					RadioButton tmpGroupElectiveListReasonEndoscopy = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1206), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
					super.addControl(tmpGroupElectiveListReasonEndoscopy);
					GroupElectiveListReasonEndoscopyRadioButton GroupElectiveListReasonEndoscopy = (GroupElectiveListReasonEndoscopyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListReasonEndoscopyRadioButton.class, tmpGroupElectiveListReasonEndoscopy);
					GroupElectiveListReasonEndoscopy.setContext(startTabIndex, designSize, runtimeSize);
					super.addRadioButton(GroupElectiveListReasonEndoscopy);
				}
	
				public ims.core.forms.mosquery.IComponent ccResponsibleHCPEndoscopy()
				{
					return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
				}
				public void setccResponsibleHCPEndoscopyValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
				}
				public void setccResponsibleHCPEndoscopyVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setVisible(value);
				}
				public boolean isccResponsibleHCPEndoscopyVisible()
				{
					return ((ims.framework.Control)super.getControl(0)).isVisible();
				}
				public void setccResponsibleHCPEndoscopyEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setEnabled(value);
				}
				public boolean isccResponsibleHCPEndoscopyEnabled()
				{
					return ((ims.framework.Control)super.getControl(0)).isEnabled();
				}
				public Label lblIsPreColonoscopyRequired2()
				{
					return (Label)super.getControl(1);
				}
				public Label lblIsPreColonoscopyRequired1()
				{
					return (Label)super.getControl(2);
				}
				public Label lblValueForVettingEndoscopist()
				{
					return (Label)super.getControl(4);
				}
				public Label lblVettingEndoscopist()
				{
					return (Label)super.getControl(5);
				}
				public Label lblRequestedPlannedEndoscopy()
				{
					return (Label)super.getControl(6);
				}
				public Label lblPlannedProcedureInEndoscopy()
				{
					return (Label)super.getControl(7);
				}
				public Label lbl67()
				{
					return (Label)super.getControl(9);
				}
				public Label lblPreassessmentRequiredEndoscopy()
				{
					return (Label)super.getControl(11);
				}
				public Label lblCompleteAPaper()
				{
					return (Label)super.getControl(12);
				}
				public Label lblKeyTherapeuticEquipmentComment()
				{
					return (Label)super.getControl(14);
				}
				public Label lblKeyTherapeuticEquipment1()
				{
					return (Label)super.getControl(15);
				}
				public Label lblKeyTherapeuticEquipment()
				{
					return (Label)super.getControl(16);
				}
				public Label lblPleaserequestUAndEsCreatinineandeGFR()
				{
					return (Label)super.getControl(17);
				}
				public Label lblAssessmentOfRenalFunction()
				{
					return (Label)super.getControl(18);
				}
				public Label lblPacemakerDefibrilatorEndoscopy()
				{
					return (Label)super.getControl(19);
				}
				public Label lblDrugInformation()
				{
					return (Label)super.getControl(20);
				}
				public Label lblPatientMedicationStop()
				{
					return (Label)super.getControl(22);
				}
				public Label lblAnticoagulantReceiving()
				{
					return (Label)super.getControl(23);
				}
				public Label lblDetailsEndoscopy()
				{
					return (Label)super.getControl(24);
				}
				public Label lblCanProcedureCarriedoutByNurse()
				{
					return (Label)super.getControl(25);
				}
				public Label lblGeneralAnaesthetic()
				{
					return (Label)super.getControl(26);
				}
				public Label lblMinutesEndoscopy()
				{
					return (Label)super.getControl(27);
				}
				public Label lblProcedureLengthEndoscopy()
				{
					return (Label)super.getControl(28);
				}
				public Label lblPoints()
				{
					return (Label)super.getControl(29);
				}
				public Label lblSuspectedGIBleed()
				{
					return (Label)super.getControl(30);
				}
				public Label lbl89()
				{
					return (Label)super.getControl(31);
				}
				public Label lblUrgencyEndoscopy()
				{
					return (Label)super.getControl(32);
				}
				public Label lbl91()
				{
					return (Label)super.getControl(33);
				}
				public Label lbl92()
				{
					return (Label)super.getControl(34);
				}
				public Label lblElectiveListEndoscopyTab()
				{
					return (Label)super.getControl(35);
				}
				public TextBox txtSpecialRequiredEndoscopy()
				{
					return (TextBox)super.getControl(36);
				}
				public TextBox txtCommentEndoscopy()
				{
					return (TextBox)super.getControl(37);
				}
				public TextBox txtKeyTherapeuticEquipment()
				{
					return (TextBox)super.getControl(38);
				}
				public TextBox txtDrugInformation()
				{
					return (TextBox)super.getControl(39);
				}
				public TextBox txtDetailsEndoscopy()
				{
					return (TextBox)super.getControl(40);
				}
				public TextBox txtdummyProcCarriedByNurse()
				{
					return (TextBox)super.getControl(41);
				}
				public TextBox txtdummyGeneralAnaesthetic()
				{
					return (TextBox)super.getControl(42);
				}
				public TextBox txtEndoscopyDetails()
				{
					return (TextBox)super.getControl(43);
				}
				public TextBox txtdummyElectiveReasonEndoscopy()
				{
					return (TextBox)super.getControl(44);
				}
				public DateControl dteRequestedPlannedEndoscopy()
				{
					return (DateControl)super.getControl(45);
				}
				public cmbTransportRequiredEndoscopyComboBox cmbTransportRequiredEndoscopy()
				{
					return (cmbTransportRequiredEndoscopyComboBox)super.getComboBox(0);
				}
				public cmbInterpreterRequiredEndoscopyComboBox cmbInterpreterRequiredEndoscopy()
				{
					return (cmbInterpreterRequiredEndoscopyComboBox)super.getComboBox(1);
				}
				public cmbUrgencyEndoscopyComboBox cmbUrgencyEndoscopy()
				{
					return (cmbUrgencyEndoscopyComboBox)super.getComboBox(2);
				}
				public qmbProcedureEndoscopyComboBox qmbProcedureEndoscopy()
				{
					return (qmbProcedureEndoscopyComboBox)super.getComboBox(3);
				}
				public qmbElectiveListEndoscopyComboBox qmbElectiveListEndoscopy()
				{
					return (qmbElectiveListEndoscopyComboBox)super.getComboBox(4);
				}
				public CheckBox chkSpecialRequirementsEndoscopy()
				{
					return (CheckBox)super.getControl(51);
				}
				public CheckBox chkTransportRequiredEndoscopy()
				{
					return (CheckBox)super.getControl(52);
				}
				public CheckBox chkInterpreterRequiredEndoscopy()
				{
					return (CheckBox)super.getControl(53);
				}
				public CheckBox chkPreassessmentRequiredEndoscopy()
				{
					return (CheckBox)super.getControl(54);
				}
				public CheckBox chkPacemakerDefibrilatorEndoscopy()
				{
					return (CheckBox)super.getControl(55);
				}
				public CheckBox chkSuitableforCaseStudy()
				{
					return (CheckBox)super.getControl(56);
				}
				public CheckBox chkSuspectedGIBleed()
				{
					return (CheckBox)super.getControl(57);
				}
				public IntBox intPlannedProcedureInEndoscopy()
				{
					return (IntBox)super.getControl(58);
				}
				public IntBox intPoints()
				{
					return (IntBox)super.getControl(59);
				}
				public IntBox intProcedureLengthEndoscopy()
				{
					return (IntBox)super.getControl(60);
				}
				public GroupPrecolonoscopyReqRadioButton GroupPrecolonoscopyReq()
				{
					return (GroupPrecolonoscopyReqRadioButton)super.getRadioButton(0);
				}
				public GroupPatientMedicationStopRadioButton GroupPatientMedicationStop()
				{
					return (GroupPatientMedicationStopRadioButton)super.getRadioButton(1);
				}
				public GroupPlanedProceduresEndoscopyRadioButton GroupPlanedProceduresEndoscopy()
				{
					return (GroupPlanedProceduresEndoscopyRadioButton)super.getRadioButton(2);
				}
				public GroupKeyTherapeuticEquipmentRadioButton GroupKeyTherapeuticEquipment()
				{
					return (GroupKeyTherapeuticEquipmentRadioButton)super.getRadioButton(3);
				}
				public GroupAssessmentOfRenalFunctionRadioButton GroupAssessmentOfRenalFunction()
				{
					return (GroupAssessmentOfRenalFunctionRadioButton)super.getRadioButton(4);
				}
				public GroupAnticoagulantReceivingRadioButton GroupAnticoagulantReceiving()
				{
					return (GroupAnticoagulantReceivingRadioButton)super.getRadioButton(5);
				}
				public GroupProcCarriedByNurseRadioButton GroupProcCarriedByNurse()
				{
					return (GroupProcCarriedByNurseRadioButton)super.getRadioButton(6);
				}
				public GroupGeneralAnaestheticRadioButton GroupGeneralAnaesthetic()
				{
					return (GroupGeneralAnaestheticRadioButton)super.getRadioButton(7);
				}
				public GroupElectiveListReasonEndoscopyRadioButton GroupElectiveListReasonEndoscopy()
				{
					return (GroupElectiveListReasonEndoscopyRadioButton)super.getRadioButton(8);
				}
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper231 = new RuntimeAnchoring(designSize, runtimeSize, 0, 144, 824, 616, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabPageSurgical = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1207), new Integer(anchoringHelper231.getX()), new Integer(anchoringHelper231.getY()), new Integer(anchoringHelper231.getWidth()), new Integer(anchoringHelper231.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT," ", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabPageSurgicalContainer m_tabPageSurgicalContainer = (tabPageSurgicalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSurgicalContainer.class, m_tabPageSurgical, factory);
				super.addContainer(m_tabPageSurgical, m_tabPageSurgicalContainer);
				ims.framework.utils.SizeInfo m_tabPageSurgicalDesignSize = new ims.framework.utils.SizeInfo(824, 616);
				ims.framework.utils.SizeInfo m_tabPageSurgicalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper231.getWidth(), anchoringHelper231.getHeight());
				m_tabPageSurgicalContainer.setContext(form, appForm, m_tabPageSurgical, loader, form_images_local, contextMenus, startControlID, m_tabPageSurgicalDesignSize, m_tabPageSurgicalRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper232 = new RuntimeAnchoring(designSize, runtimeSize, 0, 144, 824, 616, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabPageMedical = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1208), new Integer(anchoringHelper232.getX()), new Integer(anchoringHelper232.getY()), new Integer(anchoringHelper232.getWidth()), new Integer(anchoringHelper232.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT," ", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabPageMedicalContainer m_tabPageMedicalContainer = (tabPageMedicalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageMedicalContainer.class, m_tabPageMedical, factory);
				super.addContainer(m_tabPageMedical, m_tabPageMedicalContainer);
				ims.framework.utils.SizeInfo m_tabPageMedicalDesignSize = new ims.framework.utils.SizeInfo(824, 616);
				ims.framework.utils.SizeInfo m_tabPageMedicalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper232.getWidth(), anchoringHelper232.getHeight());
				m_tabPageMedicalContainer.setContext(form, appForm, m_tabPageMedical, loader, form_images_local, contextMenus, startControlID, m_tabPageMedicalDesignSize, m_tabPageMedicalRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper233 = new RuntimeAnchoring(designSize, runtimeSize, 0, 144, 824, 616, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabPageEndoscopy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1209), new Integer(anchoringHelper233.getX()), new Integer(anchoringHelper233.getY()), new Integer(anchoringHelper233.getWidth()), new Integer(anchoringHelper233.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT," ", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabPageEndoscopyContainer m_tabPageEndoscopyContainer = (tabPageEndoscopyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageEndoscopyContainer.class, m_tabPageEndoscopy, factory);
				super.addContainer(m_tabPageEndoscopy, m_tabPageEndoscopyContainer);
				ims.framework.utils.SizeInfo m_tabPageEndoscopyDesignSize = new ims.framework.utils.SizeInfo(824, 616);
				ims.framework.utils.SizeInfo m_tabPageEndoscopyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper233.getWidth(), anchoringHelper233.getHeight());
				m_tabPageEndoscopyContainer.setContext(form, appForm, m_tabPageEndoscopy, loader, form_images_local, contextMenus, startControlID, m_tabPageEndoscopyDesignSize, m_tabPageEndoscopyRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabPageSurgical().setVisible(false);
				tabPageMedical().setVisible(false);
				tabPageEndoscopy().setVisible(false);
			}
			public void showtabPageSurgical()
			{
				tabPageMedical().setVisible(false);
				tabPageEndoscopy().setVisible(false);
				tabPageSurgical().setVisible(true);
			}
			public void showtabPageMedical()
			{
				tabPageSurgical().setVisible(false);
				tabPageEndoscopy().setVisible(false);
				tabPageMedical().setVisible(true);
			}
			public void showtabPageEndoscopy()
			{
				tabPageSurgical().setVisible(false);
				tabPageMedical().setVisible(false);
				tabPageEndoscopy().setVisible(true);
			}
	
			public tabPageSurgicalContainer tabPageSurgical()
			{
				return (tabPageSurgicalContainer)super.layers.get(0);
			}
			public tabPageMedicalContainer tabPageMedical()
			{
				return (tabPageMedicalContainer)super.layers.get(1);
			}
			public tabPageEndoscopyContainer tabPageEndoscopy()
			{
				return (tabPageEndoscopyContainer)super.layers.get(2);
			}
		}
		public static class lyrHistoryLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabPageNotesContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class grdNoteCommentsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdNoteCommentsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNoteCommentReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNoteCommentReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNoteCommentOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolNoteComment(String value)
					{
						super.row.setTooltip(0, value);
					}
					public String getcolNoteComment()
					{
						return (String)super.row.get(0);
					}
					public void setcolNoteComment(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNoteCommentTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolRecordingDateTimeReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolRecordingDateTimeReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolRecordingDateTimeOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolRecordingDateTime(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolRecordingDateTime()
					{
						return (String)super.row.get(1);
					}
					public void setcolRecordingDateTime(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolRecordingDateTimeTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolRecordingUserReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolRecordingUserReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolRecordingUserOpened()
					{
						super.row.showOpened(2);
					}
					public void setTooltipForcolRecordingUser(String value)
					{
						super.row.setTooltip(2, value);
					}
					public String getcolRecordingUser()
					{
						return (String)super.row.get(2);
					}
					public void setcolRecordingUser(String value)
					{
						super.row.set(2, value);
					}
					public void setCellcolRecordingUserTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.RefMan.vo.PatientElectiveListNotesVo getValue()
					{
						return (ims.RefMan.vo.PatientElectiveListNotesVo)super.row.getValue();
					}
					public void setValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdNoteCommentsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdNoteCommentsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdNoteCommentsRow get(int index)
					{
						return new grdNoteCommentsRow(super.collection.get(index));
					}
					public grdNoteCommentsRow newRow()
					{
						return new grdNoteCommentsRow(super.collection.newRow());
					}
					public grdNoteCommentsRow newRow(boolean autoSelect)
					{
						return new grdNoteCommentsRow(super.collection.newRow(autoSelect));
					}
					public grdNoteCommentsRow newRowAt(int index)
					{
						return new grdNoteCommentsRow(super.collection.newRowAt(index));
					}
					public grdNoteCommentsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdNoteCommentsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdNoteCommentsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.RefMan.vo.PatientElectiveListNotesVoCollection getValues()
					{
						ims.RefMan.vo.PatientElectiveListNotesVoCollection listOfValues = new ims.RefMan.vo.PatientElectiveListNotesVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.RefMan.vo.PatientElectiveListNotesVo getValue()
					{
						return (ims.RefMan.vo.PatientElectiveListNotesVo)super.grid.getValue();
					}
					public void setValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
					{
						super.grid.setValue(value);
					}
					public grdNoteCommentsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdNoteCommentsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdNoteCommentsRowCollection getRows()
					{
						return new grdNoteCommentsRowCollection(super.grid.getRows());
					}
					public grdNoteCommentsRow getRowByValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdNoteCommentsRow(row);
					}
					public void setcolNoteCommentHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNoteCommentHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolRecordingDateTimeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolRecordingDateTimeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolRecordingUserHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolRecordingUserHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper234 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdNoteCommentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1210), new Integer(anchoringHelper234.getX()), new Integer(anchoringHelper234.getY()), new Integer(anchoringHelper234.getWidth()), new Integer(anchoringHelper234.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdNoteCommentsTemp);
					grdNoteCommentsGrid grdNoteComments = (grdNoteCommentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNoteCommentsGrid.class, m_grdNoteCommentsTemp);
					grdNoteComments.addStringColumn("Note / Comment", 0, 0, 400, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdNoteComments.addStringColumn("Recording Date", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdNoteComments.addStringColumn("Recording User", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdNoteComments);
				}
	
				public grdNoteCommentsGrid grdNoteComments()
				{
					return (grdNoteCommentsGrid)super.getGrid(0);
				}
			}
			public static class tabPageTCIHistoryContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class grdTCIHistoryRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdTCIHistoryRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setColImageReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean isColImageReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showColImageOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForColImage(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.framework.utils.Image getColImage()
					{
						return (ims.framework.utils.Image)super.row.get(0);
					}
					public void setColImage(ims.framework.utils.Image value)
					{
						super.row.set(0, value);
					}
					public void setCellColImageTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setColTCIDateReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean isColTCIDateReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showColTCIDateOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForColTCIDate(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getColTCIDate()
					{
						return (String)super.row.get(1);
					}
					public void setColTCIDate(String value)
					{
						super.row.set(1, value);
					}
					public void setCellColTCIDateTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setColHospitalReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean isColHospitalReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showColHospitalOpened()
					{
						super.row.showOpened(2);
					}
					public void setTooltipForColHospital(String value)
					{
						super.row.setTooltip(2, value);
					}
					public String getColHospital()
					{
						return (String)super.row.get(2);
					}
					public void setColHospital(String value)
					{
						super.row.set(2, value);
					}
					public void setCellColHospitalTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public void setColWardReadOnly(boolean value)
					{
						super.row.setReadOnly(3, value);
					}
					public boolean isColWardReadOnly()
					{
						return super.row.isReadOnly(3);
					}
					public void showColWardOpened()
					{
						super.row.showOpened(3);
					}
					public void setTooltipForColWard(String value)
					{
						super.row.setTooltip(3, value);
					}
					public String getColWard()
					{
						return (String)super.row.get(3);
					}
					public void setColWard(String value)
					{
						super.row.set(3, value);
					}
					public void setCellColWardTooltip(String value)
					{
						super.row.setTooltip(3, value);
					}
					public void setColCancelIconReadOnly(boolean value)
					{
						super.row.setReadOnly(4, value);
					}
					public boolean isColCancelIconReadOnly()
					{
						return super.row.isReadOnly(4);
					}
					public void showColCancelIconOpened()
					{
						super.row.showOpened(4);
					}
					public void setTooltipForColCancelIcon(String value)
					{
						super.row.setTooltip(4, value);
					}
					public ims.framework.utils.Image getColCancelIcon()
					{
						return (ims.framework.utils.Image)super.row.get(4);
					}
					public void setColCancelIcon(ims.framework.utils.Image value)
					{
						super.row.set(4, value);
					}
					public void setCellColCancelIconTooltip(String value)
					{
						super.row.setTooltip(4, value);
					}
					public void setColCancellationTypeReadOnly(boolean value)
					{
						super.row.setReadOnly(5, value);
					}
					public boolean isColCancellationTypeReadOnly()
					{
						return super.row.isReadOnly(5);
					}
					public void showColCancellationTypeOpened()
					{
						super.row.showOpened(5);
					}
					public void setTooltipForColCancellationType(String value)
					{
						super.row.setTooltip(5, value);
					}
					public String getColCancellationType()
					{
						return (String)super.row.get(5);
					}
					public void setColCancellationType(String value)
					{
						super.row.set(5, value);
					}
					public void setCellColCancellationTypeTooltip(String value)
					{
						super.row.setTooltip(5, value);
					}
					public ims.RefMan.vo.TCIForPatientElectiveListDetailsVo getValue()
					{
						return (ims.RefMan.vo.TCIForPatientElectiveListDetailsVo)super.row.getValue();
					}
					public void setValue(ims.RefMan.vo.TCIForPatientElectiveListDetailsVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdTCIHistoryRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdTCIHistoryRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdTCIHistoryRow get(int index)
					{
						return new grdTCIHistoryRow(super.collection.get(index));
					}
					public grdTCIHistoryRow newRow()
					{
						return new grdTCIHistoryRow(super.collection.newRow());
					}
					public grdTCIHistoryRow newRow(boolean autoSelect)
					{
						return new grdTCIHistoryRow(super.collection.newRow(autoSelect));
					}
					public grdTCIHistoryRow newRowAt(int index)
					{
						return new grdTCIHistoryRow(super.collection.newRowAt(index));
					}
					public grdTCIHistoryRow newRowAt(int index, boolean autoSelect)
					{
						return new grdTCIHistoryRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdTCIHistoryGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
					{
						super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
					}
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection getValues()
					{
						ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection listOfValues = new ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.RefMan.vo.TCIForPatientElectiveListDetailsVo getValue()
					{
						return (ims.RefMan.vo.TCIForPatientElectiveListDetailsVo)super.grid.getValue();
					}
					public void setValue(ims.RefMan.vo.TCIForPatientElectiveListDetailsVo value)
					{
						super.grid.setValue(value);
					}
					public grdTCIHistoryRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdTCIHistoryRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdTCIHistoryRowCollection getRows()
					{
						return new grdTCIHistoryRowCollection(super.grid.getRows());
					}
					public grdTCIHistoryRow getRowByValue(ims.RefMan.vo.TCIForPatientElectiveListDetailsVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdTCIHistoryRow(row);
					}
					public void setColImageHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getColImageHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setColTCIDateHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getColTCIDateHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setColHospitalHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getColHospitalHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
					public void setColWardHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(3, value);
					}
					public String getColWardHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(3);
					}
					public void setColCancelIconHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(4, value);
					}
					public String getColCancelIconHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(4);
					}
					public void setColCancellationTypeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(5, value);
					}
					public String getColCancellationTypeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(5);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper235 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdTCIHistoryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1211), new Integer(anchoringHelper235.getX()), new Integer(anchoringHelper235.getY()), new Integer(anchoringHelper235.getWidth()), new Integer(anchoringHelper235.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuTCIHistoryMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdTCIHistoryTemp);
					grdTCIHistoryGrid grdTCIHistory = (grdTCIHistoryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTCIHistoryGrid.class, m_grdTCIHistoryTemp);
					grdTCIHistory.addImageColumn(" ", 0, 0, 30, true, 0);
					grdTCIHistory.addStringColumn("TCI Date/Time", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdTCIHistory.addStringColumn("Hospital", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdTCIHistory.addStringColumn("Ward", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdTCIHistory.addImageColumn(" ", 0, 1, 25, true, 0);
					grdTCIHistory.addStringColumn("Cancellation Type and Reason/Comments", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdTCIHistory);
				}
	
				public grdTCIHistoryGrid grdTCIHistory()
				{
					return (grdTCIHistoryGrid)super.getGrid(0);
				}
			}
			public static class tabPageErodHistoryContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class grdERODHistoryRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdERODHistoryRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setColErod1ReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean isColErod1ReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showColErod1Opened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForColErod1(String value)
					{
						super.row.setTooltip(0, value);
					}
					public String getColErod1()
					{
						return (String)super.row.get(0);
					}
					public void setColErod1(String value)
					{
						super.row.set(0, value);
					}
					public void setCellColErod1Tooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setColSecondReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean isColSecondReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showColSecondOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForColSecond(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getColSecond()
					{
						return (String)super.row.get(1);
					}
					public void setColSecond(String value)
					{
						super.row.set(1, value);
					}
					public void setCellColSecondTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setColAvailabilityReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean isColAvailabilityReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showColAvailabilityOpened()
					{
						super.row.showOpened(2);
					}
					public void setTooltipForColAvailability(String value)
					{
						super.row.setTooltip(2, value);
					}
					public String getColAvailability()
					{
						return (String)super.row.get(2);
					}
					public void setColAvailability(String value)
					{
						super.row.set(2, value);
					}
					public void setCellColAvailabilityTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public void setColReasonReadOnly(boolean value)
					{
						super.row.setReadOnly(3, value);
					}
					public boolean isColReasonReadOnly()
					{
						return super.row.isReadOnly(3);
					}
					public void showColReasonOpened()
					{
						super.row.showOpened(3);
					}
					public void setTooltipForColReason(String value)
					{
						super.row.setTooltip(3, value);
					}
					public String getColReason()
					{
						return (String)super.row.get(3);
					}
					public void setColReason(String value)
					{
						super.row.set(3, value);
					}
					public void setCellColReasonTooltip(String value)
					{
						super.row.setTooltip(3, value);
					}
					public void setColCommentReadOnly(boolean value)
					{
						super.row.setReadOnly(4, value);
					}
					public boolean isColCommentReadOnly()
					{
						return super.row.isReadOnly(4);
					}
					public void showColCommentOpened()
					{
						super.row.showOpened(4);
					}
					public void setTooltipForColComment(String value)
					{
						super.row.setTooltip(4, value);
					}
					public String getColComment()
					{
						return (String)super.row.get(4);
					}
					public void setColComment(String value)
					{
						super.row.set(4, value);
					}
					public void setCellColCommentTooltip(String value)
					{
						super.row.setTooltip(4, value);
					}
					public ims.RefMan.vo.ReferralERODDetailsVo getValue()
					{
						return (ims.RefMan.vo.ReferralERODDetailsVo)super.row.getValue();
					}
					public void setValue(ims.RefMan.vo.ReferralERODDetailsVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdERODHistoryRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdERODHistoryRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdERODHistoryRow get(int index)
					{
						return new grdERODHistoryRow(super.collection.get(index));
					}
					public grdERODHistoryRow newRow()
					{
						return new grdERODHistoryRow(super.collection.newRow());
					}
					public grdERODHistoryRow newRow(boolean autoSelect)
					{
						return new grdERODHistoryRow(super.collection.newRow(autoSelect));
					}
					public grdERODHistoryRow newRowAt(int index)
					{
						return new grdERODHistoryRow(super.collection.newRowAt(index));
					}
					public grdERODHistoryRow newRowAt(int index, boolean autoSelect)
					{
						return new grdERODHistoryRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdERODHistoryGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.RefMan.vo.ReferralERODDetailsVoCollection getValues()
					{
						ims.RefMan.vo.ReferralERODDetailsVoCollection listOfValues = new ims.RefMan.vo.ReferralERODDetailsVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.RefMan.vo.ReferralERODDetailsVo getValue()
					{
						return (ims.RefMan.vo.ReferralERODDetailsVo)super.grid.getValue();
					}
					public void setValue(ims.RefMan.vo.ReferralERODDetailsVo value)
					{
						super.grid.setValue(value);
					}
					public grdERODHistoryRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdERODHistoryRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdERODHistoryRowCollection getRows()
					{
						return new grdERODHistoryRowCollection(super.grid.getRows());
					}
					public grdERODHistoryRow getRowByValue(ims.RefMan.vo.ReferralERODDetailsVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdERODHistoryRow(row);
					}
					public void setColErod1HeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getColErod1HeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setColSecondHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getColSecondHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setColAvailabilityHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getColAvailabilityHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
					public void setColReasonHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(3, value);
					}
					public String getColReasonHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(3);
					}
					public void setColCommentHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(4, value);
					}
					public String getColCommentHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(4);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper236 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdERODHistoryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1212), new Integer(anchoringHelper236.getX()), new Integer(anchoringHelper236.getY()), new Integer(anchoringHelper236.getWidth()), new Integer(anchoringHelper236.getHeight()), new Integer(startTabIndex.intValue() + 64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuERODHistoryMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdERODHistoryTemp);
					grdERODHistoryGrid grdERODHistory = (grdERODHistoryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdERODHistoryGrid.class, m_grdERODHistoryTemp);
					grdERODHistory.addStringColumn("Earliest", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdERODHistory.addStringColumn("Second", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdERODHistory.addStringColumn("Availability", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdERODHistory.addStringColumn("Reason", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdERODHistory.addStringColumn("Comment", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdERODHistory);
				}
	
				public grdERODHistoryGrid grdERODHistory()
				{
					return (grdERODHistoryGrid)super.getGrid(0);
				}
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper237 = new RuntimeAnchoring(designSize, runtimeSize, 0, 1440, 824, 256, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabPageNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1213), new Integer(anchoringHelper237.getX()), new Integer(anchoringHelper237.getY()), new Integer(anchoringHelper237.getWidth()), new Integer(anchoringHelper237.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Notes / Comments", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabPageNotesContainer m_tabPageNotesContainer = (tabPageNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageNotesContainer.class, m_tabPageNotes, factory);
				super.addContainer(m_tabPageNotes, m_tabPageNotesContainer);
				ims.framework.utils.SizeInfo m_tabPageNotesDesignSize = new ims.framework.utils.SizeInfo(824, 256);
				ims.framework.utils.SizeInfo m_tabPageNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper237.getWidth(), anchoringHelper237.getHeight());
				m_tabPageNotesContainer.setContext(form, appForm, m_tabPageNotes, loader, form_images_local, contextMenus, startControlID, m_tabPageNotesDesignSize, m_tabPageNotesRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper238 = new RuntimeAnchoring(designSize, runtimeSize, 0, 1440, 824, 256, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabPageTCIHistory = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1214), new Integer(anchoringHelper238.getX()), new Integer(anchoringHelper238.getY()), new Integer(anchoringHelper238.getWidth()), new Integer(anchoringHelper238.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"TCI History", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabPageTCIHistoryContainer m_tabPageTCIHistoryContainer = (tabPageTCIHistoryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTCIHistoryContainer.class, m_tabPageTCIHistory, factory);
				super.addContainer(m_tabPageTCIHistory, m_tabPageTCIHistoryContainer);
				ims.framework.utils.SizeInfo m_tabPageTCIHistoryDesignSize = new ims.framework.utils.SizeInfo(824, 256);
				ims.framework.utils.SizeInfo m_tabPageTCIHistoryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper238.getWidth(), anchoringHelper238.getHeight());
				m_tabPageTCIHistoryContainer.setContext(form, appForm, m_tabPageTCIHistory, loader, form_images_local, contextMenus, startControlID, m_tabPageTCIHistoryDesignSize, m_tabPageTCIHistoryRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper239 = new RuntimeAnchoring(designSize, runtimeSize, 0, 1440, 824, 256, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabPageErodHistory = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1215), new Integer(anchoringHelper239.getX()), new Integer(anchoringHelper239.getY()), new Integer(anchoringHelper239.getWidth()), new Integer(anchoringHelper239.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"EROD History", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabPageErodHistoryContainer m_tabPageErodHistoryContainer = (tabPageErodHistoryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageErodHistoryContainer.class, m_tabPageErodHistory, factory);
				super.addContainer(m_tabPageErodHistory, m_tabPageErodHistoryContainer);
				ims.framework.utils.SizeInfo m_tabPageErodHistoryDesignSize = new ims.framework.utils.SizeInfo(824, 256);
				ims.framework.utils.SizeInfo m_tabPageErodHistoryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper239.getWidth(), anchoringHelper239.getHeight());
				m_tabPageErodHistoryContainer.setContext(form, appForm, m_tabPageErodHistory, loader, form_images_local, contextMenus, startControlID, m_tabPageErodHistoryDesignSize, m_tabPageErodHistoryRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabPageNotes().setVisible(false);
				tabPageTCIHistory().setVisible(false);
				tabPageErodHistory().setVisible(false);
			}
			public void settabPageNotesEnabled(boolean value)
			{
				tabPageNotes().setEnabled(value);
			}
			public void settabPageTCIHistoryEnabled(boolean value)
			{
				tabPageTCIHistory().setEnabled(value);
			}
			public void settabPageErodHistoryEnabled(boolean value)
			{
				tabPageErodHistory().setEnabled(value);
			}
			public void showtabPageNotes()
			{
				tabPageTCIHistory().setVisible(false);
				tabPageErodHistory().setVisible(false);
				tabPageNotes().setVisible(true);
			}
			public void showtabPageTCIHistory()
			{
				tabPageNotes().setVisible(false);
				tabPageErodHistory().setVisible(false);
				tabPageTCIHistory().setVisible(true);
			}
			public void showtabPageErodHistory()
			{
				tabPageNotes().setVisible(false);
				tabPageTCIHistory().setVisible(false);
				tabPageErodHistory().setVisible(true);
			}
	
			public tabPageNotesContainer tabPageNotes()
			{
				return (tabPageNotesContainer)super.layers.get(0);
			}
			public tabPageTCIHistoryContainer tabPageTCIHistory()
			{
				return (tabPageTCIHistoryContainer)super.layers.get(1);
			}
			public tabPageErodHistoryContainer tabPageErodHistory()
			{
				return (tabPageErodHistoryContainer)super.layers.get(2);
			}
		}
		public static class cmbPatientCategoryComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.PatientStatus getValue()
			{
				return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.PatientStatus value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbERODReasonComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.RefMan.vo.lookups.ERODReason value)
			{
				return super.control.removeRow(value);
			}
			public ims.RefMan.vo.lookups.ERODReason getValue()
			{
				return (ims.RefMan.vo.lookups.ERODReason)super.control.getValue();
			}
			public void setValue(ims.RefMan.vo.lookups.ERODReason value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbReasonDeclinedComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value)
			{
				return super.control.removeRow(value);
			}
			public ims.RefMan.vo.lookups.ReasonDeclined28DayOffer getValue()
			{
				return (ims.RefMan.vo.lookups.ReasonDeclined28DayOffer)super.control.getValue();
			}
			public void setValue(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbTCOOfferedMethodComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.TCIOfferMethod value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.TCIOfferMethod getValue()
			{
				return (ims.core.vo.lookups.TCIOfferMethod)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.TCIOfferMethod value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbBreachReasonComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value)
			{
				return super.control.removeRow(value);
			}
			public ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason getValue()
			{
				return (ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason)super.control.getValue();
			}
			public void setValue(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value)
			{
				super.control.setValue(value);
			}
		}
		public static class qmbTCIWardComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.LocationLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.LocationLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.LocationLiteVo getValue()
			{
				return (ims.core.vo.LocationLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.LocationLiteVo value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		public static class qmbHospitalComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.LocationLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.LocationLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.LocationLiteVo getValue()
			{
				return (ims.core.vo.LocationLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.LocationLiteVo value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
	
		public static class GroupElectiveListRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper240 = new RuntimeAnchoring(designSize, runtimeSize, 104, 91, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper240.getX(), anchoringHelper240.getY(), anchoringHelper240.getWidth(), "Booked List", startTabIndex.intValue() + 2);
				RuntimeAnchoring anchoringHelper241 = new RuntimeAnchoring(designSize, runtimeSize, 208, 91, 168, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper241.getX(), anchoringHelper241.getY(), anchoringHelper241.getWidth(), "Surveillance / Planned List", startTabIndex.intValue() + 3);
				RuntimeAnchoring anchoringHelper242 = new RuntimeAnchoring(designSize, runtimeSize, 0, 91, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(2, anchoringHelper242.getX(), anchoringHelper242.getY(), anchoringHelper242.getWidth(), "Waiting List", startTabIndex.intValue() + 1);
			}
			public void setText(GroupElectiveListEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupElectiveListEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupElectiveListEnumeration.None;
					case 0: return GroupElectiveListEnumeration.rdoBooked;
					case 1: return GroupElectiveListEnumeration.rdoSurveillance;
					case 2: return GroupElectiveListEnumeration.rdoWaitingList;
				}
				return null;
			}
			public void setValue(GroupElectiveListEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupElectiveListEnumeration.None.id);
			}
			public boolean isEnabled(GroupElectiveListEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupElectiveListEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupElectiveListEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupElectiveListEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupElectiveListEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupElectiveListEnumeration None = new GroupElectiveListEnumeration(-1);
			public static GroupElectiveListEnumeration rdoBooked = new GroupElectiveListEnumeration(0);
			public static GroupElectiveListEnumeration rdoSurveillance = new GroupElectiveListEnumeration(1);
			public static GroupElectiveListEnumeration rdoWaitingList = new GroupElectiveListEnumeration(2);
			private GroupElectiveListEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupElectiveListEnumeration)o).id;
			}
			private int id;
		}
	
		public static class GroupWasReasonableRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper243 = new RuntimeAnchoring(designSize, runtimeSize, 280, 1048, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper243.getX(), anchoringHelper243.getY(), anchoringHelper243.getWidth(), "No", startTabIndex.intValue() + 38);
				RuntimeAnchoring anchoringHelper244 = new RuntimeAnchoring(designSize, runtimeSize, 224, 1048, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper244.getX(), anchoringHelper244.getY(), anchoringHelper244.getWidth(), "Yes", startTabIndex.intValue() + 37);
			}
			public void setText(GroupWasReasonableEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupWasReasonableEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupWasReasonableEnumeration.None;
					case 0: return GroupWasReasonableEnumeration.rdoNo;
					case 1: return GroupWasReasonableEnumeration.rdoYes;
				}
				return null;
			}
			public void setValue(GroupWasReasonableEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupWasReasonableEnumeration.None.id);
			}
			public boolean isEnabled(GroupWasReasonableEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupWasReasonableEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupWasReasonableEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupWasReasonableEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupWasReasonableEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupWasReasonableEnumeration None = new GroupWasReasonableEnumeration(-1);
			public static GroupWasReasonableEnumeration rdoNo = new GroupWasReasonableEnumeration(0);
			public static GroupWasReasonableEnumeration rdoYes = new GroupWasReasonableEnumeration(1);
			private GroupWasReasonableEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupWasReasonableEnumeration)o).id;
			}
			private int id;
		}
	
		public static class GroupAdmissionTypeRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper245 = new RuntimeAnchoring(designSize, runtimeSize, 280, 120, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper245.getX(), anchoringHelper245.getY(), anchoringHelper245.getWidth(), "Endoscopy", -1);
				RuntimeAnchoring anchoringHelper246 = new RuntimeAnchoring(designSize, runtimeSize, 120, 120, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper246.getX(), anchoringHelper246.getY(), anchoringHelper246.getWidth(), "Surgical", -1);
				RuntimeAnchoring anchoringHelper247 = new RuntimeAnchoring(designSize, runtimeSize, 200, 120, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(2, anchoringHelper247.getX(), anchoringHelper247.getY(), anchoringHelper247.getWidth(), "Medical", -1);
			}
			public void setText(GroupAdmissionTypeEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupAdmissionTypeEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupAdmissionTypeEnumeration.None;
					case 0: return GroupAdmissionTypeEnumeration.rdoEndoscopy;
					case 1: return GroupAdmissionTypeEnumeration.rdoSurgical;
					case 2: return GroupAdmissionTypeEnumeration.rdoMedical;
				}
				return null;
			}
			public void setValue(GroupAdmissionTypeEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupAdmissionTypeEnumeration.None.id);
			}
			public boolean isEnabled(GroupAdmissionTypeEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupAdmissionTypeEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupAdmissionTypeEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupAdmissionTypeEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupAdmissionTypeEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupAdmissionTypeEnumeration None = new GroupAdmissionTypeEnumeration(-1);
			public static GroupAdmissionTypeEnumeration rdoEndoscopy = new GroupAdmissionTypeEnumeration(0);
			public static GroupAdmissionTypeEnumeration rdoSurgical = new GroupAdmissionTypeEnumeration(1);
			public static GroupAdmissionTypeEnumeration rdoMedical = new GroupAdmissionTypeEnumeration(2);
			private GroupAdmissionTypeEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupAdmissionTypeEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper248 = new RuntimeAnchoring(designSize, runtimeSize, 0, 1168, 824, 264, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1216), new Integer(anchoringHelper248.getX()), new Integer(anchoringHelper248.getY()), new Integer(anchoringHelper248.getWidth()), new Integer(anchoringHelper248.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"EROD Details", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper249 = new RuntimeAnchoring(designSize, runtimeSize, 0, 856, 824, 304, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1217), new Integer(anchoringHelper249.getX()), new Integer(anchoringHelper249.getY()), new Integer(anchoringHelper249.getWidth()), new Integer(anchoringHelper249.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"TCI Details ", new Integer(2), ""}));
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper250 = new RuntimeAnchoring(designSize, runtimeSize, 424, 784, 400, 53, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			ims.framework.FormUiLogic m_ccAuthoringHCPForm = loader.loadComponent(102228, appForm, startControlID * 10 + 5000, anchoringHelper250.getSize(), instance1, -1, skipContextValidation);
			//ims.framework.Control m_ccAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1218), new Integer(424), new Integer(784), new Integer(400), new Integer(53), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(-1), m_ccAuthoringHCPForm, instance1 } );
			ims.framework.Control m_ccAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1219),  new Integer(anchoringHelper250.getX()), new Integer(anchoringHelper250.getY()), new Integer(anchoringHelper250.getWidth()), new Integer(anchoringHelper250.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(-1), m_ccAuthoringHCPForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccAuthoringHCPControl);
			Menu[] menus1 = m_ccAuthoringHCPForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper251 = new RuntimeAnchoring(designSize, runtimeSize, 149, 792, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_ccRecordingMOSForm = loader.loadComponent(102256, appForm, startControlID * 10 + 6000, anchoringHelper251.getSize(), instance2, -1, skipContextValidation);
			//ims.framework.Control m_ccRecordingMOSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1220), new Integer(149), new Integer(792), new Integer(256), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccRecordingMOSForm, instance2 } );
			ims.framework.Control m_ccRecordingMOSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1221),  new Integer(anchoringHelper251.getX()), new Integer(anchoringHelper251.getY()), new Integer(anchoringHelper251.getWidth()), new Integer(anchoringHelper251.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccRecordingMOSForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccRecordingMOSControl);
			Menu[] menus2 = m_ccRecordingMOSForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Layer Clasess
			lyrWaitingListDetailsLayer m_lyrWaitingListDetailsLayer = (lyrWaitingListDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrWaitingListDetailsLayer.class, this, factory);
			super.addLayer(m_lyrWaitingListDetailsLayer);
			m_lyrWaitingListDetailsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
			lyrHistoryLayer m_lyrHistoryLayer = (lyrHistoryLayer)LayerFlyweightFactory.getInstance().createLayer(lyrHistoryLayer.class, this, factory);
			super.addLayer(m_lyrHistoryLayer);
			m_lyrHistoryLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	
			// Label Controls
			RuntimeAnchoring anchoringHelper252 = new RuntimeAnchoring(designSize, runtimeSize, 13, 816, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1222), new Integer(anchoringHelper252.getX()), new Integer(anchoringHelper252.getY()), new Integer(anchoringHelper252.getWidth()), new Integer(anchoringHelper252.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper253 = new RuntimeAnchoring(designSize, runtimeSize, 13, 794, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1223), new Integer(anchoringHelper253.getX()), new Integer(anchoringHelper253.getY()), new Integer(anchoringHelper253.getWidth()), new Integer(anchoringHelper253.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording MOS:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper254 = new RuntimeAnchoring(designSize, runtimeSize, 408, 120, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1224), new Integer(anchoringHelper254.getX()), new Integer(anchoringHelper254.getY()), new Integer(anchoringHelper254.getWidth()), new Integer(anchoringHelper254.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Category:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper255 = new RuntimeAnchoring(designSize, runtimeSize, 480, 16, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1225), new Integer(anchoringHelper255.getX()), new Integer(anchoringHelper255.getY()), new Integer(anchoringHelper255.getWidth()), new Integer(anchoringHelper255.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Referral Service>", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper256 = new RuntimeAnchoring(designSize, runtimeSize, 480, 40, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1226), new Integer(anchoringHelper256.getX()), new Integer(anchoringHelper256.getY()), new Integer(anchoringHelper256.getWidth()), new Integer(anchoringHelper256.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Breach Date>", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper257 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1227), new Integer(anchoringHelper257.getX()), new Integer(anchoringHelper257.getY()), new Integer(anchoringHelper257.getWidth()), new Integer(anchoringHelper257.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Date on List>", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper258 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1228), new Integer(anchoringHelper258.getX()), new Integer(anchoringHelper258.getY()), new Integer(anchoringHelper258.getWidth()), new Integer(anchoringHelper258.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Current Status>", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper259 = new RuntimeAnchoring(designSize, runtimeSize, 0, 504, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1229), new Integer(anchoringHelper259.getX()), new Integer(anchoringHelper259.getY()), new Integer(anchoringHelper259.getWidth()), new Integer(anchoringHelper259.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper260 = new RuntimeAnchoring(designSize, runtimeSize, 9, 1370, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1230), new Integer(anchoringHelper260.getX()), new Integer(anchoringHelper260.getY()), new Integer(anchoringHelper260.getWidth()), new Integer(anchoringHelper260.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Offer:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper261 = new RuntimeAnchoring(designSize, runtimeSize, 9, 1320, 147, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1231), new Integer(anchoringHelper261.getX()), new Integer(anchoringHelper261.getY()), new Integer(anchoringHelper261.getWidth()), new Integer(anchoringHelper261.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD Reason  Comment:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper262 = new RuntimeAnchoring(designSize, runtimeSize, 9, 1274, 165, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1232), new Integer(anchoringHelper262.getX()), new Integer(anchoringHelper262.getY()), new Integer(anchoringHelper262.getWidth()), new Integer(anchoringHelper262.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Available from Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper263 = new RuntimeAnchoring(designSize, runtimeSize, 9, 1250, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1233), new Integer(anchoringHelper263.getX()), new Integer(anchoringHelper263.getY()), new Integer(anchoringHelper263.getWidth()), new Integer(anchoringHelper263.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Second Date Offered:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper264 = new RuntimeAnchoring(designSize, runtimeSize, 9, 1202, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1234), new Integer(anchoringHelper264.getX()), new Integer(anchoringHelper264.getY()), new Integer(anchoringHelper264.getWidth()), new Integer(anchoringHelper264.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Earliest Date Offered:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper265 = new RuntimeAnchoring(designSize, runtimeSize, 9, 1298, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1235), new Integer(anchoringHelper265.getX()), new Integer(anchoringHelper265.getY()), new Integer(anchoringHelper265.getWidth()), new Integer(anchoringHelper265.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD Reason:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper266 = new RuntimeAnchoring(designSize, runtimeSize, 504, 888, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1236), new Integer(anchoringHelper266.getX()), new Integer(anchoringHelper266.getY()), new Integer(anchoringHelper266.getWidth()), new Integer(anchoringHelper266.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Theatre Session>", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper267 = new RuntimeAnchoring(designSize, runtimeSize, 206, 888, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1237), new Integer(anchoringHelper267.getX()), new Integer(anchoringHelper267.getY()), new Integer(anchoringHelper267.getWidth()), new Integer(anchoringHelper267.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Theatre Date>", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper268 = new RuntimeAnchoring(designSize, runtimeSize, 440, 1074, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1238), new Integer(anchoringHelper268.getX()), new Integer(anchoringHelper268.getY()), new Integer(anchoringHelper268.getWidth()), new Integer(anchoringHelper268.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason Declined:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper269 = new RuntimeAnchoring(designSize, runtimeSize, 224, 1074, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1239), new Integer(anchoringHelper269.getX()), new Integer(anchoringHelper269.getY()), new Integer(anchoringHelper269.getWidth()), new Integer(anchoringHelper269.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Offer:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper270 = new RuntimeAnchoring(designSize, runtimeSize, 440, 1048, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1240), new Integer(anchoringHelper270.getX()), new Integer(anchoringHelper270.getY()), new Integer(anchoringHelper270.getWidth()), new Integer(anchoringHelper270.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Date Offered:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper271 = new RuntimeAnchoring(designSize, runtimeSize, 5, 1048, 208, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1241), new Integer(anchoringHelper271.getX()), new Integer(anchoringHelper271.getY()), new Integer(anchoringHelper271.getWidth()), new Integer(anchoringHelper271.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Was reasonable 28 day offer made?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper272 = new RuntimeAnchoring(designSize, runtimeSize, 408, 888, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1242), new Integer(anchoringHelper272.getX()), new Integer(anchoringHelper272.getY()), new Integer(anchoringHelper272.getWidth()), new Integer(anchoringHelper272.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Session:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper273 = new RuntimeAnchoring(designSize, runtimeSize, 5, 888, 201, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1243), new Integer(anchoringHelper273.getX()), new Integer(anchoringHelper273.getY()), new Integer(anchoringHelper273.getWidth()), new Integer(anchoringHelper273.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Appointment Date / Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper274 = new RuntimeAnchoring(designSize, runtimeSize, 5, 946, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1244), new Integer(anchoringHelper274.getX()), new Integer(anchoringHelper274.getY()), new Integer(anchoringHelper274.getWidth()), new Integer(anchoringHelper274.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper275 = new RuntimeAnchoring(designSize, runtimeSize, 5, 970, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1245), new Integer(anchoringHelper275.getX()), new Integer(anchoringHelper275.getY()), new Integer(anchoringHelper275.getWidth()), new Integer(anchoringHelper275.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper276 = new RuntimeAnchoring(designSize, runtimeSize, 5, 994, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1246), new Integer(anchoringHelper276.getX()), new Integer(anchoringHelper276.getY()), new Integer(anchoringHelper276.getWidth()), new Integer(anchoringHelper276.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Breach Reason:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper277 = new RuntimeAnchoring(designSize, runtimeSize, 5, 1018, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1247), new Integer(anchoringHelper277.getX()), new Integer(anchoringHelper277.getY()), new Integer(anchoringHelper277.getWidth()), new Integer(anchoringHelper277.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Offer:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper278 = new RuntimeAnchoring(designSize, runtimeSize, 5, 1098, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1248), new Integer(anchoringHelper278.getX()), new Integer(anchoringHelper278.getY()), new Integer(anchoringHelper278.getWidth()), new Integer(anchoringHelper278.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Offered Method:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper279 = new RuntimeAnchoring(designSize, runtimeSize, 5, 922, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1249), new Integer(anchoringHelper279.getX()), new Integer(anchoringHelper279.getY()), new Integer(anchoringHelper279.getWidth()), new Integer(anchoringHelper279.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Date / Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper280 = new RuntimeAnchoring(designSize, runtimeSize, 0, 120, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1250), new Integer(anchoringHelper280.getX()), new Integer(anchoringHelper280.getY()), new Integer(anchoringHelper280.getWidth()), new Integer(anchoringHelper280.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Type:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper281 = new RuntimeAnchoring(designSize, runtimeSize, 371, 40, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1251), new Integer(anchoringHelper281.getX()), new Integer(anchoringHelper281.getY()), new Integer(anchoringHelper281.getWidth()), new Integer(anchoringHelper281.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Breach Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper282 = new RuntimeAnchoring(designSize, runtimeSize, 371, 16, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1252), new Integer(anchoringHelper282.getX()), new Integer(anchoringHelper282.getY()), new Integer(anchoringHelper282.getWidth()), new Integer(anchoringHelper282.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Service:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper283 = new RuntimeAnchoring(designSize, runtimeSize, 0, 40, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1253), new Integer(anchoringHelper283.getX()), new Integer(anchoringHelper283.getY()), new Integer(anchoringHelper283.getWidth()), new Integer(anchoringHelper283.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date on List:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper284 = new RuntimeAnchoring(designSize, runtimeSize, 0, 16, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1254), new Integer(anchoringHelper284.getX()), new Integer(anchoringHelper284.getY()), new Integer(anchoringHelper284.getWidth()), new Integer(anchoringHelper284.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Status:", new Integer(1), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper285 = new RuntimeAnchoring(designSize, runtimeSize, 749, 1712, 75, 40, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1255), new Integer(anchoringHelper285.getX()), new Integer(anchoringHelper285.getY()), new Integer(anchoringHelper285.getWidth()), new Integer(anchoringHelper285.getHeight()), new Integer(startTabIndex.intValue() + 71), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper286 = new RuntimeAnchoring(designSize, runtimeSize, 0, 1712, 75, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1256), new Integer(anchoringHelper286.getX()), new Integer(anchoringHelper286.getY()), new Integer(anchoringHelper286.getWidth()), new Integer(anchoringHelper286.getHeight()), new Integer(startTabIndex.intValue() + 65), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Add TCI", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper287 = new RuntimeAnchoring(designSize, runtimeSize, 81, 1712, 75, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1257), new Integer(anchoringHelper287.getX()), new Integer(anchoringHelper287.getY()), new Integer(anchoringHelper287.getWidth()), new Integer(anchoringHelper287.getHeight()), new Integer(startTabIndex.intValue() + 66), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Book Theatre", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper288 = new RuntimeAnchoring(designSize, runtimeSize, 162, 1712, 75, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1258), new Integer(anchoringHelper288.getX()), new Integer(anchoringHelper288.getY()), new Integer(anchoringHelper288.getWidth()), new Integer(anchoringHelper288.getHeight()), new Integer(startTabIndex.intValue() + 67), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Add EROD", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper289 = new RuntimeAnchoring(designSize, runtimeSize, 328, 1712, 112, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1259), new Integer(anchoringHelper289.getX()), new Integer(anchoringHelper289.getY()), new Integer(anchoringHelper289.getWidth()), new Integer(anchoringHelper289.getHeight()), new Integer(startTabIndex.intValue() + 68), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Summary", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper290 = new RuntimeAnchoring(designSize, runtimeSize, 446, 1712, 109, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1260), new Integer(anchoringHelper290.getX()), new Integer(anchoringHelper290.getY()), new Integer(anchoringHelper290.getWidth()), new Integer(anchoringHelper290.getHeight()), new Integer(startTabIndex.intValue() + 69), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper291 = new RuntimeAnchoring(designSize, runtimeSize, 561, 1712, 112, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1261), new Integer(anchoringHelper291.getX()), new Integer(anchoringHelper291.getY()), new Integer(anchoringHelper291.getWidth()), new Integer(anchoringHelper291.getHeight()), new Integer(startTabIndex.intValue() + 70), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed Management Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper292 = new RuntimeAnchoring(designSize, runtimeSize, 728, 1199, 88, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1262), new Integer(anchoringHelper292.getX()), new Integer(anchoringHelper292.getY()), new Integer(anchoringHelper292.getWidth()), new Integer(anchoringHelper292.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Record in Error", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper293 = new RuntimeAnchoring(designSize, runtimeSize, 744, 1400, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1263), new Integer(anchoringHelper293.getX()), new Integer(anchoringHelper293.getY()), new Integer(anchoringHelper293.getWidth()), new Integer(anchoringHelper293.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper294 = new RuntimeAnchoring(designSize, runtimeSize, 664, 1400, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1264), new Integer(anchoringHelper294.getX()), new Integer(anchoringHelper294.getY()), new Integer(anchoringHelper294.getWidth()), new Integer(anchoringHelper294.getHeight()), new Integer(startTabIndex.intValue() + 60), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper295 = new RuntimeAnchoring(designSize, runtimeSize, 9, 1400, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1265), new Integer(anchoringHelper295.getX()), new Integer(anchoringHelper295.getY()), new Integer(anchoringHelper295.getWidth()), new Integer(anchoringHelper295.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper296 = new RuntimeAnchoring(designSize, runtimeSize, 744, 964, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1266), new Integer(anchoringHelper296.getX()), new Integer(anchoringHelper296.getY()), new Integer(anchoringHelper296.getWidth()), new Integer(anchoringHelper296.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Print TCI", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper297 = new RuntimeAnchoring(designSize, runtimeSize, 744, 936, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1267), new Integer(anchoringHelper297.getX()), new Integer(anchoringHelper297.getY()), new Integer(anchoringHelper297.getWidth()), new Integer(anchoringHelper297.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DNA", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper298 = new RuntimeAnchoring(designSize, runtimeSize, 664, 1128, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1268), new Integer(anchoringHelper298.getX()), new Integer(anchoringHelper298.getY()), new Integer(anchoringHelper298.getWidth()), new Integer(anchoringHelper298.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper299 = new RuntimeAnchoring(designSize, runtimeSize, 744, 1128, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1269), new Integer(anchoringHelper299.getX()), new Integer(anchoringHelper299.getY()), new Integer(anchoringHelper299.getWidth()), new Integer(anchoringHelper299.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper300 = new RuntimeAnchoring(designSize, runtimeSize, 5, 1128, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1270), new Integer(anchoringHelper300.getX()), new Integer(anchoringHelper300.getY()), new Integer(anchoringHelper300.getWidth()), new Integer(anchoringHelper300.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper301 = new RuntimeAnchoring(designSize, runtimeSize, 744, 908, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1271), new Integer(anchoringHelper301.getX()), new Integer(anchoringHelper301.getY()), new Integer(anchoringHelper301.getWidth()), new Integer(anchoringHelper301.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel TCI", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper302 = new RuntimeAnchoring(designSize, runtimeSize, 749, 88, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1272), new Integer(anchoringHelper302.getX()), new Integer(anchoringHelper302.getY()), new Integer(anchoringHelper302.getWidth()), new Integer(anchoringHelper302.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper303 = new RuntimeAnchoring(designSize, runtimeSize, 672, 88, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1273), new Integer(anchoringHelper303.getX()), new Integer(anchoringHelper303.getY()), new Integer(anchoringHelper303.getWidth()), new Integer(anchoringHelper303.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper304 = new RuntimeAnchoring(designSize, runtimeSize, 744, 88, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1274), new Integer(anchoringHelper304.getX()), new Integer(anchoringHelper304.getY()), new Integer(anchoringHelper304.getWidth()), new Integer(anchoringHelper304.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper305 = new RuntimeAnchoring(designSize, runtimeSize, 587, 88, 152, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1275), new Integer(anchoringHelper305.getX()), new Integer(anchoringHelper305.getY()), new Integer(anchoringHelper305.getWidth()), new Integer(anchoringHelper305.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-Assessment Outcome", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper306 = new RuntimeAnchoring(designSize, runtimeSize, 440, 88, 144, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1276), new Integer(anchoringHelper306.getX()), new Integer(anchoringHelper306.getY()), new Integer(anchoringHelper306.getWidth()), new Integer(anchoringHelper306.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Request", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper307 = new RuntimeAnchoring(designSize, runtimeSize, 304, 1248, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1277), new Integer(anchoringHelper307.getX()), new Integer(anchoringHelper307.getY()), new Integer(anchoringHelper307.getWidth()), new Integer(anchoringHelper307.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper308 = new RuntimeAnchoring(designSize, runtimeSize, 176, 1320, 552, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1278), new Integer(anchoringHelper308.getX()), new Integer(anchoringHelper308.getY()), new Integer(anchoringHelper308.getWidth()), new Integer(anchoringHelper308.getHeight()), new Integer(startTabIndex.intValue() + 54), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(1500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper309 = new RuntimeAnchoring(designSize, runtimeSize, 176, 1368, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1279), new Integer(anchoringHelper309.getX()), new Integer(anchoringHelper309.getY()), new Integer(anchoringHelper309.getWidth()), new Integer(anchoringHelper309.getHeight()), new Integer(startTabIndex.intValue() + 56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper310 = new RuntimeAnchoring(designSize, runtimeSize, 176, 1272, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1280), new Integer(anchoringHelper310.getX()), new Integer(anchoringHelper310.getY()), new Integer(anchoringHelper310.getWidth()), new Integer(anchoringHelper310.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper311 = new RuntimeAnchoring(designSize, runtimeSize, 176, 1247, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1281), new Integer(anchoringHelper311.getX()), new Integer(anchoringHelper311.getY()), new Integer(anchoringHelper311.getWidth()), new Integer(anchoringHelper311.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper312 = new RuntimeAnchoring(designSize, runtimeSize, 176, 1200, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1282), new Integer(anchoringHelper312.getX()), new Integer(anchoringHelper312.getY()), new Integer(anchoringHelper312.getWidth()), new Integer(anchoringHelper312.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper313 = new RuntimeAnchoring(designSize, runtimeSize, 304, 1072, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1283), new Integer(anchoringHelper313.getX()), new Integer(anchoringHelper313.getY()), new Integer(anchoringHelper313.getWidth()), new Integer(anchoringHelper313.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper314 = new RuntimeAnchoring(designSize, runtimeSize, 552, 1046, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1284), new Integer(anchoringHelper314.getX()), new Integer(anchoringHelper314.getY()), new Integer(anchoringHelper314.getWidth()), new Integer(anchoringHelper314.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper315 = new RuntimeAnchoring(designSize, runtimeSize, 224, 920, 119, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1285), new Integer(anchoringHelper315.getX()), new Integer(anchoringHelper315.getY()), new Integer(anchoringHelper315.getWidth()), new Integer(anchoringHelper315.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper316 = new RuntimeAnchoring(designSize, runtimeSize, 224, 1016, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1286), new Integer(anchoringHelper316.getX()), new Integer(anchoringHelper316.getY()), new Integer(anchoringHelper316.getWidth()), new Integer(anchoringHelper316.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
	
			// Date Time Controls
			RuntimeAnchoring anchoringHelper317 = new RuntimeAnchoring(designSize, runtimeSize, 149, 814, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1287), new Integer(anchoringHelper317.getX()), new Integer(anchoringHelper317.getY()), new Integer(anchoringHelper317.getWidth()), new Integer(anchoringHelper317.getHeight()), new Integer(startTabIndex.intValue() + 77), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper318 = new RuntimeAnchoring(designSize, runtimeSize, 520, 118, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbPatientCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1288), new Integer(anchoringHelper318.getX()), new Integer(anchoringHelper318.getY()), new Integer(anchoringHelper318.getWidth()), new Integer(anchoringHelper318.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbPatientCategoryTemp);
			cmbPatientCategoryComboBox cmbPatientCategory = (cmbPatientCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientCategoryComboBox.class, m_cmbPatientCategoryTemp);
			super.addComboBox(cmbPatientCategory);
			RuntimeAnchoring anchoringHelper319 = new RuntimeAnchoring(designSize, runtimeSize, 176, 1296, 552, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbERODReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1289), new Integer(anchoringHelper319.getX()), new Integer(anchoringHelper319.getY()), new Integer(anchoringHelper319.getWidth()), new Integer(anchoringHelper319.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbERODReasonTemp);
			cmbERODReasonComboBox cmbERODReason = (cmbERODReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbERODReasonComboBox.class, m_cmbERODReasonTemp);
			super.addComboBox(cmbERODReason);
			RuntimeAnchoring anchoringHelper320 = new RuntimeAnchoring(designSize, runtimeSize, 552, 1072, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbReasonDeclinedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1290), new Integer(anchoringHelper320.getX()), new Integer(anchoringHelper320.getY()), new Integer(anchoringHelper320.getWidth()), new Integer(anchoringHelper320.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbReasonDeclinedTemp);
			cmbReasonDeclinedComboBox cmbReasonDeclined = (cmbReasonDeclinedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonDeclinedComboBox.class, m_cmbReasonDeclinedTemp);
			super.addComboBox(cmbReasonDeclined);
			RuntimeAnchoring anchoringHelper321 = new RuntimeAnchoring(designSize, runtimeSize, 224, 1096, 504, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbTCOOfferedMethodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1291), new Integer(anchoringHelper321.getX()), new Integer(anchoringHelper321.getY()), new Integer(anchoringHelper321.getWidth()), new Integer(anchoringHelper321.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbTCOOfferedMethodTemp);
			cmbTCOOfferedMethodComboBox cmbTCOOfferedMethod = (cmbTCOOfferedMethodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTCOOfferedMethodComboBox.class, m_cmbTCOOfferedMethodTemp);
			super.addComboBox(cmbTCOOfferedMethod);
			RuntimeAnchoring anchoringHelper322 = new RuntimeAnchoring(designSize, runtimeSize, 224, 992, 504, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbBreachReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1292), new Integer(anchoringHelper322.getX()), new Integer(anchoringHelper322.getY()), new Integer(anchoringHelper322.getWidth()), new Integer(anchoringHelper322.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbBreachReasonTemp);
			cmbBreachReasonComboBox cmbBreachReason = (cmbBreachReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBreachReasonComboBox.class, m_cmbBreachReasonTemp);
			super.addComboBox(cmbBreachReason);
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper323 = new RuntimeAnchoring(designSize, runtimeSize, 224, 968, 504, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_qmbTCIWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1293), new Integer(anchoringHelper323.getX()), new Integer(anchoringHelper323.getY()), new Integer(anchoringHelper323.getWidth()), new Integer(anchoringHelper323.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbTCIWardTemp);
			qmbTCIWardComboBox qmbTCIWard = (qmbTCIWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbTCIWardComboBox.class, m_qmbTCIWardTemp);
			super.addComboBox(qmbTCIWard);
			RuntimeAnchoring anchoringHelper324 = new RuntimeAnchoring(designSize, runtimeSize, 224, 944, 504, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_qmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1294), new Integer(anchoringHelper324.getX()), new Integer(anchoringHelper324.getY()), new Integer(anchoringHelper324.getWidth()), new Integer(anchoringHelper324.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbHospitalTemp);
			qmbHospitalComboBox qmbHospital = (qmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHospitalComboBox.class, m_qmbHospitalTemp);
			super.addComboBox(qmbHospital);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper325 = new RuntimeAnchoring(designSize, runtimeSize, 176, 1226, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1295), new Integer(anchoringHelper325.getX()), new Integer(anchoringHelper325.getY()), new Integer(anchoringHelper325.getWidth()), new Integer(anchoringHelper325.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Extended Delay", Boolean.TRUE, null}));
	
			// Time Controls
			RuntimeAnchoring anchoringHelper326 = new RuntimeAnchoring(designSize, runtimeSize, 352, 920, 45, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1296), new Integer(anchoringHelper326.getX()), new Integer(anchoringHelper326.getY()), new Integer(anchoringHelper326.getWidth()), new Integer(anchoringHelper326.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
	
			// RadioButton Controls
			RadioButton tmpGroupElectiveList = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1297), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupElectiveList);
			GroupElectiveListRadioButton GroupElectiveList = (GroupElectiveListRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListRadioButton.class, tmpGroupElectiveList);
			GroupElectiveList.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupElectiveList);
			RadioButton tmpGroupWasReasonable = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1298), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupWasReasonable);
			GroupWasReasonableRadioButton GroupWasReasonable = (GroupWasReasonableRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupWasReasonableRadioButton.class, tmpGroupWasReasonable);
			GroupWasReasonable.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupWasReasonable);
			RadioButton tmpGroupAdmissionType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1299), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupAdmissionType);
			GroupAdmissionTypeRadioButton GroupAdmissionType = (GroupAdmissionTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAdmissionTypeRadioButton.class, tmpGroupAdmissionType);
			GroupAdmissionType.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupAdmissionType);
	
			// Horizontal Line Controls
			RuntimeAnchoring anchoringHelper327 = new RuntimeAnchoring(designSize, runtimeSize, 8, 72, 808, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1300), new Integer(anchoringHelper327.getX()), new Integer(anchoringHelper327.getY()), new Integer(anchoringHelper327.getWidth()), new Integer(anchoringHelper327.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
		}
		public Panel pnl2()
		{
			return (Panel)super.getControl(0);
		}
		public Panel pnl1()
		{
			return (Panel)super.getControl(1);
		}
		public ims.core.forms.authoringinfo.IComponent ccAuthoringHCP()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
		}
		public void setccAuthoringHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
		}
		public void setccAuthoringHCPVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setVisible(value);
		}
		public boolean isccAuthoringHCPVisible()
		{
			return ((ims.framework.Control)super.getControl(2)).isVisible();
		}
		public void setccAuthoringHCPEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setEnabled(value);
		}
		public boolean isccAuthoringHCPEnabled()
		{
			return ((ims.framework.Control)super.getControl(2)).isEnabled();
		}
		public ims.core.forms.mosquery.IComponent ccRecordingMOS()
		{
			return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
		}
		public void setccRecordingMOSValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
		}
		public void setccRecordingMOSVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(3)).setVisible(value);
		}
		public boolean isccRecordingMOSVisible()
		{
			return ((ims.framework.Control)super.getControl(3)).isVisible();
		}
		public void setccRecordingMOSEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(3)).setEnabled(value);
		}
		public boolean isccRecordingMOSEnabled()
		{
			return ((ims.framework.Control)super.getControl(3)).isEnabled();
		}
		public lyrWaitingListDetailsLayer lyrWaitingListDetails()
		{
			return (lyrWaitingListDetailsLayer)super.getLayer(0);
		}
		public lyrHistoryLayer lyrHistory()
		{
			return (lyrHistoryLayer)super.getLayer(1);
		}
		public Label lblRecordingDateTime()
		{
			return (Label)super.getControl(10);
		}
		public Label lblRecordingMOS()
		{
			return (Label)super.getControl(11);
		}
		public Label lblReferralService()
		{
			return (Label)super.getControl(13);
		}
		public Label lblBreachDate()
		{
			return (Label)super.getControl(14);
		}
		public Label lblDateOnList()
		{
			return (Label)super.getControl(15);
		}
		public Label lblCurrentStatus()
		{
			return (Label)super.getControl(16);
		}
		public Label lbl154()
		{
			return (Label)super.getControl(18);
		}
		public Label lbl149()
		{
			return (Label)super.getControl(19);
		}
		public Label lbl150()
		{
			return (Label)super.getControl(20);
		}
		public Label lbl151()
		{
			return (Label)super.getControl(21);
		}
		public Label lbl152()
		{
			return (Label)super.getControl(22);
		}
		public Label lbl153()
		{
			return (Label)super.getControl(23);
		}
		public Label lblTheatreSession()
		{
			return (Label)super.getControl(24);
		}
		public Label lblTheatreDate()
		{
			return (Label)super.getControl(25);
		}
		public Label lblReasonDeclined()
		{
			return (Label)super.getControl(26);
		}
		public Label lblDateOfOfferSecond()
		{
			return (Label)super.getControl(27);
		}
		public Label lblTCIDateOffered()
		{
			return (Label)super.getControl(28);
		}
		public Label lblWasReasonable28DayOfferMade()
		{
			return (Label)super.getControl(29);
		}
		public Label lblTheatreSessionLabel()
		{
			return (Label)super.getControl(30);
		}
		public Label lblTheatreDataLabel()
		{
			return (Label)super.getControl(31);
		}
		public Label lbl141()
		{
			return (Label)super.getControl(32);
		}
		public Label lbl142()
		{
			return (Label)super.getControl(33);
		}
		public Label lblRTTBreachReason()
		{
			return (Label)super.getControl(34);
		}
		public Label lbl144()
		{
			return (Label)super.getControl(35);
		}
		public Label lbl145()
		{
			return (Label)super.getControl(36);
		}
		public Label lbl147()
		{
			return (Label)super.getControl(37);
		}
		public Button btnClose()
		{
			return (Button)super.getControl(43);
		}
		public Button btnAddTCI()
		{
			return (Button)super.getControl(44);
		}
		public Button btnBookTheatre()
		{
			return (Button)super.getControl(45);
		}
		public Button btnAddEROD()
		{
			return (Button)super.getControl(46);
		}
		public Button btnPatientSummary()
		{
			return (Button)super.getControl(47);
		}
		public Button btnTheatreDashboard()
		{
			return (Button)super.getControl(48);
		}
		public Button btnBedManagementDashboard()
		{
			return (Button)super.getControl(49);
		}
		public Button btnRecordERODInError()
		{
			return (Button)super.getControl(50);
		}
		public Button btnCancelEROD()
		{
			return (Button)super.getControl(51);
		}
		public Button btnSaveEROD()
		{
			return (Button)super.getControl(52);
		}
		public Button btnEditEROD()
		{
			return (Button)super.getControl(53);
		}
		public Button btnPrintTCI()
		{
			return (Button)super.getControl(54);
		}
		public Button btnDNA()
		{
			return (Button)super.getControl(55);
		}
		public Button btnSaveTCI()
		{
			return (Button)super.getControl(56);
		}
		public Button btnCancelEditTCI()
		{
			return (Button)super.getControl(57);
		}
		public Button btnEditTCI()
		{
			return (Button)super.getControl(58);
		}
		public Button btnCancelTCI()
		{
			return (Button)super.getControl(59);
		}
		public Button btnCancel()
		{
			return (Button)super.getControl(60);
		}
		public Button btnSave()
		{
			return (Button)super.getControl(61);
		}
		public Button btnEdit()
		{
			return (Button)super.getControl(62);
		}
		public Button btnPreAssessmentOutcome()
		{
			return (Button)super.getControl(63);
		}
		public Button btnElectiveListRequest()
		{
			return (Button)super.getControl(64);
		}
		public TextBox txtSecondDateOffered()
		{
			return (TextBox)super.getControl(65);
		}
		public TextBox txtERODComment()
		{
			return (TextBox)super.getControl(66);
		}
		public DateControl dteERODDateOfOffer()
		{
			return (DateControl)super.getControl(67);
		}
		public DateControl dtePatientAvailableFromDate()
		{
			return (DateControl)super.getControl(68);
		}
		public DateControl dteSecondDateOffered()
		{
			return (DateControl)super.getControl(69);
		}
		public DateControl dteEarliestDateOffered()
		{
			return (DateControl)super.getControl(70);
		}
		public DateControl dteDateOfOfferSecond()
		{
			return (DateControl)super.getControl(71);
		}
		public DateControl dteTCIDateOffered()
		{
			return (DateControl)super.getControl(72);
		}
		public DateControl dteTCIDate()
		{
			return (DateControl)super.getControl(73);
		}
		public DateControl dteDateOfOffer()
		{
			return (DateControl)super.getControl(74);
		}
		public DateTimeControl dtimRecordingDateTime()
		{
			return (DateTimeControl)super.getControl(75);
		}
		public cmbPatientCategoryComboBox cmbPatientCategory()
		{
			return (cmbPatientCategoryComboBox)super.getComboBox(0);
		}
		public cmbERODReasonComboBox cmbERODReason()
		{
			return (cmbERODReasonComboBox)super.getComboBox(1);
		}
		public cmbReasonDeclinedComboBox cmbReasonDeclined()
		{
			return (cmbReasonDeclinedComboBox)super.getComboBox(2);
		}
		public cmbTCOOfferedMethodComboBox cmbTCOOfferedMethod()
		{
			return (cmbTCOOfferedMethodComboBox)super.getComboBox(3);
		}
		public cmbBreachReasonComboBox cmbBreachReason()
		{
			return (cmbBreachReasonComboBox)super.getComboBox(4);
		}
		public qmbTCIWardComboBox qmbTCIWard()
		{
			return (qmbTCIWardComboBox)super.getComboBox(5);
		}
		public qmbHospitalComboBox qmbHospital()
		{
			return (qmbHospitalComboBox)super.getComboBox(6);
		}
		public CheckBox chkEXTDelay()
		{
			return (CheckBox)super.getControl(83);
		}
		public TimeControl timTCITime()
		{
			return (TimeControl)super.getControl(84);
		}
		public GroupElectiveListRadioButton GroupElectiveList()
		{
			return (GroupElectiveListRadioButton)super.getRadioButton(0);
		}
		public GroupWasReasonableRadioButton GroupWasReasonable()
		{
			return (GroupWasReasonableRadioButton)super.getRadioButton(1);
		}
		public GroupAdmissionTypeRadioButton GroupAdmissionType()
		{
			return (GroupAdmissionTypeRadioButton)super.getRadioButton(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.PatientElectiveListRef", "_cv_RefMan.PatientElectiveListRef").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.PatientElectiveListRef' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1 = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1ADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410001)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1ADDItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1EDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410002)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1EDITItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1VIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410003)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1VIEWItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1RIEItem = factory.createMenuItem(startControlID.intValue() + 4, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410004)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1RIEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1);
		contextMenus.RefMan.contextMenuTCIHistoryMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 5, "View Cancellation Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6350001)))
			contextMenus.RefMan.contextMenuTCIHistoryMenu.add(contextMenus.RefMan.contextMenuTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem);
		contextMenus.RefMan.contextMenuTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Cancellation Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6350004)))
			contextMenus.RefMan.contextMenuTCIHistoryMenu.add(contextMenus.RefMan.contextMenuTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem);
		contextMenus.RefMan.contextMenuTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem = factory.createMenuItem(startControlID.intValue() + 7, "Record Reasonable 28 Day Rule Offer", true, false, new Integer(102150), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6350002)))
			contextMenus.RefMan.contextMenuTCIHistoryMenu.add(contextMenus.RefMan.contextMenuTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem);
		contextMenus.RefMan.contextMenuTCIHistoryMenuVIEW_TCI_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 8, "View TCI Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6350003)))
			contextMenus.RefMan.contextMenuTCIHistoryMenu.add(contextMenus.RefMan.contextMenuTCIHistoryMenuVIEW_TCI_DETAILSItem);
		form.registerMenu(contextMenus.RefMan.contextMenuTCIHistoryMenu);
		contextMenus.RefMan.contextMenuERODHistoryMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.RefMan.contextMenuERODHistoryMenuVIEW_ERODItem = factory.createMenuItem(startControlID.intValue() + 9, "View EROD", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6440001)))
			contextMenus.RefMan.contextMenuERODHistoryMenu.add(contextMenus.RefMan.contextMenuERODHistoryMenuVIEW_ERODItem);
		form.registerMenu(contextMenus.RefMan.contextMenuERODHistoryMenu);


		// Container Clasess
		RuntimeAnchoring anchoringHelper328 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 632, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1301), new Integer(anchoringHelper328.getX()), new Integer(anchoringHelper328.getY()), new Integer(anchoringHelper328.getWidth()), new Integer(anchoringHelper328.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, new Boolean(false)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(848, 632);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper328.getWidth(), anchoringHelper328.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				CancelTCIForPatientElectiveListDialog = new LocalFormName(134227);
				RecordReasonable28DayRuleOffer = new LocalFormName(134285);
				BookTheatreSlot = new LocalFormName(134208);
				PreAssessmentOutcomeDlg = new LocalFormName(134273);
				PatientElectiveListNotes = new LocalFormName(134228);
				ElectiveListAddLaterDialog = new LocalFormName(134247);
				ERODDetails = new LocalFormName(134284);
				TCIDetails = new LocalFormName(134289);
			}
			public final FormName CancelTCIForPatientElectiveListDialog;
			public final FormName RecordReasonable28DayRuleOffer;
			public final FormName BookTheatreSlot;
			public final FormName PreAssessmentOutcomeDlg;
			public final FormName PatientElectiveListNotes;
			public final FormName ElectiveListAddLaterDialog;
			public final FormName ERODDetails;
			public final FormName TCIDetails;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
				PrintReportByIMSId = new LocalFormName(102403);
			}
			public final FormName RieConfirmationDialog;
			public final FormName PrintReportByIMSId;
		}

		public RefManForms RefMan;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			RefMan = new RefManImages();
			Core = new CoreImages();
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Appointment16 = new ImageHelper(134121, "Images/RefMan/appointment_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Appointment16;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				TCI_amended16 = new ImageHelper(102686, "Images/Core/TCI_amended16.png", new Integer(16), new Integer(16));
				TCI_cancelled16 = new ImageHelper(102687, "Images/Core/TCI_cancelled16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image TCI_amended16;
			public final ims.framework.utils.Image TCI_cancelled16;
		}
		public final RefManImages RefMan;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_ShowSecondSurgicalProcedure = new ims.framework.ContextVariable("ShowSecondSurgicalProcedure", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ShowSecondSurgicalProcedure_" + componentIdentifier + "");
			cxl_ShowSecondMedicalProcedure = new ims.framework.ContextVariable("ShowSecondMedicalProcedure", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ShowSecondMedicalProcedure_" + componentIdentifier + "");
			cxl_IsVisibleSurgicalTheatreType = new ims.framework.ContextVariable("IsVisibleSurgicalTheatreType", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__IsVisibleSurgicalTheatreType_" + componentIdentifier + "");
			cxl_RequestFormMode = new ims.framework.ContextVariable("RequestFormMode", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__RequestFormMode_" + componentIdentifier + "");
			cxl_TCIFormMode = new ims.framework.ContextVariable("TCIFormMode", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__TCIFormMode_" + componentIdentifier + "");
			cxl_ERODFormMode = new ims.framework.ContextVariable("ERODFormMode", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODFormMode_" + componentIdentifier + "");
			cxl_DNAMessageBoxId = new ims.framework.ContextVariable("DNAMessageBoxId", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__DNAMessageBoxId_" + componentIdentifier + "");
			cxl_ERODRieRecord = new ims.framework.ContextVariable("ERODRieRecord", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier + "");
			cxl_NotesRieRecord = new ims.framework.ContextVariable("NotesRieRecord", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__NotesRieRecord_" + componentIdentifier + "");
			cxl_ViewModeOnly = new ims.framework.ContextVariable("ViewModeOnly", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ViewModeOnly_" + componentIdentifier + "");
			cxl_ElectiveListAction = new ims.framework.ContextVariable("ElectiveListAction", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ElectiveListAction_" + componentIdentifier + "");
			cxl_LoggedInUser = new ims.framework.ContextVariable("LoggedInUser", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__LoggedInUser_" + componentIdentifier + "");
			cxl_isLoggedInUserMedicByHcpAndService = new ims.framework.ContextVariable("isLoggedInUserMedicByHcpAndService", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__isLoggedInUserMedicByHcpAndService_" + componentIdentifier + "");
			cxl_HcpLiteUser = new ims.framework.ContextVariable("HcpLiteUser", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__HcpLiteUser_" + componentIdentifier + "");
			cxl_DeniedActions = new ims.framework.ContextVariable("DeniedActions", prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__DeniedActions_" + componentIdentifier + "");
		}
		
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListDetailsVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListDetailsVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListDetailsVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getShowSecondSurgicalProcedureIsNotNull()
		{
			return !cxl_ShowSecondSurgicalProcedure.getValueIsNull(context);
		}
		public Boolean getShowSecondSurgicalProcedure()
		{
			return (Boolean)cxl_ShowSecondSurgicalProcedure.getValue(context);
		}
		public void setShowSecondSurgicalProcedure(Boolean value)
		{
			cxl_ShowSecondSurgicalProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowSecondSurgicalProcedure = null;
		public boolean getShowSecondMedicalProcedureIsNotNull()
		{
			return !cxl_ShowSecondMedicalProcedure.getValueIsNull(context);
		}
		public Boolean getShowSecondMedicalProcedure()
		{
			return (Boolean)cxl_ShowSecondMedicalProcedure.getValue(context);
		}
		public void setShowSecondMedicalProcedure(Boolean value)
		{
			cxl_ShowSecondMedicalProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowSecondMedicalProcedure = null;
		public boolean getIsVisibleSurgicalTheatreTypeIsNotNull()
		{
			return !cxl_IsVisibleSurgicalTheatreType.getValueIsNull(context);
		}
		public Boolean getIsVisibleSurgicalTheatreType()
		{
			return (Boolean)cxl_IsVisibleSurgicalTheatreType.getValue(context);
		}
		public void setIsVisibleSurgicalTheatreType(Boolean value)
		{
			cxl_IsVisibleSurgicalTheatreType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsVisibleSurgicalTheatreType = null;
		public boolean getRequestFormModeIsNotNull()
		{
			return !cxl_RequestFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getRequestFormMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_RequestFormMode.getValue(context);
		}
		public void setRequestFormMode(ims.framework.enumerations.FormMode value)
		{
			cxl_RequestFormMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RequestFormMode = null;
		public boolean getTCIFormModeIsNotNull()
		{
			return !cxl_TCIFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getTCIFormMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_TCIFormMode.getValue(context);
		}
		public void setTCIFormMode(ims.framework.enumerations.FormMode value)
		{
			cxl_TCIFormMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TCIFormMode = null;
		public boolean getERODFormModeIsNotNull()
		{
			return !cxl_ERODFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getERODFormMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_ERODFormMode.getValue(context);
		}
		public void setERODFormMode(ims.framework.enumerations.FormMode value)
		{
			cxl_ERODFormMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ERODFormMode = null;
		public boolean getDNAMessageBoxIdIsNotNull()
		{
			return !cxl_DNAMessageBoxId.getValueIsNull(context);
		}
		public Integer getDNAMessageBoxId()
		{
			return (Integer)cxl_DNAMessageBoxId.getValue(context);
		}
		public void setDNAMessageBoxId(Integer value)
		{
			cxl_DNAMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DNAMessageBoxId = null;
		public boolean getERODRieRecordIsNotNull()
		{
			return !cxl_ERODRieRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListDetailsVo getERODRieRecord()
		{
			return (ims.RefMan.vo.PatientElectiveListDetailsVo)cxl_ERODRieRecord.getValue(context);
		}
		public void setERODRieRecord(ims.RefMan.vo.PatientElectiveListDetailsVo value)
		{
			cxl_ERODRieRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ERODRieRecord = null;
		public boolean getNotesRieRecordIsNotNull()
		{
			return !cxl_NotesRieRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListNotesVo getNotesRieRecord()
		{
			return (ims.RefMan.vo.PatientElectiveListNotesVo)cxl_NotesRieRecord.getValue(context);
		}
		public void setNotesRieRecord(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			cxl_NotesRieRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NotesRieRecord = null;
		public boolean getViewModeOnlyIsNotNull()
		{
			return !cxl_ViewModeOnly.getValueIsNull(context);
		}
		public Boolean getViewModeOnly()
		{
			return (Boolean)cxl_ViewModeOnly.getValue(context);
		}
		public void setViewModeOnly(Boolean value)
		{
			cxl_ViewModeOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ViewModeOnly = null;
		public boolean getElectiveListActionIsNotNull()
		{
			return !cxl_ElectiveListAction.getValueIsNull(context);
		}
		public ims.admin.vo.enums.ElectiveListDetails getElectiveListAction()
		{
			return (ims.admin.vo.enums.ElectiveListDetails)cxl_ElectiveListAction.getValue(context);
		}
		public void setElectiveListAction(ims.admin.vo.enums.ElectiveListDetails value)
		{
			cxl_ElectiveListAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ElectiveListAction = null;
		public boolean getLoggedInUserIsNotNull()
		{
			return !cxl_LoggedInUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getLoggedInUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_LoggedInUser.getValue(context);
		}
		public void setLoggedInUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_LoggedInUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedInUser = null;
		public boolean getisLoggedInUserMedicByHcpAndServiceIsNotNull()
		{
			return !cxl_isLoggedInUserMedicByHcpAndService.getValueIsNull(context);
		}
		public Boolean getisLoggedInUserMedicByHcpAndService()
		{
			return (Boolean)cxl_isLoggedInUserMedicByHcpAndService.getValue(context);
		}
		public void setisLoggedInUserMedicByHcpAndService(Boolean value)
		{
			cxl_isLoggedInUserMedicByHcpAndService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isLoggedInUserMedicByHcpAndService = null;
		public boolean getHcpLiteUserIsNotNull()
		{
			return !cxl_HcpLiteUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getHcpLiteUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_HcpLiteUser.getValue(context);
		}
		public void setHcpLiteUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_HcpLiteUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HcpLiteUser = null;
		public boolean getDeniedActionsIsNotNull()
		{
			return !cxl_DeniedActions.getValueIsNull(context);
		}
		public java.util.List<ims.RefMan.vo.enums.TCIHistoryActions> getDeniedActions()
		{
			return (java.util.List<ims.RefMan.vo.enums.TCIHistoryActions>)cxl_DeniedActions.getValue(context);
		}
		public void setDeniedActions(java.util.List<ims.RefMan.vo.enums.TCIHistoryActions> value)
		{
			cxl_DeniedActions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeniedActions = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class NewElectiveListNotesMenu1 implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int VIEW = 3;
				public static final int RIE = 4;
			}
			public void disableAllNewElectiveListNotesMenu1MenuItems()
			{
				this.contextMenuNewElectiveListNotesMenu1ADDItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu1EDITItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu1VIEWItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu1RIEItem.setEnabled(false);
			}
			public void hideAllNewElectiveListNotesMenu1MenuItems()
			{
				this.contextMenuNewElectiveListNotesMenu1ADDItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu1EDITItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu1VIEWItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu1RIEItem.setVisible(false);
			}
			private Menu contextMenuNewElectiveListNotesMenu1;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1ADDItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1ADDItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1ADDItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1EDITItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1EDITItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1EDITItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1VIEWItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1VIEWItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1VIEWItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1RIEItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1RIEItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1RIEItem;
			public final class TCIHistoryMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW_EDIT_CANCELLATION_DETAILS = 5;
				public static final int EDIT_CANCELLATION_DETAILS = 6;
				public static final int RECORD_REASONABLE_28_DAY_RULE_OFFER = 7;
				public static final int VIEW_TCI_DETAILS = 8;
			}
			public void disableAllTCIHistoryMenuMenuItems()
			{
				this.contextMenuTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem.setEnabled(false);
				this.contextMenuTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem.setEnabled(false);
				this.contextMenuTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem.setEnabled(false);
				this.contextMenuTCIHistoryMenuVIEW_TCI_DETAILSItem.setEnabled(false);
			}
			public void hideAllTCIHistoryMenuMenuItems()
			{
				this.contextMenuTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem.setVisible(false);
				this.contextMenuTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem.setVisible(false);
				this.contextMenuTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem.setVisible(false);
				this.contextMenuTCIHistoryMenuVIEW_TCI_DETAILSItem.setVisible(false);
			}
			private Menu contextMenuTCIHistoryMenu;
			public ReadOnlyMenuItem getTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem()
			{
				return this.contextMenuTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem;
			}
			private MenuItem contextMenuTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem;
			public ReadOnlyMenuItem getTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem()
			{
				return this.contextMenuTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem;
			}
			private MenuItem contextMenuTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem;
			public ReadOnlyMenuItem getTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem()
			{
				return this.contextMenuTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem;
			}
			private MenuItem contextMenuTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem;
			public ReadOnlyMenuItem getTCIHistoryMenuVIEW_TCI_DETAILSItem()
			{
				return this.contextMenuTCIHistoryMenuVIEW_TCI_DETAILSItem;
			}
			private MenuItem contextMenuTCIHistoryMenuVIEW_TCI_DETAILSItem;
			public final class ERODHistoryMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW_EROD = 9;
			}
			public void disableAllERODHistoryMenuMenuItems()
			{
				this.contextMenuERODHistoryMenuVIEW_ERODItem.setEnabled(false);
			}
			public void hideAllERODHistoryMenuMenuItems()
			{
				this.contextMenuERODHistoryMenuVIEW_ERODItem.setVisible(false);
			}
			private Menu contextMenuERODHistoryMenu;
			public ReadOnlyMenuItem getERODHistoryMenuVIEW_ERODItem()
			{
				return this.contextMenuERODHistoryMenuVIEW_ERODItem;
			}
			private MenuItem contextMenuERODHistoryMenuVIEW_ERODItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[323];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-ID", "ID_TCIOutcomeForPatientElectiveList");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOME", "Outcome");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CHANGEBY", "ChangeBy");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-STATUSDATETIME", "StatusDateTime");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOMEREASON", "OutcomeReason");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CANCELLEDFORNONMEDICALREASON", "CancelledForNonMedicalReason");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CANCELLATIONREASON", "CancellationReason");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-REASONCOMMENTS", "ReasonComments");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListNotes", "BO-1096100065-ID", "ID_NotesForPatientElectiveList");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListNotes", "BO-1096100065-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListNotes", "BO-1096100065-NOTES", "Notes");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-ID", "ID_TCIForPatientElectiveList");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-TCIDATE", "TCIDate");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-TCITIME", "TCITime");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-RTTBREACHREASON", "RTTBreachReason");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-TCIOFFERMETHOD", "TCIOfferMethod");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-DATETCIOFFERED", "DateTCIOffered");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-ISACTIVE", "IsActive");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-DAY28BREACHREASON", "Day28BreachReason");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-WASREASONABLE28DAYOFFERMADE", "WasReasonable28dayOfferMade");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-_28DAYTCIDATEOFFERED", "DayTCIDate28Offered");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-_28DATEOFOFFER", "Date28OfOffer");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-_28REASONDECLINED", "ReasonDeclined28");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-SUBJECTTO28DAYRULE", "SubjectTo28DayRule");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-RULE28DAYSTATUS", "Rule28DayStatus");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-RULE28DAYPERIODSTART", "Rule28DayPeriodStart");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-PLANNEDTCIDATE", "PlannedTCIDate");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIHistorySelected", "BO-1096100064-COMMENTS", "Comments");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ID", "ID_ReferralEROD");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ERODTYPE", "ERODType");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-SEQUENCE", "Sequence");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ISACTIVE", "IsActive");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ERODREASON", "ERODReason");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedEROD", "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedTCIHistory", "BO-1096100064-ID", "ID_TCIForPatientElectiveList");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDIN", "ToBePlannedIn");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDINUNIT", "ToBePlannedInUnit");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PLANNEDDATE", "PlannedDate");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WASPOSSIBLEDATEGIVEN", "WasPossibleDateGiven");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEGIVENTOPATIENT", "DateGivenToPatient");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CRITICALCAREBEDREQUIRED", "CriticalCareBedRequired");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANAESTHESISRISKASSESSMENTREQUEST", "AnaesthesisRiskAssessmentRequest");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-FOLLOWPERIOPERATIVEGUIDELINES", "FollowPeriOperativeguidelines");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PERIOPNOREASONCOMMENTS", "PeriOpNoReasonComments");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-LANGUAGE", "Language");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-COMMENTS", "Comments");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SUSPECTEDGIBLEED", "SuspectedGIBleed");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-POINTS", "Points");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SUITABLEFORTRAINING", "SuitableforTraining");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CANNURSECARRYOUTPROCEDURE", "CanNurseCarryOutProcedure");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-MEDICATIONSHOULDBESTOPPEDORALBOWELPREP", "MedicationShouldBeStoppedOralBowelPrep");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DRUGINFORMATION", "DrugInformation");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-HASPACEMAKERDEFIB", "HasPacemakerDefib");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-RENALFUNCTIONASSESSMENT", "RenalFunctionAssessment");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ARETHEREKEYTHERAPEUTIC", "AreThereKeyTherapeutic");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-COGNITIVECOMMENTS", "CognitiveComments");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DETAILSFORNONGAENDOPROCEDURE", "DetailsForNonGAEndoProcedure");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CURRENTSUSPENSIONENDDATE", "CurrentSuspensionEndDate");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-NUMBEROFPROVIDERTCICANCELLATIONS", "NumberOfProviderTCICancellations");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-FITFORSURGERY", "FitForSurgery");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTRECEIVINGANTICOAGULANTTHERAPY", "PatientReceivingAnticoagulantTherapy");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SUBJECTTO28DAYRULE", "SubjectTo28DayRule");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-RULE28DAYSTATUS", "Rule28DayStatus");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-RULE28DAYPERIODSTART", "Rule28DayPeriodStart");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REQUIRESVETTING", "RequiresVetting");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRECOLONOSCOPYASSESSMENTREQUIRED", "PreColonoscopyAssessmentRequired");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDIN", "ToBePlannedIn");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-TOBEPLANNEDINUNIT", "ToBePlannedInUnit");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PLANNEDDATE", "PlannedDate");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-WASPOSSIBLEDATEGIVEN", "WasPossibleDateGiven");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-DATEGIVENTOPATIENT", "DateGivenToPatient");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-CRITICALCAREBEDREQUIRED", "CriticalCareBedRequired");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ANAESTHESISRISKASSESSMENTREQUEST", "AnaesthesisRiskAssessmentRequest");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-FOLLOWPERIOPERATIVEGUIDELINES", "FollowPeriOperativeguidelines");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PERIOPNOREASONCOMMENTS", "PeriOpNoReasonComments");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-LANGUAGE", "Language");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-COMMENTS", "Comments");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-SUSPECTEDGIBLEED", "SuspectedGIBleed");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-POINTS", "Points");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-SUITABLEFORTRAINING", "SuitableforTraining");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-CANNURSECARRYOUTPROCEDURE", "CanNurseCarryOutProcedure");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-MEDICATIONSHOULDBESTOPPEDORALBOWELPREP", "MedicationShouldBeStoppedOralBowelPrep");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-DRUGINFORMATION", "DrugInformation");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-HASPACEMAKERDEFIB", "HasPacemakerDefib");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-RENALFUNCTIONASSESSMENT", "RenalFunctionAssessment");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ARETHEREKEYTHERAPEUTIC", "AreThereKeyTherapeutic");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-COGNITIVECOMMENTS", "CognitiveComments");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-DETAILSFORNONGAENDOPROCEDURE", "DetailsForNonGAEndoProcedure");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-CURRENTSUSPENSIONENDDATE", "CurrentSuspensionEndDate");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[292] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[293] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-NUMBEROFPROVIDERTCICANCELLATIONS", "NumberOfProviderTCICancellations");
			fields[294] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-FITFORSURGERY", "FitForSurgery");
			fields[295] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[296] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[297] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[298] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[299] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[300] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PATIENTRECEIVINGANTICOAGULANTTHERAPY", "PatientReceivingAnticoagulantTherapy");
			fields[301] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[302] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-SUBJECTTO28DAYRULE", "SubjectTo28DayRule");
			fields[303] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-RULE28DAYSTATUS", "Rule28DayStatus");
			fields[304] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-RULE28DAYPERIODSTART", "Rule28DayPeriodStart");
			fields[305] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[306] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-REQUIRESVETTING", "RequiresVetting");
			fields[307] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__ERODRieRecord_" + componentIdentifier, "BO-1014100020-PRECOLONOSCOPYASSESSMENTREQUIRED", "PreColonoscopyAssessmentRequired");
			fields[308] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__NotesRieRecord_" + componentIdentifier, "BO-1096100065-ID", "ID_NotesForPatientElectiveList");
			fields[309] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__NotesRieRecord_" + componentIdentifier, "BO-1096100065-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[310] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__NotesRieRecord_" + componentIdentifier, "BO-1096100065-NOTES", "Notes");
			fields[311] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[312] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[313] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[314] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[315] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[316] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[317] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[318] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[319] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[320] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[321] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[322] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListDetails.__internal_x_context__HcpLiteUser_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
