//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.electivelistdetails;

import ims.admin.vo.ElectiveListConfigLiteVo;
import ims.admin.vo.MenuActionVo;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.GroupAdmissionTypeEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.GroupElectiveListEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.GroupWasReasonableEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrHistoryLayer.tabPageErodHistoryContainer.grdERODHistoryRow;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrHistoryLayer.tabPageNotesContainer.grdNoteCommentsRow;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrHistoryLayer.tabPageTCIHistoryContainer.grdTCIHistoryRow;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupAnticoagulantReceivingEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupAssessmentOfRenalFunctionEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupElectiveListReasonEndoscopyEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupGeneralAnaestheticEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupKeyTherapeuticEquipmentEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupPatientMedicationStopEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupPlanedProceduresEndoscopyEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupPrecolonoscopyReqEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupProcCarriedByNurseEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageMedicalContainer.GroupElectiveListReasonMedicalEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageMedicalContainer.GroupPlanedProceduresMedicalEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupDaySurgMainTheatreEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupElectiveListReasonEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupPerioperativeEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupPlanedProceduresSurgicalEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupProcedureCarriedOutEnumeration;
import ims.RefMan.forms.electivelistdetails.GenForm.ctnDetailsContainer.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupQuestion1Enumeration;
import ims.RefMan.vo.BookingAppointmentForTCIVo;
import ims.RefMan.vo.ElectiveListHospitalConfigurationWLVoCollection;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListDetailsVo;
import ims.RefMan.vo.PatientElectiveListNotesVo;
import ims.RefMan.vo.PatientElectiveListNotesVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PreAssessmentOutcomeForElectiveListDetailsVo;
import ims.RefMan.vo.ReferralERODDetailsVo;
import ims.RefMan.vo.ReferralERODDetailsVoCollection;
import ims.RefMan.vo.TCIForPatientElectiveListDetailsVo;
import ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.enums.TCIHistoryActions;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.RefMan.vo.lookups.ProcedureExecutant;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.RefMan.vo.lookups.WaitingCardAdmissionType;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ProcedureEndoscopyType;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.UrlParam;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentLiteVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;
	private static final int PATIENTAGEFORPREASSESSMENTREQUIRED = 16;
	
	private static final int DAY28 = 28;
	private static final int DAY21 = 21;
	
	private static int EDIT_TCI_CANCELLATION = 6350004;
	
	private static final int TCI_DETAILS_IMSID = 361; //WDEV-23354
	private static final String ELECTIVE_LIST = "PatientElectiveList_id"; //WDEV-23354
	
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialise(args);
		open();
	}

	private void initialise(Object[] args)
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblCompleteAPaper().setTextColor(Color.Red);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPleaserequestUAndEsCreatinineandeGFR().setTextColor(Color.Red);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblEmailLetterToPreAssessmnetAnaesthetist().setTextColor(Color.Red);
		form.getLocalContext().setDeniedActions(listDeniedActionForCurrentUser());
		HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
		if(tempVo instanceof HcpLiteVo)
		{
			form.getLocalContext().setHcpLiteUser((HcpLiteVo) tempVo);
		}
		
		if (args != null && args.length > 0 && args[0] != null)
		{
			if(args[0] instanceof Boolean)
			{
				form.getLocalContext().setViewModeOnly((Boolean) args[0]);
			}
			/*else if(args[0] instanceof ElectiveListDetails)
			{
				form.getLocalContext().setElectiveListAction((ElectiveListDetails) args[0]);
			}*/
		}
		
		//wdev-22222
		form.getLocalContext().setPatientElectiveList(domain.get(form.getGlobalContext().RefMan.getPatientElectiveListRef()));
		if( form.getLocalContext().getPatientElectiveListIsNotNull() 
				&& form.getLocalContext().getPatientElectiveList().getReferralIsNotNull() 
				&& ( !form.getLocalContext().getPatientElectiveList().getReferral().getUrgencyIsNotNull()  
						|| (!ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) 
								&& !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) 
								&& !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency())))) 
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.NATIONAL_SCREENING);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
			
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.NATIONAL_SCREENING);
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
			
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.NATIONAL_SCREENING);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
			
			
		}
		//----end wdev-22222 -----
		
		//wdev-22310
		form.ctnDetails().ccAuthoringHCP().setEnabledAuthoringHCP(Boolean.FALSE);
		form.ctnDetails().ccAuthoringHCP().setEnabledDateTime(Boolean.FALSE);
		
		form.ctnDetails().ccRecordingMOS().setEnabled(Boolean.FALSE);
		form.ctnDetails().dtimRecordingDateTime().setEnabled(Boolean.FALSE);
		
		//------------
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().initializeResponsibleHcp(MosType.MEDIC, Boolean.TRUE, form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getReferralIsNotNull() && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetailsIsNotNull() ?  form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService():null, null);		//wdev-22465
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().isRequired(Boolean.TRUE);	//wdev-22465	
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().initializeResponsibleHcp(MosType.MEDIC, Boolean.TRUE, form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getReferralIsNotNull() && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetailsIsNotNull() ?  form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService():null, null);		//wdev-22465
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().isRequired(Boolean.TRUE);				//wdev-22465
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().initializeResponsibleHcp(MosType.MEDIC, Boolean.TRUE, form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getReferralIsNotNull() && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetailsIsNotNull() ?  form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService():null, null);		//wdev-22465
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().isRequired(Boolean.TRUE);	//wdev-22465
		
	}
	
	private boolean isDeniedAction(TCIHistoryActions tCIHistoryAction) 
	{
		if(tCIHistoryAction == null)
			return false;
		
		if(form.getLocalContext().getDeniedActions() == null || form.getLocalContext().getDeniedActions().size() == 0)
			return false;
		
		for(int i=0; i<form.getLocalContext().getDeniedActions().size(); i++)
		{
			if(tCIHistoryAction.equals(form.getLocalContext().getDeniedActions().get(i)))
				return true;
		}
		
		return false;
	}
	private List<TCIHistoryActions> listDeniedActionForCurrentUser() 
	{
		List<TCIHistoryActions> deniedActions = new ArrayList<TCIHistoryActions>();
		
		AppFormForTrackingVo currentForm = domain.getFormMenuAction(engine.getFormName().getID());
		
		if(currentForm == null)
			return null;
		
		IAppRole role = engine.getLoggedInRole();
		
		if(role == null)
			return null;
		
		for(MenuActionVo menuAction : currentForm.getMenuActions())
		{
			if(menuAction == null)
				continue;
			
			if(!role.hasMenuActionRight(currentForm, menuAction))
			{
				TCIHistoryActions mappedAction = getMappedAction(menuAction);
				
				if(mappedAction != null)
				{
					deniedActions.add(mappedAction);
				}
			}
		}
		
		return deniedActions;
	}

	private TCIHistoryActions getMappedAction(MenuActionVo menuAction) 
	{
		if(menuAction == null || menuAction.getID_MenuAction() == null)
			return null;
		
		if(EDIT_TCI_CANCELLATION == menuAction.getID_MenuAction())
			return TCIHistoryActions.EDIT_CANCELLATION_DETAILS;
		return null;
	}	
	private void open()
	{
		form.getLocalContext().setPatientElectiveList(domain.get(form.getGlobalContext().RefMan.getPatientElectiveListRef()));
		
		initialiseClinicianLoggedIn();
		
		populateScreenFromData(form.getLocalContext().getPatientElectiveList());
		
		form.getLocalContext().setRequestFormMode(FormMode.VIEW);
		form.getLocalContext().setTCIFormMode(FormMode.VIEW);
		form.getLocalContext().setERODFormMode(FormMode.VIEW);
		form.setMode(FormMode.VIEW);
		
		/*if(ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getElectiveListAction()))
		{
			form.getLocalContext().setElectiveListAction(null);
			
			addNewTCI();
		
			updateControlsState();
		}*/
		updateControlsState();
	}

	private void initialiseClinicianLoggedIn()
	{
		if(form.getLocalContext().getLoggedInUser() == null)
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, false);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setValue(null);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(false);
		
			HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
    		if( tempVo != null && tempVo instanceof HcpLiteVo)
    		{
    			ServiceLiteVo  servicelt = (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetailsIsNotNull()) ? form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService() : null;
    			form.getLocalContext().setisLoggedInUserMedicByHcpAndService(domain.isLoggedInUserMedicByHcpAndService(tempVo, servicelt));	
    			if(Boolean.TRUE.equals(form.getLocalContext().getisLoggedInUserMedicByHcpAndService()))
    			{
    				form.getLocalContext().setLoggedInUser(tempVo);	
    				
    				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, true);
    				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(true);
    				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setValue(tempVo.getIHcpName()!= null && tempVo.getIHcpName().length() > 15 ? tempVo.getIHcpName().substring(0, 15) : (tempVo.getIHcpName()!= null ? tempVo.getIHcpName():""));
    				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setTooltip(tempVo.getIHcpName());
    			}
    		}
		}
	}

	private void addNewTCI()
	{
		form.getLocalContext().setTCIFormMode(FormMode.EDIT);
		form.ctnDetails().dteTCIDate().setFocus();
		form.ctnDetails().dteDateOfOffer().setValue(new Date());
		if(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getHospital() != null)
		{
			form.ctnDetails().qmbHospital().newRow(form.getLocalContext().getPatientElectiveList().getHospital(), form.getLocalContext().getPatientElectiveList().getHospital().getName());
			form.ctnDetails().qmbHospital().setValue(form.getLocalContext().getPatientElectiveList().getHospital());
			
			if(form.ctnDetails().qmbHospital().getValue() != null)
			{
				loadTCIward();
			}
			
			if(form.getLocalContext().getPatientElectiveList().getWard() != null)
			{
				form.ctnDetails().qmbTCIWard().setValue(form.getLocalContext().getPatientElectiveList().getWard());
			}
		}
		else
		{
			Integer numberOfHospitals = domain.countHospitalsFromElectiveListConfiguration(form.getLocalContext().getPatientElectiveList().getElectiveList());
			
			if(numberOfHospitals != null && numberOfHospitals == 1)
			{
				searchHospitals(null);
			}
		}
		
		if(form.getLocalContext().getPatientElectiveList().getTheatreAppointment() != null && form.getLocalContext().getPatientElectiveList().getTheatreAppointment().getID_Booking_Appointment() != null)
		{
			BookingAppointmentForTCIVo theatre = domain.getTCIAppointment(form.getLocalContext().getPatientElectiveList().getTheatreAppointment());
			
			if(theatre != null)
			{
				populateTheatreLabelsFromTCIDetails(theatre);
			}
		}
	}

	private void loadTCIward()
	{
		form.ctnDetails().qmbTCIWard().clear();
		
		LocationLiteVoCollection wards = domain.listWards(null, form.ctnDetails().qmbHospital().getValue());
		
		if (wards == null || wards.size()==0)
			return;
		
		for (int i = 0; i < wards.size(); i++)
		{
			form.ctnDetails().qmbTCIWard().newRow(wards.get(i), wards.get(i).getName());
		}
	}

	private void populateScreenFromData(PatientElectiveListDetailsVo patientElectiveList)
	{
		clearScreen();
		
		if(patientElectiveList == null)
			return;
		
		form.ctnDetails().lblCurrentStatus().setValue(patientElectiveList.getElectiveListStatus() != null ? patientElectiveList.getElectiveListStatus().getElectiveListStatus().getText() : "");
		form.ctnDetails().cmbPatientCategory().setValue(patientElectiveList.getPatientCategory());
		
		if(patientElectiveList.getElectiveListStatus() != null && patientElectiveList.getElectiveListStatus().getElectiveListStatus() != null && patientElectiveList.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED ))
		{
			String strStatus = "Current Status: <b>" +  patientElectiveList.getElectiveListStatus().getElectiveListStatus().getText() + "</b><br>";
			strStatus += "Removal Reason: " + (patientElectiveList.getElectiveListStatus().getRemovalReason() != null ? "<b>" + patientElectiveList.getElectiveListStatus().getRemovalReason().getText() + "</b>":"");
			
			form.ctnDetails().lblCurrentStatus().setTooltip(strStatus);
		}
		else if( patientElectiveList.getElectiveListStatus() != null && patientElectiveList.getElectiveListStatus().getElectiveListStatus() != null )
		{
			form.ctnDetails().lblCurrentStatus().setTooltip("Current Status: <b>" +  patientElectiveList.getElectiveListStatus().getElectiveListStatus().getText() + "</b>");
		}
		
		form.ctnDetails().lblDateOnList().setValue(patientElectiveList.getDateOnList() != null ? patientElectiveList.getDateOnList().toString() : "");
		form.ctnDetails().lblReferralService().setValue((patientElectiveList.getReferral() != null && patientElectiveList.getReferral().getReferralDetails() != null && patientElectiveList.getReferral().getReferralDetails().getService() != null) ? patientElectiveList.getReferral().getReferralDetails().getService().getServiceName() : "");
		form.ctnDetails().lblBreachDate().setValue((patientElectiveList.getReferral() != null && patientElectiveList.getReferral().getReferralDetails() != null && patientElectiveList.getReferral().getReferralDetails().getEnd18WW() != null) ? patientElectiveList.getReferral().getReferralDetails().getEnd18WW().toString() : "");
		
		populateRequestSectionFromData(patientElectiveList);
		populateTCIFromData(patientElectiveList.getTCIDetails());
		populateERODFromData(patientElectiveList.getEROD());
		
		populateNotesFromData(patientElectiveList.getNotes());
		populateTCIHistory(patientElectiveList.getTCIHistory());
		populateERODHistory(patientElectiveList.getERODHistory());
	}

	private void populateERODHistory(ReferralERODDetailsVoCollection erodHistory)
	{
		form.ctnDetails().lyrHistory().tabPageErodHistory().grdERODHistory().getRows().clear();
		
		if(erodHistory == null)
			return;
		
		for(ReferralERODDetailsVo erod : erodHistory)
		{
    		grdERODHistoryRow row = form.ctnDetails().lyrHistory().tabPageErodHistory().grdERODHistory().getRows().newRow();
    		
    		row.setColErod1(erod.getERODDate1() != null ? erod.getERODDate1().toString() : null);
    		row.setCellColErod1Tooltip(row.getColErod1());
    		row.setColSecond(erod.getERODDate2() != null ? erod.getERODDate2().toString() : null);
    		row.setCellColSecondTooltip(row.getColSecond());
    		row.setColAvailability(erod.getPatAvailFromDate() != null ? erod.getPatAvailFromDate().toString() : null);
    		row.setCellColAvailabilityTooltip(row.getColAvailability());
    		row.setColReason(erod.getERODReason() != null ? erod.getERODReason().getIItemText() : null);
    		row.setCellColReasonTooltip(row.getColReason());
    		row.setColComment(erod.getERODReasonComment());
    		row.setCellColCommentTooltip(row.getColComment());
    		
    		row.setValue(erod);
		}
	}

	private void populateTCIHistory(TCIForPatientElectiveListDetailsVoCollection tciHistory)
	{
		form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getRows().clear();
		
		if(tciHistory == null)
			return;
		
		for(TCIForPatientElectiveListDetailsVo tci : tciHistory)
		{
			if(tci == null)
				continue;
			
			grdTCIHistoryRow row = form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getRows().newRow();
			
			StringBuffer tciDate = new StringBuffer();
			
			if(tci.getTCIDate() != null)
			{
				tciDate.append(tci.getTCIDate());
			}
			if(tciDate.length() > 0)
				tciDate.append(" ");
			
			if(tci.getTCITime() != null)
			{
				tciDate.append(tci.getTCITime());
			}
	
			//WDEV-23350
//			if(tci.getRule28DayStatus() != null)
			if(tci.getRule28DayStatus() != null 
					&& !(tci.getComments() != null)) //WDEV-23350
			{
				row.setColImage(form.getImages().RefMan.Appointment16);
				row.setCellColImageTooltip(get28DayRuleTooltip(tci));
			}
			
			row.setColTCIDate(tciDate.toString());
			
			row.setColHospital(tci.getTCIHospital() != null ? tci.getTCIHospital().getName() : null);
			row.setCellColHospitalTooltip(row.getColHospital());
			row.setColWard(tci.getTCIWard() != null ? tci.getTCIWard().getName() : null);
			row.setCellColWardTooltip(row.getColWard());

			//WDEV-23350
//			row.setColCancellationType((tci.getCurrentOutcome() != null ? tci.getCurrentOutcome().getOutcome().getText() : "") + ((tci.getCurrentOutcome() != null && tci.getCurrentOutcome().getCancellationReason() != null) ? " - " + tci.getCurrentOutcome().getCancellationReason().getText() : ""));
//			row.setCellColCancellationTypeTooltip(row.getColCancellationType() + ((tci.getCurrentOutcome() != null && tci.getCurrentOutcome().getReasonCommentsIsNotNull()) ? "<br/> Cancellation Comment: <b>" + tci.getCurrentOutcome().getReasonComments() + "</b>" : ""));
			if (tci.getComments() != null
					&& tci.getOutcomeHistory() != null
					&& tci.getOutcomeHistory().get(0) != null
					&& tci.getOutcomeHistory().get(0).getOutcome() != null
					&& AdmissionOfferOutcome.TCI_AMENDED.equals(tci.getOutcomeHistory().get(0).getOutcome()))
			{
				row.setColCancelIcon(form.getImages().Core.TCI_amended16);
				row.setCellColCancelIconTooltip("TCI was amended");
				row.setColCancellationType(tci.getComments());
				row.setCellColCancellationTypeTooltip(tci.getComments());
			}
			else
			{
				row.setColCancelIcon(form.getImages().Core.TCI_cancelled16);
				row.setCellColCancelIconTooltip("TCI was cancelled");
				row.setColCancellationType((tci.getCurrentOutcome() != null ? tci.getCurrentOutcome().getOutcome().getText() : "") + ((tci.getCurrentOutcome() != null && tci.getCurrentOutcome().getCancellationReason() != null) ? " - " + tci.getCurrentOutcome().getCancellationReason().getText() : ""));
				row.setCellColCancellationTypeTooltip(row.getColCancellationType() + ((tci.getCurrentOutcome() != null && tci.getCurrentOutcome().getReasonCommentsIsNotNull()) ? "<br/> Cancellation Comment: <b>" + tci.getCurrentOutcome().getReasonComments() + "</b>" : ""));
			} //WDEV-23350
						
			row.setValue(tci);
		}
	}

	private String get28DayRuleTooltip(TCIForPatientElectiveListDetailsVo tci)
	{
		if(tci == null)
			return null;
		
		StringBuffer s = new StringBuffer();
		
		if(tci.getDayTCIDate28Offered() != null)
		{
			s.append("TCI Date Offered: ").append(tci.getDayTCIDate28Offered()).append("<br>");
		}
		if(tci.getDate28OfOffer() != null)
		{
			s.append("Date of Offer: ").append(tci.getDate28OfOffer()).append("<br>");
		}
		if(tci.getReasonDeclined28() != null)
		{
			s.append("Reason Declined: ").append(tci.getReasonDeclined28().getText());
		}
		
		return s.toString();
	}

	private void populateNotesFromData(PatientElectiveListNotesVoCollection notes)
	{
		form.ctnDetails().lyrHistory().tabPageNotes().grdNoteComments().getRows().clear();
		
		if(notes == null)
			return;
		
		for(PatientElectiveListNotesVo note : notes)
		{
			grdNoteCommentsRow row = form.ctnDetails().lyrHistory().tabPageNotes().grdNoteComments().getRows().newRow();

			row.setcolNoteComment(note.getNotes());
			row.setCellcolNoteCommentTooltip(row.getcolNoteComment());
			row.setcolRecordingDateTime(note.getAuthoringDateTime().toString());
			row.setCellcolRecordingDateTimeTooltip(row.getcolRecordingDateTime());
			row.setcolRecordingUser(note.getAuthoringUser().toString());
			row.setCellcolRecordingUserTooltip(row.getcolRecordingUser());

			row.setValue(note);
		}
	}

	private void populateERODFromData(ReferralERODDetailsVo erod)
	{
		clearEROD();
		
		if(erod == null)
			return;
		
		form.ctnDetails().dteEarliestDateOffered().setValue(erod.getERODDate1());
		form.ctnDetails().chkEXTDelay().setValue(Boolean.TRUE.equals(erod.getIsExtendedDelay()));
		form.ctnDetails().dteSecondDateOffered().setValue(erod.getERODDate2());
		form.ctnDetails().dtePatientAvailableFromDate().setValue(erod.getPatAvailFromDate());
		form.ctnDetails().cmbERODReason().setValue(erod.getERODReason());
		form.ctnDetails().txtERODComment().setValue(erod.getERODReasonComment());
		form.ctnDetails().dteERODDateOfOffer().setValue(erod.getDateOfOffer());
	}

	private void clearEROD()
	{
		form.ctnDetails().dteEarliestDateOffered().setValue(null);
		form.ctnDetails().chkEXTDelay().setValue(null);
		form.ctnDetails().dteSecondDateOffered().setValue(null);
		form.ctnDetails().dtePatientAvailableFromDate().setValue(null);
		form.ctnDetails().cmbERODReason().setValue(null);
		form.ctnDetails().txtERODComment().setValue(null);
		form.ctnDetails().dteERODDateOfOffer().setValue(null);
	}

	private void populateRequestSectionFromData(PatientElectiveListDetailsVo patientElectiveList)
	{
		clearRequestSection();
		
		if(patientElectiveList == null)
			return;
		
		form.ctnDetails().GroupElectiveList().setValue(getElectiveListType(patientElectiveList.getElectiveAdmissionType()));
		
		boolean preassessmentIsOfTypeFitForSurgeryNotFitForSurgery = patientElectiveList.getPreAssessmentOutcome() != null && (YesNoUnknown.YES.equals(patientElectiveList.getFitForSurgery()) || YesNoUnknown.NO.equals(patientElectiveList.getFitForSurgery()));
		
		if(WaitingCardAdmissionType.SURGICAL.equals(patientElectiveList.getAdmissionType()))
		 {
			 form.ctnDetails().GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoSurgical);
			 populateSurgicalTabFromData(patientElectiveList);
			 
			 if(preassessmentIsOfTypeFitForSurgeryNotFitForSurgery)
			 {
				 populateSurgicalTabFromPreassessment(patientElectiveList.getPreAssessmentOutcome());
			 }
		 }
		 else if(WaitingCardAdmissionType.MEDICAL.equals(patientElectiveList.getAdmissionType()))
		 {
			 form.ctnDetails().GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoMedical);
			 populateMedicalTabFromData(patientElectiveList);
			 
			 if(preassessmentIsOfTypeFitForSurgeryNotFitForSurgery)
			 {
				 populateMedicalTabFromPreassessment(patientElectiveList.getPreAssessmentOutcome());
			 }
		 }
		 else if(WaitingCardAdmissionType.ENDOSCOPY.equals(patientElectiveList.getAdmissionType()))
		 {
			 form.ctnDetails().GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoEndoscopy);
			 populateEndoscopyTabFromData(patientElectiveList);
			 
			 if(preassessmentIsOfTypeFitForSurgeryNotFitForSurgery)
			 {
				 populateEndoscopyTabFromPreassessment(patientElectiveList.getPreAssessmentOutcome());
			 }
		 }
	}

	private void populateEndoscopyTabFromPreassessment(PreAssessmentOutcomeForElectiveListDetailsVo preAssessmentOutcome)
	{
		if(preAssessmentOutcome == null)
			return;
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setValue(getPacemakerDefibrilatorValueFromPreassessment(preAssessmentOutcome.getPaceMakerDefib()));
		
		if(YesNoUnknown.YES.equals(preAssessmentOutcome.getReceivingAntiCoag()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving);
		else if(YesNoUnknown.NO.equals(preAssessmentOutcome.getReceivingAntiCoag()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoNoAnticoagulantReceiving);
		else if(YesNoUnknown.UNKNOWN.equals(preAssessmentOutcome.getReceivingAntiCoag()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoUnknownAnticoagulantReceiving);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(getGeneralAnaestheticValueFromPreassessment(preAssessmentOutcome.getAnaestheticType()));
	}

	private GroupGeneralAnaestheticEnumeration getGeneralAnaestheticValueFromPreassessment(AnaestheticType anaestheticType)
	{
		if(AnaestheticType.GA.equals(anaestheticType))
			return GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic;
		
		if(anaestheticType != null)
			return GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic;
		
		return null;
	}

	private Boolean getPacemakerDefibrilatorValueFromPreassessment(YesNo paceMakerDefib)
	{
		if(YesNo.YES.equals(paceMakerDefib))
			return true;
		
		if(YesNo.NO.equals(paceMakerDefib))
			return false;
		
		return null;
	}

	private void populateMedicalTabFromPreassessment(PreAssessmentOutcomeForElectiveListDetailsVo preAssessmentOutcome)
	{
		if(preAssessmentOutcome == null)
			return;
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().setValue(preAssessmentOutcome.getShortNotice());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setValue(preAssessmentOutcome.getNoticePeriodValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(preAssessmentOutcome.getPostOpStay());
	}

	private void populateSurgicalTabFromPreassessment(PreAssessmentOutcomeForElectiveListDetailsVo preAssessmentOutcome)
	{
		if(preAssessmentOutcome == null)
			return;
		
		if(YesNoUnknown.YES.equals(preAssessmentOutcome.getReceivingAntiCoag()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoYesQuestion1);
		else if(YesNoUnknown.NO.equals(preAssessmentOutcome.getReceivingAntiCoag()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoNoQuestion1);
		else if(YesNoUnknown.UNKNOWN.equals(preAssessmentOutcome.getReceivingAntiCoag()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoUnknownQuestion1);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setValue(preAssessmentOutcome.getShortNotice());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setValue(preAssessmentOutcome.getNoticePeriodValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().setValue(preAssessmentOutcome.getPreOpOvernight());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setValue(preAssessmentOutcome.getNights());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(preAssessmentOutcome.getPostOpStay());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(preAssessmentOutcome.getAnaestheticType());
	}

	private GroupElectiveListEnumeration getElectiveListType(ElectiveAdmissionType electiveAdmissionType)
	{
		if(ElectiveAdmissionType.ELECTIVE_TYPE11.equals(electiveAdmissionType))
			return GroupElectiveListEnumeration.rdoWaitingList;
		
		if(ElectiveAdmissionType.PLANNED_TYPE13.equals(electiveAdmissionType))
			return GroupElectiveListEnumeration.rdoSurveillance;
		
		if(ElectiveAdmissionType.BOOKED_TYPE12.equals(electiveAdmissionType))
			return GroupElectiveListEnumeration.rdoBooked;
		
		return null;
	}

	private void populateEndoscopyTabFromData(PatientElectiveListDetailsVo patientElectiveList)
	{
		if(patientElectiveList == null)
			return;
		
		if( ElectiveListReason.TREATMENT.equals(patientElectiveList.getElectiveListReason()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValue(GroupElectiveListReasonEndoscopyEnumeration.rdoTreatmentEndoscopy);
		else if( ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValue(GroupElectiveListReasonEndoscopyEnumeration.rdoDiagnosticEndoscopy);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setValue(patientElectiveList.getToBePlannedIn());
		if( TimeUnitsSecondsToMonths.DAYS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(GroupPlanedProceduresEndoscopyEnumeration.rdoDaysEndoscopy);
		else if( TimeUnitsSecondsToMonths.WEEKS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(GroupPlanedProceduresEndoscopyEnumeration.rdoWeeksEndoscopy);
		else if( TimeUnitsSecondsToMonths.MONTHS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(GroupPlanedProceduresEndoscopyEnumeration.MonthsEndoscopy);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setValue(patientElectiveList.getPlannedDate());
		
		if( patientElectiveList.getPrimaryProcedureIsNotNull())
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().newRow(patientElectiveList.getPrimaryProcedure(), patientElectiveList.getPrimaryProcedure().getProcedureName());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().setValue(patientElectiveList.getPrimaryProcedure());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtEndoscopyDetails().setValue(patientElectiveList.getProcedureDescription());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(patientElectiveList.getPriority());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setValue(patientElectiveList.getSuspectedGIBleed());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPoints().setValue(patientElectiveList.getPoints());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(patientElectiveList.getAnticipatedProcedureLength());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setValue(patientElectiveList.getSuitableforTraining());
		
		if( YesNo.YES.equals(patientElectiveList.getGeneralAnaesthetic()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic);
		else if( YesNo.NO.equals(patientElectiveList.getGeneralAnaesthetic()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic);
		
		if( Boolean.TRUE.equals(patientElectiveList.getCanNurseCarryOutProcedure()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValue(GroupProcCarriedByNurseEnumeration.rdoYesProcCarriedByNurse);
		else if( Boolean.TRUE.equals(patientElectiveList.getCanNurseCarryOutProcedure()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValue(GroupProcCarriedByNurseEnumeration.rdoNoProcCarriedByNurse);
		
		
		//wdev-22465
		if( YesNo.YES.equals(patientElectiveList.getPreColonoscopyAssessmentRequired()) )
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setValue(GroupPrecolonoscopyReqEnumeration.rdoYesPrecolonoscopyReq);
		}
		else if( YesNo.NO.equals(patientElectiveList.getPreColonoscopyAssessmentRequired()) )
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setValue(GroupPrecolonoscopyReqEnumeration.rdoNoPrecolonoscopyReq);
		}
		//-------------
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(patientElectiveList.getDetailsForNonGAEndoProcedure());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setValue(patientElectiveList.getPreAssessmentRequired());
		
		if( YesNoUnknown.YES.equals(patientElectiveList.getPatientReceivingAnticoagulantTherapy()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving);
		else if( YesNoUnknown.NO.equals(patientElectiveList.getPatientReceivingAnticoagulantTherapy()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoNoAnticoagulantReceiving);
		else if( YesNoUnknown.UNKNOWN.equals(patientElectiveList.getPatientReceivingAnticoagulantTherapy())) 
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoUnknownAnticoagulantReceiving);
		
		if( Boolean.TRUE.equals(patientElectiveList.getMedicationShouldBeStoppedOralBowelPrep()))
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop);
		}
		else if( Boolean.FALSE.equals(patientElectiveList.getMedicationShouldBeStoppedOralBowelPrep()))
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(GroupPatientMedicationStopEnumeration.rdoNoPatientMedicationStop);
		}
		//WDEV-22315
		else
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(GroupPatientMedicationStopEnumeration.rdoUnknownPatientMedicationStop);
		} 
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setEnabled(false); //WDEV-22315
			
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setValue(patientElectiveList.getDrugInformation());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setValue(patientElectiveList.getHasPacemakerDefib());
		
		if( YesNo.YES.equals(patientElectiveList.getRenalFunctionAssessment()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValue(GroupAssessmentOfRenalFunctionEnumeration.rdoYesAssessmentOfRenalFunction);
		else if( YesNo.NO.equals(patientElectiveList.getRenalFunctionAssessment()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValue(GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().setValue(patientElectiveList.getCognitiveComments());	//should be added a field to PatientElectiveList Bo for this
		
		if( Boolean.TRUE.equals(patientElectiveList.getAreThereKeyTherapeutic()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setValue(GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment);
		else if( Boolean.FALSE.equals(patientElectiveList.getAreThereKeyTherapeutic()))
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setValue(GroupKeyTherapeuticEquipmentEnumeration.rdoNoKeyTherapeuticEquipment);
		
		if( patientElectiveList.getElectiveListIsNotNull())
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().newRow(patientElectiveList.getElectiveList(), patientElectiveList.getElectiveList().getWaitingListName());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setValue(patientElectiveList.getResponsibleHCP());		//wdev-22465
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setValue(patientElectiveList.getElectiveList());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().setValue(patientElectiveList.getInterpretatorRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValue(patientElectiveList.getLanguage());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().setValue(patientElectiveList.getTransportRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValue(patientElectiveList.getTransport());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSpecialRequirementsEndoscopy().setValue(patientElectiveList.getSpecialRequirements());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setValue(patientElectiveList.getSpecialRequirementsDetails());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtCommentEndoscopy().setValue(patientElectiveList.getComments());
		
		form.ctnDetails().ccAuthoringHCP().setValue(patientElectiveList.getAuthoringInfo());	
		
		if( patientElectiveList.getVettingHCPIsNotNull())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblVettingEndoscopist().setVisible(true);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblValueForVettingEndoscopist().setVisible(true);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblValueForVettingEndoscopist().setValue(patientElectiveList.getVettingHCP().getIHcpName());
		}
		else
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblVettingEndoscopist().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblValueForVettingEndoscopist().setVisible(false);
		}
		

		//wdev - 22310
		if( patientElectiveList.getRecordingUserIsNotNull())
		{
			form.ctnDetails().ccRecordingMOS().setValue(patientElectiveList.getRecordingUser().getRecordingUser());
			form.ctnDetails().dtimRecordingDateTime().setValue(patientElectiveList.getRecordingUser().getRecordingDateTime());
		}
		//------------
	}

	private void populateMedicalTabFromData(PatientElectiveListDetailsVo patientElectiveList)
	{
		if( ElectiveListReason.TREATMENT.equals(patientElectiveList.getElectiveListReason()))
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().setValue(GroupElectiveListReasonMedicalEnumeration.rdoTreatmentMedical);
		else if( ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().setValue(GroupElectiveListReasonMedicalEnumeration.rdoDiagnosticMedical);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setValue(patientElectiveList.getWasPossibleDateGiven());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setValue(patientElectiveList.getDateGivenToPatient());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setValue(patientElectiveList.getToBePlannedIn());
		
		if( TimeUnitsSecondsToMonths.DAYS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(GroupPlanedProceduresMedicalEnumeration.rdoDaysPlannedMedical);
		else if( TimeUnitsSecondsToMonths.WEEKS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(GroupPlanedProceduresMedicalEnumeration.rdoWeeksPlannedMedical);
		else if( TimeUnitsSecondsToMonths.MONTHS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(GroupPlanedProceduresMedicalEnumeration.rdoMonthPlannedMedical);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setValue(patientElectiveList.getPlannedDate());
		
		if(patientElectiveList.getHospital() != null)
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbHospital().newRow(patientElectiveList.getHospital(), patientElectiveList.getHospital().getName());
		}
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbHospital().setValue(patientElectiveList.getHospital());
		
		if(patientElectiveList.getWard() != null)
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbWard().newRow(patientElectiveList.getWard(), patientElectiveList.getWard().getName());
		}
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbWard().setValue(patientElectiveList.getWard());
		
		if( patientElectiveList.getPrimaryProcedureIsNotNull() )
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().newRow(patientElectiveList.getPrimaryProcedure(), patientElectiveList.getPrimaryProcedure().getProcedureName());	
		}
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().setValue(patientElectiveList.getPrimaryProcedure());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValue(patientElectiveList.getProcLaterality());
		form.getLocalContext().setShowSecondMedicalProcedure(patientElectiveList.getSecondaryProcedureIsNotNull() ? Boolean.TRUE:Boolean.FALSE);
		
		if( patientElectiveList.getSecondaryProcedureIsNotNull())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().newRow(patientElectiveList.getSecondaryProcedure(), patientElectiveList.getSecondaryProcedure().getProcedureName());
		}
			
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setValue(patientElectiveList.getSecondaryProcedure());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue(patientElectiveList.getSecondaryProcLaterality());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().setValue(patientElectiveList.getProcedureDescription());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(patientElectiveList.getPriority()); 	
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().setValue(patientElectiveList.getAvailableAtShortNotice());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setValue(patientElectiveList.getAvailableAtShortNoticePeriod());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(patientElectiveList.getAnticipatedStay());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(patientElectiveList.getResponsibleHCP());		//wdev-22582		
		
		if( patientElectiveList.getElectiveListIsNotNull())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().newRow(patientElectiveList.getElectiveList(),patientElectiveList.getElectiveList().getWaitingListName());
		}
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setValue(patientElectiveList.getElectiveList());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().setValue(patientElectiveList.getInterpretatorRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValue(patientElectiveList.getLanguage());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().setValue(patientElectiveList.getTransportRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setValue(patientElectiveList.getTransport());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().setValue(patientElectiveList.getSpecialRequirements());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setValue(patientElectiveList.getSpecialRequirementsDetails());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtCommentMedical().setValue(patientElectiveList.getComments());
		
		//wdev - 22310
		
		form.ctnDetails().ccAuthoringHCP().setValue(patientElectiveList.getAuthoringInfo());
		if( patientElectiveList.getRecordingUserIsNotNull())
		{
			form.ctnDetails().ccRecordingMOS().setValue(patientElectiveList.getRecordingUser().getRecordingUser());
			form.ctnDetails().dtimRecordingDateTime().setValue(patientElectiveList.getRecordingUser().getRecordingDateTime());
		}
		//------------
	}

	private void populateSurgicalTabFromData(PatientElectiveListDetailsVo patientElectiveList)
	{
		if( ElectiveListReason.TREATMENT.equals(patientElectiveList.getElectiveListReason()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().setValue(GroupElectiveListReasonEnumeration.rdoTreatment);
		else if( ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().setValue(GroupElectiveListReasonEnumeration.rdoDiagnostic);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setValue(patientElectiveList.getToBePlannedIn());
		if( TimeUnitsSecondsToMonths.DAYS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(GroupPlanedProceduresSurgicalEnumeration.rdoDays);
		else if( TimeUnitsSecondsToMonths.WEEKS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(GroupPlanedProceduresSurgicalEnumeration.rdoWeeks);
		else if( TimeUnitsSecondsToMonths.MONTHS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(GroupPlanedProceduresSurgicalEnumeration.rdoMonth);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setValue(patientElectiveList.getPlannedDate());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setValue(patientElectiveList.getWasPossibleDateGiven());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setValue(patientElectiveList.getDateGivenToPatient());
		
		if( patientElectiveList.getPrimaryProcedureIsNotNull())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedure().newRow(patientElectiveList.getPrimaryProcedure(), patientElectiveList.getPrimaryProcedure().getProcedureName());
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedure().setValue(patientElectiveList.getPrimaryProcedure());
		}
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValue(patientElectiveList.getProcLaterality());
		form.getLocalContext().setShowSecondSurgicalProcedure(patientElectiveList.getSecondaryProcedureIsNotNull() ? Boolean.TRUE : Boolean.FALSE);
		
		if(patientElectiveList.getSecondaryProcedureIsNotNull())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().newRow(patientElectiveList.getSecondaryProcedure(), patientElectiveList.getSecondaryProcedure().getProcedureName());
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setValue(patientElectiveList.getSecondaryProcedure());
		}
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue(patientElectiveList.getSecondaryProcLaterality());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdetails().setValue(patientElectiveList.getProcedureDescription());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(patientElectiveList.getPriority());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(patientElectiveList.getAnaestheticType());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setValue(patientElectiveList.getPreAssessmentRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setValue(patientElectiveList.getAvailableAtShortNotice());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setValue(patientElectiveList.getAvailableAtShortNoticePeriod());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setValue(patientElectiveList.getCriticalCareBedRequired());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setValue(patientElectiveList.getAnaesthesisRiskAssessmentRequest());
		
		if( YesNoUnknown.YES.equals(patientElectiveList.getPatientReceivingAnticoagulantTherapy()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoYesQuestion1);
		else if( YesNoUnknown.NO.equals(patientElectiveList.getPatientReceivingAnticoagulantTherapy()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoNoQuestion1);
		else if( YesNoUnknown.UNKNOWN.equals(patientElectiveList.getPatientReceivingAnticoagulantTherapy()))
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoUnknownQuestion1);
			
		if( YesNo.YES.equals(patientElectiveList.getFollowPeriOperativeguidelines()) )
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setValue(GroupPerioperativeEnumeration.rdoYesPerioperative);
		else if( YesNo.NO.equals(patientElectiveList.getFollowPeriOperativeguidelines()) )
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setValue(GroupPerioperativeEnumeration.rdoNoPerioperative);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intProcedureLength().setValue(patientElectiveList.getAnticipatedProcedureLength());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtReason().setValue(patientElectiveList.getPeriOpNoReasonComments());
				
		if(patientElectiveList.getProceduredToBeCarriedByIsNotNull() )
   		{
       		 if( ProcedureExecutant.LOGGED_IN_CLINICIAN.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       		 {
       			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn);
       			if( patientElectiveList.getConsultantIsNotNull())
       			{
       				
       				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setValue(patientElectiveList.getConsultant().getIHcpName() != null && patientElectiveList.getConsultant().getIHcpName().length() > 15 ? patientElectiveList.getConsultant().getIHcpName().substring(0, 15) : (patientElectiveList.getConsultant().getIHcpName() != null ?patientElectiveList.getConsultant().getIHcpName():""));
       				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setTooltip(patientElectiveList.getConsultant().getIHcpName());
       			}
       		 }
       		 else if( ProcedureExecutant.ANY_CONSULTANT.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoAnyConsultant);
       		 else if( ProcedureExecutant.NAMED_CONSULTANT.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       		 {
       			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoNamedConsultant);
       		 }
       		 else if( ProcedureExecutant.ANY.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       		 {
       			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoAny);
       		 }
       		 else if( ProcedureExecutant.OTHER.equals(patientElectiveList.getProceduredToBeCarriedBy()))		//wdev-22465
      		 {
      			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoOther);
      		 }
   		}
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().setValue(patientElectiveList.getProcedureCarriedOutBy());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().setValue(patientElectiveList.getPreOperativeOvernightStayRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setValue(patientElectiveList.getNoOfPreOperativeNights());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(patientElectiveList.getAnticipatedStay());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().setValue(patientElectiveList.getResponsibleHCP());	//wdev-22465
		
		if(patientElectiveList.getElectiveListIsNotNull() )
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().newRow(patientElectiveList.getElectiveList(), patientElectiveList.getElectiveList().getWaitingListName());
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(patientElectiveList.getElectiveList());
			electivelistValueChanged();
		}
		
		if(!patientElectiveList.getHospitalIsNotNull() && patientElectiveList.getRequiredTheatreTypeIsNotNull())
		{
			if( TheatreType.INPATIENT.equals(patientElectiveList.getRequiredTheatreType()))
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.rdoMainTheatre);
			else if( patientElectiveList.getRequiredTheatreType().equals( TheatreType.DAYCASE  ))
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.rdoDaySurgery);
		}
		
		if(patientElectiveList.getHospitalIsNotNull())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().newRow(patientElectiveList.getHospital(), patientElectiveList.getHospital().getName());
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(patientElectiveList.getHospital());
			
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation);
		}
	
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().setValue(patientElectiveList.getInterpretatorRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValue(patientElectiveList.getLanguage());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().setValue(patientElectiveList.getTransportRequired());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValue(patientElectiveList.getTransport());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().setValue(patientElectiveList.getSpecialRequirements());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setValue(patientElectiveList.getSpecialRequirementsDetails());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtComment().setValue(patientElectiveList.getComments());
		
		//wdev - 22310
		
		form.ctnDetails().ccAuthoringHCP().setValue(patientElectiveList.getAuthoringInfo());
		if( patientElectiveList.getRecordingUserIsNotNull())
		{
			form.ctnDetails().ccRecordingMOS().setValue(patientElectiveList.getRecordingUser().getRecordingUser());
			form.ctnDetails().dtimRecordingDateTime().setValue(patientElectiveList.getRecordingUser().getRecordingDateTime());
		}
		//------------
		
	}
	
	private void electivelistValueChanged()
	{
		if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().getValue() != null)
			populatePeripheralHospitals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().getValue().getListLocations());
	}
	
	private void populatePeripheralHospitals(ElectiveListHospitalConfigurationWLVoCollection  recordcoll)
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().clear();
		if( recordcoll == null || recordcoll.size() == 0)
			return;
		for(int i = 0; i < recordcoll.size();i++)
		{
			
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().newRow(recordcoll.get(i).getListLocation(), recordcoll.get(i).getListLocation().getName());
		}
		if( recordcoll.size() == 1 )		
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(recordcoll.get(0).getListLocation());
		}
	} 

	private void clearRequestSection()
	{
		form.ctnDetails().GroupElectiveList().setValue(null);
		
		cleartabSurgical();
		cleartabMedical();
		cleartabEndoscopy();
	}

	private void cleartabSurgical()
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedure().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdetails().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intProcedureLength().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtReason().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtComment().setValue(null);
	}
	
	private void cleartabMedical()
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbHospital().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbWard().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtCommentMedical().setValue(null);	
	}
	
	private void cleartabEndoscopy()
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtEndoscopyDetails().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPoints().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setValue(null);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtCommentEndoscopy().setValue(null);
	}
	
	private void populateTCIFromData(TCIForPatientElectiveListDetailsVo tciDetails)
	{
		clearTCI();
		
		if(tciDetails == null)
			return;
		
		if(tciDetails.getAppointment() != null && tciDetails.getAppointment().getTheatreBooking() != null)
		{
			populateTheatreLabelsFromTCIDetails(tciDetails.getAppointment());
		}

		form.ctnDetails().dteTCIDate().setValue(tciDetails.getTCIDate());
		form.ctnDetails().timTCITime().setValue(tciDetails.getTCITime());
		
		if (tciDetails.getTCIWard()!=null)
		{
			form.ctnDetails().qmbTCIWard().newRow(tciDetails.getTCIWard(), tciDetails.getTCIWard().getName());
			form.ctnDetails().qmbTCIWard().setValue(tciDetails.getTCIWard());
		}
		
		if (tciDetails.getTCIHospital()!=null)
		{
			form.ctnDetails().qmbHospital().newRow(tciDetails.getTCIHospital(),tciDetails.getTCIHospital().getName());
			form.ctnDetails().qmbHospital().setValue(tciDetails.getTCIHospital());
		}
		
		form.ctnDetails().cmbBreachReason().setValue(tciDetails.getRTTBreachReason());
		form.ctnDetails().dteDateOfOffer().setValue(tciDetails.getDateTCIOffered());
		form.ctnDetails().GroupWasReasonable().setValue(getReasonable28dayOfferMadeValueFromData(tciDetails.getWasReasonable28dayOfferMade()));
		form.ctnDetails().dteTCIDateOffered().setValue(tciDetails.getDayTCIDate28Offered());
		form.ctnDetails().dteDateOfOfferSecond().setValue(tciDetails.getDate28OfOffer());
		form.ctnDetails().cmbReasonDeclined().setValue(tciDetails.getReasonDeclined28());
		form.ctnDetails().cmbTCOOfferedMethod().setValue(tciDetails.getTCIOfferMethod());
	}

	private void populateTheatreLabelsFromTCIDetails(BookingAppointmentForTCIVo bookingAppointmentForTCIVo)
	{
		if(bookingAppointmentForTCIVo != null)
		{
			form.ctnDetails().lblTheatreDate().setValue((bookingAppointmentForTCIVo.getAppointmentDate() != null ? bookingAppointmentForTCIVo.getAppointmentDate().toString() : "") + " " + (bookingAppointmentForTCIVo.getApptStartTime() != null ? bookingAppointmentForTCIVo.getApptStartTime().toString() : "") + ((Status_Reason.CANCELLED.equals(bookingAppointmentForTCIVo.getCurrentStatusRecord().getStatus())) ? " - Cancelled" : ""));
		
			//WDEV-22515
			String strTheatreSession = bookingAppointmentForTCIVo.getSession() != null ? bookingAppointmentForTCIVo.getSession().getName() : "" ;
			form.ctnDetails().lblTheatreSession().setValue(strTheatreSession.length()<=45 ? strTheatreSession : strTheatreSession.substring(0, 45)+"..." );
			form.ctnDetails().lblTheatreSession().setTooltip(strTheatreSession);
		}
	}

	private GroupWasReasonableEnumeration getReasonable28dayOfferMadeValueFromData(Boolean wasReasonable28dayOfferMade)
	{
		if(Boolean.TRUE.equals(wasReasonable28dayOfferMade))
			return GroupWasReasonableEnumeration.rdoYes;
		
		if(Boolean.FALSE.equals(wasReasonable28dayOfferMade))
			return GroupWasReasonableEnumeration.rdoNo;
		
		return null;
	}

	private void clearTCI()
	{
		form.ctnDetails().lblTheatreDate().setValue(null);
		form.ctnDetails().lblTheatreSession().setValue(null);
		
		form.ctnDetails().dteTCIDate().setValue(null);
		form.ctnDetails().timTCITime().setValue(null);
		
		form.ctnDetails().qmbTCIWard().clear();
		form.ctnDetails().qmbHospital().clear();
		
		form.ctnDetails().cmbBreachReason().setValue(null);
		form.ctnDetails().dteDateOfOffer().setValue(null);
		form.ctnDetails().GroupWasReasonable().setValue(null);
		form.ctnDetails().dteTCIDateOffered().setValue(null);
		form.ctnDetails().dteDateOfOfferSecond().setValue(null);
		form.ctnDetails().cmbReasonDeclined().setValue(null);
		form.ctnDetails().cmbTCOOfferedMethod().setValue(null);
	}

	private void clearScreen()
	{
		form.ctnDetails().cmbPatientCategory().setValue(null);
		form.ctnDetails().lblCurrentStatus().setValue(null);
		form.ctnDetails().lblCurrentStatus().setTooltip(null);
		form.ctnDetails().lblDateOnList().setValue(null);
		form.ctnDetails().lblReferralService().setValue(null);
		form.ctnDetails().lblBreachDate().setValue(null);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		boolean editModeRequestDetails = FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode());
		boolean viewModeRequestDetails = FormMode.VIEW.equals(form.getLocalContext().getRequestFormMode());
		boolean editModeTCIDetails = FormMode.EDIT.equals(form.getLocalContext().getTCIFormMode());
		boolean editModeERODDetails = FormMode.EDIT.equals(form.getLocalContext().getERODFormMode());
		boolean isRemoved = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getElectiveListStatus() != null && WaitingListStatus.REMOVED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus());
		boolean isEndoscopy = form.getLocalContext().getPatientElectiveList() != null && WaitingCardAdmissionType.ENDOSCOPY.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType());
		boolean isPlannedList = GroupElectiveListEnumeration.rdoSurveillance.equals(form.ctnDetails().GroupElectiveList().getValue());
		boolean viewModeOnly = Boolean.TRUE.equals(form.getLocalContext().getViewModeOnly());
		
		form.ctnDetails().GroupElectiveList().setEnabled(true);
		form.ctnDetails().GroupElectiveList().setEnabled(GroupElectiveListEnumeration.rdoWaitingList, (editModeRequestDetails && !isRemoved && !checkIfThereIsAnAdmissionForSelectedCareContext(form.getLocalContext().getPatientElectiveList())));
		form.ctnDetails().GroupElectiveList().setEnabled(GroupElectiveListEnumeration.rdoBooked, false);
		form.ctnDetails().GroupElectiveList().setEnabled(GroupElectiveListEnumeration.rdoSurveillance, (editModeRequestDetails && !isRemoved && !checkIfThereIsAnAdmissionForSelectedCareContext(form.getLocalContext().getPatientElectiveList())));
		
		// TODO Check other condition
		form.ctnDetails().cmbPatientCategory().setEnabled(editModeRequestDetails);
		
		if(isEndoscopy && isPlannedList)
		{
			form.ctnDetails().GroupElectiveList().setEnabled(false);
		}
		
		if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			form.ctnDetails().lyrWaitingListDetails().showtabPageSurgical();
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().setHeaderVisible(Boolean.TRUE);
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().setVisible(Boolean.FALSE);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().setVisible(Boolean.FALSE);
		}
		else if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			form.ctnDetails().lyrWaitingListDetails().showtabPageMedical();
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().setVisible(Boolean.FALSE);
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().setVisible(Boolean.TRUE);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().setVisible(Boolean.FALSE);
		} 
		else if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			form.ctnDetails().lyrWaitingListDetails().showtabPageEndoscopy();
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().setVisible(Boolean.FALSE);
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().setVisible(Boolean.FALSE);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().setVisible(Boolean.TRUE);
		}
		
		form.ctnDetails().btnElectiveListRequest().setVisible(!viewModeOnly && viewModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);
		form.ctnDetails().btnPreAssessmentOutcome().setVisible(!viewModeOnly && viewModeRequestDetails && !editModeTCIDetails && !editModeERODDetails && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome() != null);
		form.ctnDetails().btnEdit().setVisible(!viewModeOnly && viewModeRequestDetails && !(isPlannedList && isEndoscopy) && !editModeTCIDetails && !editModeERODDetails && !isRemoved);
		form.ctnDetails().btnSave().setVisible(editModeRequestDetails);
		form.ctnDetails().btnCancel().setVisible(editModeRequestDetails);
		
		boolean SurgicalOrEndoscopy = form.getLocalContext().getPatientElectiveList() != null && (WaitingCardAdmissionType.ENDOSCOPY.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()) || WaitingCardAdmissionType.SURGICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()));
		boolean notFitForSurgery = form.getLocalContext().getPatientElectiveList() != null && YesNoUnknown.NO.equals(form.getLocalContext().getPatientElectiveList().getFitForSurgery());
		boolean requiresTCI = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getElectiveListStatus() != null && WaitingListStatus.REQUIRES_TCI.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus());
		boolean tciGivenAndApptCancelled = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getElectiveListStatus() != null && WaitingListStatus.TCI_GIVEN.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())
				&& form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getCurrentStatusRecord() != null && Status_Reason.CANCELLED.equals(form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getCurrentStatusRecord().getStatus());
		
		boolean preAssessmentRequired = form.getLocalContext().getPatientElectiveList() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getPreAssessmentRequired());
		boolean sourceOfReferralNationalScreening = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails() != null &&  SourceOfReferral.NATIONAL_SCREENING.equals(form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getReferrerType());
		boolean referralUrgencyOrSourceOfReferral = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && (ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) || ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) || sourceOfReferralNationalScreening );
		boolean preAssessmentCompletionExemptService = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService().getIsPreAssessmentCompletionExempt());
		
		PatientElectiveListDetailsVo electiveList = form.getLocalContext().getPatientElectiveList();
		boolean hasAppointment = electiveList != null && 
													((electiveList.getTCIDetails() != null && electiveList.getTCIDetails().getAppointment() != null)
															|| (electiveList.getTheatreAppointment() != null && electiveList.getTheatreAppointment().getCurrentStatusRecord() != null && !Status_Reason.CANCELLED.equals(electiveList.getTheatreAppointment().getCurrentStatusRecord().getStatus()) && appointmentIsInTheFuture(electiveList.getTheatreAppointment())));
		boolean appointmentCancelledOrCompleted = electiveList != null && electiveList.getTCIDetails() != null && electiveList.getTCIDetails().getAppointment() != null && electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord() != null
		&& Status_Reason.CANCELLED.equals(electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord().getStatus());
			
		boolean requiresVetting = electiveList != null && Boolean.TRUE.equals(electiveList.getRequiresVetting()); //WDEV-22401
		
		form.ctnDetails().btnBookTheatre().setVisible(!viewModeOnly && !editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails 
														&& ((!hasAppointment || appointmentCancelledOrCompleted) && !notFitForSurgery && !isRemoved
																&& (
																		(SurgicalOrEndoscopy && (requiresTCI || tciGivenAndApptCancelled))
																	 || (preAssessmentRequired && (preAssessmentCompletionExemptService || referralUrgencyOrSourceOfReferral))
																	)
														)
														&& !requiresVetting //WDEV-22401	
													);
		
		form.ctnDetails().btnPatientSummary().setVisible(!viewModeOnly && !editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);
		form.ctnDetails().btnTheatreDashboard().setVisible(!viewModeOnly && !editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);
		form.ctnDetails().btnBedManagementDashboard().setVisible(!viewModeOnly && !editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);
		form.ctnDetails().btnClose().setVisible(!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);
		
		updatetabSurgicalControlsState();
		updatetabMedicalControlsState();
		updatetabEndoscopyControlsState();
		
		updateTCIDetails();
		updateERODDetails();
		
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu1ADDItem().setVisible(!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu1VIEWItem().setVisible(form.ctnDetails().lyrHistory().tabPageNotes().grdNoteComments().getValue() != null && !editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu1RIEItem().setVisible(form.ctnDetails().lyrHistory().tabPageNotes().grdNoteComments().getValue() != null && !editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails);

		//WDEV-23350
//		form.getContextMenus().RefMan.getTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem().setVisible(!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails && form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue() != null && (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() == null || (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() != null && !AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4.equals(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome().getOutcome()))));
//		form.getContextMenus().RefMan.getTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem().setVisible(!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails && form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue() != null && (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() == null || (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() != null && !AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4.equals(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome().getOutcome()))));		

		form.getContextMenus().RefMan.getTCIHistoryMenuVIEW_EDIT_CANCELLATION_DETAILSItem().setVisible(
				!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails 
				&& form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue() != null 
				&& (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() == null 
					|| (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() != null 
						&& !AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4.equals(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome().getOutcome())
						&& !AdmissionOfferOutcome.TCI_AMENDED.equals(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome().getOutcome()))));
		
		form.getContextMenus().RefMan.getTCIHistoryMenuEDIT_CANCELLATION_DETAILSItem().setVisible(
				!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails 
				&& form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue() != null 
				&& (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() == null 
					|| (form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() != null 
						&& !AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4.equals(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome().getOutcome())
						&& !AdmissionOfferOutcome.TCI_AMENDED.equals(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome().getOutcome()))));	
		
		form.getContextMenus().RefMan.getTCIHistoryMenuRECORD_REASONABLE_28_DAY_RULE_OFFERItem().setVisible(
				!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails 
				&& form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue() != null 
				&& form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getRule28DayStatus() != null
				&& !AdmissionOfferOutcome.TCI_AMENDED.equals(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome().getOutcome())); //WDEV-23350
		
		form.getContextMenus().RefMan.getTCIHistoryMenuVIEW_TCI_DETAILSItem().setVisible(!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails && form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue() != null);
		form.getContextMenus().RefMan.getERODHistoryMenuVIEW_ERODItem().setVisible(!editModeRequestDetails && !editModeTCIDetails && !editModeERODDetails && form.ctnDetails().lyrHistory().tabPageErodHistory().grdERODHistory().getValue() != null);
	}

	private boolean checkIfThereIsAnAdmissionForSelectedCareContext(PatientElectiveListDetailsVo patientElectiveListDetails)
	{
		if(patientElectiveListDetails != null && patientElectiveListDetails.getAdmissions() != null && patientElectiveListDetails.getAdmissions().size() > 0)
			return true;
		
		return false;
	}

	private void updateERODDetails()
	{
		boolean viewModeOnly = Boolean.TRUE.equals(form.getLocalContext().getViewModeOnly());
		boolean editModeERODDetails = FormMode.EDIT.equals(form.getLocalContext().getERODFormMode());
		boolean viewModeERODDetails = FormMode.VIEW.equals(form.getLocalContext().getERODFormMode());
		
		boolean editModeTCIDetails = FormMode.EDIT.equals(form.getLocalContext().getTCIFormMode());
		boolean editModeRequestDetails = FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode());
		
		form.ctnDetails().dteEarliestDateOffered().setEnabled(editModeERODDetails);
		form.ctnDetails().chkEXTDelay().setEnabled(editModeERODDetails);
		form.ctnDetails().dteSecondDateOffered().setEnabled(editModeERODDetails);
		form.ctnDetails().txtSecondDateOffered().setEnabled(editModeERODDetails && !form.ctnDetails().chkEXTDelay().getValue());
		form.ctnDetails().dtePatientAvailableFromDate().setEnabled(editModeERODDetails);
		form.ctnDetails().cmbERODReason().setEnabled(editModeERODDetails);
		form.ctnDetails().txtERODComment().setEnabled(editModeERODDetails);
		form.ctnDetails().dteERODDateOfOffer().setEnabled(editModeERODDetails);
		
		boolean sourceOfReferralNationalScreening = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails() != null &&  SourceOfReferral.NATIONAL_SCREENING.equals(form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getReferrerType());
		boolean referralUrgencyOrSourceOfReferral = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && (ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) || ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) || sourceOfReferralNationalScreening );
		boolean preAssessmentCompletionExemptService = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService().getIsPreAssessmentCompletionExempt());
		
		form.ctnDetails().btnAddEROD().setVisible(!viewModeOnly && form.getLocalContext().getPatientElectiveList() != null && (form.getLocalContext().getPatientElectiveList().getEROD() == null || (form.getLocalContext().getPatientElectiveList().getEROD() != null && Boolean.FALSE.equals(form.getLocalContext().getPatientElectiveList().getEROD().getIsActive()))) && (WaitingListStatus.REQUIRES_TCI.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) || WaitingListStatus.TCI_GIVEN.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) || (Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getPreAssessmentRequired()) && preAssessmentCompletionExemptService && referralUrgencyOrSourceOfReferral)) && viewModeERODDetails && !editModeRequestDetails && !editModeTCIDetails);
		form.ctnDetails().btnEditEROD().setVisible(!viewModeOnly && viewModeERODDetails && form.getLocalContext().getPatientElectiveList().getEROD() != null && !editModeRequestDetails && !editModeTCIDetails);
		form.ctnDetails().btnRecordERODInError().setVisible(!viewModeOnly && viewModeERODDetails && form.getLocalContext().getPatientElectiveList().getEROD() != null && !editModeRequestDetails && !editModeTCIDetails);
		
		form.ctnDetails().btnSaveEROD().setVisible(editModeERODDetails);
		form.ctnDetails().btnCancelEROD().setVisible(editModeERODDetails);
	}

	private void updateTCIDetails()
	{
		boolean viewModeOnly = Boolean.TRUE.equals(form.getLocalContext().getViewModeOnly());
		boolean editModeTCIDetails = FormMode.EDIT.equals(form.getLocalContext().getTCIFormMode());
		boolean viewModeTCIDetails = FormMode.VIEW.equals(form.getLocalContext().getTCIFormMode());
		
		boolean editModeRequestDetails = FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode());
		boolean editModeERODDetails = FormMode.EDIT.equals(form.getLocalContext().getERODFormMode());
		
		boolean isMedical = form.getLocalContext().getPatientElectiveList() != null && WaitingCardAdmissionType.MEDICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType());
		
		boolean newTCIRecord = form.getLocalContext().getPatientElectiveList() != null && (form.getLocalContext().getPatientElectiveList().getTCIDetails() == null || form.getLocalContext().getPatientElectiveList().getTCIDetails().getID_TCIForPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList().getTCIDetails().getID_TCIForPatientElectiveList() != null && Boolean.FALSE.equals(form.getLocalContext().getPatientElectiveList().getTCIDetails().getIsActive())));
	
		Date rttBreachReason = (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails() != null) ? form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getEnd18WW() : null;
		
		boolean isTCIAfterRTT = rttBreachReason != null && form.ctnDetails().dteTCIDate().getValue() != null && form.ctnDetails().dteTCIDate().getValue().isGreaterOrEqualThan(rttBreachReason);
		
		form.ctnDetails().lblTheatreDataLabel().setVisible(!isMedical);
		form.ctnDetails().lblTheatreSessionLabel().setVisible(!isMedical);
		
		form.ctnDetails().lblRTTBreachReason().setVisible(isTCIAfterRTT);
		form.ctnDetails().cmbBreachReason().setVisible(isTCIAfterRTT);
		
		form.ctnDetails().dteTCIDate().setEnabled(editModeTCIDetails && newTCIRecord);
		form.ctnDetails().timTCITime().setEnabled(editModeTCIDetails);
		form.ctnDetails().qmbTCIWard().setEnabled(editModeTCIDetails && form.ctnDetails().qmbHospital().getValue() != null);
		form.ctnDetails().qmbHospital().setEnabled(editModeTCIDetails && newTCIRecord);
		form.ctnDetails().cmbBreachReason().setEnabled(editModeTCIDetails && newTCIRecord);
		form.ctnDetails().dteDateOfOffer().setEnabled(editModeTCIDetails && newTCIRecord);
		form.ctnDetails().GroupWasReasonable().setEnabled(editModeTCIDetails && newTCIRecord);
		
		Date dayBreached28 = null;
		if(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart() != null)
		{
			dayBreached28 = (Date) form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart().clone();
			dayBreached28.addDay(DAY28);
		}
		
		boolean shouldReasonable28DayOfferBeMade = (form.getLocalContext().getPatientElectiveList() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getSubjectTo28DayRule()) && dayBreached28 != null && dayBreached28.isLessThan(form.ctnDetails().dteTCIDate().getValue())) || (!GroupWasReasonableEnumeration.None.equals(form.ctnDetails().GroupWasReasonable().getValue()));
		
		form.ctnDetails().lblWasReasonable28DayOfferMade().setVisible(shouldReasonable28DayOfferBeMade);
		form.ctnDetails().GroupWasReasonable().setVisible(shouldReasonable28DayOfferBeMade);
		
		boolean wasReasonable28DaysOfferMadeYes = GroupWasReasonableEnumeration.rdoYes.equals(form.ctnDetails().GroupWasReasonable().getValue());
		form.ctnDetails().lblTCIDateOffered().setVisible(wasReasonable28DaysOfferMadeYes && newTCIRecord);
		form.ctnDetails().dteTCIDateOffered().setVisible(wasReasonable28DaysOfferMadeYes && newTCIRecord);
		form.ctnDetails().dteTCIDateOffered().setEnabled(editModeTCIDetails && wasReasonable28DaysOfferMadeYes && newTCIRecord);
		
		form.ctnDetails().lblDateOfOfferSecond().setVisible(wasReasonable28DaysOfferMadeYes && newTCIRecord);
		form.ctnDetails().dteDateOfOfferSecond().setVisible(wasReasonable28DaysOfferMadeYes && newTCIRecord);
		form.ctnDetails().dteDateOfOfferSecond().setEnabled(editModeTCIDetails && wasReasonable28DaysOfferMadeYes && newTCIRecord);
		
		form.ctnDetails().lblReasonDeclined().setVisible(wasReasonable28DaysOfferMadeYes && newTCIRecord);
		form.ctnDetails().cmbReasonDeclined().setVisible(wasReasonable28DaysOfferMadeYes && newTCIRecord);
		form.ctnDetails().cmbReasonDeclined().setEnabled(editModeTCIDetails && wasReasonable28DaysOfferMadeYes && newTCIRecord);
		
		form.ctnDetails().cmbTCOOfferedMethod().setEnabled(editModeTCIDetails && newTCIRecord);
		
		form.ctnDetails().btnEditTCI().setVisible(!viewModeOnly && viewModeTCIDetails && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && !editModeRequestDetails && !editModeERODDetails);
		form.ctnDetails().btnEditTCI().setEnabled(true);
		
		form.ctnDetails().btnSaveTCI().setVisible(editModeTCIDetails);
		form.ctnDetails().btnSaveTCI().setEnabled(true);
		form.ctnDetails().btnCancelEditTCI().setVisible(editModeTCIDetails);
		form.ctnDetails().btnCancelEditTCI().setEnabled(true);
		
		boolean sourceOfReferralNationalScreening = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails() != null &&  SourceOfReferral.NATIONAL_SCREENING.equals(form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getReferrerType());
		boolean referralUrgencyOrSourceOfReferral = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && (ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) || ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getPatientElectiveList().getReferral().getUrgency()) || sourceOfReferralNationalScreening );
		boolean preAssessmentCompletionExemptService = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails() != null && form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getReferral().getReferralDetails().getService().getIsPreAssessmentCompletionExempt());
		boolean notFitForSurgery = form.getLocalContext().getPatientElectiveList() != null && YesNoUnknown.NO.equals(form.getLocalContext().getPatientElectiveList().getFitForSurgery());
		
		boolean isRemoved = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getElectiveListStatus() != null
							&& WaitingListStatus.REMOVED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus());
		
		boolean requiresVetting = form.getLocalContext().getPatientElectiveList() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getRequiresVetting()); //WDEV-22401
		
		form.ctnDetails().btnAddTCI().setVisible(!viewModeOnly && viewModeTCIDetails && form.getLocalContext().getPatientElectiveList() != null && !isRemoved && !notFitForSurgery
													&& (form.getLocalContext().getPatientElectiveList().getTCIDetails() == null || Boolean.FALSE.equals(form.getLocalContext().getPatientElectiveList().getTCIDetails().getIsActive()))
													&& (WaitingListStatus.REQUIRES_TCI.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) || (Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getPreAssessmentRequired()) && (preAssessmentCompletionExemptService || referralUrgencyOrSourceOfReferral))) && !editModeERODDetails && !editModeRequestDetails && !requiresVetting); //WDEV-22401
		
		form.ctnDetails().btnAddTCI().setEnabled(true);
		
		form.ctnDetails().btnCancelTCI().setVisible(!viewModeOnly && viewModeTCIDetails && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && !editModeERODDetails && !editModeRequestDetails);
		form.ctnDetails().btnDNA().setVisible(!viewModeOnly && viewModeTCIDetails && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && tciIsInThePast(form.getLocalContext().getPatientElectiveList().getTCIDetails()) && !editModeERODDetails && !editModeRequestDetails);
		form.ctnDetails().btnPrintTCI().setVisible(!viewModeOnly && viewModeTCIDetails && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && !editModeERODDetails && !editModeRequestDetails); //WDEV-23354
	}

	private boolean tciIsInThePast(TCIForPatientElectiveListDetailsVo tci)
	{
		if(tci == null || tci.getTCIDate() == null || tci.getTCITime() == null)
			return false;
		
		DateTime tciDateTime = new DateTime(tci.getTCIDate(), tci.getTCITime());
		
		if(tciDateTime.isLessThan(new DateTime()))
			return true;
		
		return false;
	}

	private void updatetabEndoscopyControlsState()
	{
		boolean isPlannedList = GroupElectiveListEnumeration.rdoSurveillance.equals(form.ctnDetails().GroupElectiveList().getValue());
		boolean isWaitingList = GroupElectiveListEnumeration.rdoWaitingList.equals(form.ctnDetails().GroupElectiveList().getValue()) || GroupElectiveListEnumeration.rdoBooked.equals(form.ctnDetails().GroupElectiveList().getValue());
		
		boolean isRequestEditMode = FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPlannedProcedureInEndoscopy().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setEnabled(isRequestEditMode);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setEnabled(isRequestEditMode);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblRequestedPlannedEndoscopy().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setEnabled(isRequestEditMode);
			
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyElectiveReasonEndoscopy().setEnabled(false);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyGeneralAnaesthetic().setEnabled(false);
		
		ProcedureLiteVo procEnd = form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
		
		boolean islblCompleteAPaperVisible = procEnd != null && (ProcedureEndoscopyType.ERCP.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.PEG.equals(procEnd.getEndoscopyType()));
		boolean isERCPORPRG = islblCompleteAPaperVisible;
		
		boolean isBronchoOrThora = procEnd != null && ( ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())); //wdev-21151
		
		boolean isColonoscopy = procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType());		//wdev-22467
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblCompleteAPaper().setVisible(islblCompleteAPaperVisible);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblSuspectedGIBleed().setVisible(procEnd != null && ProcedureEndoscopyType.GASTROSCOPY.equals(procEnd.getEndoscopyType()) && isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setVisible(procEnd != null && ProcedureEndoscopyType.GASTROSCOPY.equals(procEnd.getEndoscopyType()) && isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setEnabled(false);
		
		boolean isEndoscopist = form.getLocalContext().getHcpLiteUser() != null && Boolean.TRUE.equals(form.getLocalContext().getHcpLiteUser().getIsHCPaEndoscopist());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPoints().setVisible(procEnd != null && isEndoscopist && (!ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())) );
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPoints().setVisible(procEnd != null && isEndoscopist && (!ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())) );
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPoints().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblProcedureLengthEndoscopy().setVisible(isEndoscopist);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setVisible(isEndoscopist);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setEnabled(false);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblMinutesEndoscopy().setVisible(isEndoscopist);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setVisible(isEndoscopist && procEnd != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setVisible(procEnd != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblGeneralAnaesthetic().setVisible(procEnd != null  && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setEnabled(false);
		
		if( GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()) && procEnd != null &&  !ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()))
		{
			if( isEndoscopist)
			{
				if( !ProcedureEndoscopyType.ERCP.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.PEG.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()))	//wdev-21151
				{
        			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(true);
        			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(true);
        			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(false);
        			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(true);
        			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(false);
        			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(true);
        			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(true);
				}
				else
				{
					form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(false);
					form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(false);
					form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(false);
					form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(false);
					form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(false);
	    			
					form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(false);
					form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(false);
				}
			}
			else
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(false);
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(false);
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(false);
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(false);
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(false);
    			
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(false);
    			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(false);
			}
		}
		else
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(false);
		}
		
		//wdev-22467
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblIsPreColonoscopyRequired1().setVisible(isColonoscopy && GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblIsPreColonoscopyRequired2().setVisible(isColonoscopy && GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setVisible(isColonoscopy && GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode()));
		
		//---------
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setEnabled(false);
		
		Integer age  = form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().calculateAge():null;
		boolean showPreassessmentReq = GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()) 
        								&& form.getGlobalContext().Core.getPatientShort() != null
        								&& age != null 
        								&& age.intValue() < PATIENTAGEFORPREASSESSMENTREQUIRED
        								&& !isBronchoOrThora;
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPreassessmentRequiredEndoscopy().setVisible(showPreassessmentReq);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setVisible(showPreassessmentReq);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setEnabled(false);
		
		if( procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()) && isWaitingList)
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPatientMedicationStop().setVisible(true);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setVisible(true);
		}
		else
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPatientMedicationStop().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setVisible(false);
		}
			
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblDrugInformation().setVisible(isWaitingList && (GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()) || GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue())));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setVisible(isWaitingList && (GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()) || GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue())));
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setEnabled(false);
		
		if( procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()) && isWaitingList)
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblAssessmentOfRenalFunction().setVisible(true);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setVisible(true);
		}
		else
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblAssessmentOfRenalFunction().setVisible(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setVisible(false);
		}
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPleaserequestUAndEsCreatinineandeGFR().setVisible(procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()) && isWaitingList && GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().getValue()));
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkSpecialRequirementsEndoscopy().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblUrgencyEndoscopy().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblAnticoagulantReceiving().setVisible(isWaitingList && !isERCPORPRG);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setVisible(isWaitingList && !isERCPORPRG);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblPacemakerDefibrilatorEndoscopy().setVisible(isWaitingList && !isERCPORPRG && !isBronchoOrThora);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setVisible(isWaitingList && !isERCPORPRG && !isBronchoOrThora);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblKeyTherapeuticEquipment().setVisible(isWaitingList && !isERCPORPRG && !isBronchoOrThora);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblKeyTherapeuticEquipment1().setVisible(isWaitingList && !isERCPORPRG && !isBronchoOrThora);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setVisible(isWaitingList && !isERCPORPRG && !isBronchoOrThora);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblKeyTherapeuticEquipmentComment().setVisible(isWaitingList && !isERCPORPRG && !isBronchoOrThora && GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue()) /*isWaitingList*/);		//wdev-22291
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().setVisible(isWaitingList && !isERCPORPRG && !isBronchoOrThora && GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue())/*isWaitingList*/);				//wdev-22291
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().setEnabled(false);
		
		//wdev-21979
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().lblElectiveListEndoscopyTab().setVisible(false);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setVisible(false);
		//------ end wdev-21979
		
		//wdev - 22310
		if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			form.ctnDetails().lblRecordingDateTime().setVisible(Boolean.TRUE);
			form.ctnDetails().lblRecordingMOS().setVisible(Boolean.TRUE);
    		form.ctnDetails().dtimRecordingDateTime().setVisible(Boolean.TRUE);
    		form.ctnDetails().ccRecordingMOS().setVisible(Boolean.TRUE);
    		    		    		
    		form.ctnDetails().ccAuthoringHCP().setVisible(Boolean.TRUE);
    		
    		
		}
		//-------
		
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode()));	//wdev-22465
		
		
	}

	private void updatetabMedicalControlsState()
	{
		boolean isPlannedList = GroupElectiveListEnumeration.rdoSurveillance.equals(form.ctnDetails().GroupElectiveList().getValue());
		boolean isWaitingList = GroupElectiveListEnumeration.rdoWaitingList.equals(form.ctnDetails().GroupElectiveList().getValue()) || GroupElectiveListEnumeration.rdoBooked.equals(form.ctnDetails().GroupElectiveList().getValue());
		
		boolean isRequestEditMode = FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblPlanProcedureInMedical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setEnabled(isRequestEditMode);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setEnabled(isRequestEditMode);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblRequestedPlannedMedical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setEnabled(isRequestEditMode);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtDummyElectiveReasonMedical().setVisible(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblPosibleDateGivenToPatientMedical().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setEnabled(isRequestEditMode);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblDateGivenToPatientMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setEnabled(isRequestEditMode);
		
		ProcedureLiteVo procprim = form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue();
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblLateralityMedical().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setEnabled(false);
		
		boolean showSecond = Boolean.TRUE.equals(form.getLocalContext().getShowSecondMedicalProcedure());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setVisible(showSecond);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblIntendedProcedureSecondMedical().setVisible(showSecond);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setEnabled(false);
		
		ProcedureLiteVo procsec = form.ctnDetails().lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue();
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblLateralitySecondMedical().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblDaysMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblnumberofdaysofnoticerequiredMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().lblPriorityMedical().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode()));		//wdev-22465
		
		//wdev - 22310
		if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			form.ctnDetails().lblRecordingDateTime().setVisible(Boolean.TRUE);
			form.ctnDetails().lblRecordingMOS().setVisible(Boolean.TRUE);
    		form.ctnDetails().dtimRecordingDateTime().setVisible(Boolean.TRUE);
    		form.ctnDetails().ccRecordingMOS().setVisible(Boolean.TRUE);
    		    		    		
    		form.ctnDetails().ccAuthoringHCP().setVisible(Boolean.TRUE);
    		
    		
		}
		//-------
	}

	private void updatetabSurgicalControlsState()
	{
		boolean isPlannedList = GroupElectiveListEnumeration.rdoSurveillance.equals(form.ctnDetails().GroupElectiveList().getValue());
		boolean isWaitingList = GroupElectiveListEnumeration.rdoWaitingList.equals(form.ctnDetails().GroupElectiveList().getValue()) || GroupElectiveListEnumeration.rdoBooked.equals(form.ctnDetails().GroupElectiveList().getValue());
		
		boolean isRequestEditMode = FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode());
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblPlanProcedureInSurgical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setEnabled(isRequestEditMode);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setEnabled(isRequestEditMode);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblRequestedPlannedDateSurgical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setVisible(isPlannedList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setEnabled(isRequestEditMode);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblPosibleDateGivenToPatient().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setEnabled(isRequestEditMode);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblDateGivenToPatient().setVisible(isWaitingList && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setVisible(isWaitingList && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setEnabled(isRequestEditMode);
				
		ProcedureLiteVo procprim = form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue();
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblLaterality().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setEnabled(false);
		
		
		boolean showSecond = Boolean.TRUE.equals(form.getLocalContext().getShowSecondSurgicalProcedure());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setVisible(showSecond);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblIntendedProcedureSecond().setVisible(showSecond);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setEnabled(false);
		
		ProcedureLiteVo procsec = form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue();
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblLateralitySecond().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblShortNotice().setVisible(AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setVisible(AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setEnabled(false);

		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblDaysOfNoticeReq().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblnumberofdaysofnoticerequired().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblCriticalCareBedRequired().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue() != null && !AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue() != null && !AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setVisible(form.getLocalContext().getPatientElectiveList() != null && YesNoUnknown.YES.equals(form.getLocalContext().getPatientElectiveList().getPatientReceivingAnticoagulantTherapy()));
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblHappyToFollowPerioperativeGuidelines1().setVisible(form.getLocalContext().getPatientElectiveList() != null && YesNoUnknown.YES.equals(form.getLocalContext().getPatientElectiveList().getPatientReceivingAnticoagulantTherapy()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblHappyToFollowPerioperativeGuidelines2().setVisible(form.getLocalContext().getPatientElectiveList() != null && YesNoUnknown.YES.equals(form.getLocalContext().getPatientElectiveList().getPatientReceivingAnticoagulantTherapy()));
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setEnabled(false);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalQuestion1().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblReason().setVisible(GroupPerioperativeEnumeration.rdoNoPerioperative.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().getValue()) && GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtReason().setVisible(GroupPerioperativeEnumeration.rdoNoPerioperative.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().getValue()) && GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtReason().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblpreoperativeOverNights().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setEnabled(false);
		
		if( (form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == null || (form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == 0 )  )&& !form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(true);
			form.getLocalContext().setIsVisibleSurgicalTheatreType(true);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setEnabled(isRequestEditMode && !form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == 0);
		}
		else if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() > 0   && !form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() )
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
			form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
		}
		else
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
			form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
		}
		
		boolean showPeripheralLocation = Boolean.TRUE.equals(form.getLocalContext().getIsVisibleSurgicalTheatreType()) && GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setVisible(showPeripheralLocation);	
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setEnabled(isRequestEditMode);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblPeripheralHospital().setVisible(showPeripheralLocation);
		
		HcpLiteVo tempVo = form.getLocalContext().getLoggedInUser();
		if(tempVo != null && tempVo instanceof HcpLiteVo)
		{
			if(!Boolean.TRUE.equals(form.getLocalContext().getisLoggedInUserMedicByHcpAndService()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, false);
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(false);
			}
		}
		else
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, false);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(false);
		}
		
		PatientElectiveListDetailsVo patientElectiveList = form.getLocalContext().getPatientElectiveList();
		if(patientElectiveList != null && patientElectiveList.getConsultantIsNotNull())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, true);
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(true);
		}
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoAny, true);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoAnyConsultant, true);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNamedConsultant, true);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue().equals(GroupProcedureCarriedOutEnumeration.rdoNamedConsultant));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getRequestFormMode()));		//wdev-22465
		
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalRiskByAnaesthetist().setVisible(!AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalRiskByAnaesthetist().setEnabled(false);
		
		Integer age  = form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().calculateAge():null;
		boolean showPreassesmentReq =   form.getGlobalContext().Core.getPatientShort() != null && age != null && age.intValue() < PATIENTAGEFORPREASSESSMENTREQUIRED && (AnaestheticType.GA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || AnaestheticType.SEDATION.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));	
		
		boolean bPreAssessmentRequired = form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().getValue() == true;
       
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setVisible(!( AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || (showPreassesmentReq && !bPreAssessmentRequired)));	//wdev-21750
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblDoyouwantthispatientohaveanassessmentofriskbyanAnaesthetist().setVisible(!( AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || (showPreassesmentReq && !bPreAssessmentRequired)));	//wdev-21750
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblEmailLetterToPreAssessmnetAnaesthetist().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().getValue() == true && ( !( AnaestheticType.LA.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || (showPreassesmentReq && !bPreAssessmentRequired))));	//wdev-21750	
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setVisible(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().getValue());
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setEnabled(false);
	                         		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setVisible(showPreassesmentReq);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblPreAssessmentRequired().setVisible(showPreassesmentReq);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setEnabled(false);
		
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().lblPriority().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().setVisible(isWaitingList);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().setEnabled(false);
		
		//wdev - 22310
		if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			form.ctnDetails().lblRecordingDateTime().setVisible(Boolean.TRUE);
			form.ctnDetails().lblRecordingMOS().setVisible(Boolean.TRUE);
    		form.ctnDetails().dtimRecordingDateTime().setVisible(Boolean.TRUE);
    		form.ctnDetails().ccRecordingMOS().setVisible(Boolean.TRUE);
    		    		    		
    		form.ctnDetails().ccAuthoringHCP().setVisible(Boolean.TRUE);
    		
    		
		}
		//-------

		
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(null);//wdev-22477
		if (formName.equals(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog) && DialogResult.OK.equals(result) && FormMode.VIEW.equals(form.getMode()))
		{
			if(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getID_TCIOutcomeForPatientElectiveList() == null)
			{
				if(cancelTCIRecord())
					open();
			}
			else
			{
				open();
			}
		}
		else if(formName.equals(form.getForms().RefMan.RecordReasonable28DayRuleOffer))
		{
			open();
		}
		else if(formName.equals(form.getForms().RefMan.BookTheatreSlot))
		{
			open();
		}
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			if(form.getLocalContext().getERODRieRecord() != null)
			{
				if(markERODAsRIE())
					open();
			}
			else if(form.getLocalContext().getNotesRieRecord() != null)
			{
				if(markNotesAsRIE())
					open();
			}
		}
		else if(formName.equals(form.getForms().RefMan.PatientElectiveListNotes))
		{
			if(DialogResult.OK.equals(result))
			{
				if(savePatientElectiveListNotes())
					open();
			}
			else
			{
				updateControlsState();
			}
		}
		else if(DialogResult.ABORT.equals(result) && formName.equals(form.getForms().RefMan.ElectiveListAddLaterDialog)) 
		{
			engine.close(DialogResult.CANCEL);
		}
		else if(formName.equals(form.getForms().RefMan.PreAssessmentOutcomeDlg))
		{
			open();
		}
	}
	
	private boolean markNotesAsRIE()
	{
		boolean isStale = false;
		
		if(domain.isStaleNote(form.getLocalContext().getNotesRieRecord()))
		{
			isStale = true;
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			domain.markAsRie(form.getLocalContext().getNotesRieRecord(), engine.getFormName(), form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, null, form.getGlobalContext().Core.getRieMessage());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	private boolean savePatientElectiveListNotes()
	{
		if(form.getLocalContext().getPatientElectiveList() == null)
			return false;
		
		PatientElectiveListDetailsVo patientElectiveList = (PatientElectiveListDetailsVo) form.getLocalContext().getPatientElectiveList().clone();
		
		if(patientElectiveList.getNotes() == null)
			patientElectiveList.setNotes(new PatientElectiveListNotesVoCollection());
		
		patientElectiveList.getNotes().add(form.getGlobalContext().RefMan.getPatientElectiveListNotes());
		
		String[] errors = patientElectiveList.validate(validateUIErrors());
		if(errors != null && errors.length > 0)
		{
			//engine.showErrors(errors);
			engine.showMessage(ConcatArrayofStrings(errors), "Error", MessageButtons.OK, MessageIcon.ERROR);	//wdev-22652
			return false;
		}
		
		try
		{
			//WDEV-23350
//			form.getLocalContext().setPatientElectiveList(domain.save(patientElectiveList, null, null));
			form.getLocalContext().setPatientElectiveList(domain.save(patientElectiveList, null, null, null)); //WDEV-23350
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		return true;
	}
	//wdev-22652
	private String ConcatArrayofStrings(String[] errors)
	{
		StringBuffer errStr = new StringBuffer();
		if( errors != null && errors.length > 0)
		{
			for(int i = 0; i < errors.length;i++)
			{
				errStr.append(errors[i]).append("\n");
			}
			if( errStr != null )
				return errStr.toString();
		}
		return null;
	}
	
	private boolean cancelTCIRecord()
	{
		Booking_AppointmentRefVo appointmentsDetails = null;
		Boolean tciHasAppointment = false;
		if (form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointmentIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getTheatreBookingIsNotNull() && theatreAppointmetnIsInTheFutureAndIsNotCancelled(form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment()))
		{
			appointmentsDetails = form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment();
			tciHasAppointment = true;
		}
		
		try
		{
			Booking_AppointmentRefVo theatreAppt = null;
			if(appointmentsDetails != null && form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment() == null || Boolean.FALSE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
			{
				theatreAppt = appointmentsDetails;
			}
			
			domain.cancelTCI(form.getLocalContext().getPatientElectiveList(), form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList(), theatreAppt);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		if (tciHasAppointment && form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
		{
			cancelAppt(appointmentsDetails);
		}
		
		return true;
	}
	
	private boolean cancelAppt(Booking_AppointmentRefVo appointmentsDetails) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				if(appointmentsDetails == null)
					return false;

				Booking_AppointmentVo voApptFull = populateCancelledAppointment(appointmentsDetails); 

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return false;
				}

				domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");

				if(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null)
				{
					domain.updateCatsReferralAdditionalInvStatus(form.getLocalContext().getPatientElectiveList().getReferral(), voApptFull);
					domain.updateCatsReferralCancelStatus(form.getLocalContext().getPatientElectiveList().getReferral());
				}

				return true;
			} 
			catch (StaleObjectException e) 
			{
				e.printStackTrace();
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.CANCEL);
				return false;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
		return false;
	}

	private Booking_AppointmentVo populateCancelledAppointment(Booking_AppointmentRefVo appointmentsDetails)
	{
		Booking_AppointmentVo voApptFull = domain.getBookingAppointment(appointmentsDetails);
		
		Appointment_StatusVo voApptStatus = null;
		
		if (form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null)
		{
			voApptStatus = new Appointment_StatusVo();
			voApptStatus.setStatus(Status_Reason.CANCELLED);
			voApptStatus.setStatusReason(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getOutcome()) ? Status_Reason.PATIENTCANCELLED : Status_Reason.HOSPITALCANCELLED);
			voApptStatus.setRebookSelected(false);	
		}
			
		voApptStatus.setSession(voApptFull.getSessionIsNotNull() ? voApptFull.getSession() : null); //WDEV-23185
		
		if(voApptStatus != null)
		{
			voApptFull.setApptStatus(Status_Reason.CANCELLED);
			
			voApptFull.setCurrentStatusRecord(voApptStatus);

			if(voApptFull.getApptStatusHistory() == null)
				voApptFull.setApptStatusHistory(new Appointment_StatusVoCollection());
			
			voApptFull.getApptStatusHistory().add(voApptStatus);
			voApptFull.setApptStatusReas(voApptStatus.getStatusReason());	
			voApptFull.setRequiresRebook(voApptStatus.getRebookSelected());
			
			if(voApptFull.getTheatreBooking()  == null && Status_Reason.HOSPITALCANCELLED.equals(voApptStatus.getStatusReason()))
			{
				int numProviderCancellations = 0;
				
				if(voApptFull.getNumProviderCancellations() != null)
				{
					numProviderCancellations = voApptFull.getNumProviderCancellations();
				}
				numProviderCancellations += 1;
				
				voApptFull.setNumProviderCancellations(numProviderCancellations);
			}
			
			if(voApptFull.getTheatreBooking()  == null && Status_Reason.PATIENTCANCELLED.equals(voApptStatus.getStatusReason()))
			{
				int numPatientCancellations = 0;
				
				if(voApptFull.getNumPatientCancellations() != null)
				{
					numPatientCancellations = voApptFull.getNumPatientCancellations();
				}
				numPatientCancellations += 1;
				
				voApptFull.setNumPatientCancellations(numPatientCancellations);
			}
		}
		
		if (voApptFull.getSessionSlotIsNotNull() && voApptFull.getSessionIsNotNull()) 
			voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus());
		
		return voApptFull;
	}

	@Override
	protected void onDteRequestedPlannedDateSurgicalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(GroupPlanedProceduresSurgicalEnumeration.None);
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setValue(null);
	}
	
	@Override
	protected void onRadioButtonGroupPlanedProceduresSurgicalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setValue(null);
	}
	
	@Override
	protected void onChkPatientDateGivenToPatientValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(!form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setValue(null);
			form.ctnDetails().GroupElectiveList().setValue(GroupElectiveListEnumeration.rdoWaitingList);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onDteRequestedPlannedMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(GroupPlanedProceduresMedicalEnumeration.None);
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setValue(null);
	}
	
	@Override
	protected void onRadioButtonGroupPlanedProceduresMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setValue(null);
	}
	
	@Override
	protected void onChkPatientDateGivenToPatientMedicalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(!form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue())
		{
			form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setValue(null);
			form.ctnDetails().GroupElectiveList().setValue(GroupElectiveListEnumeration.rdoWaitingList);
		}
			
		updateControlsState();
	}
	
	@Override
	protected void onDteRequestedPlannedEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(GroupPlanedProceduresEndoscopyEnumeration.None);
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setValue(null);
	}
	
	@Override
	protected void onRadioButtonGroupPlanedProceduresEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setValue(null);
	}
	
	@Override
	protected void onChkEXTDelayValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateERODDetails();
	}
	
	@Override
	protected void onQmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().qmbTCIWard().clear();
		
		updateTCIDetails();
	}
	
	@Override
	protected void onQmbHospitalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		searchHospitals(value);
		
		updateTCIDetails();
	}

	private void searchHospitals(String value)
	{
		form.ctnDetails().qmbTCIWard().clear();
		form.ctnDetails().qmbHospital().clear();
		
		ElectiveListConfigLiteVo selectedElectiveList = form.getLocalContext().getPatientElectiveList().getElectiveList();
		
		if (selectedElectiveList==null)
			return ;
		
		LocationLiteVoCollection hospitals = domain.listHospitalsByElectiveList(selectedElectiveList, value);
		
		if (hospitals == null || hospitals.size()==0)
			return;
			
		for (int i = 0; i < hospitals.size(); i++)
		{
			form.ctnDetails().qmbHospital().newRow(hospitals.get(i), hospitals.get(i).getName());
		}
		
		if (hospitals.size()==1)
		{
			form.ctnDetails().qmbHospital().setValue(hospitals.get(0));
		}
		else
		{
			form.ctnDetails().qmbHospital().showOpened();
		}
	}
	
	@Override
	protected void onBtnCancelTCIClick() throws ims.framework.exceptions.PresentationLogicException
	{
		cancelTCI();
	}
	
	private void cancelTCI()
	{
		if (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null)
		{
			TCIOutcomeForPatientElectiveListVo dummyTCIOutcome = new TCIOutcomeForPatientElectiveListVo();
			dummyTCIOutcome.setTciId(form.getLocalContext().getPatientElectiveList().getTCIDetails().getID_TCIForPatientElectiveList());
			
			if (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointmentIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getTheatreBookingIsNotNull() && theatreAppointmetnIsInTheFutureAndIsNotCancelled(form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment()))
			{
				dummyTCIOutcome.setTciHasFutureTheatreAppt(true);
				dummyTCIOutcome.setCancelTheatreAppointment(true);
			}
			
			form.getGlobalContext().RefMan.setTCIOutcomeForPatientElectiveList(dummyTCIOutcome);
		}
		
		engine.open(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog);
	}
	
	private boolean theatreAppointmetnIsInTheFutureAndIsNotCancelled(BookingAppointmentForTCIVo appointment)
	{
		if(appointment == null)
			return false;
		
		DateTime currentDate = new DateTime();
		
		if(appointment.getAppointmentDate() != null && currentDate.getDate().isGreaterThan(appointment.getAppointmentDate()))
			return false;
		
		if(appointment.getCurrentStatusRecord() != null && Status_Reason.CANCELLED.equals(appointment.getCurrentStatusRecord().getStatus()))
			return false;
		
		return true;
	}

	@Override
	protected void onDteTCIDateValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateTCIDetails();
		
		if(!form.ctnDetails().cmbBreachReason().getVisible())
			form.ctnDetails().cmbBreachReason().setValue(null);
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnAddTCIClick() throws PresentationLogicException
	{
		boolean isMedical = form.getLocalContext().getPatientElectiveList() != null && WaitingCardAdmissionType.MEDICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType());
		
		boolean requiresVetting =  form.getLocalContext().getPatientElectiveList() != null && Boolean.TRUE.equals( form.getLocalContext().getPatientElectiveList().getRequiresVetting()); //WDEV-22401
		
		if(isMedical || (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTheatreAppointment() != null && form.getLocalContext().getPatientElectiveList().getTheatreAppointment().getCurrentStatusRecord() != null && !Status_Reason.CANCELLED.equals(form.getLocalContext().getPatientElectiveList().getTheatreAppointment().getCurrentStatusRecord().getStatus()) && appointmentIsInTheFuture(form.getLocalContext().getPatientElectiveList().getTheatreAppointment())))
		{
			addNewTCI();
			
			updateControlsState();
		}
		else if (!requiresVetting ) //WDEV-22401
		{
			engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {form.getLocalContext().getPatientElectiveList()});
		}
	}

	private boolean appointmentIsInTheFuture(Booking_AppointmentLiteVo theatreAppointment)
	{
		if(theatreAppointment == null)
			return false;
		
		if(theatreAppointment.getAppointmentDate() == null || theatreAppointment.getApptStartTime() == null)
			return false;
		
		DateTime apptDateTime = new DateTime(theatreAppointment.getAppointmentDate(), theatreAppointment.getApptStartTime());
		
		if(apptDateTime.isGreaterThan(new DateTime()))
			return true;
		
		return false;
	}

	@Override
	protected void onBtnBookTheatreClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(form.getLocalContext().getPatientElectiveList().getProcedureDescription());//wdev-22477

		engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {form.getLocalContext().getPatientElectiveList()});
	}

	@Override
	protected void onBtnAddERODClick() throws PresentationLogicException
	{
		form.getLocalContext().setERODFormMode(FormMode.EDIT);
		form.ctnDetails().dteEarliestDateOffered().setFocus();
		form.ctnDetails().dteERODDateOfOffer().setValue(new Date());
		
		updateControlsState();
	}

	@Override
	protected void onBtnPatientSummaryClick() throws PresentationLogicException
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			if(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue().length() == 0)
			{
				engine.showMessage("PATIENT_DASHBOARD_URL config flag was not set.");
				return;
			}
			
			/*
			DashboardSecureKeyHelper helper = new DashboardSecureKeyHelper(domain, engine);
			if(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull())
				helper.addDashboardParams("PID", form.getGlobalContext().Core.getPatientShort().getID_Patient().toString());
			
			helper.openDashboardCloseableOnContextChange(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue());
			*/
			
			//WDEV-22837
			List<UrlParam> params = new ArrayList<UrlParam>();
			if(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull())
				params.add(new UrlParam("PID", form.getGlobalContext().Core.getPatientShort().getID_Patient().toString()));
			engine.openDashboardCloseableOnContextChange(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue(), params);
		}
	}

	@Override //http://jira/browse/WDEV-21720
	protected void onBtnTheatreDashboardClick() throws PresentationLogicException
	{
		if(ConfigFlag.GEN.THEATRE_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.THEATRE_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("THEATRE_DASHBOARD_URL config flag was not set.");
			return;
		}
		
		//WDEV-22837
		engine.openDashboard(ConfigFlag.GEN.THEATRE_DASHBOARD_URL.getValue(), null);
		
		/*
		String url = ConfigFlag.GEN.THEATRE_DASHBOARD_URL.getValue();
		List<WindowParam> params = new ArrayList<WindowParam>(); 
		params.add(new WindowParam("FullScreen","false")); 
		params.add(new WindowParam("ToolBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("MenuBar","false")); 
		params.add(new WindowParam("AddressBar","false")); 
		params.add(new WindowParam("Resizable","true")); 
		params.add(new WindowParam("Visible","true"));
		params.add(new WindowParam("Width","1440")); 
		params.add(new WindowParam("Height","1000")); 

		engine.openCustomUrl(url, params, true);
		*/
	}

	@Override
	protected void onBtnBedManagementDashboardClick() throws PresentationLogicException
	{
		if(ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("WARD_DASHBOARD_URL config flag was not set.");
			return;
		}
		
		//WDEV-22837
		engine.openDashboard(ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue(), null);
		
		/*
		String url = ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue();
		List<WindowParam> params = new ArrayList<WindowParam>(); 
		params.add(new WindowParam("FullScreen","false")); 
		params.add(new WindowParam("ToolBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("MenuBar","false")); 
		params.add(new WindowParam("AddressBar","false")); 
		params.add(new WindowParam("Resizable","true")); 
		params.add(new WindowParam("Visible","true"));
		params.add(new WindowParam("Width","1440")); 
		params.add(new WindowParam("Height","1000")); 

		engine.openCustomUrl(url, params, true);
		*/
	}

	@Override
	protected void onBtnCancelERODClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnSaveERODClick() throws PresentationLogicException
	{
		if(saveEROD())
			open();
	}

	private boolean saveEROD()
	{
		if(form.getLocalContext().getPatientElectiveList() == null)
			return false;
		
		Date previousEarliestDateOffered = form.getLocalContext().getPatientElectiveList().getEROD() != null && form.getLocalContext().getPatientElectiveList().getEROD().getERODDate1() != null ? (Date) form.getLocalContext().getPatientElectiveList().getEROD().getERODDate1().clone() : null;
			
		ReferralERODDetailsVo erod = populateERODFromScreen(form.getLocalContext().getPatientElectiveList().getEROD());
		
		if(erod == null)
			return false;
		
		String[] errors = erod.validate(validateERODUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		form.getLocalContext().getPatientElectiveList().setEROD(erod);
		
		String[] electiveListErrors = form.getLocalContext().getPatientElectiveList().validate();
		if(electiveListErrors != null && electiveListErrors.length > 0)
		{
			engine.showErrors(electiveListErrors);
			return false;
		}
		
		try
		{
			//WDEV-23350
//			form.getLocalContext().setPatientElectiveList(domain.save(form.getLocalContext().getPatientElectiveList(), null, previousEarliestDateOffered));
			form.getLocalContext().setPatientElectiveList(domain.save(form.getLocalContext().getPatientElectiveList(), null, previousEarliestDateOffered, null)); //WDEV-23350
			
			//WDEV-19704 Trigger HL7 message moved here from impl as per WDEV-20793
			domain.triggerElectiveListEvent(form.getLocalContext().getPatientElectiveList());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		return true;
	}

	private String[] validateERODUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		Date dateOnList = form.getLocalContext().getPatientElectiveList().getDateOnList();
		Date tciDate = (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null) ? form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate() : null;
		
		if(form.ctnDetails().dteEarliestDateOffered().getValue() != null && form.ctnDetails().dteEarliestDateOffered().getValue().isLessThan(dateOnList))
		{
			uiErrors.add("'Earliest Date Offered' must be later than 'Date on List'.");
		}
		
		if(form.ctnDetails().dteEarliestDateOffered().getValue() != null && tciDate != null && form.ctnDetails().dteEarliestDateOffered().getValue().isGreaterOrEqualThan(tciDate))
		{
			uiErrors.add("'Earliest Date Offered' must be earlier than 'TCI Date'.");
		}
		
		if(Boolean.FALSE.equals(form.ctnDetails().chkEXTDelay().getValue()) && form.ctnDetails().dteSecondDateOffered().getValue() == null)
		{
			uiErrors.add("'Second Date Offered' is mandatory.");
		}
		
		if(form.ctnDetails().dteEarliestDateOffered().getValue() != null && form.ctnDetails().dteSecondDateOffered().getValue() != null && form.ctnDetails().dteSecondDateOffered().getValue().isLessOrEqualThan(form.ctnDetails().dteEarliestDateOffered().getValue()))
		{
			uiErrors.add("'Second Date Offered' must be later than 'Earliest Date Offered'.");
		}
		
		if(form.ctnDetails().dteSecondDateOffered().getValue() != null && tciDate != null && form.ctnDetails().dteSecondDateOffered().getValue().isGreaterOrEqualThan(tciDate))
		{
			uiErrors.add("'Second Date Offered' must be earlier than 'TCI Date'.");
		}
		
		if(form.ctnDetails().dtePatientAvailableFromDate().getValue() == null)
		{
			uiErrors.add("'Patient Available from Date' is mandatory.");
		}
		
		if(form.ctnDetails().dtePatientAvailableFromDate().getValue() != null && form.ctnDetails().dteSecondDateOffered().getValue() != null && form.ctnDetails().dtePatientAvailableFromDate().getValue().isLessOrEqualThan(form.ctnDetails().dteSecondDateOffered().getValue()))
		{
			uiErrors.add("'Patient Available from Date' must be later than 'Second Date Offered'.");
		}
		
		if(form.ctnDetails().dtePatientAvailableFromDate().getValue() != null && tciDate != null && form.ctnDetails().dtePatientAvailableFromDate().getValue().isGreaterOrEqualThan(tciDate))
		{
			uiErrors.add("'Patient Available from Date' must be earlier than 'TCI Date'.");
		}
		
		if(form.ctnDetails().cmbERODReason().getValue() == null)
		{
			uiErrors.add("'EROD Reason' is mandatory.");
		}
		
		if(form.ctnDetails().dteERODDateOfOffer().getValue() == null)
		{
			uiErrors.add("'Date of Offer' is mandatory.");
		}
		
		if (dateOnList != null && form.ctnDetails().dteERODDateOfOffer().getValue() != null && form.ctnDetails().dteERODDateOfOffer().getValue().isLessThan(dateOnList))
		{
			uiErrors.add("'Date of Offer' cannot be earlier than " + dateOnList);
		}
		
		if(form.ctnDetails().dteERODDateOfOffer().getValue() != null)
		{
			Date dateOfOffer = (Date) form.ctnDetails().dteERODDateOfOffer().getValue().clone();
			dateOfOffer.addDay(21);
			
			if(form.ctnDetails().dteEarliestDateOffered().getValue() != null)
			{
				if(dateOfOffer.isGreaterThan(form.ctnDetails().dteEarliestDateOffered().getValue()))
				{
					uiErrors.add("A reasonable offer must be made 21 days or more before the 'Earliest Date Offered'.");
				}
			}
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private ReferralERODDetailsVo populateERODFromScreen(ReferralERODDetailsVo erodDetails)
	{
		if(erodDetails == null)
		{
			erodDetails = new ReferralERODDetailsVo();
			
			if(form.getLocalContext().getPatientElectiveList() != null)
			{
				if (ElectiveListReason.DIAGNOSTIC.equals(form.getLocalContext().getPatientElectiveList().getElectiveListReason()))
					erodDetails.setERODType(ERODType.DIAGNOSTIC);
				else
					erodDetails.setERODType(ERODType.ELECTIVE);
			}
		}
		else
		{
			erodDetails = (ReferralERODDetailsVo) erodDetails.clone();
		}
		
		erodDetails.setERODDate1(form.ctnDetails().dteEarliestDateOffered().getValue());
		erodDetails.setERODDate2(form.ctnDetails().dteSecondDateOffered().getValue());
		erodDetails.setPatAvailFromDate(form.ctnDetails().dtePatientAvailableFromDate().getValue());
		erodDetails.setPathWayClock((form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null && form.getLocalContext().getPatientElectiveList().getReferral().getJourneyIsNotNull()) ? form.getLocalContext().getPatientElectiveList().getReferral().getJourney().getCurrentClock():null);
		erodDetails.setIsActive(Boolean.TRUE);
		
		erodDetails.setERODReason(form.ctnDetails().cmbERODReason().getValue());
		erodDetails.setERODReasonComment(form.ctnDetails().txtERODComment().getValue());
		erodDetails.setIsExtendedDelay(form.ctnDetails().chkEXTDelay().getValue());
		
		erodDetails.setDateOfOffer(form.ctnDetails().dteERODDateOfOffer().getValue());
		
		return erodDetails;
	}

	@Override
	protected void onBtnEditERODClick() throws PresentationLogicException
	{
		form.getLocalContext().setERODFormMode(FormMode.EDIT);
		form.ctnDetails().dteEarliestDateOffered().setFocus();
		
		updateControlsState();
	}

	@Override
	protected void onBtnDNAClick() throws PresentationLogicException
	{
		markTCIAsDNA();
	}

	private void markTCIAsDNA()
	{
		if((form.getLocalContext().getPatientElectiveList() != null
			&& form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType() != null
			&& form.getLocalContext().getPatientElectiveList().getTCIDetails() != null
			&& form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment() == null) //WDEV-23428
				|| (form.getLocalContext().getPatientElectiveList() != null 
				&& form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType() != null
				&& WaitingCardAdmissionType.MEDICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType())
				&& form.getLocalContext().getPatientElectiveList().getTCIDetails() != null) 
				|| (form.getLocalContext().getPatientElectiveList() != null 
				&& form.getLocalContext().getPatientElectiveList().getTCIDetails() != null 
				&& form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment() != null 
				&& form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getAppointmentDate() != null
				//WDEV-22317 
				/* 
				 * Ensure that message box is displayed when appointment date is >= TCI date, not just appointment date is > TCI date
				 */
//				&& form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getAppointmentDate().isGreaterThan(form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()))
				&& form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getAppointmentDate().isGreaterOrEqualThan(form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()))) //WDEV-22317
		{
			form.getLocalContext().setDNAMessageBoxId(engine.showMessage("Are you sure you wish to DNA?", "", MessageButtons.YESNO, MessageIcon.QUESTION)); //WDEV-22777
			return;
		}
		
		boolean tciHasAppointment = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment() != null;
		
		if(markAsDNA(tciHasAppointment))
			open();
	}

	private boolean markAsDNA(boolean markAppointmentAsDNA)
	{
		Booking_AppointmentRefVo appointment = null;
		Boolean tciHasAppointment = false;
		if (markAppointmentAsDNA)
		{
			appointment = form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment();
			tciHasAppointment = true;
		}
		
		try
		{
			Booking_AppointmentRefVo theatreAppointment = null;
			if(!markAppointmentAsDNA && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment() != null)
			{
				theatreAppointment = form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment();
			}
			
			domain.dnaTCI(form.getLocalContext().getPatientElectiveList(), theatreAppointment);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		if(markAppointmentAsDNA && tciHasAppointment)
		{
			dnaAppointment(appointment);
		}
		
		return true;
	}

	private void dnaAppointment(Booking_AppointmentRefVo appointment)
	{
		if(appointment == null)
			return;
		
		Booking_AppointmentVo voAppt = populateDNAAppoitment(appointment);
		
		String[] error = voAppt.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		try
		{
			domain.dnaAppointment(voAppt, form.getLocalContext().getPatientElectiveList().getReferral());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
	}

	private Booking_AppointmentVo populateDNAAppoitment(Booking_AppointmentRefVo appointment)
	{
		Booking_AppointmentVo voAppt = domain.getBookingAppointment(appointment);
		voAppt.setApptStatus(Status_Reason.DNA);
		
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		
		if(voAppt.getSessionIsNotNull())
			voStatus.setApptDate(voAppt.getSession().getSessionDate());
		
		voStatus.setApptTime(voAppt.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(Status_Reason.DNA);
		voStatus.setSession(voAppt.getSessionIsNotNull() ? voAppt.getSession() : null); //WDEV-23185
		
		Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voAppt.setCurrentStatusRecord(voStatus); 
		voAppt.setApptStatusHistory(voCollStatusHistory);
		
		if(voAppt.getIsCABBooking() == null || Boolean.FALSE.equals(voAppt.getIsCABBooking()))
		{
			voAppt.setRequiresRebook(true);
		}
		
		return voAppt;
	}

	@Override
	protected void onBtnSaveTCIClick() throws PresentationLogicException
	{
		if(saveTCI())
			open();
	}

	private boolean saveTCI()
	{
		if(form.getLocalContext().getPatientElectiveList() == null)
			return false;
		
		TCIForPatientElectiveListDetailsVo tci = populateTCIFromScreen(form.getLocalContext().getPatientElectiveList().getTCIDetails());
		
		boolean isNewTCI = tci != null && tci.getID_TCIForPatientElectiveList() == null;
		TCIForPatientElectiveListDetailsVo getLastTCIFromHistory = null;
		
		if(isNewTCI)
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getSubjectTo28DayRule()))
			{
				Date rule28DayPeriodStart = form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart();
				Date day28Breached = null;
				
				if(rule28DayPeriodStart != null)
				{
					rule28DayPeriodStart = (Date) rule28DayPeriodStart.clone();
					day28Breached = rule28DayPeriodStart.addDay(DAY28);
					
					if(form.ctnDetails().dteTCIDate().getValue() != null && form.ctnDetails().dteTCIDate().getValue().isLessOrEqualThan(day28Breached) && offerWasAccepted())
					{
						form.getLocalContext().getPatientElectiveList().setRule28DayStatus(Rule28DayStatus.OFFER_ACCEPTED);
						tci.setRule28DayStatus(Rule28DayStatus.OFFER_ACCEPTED);
					}
					
					if(form.ctnDetails().dteTCIDate().getValue() != null && form.ctnDetails().dteTCIDate().getValue().isGreaterThan(day28Breached) && offerWasAccepted())
					{
						form.getLocalContext().getPatientElectiveList().setSubjectTo28DayRule(false);
						form.getLocalContext().getPatientElectiveList().setRule28DayStatus(Rule28DayStatus.BREACHED);
						form.getLocalContext().getPatientElectiveList().setRule28DayPeriodStart(null);
						tci.setRule28DayStatus(Rule28DayStatus.BREACHED);
						tci.setRule28DayPeriodStart(null);
					}
					
					if(GroupWasReasonableEnumeration.rdoYes.equals(form.ctnDetails().GroupWasReasonable().getValue()))
					{
						form.getLocalContext().getPatientElectiveList().setSubjectTo28DayRule(false);
						form.getLocalContext().getPatientElectiveList().setRule28DayStatus(Rule28DayStatus.REASONABLE_OFFER_DECLINED);
						form.getLocalContext().getPatientElectiveList().setRule28DayPeriodStart(null);
						tci.setRule28DayStatus(Rule28DayStatus.REASONABLE_OFFER_DECLINED);
						tci.setRule28DayPeriodStart(null);
					}
				}
			}
			
			if (form.getLocalContext().getPatientElectiveList().getElectiveListStatus() == null 
					|| WaitingListStatus.REQUIRES_TCI.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) 
					|| WaitingListStatus.SUSPENDED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) 
					|| (WaitingListStatus.CREATED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())))
			{
				ElectiveListStatusVo status = populateElectiveListStatus(WaitingListStatus.TCI_GIVEN);
				form.getLocalContext().getPatientElectiveList().setElectiveListStatus(status);
				
				if(form.getLocalContext().getPatientElectiveList().getElectiveListStatusHistory() == null)
					form.getLocalContext().getPatientElectiveList().setElectiveListStatusHistory(new ElectiveListStatusVoCollection());
				
				form.getLocalContext().getPatientElectiveList().getElectiveListStatusHistory().add(status);
			}
			
			if(form.getLocalContext().getPatientElectiveList().getTheatreAppointment() != null && form.getLocalContext().getPatientElectiveList().getTheatreAppointment().getID_Booking_Appointment() != null)
			{
				tci.setAppointment(domain.getTCIAppointment(form.getLocalContext().getPatientElectiveList().getTheatreAppointment()));
				form.getLocalContext().getPatientElectiveList().setTheatreAppointment(null);
			}
			
			if(GroupWasReasonableEnumeration.rdoYes.equals(form.ctnDetails().GroupWasReasonable().getValue()))
			{
				getLastTCIFromHistory = getLastTCI(form.getLocalContext().getPatientElectiveList());
				
				if(getLastTCIFromHistory != null)
				{
					getLastTCIFromHistory.setDayTCIDate28Offered(form.ctnDetails().dteTCIDateOffered().getValue());
					getLastTCIFromHistory.setDate28OfOffer(form.ctnDetails().dteDateOfOfferSecond().getValue());
					getLastTCIFromHistory.setReasonDeclined28(form.ctnDetails().cmbReasonDeclined().getValue());
				}
			}
		}
		
		form.getLocalContext().getPatientElectiveList().setTCIDetails(tci);
		
		String[] tciErrors = tci.validate(validateTCIUIRules(tci));
		if(tciErrors != null && tciErrors.length > 0)
		{
			engine.showErrors(tciErrors);
			return false;
		}
		
		String[] electiveListErrors = form.getLocalContext().getPatientElectiveList().validate();
		if(electiveListErrors != null && electiveListErrors.length > 0)
		{
			engine.showErrors(electiveListErrors);
			return false;
		}
		
		try
		{
			//WDEV-23350
//			form.getLocalContext().setPatientElectiveList(domain.save(form.getLocalContext().getPatientElectiveList(), getLasTTCIFromHistory, null));
			if (isNewTCI)
				form.getLocalContext().setPatientElectiveList(domain.save(form.getLocalContext().getPatientElectiveList(), getLastTCIFromHistory, null, null));
			else
			{
				form.getLocalContext().setPatientElectiveList(domain.save(form.getLocalContext().getPatientElectiveList(), getLastTCIFromHistory, null, Boolean.TRUE));
			}//WDEV-23350
			
			if (isNewTCI && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIHospital() != null)
			{
				domain.createCaseNoteRequests(form.getLocalContext().getPatientElectiveList(), form.getGlobalContext().Core.getPatientShort());
			}
			
			//WDEV-19704 Trigger HL7 message moved here from impl as per WDEV-20793
			domain.triggerElectiveListEvent(form.getLocalContext().getPatientElectiveList());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}

		return true;
	}
	
	private TCIForPatientElectiveListDetailsVo getLastTCI(PatientElectiveListDetailsVo patientElectiveList)
	{
		if(patientElectiveList == null || patientElectiveList.getTCIHistory() == null || patientElectiveList.getTCIHistory().size() == 0)
			return null;
		
		TCIForPatientElectiveListDetailsVo lastTCI = patientElectiveList.getTCIHistory().get(0);
		
		for(int i = 1; i<patientElectiveList.getTCIHistory().size(); i++)
		{
			if(patientElectiveList.getTCIHistory().get(i) == null)
				continue;
			
			if(lastTCI.getSystemInformation() != null && patientElectiveList.getTCIHistory().get(i).getSystemInformation() != null && lastTCI.getSystemInformation().getCreationDateTime().isLessThan(patientElectiveList.getTCIHistory().get(i).getSystemInformation().getCreationDateTime()))
			{
				lastTCI = patientElectiveList.getTCIHistory().get(i);
			}
		}
		
		return lastTCI;
	}

	private ElectiveListStatusVo populateElectiveListStatus(WaitingListStatus status)
	{
		ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();
		
		electiveListStatus.setElectiveListStatus(status); 
		electiveListStatus.setStatusDateTime(new DateTime());
		
		Object mos = domain.getMosUser();
		if (mos !=null && mos instanceof MemberOfStaffLiteVo)
		{
			electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) mos);
		}
		return electiveListStatus;
	}

	private boolean offerWasAccepted()
	{
		if(form.ctnDetails().GroupWasReasonable().getValue() == null || GroupWasReasonableEnumeration.None.equals(form.ctnDetails().GroupWasReasonable().getValue()) || GroupWasReasonableEnumeration.rdoNo.equals(form.ctnDetails().GroupWasReasonable().getValue()))
			return true;
		
		return false;
	}

	private String[] validateTCIUIRules(TCIForPatientElectiveListDetailsVo tci)
	{
		List<String> uiErrors = new ArrayList<String>();
		
		Date dateOnList = form.getLocalContext().getPatientElectiveList().getDateOnList();
		
		if(form.ctnDetails().dteTCIDate().getValue() == null)
		{
			uiErrors.add("'TCI Date' is mandatory.");
		}
		if(form.ctnDetails().timTCITime().getValue() == null)
		{
			uiErrors.add("'TCI Time' is mandatory.");
		}
		
		if(form.ctnDetails().dteTCIDate().getValue() != null && form.ctnDetails().dteTCIDate().getValue().isLessThan(dateOnList))
		{
			uiErrors.add("'TCI Date' must be set after 'Date on List'.");
		}
		
		if(tci != null && tci.getAppointment() != null && tci.getAppointment().getCurrentStatusRecord() != null && !(Status_Reason.CANCELLED.equals(tci.getAppointment().getCurrentStatusRecord().getStatus()) || Status_Reason.DNA.equals(tci.getAppointment().getCurrentStatusRecord().getStatus())))
		{
			if (form.ctnDetails().dteTCIDate().getValue() != null && form.ctnDetails().timTCITime().getValue() != null)
			{
				DateTime tciDateTime = new DateTime(form.ctnDetails().dteTCIDate().getValue(), form.ctnDetails().timTCITime().getValue());
				
				Date appointmentDate = tci.getAppointment().getAppointmentDate();
				Time appointmentTime = tci.getAppointment().getApptStartTime();
				
				DateTime appointmentDateTime = new DateTime(appointmentDate, appointmentTime);
				
				if (tciDateTime.isGreaterOrEqualThan(appointmentDateTime))
				{
					uiErrors.add("'TCI Date/Time' must be earlier than Appointment Date/Time: " + appointmentDateTime);
				}
			}
		}
		
		Date erodPatientAvailableFrom = (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getEROD() != null) ? form.getLocalContext().getPatientElectiveList().getEROD().getPatAvailFromDate() : null;
		if(form.ctnDetails().dteTCIDate().getValue() != null && erodPatientAvailableFrom != null && form.ctnDetails().dteTCIDate().getValue().isLessOrEqualThan(erodPatientAvailableFrom))
		{
			uiErrors.add("'TCI Date' must be later than 'Patient Available from Date'.");
		}
		
		if(form.ctnDetails().qmbHospital().getValue() == null)
		{
			uiErrors.add("'Hospital' is mandatory.");
		}
		
		if(form.ctnDetails().qmbTCIWard().getValue() == null)
		{
			uiErrors.add("'Ward' is mandatory.");
		}
		
		if(form.ctnDetails().dteDateOfOffer().getValue() == null)
		{
			uiErrors.add("'Date of Offer' is mandatory.");
		}
		if(form.ctnDetails().dteDateOfOffer().getValue() != null && form.ctnDetails().dteDateOfOffer().getValue().isLessThan(dateOnList))
		{
			uiErrors.add("'Date of Offer' must be later than 'Date on List'.");
		}
		
		if(form.ctnDetails().GroupWasReasonable().getValue() == null)
		{
			uiErrors.add("'Was reasonable 28 day offer made?' is mandatory.");
		}
		
		Date dateOfLastAdmission = null;
		
		if(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart() != null)
		{
			dateOfLastAdmission = (Date) form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart().clone();
		}
		
		if(GroupWasReasonableEnumeration.rdoYes.equals(form.ctnDetails().GroupWasReasonable().getValue()))
		{
			if(form.ctnDetails().dteTCIDateOffered().getValue() == null)
			{
				uiErrors.add("'TCI Date Offered' is mandatory.");
			}
			
			if(form.ctnDetails().dteTCIDateOffered().getValue() != null && dateOfLastAdmission != null && form.ctnDetails().dteTCIDateOffered().getValue().isGreaterThan(dateOfLastAdmission.addDay(DAY28)))
			{
				uiErrors.add("A 28 day offer must not be more than 28 days after the last admission date.");
			}
			
			if(form.ctnDetails().dteDateOfOfferSecond().getValue() == null)
			{
				uiErrors.add("'Date of Offer' is mandatory.");
			}
			
			if(form.ctnDetails().dteDateOfOfferSecond().getValue() != null && form.ctnDetails().dteTCIDateOffered().getValue() != null)
			{
				Date tciDateOffered = (Date) form.ctnDetails().dteTCIDateOffered().getValue().clone();
				
				if(form.ctnDetails().dteDateOfOfferSecond().getValue().isGreaterThan(tciDateOffered.addDay(-DAY21)))
				{
					uiErrors.add("A reasonable offer must be made 21 days or more before the 'TCI Date Offered'.");
				}
			}
			
			if(form.ctnDetails().cmbReasonDeclined().getValue() == null)
			{
				uiErrors.add("'Reason Declined' is mandatory.");
			}
		}
		
		if(form.ctnDetails().cmbTCOOfferedMethod().getValue() == null)
		{
			uiErrors.add("'TCI Offered Method' is mandatory.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private TCIForPatientElectiveListDetailsVo populateTCIFromScreen(TCIForPatientElectiveListDetailsVo tciDetails)
	{
		if(tciDetails == null)
			tciDetails = new TCIForPatientElectiveListDetailsVo();
		else
			tciDetails = (TCIForPatientElectiveListDetailsVo) tciDetails.clone();
		
		if(tciDetails.getID_TCIForPatientElectiveList() == null)
		{
			tciDetails.setTCIDate(form.ctnDetails().dteTCIDate().getValue());
			tciDetails.setTCIHospital(form.ctnDetails().qmbHospital().getValue());
			tciDetails.setRTTBreachReason(form.ctnDetails().cmbBreachReason().getValue());
			tciDetails.setTCIOfferMethod(form.ctnDetails().cmbTCOOfferedMethod().getValue());
			tciDetails.setDateTCIOffered(form.ctnDetails().dteDateOfOffer().getValue());
			
			tciDetails.setWasReasonable28dayOfferMade(getReasonable28dayOfferMadeValueFromScreen());
			
			tciDetails.setIsActive(true);
		}
		
		tciDetails.setTCITime(form.ctnDetails().timTCITime().getValue());
		tciDetails.setTCIWard(form.ctnDetails().qmbTCIWard().getValue());
			
		return tciDetails;
	}

	private Boolean getReasonable28dayOfferMadeValueFromScreen()
	{
		if(GroupWasReasonableEnumeration.rdoNo.equals(form.ctnDetails().GroupWasReasonable().getValue()))
			return false;
		
		if(GroupWasReasonableEnumeration.rdoYes.equals(form.ctnDetails().GroupWasReasonable().getValue()))
			return true;
		
		return null;
	}

	@Override
	protected void onBtnCancelEditTCIClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnEditTCIClick() throws PresentationLogicException
	{
		form.getLocalContext().setTCIFormMode(FormMode.EDIT);
		form.ctnDetails().dteTCIDate().setFocus();
		
		updateControlsState();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(save())
			open();
	}

	private boolean save()
	{
		PatientElectiveListDetailsVo patientElectiveList = populateDataFromScreen(form.getLocalContext().getPatientElectiveList());
		
		if(patientElectiveList == null)
			return false;
		
		String[] errors = patientElectiveList.validate(validateUIErrors());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			//WDEV-23350
//			form.getLocalContext().setPatientElectiveList(domain.save(patientElectiveList, null, null));
			form.getLocalContext().setPatientElectiveList(domain.save(patientElectiveList, null, null, null)); //WDEV-23350
			
			//WDEV-19704 Trigger HL7 message moved here from impl as per WDEV-20793
			domain.triggerElectiveListEvent(form.getLocalContext().getPatientElectiveList());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		return true;
	}
	
	private String[] validateUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			errors = validateUIErrorsSurgicalTab();
		}
		else if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			errors = validateUIErrorsMedicalTab();
		}
		else if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			errors = validateUIErrorsEndoscopyTab();
		}
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private ArrayList<String> validateUIErrorsEndoscopyTab()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if( form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().getValue() != null )
		{
			if( form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue() == null || GroupPlanedProceduresEndoscopyEnumeration.None.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
			{
				errors.add("Please select Days, Weeks or Months.");
			}
			
		}
		else if( form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().getValue() == null)
		{
			if( form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue() != null && !GroupPlanedProceduresEndoscopyEnumeration.None.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
			{
				errors.add("Please enter a value for Plan Procedure In.");
			}
		}
		//wdev-22465
		if( form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().getValue() == null )
		{
			errors.add("Responsible HCP is mandatory.");
		}
		//---
		
		return errors;
	}
	
	private ArrayList<String> validateUIErrorsMedicalTab()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if( form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().isVisible() &&  form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().getValue() != null )
		{
			if( form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue() == null || GroupPlanedProceduresMedicalEnumeration.None.equals(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
			{
				errors.add("Please select Days, Weeks or Months.");
			}
			
		}
		else if(  form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().isVisible() &&  form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().getValue() == null)
		{
			if( form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue() != null && !GroupPlanedProceduresMedicalEnumeration.None.equals(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
			{
				errors.add("Please enter a value for Plan Procedure In.");
			}
		}
		if( form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().getValue() == null)
		{
			errors.add("Date given to patient is mandatory.");
		}
		
		if(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().isEnabled())
		{
			if(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue() == null)
			{
				errors.add("Urgency is mandatory.");
			}
		}
		//wdev-22467
		if( form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue() == null )
		{
			errors.add("Responsible HCP is mandatory.");
		}
		//---

		return errors;
	}
	
	private ArrayList<String> validateUIErrorsSurgicalTab()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().getValue() != null )
		{
			if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue() == null || GroupPlanedProceduresSurgicalEnumeration.None.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
			{
				errors.add("Please select Days, Weeks or Months.");
			}
			
		}
		else if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().getValue() == null)
		{
			if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue() != null && !GroupPlanedProceduresSurgicalEnumeration.None.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
			{
				errors.add("Please enter a value for Plan Procedure In.");
			}
		}
		if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().isVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().getValue() == null)
		{
			errors.add("Date given to patient is mandatory.");
		}
		
		if(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().getVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().isEnabled())
		{
			if(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue() == null)
			{
				errors.add("Urgency is mandatory.");
			}
		}
		//wdev-22467
		if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue() == null )
		{
			errors.add("Responsible HCP is mandatory.");
		}
		
		//---
		
		if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == 0 && !form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() )
		{
			if( GroupDaySurgMainTheatreEnumeration.None.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))
			{
				errors.add("Theatre Type is mandatory.");
			}
			if( GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()) && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().getValue() == null)
			{
				errors.add("Hospital is mandatory.");
			}
		}
		
		return errors;
	}

	private PatientElectiveListDetailsVo populateDataFromScreen(PatientElectiveListDetailsVo patientElectiveList)
	{
		if(patientElectiveList == null)
			return null;
		
		patientElectiveList.setElectiveAdmissionType(getElectiveAdmissionTypeFromScreen());
		
		patientElectiveList.setPatientCategory(form.ctnDetails().cmbPatientCategory().getValue());
		
		if(GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			patientElectiveList = populateDataFromSurgicalTab(patientElectiveList);
		}
		else if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			patientElectiveList = populateDataFromMedicalTab(patientElectiveList);
		}
		else if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.ctnDetails().GroupAdmissionType().getValue()))
		{
			patientElectiveList = populateDataFromEndoscopyTab(patientElectiveList);
		}
		
		return patientElectiveList;
	}

	private ElectiveAdmissionType getElectiveAdmissionTypeFromScreen()
	{
		if(GroupElectiveListEnumeration.rdoWaitingList.equals(form.ctnDetails().GroupElectiveList().getValue()))
			return ElectiveAdmissionType.ELECTIVE_TYPE11;
		
		if(GroupElectiveListEnumeration.rdoBooked.equals(form.ctnDetails().GroupElectiveList().getValue()))
			return ElectiveAdmissionType.BOOKED_TYPE12;
		
		if(GroupElectiveListEnumeration.rdoSurveillance.equals(form.ctnDetails().GroupElectiveList().getValue()))
			return ElectiveAdmissionType.PLANNED_TYPE13;
		
		return null;
	}

	private PatientElectiveListDetailsVo populateDataFromEndoscopyTab(PatientElectiveListDetailsVo patientElectiveList)
	{
		boolean isPlannedList = GroupElectiveListEnumeration.rdoSurveillance.equals(form.ctnDetails().GroupElectiveList().getValue());
		
		if(isPlannedList)
		{
			patientElectiveList.setToBePlannedIn(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().getValue());
			
			patientElectiveList.setToBePlannedInUnit(null);
    		if( GroupPlanedProceduresEndoscopyEnumeration.rdoDaysEndoscopy.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.DAYS);
    		else if( GroupPlanedProceduresEndoscopyEnumeration.MonthsEndoscopy.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.MONTHS);
    		else if( GroupPlanedProceduresEndoscopyEnumeration.rdoWeeksEndoscopy.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.WEEKS);
    			
    		patientElectiveList.setPlannedDate(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().getValue());
    		if (patientElectiveList.getPlannedDate() == null)
    		{
    			if (patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null)
    				patientElectiveList.setPlannedDate(calculateDate(new Date(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    			else
    				patientElectiveList.setPlannedDate(calculateDate(patientElectiveList.getSystemInformation().getCreationDateTime().getDate(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    		}
		}
		else
		{
			patientElectiveList.setToBePlannedIn(null);
			patientElectiveList.setToBePlannedInUnit(null);
			patientElectiveList.setPlannedDate(null);
		}
		
		//WDEV-23075
		ProcedureLiteVo procEnd = form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
		boolean isColonoscopy = procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType());
		if(isColonoscopy && GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()))
		{
			//wdev-22467
			if( GroupPrecolonoscopyReqEnumeration.rdoYesPrecolonoscopyReq.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().getValue() ))
			{
				patientElectiveList.setPreColonoscopyAssessmentRequired(YesNo.YES);

			}
			else if( GroupPrecolonoscopyReqEnumeration.rdoNoPrecolonoscopyReq.equals(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().getValue() ))
			{
				patientElectiveList.setPreColonoscopyAssessmentRequired(YesNo.NO);
			}
			//-------------
		}
		
		
		patientElectiveList.setResponsibleHCP(form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().getValue() != null ? domain.getHCPByMedic((HcpRefVo) form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().getValue()):null);	//wdev-22465
		
		return patientElectiveList;
	}

	private PatientElectiveListDetailsVo populateDataFromMedicalTab(PatientElectiveListDetailsVo patientElectiveList)
	{
		if(patientElectiveList == null)
			return null;
		
		patientElectiveList = (PatientElectiveListDetailsVo) patientElectiveList.clone();
		
		patientElectiveList.setWasPossibleDateGiven(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue());
    	patientElectiveList.setDateGivenToPatient(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().getValue());
		patientElectiveList.setToBePlannedIn(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().getValue());
			
		patientElectiveList.setToBePlannedInUnit(null);
    	if( GroupPlanedProceduresMedicalEnumeration.rdoDaysPlannedMedical.equals(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
    		patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.DAYS);
    	else if( GroupPlanedProceduresMedicalEnumeration.rdoMonthPlannedMedical.equals(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
    		patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.MONTHS);
    	else if( GroupPlanedProceduresMedicalEnumeration.rdoWeeksPlannedMedical.equals(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
    		patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.WEEKS);
    			
    	patientElectiveList.setPlannedDate(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().getValue());
    	
		if (patientElectiveList.getPlannedDate() == null)
		{
			if (patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null)
				patientElectiveList.setPlannedDate(calculateDate(new Date(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
			else
				patientElectiveList.setPlannedDate(calculateDate(patientElectiveList.getSystemInformation().getCreationDateTime().getDate(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
		}
    	
    	if(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().isEnabled())
    	{
    		patientElectiveList.setPriority(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue());
    	}
		
    	patientElectiveList.setResponsibleHCP(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue() != null ? domain.getHCPByMedic((HcpRefVo) form.ctnDetails().lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue()):null);		//wdev-22465
    	
		return patientElectiveList;
	}

	private PatientElectiveListDetailsVo populateDataFromSurgicalTab(PatientElectiveListDetailsVo patientElectiveList)
	{
		if(patientElectiveList == null)
			return null;
		
		patientElectiveList = (PatientElectiveListDetailsVo) patientElectiveList.clone();
		
		patientElectiveList.setWasPossibleDateGiven(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue());
		patientElectiveList.setDateGivenToPatient(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().getValue());
		
		patientElectiveList.setToBePlannedIn(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().getValue());
		
		patientElectiveList.setToBePlannedInUnit(null);
    	if(GroupPlanedProceduresSurgicalEnumeration.rdoDays.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
    		patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.DAYS);
    	else if(GroupPlanedProceduresSurgicalEnumeration.rdoMonth.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
    		patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.MONTHS);
    	else if(GroupPlanedProceduresSurgicalEnumeration.rdoWeeks.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
    		patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.WEEKS);
    		
    	patientElectiveList.setPlannedDate(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().getValue());
    	
		if (patientElectiveList.getPlannedDate() == null)
		{
			if (patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null)
				patientElectiveList.setPlannedDate(calculateDate(new Date(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
			else
				patientElectiveList.setPlannedDate(calculateDate(patientElectiveList.getSystemInformation().getCreationDateTime().getDate(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
		}
    	
    	if(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().getVisible() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().isEnabled())
    	{
    		patientElectiveList.setPriority(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue());
    	}
		
    	patientElectiveList.setResponsibleHCP(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue() != null ? domain.getHCPByMedic((HcpRefVo) form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue()):null);		//wdev-22465
    	
    	if( Boolean.TRUE.equals(form.getLocalContext().getIsVisibleSurgicalTheatreType()))
		{
			if( GroupDaySurgMainTheatreEnumeration.rdoMainTheatre.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))
			{
				patientElectiveList.setRequiredTheatreType(TheatreType.INPATIENT);
				patientElectiveList.setHospital(null);
			}
			else if( GroupDaySurgMainTheatreEnumeration.rdoDaySurgery.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))
			{
				patientElectiveList.setRequiredTheatreType(TheatreType.DAYCASE);
				patientElectiveList.setHospital(null);
			}
			else if( GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation.equals(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))	
			{
				patientElectiveList.setHospital(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().getValue());
				patientElectiveList.setRequiredTheatreType(TheatreType.DAYCASE);
			}
			else
				patientElectiveList.setRequiredTheatreType(null);
		}
		else
		{
			if( form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() || ( !form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() >= 1))
			{
				patientElectiveList.setRequiredTheatreType(TheatreType.INPATIENT);
			}
			else
				patientElectiveList.setRequiredTheatreType(null);
		}
    	
		return patientElectiveList;
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.getLocalContext().setRequestFormMode(FormMode.EDIT);
		
		updateControlsState();
	}

	@Override
	protected void onBtnPreAssessmentOutcomeClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.PreAssessmentOutcomeDlg , new Object[] {form.getLocalContext().getPatientElectiveList()});
	}

	@Override
	protected void onBtnElectiveListRequestClick() throws PresentationLogicException
	{
		PatientElectiveListRefVo tempRef = form.getLocalContext().getPatientElectiveList();
		if( tempRef != null)
		{
			if( form.getLocalContext().getPatientElectiveList().getElectiveAdmissionTypeIsNotNull() && (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType())))
			{
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,
					null,
					tempRef,
					ElectiveListAddLaterDlgOpenMode.READ_ONLY},
					"Waiting List Details");
			}
			else if( form.getLocalContext().getPatientElectiveList().getElectiveAdmissionTypeIsNotNull() && ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType()))
			{
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
					null,
					tempRef,
					ElectiveListAddLaterDlgOpenMode.READ_ONLY},
					"Planned List Details");
			}	
		}
	}

	@Override
	protected void onRadioButtonGroupWasReasonableValueChanged() throws PresentationLogicException
	{
		if(GroupWasReasonableEnumeration.rdoNo.equals(form.ctnDetails().GroupWasReasonable().getValue()))
		{
			form.ctnDetails().dteTCIDateOffered().setValue(null);
			form.ctnDetails().dteDateOfOfferSecond().setValue(null);
			form.ctnDetails().cmbReasonDeclined().setValue(null);
		}
		else if(GroupWasReasonableEnumeration.rdoYes.equals(form.ctnDetails().GroupWasReasonable().getValue()))
		{
			form.ctnDetails().dteDateOfOfferSecond().setValue(form.ctnDetails().dteDateOfOffer().getValue());
		}
		
		updateTCIDetails();
	}

	@Override
	protected void onQmbTCIWardTextSubmited(String value) throws PresentationLogicException
	{
		if (form.ctnDetails().qmbHospital().getValue()==null)
			return;
		
		LocationLiteVoCollection wards = domain.listWards(value,form.ctnDetails().qmbHospital().getValue());
		
		if (wards == null || wards.size()==0)
			return;
		
		for (int i = 0; i < wards.size(); i++)
		{
			form.ctnDetails().qmbTCIWard().newRow(wards.get(i), wards.get(i).getName());
		}
		
		if (wards.size()==1)
		{
			form.ctnDetails().qmbTCIWard().setValue(wards.get(0));
		}
		else
		{
			form.ctnDetails().qmbTCIWard().showOpened();
		}
	}

	@Override
	protected void onBtnRecordERODInErrorClick() throws PresentationLogicException
	{
		if(form.getLocalContext().getPatientElectiveList() != null)
		{
			form.getLocalContext().setERODRieRecord((PatientElectiveListDetailsVo) form.getLocalContext().getPatientElectiveList().clone());
			form.getLocalContext().setNotesRieRecord(null);
			engine.open(form.getForms().Core.RieConfirmationDialog);
		}
	}

	private boolean markERODAsRIE()
	{
		if(form.getLocalContext().getERODFormMode() == null)
			return false;
		
		boolean isStale = false;
		
		if(domain.isERODStale(form.getLocalContext().getERODRieRecord().getEROD()))
		{
			isStale = true;
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			domain.inactivatePause(form.getLocalContext().getERODRieRecord().getReferral(), form.getLocalContext().getERODRieRecord().getEROD());
			domain.markERODAsRIE(form.getLocalContext().getERODRieRecord(), engine.getFormName(), form.getGlobalContext().Core.getRieMessage());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.TCIHistoryMenu.VIEW_EDIT_CANCELLATION_DETAILS:
				viewEditCancellationDetails(FormMode.VIEW);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.TCIHistoryMenu.EDIT_CANCELLATION_DETAILS:
				viewEditCancellationDetails(FormMode.EDIT);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.TCIHistoryMenu.RECORD_REASONABLE_28_DAY_RULE_OFFER:
				form.getGlobalContext().RefMan.setTCIHistorySelected(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue());
				engine.open(form.getForms().RefMan.RecordReasonable28DayRuleOffer);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.TCIHistoryMenu.VIEW_TCI_DETAILS:
				form.getGlobalContext().RefMan.setSelectedTCIHistory(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue());
				engine.open(form.getForms().RefMan.TCIDetails);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu1.ADD:
				addNote();		
				break;
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu1.VIEW:
				viewNote();	
			break;	
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu1.RIE:
				form.getLocalContext().setNotesRieRecord(form.ctnDetails().lyrHistory().tabPageNotes().grdNoteComments().getValue());
				form.getLocalContext().setERODRieRecord(null);
				engine.open(form.getForms().Core.RieConfirmationDialog);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ERODHistoryMenu.VIEW_EROD:
				form.getGlobalContext().RefMan.setSelectedEROD(form.ctnDetails().lyrHistory().tabPageErodHistory().grdERODHistory().getValue());
				engine.open(form.getForms().RefMan.ERODDetails);
			break;
		}
	}
	//WDEV-22889
	private void viewEditCancellationDetails(FormMode formModeToOpen)
	{
		form.getGlobalContext().RefMan.setTCIOutcomeForPatientElectiveList(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue() != null && form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() != null ? form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getCurrentOutcome() : null);
		form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().setTciId(form.ctnDetails().lyrHistory().tabPageTCIHistory().grdTCIHistory().getValue().getID_TCIForPatientElectiveList());
		
		boolean isDeniedEdit = isDeniedAction(TCIHistoryActions.EDIT_CANCELLATION_DETAILS);		
		engine.open(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog, new Object[]{formModeToOpen, isDeniedEdit});
	}
	
	private void addNote()
	{
		form.getGlobalContext().RefMan.setPatientElectiveListNotes(null);
		form.ctnDetails().lyrHistory().tabPageNotes().grdNoteComments().setValue(null);
		engine.open(form.getForms().RefMan.PatientElectiveListNotes, new Object[]{FormMode.EDIT});
	}
	
	private void viewNote()
	{
		form.getGlobalContext().RefMan.setPatientElectiveListNotes(form.ctnDetails().lyrHistory().tabPageNotes().grdNoteComments().getValue());
		engine.open(form.getForms().RefMan.PatientElectiveListNotes,new Object[]{FormMode.VIEW});
	}

	@Override
	protected void onGrdTCIHistorySelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getDNAMessageBoxId() != null && form.getLocalContext().getDNAMessageBoxId().intValue() == messageBoxId)
		{
			//WDEV-22777
			if(DialogResult.YES.equals(result))
			{
				if(markAsDNA(true))
					open();
			}
			//WDEV-22777 ends here
		}
	}

	@Override
	protected void onRadioButtonGroupElectiveListValueChanged() throws PresentationLogicException
	{
		if(GroupElectiveListEnumeration.rdoWaitingList.equals(form.ctnDetails().GroupElectiveList().getValue()))
		{
			if(GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setValue(null);
			}
			else if(GroupAdmissionTypeEnumeration.rdoMedical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setValue(null);
			}
			else if(GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setValue(null);
			}
		}
		else if(GroupElectiveListEnumeration.rdoSurveillance.equals(form.ctnDetails().GroupElectiveList().getValue()))
		{
			if(GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setValue(null);
			}
			else if(GroupAdmissionTypeEnumeration.rdoMedical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setValue(null);
				form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setValue(null);
			}
			else if(GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				
			}
		}
		
		updateControlsState();
		
		if(form.getLocalContext().getPatientElectiveList() != null && ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType()) && GroupElectiveListEnumeration.rdoWaitingList.equals(form.ctnDetails().GroupElectiveList().getValue()))
		{
			if(GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPriority().setEnabled(true);
			}
			else if(GroupAdmissionTypeEnumeration.rdoMedical.equals(form.ctnDetails().GroupAdmissionType().getValue()))
			{
				form.ctnDetails().lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setEnabled(true);
			}
		}
	}

	@Override
	protected void onDteDateGivenToPatientValueChanged() throws PresentationLogicException
	{
		if(form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().getValue() != null)
		{
			form.ctnDetails().GroupElectiveList().setValue(GroupElectiveListEnumeration.rdoBooked);
		}
		else
		{
			form.ctnDetails().GroupElectiveList().setValue(GroupElectiveListEnumeration.rdoWaitingList);
		}
	}

	@Override
	protected void onDteDateGivemToPatientMedicalValueChanged() throws PresentationLogicException
	{
		if(form.ctnDetails().lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().getValue() != null)
		{
			form.ctnDetails().GroupElectiveList().setValue(GroupElectiveListEnumeration.rdoBooked);
		}
		else
		{
			form.ctnDetails().GroupElectiveList().setValue(GroupElectiveListEnumeration.rdoWaitingList);
		}
	}

	@Override
	protected void onGrdNoteCommentsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	private Date calculateDate(Date offsetDate, Integer toBePlannedIn, TimeUnitsSecondsToMonths toBePlannedInUnit)
	{
		if (toBePlannedIn == null || toBePlannedInUnit == null)
			return null;
		
		if (TimeUnitsSecondsToMonths.DAYS.equals(toBePlannedInUnit))
		{
			return offsetDate.addDay(toBePlannedIn);
		}
		else if (TimeUnitsSecondsToMonths.WEEKS.equals(toBePlannedInUnit))
		{
			return offsetDate.addDay(7 * toBePlannedIn);
		}
		else if (TimeUnitsSecondsToMonths.MONTHS.equals(toBePlannedInUnit))
		{
			return offsetDate.addMonth(toBePlannedIn);
		}
		
		return offsetDate;
	}

	@Override
	protected void onGrdERODHistorySelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onRadioButtonGroupDaySurgMainTheatreValueChanged() throws PresentationLogicException
	{
		form.ctnDetails().lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(null);
		
		updateControlsState();
	}

	//WDEV-23354
	@Override
	protected void onBtnPrintTCIClick() throws PresentationLogicException 
	{
		printReport();
	}
	
	private void printReport() 
	{
		if(form.getLocalContext().getPatientElectiveList() != null)
		{
			form.getGlobalContext().Core.setImsReportId(TCI_DETAILS_IMSID);
			engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {ELECTIVE_LIST, form.getLocalContext().getPatientElectiveList().getID_PatientElectiveList()});
		}
	}
	//WDEV-23354 - ends here
}
