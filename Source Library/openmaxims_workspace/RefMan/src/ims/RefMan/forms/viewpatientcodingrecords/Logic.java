//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.viewpatientcodingrecords;

import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ReferralCodingForViewVo;
import ims.RefMan.vo.ReferralCodingForViewVoCollection;
import ims.RefMan.vo.ReferralCodingItemVo;
import ims.RefMan.vo.ReferralCodingItemVoCollection;
import ims.RefMan.vo.ReferralCodingVo;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.DischargedEpisodeForReferralCodingViewVo;
import ims.core.vo.PatientDiagnosisShortVo;
import ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ProcedureVo;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.LateralityLRB;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.ocrr.vo.InvestigationIndexVo;
import ims.ocrr.vo.OrderInvestigationLiteVo;
import ims.scheduling.vo.BookingAppointmentOutpatientCodingVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String	COLUMN_NAME			= "0";
	private static final String	COLUMN_ICD10		= "1";
	private static final String	COLUMN_OPCS4		= "2";
	private static final String	COLUMN_LATERALITY	= "3";
	
	@Override
	protected void onFormModeChanged()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		PatientShort patient = null;
		if (args!=null && args.length>0 && args[0] instanceof CatsReferralRefVo)
		{
			patient = domain.getPatientByCatsRef((CatsReferralRefVo)args[0]);
		}
		
		if (args!=null && args.length>1 && args[1] instanceof ReferralCodingVo)
		{
			form.getLocalContext().setExcludeReferralCoding((ReferralCodingVo) args[1]);
		}
		
		if (patient!=null)
			populateRecordBrowser(domain.getReferralCodings(patient, form.getLocalContext().getExcludeReferralCoding()));
	
		populateInstanceScreenFromData(form.recbrPatCodingRecords().getValue());
	}

	private void populateInstanceScreenFromData(ReferralCodingForViewVo refCoding)
	{
		initialize(refCoding);
		clearScreen();
		
		if (refCoding==null)
			return;
		
		if (refCoding!=null && refCoding.getAppointmentIsNotNull())
		{
			form.cmbAppointmentInfo().newRow(refCoding.getAppointment(), getAppointmentInfo(refCoding));
			form.cmbAppointmentInfo().setValue(refCoding.getAppointment());
		}
		else
		{
			form.cmbAdmissionpInfo().newRow(refCoding.getPasEvent(), getAdmissionInfo(refCoding));
			form.cmbAdmissionpInfo().setValue(refCoding.getPasEvent());
		}
		
		form.dtimRecordingDateTime().setValue(refCoding.getAuthoringDateTime());

		if (refCoding.getAuthoringMOSIsNotNull() && refCoding.getAuthoringMOS().getNameIsNotNull())
			form.txtRecordingUser().setValue(refCoding.getAuthoringMOS().getName().toString());
		form.chkActive().setValue(refCoding.getActive());
		
		populateDynGrid(refCoding.getCodingItems());
		
		form.txtComments().setValue(refCoding.getComments() );
	}

	private void populateDynGrid(ReferralCodingItemVoCollection collCodingItems)
	{
		form.dyngrdRefCodingItems().getRows().clear();
		
		for (int i = 0; collCodingItems != null && i < collCodingItems.size(); i++)
		{
			addRowToDynGrid(collCodingItems.get(i));
		}
	}

	private void addRowToDynGrid(ReferralCodingItemVo voItem)
	{
		if (voItem == null)
			return;
	
		DynamicGridRow newRow = form.dyngrdRefCodingItems().getRows().newRow();
		newRow.setReadOnly(true);
		newRow.setSelectable(false);
		
		DynamicGridCell cellName = newRow.getCells().newCell(getColumnDynGrid(COLUMN_NAME),DynamicCellType.STRING);
		cellName.getColumn().setAlignment(Alignment.LEFT);
		
		DynamicGridCell cellICD10 = newRow.getCells().newCell(getColumnDynGrid(COLUMN_ICD10),DynamicCellType.STRING);
		cellICD10.getColumn().setAlignment(Alignment.LEFT);
		
		DynamicGridCell cellOPCS4 = newRow.getCells().newCell(getColumnDynGrid(COLUMN_OPCS4),DynamicCellType.STRING);
		cellOPCS4.getColumn().setAlignment(Alignment.LEFT);
		
		DynamicGridCell cellLaterality = newRow.getCells().newCell(getColumnDynGrid(COLUMN_LATERALITY),DynamicCellType.STRING);
		cellOPCS4.getColumn().setAlignment(Alignment.LEFT);
		
		if (voItem.getPatientProcedureIsNotNull())
			addProcedureToDynGrid(voItem.getPatientProcedure(), voItem.getOPCS4(), voItem.getICD10(), voItem.getProcLaterality(), newRow, cellName, cellICD10, cellOPCS4, cellLaterality);
		else if (voItem.getPatientDiagnosisIsNotNull())
			addDiagnosisToDynGrid(voItem.getPatientDiagnosis(), voItem.getICD10(), voItem.getOPCS4(), voItem.getProcLaterality(), newRow, cellName, cellICD10, cellOPCS4, cellLaterality);
		else if (voItem.getInvestigationIsNotNull())
			addInvestigationToDynGrid(voItem.getInvestigation(), voItem.getICD10(), voItem.getOPCS4(), voItem.getProcLaterality(), newRow, cellName, cellICD10, cellOPCS4, cellLaterality);
		else if (voItem.getOPCS4IsNotNull())
			addOPCS4ProcedureToDynGrid(voItem.getOPCS4(), voItem.getProcLaterality(), newRow, cellName, cellICD10, cellOPCS4, cellLaterality);
		else if (voItem.getICD10IsNotNull())
			addICD10DiagnosisToDynGrid(voItem.getICD10(), voItem.getProcLaterality(), newRow, cellName, cellICD10, cellOPCS4, cellLaterality);
	}

	private void addProcedureToDynGrid(PatientProcedureShortWithCareIntraOperativeVo voProc, String stringOPCS4, String stringICD10, LateralityLRB lateralityLRB, DynamicGridRow newRow, DynamicGridCell cellName, DynamicGridCell cellICD10, DynamicGridCell cellOPCS4, DynamicGridCell cellLaterality)
	{
		cellName.setValue(voProc.getProcedureDescription());
		cellName.setTooltip(voProc.getProcedureDescription());
		
		if (voProc.getProcedureIsNotNull() && voProc.getProcedure().getID_ProcedureIsNotNull())
		{
			ProcedureVo voProcWithMappings = domain.getProcedureWithTaxonomyMappings(voProc.getProcedure());
	
			cellICD10.setValue(stringICD10 == "" ? findICD10(voProcWithMappings.getCciMappings()) : stringICD10);
			cellICD10.setTooltip(stringICD10 == "" ? findICD10(voProcWithMappings.getCciMappings()) : stringICD10);
			
			cellOPCS4.setValue(stringOPCS4 == "" ? findOPCS4(voProcWithMappings.getCciMappings()) : stringOPCS4);
			cellOPCS4.setTooltip(stringOPCS4 == "" ? findOPCS4(voProcWithMappings.getCciMappings()) : stringOPCS4);
		}
		
		if (voProc != null && voProc.getProcedure() == null)
		{
			cellICD10.setValue(stringICD10);
			cellICD10.setTooltip(stringICD10);
			
			cellOPCS4.setValue(stringOPCS4);
			cellOPCS4.setTooltip(stringOPCS4);
		}

		newRow.setBackColor(Color.LightBlue);
		
		
		cellLaterality.setValue(lateralityLRB!=null ? lateralityLRB.getText() : "");
	
		form.setMode(FormMode.EDIT);
	}

	private String findOPCS4(ims.vo.interfaces.ITaxonomyMapCollection cciMappings)
	{
		for (int i = 0; cciMappings != null && i < cciMappings.size(); i++)
		{
			if (cciMappings.getITaxonomyMap(i).getTaxonomyNameIsNotNull() && cciMappings.getITaxonomyMap(i).getTaxonomyName().equals(TaxonomyType.OPCS4))
				return cciMappings.getITaxonomyMap(i).getTaxonomyCode();
		}
		return "";
	}

	private String findICD10(ims.vo.interfaces.ITaxonomyMapCollection cciMappings)
	{
		for (int i = 0; cciMappings != null && i < cciMappings.size(); i++)
		{
			if (cciMappings.getITaxonomyMap(i).getTaxonomyNameIsNotNull() && cciMappings.getITaxonomyMap(i).getTaxonomyName().equals(TaxonomyType.ICD10))
				return cciMappings.getITaxonomyMap(i).getTaxonomyCode();
		}
		return "";
	}

	
	private void addDiagnosisToDynGrid(PatientDiagnosisShortVo voDiag, String stringICD10, String stringOPCS4, LateralityLRB lateralityLRB, DynamicGridRow newRow, DynamicGridCell cellName, DynamicGridCell cellICD10, DynamicGridCell cellOPCS4, DynamicGridCell cellLaterality)
	{
		cellName.setValue(voDiag.getDiagnosisDescription());
		cellName.setTooltip(voDiag.getDiagnosisDescription());
		
		if (voDiag.getDiagnosisIsNotNull() && voDiag.getDiagnosis().getID_DiagnosisIsNotNull())
		{
			DiagnosisVo voDiagWithMappings = domain.getDiagnosisWithTaxonomyMappings(voDiag.getDiagnosis());
			
			cellICD10.setValue(stringICD10 == "" ? findICD10(voDiagWithMappings.getCciMappings()) : stringICD10);
			cellICD10.setTooltip(stringICD10 == "" ? findICD10(voDiagWithMappings.getCciMappings()) : stringICD10);
			
			cellOPCS4.setValue(stringOPCS4 == "" ? findOPCS4(voDiagWithMappings.getCciMappings()) : stringOPCS4);
			cellOPCS4.setTooltip(stringOPCS4 == "" ? findOPCS4(voDiagWithMappings.getCciMappings()) : stringOPCS4);
		}
		if (voDiag != null && voDiag.getDiagnosis() == null)
		{
			cellICD10.setValue(stringICD10);
			cellICD10.setTooltip(stringICD10);
			
			cellOPCS4.setValue(stringOPCS4);
			cellOPCS4.setTooltip(stringOPCS4);
		}

		
		cellLaterality.setValue(lateralityLRB!=null ? lateralityLRB.getText() : "");

		newRow.setBackColor(Color.Orange);
	}
	
	private void addICD10DiagnosisToDynGrid(String icd10, LateralityLRB lateralityLRB, DynamicGridRow newRow, DynamicGridCell cellName, DynamicGridCell cellICD10, DynamicGridCell cellOPCS4, DynamicGridCell cellLaterality)
	{
		cellName.setValue("");
		cellName.setTooltip("");
		
		cellICD10.setValue(icd10);
		cellICD10.setTooltip(icd10);
		
		cellOPCS4.setValue("");
		cellOPCS4.setTooltip("");
	
		cellLaterality.setValue(lateralityLRB);
		
		newRow.setBackColor(Color.Orange);
		
	}

	private void addOPCS4ProcedureToDynGrid(String string, LateralityLRB lateralityLRB, DynamicGridRow newRow, DynamicGridCell cellName, DynamicGridCell cellICD10, DynamicGridCell cellOPCS4, DynamicGridCell cellLaterality)
	{
		cellName.setValue("");
		cellName.setTooltip("");

		cellICD10.setValue("");
		cellICD10.setTooltip("");
		
		cellOPCS4.setValue(string);
		cellOPCS4.setTooltip(string);
		
		cellLaterality.setValue(lateralityLRB!=null ? lateralityLRB.getText():"");

		newRow.setBackColor(Color.LightBlue);
	}
	
	private void addInvestigationToDynGrid(OrderInvestigationLiteVo investigation, String stringICD10, String stringOPCS4, LateralityLRB lateralityLRB, DynamicGridRow newRow, DynamicGridCell cellName, DynamicGridCell cellICD10, DynamicGridCell cellOPCS4, DynamicGridCell cellLaterality)
	{
		
		cellName.setValue(investigation.getInvestigation() != null && investigation.getInvestigation().getInvestigationIndex() != null ? investigation.getInvestigation().getInvestigationIndex().getName() : "");
		cellName.setTooltip(investigation.getInvestigation() != null && investigation.getInvestigation().getInvestigationIndex() != null ? investigation.getInvestigation().getInvestigationIndex().getName() : "");

		if (investigation.getInvestigation() != null && investigation.getInvestigation().getInvestigationIndex() != null && investigation.getInvestigation().getInvestigationIndex().getID_InvestigationIndex() != null)
		{

			InvestigationIndexVo voInvWithMappings = domain.getInvestigationWithTaxonomyMappings(investigation.getInvestigation().getInvestigationIndex());
			
			cellICD10.setValue(stringICD10 == "" ? findICD10(voInvWithMappings.getTaxonomyMap()) : stringICD10);
			cellICD10.setTooltip(stringICD10 == "" ? findICD10(voInvWithMappings.getTaxonomyMap()) : stringICD10);
			
			cellOPCS4.setValue(stringOPCS4 == "" ? findOPCS4(voInvWithMappings.getTaxonomyMap()) : stringOPCS4);
			cellOPCS4.setTooltip(stringOPCS4 == "" ? findOPCS4(voInvWithMappings.getTaxonomyMap()) : stringOPCS4);
		}

		
		cellLaterality.setReadOnly(true);

		newRow.setBackColor(Color.LightYellow);
	}
	
	private DynamicGridColumn getColumnDynGrid(String identifier) 
	{
		return form.dyngrdRefCodingItems().getColumns().getByIdentifier(identifier);
	}
	
	private void initialize(ReferralCodingForViewVo refCoding)
	{
		form.lblAdmissionAppInfo().setValue(refCoding!=null && refCoding.getAppointmentIsNotNull() ? "Appointment Info: "  : "Admission Info: ");
		if (refCoding!=null && refCoding.getAppointmentIsNotNull())
		{
			form.cmbAdmissionpInfo().setVisible(false);
		}
		else
		{
			form.cmbAppointmentInfo().setVisible(false);
		}
		
		form.cmbAdmissionpInfo().setEnabled(false);
		form.cmbAppointmentInfo().setEnabled(false);
		initializeDynGrid(refCoding);
	}

	private void initializeDynGrid(ReferralCodingForViewVo refCoding)
	{
		form.dyngrdRefCodingItems().clear();
		
		DynamicGridColumn column = form.dyngrdRefCodingItems().getColumns().newColumn(refCoding!=null && refCoding.getAppointmentIsNotNull() ? "Diagnosis / Procedure / Investigation"  : "Diagnosis / Procedure ",COLUMN_NAME);
		column.setWidth(400);
		column.setHeaderAlignment(Alignment.LEFT);
		
		column = form.dyngrdRefCodingItems().getColumns().newColumn("ICD10",COLUMN_ICD10);
		column.setWidth(84);
		column.setHeaderAlignment(Alignment.LEFT);
		
		column = form.dyngrdRefCodingItems().getColumns().newColumn("OPCS4",COLUMN_OPCS4);
		column.setWidth(84);
		column.setHeaderAlignment(Alignment.LEFT);
		
		column = form.dyngrdRefCodingItems().getColumns().newColumn("Laterality",COLUMN_LATERALITY);
		column.setWidth(-1);
		column.setHeaderAlignment(Alignment.LEFT);
	}

	private void clearScreen()
	{
		form.cmbAdmissionpInfo().clear();
		form.cmbAppointmentInfo().clear();
		form.chkActive().setValue(false);
		form.dtimRecordingDateTime().setValue(null);
		form.txtRecordingUser().setValue(null);
		form.dyngrdRefCodingItems().getRows().clear();
		form.txtComments().setValue(null);
	}

	private void populateRecordBrowser(ReferralCodingForViewVoCollection collReferralCodings)
	{
		form.recbrPatCodingRecords().clear();
		
		if (collReferralCodings==null || collReferralCodings.size()==0)
			return;
		
		for (ReferralCodingForViewVo refCoding : collReferralCodings)
		{
			if (refCoding==null)
				continue;
			
			String txtToBeDisplayed=getTextForRecordBrowser(refCoding);
			form.recbrPatCodingRecords().newRow(refCoding, txtToBeDisplayed);
		}
	}

	private String getTextForRecordBrowser(ReferralCodingForViewVo refCoding)
	{
		if (refCoding==null)
			return "";
		
		String str ="";
		
		str+=(refCoding.getAuthoringMOSIsNotNull() && refCoding.getAuthoringMOS().getNameIsNotNull() ? refCoding.getAuthoringMOS().getName().toString() : "");
		str+=(refCoding.getAuthoringDateTimeIsNotNull() ? " - " + refCoding.getAuthoringDateTime() + " ": " ");

		if (refCoding!=null && refCoding.getAppointmentIsNotNull())
		{
			str+=" - "+getAppointmentInfo(refCoding);	
		}
		else
		{
			str+=" - " + getAdmissionInfo(refCoding);
		}
			
		return str;
	}

	private String getAppointmentInfo(ReferralCodingForViewVo refCoding)
	{
		if (refCoding==null)
			return "";
		
		String str="";
		
		BookingAppointmentOutpatientCodingVo appointment = refCoding.getAppointment();

		str+=(appointment.getAppointmentDate() != null ? appointment.getAppointmentDate().toString() : "");
		str+=(appointment.getApptStartTime() != null ? " - " + appointment.getApptStartTime().toString() : "");
		str+=(appointment.getSession() != null && appointment.getSession().getName() != null ? " - " + appointment.getSession().getName() : "");

		return str;
	}

	private String getAdmissionInfo(ReferralCodingForViewVo refCoding)
	{
		if (refCoding==null || refCoding.getPasEvent()==null)
			return "";
		
		String str="";
		
		str+=(refCoding.getPasEvent().getEventDateTime()!=null ? refCoding.getPasEvent().getEventDateTime() : "");
		DischargedEpisodeForReferralCodingViewVo dischargedEpisodeVo = domain.getDischargedEpisodeByPasEvent(refCoding.getPasEvent());
		str+=(dischargedEpisodeVo!=null && dischargedEpisodeVo.getDischargeDateTime()!=null ? " - " + dischargedEpisodeVo.getDischargeDateTime(): "");
	
		return str;
	}

	@Override
	protected void onRecbrPatCodingRecordsValueChanged() throws PresentationLogicException
	{
		populateInstanceScreenFromData(form.recbrPatCodingRecords().getValue());
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.ABORT);
	}

	
}
