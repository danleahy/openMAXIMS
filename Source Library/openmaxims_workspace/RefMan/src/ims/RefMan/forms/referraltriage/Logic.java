//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.referraltriage;

import ims.admin.vo.MenuActionVo;
import ims.admin.vo.MenuActionVoCollection;
import ims.RefMan.forms.referraltriage.GenForm.lyrTriageLayer.tabPageRedirectReferralContainer.GroupRedirectEnumeration;
import ims.RefMan.forms.referraltriage.GenForm.lyrTriageLayer.tabPageReferralRejectedContainer.GroupGPContactedEnumeration;
import ims.RefMan.forms.referraltriage.GenForm.lyrTriageLayer.tabPageReferralRejectedContainer.GroupPatientContactedEnumeration;
import ims.RefMan.vo.AwaitingClinicalInfoVo;
import ims.RefMan.vo.CatsReferralForReferralTriageVo;
import ims.RefMan.vo.CatsReferralListManualAssemblyVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.PatientDocumentForReferralTriageVo;
import ims.RefMan.vo.RedirectReferralDetailsVo;
import ims.RefMan.vo.ReferralServiceUpdatesVo;
import ims.RefMan.vo.ReferralServiceUpdatesVoCollection;
import ims.RefMan.vo.RejectReferralVo;
import ims.RefMan.vo.TriageOutcomeVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.TriageOutcomeStatus;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.enums.DocumentViewLevel;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.core.vo.lookups.DocumentCategory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int UNDO_TRIAGE_OUTCOME = 6320001;
	
	//WDEV-21141
	private static boolean cellBtnClicked = false;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);
		open(null);
	}
	
	private void open(CatsReferralRefVo catsRef)
	{
		//WDEV-21141
//		form.lyrTriage().showtabPageTriage();
		if (!cellBtnClicked)
			form.lyrTriage().showtabPageTriage();
		
		CatsReferralForReferralTriageVo catsReferral = null;
		
		if(catsRef != null)
		{
			catsReferral = domain.getCatsReferral(catsRef);
			
			form.getGlobalContext().Core.setPatientShort(domain.getPatient(catsReferral.getPatient()));
			form.getGlobalContext().RefMan.setCatsReferral(catsReferral);
		}
		else if(form.getGlobalContext().RefMan.getCatsReferral() != null)
		{
			form.getLocalContext().setFirstCatsReferralSelected(new CatsReferralRefVo(form.getGlobalContext().RefMan.getCatsReferral().getID_CatsReferral(), form.getGlobalContext().RefMan.getCatsReferral().getVersion_CatsReferral()));
			catsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}
		
		form.getLocalContext().setCurrentCatsReferral(catsReferral);
		
		form.getGlobalContext().RefMan.setAwaitingClinicalInfo(form.getLocalContext().getCurrentCatsReferral() != null ? form.getLocalContext().getCurrentCatsReferral().getAwaitingClinicalInfo() : null);
		form.getGlobalContext().RefMan.setAwaitingClinicalInfoBoolean(form.getLocalContext().getCurrentCatsReferral() != null ? form.getLocalContext().getCurrentCatsReferral().getIsAwaitingClinicalInfo() : null);
		
		populateScreenFromData(catsReferral);
		
		if(form.getLocalContext().getFormMode() != null)
		{
			if(FormMode.VIEW.equals(form.getLocalContext().getFormMode()))
			{
				openAndShowTheCorrectTab();
			}
			
			form.setMode(form.getLocalContext().getFormMode());
		}
		
		//WDEV-20976
		if (catsReferral != null && catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getService() != null)
		{
			form.getLocalContext().setCurrentService(catsReferral.getReferralDetails().getService());
		}
	
		updateControlsState();
	}

	private void openAndShowTheCorrectTab()
	{
		if(form.getLocalContext().getCurrentCatsReferral() == null || form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() == null)
			return;
		
		if(TriageOutcomeStatus.ACCEPT.equals(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriageOutcomeStatus()))
		{
			form.lyrTriage().tabPageTriageAccepted().ccAccepted().setMode(form.getLocalContext().getFormMode());
			acceptReferral();
		}
		else if(TriageOutcomeStatus.TRIAGE_PENDING_DIAGNOSTIC_RESULT.equals(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriageOutcomeStatus()))
		{
			form.lyrTriage().tabPageTriagePendingDiagnosticResult().ccPendingDiagnostic().setReadOnly(true);
			triagePendingDiagnosticResult();
		}
		else if(TriageOutcomeStatus.REDIRECT.equals(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriageOutcomeStatus()))
		{
			form.lyrTriage().showtabPageRedirectReferral();
			
			bindRedirectServiceCombo();
			populateRedirectTabFromData();
		}
		else if(TriageOutcomeStatus.REJECT.equals(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriageOutcomeStatus()))
		{
			form.lyrTriage().showtabPageReferralRejected();
			
			populateRejectTabFromData();
		}
		else if(TriageOutcomeStatus.AWAITING_CLINICAL_INFORMATION.equals(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriageOutcomeStatus()))
		{
			form.lyrTriage().showtabPageAwaitingClinicalInformation();
			
			populateAwaitingTabFromData();
		}
		else if(TriageOutcomeStatus.SECOND_OPINION.equals(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriageOutcomeStatus()))
		{
			form.lyrTriage().showtabPageSecondOpinion();
		}
	}

	private void populateAwaitingTabFromData()
	{
		clearAwaitingClinicalInfo();
		
		if(form.getLocalContext().getCurrentCatsReferral() == null)
			return;
		
		setAwaitingClinicalnformationImage(form.getLocalContext().getCurrentCatsReferral().getIsAwaitingClinicalInfo(), form.getLocalContext().getCurrentCatsReferral().getAwaitingClinicalInfo());
		
		if(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() != null)
		{
			form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getAwaitingClinicalInformationComment());
		}
		
		updateControlsState();
	}

	private void clearAwaitingClinicalInfo()
	{
		form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().setValue(null);
	}

	private void populateRejectTabFromData()
	{
		clearReject();
		
		if(form.getLocalContext().getCurrentCatsReferral() != null && form.getLocalContext().getCurrentCatsReferral().getRejectReferralDetail() != null)
		{
			form.lyrTriage().tabPageReferralRejected().cmbReasonForRejection().setValue(form.getLocalContext().getCurrentCatsReferral().getRejectReferralDetail().getReason());
			form.lyrTriage().tabPageReferralRejected().txtRejectedComments().setValue(form.getLocalContext().getCurrentCatsReferral().getRejectReferralDetail().getRejectionComments());
			form.lyrTriage().tabPageReferralRejected().GroupGPContacted().setValue(wasGPContacted(form.getLocalContext().getCurrentCatsReferral().getRejectReferralDetail().getWasGPContacted()));
			form.lyrTriage().tabPageReferralRejected().GroupPatientContacted().setValue(wasPatientContacted(form.getLocalContext().getCurrentCatsReferral().getRejectReferralDetail().getWasPatientContacted()));
		}
		
		updateControlsState();
	}

	private GroupPatientContactedEnumeration wasPatientContacted(Boolean wasPatientContacted)
	{
		if(Boolean.TRUE.equals(wasPatientContacted))
			return GroupPatientContactedEnumeration.rdoYesPatient;
		
		return GroupPatientContactedEnumeration.rdoNoPatient;
	}

	private GroupGPContactedEnumeration wasGPContacted(Boolean wasGPContacted)
	{
		if(Boolean.TRUE.equals(wasGPContacted))
			return GroupGPContactedEnumeration.rdoYesGP;
		
		return GroupGPContactedEnumeration.rdoNoGP;
	}

	private void clearReject()
	{
		form.lyrTriage().tabPageReferralRejected().cmbReasonForRejection().setValue(null);
		form.lyrTriage().tabPageReferralRejected().txtRejectedComments().setValue(null);
		form.lyrTriage().tabPageReferralRejected().GroupGPContacted().setValue(null);
		form.lyrTriage().tabPageReferralRejected().GroupPatientContacted().setValue(null);
	}

	private void updateControlsState()
	{
		if(form.getLocalContext().getFormMode() == null)
		{
			form.lyrTriage().tabPageTriageAccepted().ccAccepted().setMode(FormMode.EDIT);
		}
		
		/*if(form.lyrTriage().tabPageTriage().isVisible())//WDEV-21994
		{
			Boolean isReferralCAB = form.getLocalContext().getCurrentCatsReferralIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getCurrentCatsReferral().getIsCAB());
			form.lyrTriage().tabPageTriage().btnRedirect().setVisible(!isReferralCAB);//WDEV-21994
		}*/
		
		boolean isSaveVisible = form.lyrTriage().tabPageTriageAccepted().isVisible() || form.lyrTriage().tabPageTriagePendingDiagnosticResult().isVisible() || form.lyrTriage().tabPageRedirectReferral().isVisible() || form.lyrTriage().tabPageReferralRejected().isVisible() || form.lyrTriage().tabPageAwaitingClinicalInformation().isVisible() || form.lyrTriage().tabPageSecondOpinion().isVisible();
		
		form.btnSaveReturnToList().setVisible(isSaveVisible && (form.getLocalContext().getFormMode() == null));
		form.btnSaveTriageNextPatient().setVisible(isSaveVisible && (form.getLocalContext().getFormMode() == null));
		form.btnCancelNextPatient().setVisible(form.getLocalContext().getFormMode() == null);
		form.btnCancelReturnToWorklist().setVisible(form.getLocalContext().getFormMode() == null);
		
		boolean viewMode = FormMode.VIEW.equals(form.getLocalContext().getFormMode());
		
		if(viewMode)
		{
			form.lyrTriage().tabPageTriagePendingDiagnosticResult().txtPendingComment().setEnabled(false);
		}
		
		form.btnClose().setVisible(viewMode); //WDEV-20711
		
		Boolean isReferralCAB = form.getLocalContext().getCurrentCatsReferralIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getCurrentCatsReferral().getIsCAB());
		form.lyrTriage().tabPageRedirectReferral().GroupRedirect().setVisible(GroupRedirectEnumeration.rdoRedirectToHcp, !isReferralCAB);
		
		boolean showRedirectToHcpControls = GroupRedirectEnumeration.rdoRedirectToHcp.equals(form.lyrTriage().tabPageRedirectReferral().GroupRedirect().getValue());
		
		form.lyrTriage().tabPageRedirectReferral().lblRedirectToHcp().setVisible(showRedirectToHcpControls);
		form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().setVisible(showRedirectToHcpControls);
		
		form.lyrTriage().tabPageRedirectReferral().GroupRedirect().setEnabled(!viewMode);
		form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().setEnabled(!showRedirectToHcpControls && !viewMode);
		form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().setEnabled(!viewMode);
		form.lyrTriage().tabPageRedirectReferral().cmbReason().setEnabled(!viewMode);
		form.lyrTriage().tabPageRedirectReferral().txtCommentsBig().setEnabled(!viewMode);
		
		form.lyrTriage().tabPageReferralRejected().cmbReasonForRejection().setEnabled(!viewMode);
		form.lyrTriage().tabPageReferralRejected().txtRejectedComments().setEnabled(!viewMode);
		form.lyrTriage().tabPageReferralRejected().GroupGPContacted().setEnabled(!viewMode);
		form.lyrTriage().tabPageReferralRejected().GroupPatientContacted().setEnabled(!viewMode);
		
		form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().setEnabled(!viewMode);
		
		MenuActionVoCollection  deniedActions = form.getLocalContext().getDeniedMenuActions();
		
		boolean isUndoTriageOutcomeVisible = true;
		for (int i = 0; deniedActions != null && i < deniedActions.size(); i++)
		{
			MenuActionVo action = deniedActions.get(i);
			
			if (action == null)
				continue;
			
			if (UNDO_TRIAGE_OUTCOME == action.getID_MenuAction())
			{
				isUndoTriageOutcomeVisible = false;
			}
		}
		
		form.lyrTriage().tabPageSecondOpinion().btnSecondOpinion().setEnabled(!viewMode);
		form.btnUndoTriageOutcome().setVisible(isUndoTriageOutcomeVisible && form.getLocalContext().getCurrentCatsReferral() != null && form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() != null);
		
		//WDEV-22464
		form.btnViewReferralDocuments().setVisible(form.getLocalContext().getCurrentCatsReferralIsNotNull() && form.getLocalContext().getCurrentCatsReferral().getReferralDocumentsIsNotNull() && form.getLocalContext().getCurrentCatsReferral().getReferralDocuments().size()>1);
		// start WDEV-23328
		form.lyrTriage().tabPageTriage().btnAccept().setVisible(engine.hasRight(AppRight.REFERRAL_TRIAGE_ACTION_CAN_ACCEPT));
		form.lyrTriage().tabPageTriage().btnRedirect().setVisible(engine.hasRight(AppRight.REFERRAL_TRIAGE_ACTION_CAN_REDIRECT));
		form.lyrTriage().tabPageTriage().btnReject().setVisible(engine.hasRight(AppRight.REFERRAL_TRIAGE_ACTION_CAN_REJECT));
		// end WDEV-23328
	}

	private void populateScreenFromData(CatsReferralForReferralTriageVo catsReferral)
	{
		showReferralLetter(catsReferral);
	}

	private void showReferralLetter(CatsReferralForReferralTriageVo catsReferral)
	{
		String fileName = null;
		
		if(form.getLocalContext().getReferralLetter() != null)
		{
			fileName = form.getLocalContext().getReferralLetter().getServerDocument().getFileName();
		}
		else if(catsReferral != null && catsReferral.getReferralDocuments() != null)
		{
			for(PatientDocumentForReferralTriageVo doc : catsReferral.getReferralDocuments())
			{
				if(DocumentCategory.GPLETTER.equals(doc.getCategory()))
				{
					fileName = doc.getServerDocument().getFileName();
					break;
				}
			}
		}
		
		String fullPath = getFullPath(fileName);
		form.lyrTriage().tabPageTriage().htmDocument().setHTML("<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + fullPath +  "'></IFRAME>");
	}
	
	private String getFullPath(String fileName)
	{
		return getFileServerURL() + fileName;
	}
	
	private String getFileServerURL()
	{ 
		return ConfigFlag.GEN.FILE_SERVER_URL.getValue();
	}

	private void initialise(Object[] args)
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof PatientDocumentVo)
			{
				form.getLocalContext().setReferralLetter((PatientDocumentVo) args[0]);
			}
			
			if(args.length > 1)
			{
				if(args[1] instanceof FormMode)
				{
					form.getLocalContext().setFormMode((FormMode) args[1]);
				}
			}

			//WDEV-21141
			if (args[0] instanceof CatsReferralListManualAssemblyVo)
			{
				cellBtnClicked = false;
				
				CatsReferralListManualAssemblyVo catsRefVo = (CatsReferralListManualAssemblyVo)args[0];
				if (
					(catsRefVo.getTriageOutcomeStatus() != null && Boolean.TRUE.equals(catsRefVo.getHasTriagePendingDiagnosticResult()))
					|| (catsRefVo.getTriageOutcomeStatus().getID() == ims.RefMan.forms.referralstatuslist.Logic.AWAITING_CLINICAL_INFORMATION)
					)
				{
					
					open(null);
					
					if (catsRefVo.getTriageOutcomeStatus().getID() == ims.RefMan.forms.referralstatuslist.Logic.AWAITING_CLINICAL_INFORMATION)
					{
						cellBtnClicked = true;
						form.lyrTriage().showtabPageAwaitingClinicalInformation();
						
						if(form.getLocalContext().getCurrentCatsReferral() == null)
							return;
						
						setAwaitingClinicalnformationImage(form.getLocalContext().getCurrentCatsReferral().getIsAwaitingClinicalInfo(), form.getLocalContext().getCurrentCatsReferral().getAwaitingClinicalInfo());
						
						form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().setValue(null);
						if(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() != null)
						{
							form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getAwaitingClinicalInformationComment());
						}
						
						updateControlsState();
					}

					if (catsRefVo.getTriageOutcomeStatus().getID() == ims.RefMan.forms.referralstatuslist.Logic.PENDING_TRAIGE_DIAGNOSTIC)
					{
						cellBtnClicked = true;
						triagePendingDiagnosticResult();
						updateControlsState();
					}
				
				}
			} //WDEV-21141

		}
		
		form.getGlobalContext().RefMan.setTriageNextPatient(null);
		form.getLocalContext().setDeniedMenuActions(getDeniedActionForCurrentUser());
	}
	
	private  MenuActionVoCollection getDeniedActionForCurrentUser()
	{
		MenuActionVoCollection deniedActions = new MenuActionVoCollection();
		
		AppFormForTrackingVo currentForm = domain.getFormMenuAction(engine.getFormName().getID());
		
		if(currentForm == null)
			return null;
		
		IAppRole role = engine.getLoggedInRole();
		
		if(role == null)
			return null;
		
		for(MenuActionVo menuAction : currentForm.getMenuActions())
		{
			if(menuAction == null)
				continue;
			
			if(!role.hasMenuActionRight(currentForm, menuAction))
			{
				deniedActions.add(menuAction);
			}
		}
		
		return deniedActions;
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getForms().RefMan.AwaitingClinicalInformationDialog.equals(formName))
		{
			setAwaitingClinicalnformationImage(form.getGlobalContext().RefMan.getAwaitingClinicalInfoBoolean(), form.getGlobalContext().RefMan.getAwaitingClinicalInfo());
		}
		
		//WDEV-22464
		if (form.lyrTriage().tabPageTriage().isVisible() && form.getForms().Core.ViewDocuments.equals(formName))
		{
			showReferralLetter(form.getLocalContext().getCurrentCatsReferral());
		}
	}
	
	private void setAwaitingClinicalnformationImage(Boolean isAwaitingClinicalInformation, AwaitingClinicalInfoVo awaitingClinicalInfo)
	{
		form.lyrTriage().tabPageAwaitingClinicalInformation().btnAwaitingClinicalInfo().setImage(null);
		
		if(awaitingClinicalInfo == null && isAwaitingClinicalInformation == null)
			return;
		
		if(Boolean.TRUE.equals(isAwaitingClinicalInformation))
		{
			form.lyrTriage().tabPageAwaitingClinicalInformation().btnAwaitingClinicalInfo().setImage(form.getImages().RefMan.AwaitingClinicalInformation);
		}
		
		if(!Boolean.TRUE.equals(isAwaitingClinicalInformation) && awaitingClinicalInfo != null)
		{
			form.lyrTriage().tabPageAwaitingClinicalInformation().btnAwaitingClinicalInfo().setImage(form.getImages().RefMan.ClinicalInformationReceived);
		}
	}
	
	@Override
	protected void onBtnCancelNextPatientClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setTriageNextPatient(true);
		engine.close(DialogResult.ABORT);
	}

	@Override
	protected void onBtnAwaitingClinicalInformationClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrTriage().showtabPageAwaitingClinicalInformation();
		if(form.getLocalContext().getCurrentCatsReferral() == null)
			return;
		
		awaitingClinicalInformationClicked();//WDEV-21181
		
		setAwaitingClinicalnformationImage(form.getLocalContext().getCurrentCatsReferral().getIsAwaitingClinicalInfo(), form.getLocalContext().getCurrentCatsReferral().getAwaitingClinicalInfo());
		
		form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().setValue(null);
		if(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() != null)
		{
			form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getAwaitingClinicalInformationComment());
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onBtnRejectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrTriage().showtabPageReferralRejected();
		updateControlsState();
	}
	
	@Override
	protected void onBtnRedirectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrTriage().showtabPageRedirectReferral();
		
		bindRedirectServiceCombo();
		populateRedirectTabFromData();
		
		updateControlsState();
	}
	
	private void populateRedirectTabFromData()
	{
		clear();
		
		if(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() != null && form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails() != null)
		{
			if (form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectHCP() != null)
			{
				form.lyrTriage().tabPageRedirectReferral().GroupRedirect().setValue(GroupRedirectEnumeration.rdoRedirectToHcp);
				
				HcpLiteVo hcp = form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectHCP();
				
				form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().newRow(hcp, hcp.getIHcpName());
				form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().setValue(hcp);
			}
			
			form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectService());
			
			if(form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue() == null && form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectService() != null)
			{
				form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().newRow(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectService(), form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectService().getServiceName());
				form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectService());
			}
			//WDEV-?????
			form.lyrTriage().tabPageRedirectReferral().cmbReason().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectReason());
			form.lyrTriage().tabPageRedirectReferral().txtCommentsBig().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getRedirectReferralDetails().getRedirectComment());
		}
		
		updateControlsState();
	}

	private void clear()
	{
		form.lyrTriage().tabPageRedirectReferral().GroupRedirect().setValue(GroupRedirectEnumeration.rdoRedirectToService);
		form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().setValue(null);
		//WDEV-????
		form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().clear();
		form.lyrTriage().tabPageRedirectReferral().cmbReason().setValue(null);
		form.lyrTriage().tabPageRedirectReferral().txtCommentsBig().setValue(null);
	}

	private void bindRedirectServiceCombo()
	{
		form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().clear();
		
		//WDEV-20976
		if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
		{
			ServiceShortVoCollection servicesColl = domain.getServicesForCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			if (servicesColl != null && servicesColl.size() > 0)
			{
				for (ServiceShortVo serviceShortVo : servicesColl)
				{
					if (form.getLocalContext().getCurrentService() == null || !serviceShortVo.getID_Service().equals(form.getLocalContext().getCurrentService().getID_Service()))
					{
						form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().newRow(serviceShortVo, serviceShortVo.getServiceName());
					}
				}
			}
		}
	}

	@Override
	protected void onBtnTriagePendingDiagnosticResultClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getLocalContext().getCurrentCatsReferral() == null)
			return;
		
		triagePendingDiagnosticResult();
		
		updateControlsState();
	}

	private void triagePendingDiagnosticResult()
	{
		form.lyrTriage().showtabPageTriagePendingDiagnosticResult();
		
		ServiceLiteVo service = null;
		
		if(form.getLocalContext().getCurrentCatsReferral().getReferralDetails() != null)
		{
			service = form.getLocalContext().getCurrentCatsReferral().getReferralDetails().getService();
		}
		
		form.lyrTriage().tabPageTriagePendingDiagnosticResult().ccPendingDiagnostic().initialise(form.getGlobalContext().RefMan.getCatsReferral(), service, Boolean.TRUE.equals(form.getLocalContext().getCurrentCatsReferral().getIsCAB()), true);
		
		if(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() != null && form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriagePendingDiagnosticResult() != null)
		{
			form.lyrTriage().tabPageTriagePendingDiagnosticResult().ccPendingDiagnostic().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriagePendingDiagnosticResult());
		}
		
		form.lyrTriage().tabPageTriagePendingDiagnosticResult().txtPendingComment().setValue(null);
		
		if(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome() != null)
		{
			form.lyrTriage().tabPageTriagePendingDiagnosticResult().txtPendingComment().setValue(form.getLocalContext().getCurrentCatsReferral().getTriageOutcome().getTriagePendingDiagnosticResultComment());
		}
	}
	
	@Override
	protected void onBtnAcceptClick() throws ims.framework.exceptions.PresentationLogicException
	{
		acceptReferral();
		updateControlsState();
	}
	
	private void acceptReferral()
	{
		form.lyrTriage().showtabPageTriageAccepted();
		form.lyrTriage().tabPageTriageAccepted().ccAccepted().setValue(form.getLocalContext().getCurrentCatsReferral());
	}

	// WDEV-21271 please add back the  in dev env if it necessary 
//	@Override
//	protected void onBtnSecondOpininClick() throws ims.framework.exceptions.PresentationLogicException
//	{
//		form.lyrTriage().showtabPageSecondOpinion();
//		updateControlsState();
//	}
	// end WDEV-21271

	@Override
	protected void onBtnCancelReturnToWorklistClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setTriageNextPatient(null);
		engine.close(DialogResult.ABORT);
	}

	@Override
	protected void onBtnSaveReturnToListClick() throws PresentationLogicException
	{
		if(saveCatsReferral())
		{
			form.getGlobalContext().RefMan.setTriageNextPatient(null);
			engine.close(DialogResult.OK);
		}
	}

	@Override
	protected void onBtnSaveTriageNextPatientClick() throws PresentationLogicException
	{
		if(saveCatsReferral())
		{
			form.getGlobalContext().RefMan.setTriageNextPatient(true);
			engine.close(DialogResult.OK);
		}
	}

	private boolean saveCatsReferral()
	{
		CatsReferralForReferralTriageVo catsReferral = null;
		
		if(form.lyrTriage().tabPageTriageAccepted().isVisible())
		{
			catsReferral = form.lyrTriage().tabPageTriageAccepted().ccAccepted().getValue();
		}
		else if(form.lyrTriage().tabPageTriagePendingDiagnosticResult().isVisible())
		{
			catsReferral = populateDataFromTriagePendingDiagnosticTab(form.getLocalContext().getCurrentCatsReferral());
		}
		else if(form.lyrTriage().tabPageAwaitingClinicalInformation().isVisible())
		{
			catsReferral = populateDataFromAwaitingClinicalTab(form.getLocalContext().getCurrentCatsReferral());
		}
		else if(form.lyrTriage().tabPageRedirectReferral().isVisible())
		{
			catsReferral = populateDataFromRedirectReferralTab(form.getLocalContext().getCurrentCatsReferral());
		}
		else if(form.lyrTriage().tabPageReferralRejected().isVisible())
		{
			catsReferral = populateDataFromRejectedReferralTab(form.getLocalContext().getCurrentCatsReferral());
		}
		else if(form.lyrTriage().tabPageSecondOpinion().isVisible())
		{
			catsReferral = populateDataFromSecondOpinionTab(form.getLocalContext().getCurrentCatsReferral());
		}
		
		if(catsReferral == null)
			return false;
		
		if(catsReferral.getTriageOutcome() != null && catsReferral.getTriageOutcome().getID_TriageOutcome() == null)
		{
			catsReferral.getTriageOutcome().setCatsReferral(catsReferral);
		}
		
		String[] errors = catsReferral.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveCatsReferral(catsReferral, form.lyrTriage().tabPageReferralRejected().isVisible());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			form.getGlobalContext().RefMan.setTriageNextPatient(null);
			engine.close(DialogResult.ABORT);
			
			return false;
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showErrors(new String[]{e.getMessage()});
			
			return false;
		}
		
		//WDEV-21973 
		domain.createCaseNoteFolderIfNone(form.getGlobalContext().Core.getPatientShort());
		
		return true;
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.lyrTriage().tabPageTriageAccepted().isVisible())
		{
    		uiErrors.addAll(form.lyrTriage().tabPageTriageAccepted().ccAccepted().getErrors());
		}
		
		if(form.lyrTriage().tabPageRedirectReferral().isVisible())
		{
			if (Boolean.TRUE.equals(form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().getVisible()) && form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().getValue() == null)
				uiErrors.add("Redirect To HCP is mandatory");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private CatsReferralForReferralTriageVo populateDataFromAwaitingClinicalTab(CatsReferralForReferralTriageVo catsReferral)
	{
		if(catsReferral == null)
			return null;
		
		catsReferral = (CatsReferralForReferralTriageVo) catsReferral.clone();
		
		MemberOfStaffRefVo mosUser = null;
		Object user = domain.getMosUser();
		
		if(user instanceof MemberOfStaffRefVo)
		{
			mosUser = (MemberOfStaffRefVo) user;
		}
		
		if(catsReferral.getTriageOutcome() == null)
		{
			catsReferral.setTriageOutcome(new TriageOutcomeVo());
			catsReferral.getTriageOutcome().setRecordingDateTime(new DateTime());
			catsReferral.getTriageOutcome().setRecordingUser(mosUser);
		}
		
		catsReferral.getTriageOutcome().setTriageOutcomeStatus(TriageOutcomeStatus.AWAITING_CLINICAL_INFORMATION);
		catsReferral.getTriageOutcome().setAwaitingClinicalInformationComment(form.lyrTriage().tabPageAwaitingClinicalInformation().txtAwaitingClinicalComment().getValue());
		
		catsReferral.setTriageDateTime(new DateTime());
		catsReferral.setAwaitingClinicalInfo(form.getGlobalContext().RefMan.getAwaitingClinicalInfo());
		catsReferral.setIsAwaitingClinicalInfo(form.getGlobalContext().RefMan.getAwaitingClinicalInfoBoolean());
		
		return catsReferral;
	}

	private CatsReferralForReferralTriageVo populateDataFromSecondOpinionTab(CatsReferralForReferralTriageVo catsReferral)
	{
		if(catsReferral == null)
			return null;
		
		catsReferral = (CatsReferralForReferralTriageVo) catsReferral.clone();
		
		MemberOfStaffRefVo mosUser = null;
		Object user = domain.getMosUser();
		
		if(user instanceof MemberOfStaffRefVo)
		{
			mosUser = (MemberOfStaffRefVo) user;
		}
		
		if(catsReferral.getTriageOutcome() == null)
		{
			catsReferral.setTriageOutcome(new TriageOutcomeVo());
			catsReferral.getTriageOutcome().setRecordingDateTime(new DateTime());
			catsReferral.getTriageOutcome().setRecordingUser(mosUser);
		}
		
		catsReferral.getTriageOutcome().setTriageOutcomeStatus(TriageOutcomeStatus.SECOND_OPINION);
		
		catsReferral.setTriageDateTime(new DateTime());
		
		CatsReferralStatusVo secondOpinion = form.getGlobalContext().RefMan.getSecondOpinionReferralStatus();
		
		catsReferral.setCurrentStatus(secondOpinion);
		
		if(catsReferral.getStatusHistory() == null)
			catsReferral.setStatusHistory(new CatsReferralStatusVoCollection());
		
		catsReferral.getStatusHistory().add(secondOpinion);
		
		return catsReferral;
	}

	private CatsReferralForReferralTriageVo populateDataFromRejectedReferralTab(CatsReferralForReferralTriageVo catsReferral)
	{
		if(catsReferral == null)
			return null;
		
		catsReferral = (CatsReferralForReferralTriageVo) catsReferral.clone();
		
		MemberOfStaffRefVo mosUser = null;
		Object user = domain.getMosUser();
		
		if(user instanceof MemberOfStaffRefVo)
		{
			mosUser = (MemberOfStaffRefVo) user;
		}
		
		if(catsReferral.getTriageOutcome() == null)
		{
			catsReferral.setTriageOutcome(new TriageOutcomeVo());
			catsReferral.getTriageOutcome().setRecordingDateTime(new DateTime());
			catsReferral.getTriageOutcome().setRecordingUser(mosUser);
		}
		
		catsReferral.getTriageOutcome().setTriageOutcomeStatus(TriageOutcomeStatus.REJECT);
		
		if(catsReferral.getRejectReferralDetail() == null)
		{
			catsReferral.setRejectReferralDetail(new RejectReferralVo());
		}
		
		catsReferral.getRejectReferralDetail().setReason(form.lyrTriage().tabPageReferralRejected().cmbReasonForRejection().getValue());
		catsReferral.getRejectReferralDetail().setRejectionComments(form.lyrTriage().tabPageReferralRejected().txtRejectedComments().getValue());
		catsReferral.getRejectReferralDetail().setWasPatientContacted(GroupPatientContactedEnumeration.rdoYesPatient.equals(form.lyrTriage().tabPageReferralRejected().GroupPatientContacted().getValue()) ? true : false);
		catsReferral.getRejectReferralDetail().setWasGPContacted(GroupGPContactedEnumeration.rdoYesGP.equals(form.lyrTriage().tabPageReferralRejected().GroupGPContacted().getValue()) ? true : false);
		
		catsReferral.setTriageDateTime(new DateTime());
		
		CatsReferralStatusVo rejectedStatus = createRejectedStatus(mosUser);
		
		catsReferral.setCurrentStatus(rejectedStatus);
		
		if(catsReferral.getStatusHistory() == null)
			catsReferral.setStatusHistory(new CatsReferralStatusVoCollection());
		
		catsReferral.getStatusHistory().add(rejectedStatus);
		
		return catsReferral;
	}
	
	private CatsReferralStatusVo createRejectedStatus(MemberOfStaffRefVo mosUser)
	{
		CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
		
		currentStatus.setReferralStatus(ReferralApptStatus.REFERRAL_REJECTED);
		currentStatus.setAuthoringUser(mosUser);
		currentStatus.setStatusDateTime(new DateTime());
		
		return currentStatus;
	}

	private CatsReferralForReferralTriageVo populateDataFromRedirectReferralTab(CatsReferralForReferralTriageVo catsReferral)
	{
		if(catsReferral == null)
			return null;
		
		catsReferral = (CatsReferralForReferralTriageVo) catsReferral.clone();
		
		MemberOfStaffRefVo mosUser = null;
		Object user = domain.getMosUser();
		
		if(user instanceof MemberOfStaffRefVo)
		{
			mosUser = (MemberOfStaffRefVo) user;
		}
		
		if(catsReferral.getTriageOutcome() == null)
		{
			catsReferral.setTriageOutcome(new TriageOutcomeVo());
			catsReferral.getTriageOutcome().setRecordingDateTime(new DateTime());
			catsReferral.getTriageOutcome().setRecordingUser(mosUser);
		}
		
		catsReferral.getTriageOutcome().setTriageOutcomeStatus(TriageOutcomeStatus.REDIRECT);
		
		if(catsReferral.getTriageOutcome().getRedirectReferralDetails() == null)
		{
			catsReferral.getTriageOutcome().setRedirectReferralDetails(new RedirectReferralDetailsVo());
		}
		
		ServiceLiteVo originalService = null;
		
		if(catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getService() != null)
		{
			originalService = (ServiceLiteVo) catsReferral.getReferralDetails().getService().clone();
			
			if(catsReferral.getReferralDetails().getOriginalService() == null)
			{
				catsReferral.getReferralDetails().setOriginalService(originalService);
			}
			
			if(form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue() != null)
			{
				//wdev-20727
				if( !catsReferral.getReferralDetails().getServiceIsNotNull() || ( !catsReferral.getReferralDetails().getService().equals(form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue())) )
				{
					ReferralServiceUpdatesVoCollection tempHistColl = catsReferral.getReferralDetails().getServiceUpdateHistory();
					if( tempHistColl == null )
					{
						tempHistColl = new ReferralServiceUpdatesVoCollection();
					}
					ReferralServiceUpdatesVo tempVo = new ReferralServiceUpdatesVo(); 
					tempVo.setRecordingDateTime(new DateTime());
					tempVo.setService(form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue());
					tempVo.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());
					tempHistColl.add(tempVo);
					catsReferral.getReferralDetails().setServiceUpdateHistory(tempHistColl);
					
				}
				//-----end wdev-20727
				//WDEV-21313
				if (catsReferral.getReferralDetails().getConsultantIsNotNull())
				{
					ServiceLiteVo redirectToService = form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue();
					if (!isServiceAssociatedWithConsultant(redirectToService,catsReferral.getReferralDetails().getConsultant()))
					{
						catsReferral.getReferralDetails().setConsultant(null);
					}
				}
				//WDEV-21313 --- end				
				catsReferral.getReferralDetails().setService(form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue());
			}
		}
		
		//WDEV-20971
		if(catsReferral.getReferralDetails() != null && Boolean.TRUE.equals(form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().getVisible()))
		{
			HcpLiteVo originalConsultant = null;
			
			if(catsReferral.getReferralDetails().getConsultant() != null)
			{
				originalConsultant = (HcpLiteVo) catsReferral.getReferralDetails().getConsultant().clone();
			}
			
			if(catsReferral.getReferralDetails().getOriginalConsultant() == null)
			{
				catsReferral.getReferralDetails().setOriginalConsultant(originalConsultant);
			}
			
			catsReferral.getReferralDetails().setConsultant(form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().getValue());
		}
		
		catsReferral.getTriageOutcome().getRedirectReferralDetails().setAuthoringUser(mosUser);
		catsReferral.getTriageOutcome().getRedirectReferralDetails().setRedirectDateTime(new DateTime());
		catsReferral.getTriageOutcome().getRedirectReferralDetails().setRedirectService(form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue());
		
		catsReferral.getTriageOutcome().getRedirectReferralDetails().setRedirectHCP(GroupRedirectEnumeration.rdoRedirectToHcp.equals(form.lyrTriage().tabPageRedirectReferral().GroupRedirect().getValue()) ? form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().getValue() : null); //WDEV-21308
		
		catsReferral.getTriageOutcome().getRedirectReferralDetails().setRedirectReason(form.lyrTriage().tabPageRedirectReferral().cmbReason().getValue());
		catsReferral.getTriageOutcome().getRedirectReferralDetails().setRedirectComment(form.lyrTriage().tabPageRedirectReferral().txtCommentsBig().getValue());
		
		catsReferral.setTriageDateTime(new DateTime());
		
		if(Boolean.TRUE.equals(catsReferral.getIsCAB()))
		{
			catsReferral.setRedirectCAB(true);
		}
		
		return catsReferral;
	}
	//WDEV-21313
	private boolean isServiceAssociatedWithConsultant(ServiceLiteVo redirectToService, HcpRefVo hcpRef)
	{
		if (redirectToService != null && hcpRef != null)
		{	
			return domain.isConsultantAssociatedToRedirectedService(redirectToService, hcpRef);
		}	
		return false;
	}

	private CatsReferralForReferralTriageVo populateDataFromTriagePendingDiagnosticTab(CatsReferralForReferralTriageVo catsReferral)
	{
		if(catsReferral == null)
			return null;
		
		catsReferral = (CatsReferralForReferralTriageVo) catsReferral.clone();
		
		MemberOfStaffRefVo mosUser = null;
		Object user = domain.getMosUser();
		
		if(user instanceof MemberOfStaffRefVo)
		{
			mosUser = (MemberOfStaffRefVo) user;
		}
		
		if(catsReferral.getTriageOutcome() == null)
		{
			catsReferral.setTriageOutcome(new TriageOutcomeVo());
			catsReferral.getTriageOutcome().setRecordingDateTime(new DateTime());
			catsReferral.getTriageOutcome().setRecordingUser(mosUser);
		}
		
		catsReferral.getTriageOutcome().setTriageOutcomeStatus(TriageOutcomeStatus.TRIAGE_PENDING_DIAGNOSTIC_RESULT);
		catsReferral.getTriageOutcome().setTriagePendingDiagnosticResult(form.lyrTriage().tabPageTriagePendingDiagnosticResult().ccPendingDiagnostic().getValue());
		catsReferral.getTriageOutcome().setTriagePendingDiagnosticResultComment(form.lyrTriage().tabPageTriagePendingDiagnosticResult().txtPendingComment().getValue());
		
		catsReferral.setTriageDateTime(new DateTime());
		
		return catsReferral;
	}

	@Override
	protected void onBtnAwaitingClinicalInfoClick() throws PresentationLogicException
	{
		if(form.getLocalContext().getCurrentCatsReferral() == null)
			return;
		
		awaitingClinicalInformationClicked();
	}

	private void awaitingClinicalInformationClicked()
	{
		form.getGlobalContext().Core.setParentFormMode(FormMode.VIEW.equals(form.getLocalContext().getFormMode()) ? FormMode.VIEW : FormMode.EDIT);

		engine.open(form.getForms().RefMan.AwaitingClinicalInformationDialog);
	}

	@Override
	protected void onBtnSecondOpinionClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.SecondOpinionDialog);
	}

	//WDEV-20711
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onQmbRedirectToHcpTextSubmited(String value) throws PresentationLogicException
	{
		
		HcpLiteVoCollection hcpColl = null;
		
		
		if (form.getLocalContext().getCurrentCatsReferral() != null && form.getLocalContext().getCurrentCatsReferral().getReferralDetails() != null)
		{
			ims.core.vo.lookups.ServiceFunction function = form.getLocalContext().getCurrentCatsReferral().getReferralDetails().getFunctionIsNotNull()
															? form.getLocalContext().getCurrentCatsReferral().getReferralDetails().getFunction().getFunction()
															: null;
			hcpColl = domain.listRedirectedHCPs(value, form.getLocalContext().getCurrentCatsReferral().getReferralDetails().getService(), form.getLocalContext().getCurrentCatsReferral().getReferralDetails().getConsultant(),function); //WDEV-21041//WDEV-21062
		}
		populateListOwners(hcpColl);
	}

	private void populateListOwners(HcpLiteVoCollection hcpCollection)
	{
		form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().clear();
		
		if (hcpCollection == null)
			return;
		
		for (HcpLiteVo hcp : hcpCollection)
		{
			form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().newRow(hcp, hcp.getName() != null ? hcp.getName().toString() : "<Unknown HCP>");
		}
		
		if (hcpCollection.size() == 1)
		{
			form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().setValue(hcpCollection.get(0));
		}
		else
		{
			form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().showOpened();
		}
	}

	@Override
	protected void onRadioButtonGroupRedirectValueChanged() throws PresentationLogicException
	{
		form.lyrTriage().tabPageRedirectReferral().qmbRedirectedHcp().clear();
		
		ServiceLiteVo service = form.getLocalContext().getCurrentCatsReferral() != null && form.getLocalContext().getCurrentCatsReferral().getReferralDetails() != null ? form.getLocalContext().getCurrentCatsReferral().getReferralDetails().getService() : null;
		
		form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().setValue(GroupRedirectEnumeration.rdoRedirectToHcp.equals(form.lyrTriage().tabPageRedirectReferral().GroupRedirect().getValue()) ? service : null);
		
		if(form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().getValue() == null)
		{
			form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().newRow(service, service.getServiceName());
			form.lyrTriage().tabPageRedirectReferral().cmbRedirectedService().setValue(service);
		}
		//WDEV-?????
		
		updateControlsState();
		
	}

	@Override
	protected void onBtnUndoTriageOutcomeClick() throws PresentationLogicException
	{
		//WDEV-21701
		if(form.lyrTriage().tabPageTriage().isVisible())
		{
			form.lyrTriage().tabPageTriage().htmDocument().setHTML("");
		}
		
		form.getLocalContext().setUndoTriageOutcomeMessage(engine.showMessage("Are you sure you wish to undo the Triage Outcome?\n\nNOTE: If you proceed to undo the Triage Outcome, then please review appointments and elective lists for the patient's referral.", "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));//WDEV-21759 
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		//WDEV-21701
		if(form.getLocalContext().getUndoTriageOutcomeMessage() != null && messageBoxId == form.getLocalContext().getUndoTriageOutcomeMessage().intValue()) 
		{
			if (DialogResult.YES.equals(result))
			{
    			try
    			{
    				domain.undoTriageOutcome(form.getLocalContext().getCurrentCatsReferral(), engine.getFormName());
    			}
    			catch (StaleObjectException e)
    			{
    				e.printStackTrace();
    				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    				
    				form.getGlobalContext().RefMan.setTriageNextPatient(null);
    				engine.close(DialogResult.ABORT);
    				return;
    			}
    			
    			form.getGlobalContext().RefMan.setSecondOpinionReferralStatus(null);
    			
    			engine.close(DialogResult.ABORT);
			}
			else if (DialogResult.NO.equals(result))
			{
				showReferralLetter(form.getLocalContext().getCurrentCatsReferral());
			}
		}
	}

	//WDEV-22464
	@Override
	protected void onBtnViewReferralDocumentsClick() throws PresentationLogicException
	{
		if (form.lyrTriage().tabPageTriage().isVisible())
		{
			form.lyrTriage().tabPageTriage().htmDocument().setHTML("");
		}
		
		form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.getLocalContext().getCurrentCatsReferral().getPatient()));
		engine.open(form.getForms().Core.ViewDocuments,new Object[]{FormMode.EDIT, null,UploadDocumentStoreLevel.REFERRAL,DocumentViewLevel.REFERRAL } );
	}
}
