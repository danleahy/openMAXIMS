//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referraltriage;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTriageLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageTriageContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Triage Outcome", new Integer(2), ""}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 704, 24, 128, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Awaiting Clinical Information", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 530, 24, 128, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reject", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 356, 24, 128, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Redirect", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 182, 24, 128, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Triage Pending Diagnostic Result", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 128, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Accept", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 0, 96, 840, 464, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public Button btnAwaitingClinicalInformation()
			{
				return (Button)super.getControl(1);
			}
			public Button btnReject()
			{
				return (Button)super.getControl(2);
			}
			public Button btnRedirect()
			{
				return (Button)super.getControl(3);
			}
			public Button btnTriagePendingDiagnosticResult()
			{
				return (Button)super.getControl(4);
			}
			public Button btnAccept()
			{
				return (Button)super.getControl(5);
			}
			public HTMLViewer htmDocument()
			{
				return (HTMLViewer)super.getControl(6);
			}
		}
		public static class tabPageTriageAcceptedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 44, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Triage Outcome", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 0, 48, 840, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccAcceptedForm = loader.loadComponent(134268, appForm, startControlID * 10 + 1000, anchoringHelper9.getSize(), instance1, startTabIndex.intValue() + 7, skipContextValidation);
				//ims.framework.Control m_ccAcceptedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), new Integer(48), new Integer(840), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7), m_ccAcceptedForm, instance1 } );
				ims.framework.Control m_ccAcceptedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7), m_ccAcceptedForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAcceptedControl);
				Menu[] menus1 = m_ccAcceptedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 320, 24, 182, 26, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Referral Accepted", new Integer(1), null, new Integer(2)}));
			}

			public ims.RefMan.forms.referraltriageaccepted.IComponent ccAccepted()
			{
				return (ims.RefMan.forms.referraltriageaccepted.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccAcceptedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccAcceptedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccAcceptedVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccAcceptedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccAcceptedEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
		}
		public static class tabPageTriagePendingDiagnosticResultContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Triage Outcome", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 0, 56, 840, 416, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPendingDiagnosticForm = loader.loadComponent(134269, appForm, startControlID * 10 + 2000, anchoringHelper12.getSize(), instance1, startTabIndex.intValue() + 62, skipContextValidation);
				//ims.framework.Control m_ccPendingDiagnosticControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), new Integer(56), new Integer(840), new Integer(416), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 62), m_ccPendingDiagnosticForm, instance1 } );
				ims.framework.Control m_ccPendingDiagnosticControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 62), m_ccPendingDiagnosticForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPendingDiagnosticControl);
				Menu[] menus1 = m_ccPendingDiagnosticForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 480, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 280, 24, 332, 26, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Triage Pending Diagnostic Result", new Integer(1), null, new Integer(2)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 496, 824, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 74), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(5000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			}

			public ims.RefMan.forms.linkeddiagnosticcomponent.IComponent ccPendingDiagnostic()
			{
				return (ims.RefMan.forms.linkeddiagnosticcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccPendingDiagnosticValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccPendingDiagnosticVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccPendingDiagnosticVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccPendingDiagnosticEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccPendingDiagnosticEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public TextBox txtPendingComment()
			{
				return (TextBox)super.getControl(4);
			}
		}
		public static class tabPageRedirectReferralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.RedirectReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.RedirectReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.RedirectReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.RedirectReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.RedirectReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.RedirectReason getValue()
				{
					return (ims.RefMan.vo.lookups.RedirectReason)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.RedirectReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRedirectedServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbRedirectedHcpComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class GroupRedirectRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 416, 64, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "Redirect to HCP", startTabIndex.intValue() + 76);
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 248, 64, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "Redirect to Service", startTabIndex.intValue() + 75);
				}
				public void setText(GroupRedirectEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupRedirectEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupRedirectEnumeration.None;
						case 0: return GroupRedirectEnumeration.rdoRedirectToHcp;
						case 1: return GroupRedirectEnumeration.rdoRedirectToService;
					}
					return null;
				}
				public void setValue(GroupRedirectEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupRedirectEnumeration.None.id);
				}
				public boolean isEnabled(GroupRedirectEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupRedirectEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupRedirectEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupRedirectEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupRedirectEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupRedirectEnumeration None = new GroupRedirectEnumeration(-1);
				public static GroupRedirectEnumeration rdoRedirectToHcp = new GroupRedirectEnumeration(0);
				public static GroupRedirectEnumeration rdoRedirectToService = new GroupRedirectEnumeration(1);
				private GroupRedirectEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupRedirectEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Triage Outcome", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 118, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Redirect to HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 120, 146, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Redirect:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 180, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Redirect Comments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 120, 88, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Redirect to Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 320, 24, 175, 26, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Redirect Referral", new Integer(1), null, new Integer(2)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 120, 198, 584, 184, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 80), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(5000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 248, 144, 456, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 79), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReasonTemp);
				cmbReasonComboBox cmbReason = (cmbReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonComboBox.class, m_cmbReasonTemp);
				super.addComboBox(cmbReason);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 248, 88, 456, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbRedirectedServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 77), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbRedirectedServiceTemp);
				cmbRedirectedServiceComboBox cmbRedirectedService = (cmbRedirectedServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRedirectedServiceComboBox.class, m_cmbRedirectedServiceTemp);
				super.addComboBox(cmbRedirectedService);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 248, 116, 456, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbRedirectedHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 78), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbRedirectedHcpTemp);
				qmbRedirectedHcpComboBox qmbRedirectedHcp = (qmbRedirectedHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbRedirectedHcpComboBox.class, m_qmbRedirectedHcpTemp);
				super.addComboBox(qmbRedirectedHcp);
		
				// RadioButton Controls
				RadioButton tmpGroupRedirect = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupRedirect);
				GroupRedirectRadioButton GroupRedirect = (GroupRedirectRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupRedirectRadioButton.class, tmpGroupRedirect);
				GroupRedirect.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupRedirect);
			}

			public Label lblRedirectToHcp()
			{
				return (Label)super.getControl(1);
			}
			public TextBox txtCommentsBig()
			{
				return (TextBox)super.getControl(6);
			}
			public cmbReasonComboBox cmbReason()
			{
				return (cmbReasonComboBox)super.getComboBox(0);
			}
			public cmbRedirectedServiceComboBox cmbRedirectedService()
			{
				return (cmbRedirectedServiceComboBox)super.getComboBox(1);
			}
			public qmbRedirectedHcpComboBox qmbRedirectedHcp()
			{
				return (qmbRedirectedHcpComboBox)super.getComboBox(2);
			}
			public GroupRedirectRadioButton GroupRedirect()
			{
				return (GroupRedirectRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabPageAwaitingClinicalInformationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Triage Outcome", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 480, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 288, 24, 296, 26, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Awaiting Clinical Information", new Integer(1), null, new Integer(2)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 288, 144, 284, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 81), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Add/View Awaiting Clinical Information", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 496, 824, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 82), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(5000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			}

			public Button btnAwaitingClinicalInfo()
			{
				return (Button)super.getControl(3);
			}
			public TextBox txtAwaitingClinicalComment()
			{
				return (TextBox)super.getControl(4);
			}
		}
		public static class tabPageReferralRejectedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbReasonForRejectionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.RejectionReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.RejectionReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.RejectionReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.RejectionReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.RejectionReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.RejectionReason getValue()
				{
					return (ims.RefMan.vo.lookups.RejectionReason)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.RejectionReason value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupGPContactedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 336, 338, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper33.getX(), anchoringHelper33.getY(), anchoringHelper33.getWidth(), "No", startTabIndex.intValue() + 88);
					RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 280, 338, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper34.getX(), anchoringHelper34.getY(), anchoringHelper34.getWidth(), "Yes", startTabIndex.intValue() + 87);
				}
				public void setText(GroupGPContactedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupGPContactedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupGPContactedEnumeration.None;
						case 0: return GroupGPContactedEnumeration.rdoNoGP;
						case 1: return GroupGPContactedEnumeration.rdoYesGP;
					}
					return null;
				}
				public void setValue(GroupGPContactedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupGPContactedEnumeration.None.id);
				}
				public boolean isEnabled(GroupGPContactedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupGPContactedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupGPContactedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupGPContactedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupGPContactedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupGPContactedEnumeration None = new GroupGPContactedEnumeration(-1);
				public static GroupGPContactedEnumeration rdoNoGP = new GroupGPContactedEnumeration(0);
				public static GroupGPContactedEnumeration rdoYesGP = new GroupGPContactedEnumeration(1);
				private GroupGPContactedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupGPContactedEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupPatientContactedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 336, 314, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper35.getX(), anchoringHelper35.getY(), anchoringHelper35.getWidth(), "No", startTabIndex.intValue() + 86);
					RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 280, 314, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper36.getX(), anchoringHelper36.getY(), anchoringHelper36.getWidth(), "Yes", startTabIndex.intValue() + 85);
				}
				public void setText(GroupPatientContactedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPatientContactedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPatientContactedEnumeration.None;
						case 0: return GroupPatientContactedEnumeration.rdoNoPatient;
						case 1: return GroupPatientContactedEnumeration.rdoYesPatient;
					}
					return null;
				}
				public void setValue(GroupPatientContactedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPatientContactedEnumeration.None.id);
				}
				public boolean isEnabled(GroupPatientContactedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPatientContactedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPatientContactedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPatientContactedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPatientContactedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPatientContactedEnumeration None = new GroupPatientContactedEnumeration(-1);
				public static GroupPatientContactedEnumeration rdoNoPatient = new GroupPatientContactedEnumeration(0);
				public static GroupPatientContactedEnumeration rdoYesPatient = new GroupPatientContactedEnumeration(1);
				private GroupPatientContactedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPatientContactedEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Triage Outcome", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 120, 314, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Contacted:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 120, 338, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "GP Contacted:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 120, 82, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Rejection Comments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 120, 58, 176, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Referral Rejection:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 320, 24, 179, 26, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Referral Rejected", new Integer(1), null, new Integer(2)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 120, 104, 584, 184, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 84), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 296, 56, 408, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbReasonForRejectionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 83), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbReasonForRejectionTemp);
				cmbReasonForRejectionComboBox cmbReasonForRejection = (cmbReasonForRejectionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonForRejectionComboBox.class, m_cmbReasonForRejectionTemp);
				super.addComboBox(cmbReasonForRejection);
		
				// RadioButton Controls
				RadioButton tmpGroupGPContacted = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupGPContacted);
				GroupGPContactedRadioButton GroupGPContacted = (GroupGPContactedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupGPContactedRadioButton.class, tmpGroupGPContacted);
				GroupGPContacted.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupGPContacted);
				RadioButton tmpGroupPatientContacted = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupPatientContacted);
				GroupPatientContactedRadioButton GroupPatientContacted = (GroupPatientContactedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPatientContactedRadioButton.class, tmpGroupPatientContacted);
				GroupPatientContacted.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPatientContacted);
			}

			public TextBox txtRejectedComments()
			{
				return (TextBox)super.getControl(6);
			}
			public cmbReasonForRejectionComboBox cmbReasonForRejection()
			{
				return (cmbReasonForRejectionComboBox)super.getComboBox(0);
			}
			public GroupGPContactedRadioButton GroupGPContacted()
			{
				return (GroupGPContactedRadioButton)super.getRadioButton(0);
			}
			public GroupPatientContactedRadioButton GroupPatientContacted()
			{
				return (GroupPatientContactedRadioButton)super.getRadioButton(1);
			}
		}
		public static class tabPageSecondOpinionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Triage Outcome", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 320, 24, 160, 26, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, "Second Opinion", new Integer(1), null, new Integer(2)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 288, 144, 284, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 89), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Second Opinion", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public Button btnSecondOpinion()
			{
				return (Button)super.getControl(2);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageTriage = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageTriageContainer m_tabPageTriageContainer = (tabPageTriageContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTriageContainer.class, m_tabPageTriage, factory);
			super.addContainer(m_tabPageTriage, m_tabPageTriageContainer);
			ims.framework.utils.SizeInfo m_tabPageTriageDesignSize = new ims.framework.utils.SizeInfo(848, 584);
			ims.framework.utils.SizeInfo m_tabPageTriageRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper48.getWidth(), anchoringHelper48.getHeight());
			m_tabPageTriageContainer.setContext(form, appForm, m_tabPageTriage, loader, form_images_local, startControlID, m_tabPageTriageDesignSize, m_tabPageTriageRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageTriageAccepted = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageTriageAcceptedContainer m_tabPageTriageAcceptedContainer = (tabPageTriageAcceptedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTriageAcceptedContainer.class, m_tabPageTriageAccepted, factory);
			super.addContainer(m_tabPageTriageAccepted, m_tabPageTriageAcceptedContainer);
			ims.framework.utils.SizeInfo m_tabPageTriageAcceptedDesignSize = new ims.framework.utils.SizeInfo(848, 584);
			ims.framework.utils.SizeInfo m_tabPageTriageAcceptedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper49.getWidth(), anchoringHelper49.getHeight());
			m_tabPageTriageAcceptedContainer.setContext(form, appForm, m_tabPageTriageAccepted, loader, form_images_local, startControlID, m_tabPageTriageAcceptedDesignSize, m_tabPageTriageAcceptedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageTriagePendingDiagnosticResult = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageTriagePendingDiagnosticResultContainer m_tabPageTriagePendingDiagnosticResultContainer = (tabPageTriagePendingDiagnosticResultContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTriagePendingDiagnosticResultContainer.class, m_tabPageTriagePendingDiagnosticResult, factory);
			super.addContainer(m_tabPageTriagePendingDiagnosticResult, m_tabPageTriagePendingDiagnosticResultContainer);
			ims.framework.utils.SizeInfo m_tabPageTriagePendingDiagnosticResultDesignSize = new ims.framework.utils.SizeInfo(848, 584);
			ims.framework.utils.SizeInfo m_tabPageTriagePendingDiagnosticResultRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper50.getWidth(), anchoringHelper50.getHeight());
			m_tabPageTriagePendingDiagnosticResultContainer.setContext(form, appForm, m_tabPageTriagePendingDiagnosticResult, loader, form_images_local, startControlID, m_tabPageTriagePendingDiagnosticResultDesignSize, m_tabPageTriagePendingDiagnosticResultRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageRedirectReferral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageRedirectReferralContainer m_tabPageRedirectReferralContainer = (tabPageRedirectReferralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageRedirectReferralContainer.class, m_tabPageRedirectReferral, factory);
			super.addContainer(m_tabPageRedirectReferral, m_tabPageRedirectReferralContainer);
			ims.framework.utils.SizeInfo m_tabPageRedirectReferralDesignSize = new ims.framework.utils.SizeInfo(848, 584);
			ims.framework.utils.SizeInfo m_tabPageRedirectReferralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper51.getWidth(), anchoringHelper51.getHeight());
			m_tabPageRedirectReferralContainer.setContext(form, appForm, m_tabPageRedirectReferral, loader, form_images_local, startControlID, m_tabPageRedirectReferralDesignSize, m_tabPageRedirectReferralRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageAwaitingClinicalInformation = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageAwaitingClinicalInformationContainer m_tabPageAwaitingClinicalInformationContainer = (tabPageAwaitingClinicalInformationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageAwaitingClinicalInformationContainer.class, m_tabPageAwaitingClinicalInformation, factory);
			super.addContainer(m_tabPageAwaitingClinicalInformation, m_tabPageAwaitingClinicalInformationContainer);
			ims.framework.utils.SizeInfo m_tabPageAwaitingClinicalInformationDesignSize = new ims.framework.utils.SizeInfo(848, 584);
			ims.framework.utils.SizeInfo m_tabPageAwaitingClinicalInformationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper52.getWidth(), anchoringHelper52.getHeight());
			m_tabPageAwaitingClinicalInformationContainer.setContext(form, appForm, m_tabPageAwaitingClinicalInformation, loader, form_images_local, startControlID, m_tabPageAwaitingClinicalInformationDesignSize, m_tabPageAwaitingClinicalInformationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageReferralRejected = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageReferralRejectedContainer m_tabPageReferralRejectedContainer = (tabPageReferralRejectedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageReferralRejectedContainer.class, m_tabPageReferralRejected, factory);
			super.addContainer(m_tabPageReferralRejected, m_tabPageReferralRejectedContainer);
			ims.framework.utils.SizeInfo m_tabPageReferralRejectedDesignSize = new ims.framework.utils.SizeInfo(848, 584);
			ims.framework.utils.SizeInfo m_tabPageReferralRejectedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper53.getWidth(), anchoringHelper53.getHeight());
			m_tabPageReferralRejectedContainer.setContext(form, appForm, m_tabPageReferralRejected, loader, form_images_local, startControlID, m_tabPageReferralRejectedDesignSize, m_tabPageReferralRejectedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSecondOpinion = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageSecondOpinionContainer m_tabPageSecondOpinionContainer = (tabPageSecondOpinionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSecondOpinionContainer.class, m_tabPageSecondOpinion, factory);
			super.addContainer(m_tabPageSecondOpinion, m_tabPageSecondOpinionContainer);
			ims.framework.utils.SizeInfo m_tabPageSecondOpinionDesignSize = new ims.framework.utils.SizeInfo(848, 584);
			ims.framework.utils.SizeInfo m_tabPageSecondOpinionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper54.getWidth(), anchoringHelper54.getHeight());
			m_tabPageSecondOpinionContainer.setContext(form, appForm, m_tabPageSecondOpinion, loader, form_images_local, startControlID, m_tabPageSecondOpinionDesignSize, m_tabPageSecondOpinionRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageTriage().setVisible(false);
			tabPageTriageAccepted().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(false);
			tabPageRedirectReferral().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(false);
			tabPageReferralRejected().setVisible(false);
			tabPageSecondOpinion().setVisible(false);
		}
		public void showtabPageTriage()
		{
			tabPageTriageAccepted().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(false);
			tabPageRedirectReferral().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(false);
			tabPageReferralRejected().setVisible(false);
			tabPageSecondOpinion().setVisible(false);
			tabPageTriage().setVisible(true);
		}
		public void showtabPageTriageAccepted()
		{
			tabPageTriage().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(false);
			tabPageRedirectReferral().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(false);
			tabPageReferralRejected().setVisible(false);
			tabPageSecondOpinion().setVisible(false);
			tabPageTriageAccepted().setVisible(true);
		}
		public void showtabPageTriagePendingDiagnosticResult()
		{
			tabPageTriage().setVisible(false);
			tabPageTriageAccepted().setVisible(false);
			tabPageRedirectReferral().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(false);
			tabPageReferralRejected().setVisible(false);
			tabPageSecondOpinion().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(true);
		}
		public void showtabPageRedirectReferral()
		{
			tabPageTriage().setVisible(false);
			tabPageTriageAccepted().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(false);
			tabPageReferralRejected().setVisible(false);
			tabPageSecondOpinion().setVisible(false);
			tabPageRedirectReferral().setVisible(true);
		}
		public void showtabPageAwaitingClinicalInformation()
		{
			tabPageTriage().setVisible(false);
			tabPageTriageAccepted().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(false);
			tabPageRedirectReferral().setVisible(false);
			tabPageReferralRejected().setVisible(false);
			tabPageSecondOpinion().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(true);
		}
		public void showtabPageReferralRejected()
		{
			tabPageTriage().setVisible(false);
			tabPageTriageAccepted().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(false);
			tabPageRedirectReferral().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(false);
			tabPageSecondOpinion().setVisible(false);
			tabPageReferralRejected().setVisible(true);
		}
		public void showtabPageSecondOpinion()
		{
			tabPageTriage().setVisible(false);
			tabPageTriageAccepted().setVisible(false);
			tabPageTriagePendingDiagnosticResult().setVisible(false);
			tabPageRedirectReferral().setVisible(false);
			tabPageAwaitingClinicalInformation().setVisible(false);
			tabPageReferralRejected().setVisible(false);
			tabPageSecondOpinion().setVisible(true);
		}

		public tabPageTriageContainer tabPageTriage()
		{
			return (tabPageTriageContainer)super.layers.get(0);
		}
		public tabPageTriageAcceptedContainer tabPageTriageAccepted()
		{
			return (tabPageTriageAcceptedContainer)super.layers.get(1);
		}
		public tabPageTriagePendingDiagnosticResultContainer tabPageTriagePendingDiagnosticResult()
		{
			return (tabPageTriagePendingDiagnosticResultContainer)super.layers.get(2);
		}
		public tabPageRedirectReferralContainer tabPageRedirectReferral()
		{
			return (tabPageRedirectReferralContainer)super.layers.get(3);
		}
		public tabPageAwaitingClinicalInformationContainer tabPageAwaitingClinicalInformation()
		{
			return (tabPageAwaitingClinicalInformationContainer)super.layers.get(4);
		}
		public tabPageReferralRejectedContainer tabPageReferralRejected()
		{
			return (tabPageReferralRejectedContainer)super.layers.get(5);
		}
		public tabPageSecondOpinionContainer tabPageSecondOpinion()
		{
			return (tabPageSecondOpinionContainer)super.layers.get(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrTriageLayer m_lyrTriageLayer = (lyrTriageLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTriageLayer.class, this, factory);
		super.addLayer(m_lyrTriageLayer);
		m_lyrTriageLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 342, 563, 160, 22, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 90), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "View Referral Documents", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 342, 587, 160, 44, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 93), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Undo Triage Outcome", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 754, 600, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 96), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 173, 587, 166, 44, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 92), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "SAVE - Return to Worklist", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 4, 587, 166, 44, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 91), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "SAVE - Triage Next Patient", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 676, 587, 166, 44, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 95), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "CANCEL - Return to Worklist", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 505, 587, 168, 44, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 94), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "CANCEL - Triage Next Patient", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTriageLayer lyrTriage()
	{
		return (lyrTriageLayer)super.getLayer(0);
	}
	public Button btnViewReferralDocuments()
	{
		return (Button)super.getControl(7);
	}
	public Button btnUndoTriageOutcome()
	{
		return (Button)super.getControl(8);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSaveReturnToList()
	{
		return (Button)super.getControl(10);
	}
	public Button btnSaveTriageNextPatient()
	{
		return (Button)super.getControl(11);
	}
	public Button btnCancelReturnToWorklist()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCancelNextPatient()
	{
		return (Button)super.getControl(13);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				AwaitingClinicalInformationDialog = new LocalFormName(134189);
				SecondOpinionDialog = new LocalFormName(134127);
			}
			public final FormName AwaitingClinicalInformationDialog;
			public final FormName SecondOpinionDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				ViewDocuments = new LocalFormName(102513);
			}
			public final FormName ViewDocuments;
		}

		public RefManForms RefMan;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			RefMan = new RefManImages();
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				AwaitingClinicalInformation = new ImageHelper(134168, "Images/RefMan/AwaitingClinicaInformation.png", new Integer(16), new Integer(16));
				ClinicalInformationReceived = new ImageHelper(134169, "Images/RefMan/ClinicalInformationReceived.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AwaitingClinicalInformation;
			public final ims.framework.utils.Image ClinicalInformationReceived;
		}
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ReferralLetter = new ims.framework.ContextVariable("ReferralLetter", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier + "");
			cxl_CurrentIndex = new ims.framework.ContextVariable("CurrentIndex", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentIndex_" + componentIdentifier + "");
			cxl_CurrentCatsReferral = new ims.framework.ContextVariable("CurrentCatsReferral", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier + "");
			cxl_FirstCatsReferralSelected = new ims.framework.ContextVariable("FirstCatsReferralSelected", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__FirstCatsReferralSelected_" + componentIdentifier + "");
			cxl_FormMode = new ims.framework.ContextVariable("FormMode", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__FormMode_" + componentIdentifier + "");
			cxl_CurrentService = new ims.framework.ContextVariable("CurrentService", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier + "");
			cxl_DeniedMenuActions = new ims.framework.ContextVariable("DeniedMenuActions", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__DeniedMenuActions_" + componentIdentifier + "");
			cxl_UndoTriageOutcomeMessage = new ims.framework.ContextVariable("UndoTriageOutcomeMessage", prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__UndoTriageOutcomeMessage_" + componentIdentifier + "");
		}
		
		public boolean getReferralLetterIsNotNull()
		{
			return !cxl_ReferralLetter.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVo getReferralLetter()
		{
			return (ims.core.vo.PatientDocumentVo)cxl_ReferralLetter.getValue(context);
		}
		public void setReferralLetter(ims.core.vo.PatientDocumentVo value)
		{
			cxl_ReferralLetter.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralLetter = null;
		public boolean getCurrentIndexIsNotNull()
		{
			return !cxl_CurrentIndex.getValueIsNull(context);
		}
		public Integer getCurrentIndex()
		{
			return (Integer)cxl_CurrentIndex.getValue(context);
		}
		public void setCurrentIndex(Integer value)
		{
			cxl_CurrentIndex.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentIndex = null;
		public boolean getCurrentCatsReferralIsNotNull()
		{
			return !cxl_CurrentCatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralForReferralTriageVo getCurrentCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralForReferralTriageVo)cxl_CurrentCatsReferral.getValue(context);
		}
		public void setCurrentCatsReferral(ims.RefMan.vo.CatsReferralForReferralTriageVo value)
		{
			cxl_CurrentCatsReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentCatsReferral = null;
		public boolean getFirstCatsReferralSelectedIsNotNull()
		{
			return !cxl_FirstCatsReferralSelected.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getFirstCatsReferralSelected()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cxl_FirstCatsReferralSelected.getValue(context);
		}
		public void setFirstCatsReferralSelected(ims.RefMan.vo.CatsReferralRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'FirstCatsReferralSelected' RefVo context variable.");
			if(value == null)
				cxl_FirstCatsReferralSelected.setValue(context, null);
			else
				cxl_FirstCatsReferralSelected.setValue(context, new ims.RefMan.vo.CatsReferralRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_FirstCatsReferralSelected = null;
		public boolean getFormModeIsNotNull()
		{
			return !cxl_FormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getFormMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_FormMode.getValue(context);
		}
		public void setFormMode(ims.framework.enumerations.FormMode value)
		{
			cxl_FormMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FormMode = null;
		public boolean getCurrentServiceIsNotNull()
		{
			return !cxl_CurrentService.getValueIsNull(context);
		}
		public ims.core.vo.ServiceLiteVo getCurrentService()
		{
			return (ims.core.vo.ServiceLiteVo)cxl_CurrentService.getValue(context);
		}
		public void setCurrentService(ims.core.vo.ServiceLiteVo value)
		{
			cxl_CurrentService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentService = null;
		public boolean getDeniedMenuActionsIsNotNull()
		{
			return !cxl_DeniedMenuActions.getValueIsNull(context);
		}
		public ims.admin.vo.MenuActionVoCollection getDeniedMenuActions()
		{
			return (ims.admin.vo.MenuActionVoCollection)cxl_DeniedMenuActions.getValue(context);
		}
		public void setDeniedMenuActions(ims.admin.vo.MenuActionVoCollection value)
		{
			cxl_DeniedMenuActions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeniedMenuActions = null;
		public boolean getUndoTriageOutcomeMessageIsNotNull()
		{
			return !cxl_UndoTriageOutcomeMessage.getValueIsNull(context);
		}
		public Integer getUndoTriageOutcomeMessage()
		{
			return (Integer)cxl_UndoTriageOutcomeMessage.getValue(context);
		}
		public void setUndoTriageOutcomeMessage(Integer value)
		{
			cxl_UndoTriageOutcomeMessage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoTriageOutcomeMessage = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[211];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-ID", "ID_CATSReferralStatus");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-REFERRALSTATUS", "ReferralStatus");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-STATUSDATETIME", "StatusDateTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-AUTHORINGUSER", "AuthoringUser");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-COMMENT", "Comment");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-SECONDOPINIONCATEGORY", "SecondOpinionCategory");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.AwaitingClinicalInfo", "BO-1096100044-ID", "ID_AwaitingClinicalInfo");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.AwaitingClinicalInfo", "BO-1096100044-OTHERCLINICALINFORMATION", "OtherClinicalInformation");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.AwaitingClinicalInfo", "BO-1096100044-DATEAWAITINGCLINICALINFO", "DateAwaitingClinicalInfo");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.AwaitingClinicalInfo", "BO-1096100044-DATECLINICALINFORECEIVED", "DateClinicalInfoReceived");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-ID", "ID_PatientDocument");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-PATIENT", "Patient");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-EPISODEOFCARE", "EpisodeofCare");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-CARECONTEXT", "CareContext");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-CLINICALCONTACT", "ClinicalContact");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-REFERRAL", "Referral");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-NAME", "Name");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-CREATIONTYPE", "CreationType");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-CATEGORY", "Category");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-STATUS", "Status");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-RECORDINGUSER", "RecordingUser");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-RECORDINGDATETIME", "RecordingDateTime");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-AUTHORINGHCP", "AuthoringHCP");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-SPECIALTY", "Specialty");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-CORRESPONDENCESTATUS", "CorrespondenceStatus");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-CLINIC", "Clinic");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-ISLOCKEDFOREDITING", "IsLockedForEditing");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-LOCKEDBYUSER", "LockedByUser");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-LOCKEDONDATETIME", "LockedOnDateTime");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-HISTORICALFILENAME", "HistoricalFileName");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-HISTORICDOCID", "HistoricDocId");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__ReferralLetter_" + componentIdentifier, "BO-1068100001-HASENCLOSURE", "HasEnclosure");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-PATIENT", "Patient");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-URGENCY", "Urgency");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CONSULTATIONACTIVITYREQUIRED", "ConsultationActivityRequired");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CONTRACT", "Contract");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CHANGECBAPPOINTMENT", "ChangeCBAppointment");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-REDIRECTCAB", "RedirectCAB");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CHANGECABOPAANDDIRECTTOLIST", "ChangeCABOPAandDirectToList");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CABOPAANDDIRECTTOLIST", "CABOPAandDirectToList");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__FirstCatsReferralSelected_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriage.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
