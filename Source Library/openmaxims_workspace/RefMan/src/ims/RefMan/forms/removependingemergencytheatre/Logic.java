//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.removependingemergencytheatre;

import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.enums.MosType;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.PendingEmergencyTheatreRemovalVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}

	private void initialise()
	{
		form.dtimRemoval().setValue(new DateTime());
		
		form.ccRemovalBy().initialize(MosType.ALL);
		form.ccRemovalBy().isRequired(Boolean.TRUE);
		form.ccRemovalBy().setValue((MemberOfStaffLiteVo)domain.getMosUser());
		
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if ( !validateUIRules() )
			return;
		
		form.getGlobalContext().Scheduling.setPendingEmergencyTheatreRemoval(populateDateFromScreen());
		
		engine.close(DialogResult.OK);
	}
	
	private PendingEmergencyTheatreRemovalVo populateDateFromScreen()
	{
		PendingEmergencyTheatreRemovalVo record = new PendingEmergencyTheatreRemovalVo();
		
		record.setRemovalDateTime(form.dtimRemoval().getValue());
		record.setRemovalReason(form.cmbRemovalReason().getValue());
		record.setRemovalBy((MemberOfStaffLiteVo) form.ccRemovalBy().getValue());
		
		return record;
	}

	private boolean validateUIRules()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.dtimRemoval().getValue() == null)
		{
			listOfErrors.add("Removal Date Time is mandatory");
		}
		
		if (form.dtimRemoval().getValue() != null && form.dtimRemoval().getValue().getDate().isGreaterThan(new Date()))
		{
			listOfErrors.add("Removal Date cannot be in the future");
		}
		
		if (form.cmbRemovalReason().getValue() == null)
		{
			listOfErrors.add("Removal Reason is mandatory");
		}

		if (form.ccRemovalBy().getValue() == null)
		{
			listOfErrors.add("Removal By is mandatory");
		}
		
		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}
}
