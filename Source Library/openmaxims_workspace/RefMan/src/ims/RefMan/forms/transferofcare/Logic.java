//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5527.24259)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

//This is a copy of original form [RefMan.CatsReferralRequestServiceDlg, ID: 134266]. I've made this because CatsReferralRequestServiceDlg was used for RequestForService and for Transfer Of Care. 
//So because Request for service was modified so the user can add mutiple Requests For Service, i've copied the old form and tis form is used to save Transfer Of Care 

package ims.RefMan.forms.transferofcare;

import ims.RefMan.vo.CareContextForRequestServiceShortVo;
import ims.RefMan.vo.CareContextForRequestServiceShortVoCollection;
import ims.RefMan.vo.CareSpellForRequestServiceShortVo;
import ims.RefMan.vo.CatsReferralForRequestServiceVo;
import ims.RefMan.vo.CatsReferralMasterVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo;
import ims.RefMan.vo.EpisodeOfCareForRequestServiceShortVo;
import ims.RefMan.vo.EpisodeOfCareForRequestServiceShortVoCollection;
import ims.RefMan.vo.enums.ReferralAppointmentOutcomeAction;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.clinical.vo.ReferralLeterDetailsForCatsRefVo;
import ims.core.admin.vo.EpisodeOfCareStatusHistoryRefVoCollection;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.EpisodeOfCareStatusHistoryVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.ReferralSourceUrgencyVo;
import ims.core.vo.ReferralSourceUrgencyVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.CareSpelltoEpisodeRelationship;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.EpisodeOfCareStatus;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.framework.CustomEvent;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.BookingAppointmentOutcomeVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer End18WW = 18;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if( args != null && args.length == 4 &&  args[0] instanceof CatsReferralRefVo && args[1] instanceof Boolean  && args[3] instanceof  ims.RefMan.vo.enums.ReferralAppointmentOutcomeAction)
		{
			form.getLocalContext().setParentCatsReferral(domain.getParentCatsReferrall((CatsReferralRefVo) args[0]));
			form.getLocalContext().setAction((ReferralAppointmentOutcomeAction) args[3]);	//wdev-19933

			if( Boolean.TRUE.equals(args[1]))
				form.setMode(FormMode.VIEW);
			else
				form.setMode(FormMode.EDIT);
			
			if( form.getLocalContext().getParentCatsReferralIsNotNull() && form.getLocalContext().getParentCatsReferral().getReferralDetailsIsNotNull())
			{
				form.getLocalContext().setParentService(form.getLocalContext().getParentCatsReferral().getReferralDetails().getService());
			}
			
			if( args[2] instanceof BookingAppointmentOutcomeVo) //wdev-19933
				form.getLocalContext().setAppointmentOutcome((BookingAppointmentOutcomeVo) args[2]);
			

		}
		initialise();
		open();
	}
	
	private void open()
	{
		populateScreenFromData();
	}
	private void populateScreenFromData()
	{
		if( form.getGlobalContext().RefMan.getChildCatsReferralIsNotNull())
		{
			CatsReferralForRequestServiceVo tempVo = form.getGlobalContext().RefMan.getChildCatsReferral();
			if( !form.cmbUrgency().getValues().contains(tempVo.getUrgency()))
			{
				if( tempVo.getUrgencyIsNotNull())
				{
					form.cmbUrgency().newRow(tempVo.getUrgency(), tempVo.getUrgency().getText());
					form.cmbUrgency().setValue(tempVo.getUrgency());
				}
			}
			else
				form.cmbUrgency().setValue(tempVo.getUrgency());
			
			if (tempVo.getReferralDetailsIsNotNull()) //WDEV-22782
			{
				//WDEV-20826
				if (tempVo.getReferralDetails().getService() != null)
				{
					//WDEV-22950
					form.qmbService().newRow(tempVo.getReferralDetails().getService(), tempVo.getReferralDetails().getService().getServiceName());
					form.qmbService().setValue(tempVo.getReferralDetails().getService());
					
					form.ccResponsibleConsultant().initializeResponsibleHcp(MosType.HCP, true, tempVo.getReferralDetails().getService(),null); //WDEV-21592				
				}					
				//WDEV-20826 ends here //WDEV-22782 - end
				
				form.ccResponsibleConsultant().setValue(tempVo.getReferralDetails().getConsultant());
				form.ccReferredByHcp().setValue(tempVo.getReferralDetails().getReferringConsultant());
			}
		}
		else
		{
			HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
			if( tempVo instanceof HcpLiteVo)
			{
				
				form.ccReferredByHcp().setValue(tempVo);
			}			
			HcpLiteVo slotResponsible = domain.getAppointmentSlotResponsable(form.getLocalContext().getAppointmentOutcome());
			if (slotResponsible != null)
				form.ccResponsibleConsultant().setValue(slotResponsible);
		}
	}
	private void initialise()
	{
		//form.ccResponsibleConsultant().initializeConsultantResponsibleHcp(MosType.MEDIC, MedicGrade.CONS, null);
		form.ccReferredByHcp().initializeResponsibleHcp(MosType.HCP, true);
		form.ccResponsibleConsultant().initializeResponsibleHcp(MosType.HCP, true); //WDEV-22782
		
		populateServiceQueryCombo("", false); //WDEV-22950
		
		populateUrgencyCombo();	//wdev-19933
	}
	//wdev-19933
	private void populateUrgencyCombo()
	{
		form.cmbUrgency().clear();
		if( form.getLocalContext().getAction() != null )	//wdev-19933
		{
			ims.core.vo.lookups.SourceOfReferral sourceofreferral = null;
			if( ReferralAppointmentOutcomeAction.REQUEST_FOR_SERVICE.equals(form.getLocalContext().getAction()))
				sourceofreferral = SourceOfReferral.REQUEST_FOR_SERVICE;
			else if( ReferralAppointmentOutcomeAction.TRANSFER_OF_CARE.equals(form.getLocalContext().getAction())) 
				sourceofreferral = SourceOfReferral.TRANSFER_OF_CARE;

			if( sourceofreferral != null)
			{
				if(!SourceOfReferral.TRANSFER_OF_CARE.equals(sourceofreferral))
				{
					ReferralSourceUrgencyVo tempSourceVo = getSourceReferralUrgencyVo(sourceofreferral, domain.getSourceOfReferralConfigVoColl());
					if( tempSourceVo != null)
					{

						if( tempSourceVo.getUrgencyIsNotNull() && tempSourceVo.getUrgency().size() > 0)
						{
							for(int h = 0;h < tempSourceVo.getUrgency().size();h++ )
							{
								form.cmbUrgency().newRow(tempSourceVo.getUrgency().get(h), tempSourceVo.getUrgency().get(h).getText());
							}
						}
					}
				}
				//WDEV-20797
				
				else
				{
					if (form.getLocalContext().getParentCatsReferral().getUrgency() != null)
					{
						form.cmbUrgency().newRow(form.getLocalContext().getParentCatsReferral().getUrgency(), form.getLocalContext().getParentCatsReferral().getUrgency().getText());
						form.cmbUrgency().setValue(form.getLocalContext().getParentCatsReferral().getUrgency());
					}
				}
				//WDEV-20797 ends here
				
			}
		}
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-20797
		if (!validateUIErrors())
			return;
		//WDEV-20797 ends here
		
		
		// Create Episode of Care and Care Context for new referral
		CareSpellForRequestServiceShortVo careSpell = domain.getCareSpellForReferral(form.getLocalContext().getParentCatsReferral());
		EpisodeOfCareForRequestServiceShortVo episodeOfCare = createEpisodeOfCare(careSpell, new DateTime(), (HcpLiteVo) form.ccResponsibleConsultant().getValue(), form.qmbService().getValue().getSpecialty()); //WDEV-22950
		CareContextForRequestServiceShortVo careContext = createCareContext(episodeOfCare, ContextType.REFERRAL, new DateTime(), (HcpLiteVo) form.ccResponsibleConsultant().getValue());
		
		CatsReferralForRequestServiceVo tempVo = populateDataFromScreen(careContext);
		tempVo.setEpisodeOfCare(episodeOfCare);
		
		//wdev-20946
		if(tempVo.getID_CatsReferral() == null && !Boolean.TRUE.equals(tempVo.getIsEmergencyReferral()) )		//new referral and elective (not emergency) 
		{
			if(  tempVo.getReferralDetailsIsNotNull() && tempVo.getReferralDetails().getServiceIsNotNull() && !Boolean.TRUE.equals(tempVo.getReferralDetails().getService().getIsSubjectToRTTClock()))		//Non_RTT
			{
				tempVo.setIsEmergencyReferral(Boolean.FALSE);
				tempVo.setRTTClockImpact(Boolean.FALSE);
			}
			tempVo.getReferralDetails().setEndDateEmailKPI(null);
			tempVo.getReferralDetails().setEndDatePaperKPI(null);
			tempVo.getReferralDetails().setEndDateKPI(domain.getEndDateKPI(tempVo));			
		}
		if (Boolean.TRUE.equals(tempVo.getIsEmergencyReferral())) //WDEV-21176
		{
			tempVo.setIsEmergencyReferral(Boolean.TRUE);
			tempVo.setRTTClockImpact(Boolean.FALSE);
			
			tempVo.getReferralDetails().setEndDateEmailKPI(null);
			tempVo.getReferralDetails().setEndDatePaperKPI(null);
			tempVo.getReferralDetails().setEndDateKPI(null);
			tempVo.getReferralDetails().setEnd18WW(null);
		}
		
		String[] errors = tempVo.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}
			
		form.getGlobalContext().RefMan.setChildCatsReferral(tempVo);
		engine.close(DialogResult.OK);
	}
	
	
	
	private CatsReferralForRequestServiceVo populateDataFromScreen(CareContextForRequestServiceShortVo careContext)
	{
		BookingAppointmentOutcomeVo temApptVo = form.getLocalContext().getAppointmentOutcome();
		CatsReferralMasterVo parentVo = form.getLocalContext().getParentCatsReferral();
		CatsReferralForRequestServiceVo tempVo = form.getGlobalContext().RefMan.getChildCatsReferral();
		if (tempVo == null)
		{
			tempVo = new CatsReferralForRequestServiceVo();
			tempVo.setCareContext(careContext);
		}
		
		if( parentVo != null )
			tempVo.setPatient(parentVo.getPatient());
		
		if( !tempVo.getReferralDetailsIsNotNull())
			tempVo.setReferralDetails(new ReferralLeterDetailsForCatsRefVo());
		
		if( ReferralAppointmentOutcomeAction.REQUEST_FOR_SERVICE.equals(form.getLocalContext().getAction()))	//wdev-19933
			tempVo.getReferralDetails().setReferrerType(SourceOfReferral.REQUEST_FOR_SERVICE);
		else if(ReferralAppointmentOutcomeAction.TRANSFER_OF_CARE.equals(form.getLocalContext().getAction()))
			tempVo.getReferralDetails().setReferrerType(SourceOfReferral.TRANSFER_OF_CARE);
		
		tempVo.getReferralDetails().setService(form.qmbService().getValue()); //WDEV-22950
		tempVo.getReferralDetails().setConsultant((HcpLiteVo) form.ccResponsibleConsultant().getValue());
		tempVo.getReferralDetails().setAuthoringDateTime(new DateTime());
		tempVo.getReferralDetails().setDateOfReferral(new Date());
		
		tempVo.setUrgency(form.cmbUrgency().getValue());
		
		if (parentVo != null)
		{
			if (parentVo.getReferralDetailsIsNotNull())
			{
    			tempVo.getReferralDetails().setPCT(parentVo.getReferralDetails().getPCT());
    			tempVo.getReferralDetails().setOriginalDateOfReferral(parentVo.getReferralDetails().getDateOfReferral());
			}

			tempVo.setContract(parentVo.getContract());
		}
		//if( temApptVo != null && temApptVo.getSessionSlotIsNotNull() && temApptVo.getSessionSlot().getSlotRespIsNotNull() )
		//{
		//	tempVo.getReferralDetails().setReferringConsultant(temApptVo.getSessionSlot().getSlotResp().getHcp());
		//}
		tempVo.getReferralDetails().setReferringConsultant((HcpLiteVo) form.ccReferredByHcp().getValue());
		CatsReferralStatusVo tempStatusVo = new CatsReferralStatusVo();
		
		tempStatusVo.setReferralStatus(ReferralApptStatus.REFERRAL_RECEIVED);
		
		tempStatusVo.setStatusDateTime(new DateTime());
		tempVo.setCurrentStatus(tempStatusVo);
		
		CatsReferralStatusVoCollection histColl = tempVo.getStatusHistory();
		
		if( histColl == null)
			histColl = new CatsReferralStatusVoCollection();
		
		histColl.add(tempStatusVo);
		tempVo.setStatusHistory(histColl);
		
		tempVo.getReferralDetails().setEnd18WW(parentVo.getReferralDetails() != null ? parentVo.getReferralDetails().getEnd18WW() : null);
		
		/*if( tempVo.getContractIsNotNull() )
		{
			//WDEV-22950
			Integer daysToRttBreachDate=getDaysToRttBreachDateByService( tempVo.getContract(),form.qmbService().getValue());
			boolean serviceIsSubjectToRTT = form.qmbService().getValue() != null && Boolean.TRUE.equals(form.qmbService().getValue().getIsSubjectToRTTClock());
			
			if( tempVo.getReferralDetails().getDateOfReferral() != null && daysToRttBreachDate!=null)
			{
				tempVo.getReferralDetails().setEnd18WW( tempVo.getReferralDetails().getDateOfReferral().copy().addDay(daysToRttBreachDate));
			}
			else if (tempVo.getReferralDetails().getDateOfReferral() != null && tempVo.getContract().getDaysToRTTBreachDateIsNotNull() && serviceIsSubjectToRTT)
			{
				tempVo.getReferralDetails().setEnd18WW(tempVo.getReferralDetails().getDateOfReferral().copy().addDay(tempVo.getContract().getDaysToRTTBreachDate()));
			}
		}
		else
		{
			Date tempDate = new Date();
			tempVo.getReferralDetails().setEnd18WW( tempDate.addDay(End18WW * 7));
		}*/
		
		return tempVo;
	}
	
	
	private Integer getDaysToRttBreachDateByService(ContractConfigForReferralDetailsComponentVo contract, ServiceLiteVo service)
	{
		if (contract==null || service==null)
			return null;
		
		for (int i=0;contract.getServiceLocations()!=null && i<contract.getServiceLocations().size();i++)
		{
			if (contract.getServiceLocations().get(i)!=null && service.equals(contract.getServiceLocations().get(i).getService()))
				return contract.getServiceLocations().get(i).getDaysToRTTBreachDate();
		}
		
		return null;
	}

	//WDEV-20797
	private boolean validateUIErrors()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		if( form.qmbService().getValue() == null ) //WDEV-22950
		{
			errorList.add("Service is mandatory.");
		}
		
		if( form.cmbUrgency().getValue() == null )
		{
			errorList.add("Urgency is mandatory.");
		}
		
		if (errorList.size() > 0)
		{
			engine.showErrors(errorList.toArray(new String[errorList.size()]));
			return false;
		}
		return true;
	}
	//WDEV-20797 ends here
	
	protected void onFormModeChanged()
	{
		updateControlsState();
	
	}
	
	private void updateControlsState()
	{
		boolean isRecordSaved = form.getGlobalContext().RefMan.getChildCatsReferral() != null && form.getGlobalContext().RefMan.getChildCatsReferral().getID_CatsReferral() != null;
		
		//WDEV-22950
		form.qmbService().setEnabled(form.getMode().equals(FormMode.EDIT) && !isRecordSaved); 
		form.ccResponsibleConsultant().setEnabled(form.getMode().equals(FormMode.EDIT) && form.qmbService().getValue()!=null); //WDEV-21592
		form.ccReferredByHcp().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.cmbUrgency().setEnabled(form.getMode().equals(FormMode.EDIT) && !isRecordSaved && !ReferralAppointmentOutcomeAction.TRANSFER_OF_CARE.equals(form.getLocalContext().getAction())); //WDEV-20797
		form.btnCancel().setText(form.getMode().equals(FormMode.EDIT)? "Cancel":"Close");
		form.btnSave().setVisible(FormMode.EDIT.equals(form.getMode()));//WDEV-20677

		boolean openedFromAppointmentOutcome = form.getForms().Scheduling.AppointmentOutcomeDialog.equals(engine.getPreviosFormName());
		form.btnRemove().setVisible(FormMode.EDIT.equals(form.getMode()) && openedFromAppointmentOutcome && form.getGlobalContext().RefMan.getChildCatsReferral() != null);
	}
	
	protected void onCustomEvent(CustomEvent event) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CONFIRM);
	}
	
	//wdev-19933
	private ReferralSourceUrgencyVo getSourceReferralUrgencyVo(ims.core.vo.lookups.SourceOfReferral sourceLkp, ReferralSourceUrgencyVoCollection  sourceColl)
	{
		if( sourceLkp != null && sourceColl != null && sourceColl.size() > 0)
		{
			for(int i = 0; i < sourceColl.size();i++)
			{
				ReferralSourceUrgencyVo tempVo = sourceColl.get(i); 
				if( tempVo != null && sourceLkp!= null && sourceLkp.equals(tempVo.getSourceOfReferral()))
					return tempVo;
			}
		}
		
		return null;
	}


	private EpisodeOfCareForRequestServiceShortVo createEpisodeOfCare(CareSpellForRequestServiceShortVo careSpell, DateTime startDateTime, HcpRefVo responsibleHCP, Specialty specialty)
	{
		EpisodeOfCareForRequestServiceShortVo episodeOfCare = new EpisodeOfCareForRequestServiceShortVo();
		
		episodeOfCare.setStartDate(startDateTime.getDate());

		episodeOfCare.setCareSpell(careSpell);
		episodeOfCare.setRelationship(CareSpelltoEpisodeRelationship.PRIMARY);

		episodeOfCare.setSpecialty(specialty);
		episodeOfCare.setResponsibleHCP(responsibleHCP);		
		
		EpisodeOfCareStatusHistoryVo firstStatus = new EpisodeOfCareStatusHistoryVo();
		firstStatus.setStatus(EpisodeOfCareStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		episodeOfCare.setCurrentStatus(firstStatus);
		episodeOfCare.setStatusHistory(new EpisodeOfCareStatusHistoryRefVoCollection());
		episodeOfCare.getStatusHistory().add(firstStatus);
		
		if (careSpell.getEpisodes() == null) careSpell.setEpisodes(new EpisodeOfCareForRequestServiceShortVoCollection());
		careSpell.getEpisodes().add(episodeOfCare);
		
		return episodeOfCare;
	}
	
	
	private CareContextForRequestServiceShortVo createCareContext(EpisodeOfCareForRequestServiceShortVo episodeOfCare, ContextType contextType, DateTime startDateTime, HcpRefVo responsibleHCP)
	{
		CareContextForRequestServiceShortVo careContext = new CareContextForRequestServiceShortVo();
		
		careContext.setContext(contextType);
		
		careContext.setStartDateTime(startDateTime);
		careContext.setEndDateTime(null);
		careContext.setEpisodeOfCare(episodeOfCare);
		
		CareContextStatusHistoryVo firstStatus = new CareContextStatusHistoryVo();
		firstStatus.setStatus(CareContextStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
//		careContext.setCurrentStatus(firstStatus);
//		careContext.setStatusHistory(new CareContextStatusHistoryVoCollection());
//		careContext.getStatusHistory().add(firstStatus);
		
		if (episodeOfCare.getCareContexts() == null) episodeOfCare.setCareContexts(new CareContextForRequestServiceShortVoCollection());
		episodeOfCare.getCareContexts().add(careContext);
		
		return careContext;
	}

	//WDEV-22950
	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		qmbServiceValueChanged();
		
	}

	//WDEV-22950
	private void qmbServiceValueChanged()
	{
		form.ccResponsibleConsultant().setValue(null);
		form.ccResponsibleConsultant().clear();
		form.ccResponsibleConsultant().initializeResponsibleHcp(MosType.HCP, true); //WDEV-22782
		if (form.qmbService().getValue() != null)
		{
			form.ccResponsibleConsultant().initializeResponsibleHcp(MosType.HCP, true, form.qmbService().getValue(),null); //WDEV-21592
		}
		updateControlsState();
	}

	//WDEV-22950
	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateServiceQueryCombo(value, true);
	}

	//WDEV-22950
	private void populateServiceQueryCombo(String value, Boolean showOpen)
	{
		form.qmbService().clear();
		
		ServiceLiteVoCollection services = null;
		
		if( form.getLocalContext().getParentCatsReferralIsNotNull() )
			services = domain.getReferralService(form.getLocalContext().getParentCatsReferral().getContract(), value);
		else
		{
			CatsReferralMasterVo  tempVoPar = domain.getParentCatsReferrall(form.getGlobalContext().RefMan.getCatsReferral());
			if( tempVoPar != null )
			{
				services = domain.getReferralService(tempVoPar.getContract(), value);
				form.getLocalContext().setParentCatsReferral(tempVoPar);
			}
		}
		
		if( services != null && services.size() > 0)
		{
			for( ServiceLiteVo service : services)
			{
				if( form.getLocalContext().getParentCatsReferralIsNotNull() && form.getLocalContext().getParentCatsReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getParentCatsReferral().getReferralDetails().getServiceIsNotNull() && form.getLocalContext().getParentCatsReferral().getReferralDetails().getService().equals(service))
					continue;
				form.qmbService().newRow(service, service.getServiceName());
			}
		}
		
		if (form.qmbService().getValues().size() == 1)
		{
			form.qmbService().setValue((ServiceLiteVo)form.qmbService().getValues().get(0));
			qmbServiceValueChanged();
		}
		else if (showOpen)
		{
			form.qmbService().showOpened();
		}
	}
}
