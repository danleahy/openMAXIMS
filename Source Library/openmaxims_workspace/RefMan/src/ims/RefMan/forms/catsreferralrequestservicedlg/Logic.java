//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.catsreferralrequestservicedlg;

import ims.admin.vo.enums.CommitMode;
import ims.RefMan.forms.catsreferralrequestservicedlg.GenForm.grdReqForServiceRow;
import ims.RefMan.vo.CareContextForRequestServiceShortVo;
import ims.RefMan.vo.CareContextForRequestServiceShortVoCollection;
import ims.RefMan.vo.CareSpellForRequestServiceShortVo;
import ims.RefMan.vo.CatsReferralForRequestServiceVo;
import ims.RefMan.vo.CatsReferralMasterVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo;
import ims.RefMan.vo.EpisodeOfCareForRequestServiceShortVo;
import ims.RefMan.vo.EpisodeOfCareForRequestServiceShortVoCollection;
import ims.RefMan.vo.LinkedCatsReferralForOutcomeVo;
import ims.RefMan.vo.LinkedCatsReferralForOutcomeVoCollection;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralRelationType;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.clinical.vo.ReferralLeterDetailsForCatsRefVo;
import ims.core.admin.vo.EpisodeOfCareStatusHistoryRefVoCollection;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.EpisodeOfCareStatusHistoryVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PersonName;
import ims.core.vo.ReferralSourceUrgencyVo;
import ims.core.vo.ReferralSourceUrgencyVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.CareSpelltoEpisodeRelationship;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.EpisodeOfCareStatus;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Booking_AppointmentRefVo;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer End18WW = 18;
	
	//WDEV-21195
	private static final int COL_RESP_HCP = 3;  
	private static final int COL_REFERRED_BY_HCP = 4;
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Analyze the arguments passed

		// 1 - First parameter should be the parent Cats Referral for service requests
		if (args != null && args.length > 0 && args[0] instanceof CatsReferralRefVo)
		{
			// Get detailed record for parent CatsReferral
			form.getLocalContext().setParentCatsReferral(domain.getParentCatsReferrall((CatsReferralRefVo) args[0]));
			
			// Get the service for the parent CatsReferral
			form.getLocalContext().setParrentReferralService(domain.getServiceForReferral(form.getLocalContext().getParentCatsReferral()));
		}
		
		// 2 - Second parameter should be the Appointment record (this parameter can be null)
		if (args != null && args.length > 1 && args[1] instanceof Booking_AppointmentRefVo)
		{
			form.getLocalContext().setAppointmentOutcome((Booking_AppointmentRefVo) args[1]);
		}
		
		// 3 - Third parameter should be the mode the dialog commits it's data
		// Default behaviour is to commit to database (This parameter can be null in which case the default behaviour is applied)
		form.getLocalContext().setCommitMode(CommitMode.COMMIT_TO_DATABASE);
		if (args != null && args.length > 2 && args[2] instanceof CommitMode)
		{
			form.getLocalContext().setCommitMode((CommitMode) args[2]);
		}
		
		// 4 - Fourth parameter should be the indicator if the form is to be in Read Only mode
		// Default behaviour - form is Read Write (This parameter can be null in which case the default behaviour is applied)
		form.getLocalContext().setReadOnlyMode(Boolean.FALSE);
		if (args != null && args.length > 3 && args[3] instanceof Boolean)
		{
			form.getLocalContext().setReadOnlyMode(Boolean.TRUE.equals(args[3]));
		}
		
		//WDEV-22786
		if (CommitMode.COMMIT_TO_DATABASE.equals(form.getLocalContext().getCommitMode()))
			form.getGlobalContext().RefMan.setReferralServiceRequests(null);
		
		// Initialize the form
		initialise();
		
		// Present the form
		open(true, form.getLocalContext().getCommitMode());
	}
	

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
		
	}
	
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// RIE Reason Dialog
		if (form.getForms().Core.RieConfirmationDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if (performMarkAsRIE(form.getLocalContext().getSelectedRecord(), form.getGlobalContext().Core.getRieMessage()))
				open(false, form.getLocalContext().getCommitMode());
		}
	}


	@Override
	protected void onBtnNewClick() throws PresentationLogicException  
	{
		// Prepare screen for recording a new instance
		newInstance();
	}

	
	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		// Prepare screen to edit currently selected instance
		updateInstance();
	}
	

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		// If the save() function was successful then present the screen to user
		if (save(form.getLocalContext().getCommitMode()))
		{
			open(false, form.getLocalContext().getCommitMode());
		}
		
		
		// TODO: Analyze this code and remove it
//		if (CommitMode.COMMIT_TO_DATABASE.equals(form.getLocalContext().getCommitMode()))
//		{
//			if (save(form.getLocalContext().getCommitMode()))
//			{
//				open();
//			}
//		}
//		else if (CommitMode.COMMIT_TO_GLOBAL_CONTEXT.equals(form.getLocalContext().getCommitMode()))
//		{
//			if (save(form.getLocalContext().getCommitMode()))
//			{
//				if (form.grdReqForService().getValue()!=null)
//				{
//					updateRow(form.grdReqForService().getSelectedRow(),form.getLocalContext().getSelectedRecord());
//				}
//				else
//				{
//					addRow(form.getLocalContext().getSelectedRecord());
//				}
//				form.grdReqForService().setValue(form.getLocalContext().getSelectedRecord());
//				form.setMode(FormMode.VIEW);
//			}
//		}
	}
	

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException //WDEV-21195
	{
		// Present the screen to user
		open(false, form.getLocalContext().getCommitMode());
		
		// TODO: Analyze this code and remove it
//		if (Boolean.TRUE.equals(form.getLocalContext().getCommitMode()))
//		{
//			open();
//		}
//		else if (Boolean.FALSE.equals(form.getLocalContext().getCommitMode()))
//		{
//			if (form.grdReqForService().getValue()!=null)
//			{
//				populateInstanceControls(form.grdReqForService().getValue());
//			}
//			else
//			{
//				clearInstanceContols();
//			}
//			form.setMode(FormMode.VIEW);
//		}
	}
	
	
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		// Commit to global context if the form is set to Commit to Global Context
		if (CommitMode.COMMIT_TO_GLOBAL_CONTEXT.equals(form.getLocalContext().getCommitMode()))
		{
			commitToGlobalContext();
		}

		engine.close(DialogResult.OK);
	}


	@Override
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		boolean selectedRecordSaved = form.getLocalContext().getSelectedRecord() != null && form.getLocalContext().getSelectedRecord().getID_LinkedCatsReferral() != null;
		
		if (selectedRecordSaved)
		{
			engine.open(form.getForms().Core.RieConfirmationDialog);
		}
		else
		{
			performMarkAsRIE(form.getLocalContext().getSelectedRecord(), null);
			//WDEV-21195
			clearInstanceContols();
			updateControlsState();
		}
	}


	@Override
	protected void onGrdReqForServiceSelectionChanged() throws PresentationLogicException
	{
		// Update selection in local context
		form.getLocalContext().setSelectedRecord(form.grdReqForService().getValue());
		// Present selected record to user
		populateInstanceControlsFromData(form.getLocalContext().getSelectedRecord());
		
		// Update controls state
		updateControlsState();
	} 




	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 *	Initialize the form
	 */
	private void initialise()
	{
		// Initialize form components
		form.ccReferredByHcp().initializeResponsibleHcp(MosType.HCP, true);
		form.ccResponsibleConsultant().initializeResponsibleHcp(MosType.HCP, true); //WDEV-22786
		// Populate services
		populateServices();
		
		// Populate urgency
		populateUrgencyCombo();
	}
	

	/**
	 *	Present form to screen
	 */
	private void open(boolean firstCall, CommitMode commitMode)
	{
		// If it's the first call to this function or the Commit Mode is COMMIT TO DATABASE
		// then refresh the linked referral from database, otherwise work with on screen values
		if (firstCall || CommitMode.COMMIT_TO_DATABASE.equals(commitMode))
		{
			// Clear screen
			clearScreen();
			
			// List linked referrals from database
			LinkedCatsReferralForOutcomeVoCollection linkedReferrals = domain.listLinkedReferral(form.getLocalContext().getParentCatsReferral(), form.getLocalContext().getAppointmentOutcome(), ReferralRelationType.REQUEST_FOR_SERVICE);
			
			// Add linked referrals not save form Appointment Outcome
			if (form.getGlobalContext().RefMan.getReferralServiceRequests() != null)
			{
				for (LinkedCatsReferralForOutcomeVo linkedReferral : form.getGlobalContext().RefMan.getReferralServiceRequests())
				{
					linkedReferrals.add(linkedReferral);
				}
			}
		
    		// Populate linked referrals into grid
    		populateLinkedReferralsGrid(linkedReferrals);
		}
		
		// Reselect last saved record in grid
		form.grdReqForService().setValue(form.getLocalContext().getSelectedRecord());
		form.grdReqForService().resetScrollPosition();
		
		// Present last saved record
		populateInstanceControlsFromData(form.grdReqForService().getValue());

		// Set form to VIEW Mode
		form.setMode(FormMode.VIEW);
	}
	

	/**
	 *	Prepare the screen to record a new record
	 */
	private void newInstance()
	{
		// Clear the instance controls
		clearInstanceContols();
		
		//wdev-21522
		form.cmbService().clear();
		populateServices();
		//---------

		// Clear grid selection & local context selection 
		form.grdReqForService().setValue(null);
		form.getLocalContext().setSelectedRecord(null);
		
		// Default logged in HCP as 'Referring HCP' (Referred By labelled control)
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		if (hcpUser instanceof HcpLiteVo)
		{
			form.ccReferredByHcp().setValue(hcpUser);
		}
		
		// Default appointment slot responsible HCP as 'Responsible HCP' (Responsible Consultant labelled control)
		// TEST: Test if the query actually works
		HcpLiteVo slotResponsible = domain.getAppointmentSlotResponsable(form.getLocalContext().getAppointmentOutcome());
		form.ccResponsibleConsultant().setValue(slotResponsible);

		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}
	
	
	/**
	 * Prepare the screen to edit currently selected instance
	 */
	private void updateInstance()
	{
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}
	
	
	private boolean save(CommitMode commitMode)
	{
		try
		{
			// Validate UI errors (do this not to present user a list of mandatory VO fields that do not appear on screen)
			String[] errors = validateUIErrors();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			

			// Create Episode of Care and Care Context for new referral
			CareSpellForRequestServiceShortVo careSpell = domain.getCareSpellForReferral(form.getLocalContext().getParentCatsReferral());
			EpisodeOfCareForRequestServiceShortVo episodeOfCare = createEpisodeOfCare(careSpell, new DateTime(), (HcpLiteVo) form.ccResponsibleConsultant().getValue(), form.cmbService().getValue().getSpecialty());
			CareContextForRequestServiceShortVo careContext = createCareContext(episodeOfCare, ContextType.REFERRAL, new DateTime(), (HcpLiteVo) form.ccResponsibleConsultant().getValue());
			
			// Populate & build record to save from data on screen 
			LinkedCatsReferralForOutcomeVo linkedReferral = populateDataFromScreen(form.getLocalContext().getSelectedRecord(), careContext);
			linkedReferral.getReferral().setEpisodeOfCare(episodeOfCare);

			// Validate record to save
			errors = linkedReferral.validate(errors);
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}


			// If the form is set to COMMIT TO GLOBAL CONTEXT then call the method to commit to memory
			// and terminate function execution as a success
			if (CommitMode.COMMIT_TO_GLOBAL_CONTEXT.equals(commitMode))
			{
				form.getLocalContext().setSelectedRecord(commitRecordToMemory(linkedReferral));
				return true;
			}

			// If the function execution reaches this point then commit record to save to database
			// and terminate function execution as success 
			form.getLocalContext().setSelectedRecord(domain.saveLinkedReferralForServiceRequest(linkedReferral, form.getGlobalContext().RefMan.getCatsReferral(), careSpell));
			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false, form.getLocalContext().getCommitMode());
			return false;
		}
	}
	
	
	/**
	 *	Function used to perform RIE on selected record
	 * @param selectedRecord
	 * @param rieMessage
	 * @return
	 */
	private boolean performMarkAsRIE(LinkedCatsReferralForOutcomeVo selectedRecord, String rieMessage)
	{
		try
		{
			if (selectedRecord == null)
				return false;

			if (selectedRecord.getID_LinkedCatsReferral() != null)
			{
				domain.performRIE(selectedRecord, rieMessage);
			}

			form.grdReqForService().removeSelectedRow();
			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false, form.getLocalContext().getCommitMode());
			return false;
		}
	}


	/**
	 *	Function used to commit record 
	 * @param linkedReferral
	 * @return
	 */
	private LinkedCatsReferralForOutcomeVo commitRecordToMemory(LinkedCatsReferralForOutcomeVo linkedReferral)
	{
		// If parameter value is null terminate function execution
		if (linkedReferral == null)
			return null;
		
		// Get the row where the record is recorded (a new row will be created if none is found)
		grdReqForServiceRow rowRecord = getOrCreateRecordRow(linkedReferral);
		
		// Update row value
		updateRowValue(rowRecord, linkedReferral);
		
		// Return record to save
		return linkedReferral;
	}
	
	
	/**
	 *	Function used to commit to a global context the linked referral for service
	 */
	private void commitToGlobalContext()
	{
		// Collection of records to update
		LinkedCatsReferralForOutcomeVoCollection linkedReferrals = new LinkedCatsReferralForOutcomeVoCollection();
		
		// Iterate grid and retrieve all values
		for (int i = 0; i < form.grdReqForService().getRows().size(); i++)
		{
			// Add grid record to collection of data to commit
			LinkedCatsReferralForOutcomeVo linkedReferral = form.grdReqForService().getRows().get(i).getValue();
			linkedReferrals.add(linkedReferral);
		}
		
		// Commit data to global context
		form.getGlobalContext().RefMan.setReferralServiceRequests(linkedReferrals);
	}


	/**
	 *	Function used to validate UI Rules
	 */
	private String[] validateUIErrors()
	{
		ArrayList<String> errorList = new ArrayList<String>();

		// Service is mandatory
		if (form.cmbService().getValue() == null)
		{
			errorList.add("Service is mandatory.");
		}

		// Urgency is mandatory
		if (form.cmbUrgency().getValue() == null)
		{
			errorList.add("Urgency is mandatory.");
		}

		//WDEV-21597
		if (isARequestForServiceAlreadyAddedWithSameServiceAndUrgency(form.cmbService().getValue(),form.cmbUrgency().getValue(), form.getLocalContext().getSelectedRecord()))
		{
			errorList.add("You should not be able to add more requests for service with same service and urgency.");
		}
		
		// Return list of errors
		return errorList.toArray(new String[errorList.size()]);
	}	
	
	//WDEV-21597 //WDEV-22786
	private boolean isARequestForServiceAlreadyAddedWithSameServiceAndUrgency(ServiceLiteVo service, ReferralUrgency urgency, LinkedCatsReferralForOutcomeVo currentRecord)
	{
		LinkedCatsReferralForOutcomeVoCollection collRequestsForServices =  domain.listLinkedReferral(form.getLocalContext().getParentCatsReferral(), form.getLocalContext().getAppointmentOutcome(), ReferralRelationType.REQUEST_FOR_SERVICE);
		
		for (int i=0;i<form.grdReqForService().getRows().size(); i++)
		{
			collRequestsForServices.add(form.grdReqForService().getRows().get(i).getValue());
		}
		
		if (collRequestsForServices==null || collRequestsForServices.size()==0)
			return false;
		
		if (currentRecord != null && collRequestsForServices.indexOf(currentRecord) != -1)
			collRequestsForServices.remove(collRequestsForServices.indexOf(currentRecord));
		
		for (int i=0;i<collRequestsForServices.size();i++)
		{
			LinkedCatsReferralForOutcomeVo reqForService = collRequestsForServices.get(i);
			if (reqForService!=null && reqForService.getReferralIsNotNull() && urgency!=null && service!=null  && reqForService.getReferral().getReferralDetailsIsNotNull() && service.equals(reqForService.getReferral().getReferralDetails().getService()) && urgency.equals(reqForService.getReferral().getUrgency()))
			{
				return true;
			}
		}
		
		return false;
	}

	/**
	 *	Function used to update the data
	 */
	private void updateControlsState()
	{
		boolean selectedRecordedSaved = form.getLocalContext().getSelectedRecord() != null && form.getLocalContext().getSelectedRecord().getID_LinkedCatsReferral() != null;
		
		form.cmbService().setEnabled(form.getMode().equals(FormMode.EDIT) && !selectedRecordedSaved);
		form.cmbUrgency().setEnabled(form.getMode().equals(FormMode.EDIT) && !selectedRecordedSaved);
		form.ccResponsibleConsultant().setEnabled(form.getMode().equals(FormMode.EDIT) && form.cmbService().getValue()!=null); //WDEV-21592
		form.ccReferredByHcp().setEnabled(form.getMode().equals(FormMode.EDIT));

		// Buttons NEW and EDIT are available only if the dialog was not opened in READ ONLY mode
		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && !Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()));
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && !Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()) && form.grdReqForService().getValue() != null);

		// Buttons SAVE and CANCEL are available only in EDIT mode
		// The form must never reach EDIT mode when opened in READ ONLY mode
		form.btnSave().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.btnCancel().setVisible(FormMode.EDIT.equals(form.getMode()));

		// Button RIE should be visible in VIEW mode, selection was made and the dialog was not opened in READ ONLY mode
		// and only if the dialog was opened from Appointment Outcome Dialog
		boolean openedFromAppointmentOutcome = form.getForms().Scheduling.AppointmentOutcomeDialog.equals(engine.getPreviosFormName());
		form.btnRemove().setVisible(FormMode.VIEW.equals(form.getMode()) && !Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()) 
										&& form.grdReqForService().getValue() != null && openedFromAppointmentOutcome);
		
		form.btnRemove().setText(selectedRecordedSaved ? "Mark as RIE" : "Remove");
		
		form.btnClose().setVisible(FormMode.VIEW.equals(form.getMode()));
	}

	
	
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange functions between UI and data layer
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	
	/**
	 *	Function used to clear instance controls
	 */
	private void clearScreen()
	{
		form.grdReqForService().getRows().clear();
		
		clearInstanceContols();
	}

	/**
	 *	Function used to clear instance controls
	 */
	private void clearInstanceContols()
	{
		form.cmbService().setValue(null);
		form.cmbUrgency().setValue(null);
		form.ccResponsibleConsultant().setValue(null);
		form.ccReferredByHcp().setValue(null);
	}

	
	/**
	 *	Function used to list linked referrals in grid
	 */
	private void populateLinkedReferralsGrid(LinkedCatsReferralForOutcomeVoCollection linkedReferrals)
	{
		// Clear grid
		form.grdReqForService().getRows().clear();
		
		// If the Linked Referrals collection is null
		// terminate function execution
		if (linkedReferrals == null)
			return;
		
		// Iterate Linked Referrals and add them to grid
		for (LinkedCatsReferralForOutcomeVo linkedReferral : linkedReferrals)
		{
			// Create row for record
			grdReqForServiceRow row = form.grdReqForService().getRows().newRow();

			// Update row with record value
			updateRowValue(row, linkedReferral);
		}
	}

	
	/**
	 *	Populate instance controls with data
	 */
	private void populateInstanceControlsFromData(LinkedCatsReferralForOutcomeVo linkedReferral)
	{
		// Clear instance controls
		clearInstanceContols();
		
		// If the Linked Referral is null then terminate the function
		if (linkedReferral == null)
			return;
		
		// Test parameter to be valid - if the Linked Referral doesn't contain a CatsReferral
		// crash the execution intentionally
		if (linkedReferral.getReferral() == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Parameter is invalid or data is corrupted");
		
		// Alias for the CatsReferral record
		CatsReferralForRequestServiceVo referral = linkedReferral.getReferral();
		
		
		// Populate urgency (if the combobox doesn't have the urgency record, add it temporary)
		if (!form.cmbUrgency().getValues().contains(referral.getUrgency()))
		{
			form.cmbUrgency().newRow(referral.getUrgency(), referral.getUrgency().getText());
		}
		form.cmbUrgency().setValue(referral.getUrgency());
		
		// Populate from referral details
		if (referral.getReferralDetails() != null)
		{
			// Populate service (if the combobox doesn't have the service record, add it temporary) 
			if (!form.cmbService().getValues().contains(referral.getReferralDetails().getService()))
			{
				form.cmbService().newRow(referral.getReferralDetails().getService(), referral.getReferralDetails().getService().getServiceName());
			}
			form.cmbService().setValue(referral.getReferralDetails().getService());
			//WDEV-22786
			if (form.cmbService().getValue() != null)
			{	
				form.ccResponsibleConsultant().initializeResponsibleHcp(MosType.HCP, true, form.cmbService().getValue(),null);
			}
			// Add 'Responsible Consultant'
			form.ccResponsibleConsultant().setValue(referral.getReferralDetails().getConsultant());
			// Add 'Referred By'
			form.ccReferredByHcp().setValue(referral.getReferralDetails().getReferringConsultant());
		}
	}
	
	
	/**
	 *	Populate data form instance controls
	 * @param careContext 
	 */
	private LinkedCatsReferralForOutcomeVo populateDataFromScreen(LinkedCatsReferralForOutcomeVo linkedReferral, CareContextForRequestServiceShortVo careContext)
	{
		// Clone or create new Linked Referral record (as necessary)
		// Use create care context only in this case
		if (linkedReferral == null)
		{
			linkedReferral = new LinkedCatsReferralForOutcomeVo();
			
			linkedReferral.setReferral(createCatsReferral(form.getLocalContext().getParentCatsReferral(), form.getLocalContext().getAppointmentOutcome(), careContext));
			linkedReferral.setReferralRelationType(ReferralRelationType.REQUEST_FOR_SERVICE);
		}
		else
		{
			linkedReferral = (LinkedCatsReferralForOutcomeVo) linkedReferral.clone();
		}
		

		// Update Linked Referral with on screen values
		linkedReferral.getReferral().getReferralDetails().setService(form.cmbService().getValue());
		linkedReferral.getReferral().setUrgency(form.cmbUrgency().getValue());
		linkedReferral.getReferral().getReferralDetails().setConsultant((HcpLiteVo) form.ccResponsibleConsultant().getValue());
		linkedReferral.getReferral().getReferralDetails().setReferringConsultant((HcpLiteVo) form.ccReferredByHcp().getValue());
		
		
		// Return updated record
		return linkedReferral;
	}


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Helper functions
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	
	/**
	 *	Function used to find the grid row where a record is placed
	 *	or failing to find a row, to create a new row for that record
	 * @param linkedReferral
	 * @return
	 */
	private grdReqForServiceRow getOrCreateRecordRow(LinkedCatsReferralForOutcomeVo linkedReferral)
	{
		// Check parameter value - if the value is null then terminate function with an exception
		if (linkedReferral == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Parameter 'linkedReferral' in function getOrCreateRecordRow() cannot be null.");

		// If a row is selected then return the selected row
		if (form.grdReqForService().getSelectedRow() != null)
			return form.grdReqForService().getSelectedRow();
		
		// If the function execution reaches this point then create a new row for the record
		return form.grdReqForService().getRows().newRow();
	}


	/**
	 *	Function used to update given row with given value
	 *	This function will crash if either the row parameter is null
	 *	or value parameter is null
	 */
	private void updateRowValue(grdReqForServiceRow row, LinkedCatsReferralForOutcomeVo value)
	{
		if (row == null)
			throw new CodingRuntimeException("MAJOR LOGICAL ERROR - Parameter 'row' in function updateRowValue() cannot be null.");
		
		if (value == null)
			throw new CodingRuntimeException("MAJOR LOGICAL ERROR - Parameter 'value' in function updateRowValue() cannot be null.");
		
		
		// Update row columns
		row.setColService(value.getReferral().getReferralDetails().getService() != null ? value.getReferral().getReferralDetails().getService().getServiceName() : null);
		row.setTooltipForColService(value.getReferral().getReferralDetails().getService() != null ? value.getReferral().getReferralDetails().getService().getServiceName() : null);

		row.setColUrgency(value.getReferral().getUrgency() != null ? value.getReferral().getUrgency().getText() : null);
		row.setTooltipForColUrgency(value.getReferral().getUrgency() != null ? value.getReferral().getUrgency().getText() : null);
		
		row.setColRespHCP(value.getReferral().getReferralDetails().getConsultant() != null ? value.getReferral().getReferralDetails().getConsultant().toString() : null);
		row.setTooltipForColRespHCP(value.getReferral().getReferralDetails().getConsultant() != null ? value.getReferral().getReferralDetails().getConsultant().toString() : null);
		
		row.setColReferredByHCP(value.getReferral().getReferralDetails().getReferringConsultant() != null ? value.getReferral().getReferralDetails().getReferringConsultant().toString() : null);
		row.setTooltipForColReferredByHCP(value.getReferral().getReferralDetails().getReferringConsultant() != null ? value.getReferral().getReferralDetails().getReferringConsultant().toString() : null);
		
		// Update row value
		row.setValue(value);
	}
	
	
	//----------------------------------------------------------------------------
	//	TODO:	Old code that needs to be rewritten
	//-----------------------------------------------------------------------------
	
	
	//wdev-19933
	private void populateUrgencyCombo()
	{
		form.cmbUrgency().clear();

		SourceOfReferral sourceofreferral = SourceOfReferral.REQUEST_FOR_SERVICE;

		if (sourceofreferral != null)
		{
			if (!SourceOfReferral.TRANSFER_OF_CARE.equals(sourceofreferral))
			{
				ReferralSourceUrgencyVo tempSourceVo = getSourceReferralUrgencyVo(sourceofreferral, domain.getSourceOfReferralConfigVoColl());
				if (tempSourceVo != null)
				{

					if (tempSourceVo.getUrgencyIsNotNull() && tempSourceVo.getUrgency().size() > 0)
					{
						for (int h = 0; h < tempSourceVo.getUrgency().size(); h++)
						{
							form.cmbUrgency().newRow(tempSourceVo.getUrgency().get(h), tempSourceVo.getUrgency().get(h).getText());
						}
					}
				}
			}
			// WDEV-20797

			else
			{
				if (form.getLocalContext().getParentCatsReferral().getUrgency() != null)
				{
					form.cmbUrgency().newRow(form.getLocalContext().getParentCatsReferral().getUrgency(), form.getLocalContext().getParentCatsReferral().getUrgency().getText());
					form.cmbUrgency().setValue(form.getLocalContext().getParentCatsReferral().getUrgency());
				}
			}
			// WDEV-20797 ends here

		}
	}
	
	
	
	private EpisodeOfCareForRequestServiceShortVo createEpisodeOfCare(CareSpellForRequestServiceShortVo careSpell, DateTime startDateTime, HcpRefVo responsibleHCP, Specialty specialty)
	{
		EpisodeOfCareForRequestServiceShortVo episodeOfCare = new EpisodeOfCareForRequestServiceShortVo();
		
		episodeOfCare.setStartDate(startDateTime.getDate());

		episodeOfCare.setCareSpell(careSpell);
		episodeOfCare.setRelationship(CareSpelltoEpisodeRelationship.PRIMARY);

		episodeOfCare.setSpecialty(specialty);
		episodeOfCare.setResponsibleHCP(responsibleHCP);		
		
		EpisodeOfCareStatusHistoryVo firstStatus = new EpisodeOfCareStatusHistoryVo();
		firstStatus.setStatus(EpisodeOfCareStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		episodeOfCare.setCurrentStatus(firstStatus);
		episodeOfCare.setStatusHistory(new EpisodeOfCareStatusHistoryRefVoCollection());
		episodeOfCare.getStatusHistory().add(firstStatus);
		
		if (careSpell.getEpisodes() == null) careSpell.setEpisodes(new EpisodeOfCareForRequestServiceShortVoCollection());
		careSpell.getEpisodes().add(episodeOfCare);
		
		return episodeOfCare;
	}
	
	
	private CareContextForRequestServiceShortVo createCareContext(EpisodeOfCareForRequestServiceShortVo episodeOfCare, ContextType contextType, DateTime startDateTime, HcpRefVo responsibleHCP)
	{
		CareContextForRequestServiceShortVo careContext = new CareContextForRequestServiceShortVo();
		
		careContext.setContext(contextType);
		
		careContext.setStartDateTime(startDateTime);
		careContext.setEndDateTime(null);
		careContext.setEpisodeOfCare(episodeOfCare);
		
		CareContextStatusHistoryVo firstStatus = new CareContextStatusHistoryVo();
		firstStatus.setStatus(CareContextStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
//		careContext.setCurrentStatus(firstStatus);
//		careContext.setStatusHistory(new CareContextStatusHistoryVoCollection());
//		careContext.getStatusHistory().add(firstStatus);
		
		if (episodeOfCare.getCareContexts() == null) episodeOfCare.setCareContexts(new CareContextForRequestServiceShortVoCollection());
		episodeOfCare.getCareContexts().add(careContext);
		
		return careContext;
	}



	
	private Integer getDaysToRttBreachDateByService(ContractConfigForReferralDetailsComponentVo contract, ServiceLiteVo service)
	{
		if (contract==null || service==null)
			return null;
		
		for (int i=0;contract.getServiceLocations()!=null && i<contract.getServiceLocations().size();i++)
		{
			if (contract.getServiceLocations().get(i)!=null && service.equals(contract.getServiceLocations().get(i).getService()))
				return contract.getServiceLocations().get(i).getDaysToRTTBreachDate();
		}
		
		return null;
	}

	//WDEV-20797 ends here
	
	
	
	//wdev-19933
	private ReferralSourceUrgencyVo getSourceReferralUrgencyVo(ims.core.vo.lookups.SourceOfReferral sourceLkp, ReferralSourceUrgencyVoCollection  sourceColl)
	{
		if( sourceLkp != null && sourceColl != null && sourceColl.size() > 0)
		{
			for(int i = 0; i < sourceColl.size();i++)
			{
				ReferralSourceUrgencyVo tempVo = sourceColl.get(i); 
				if( tempVo != null && sourceLkp!= null && sourceLkp.equals(tempVo.getSourceOfReferral()))
					return tempVo;
			}
		}
		
		return null;
	}
	
	
	private CatsReferralForRequestServiceVo createCatsReferral(CatsReferralMasterVo parentReferral, Booking_AppointmentRefVo appointmentOutcome, CareContextForRequestServiceShortVo careContext)
	{
		CatsReferralForRequestServiceVo referral = new CatsReferralForRequestServiceVo();
		
		// Set referral details
		referral.setPatient(parentReferral.getPatient());
		referral.setContract(parentReferral.getContract());
		referral.setCreatingAppointment(appointmentOutcome);
		referral.setUrgency(form.cmbUrgency().getValue());

		// The referral for Request for Service is NOT a RTT Status clock impact referral
		referral.setIsEmergencyReferral(false);
		referral.setRTTClockImpact(false);

		// Create and set care context
		referral.setCareContext(careContext);
		
		
		// Create and set referral status
		CatsReferralStatusVo status = new CatsReferralStatusVo();
		status.setReferralStatus(ReferralApptStatus.REFERRAL_RECEIVED);
		status.setStatusDateTime(new DateTime());

		referral.setCurrentStatus(status);
		if (referral.getStatusHistory() == null) referral.setStatusHistory(new CatsReferralStatusVoCollection());
		referral.getStatusHistory().add(status);
		
		
		// Create the referral details
		ReferralLeterDetailsForCatsRefVo referralDetails = new ReferralLeterDetailsForCatsRefVo();
		
		referralDetails.setReferrerType(SourceOfReferral.REQUEST_FOR_SERVICE);
		referralDetails.setService(form.cmbService().getValue());
		referralDetails.setConsultant((HcpLiteVo) form.ccResponsibleConsultant().getValue());
		referralDetails.setAuthoringDateTime(new DateTime());
		referralDetails.setDateOfReferral(new Date());
		referralDetails.setReferringConsultant((HcpLiteVo) form.ccReferredByHcp().getValue());
		
		referralDetails.setEndDateEmailKPI(null);
		referralDetails.setEndDatePaperKPI(null);
		
		if (parentReferral != null)
		{
			referralDetails.setPCT(parentReferral.getReferralDetails().getPCT());
			//referralDetails.setOriginalDateOfReferral(parentReferral.getReferralDetails().getDateOfReferral());
		}
		
		//WDEV-23444
		boolean isEmergencyReferral = ReferralUrgency.EMERGENCY.equals(form.cmbUrgency().getValue()); //WDEV-20944
		
		if (!isEmergencyReferral)
		{
			// Set the End18WW date
    		if (parentReferral.getContract() != null)
    		{
    			Integer daysToRttBreachDate = getDaysToRttBreachDateByService(parentReferral.getContract(), form.cmbService().getValue());
    			
    			if (daysToRttBreachDate != null)
    			{
    				referralDetails.setEnd18WW(referralDetails.getDateOfReferral().copy().addDay(daysToRttBreachDate));
    			}
    			else if (parentReferral.getContract().getDaysToRTTBreachDate() != null && Boolean.TRUE.equals(form.cmbService().getValue().getIsSubjectToRTTClock()))
    			{
    				referralDetails.setEnd18WW(referralDetails.getDateOfReferral().copy().addDay(parentReferral.getContract().getDaysToRTTBreachDate()));
    			}
    		}
    		else
    		{
    			Date tempDate = new Date();
    			referralDetails.setEnd18WW(tempDate.addDay(End18WW * 7));
    		}	
		}
		else
		{
			referralDetails.setEnd18WW(null);
			referralDetails.setEndDateKPI(null);
		}
		
		referral.setReferralDetails(referralDetails);
		
		referralDetails.setEndDateKPI(isEmergencyReferral ? null : domain.getEndDateKPI(referral)); //WDEV-23444
		
		return referral;
	}

	
	
	
	
	
	private void populateServices()
	{
		ServiceLiteVoCollection services = null;
		if( form.getLocalContext().getParentCatsReferralIsNotNull() )
			services = domain.getReferralService(form.getLocalContext().getParentCatsReferral().getContract());
		else
		{
			CatsReferralMasterVo  tempVoPar = domain.getParentCatsReferrall(form.getGlobalContext().RefMan.getCatsReferral());
			if( tempVoPar != null )
			{
				services = domain.getReferralService(tempVoPar.getContract());
				form.getLocalContext().setParentCatsReferral(tempVoPar);
			}
		}
		
		if( services != null && services.size() > 0)
		{
			for( ServiceLiteVo service : services)
			{
				if( form.getLocalContext().getParentCatsReferralIsNotNull() 
						&& form.getLocalContext().getParentCatsReferral().getReferralDetailsIsNotNull() 
						&& form.getLocalContext().getParentCatsReferral().getReferralDetails().getServiceIsNotNull() 
						&& form.getLocalContext().getParentCatsReferral().getReferralDetails().getService().equals(service))
					continue;
				form.cmbService().newRow(service, service.getServiceName());
			}
		}
	}

	//WDEV-21195
	@Override
	protected void onGrdReqForServiceGridHeaderClicked(int column) throws PresentationLogicException
	{
		LinkedCatsReferralForOutcomeVoCollection values = form.grdReqForService().getValues();
		
		if (values==null || values.size()<=1)
			return;
		
		switch(column)
		{
			case COL_RESP_HCP:
				form.getLocalContext().setRespHCPColumnSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getRespHCPColumnSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ResponsibleHCPComparator(form.getLocalContext().getRespHCPColumnSortOrder()));
			break;
				
			case COL_REFERRED_BY_HCP:
				form.getLocalContext().setReferredByHCPColumnSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getReferredByHCPColumnSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ReferredByHCPComparator(form.getLocalContext().getReferredByHCPColumnSortOrder()));
			break;
		}
		
		populateLinkedReferralsGrid(values);
	}
	
	//WDEV-21195
	public class ResponsibleHCPComparator implements Comparator
	{
		private int direction = 1;
		
		public ResponsibleHCPComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ResponsibleHCPComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PersonName name1 = null;
			PersonName name2 = null;
			if(ob1 instanceof LinkedCatsReferralForOutcomeVo  )
			{
				LinkedCatsReferralForOutcomeVo  linkedCats1 = (LinkedCatsReferralForOutcomeVo )ob1;
				name1 = linkedCats1!=null && linkedCats1.getReferralIsNotNull()&& linkedCats1.getReferral().getReferralDetailsIsNotNull() && linkedCats1.getReferral().getReferralDetails().getConsultantIsNotNull() &&  linkedCats1.getReferral().getReferralDetails().getConsultant().getName()!=null ? linkedCats1.getReferral().getReferralDetails().getConsultant().getName():null;
			}
			
			if(ob2 instanceof LinkedCatsReferralForOutcomeVo )
			{
				LinkedCatsReferralForOutcomeVo  linkedCats2 = (LinkedCatsReferralForOutcomeVo )ob2;
				name2 = linkedCats2!=null && linkedCats2.getReferralIsNotNull()&& linkedCats2.getReferral().getReferralDetailsIsNotNull() && linkedCats2.getReferral().getReferralDetails().getConsultantIsNotNull() &&  linkedCats2.getReferral().getReferralDetails().getConsultant().getName()!=null ? linkedCats2.getReferral().getReferralDetails().getConsultant().getName():null;
			}
			
			if(name1 != null )
				return  name1.compareTo(name2)*direction;
			if(name2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	//WDEV-21195
	public class ReferredByHCPComparator implements Comparator
	{
		private int direction = 1;
		
		public ReferredByHCPComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ReferredByHCPComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PersonName name1 = null;
			PersonName name2 = null;
			if(ob1 instanceof LinkedCatsReferralForOutcomeVo  )
			{
				LinkedCatsReferralForOutcomeVo  linkedCats1 = (LinkedCatsReferralForOutcomeVo )ob1;
				name1 = linkedCats1!=null && linkedCats1.getReferralIsNotNull()&& linkedCats1.getReferral().getReferralDetailsIsNotNull() && linkedCats1.getReferral().getReferralDetails().getReferringConsultantIsNotNull() &&  linkedCats1.getReferral().getReferralDetails().getReferringConsultant().getName()!=null ? linkedCats1.getReferral().getReferralDetails().getReferringConsultant().getName():null;
			}
			
			if(ob2 instanceof LinkedCatsReferralForOutcomeVo )
			{
				LinkedCatsReferralForOutcomeVo  linkedCats2 = (LinkedCatsReferralForOutcomeVo )ob2;
				name2 = linkedCats2!=null && linkedCats2.getReferralIsNotNull()&& linkedCats2.getReferral().getReferralDetailsIsNotNull() && linkedCats2.getReferral().getReferralDetails().getReferringConsultantIsNotNull() &&  linkedCats2.getReferral().getReferralDetails().getReferringConsultant().getName()!=null ? linkedCats2.getReferral().getReferralDetails().getReferringConsultant().getName():null;
			}
			
			if(name1 != null )
				return  name1.compareTo(name2)*direction;
			if(name2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	//WDEV-21592
	@Override
	protected void onCmbServiceValueChanged() throws PresentationLogicException
	{
		form.ccResponsibleConsultant().clear();
		if (form.cmbService().getValue()!= null)
		{
			form.ccResponsibleConsultant().initializeResponsibleHcp(MosType.HCP, true, form.cmbService().getValue(),null); //WDEV-21592
		}
		updateControlsState();
	}
}
