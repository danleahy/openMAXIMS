//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.65 build 3225.30788)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.newonwardreferral;

import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.OnwardReferralVo;
import ims.RefMan.vo.OnwardReferralVoCollection;
import ims.RefMan.vo.ReferralOutcomeVo;
import ims.RefMan.vo.lookups.OnwardReferralStatus;
import ims.core.vo.OrgLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		clearScreen();
	}
	
	private void clearScreen() 
	{
		form.dteDischargeDate().setValue(null);
		form.cmbOnwardReferralOrganisation().setValue(null);
		form.txtOnwardReferralInstructions().setValue(null);
		form.cmbOnwardreferralReason().setValue(null);
	}

	private void initialize() throws PresentationLogicException 
	{
		if (!populateSuppliers())
			throw new FormOpenException("No Onward Referral Organisation setup for this screen.");
		
		form.setMode(FormMode.EDIT);
	}
	
	private boolean populateSuppliers() 
	{
		OrgLiteVoCollection voColl = domain.listAllSuppliers();
		
		for (int i = 0 ; voColl != null && i <voColl.size() ; i++)
		{
			form.cmbOnwardReferralOrganisation().newRow(voColl.get(i), voColl.get(i).getName());
		}
		
		return (voColl != null && voColl.size() > 0) ? true : false;
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			if(saveOnwardReferralStatus())
				engine.close(DialogResult.OK);
		}
	}

	private boolean saveOnwardReferralStatus() 
	{
		if(form.getGlobalContext().RefMan.getCatsReferral() != null)
		{
			CatsReferralListVo selectedCatsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			
			if(selectedCatsReferral != null)
			{
				selectedCatsReferral.setOnwardReferralStatus(OnwardReferralStatus.CURRENT_ONWARD_REFERRAL);
				selectedCatsReferral.validate();
				
				try 
				{
					selectedCatsReferral = domain.saveCatsReferral(selectedCatsReferral);
				} 
				catch (StaleObjectException e) 
				{
					engine.showMessage(e.getMessage());
					open();
					return false;
				}
				
				return true;
			}
		}
		
		return false;
	}

	private boolean save() 
	{
		if(form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
		{
			ReferralOutcomeVo referralOutcome = domain.getReferralOutcome(form.getGlobalContext().RefMan.getCatsReferral());
			
			if(referralOutcome != null && referralOutcome.getReferralDischargeIsNotNull())
			{
				OnwardReferralVo newOnwardReferral = populateDataFromScreen();
				
				referralOutcome.getReferralDischarge().setCurrentOnwardReferral(newOnwardReferral);
				
				if(referralOutcome.getReferralDischarge().getOnwardReferralsIsNotNull())
				{
					referralOutcome.getReferralDischarge().getOnwardReferrals().add(newOnwardReferral);
				}
				else
				{
					OnwardReferralVoCollection newColl = new OnwardReferralVoCollection();
					newColl.add(newOnwardReferral);
					referralOutcome.getReferralDischarge().setOnwardReferrals(newColl);
				}

				String[] errors = referralOutcome.validate(validateUIRules());
				
				if(errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}
				
				try 
				{
					referralOutcome = domain.saveReferralOutcome(referralOutcome);
				} 
				catch (StaleObjectException e) 
				{
					engine.showMessage(e.getMessage());
					open();
					return false;
				}
				
				return true;
			}
		}
		
		return false;
	}
	private String[] validateUIRules()
	{
		String str = form.txtOnwardReferralInstructions().getValue();
		if(form.txtOnwardReferralInstructions().getValue() == null || str.replace(" ", "").equals("") )
		{
			return new String[]{"Onward Referral Instructions field is mandatory."};
		}
		return null;
	}
	private OnwardReferralVo populateDataFromScreen() 
	{
		OnwardReferralVo newOnwardReferral = new OnwardReferralVo();
		
		newOnwardReferral.setDischargeDate(form.dteDischargeDate().getValue() != null ? form.dteDischargeDate().getValue() : null);
		newOnwardReferral.setOnwardReferralOrg(form.cmbOnwardReferralOrganisation().getValue() != null ? form.cmbOnwardReferralOrganisation().getValue() : null);
		newOnwardReferral.setOnwardReferral(form.txtOnwardReferralInstructions().getValue() != null ? form.txtOnwardReferralInstructions().getValue() : null);
		newOnwardReferral.setOnwardReferralReason(form.cmbOnwardreferralReason().getValue() != null ? form.cmbOnwardreferralReason().getValue() : null);
		
		return newOnwardReferral;
	}
}
