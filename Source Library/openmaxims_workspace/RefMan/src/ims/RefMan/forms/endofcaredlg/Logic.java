//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.endofcaredlg;

import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedRecord(domain.getCatsReferralWizardVo(form.getGlobalContext().RefMan.getCatsReferral()));
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.dteEOC().getValue() != null)
		{
			updateEndOfCare(form.dteEOC().getValue());
			engine.close(DialogResult.OK);
		}
		else
			engine.showMessage("End of Treatment Date is mandatory.");
	}	
	
	private boolean updateEndOfCare(Date endOfCareDate) 
	{
		CatsReferralWizardVo voRefWizard = form.getLocalContext().getSelectedRecord();
		
		voRefWizard.setEndOfCareDate(endOfCareDate);
		
		CatsReferralStatusVoCollection voStatusColl = voRefWizard.getStatusHistory();

		CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
		currentStatus.setReferralStatus(ReferralApptStatus.END_OF_CARE);
		currentStatus.setAuthoringUser((MemberOfStaffRefVo)domain.getMosUser());
		currentStatus.setStatusDateTime(new DateTime());
		
		voRefWizard.setCurrentStatus(currentStatus);

		if (voStatusColl == null)
			voStatusColl = new CatsReferralStatusVoCollection();
		
		voStatusColl.add(currentStatus);
		voRefWizard.setStatusHistory(voStatusColl);		

		String[] arrErrors = voRefWizard.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try 
		{
			voRefWizard = domain.saveCatsReferral(voRefWizard);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
