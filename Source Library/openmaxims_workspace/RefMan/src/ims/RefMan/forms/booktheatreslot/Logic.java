//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.booktheatreslot;

import ims.RefMan.forms.booktheatreslot.GenForm.grdSelectedRow;
import ims.RefMan.forms.booktheatreslot.GenForm.grdTheatreSessionRow;
import ims.RefMan.vo.BookTheatreSearchCriteriaVo;
import ims.RefMan.vo.ElectiveListHospitalConfigBookTheatreVo;
import ims.RefMan.vo.ElectiveListHospitalConfigBookTheatreVoCollection;
import ims.RefMan.vo.PatientElectiveListBookTheatreVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.ReferralBookingVo;
import ims.RefMan.vo.lookups.ProcedureExecutant;
import ims.RefMan.vo.lookups.WaitingCardAdmissionType;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicGradeVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.ocrr.vo.OrderInvestigationBookingVo;
import ims.scheduling.vo.BookTheatreSlotDialogVo;
import ims.scheduling.vo.BookingAppointmentLiteVo;
import ims.scheduling.vo.BookingAppointmentTheatreLiteVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentLiteVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.LocationForTheatreSessionVo;
import ims.scheduling.vo.MoveAppointmentDataVo;
import ims.scheduling.vo.Sch_BookingTheatreVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.SessionTheatreVoCollection;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.Session_ListOwnerVoCollection;
import ims.scheduling.vo.lookups.ProfileListType;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IGenericItem;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int CURRENT_APPT_NODE	= 1;
	private static final int REBOOK_APPT_NODE	= 2;
	private static final int INV_NODE			= 3;
	private static final int OTHER_NODE			= 4;
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setPatientElectiveList(null);
		
		if (args != null && args.length > 0 && args[0] != null && args[0] instanceof  PatientElectiveListRefVo)
		{
			form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveList((PatientElectiveListRefVo)args[0]));
			form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(form.getLocalContext().getPatientElectiveList()!=null ? form.getLocalContext().getPatientElectiveList().getProcedureDescription() : null); //WDEV-23215
		}
		
		initialise();
		open();
		
		if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
			loadReferralDetails();
		else
		{
			form.lyr1().tabReferral().setHeaderVisible(false);
			form.btnClose().setVisible(false);
		}
	}
	
	private void initialise()
	{
		clearSearchCriteria(false);
		
		form.setMode(FormMode.VIEW);	
		
		loadServices();
		loadLocations();
		
		// Remove EMERGENCY value from theatre type lookup
		form.lyr1().tabSearch().cmbTheatreType().removeRow(TheatreType.EMERGENCY);	
		form.lyr1().tabSearch().cmbTheatreType().removeRow(TheatreType.EMERGENCY_NON_TO);	
		
		form.lyr1().tabSearch().lblAnaesType().setVisible(false);
		form.lyr1().tabSearch().cmbAnaesType().setVisible(false);
		if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
		{
			form.lyr1().tabSearch().qmbProcedure().setRequired(true);
			form.lyr1().tabSearch().cmbAnaesType().setVisible(true);
			form.lyr1().tabSearch().lblAnaesType().setVisible(true);
			form.lyr1().tabSearch().intRequiredProcTime().setRequired(true);

			form.lyr1().tabSearch().lblTheatres().setVisible(false);
			form.lyr1().tabSearch().cmbTheatres().setVisible(false);
		}

	}
	
	private void open()
	{
		form.getLocalContext().setSch_Booking(new Sch_BookingTheatreVo());
		
		repopulateScreen();
		updateControlsState();
	}
	
	private void repopulateScreen()
	{
		defaultDates();
		
		if (form.getLocalContext().getPatientElectiveList()!= null)
		{
			if (form.getLocalContext().getPatientElectiveList().getProcLaterality() != null)
			{
				form.lyr1().tabSearch().lblPrimaryProcedureLaterality().setValue("Laterality: " + form.getLocalContext().getPatientElectiveList().getProcLaterality().getText());
			}
			
			if (form.getLocalContext().getPatientElectiveList().getSecondaryProcLaterality() != null)
			{
				form.lyr1().tabSearch().lblSecondaryProcedureLaterality().setValue("Laterality: " + form.getLocalContext().getPatientElectiveList().getSecondaryProcLaterality().getText());
			}
		}
		
		//new appointment
		if(form.getGlobalContext().Scheduling.getTheatreAppointment() == null)
		{
			
			if( form.getLocalContext().getPatientElectiveList() != null)
			{
				
				boolean isSurgical = WaitingCardAdmissionType.SURGICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()) ;
				boolean isEndoscopy = WaitingCardAdmissionType.ENDOSCOPY.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()) ;
				
				form.lyr1().tabSearch().cmbService().setValue(form.getLocalContext().getPatientElectiveList().getElectiveList() != null ? form.getLocalContext().getPatientElectiveList().getElectiveList().getService() : null);
				
				if (form.getLocalContext().getPatientElectiveList().getHospital() != null)
					form.lyr1().tabSearch().cmbHospital().setValue(form.getLocalContext().getPatientElectiveList().getHospital());
				
				//in case hospital is not in the configuration
				if (form.getLocalContext().getPatientElectiveList().getHospital() != null && form.lyr1().tabSearch().cmbHospital().getValue() == null)
				{
					form.lyr1().tabSearch().cmbHospital().newRow(form.getLocalContext().getPatientElectiveList().getHospital(), form.getLocalContext().getPatientElectiveList().getHospital().getName());
					form.lyr1().tabSearch().cmbHospital().setValue(form.getLocalContext().getPatientElectiveList().getHospital());
				}
				
				if (form.getLocalContext().getPatientElectiveList().getPrimaryProcedure() != null)
				{
					form.lyr1().tabSearch().qmbProcedure().newRow(form.getLocalContext().getPatientElectiveList().getPrimaryProcedure(), form.getLocalContext().getPatientElectiveList().getPrimaryProcedure().getProcedureName());
					form.lyr1().tabSearch().qmbProcedure().setValue(form.getLocalContext().getPatientElectiveList().getPrimaryProcedure());

					form.lyr1().tabSearch().intRequiredProcTime().setValue(form.getLocalContext().getPatientElectiveList().getAnticipatedProcedureLength());
				}
				
				if (form.getLocalContext().getPatientElectiveList().getSecondaryProcedure() != null)
				{
					form.lyr1().tabSearch().qmbAdditionalProcedure().newRow(form.getLocalContext().getPatientElectiveList().getSecondaryProcedure(), form.getLocalContext().getPatientElectiveList().getSecondaryProcedure().getProcedureName());
					form.lyr1().tabSearch().qmbAdditionalProcedure().setValue(form.getLocalContext().getPatientElectiveList().getSecondaryProcedure());
				}
				
				form.lyr1().tabSearch().chkMultiService().setValue(form.getLocalContext().getPatientElectiveList().getMultiServiceCase());
				
				boolean noGeneralAnaesthetic = YesNo.NO.equals(form.getLocalContext().getPatientElectiveList().getGeneralAnaesthetic()) ;
				
				//default Anaesthetic Type
				if (form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome() != null && form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome().getAnaestheticType() != null) 
				{
					form.lyr1().tabSearch().cmbAnaesType().setValue(form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome().getAnaestheticType());
				}
				else if (isSurgical)
				{
					form.lyr1().tabSearch().cmbAnaesType().setValue(form.getLocalContext().getPatientElectiveList().getAnaestheticType());	
				}
				else if (isEndoscopy && !noGeneralAnaesthetic && AnaestheticType.GA.equals(form.getLocalContext().getPatientElectiveList().getAnaestheticType()))
				{
					form.lyr1().tabSearch().cmbAnaesType().setValue(form.getLocalContext().getPatientElectiveList().getAnaestheticType());
				}
				
				//default Theatre Type
				if (form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome() != null && form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome().getTheatreType() != null) 
				{
					form.lyr1().tabSearch().cmbTheatreType().setValue(form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome().getTheatreType());
				}
				else if (isSurgical)
				{
					if (form.getLocalContext().getPatientElectiveList().getHospital() == null) //location not selected
					{
						form.lyr1().tabSearch().cmbTheatreType().setValue(form.getLocalContext().getPatientElectiveList().getRequiredTheatreType());
					}
					else
					{
						form.lyr1().tabSearch().cmbTheatreType().setValue(TheatreType.DAYCASE);
					}
				}
			}

			return;
		}
			
		//rebooked appointment
		//store the same booking record
		Sch_BookingTheatreVo voBooking = domain.getSch_BookingByAppt(form.getGlobalContext().Scheduling.getTheatreAppointment());
		form.getLocalContext().setSch_Booking(voBooking);
		form.getGlobalContext().Scheduling.setSch_BookingTheatre(voBooking);
		
		//service
		form.lyr1().tabSearch().cmbService().setValue(form.getGlobalContext().Scheduling.getTheatreService());
		
		if(form.lyr1().tabSearch().cmbService().getValue() == null && form.getGlobalContext().Scheduling.getTheatreService() instanceof ServiceLiteVo)
		{
			form.lyr1().tabSearch().cmbService().newRow(form.getGlobalContext().Scheduling.getTheatreService(), ((ServiceLiteVo)form.getGlobalContext().Scheduling.getTheatreService()).getServiceName());
			form.lyr1().tabSearch().cmbService().setValue(form.getGlobalContext().Scheduling.getTheatreService());
		}
		
		//Theatre Type 
		if(form.getGlobalContext().Scheduling.getTheatreTypeIsNotNull())
			form.lyr1().tabSearch().cmbTheatreType().setValue(form.getGlobalContext().Scheduling.getTheatreType());		
		
		BookingAppointmentTheatreVo voAppt = form.getGlobalContext().Scheduling.getTheatreAppointment();
		
		//default dates WDEV-22772
		form.lyr1().tabSearch().dteFrom().setValue(voAppt.getAppointmentDate());
		form.lyr1().tabSearch().dteTo().setValue(voAppt.getAppointmentDate());
		
		if (voAppt.getTheatreBooking() != null)
		{
			form.lyr1().tabSearch().intRequiredProcTime().setValue(voAppt.getCustomProcedureDuration());

			//Anaesthetic Type
			form.lyr1().tabSearch().cmbAnaesType().setValue(voAppt.getTheatreBooking().getAnaestheticType());

			//Primary Procedure
			if (voAppt.getTheatreBooking().getProcedure() != null)
			{
				form.lyr1().tabSearch().qmbProcedure().newRow(voAppt.getTheatreBooking().getProcedure(), voAppt.getTheatreBooking().getProcedure().getProcedureName());
				form.lyr1().tabSearch().qmbProcedure().setValue(voAppt.getTheatreBooking().getProcedure());
			}
			
			//Secondary Procedure
			if (voAppt.getTheatreBooking().getSecondaryProcedure() != null)
			{
				form.lyr1().tabSearch().qmbAdditionalProcedure().newRow(voAppt.getTheatreBooking().getSecondaryProcedure(), voAppt.getTheatreBooking().getSecondaryProcedure().getProcedureName());
				form.lyr1().tabSearch().qmbAdditionalProcedure().setValue(voAppt.getTheatreBooking().getSecondaryProcedure());
			}
			
			//consultant
			if (voAppt.getTheatreBooking().getConsultant() != null)
			{
				form.lyr1().tabSearch().qmbConsultant().newRow(voAppt.getTheatreBooking().getConsultant(), voAppt.getTheatreBooking().getConsultant().getIMosName());
				form.lyr1().tabSearch().qmbConsultant().setValue(voAppt.getTheatreBooking().getConsultant());
			}
		}
		
		String[] searchCriteriaValidationErrors = validateSearchCriteria(); //WDEV-18943
		if(searchCriteriaValidationErrors == null)
		{
			loadSessions();
			form.setMode(FormMode.EDIT);
			addTheatreSessions(new Date());
		}
	}

	/**
	 * 
	 */
	private void defaultDates()
	{
		form.lyr1().tabSearch().dteFrom().setValue(new Date());
		//Date dtEndMonth = getLastDayofMonth();
		Date date2Weeks = form.lyr1().tabSearch().dteFrom().getValue().copy();
		date2Weeks.addDay(14);
		form.lyr1().tabSearch().dteTo().setValue(date2Weeks);
	}
	
	private void addTheatreSessions(Date selDate)
	{		
		// go through sessions getting ones for the selected date
		SessionTheatreVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		if (voCollSessionShort == null)
			return;

		SessionTheatreVoCollection voCollSelectedSessions = new SessionTheatreVoCollection();
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(selDate))
				voCollSelectedSessions.add(voCollSessionShort.get(i));
		}	

		form.getLocalContext().setSelectedSessions(voCollSelectedSessions);
		loadTheatreSlots();
	}
	
	private void loadTheatreSlots()
	{
		form.grdSelected().getRows().clear();
		form.txtSessionComments().setValue(null);
		
		//load slots for Session
		if(form.grdTheatreSession().getValue() != null)
		{
			SessionTheatreVo voSession = form.grdTheatreSession().getValue();
			form.getLocalContext().setSessionTheatre(voSession); //WDEV-22972
			boolean hasBookingRights = doesRoleHaveBookingRightsForSession(voSession);
			
			//WDEV-19208
			form.txtSessionComments().setValue(voSession.getSessionComment());
			
			if(voSession.getParentChildSlots() != null)
			{
				voSession.getParentChildSlots().sort();
				
				for(SessionParentChildSlotVo voSlot : voSession.getParentChildSlots())
				{
					if(voSlot.getAppointment() == null && voSlot.getStatusIsNotNull() && (voSlot.getStatus().equals(Status_Reason.BOOKED) || voSlot.getStatus().equals(Status_Reason.CLOSED)))
						continue;
					
					grdSelectedRow row = form.grdSelected().getRows().newRow();
					
					if(voSlot.getAppointmentIsNotNull())
					{
						//slot with an appointment
						row.setColStartTime(voSlot.getAppointment().getApptStartTime());
						
						Integer duration = voSlot.getAppointment().getCustomProcedureDuration();
						if(duration != null)
							row.setColMins(duration.toString());
						
						//WDEV-13247
						if(voSlot.getAppointment().getPatientIsNotNull())
						{
							row.setColPatient(voSlot.getAppointment().getPatient().toString());
							
							String apptComment = domain.getBookingCommentForAppt(voSlot.getAppointment());
							
							row.setTooltipForColPatient(apptComment != null ? voSlot.getAppointment().getPatient().toString() + "<br>Booking Comments: <b>" + apptComment + "</b>" : voSlot.getAppointment().getPatient().toString());
						}
						
						//WDEV-13247
						if(voSlot.getAppointment().getTheatreBookingIsNotNull())
						{
							if(voSlot.getAppointment().getTheatreBooking().getProcedureIsNotNull())
							{
								row.setColProcedure(voSlot.getAppointment().getTheatreBooking().getProcedure());
								row.setTooltipForColProcedure(voSlot.getAppointment().getTheatreBooking().getProcedure().toString());
							}
						}
						//row.setSelectable(false);
					}
					else
					{
						//add empty slots
						row.setColStartTime(voSlot.getStartTime());					
					}
					
					//Suspended Slots
					if(voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SUSPENDED))
					{
						row.setBackColor(Color.Bisque);
						row.setColPatient("Suspended for: " +  (voSlot.getStatusReasonIsNotNull() ? voSlot.getStatusReason().getText() : ""));
					}
					
					row.setValue(voSlot);
					
					//colour overlapping appointments
					grdSelectedRow previousRow;
					if(form.grdSelected().getRows().size() > 1)
					{
						previousRow = form.grdSelected().getRows().get(form.grdSelected().getRows().size() -2);
						if(previousRow.getValue() != null && previousRow.getValue().getAppointmentIsNotNull())
						{
							if(previousRow.getValue().getAppointment().getApptEndTimeIsNotNull() && previousRow.getValue().getAppointment().getApptEndTime().isGreaterThan(voSlot.getStartTime()))
								previousRow.setBackColor(Color.Red);
						}
					}	
					
					row.setSelectable(hasBookingRights);
					if(!hasBookingRights)
						row.setTooltip("Role does not have rights to book in this Session");

				}
			}
			
		}
		
		fillGridUntilMidnightWithEmptySlots();
		
	}

	/**
	 * request to fill the rest of the day in a different colour (TB02)
	 * @param parentChildSlots 
	 */
	private void fillGridUntilMidnightWithEmptySlots()
	{
		SessionTheatreVo voSession = form.grdTheatreSession().getValue();
		
		if(voSession == null)
			return;
		
		// Get the last appointment end time
		Time sessionEndTm = voSession.getEndTm().copy();
		
		if(form.grdSelected().getRows().size() > 0)
		{
			grdSelectedRow row = form.grdSelected().getRows().get(form.grdSelected().getRows().size() - 1);
			
			if(row.getValue() != null)
			{
				if(row.getValue().getStartTimeIsNotNull() && row.getValue().getDurationIsNotNull())
					sessionEndTm = Booking_AppointmentVo.calculateEndTime(row.getValue().getStartTime(), row.getValue().getDuration());
				
				if(row.getValue().getAppointmentIsNotNull() && row.getValue().getAppointment().getApptEndTimeIsNotNull())
					sessionEndTm = row.getValue().getAppointment().getApptEndTime();
				
				// Colour last row red if it is over-booked
				if(row.getValue().getAppointmentIsNotNull())
				{
					if(row.getValue().getAppointment().getApptEndTimeIsNotNull())
					{
						if(row.getValue().getAppointment().getApptEndTime().isGreaterThan(voSession.getEndTm()))
							row.setBackColor(Color.Red);
					}
				}
			}
		}
		
		if(sessionEndTm != null)
		{
			int fillerDuration = 0;
			
			if(voSession.getParentChildSlots() != null && voSession.getParentChildSlots().size() > 0)
			{
				if(voSession.getParentChildSlots().get(0).getDurationIsNotNull())
				{
					fillerDuration = voSession.getParentChildSlots().get(0).getDuration();
				}
			}
			
			if(fillerDuration == 0)
				fillerDuration = 5; //default fill slots to 5 mins
			
			Time midNight = new Time(23,59);
			//need to fill this time period with multiple dummy slots of 'fillerDuration' size
			int timeFillRequired = (midNight.getTotalMinutes() + 1) - sessionEndTm.getTotalMinutes();
			
			Time tmDummySlot = (Time) sessionEndTm.clone();
			while(timeFillRequired > 0)
			{
				tmDummySlot = roundTimeIfRequired(tmDummySlot);

				grdSelectedRow row = form.grdSelected().getRows().newRow();
				row.setColStartTime((Time)tmDummySlot.clone());
				//row.setColMins(String.valueOf(fillerDuration));
				row.setBackColor(Color.Bisque);
				row.setSelectable(false);
				timeFillRequired -= fillerDuration;
				tmDummySlot.addMinutes(fillerDuration);
			}
		}
	}

	/**
	 * @param tmDummySlot
	 * @return
	 */
	private Time roundTimeIfRequired(Time tmDummySlot)
	{
		int round = 5;
		int intTime = Integer.parseInt(tmDummySlot.toString(TimeFormat.FLAT4));
		//check for remainder if there is a remainder rounding is required
		if(!(intTime%round == 0))
		{
			double result = Math.round((intTime+5) /round) * round;		
			String prepend = "";
			
			// WDEV-13221
			// Reversed conditions to correctly prepend
			if(intTime < 1)
				prepend = "0000";
			else if(intTime < 10)
				prepend = "000";
			else if(intTime < 100)
				prepend = "00";
			else if(intTime < 1000)
				prepend = "0";

			
			int res = (int) result;
			
			String timeVal = prepend + res;
			timeVal = correctSixtyMinHourIfNeeded(timeVal);
			
			timeVal = timeVal.substring(0,2) + ":" + timeVal.substring(2,4);
			
			tmDummySlot = new Time(String.valueOf(timeVal));
		}
		return tmDummySlot;
	}

	private String correctSixtyMinHourIfNeeded(String res)
	{
		if (res == null)
			throw new CodingRuntimeException("res cannot be null in method correctSixtyMinHourIfNeeded");
		
		if(res.length() >=2)
		{
			String last2Digits = res.substring((res.length() -2), res.length());
			if(last2Digits.equals("60"))
			{
				
				last2Digits = "00";
				String first2Digits = res.substring(0, 2);
				int val = Integer.parseInt(first2Digits);
				if(val<23)
					val += 1;
				else
					val = 0;
				
				first2Digits = String.valueOf(val);	
				if(first2Digits.length() == 1)
					first2Digits = "0" + first2Digits;
				
				return first2Digits + last2Digits;
			}
		}
		
		return res;
	}

	private String getConsultantsListString(SessionTheatreVo voSession)
	{
		if (voSession == null || voSession.getListOwners() == null)
			return "";
		
		String strConsultant = "";
		boolean loopAgain = false;
		Session_ListOwnerVoCollection collListOwners = voSession.getListOwners().sort(new ListOwnerNameComparator(SortOrder.ASCENDING));
		for (int i=0;i<collListOwners.size();i++)
		{
			Session_ListOwnerVo voCons = collListOwners.get(i);
			if(voCons.getHcpIsNotNull())
				strConsultant += voCons.getHcp().toString();
			
			loopAgain = collListOwners.size() - i > 1;
			if(loopAgain)
				strConsultant += ", ";
		}
		
		return strConsultant;
	}
	
	private Boolean doesRoleHaveBookingRightsForSession(Sch_SessionRefVo voSession)
	{		
		Map map = form.getLocalContext().getSessionBookingRights();
		if(map == null)
			map = new HashMap();
		
		Object entry = map.get(voSession.getID_Sch_Session());
		
		if(entry == null)
		{
			map.put(voSession.getID_Sch_Session(), domain.hasBookingRights(engine.getLoggedInRole(), voSession));
			entry = map.get(voSession.getID_Sch_Session());
		}
		
		form.getLocalContext().setSessionBookingRights(map);
		return (Boolean) entry;
	}
	
	private String[] validateSearchCriteria()
	{
		List<String> errors = new ArrayList<String>(); 
		if(form.lyr1().tabSearch().dteFrom().getValue() == null)
			errors.add("'From' date is mandatory");
		if(form.lyr1().tabSearch().dteTo().getValue() == null)
			errors.add("'To' date is mandatory");

		if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
		{
			if(form.lyr1().tabSearch().intRequiredProcTime().isEnabled() && form.lyr1().tabSearch().intRequiredProcTime().getValue() == null)
				errors.add("'Time Required' is mandatory");
		}
		
		// Validate 'From' date not to be set after 'To' date
		if (form.lyr1().tabSearch().dteFrom().getValue() != null && form.lyr1().tabSearch().dteTo().getValue() != null)
		{
			if (form.lyr1().tabSearch().dteFrom().getValue().isGreaterThan(form.lyr1().tabSearch().dteTo().getValue()))
			{
				errors.add("'From' date cannot be greater than 'To' date."); //WDEV-18762
			}
		}
		
		/*
		if(form.lyr1().tabSearch().cmbTheatreType().getValue() == null)
			errors.add("'Theatre Type' is mandatory");
		*/
	
		if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
		{
			if(form.lyr1().tabSearch().qmbProcedure().getValue() == null && form.lyr1().tabSearch().qmbProcedure().isEnabled())
				errors.add("'Primary Procedure' is mandatory");
			
			if(form.lyr1().tabSearch().qmbAdditionalProcedure().getVisible() && form.lyr1().tabSearch().qmbAdditionalProcedure().isEnabled() && form.lyr1().tabSearch().qmbAdditionalProcedure().getValue() == null)
				errors.add("'Additional Procedure' is mandatory");
		}

		//WDEV-22493
		if (form.lyr1().tabSearch().intRequiredProcTime().getValue() != null)
		{
			Integer duration = getMinimumDuration();

			if (duration != null && form.lyr1().tabSearch().intRequiredProcTime().getValue() < duration)
			{
				errors.add("Time Required cannot be less than " + duration + " mins");
			}
		}
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;	
	}

	private Integer getMinimumDuration()
	{
		ProcedureLiteVo primaryProcedure = form.lyr1().tabSearch().qmbProcedure().getValue() != null ? (ProcedureLiteVo) form.lyr1().tabSearch().qmbProcedure().getValue() : null;
		ProcedureLiteVo secondaryProcedure = form.lyr1().tabSearch().qmbAdditionalProcedure().getValue() != null ? (ProcedureLiteVo) form.lyr1().tabSearch().qmbAdditionalProcedure().getValue() : null;

		Integer primaryProcedureDuration = null;
		Integer secondaryProcedureDuration = null;

		if (primaryProcedure != null)
			primaryProcedureDuration = primaryProcedure.getDurationInMins();

		if (secondaryProcedure != null)
			secondaryProcedureDuration = secondaryProcedure.getDurationInMins();

		if (primaryProcedureDuration != null && secondaryProcedureDuration != null)
			return primaryProcedureDuration > secondaryProcedureDuration ? primaryProcedureDuration : secondaryProcedureDuration;
		else if (primaryProcedureDuration != null)
			return primaryProcedureDuration;
		else if (secondaryProcedureDuration != null)
			return secondaryProcedureDuration;

		return null;
		
	}

	private void loadSessions()
	{
		
		listSessions();
		clearScreen(false);		
		
		SessionTheatreVoCollection voColSessions = form.getLocalContext().getSessions();
		if (voColSessions != null)
		{
			for (SessionTheatreVo voSession : voColSessions)
			{
				grdTheatreSessionRow row = form.grdTheatreSession().getRows().newRow();
				row.setColDate(voSession.getSessionDate());
				
 				//WDEV-20017 -- starts here
				String consultantDisplayString = getConsultantsListString(voSession);
				row.setColConsultant(consultantDisplayString);
				row.setCellColConsultantTooltip(consultantDisplayString);
				//WDEV-20017 -- end
				
				row.setColListType(voSession.getListType() != null ? voSession.getListType().getText() : "");
				row.setCellColListTypeTooltip(voSession.getListType() != null ? voSession.getListType().getText() : "");
				
				if(voSession.getSchLocation() != null)
				{
					String hospital = getHospitalForLocation(voSession.getSchLocation());
					row.setColLocation(hospital);
					row.setCellColLocationTooltip("Hospital: <b>" + hospital + "</b><br>Location: <b>" + voSession.getSchLocation().getName() + "</b>");
				}
				
				row.setColNoBooked(domain.countNonCancelledAppointmentsForSession(voSession).toString());
				row.setColTimeRemaining(voSession.getTheatreProceduresRemainingIsNotNull() && voSession.getTheatreProceduresRemaining().getRemainingTimeInMinsIsNotNull() ? voSession.getTheatreProceduresRemaining().formatTimeRemaining() : "");
				row.setValue(voSession);
			}
			
			if(voColSessions.size() == 0)
				engine.showMessage("No matching records found");
			
		}
	}
	
	private String getHospitalForLocation(LocationForTheatreSessionVo location)
	{
		if (location == null)
			return "";
		
		if (LocationType.HOSP.equals(location.getType()))
			return location.getName();
		
		while(location.getParentLocation() != null) 
		{
			location = location.getParentLocation();
			
			if (LocationType.HOSP.equals(location.getType()))
				return location.getName();
		}
		
		return "";
	}

	private void clearScreen(boolean leaveInstantiatedData)
	{
		form.grdTheatreSession().getRows().clear();
		form.txtSessionComments().setValue(null);
		
		if(!leaveInstantiatedData)
			form.grdSelected().getRows().clear();
	}	
	
	private void listSessions()
	{				
		
		BookTheatreSearchCriteriaVo searchCriteria = new BookTheatreSearchCriteriaVo();
		
		searchCriteria.setFromDate(form.lyr1().tabSearch().dteFrom().getValue());
		searchCriteria.setToDate(form.lyr1().tabSearch().dteTo().getValue());
		searchCriteria.setHospital(form.lyr1().tabSearch().cmbHospital().getValue());
		searchCriteria.setTheatre(form.lyr1().tabSearch().cmbTheatres().getValue());
		searchCriteria.setService(form.lyr1().tabSearch().cmbService().getValue());
		searchCriteria.setPrimaryProcedure(form.lyr1().tabSearch().qmbProcedure().getValue());
		searchCriteria.setAdditionalProcedure(form.lyr1().tabSearch().qmbAdditionalProcedure().getValue());
		searchCriteria.setMultiServiceCase(form.lyr1().tabSearch().chkMultiService().getValue());
		searchCriteria.setConsultant(form.lyr1().tabSearch().qmbConsultant().getValue());
		searchCriteria.setListType(form.lyr1().tabSearch().cmbListType().getValue());
		searchCriteria.setAnaestheticType(form.lyr1().tabSearch().cmbAnaesType().getValue());
		//WDEV-23208 for TheatreAvailability, GA Sessions should not be excluded
		searchCriteria.setNoGASessions(!form.lyr1().tabSearch().cmbAnaesType().getVisible() && !engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability));
		searchCriteria.setTheatreType(form.lyr1().tabSearch().cmbTheatreType().getValue());
		searchCriteria.setTimeRequired(form.lyr1().tabSearch().intRequiredProcTime().getValue());
		searchCriteria.setAllowOverBook(engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS));
		
		form.getLocalContext().setSearchCriteria(searchCriteria);
		
		SessionTheatreVoCollection voCollSessionShort = domain.listSession(searchCriteria);
		form.getLocalContext().setSessions(voCollSessionShort);
	}

	private void clearSearchCriteria(boolean fromButton)
	{
		form.lyr1().tabSearch().dteFrom().setValue(null);
		form.lyr1().tabSearch().dteTo().setValue(null);
		form.lyr1().tabSearch().cmbHospital().setValue(null);
		form.lyr1().tabSearch().cmbListType().setValue(null);
		form.lyr1().tabSearch().cmbTheatreType().setValue(null);
		form.lyr1().tabSearch().intRequiredProcTime().setValue(null);
		
		if (fromButton)
		{
			if (form.lyr1().tabSearch().cmbService().isEnabled())
				form.lyr1().tabSearch().cmbService().setValue(null);
			
			if (form.lyr1().tabSearch().qmbProcedure().isEnabled())
				form.lyr1().tabSearch().qmbProcedure().clear();
			
			if (form.lyr1().tabSearch().qmbAdditionalProcedure().getVisible() && form.lyr1().tabSearch().qmbAdditionalProcedure().isEnabled())
				form.lyr1().tabSearch().qmbAdditionalProcedure().clear();
			
			if (form.lyr1().tabSearch().qmbConsultant().isEnabled())
				form.lyr1().tabSearch().qmbConsultant().clear();
			
			if (form.lyr1().tabSearch().chkMultiService().isVisible() && form.lyr1().tabSearch().chkMultiService().isEnabled())
				form.lyr1().tabSearch().chkMultiService().setValue(null);
			
			if (form.lyr1().tabSearch().cmbTheatres().getVisible() && form.lyr1().tabSearch().cmbTheatres().isEnabled())
				form.lyr1().tabSearch().cmbTheatres().setValue(null);
			
			if (form.lyr1().tabSearch().cmbAnaesType().getVisible() && form.lyr1().tabSearch().cmbAnaesType().isEnabled())
				form.lyr1().tabSearch().cmbAnaesType().setValue(null);
		}
		else
		{
			form.lyr1().tabSearch().cmbService().setValue(null);
			form.lyr1().tabSearch().qmbProcedure().clear();
			form.lyr1().tabSearch().qmbAdditionalProcedure().clear();
			form.lyr1().tabSearch().qmbConsultant().clear();
			form.lyr1().tabSearch().chkMultiService().setValue(null);
			form.lyr1().tabSearch().cmbTheatres().setValue(null);
			form.lyr1().tabSearch().cmbAnaesType().setValue(null);
		}
		
		form.getLocalContext().setSearchCriteria(null);
	}


	private void loadReferralDetails()
	{
		ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
		populateReferralDetailsControlsFromData(voReferral);
	}
	
	private void populateReferralDetailsControlsFromData(ReferralBookingVo voReferral)
	{
		clearReferralDetails();
		if(voReferral == null)
			return;
		
		//WDEV-8144
		form.getLocalContext().setReferralCareContext(voReferral.getCareContext());
		
		if(voReferral.getReferralLetterDetailIsNotNull())
		{	
			form.lyr1().tabReferral().dteReferral().setValue(voReferral.getReferralLetterDetail().getDateOfReferral());
			form.lyr1().tabReferral().dteReferralLetter().setValue(voReferral.getReferralLetterDetail().getDateReferralReceived());
			
			if(voReferral.getReferralLetterDetail().getServiceIsNotNull())
			{
				form.lyr1().tabReferral().cmbReferralService().newRow(voReferral.getReferralLetterDetail().getService(), voReferral.getReferralLetterDetail().getService().getServiceName());
				form.lyr1().tabReferral().cmbReferralService().setValue(voReferral.getReferralLetterDetail().getService());
			}
			
			form.lyr1().tabReferral().lblEWKPI().setValue(voReferral.getReferralLetterDetail().getDaysToRTTBreachDateIsNotNull()?"End "+voReferral.getReferralLetterDetail().getDaysToRTTBreachDate()/7+" week KPI:":"End week KPI:");//WDEV-11713
			form.lyr1().tabReferral().dteEndDayKPI().setValue(voReferral.getReferralLetterDetail().getEndXdayKPI());//WDEV-11713
			form.getLocalContext().setKPIDays(voReferral.getReferralLetterDetail().getKPIDays());
			
			boolean isSurgical = form.getLocalContext().getPatientElectiveList() != null && WaitingCardAdmissionType.SURGICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()) ;
			boolean procedureExecutant = form.getLocalContext().getPatientElectiveList() != null && (ProcedureExecutant.LOGGED_IN_CLINICIAN.equals(form.getLocalContext().getPatientElectiveList().getProceduredToBeCarriedBy()) || ProcedureExecutant.NAMED_CONSULTANT.equals(form.getLocalContext().getPatientElectiveList().getProceduredToBeCarriedBy()));
			
			if (procedureExecutant && isSurgical)
			{
				 IMos medicDefault = domain.getMedic(form.getLocalContext().getPatientElectiveList().getProcedureCarriedOutBy(), voReferral.getReferralLetterDetail().getService());
				
				 if (medicDefault != null
						 && form.lyr1().tabSearch().qmbConsultant().getValue() == null) //WDEV-22409
				 {
					 form.lyr1().tabSearch().qmbConsultant().newRow(medicDefault, medicDefault.getIMosName());
					 form.lyr1().tabSearch().qmbConsultant().setValue(medicDefault);
					 form.getLocalContext().setWasConsultantDefaulted(Boolean.TRUE);
					 qmbConsultantValueChanged();
				 }
			}
		}
	
		populateInvApptTree(voReferral);
		
		form.getLocalContext().setLastReferralErod(voReferral.getReferralEROD());
	}
	
	private void qmbProcedureValueChanged()
	{
		form.lyr1().tabSearch().intRequiredProcTime().setValue(null);
		
		if(form.lyr1().tabSearch().qmbProcedure().getValue() == null)
			return;
		
		Integer primaryProcedureDuration = null;
		Integer secondaryProcedureDuration = null;
		
		if(form.lyr1().tabSearch().qmbProcedure().getValue() instanceof ProcedureLiteVo)
			primaryProcedureDuration = ((ProcedureLiteVo)form.lyr1().tabSearch().qmbProcedure().getValue()).getDurationInMins();
		
		if(form.lyr1().tabSearch().qmbAdditionalProcedure().getValue() instanceof ProcedureLiteVo)
			secondaryProcedureDuration = ((ProcedureLiteVo)form.lyr1().tabSearch().qmbAdditionalProcedure().getValue()).getDurationInMins();
		
		if (secondaryProcedureDuration == null)
			form.lyr1().tabSearch().intRequiredProcTime().setValue(primaryProcedureDuration);
		else if (primaryProcedureDuration != null)
			form.lyr1().tabSearch().intRequiredProcTime().setValue(primaryProcedureDuration != null && primaryProcedureDuration > secondaryProcedureDuration ? primaryProcedureDuration : secondaryProcedureDuration);
		else
			form.lyr1().tabSearch().intRequiredProcTime().setValue(secondaryProcedureDuration);
	}
	
	private void populateInvApptTree(ReferralBookingVo voReferral)
	{
		if(voReferral.getCurrentAppointmentsIsNotNull() && voReferral.getCurrentAppointments().size() > 0)
		{
			TreeNode apptNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(CURRENT_APPT_NODE, "Current Appointments");
			apptNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			apptNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getCurrentAppointments())
			{
				TreeNode node = apptNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}
			
			apptNode.setExpanded(true);
		}
		if(voReferral.getAppointmentsRequiringRebookIsNotNull() && voReferral.getAppointmentsRequiringRebook().size() > 0)
		{
			TreeNode rebookNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(REBOOK_APPT_NODE, "Appointments Requiring a Rebook");
			
			rebookNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			rebookNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getAppointmentsRequiringRebook())
			{
				TreeNode node = rebookNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}
			
			rebookNode.setExpanded(true);
		}
		if(voReferral.getOrdersRequiringApptIsNotNull() && voReferral.getOrdersRequiringAppt().size() > 0)
		{
			TreeNode invNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(INV_NODE, "Investigations requiring an Appointment");
			
			invNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			invNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(OrderInvestigationBookingVo voOrderInv : voReferral.getOrdersRequiringAppt())
			{
				TreeNode node = invNode.getNodes().add(voOrderInv, voOrderInv.toString());
				node.setCollapsedImage(form.getImages().OCRR.Investigation);
				node.setExpandedImage(form.getImages().OCRR.Investigation);
			}
			
			invNode.setExpanded(true);
		}
		if(voReferral.getOtherAppointmentsIsNotNull() && voReferral.getOtherAppointments().size() > 0)
		{
			TreeNode clinNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(OTHER_NODE, "Clinical Appointments");
			
			clinNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			clinNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getOtherAppointments())
			{
				TreeNode node = clinNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
				node.setEnabled(false);
			}
			
			clinNode.setExpanded(true);
		}
	}
	
	private void loadServices()
	{
		form.lyr1().tabSearch().cmbService().clear();
		ServiceLiteVoCollection voCollServices = domain.listActiveCanBeScheduledService();
		
		if (voCollServices != null)
		{
			for (int i = 0; i < voCollServices.size(); i++)
				form.lyr1().tabSearch().cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}
	}

	private void loadLocations()
	{
		form.lyr1().tabSearch().cmbHospital().clear();

		if (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getElectiveList() != null)
		{
			ElectiveListHospitalConfigBookTheatreVoCollection locations = form.getLocalContext().getPatientElectiveList().getElectiveList().getListLocations();

			if (locations != null)
			{
				for (ElectiveListHospitalConfigBookTheatreVo location : locations)
				{
					if (location == null || location.getListLocation() == null)
						continue;

					form.lyr1().tabSearch().cmbHospital().newRow(location.getListLocation(), location.getListLocation().getName());
				}
				
				if (locations.size() == 1 && locations.get(0) != null)
				{
					form.lyr1().tabSearch().cmbHospital().setValue(locations.get(0).getListLocation());
				}
			}
		}
		else
		{
			LocationLiteVoCollection voCollLoc = domain.listLocationLite();
			
			if (voCollLoc != null)
			{
				for (LocationLiteVo item : voCollLoc)
				{
					form.lyr1().tabSearch().cmbHospital().newRow(item, item.getName());
				}
				
				if (voCollLoc.size() == 1)
				{
					form.lyr1().tabSearch().cmbHospital().setValue(voCollLoc.get(0));
				}
			}
		}
	}
	
	private void clearReferralDetails()
	{
		form.lyr1().tabReferral().dteReferral().setValue(null);
		form.lyr1().tabReferral().dteReferralLetter().setValue(null);
		form.lyr1().tabReferral().dteEndDayKPI().setValue(null);
		form.lyr1().tabReferral().cmbReferralService().clear();
		form.lyr1().tabReferral().treInvAppts().clear();	
		form.getLocalContext().setReferralCareContext(null);
	}
	
	protected void onCmbTheatreTypeValueChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		
		boolean enableSearchCriteria = form.getGlobalContext().Scheduling.getTheatreAppointment() == null;
		
		boolean showAdditionalProcedure = form.getLocalContext().getPatientElectiveList() != null &&  form.getLocalContext().getPatientElectiveList().getSecondaryProcedure() != null;
		boolean isSurgical = form.getLocalContext().getPatientElectiveList() != null && WaitingCardAdmissionType.SURGICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()) ;
		boolean isEndoscopy = form.getLocalContext().getPatientElectiveList() != null && WaitingCardAdmissionType.ENDOSCOPY.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()) ;
		boolean noGeneralAnaesthetic = form.getLocalContext().getPatientElectiveList() != null && YesNo.NO.equals(form.getLocalContext().getPatientElectiveList().getGeneralAnaesthetic()) ;
		boolean hideAnaestheticType =  isEndoscopy && noGeneralAnaesthetic && form.getLocalContext().getPatientElectiveList() != null && (form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome() == null || form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome().getAnaestheticType() == null);
		boolean enableControl = !ConfigFlag.GEN.ENFORCE_WAITINGLIST_THEATRE_BOOKING_RULES.getValue();
		
		//form.lyr1().tabSearch().cmbService().setEnabled(enableSearchCriteria);
		form.lyr1().tabSearch().qmbProcedure().setEnabled(enableSearchCriteria && (enableControl || form.getLocalContext().getPatientElectiveList() == null));
		
		form.lyr1().tabSearch().qmbAdditionalProcedure().setEnabled(enableSearchCriteria && enableControl);
		form.lyr1().tabSearch().qmbAdditionalProcedure().setVisible(showAdditionalProcedure);
		form.lyr1().tabSearch().lblAdditionalProcedure().setVisible(showAdditionalProcedure);
		
		form.lyr1().tabSearch().chkMultiService().setEnabled(enableSearchCriteria && enableControl);
		form.lyr1().tabSearch().chkMultiService().setVisible(showAdditionalProcedure && isSurgical);
		
//		form.lyr1().tabSearch().qmbConsultant().setEnabled(enableSearchCriteria && (enableControl || !Boolean.TRUE.equals( form.getLocalContext().getWasConsultantDefaulted()))); //WDEV-22409
		//form.lyr1().tabSearch().cmbTheatreType().setEnabled(enableSearchCriteria);
		form.lyr1().tabSearch().cmbListType().setEnabled(enableSearchCriteria);
		
		form.lyr1().tabSearch().cmbTheatres().setEnabled(enableSearchCriteria);
		
		//form.lyr1().tabSearch().intRequiredProcTime().setEnabled(enableSearchCriteria);
		form.lyr1().tabSearch().imbClear().setEnabled(enableSearchCriteria);
		
		if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
		{
			form.lyr1().tabSearch().lblAnaesType().setVisible(!hideAnaestheticType);
			form.lyr1().tabSearch().cmbAnaesType().setVisible( !hideAnaestheticType);
			form.lyr1().tabSearch().cmbAnaesType().setEnabled(enableSearchCriteria && (enableControl || form.lyr1().tabSearch().cmbAnaesType().getValue() == null));
		}

		form.lyr1().tabSearch().lblPrimaryProcedureLaterality().setVisible(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getProcLaterality() != null);
		form.lyr1().tabSearch().lblSecondaryProcedureLaterality().setVisible(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getSecondaryProcLaterality() != null);
		
		SessionParentChildSlotVo voSlot = form.grdSelected().getValue();
		boolean slotAvailable = voSlot != null && voSlot.getAppointment() == null && voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SLOTOPENED); 
	
		//WDEV-22387
		PatientElectiveListBookTheatreVo electiveList = form.getLocalContext().getPatientElectiveList();
		
		boolean hasAppointment = electiveList != null && ((electiveList.getTCIDetails() != null && electiveList.getTCIDetails().getAppointment() != null)
					|| (electiveList.getTheatreAppointment() != null && electiveList.getTheatreAppointment().getCurrentStatusRecord() != null && !Status_Reason.CANCELLED.equals(electiveList.getTheatreAppointment().getCurrentStatusRecord().getStatus()) && appointmentIsInTheFuture(electiveList.getTheatreAppointment())));

		boolean appointmentCancelledOrCompleted = electiveList != null && electiveList.getTCIDetails() != null && electiveList.getTCIDetails().getAppointment() != null && electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord() != null
				&& Status_Reason.CANCELLED.equals(electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord().getStatus());

		//WDEV-13313
		if(engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
			form.getContextMenus().Scheduling.getBookTheatreSlotBOOKItem().setVisible(false);
		else
			form.getContextMenus().Scheduling.getBookTheatreSlotBOOKItem().setVisible(slotAvailable && (!hasAppointment || appointmentCancelledOrCompleted)); //WDEV-22387
		
		form.getContextMenus().Scheduling.getBookTheatreSlotSUSPENDItem().setVisible(slotAvailable);
		
		form.getContextMenus().Scheduling.getBookTheatreSlotRELEASEItem().setVisible(voSlot != null && voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SUSPENDED));
		
		form.getContextMenus().Scheduling.getBookTheatreSlotADDItem().setVisible(form.grdTheatreSession().getValue() != null && engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS));
		
		form.getContextMenus().Scheduling.getBookTheatreSlotMOVEItem().setVisible(voSlot != null && voSlot.getAppointmentIsNotNull() && voSlot.getAppointment().getApptStatusIsNotNull() && voSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED));
	}

	private boolean appointmentIsInTheFuture(Booking_AppointmentLiteVo theatreAppointment)
	{
		if(theatreAppointment == null)
			return false;
		
		if(theatreAppointment.getAppointmentDate() == null || theatreAppointment.getApptStartTime() == null)
			return false;
		
		DateTime apptDateTime = new DateTime(theatreAppointment.getAppointmentDate(), theatreAppointment.getApptStartTime());
		
		if(apptDateTime.isGreaterThan(new DateTime()))
			return true;
		
		return false;
	}
	
	private String getErodInfo()
	{
		if(form.getLocalContext().getLastReferralErod() == null)
			return null;
		
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append("<b>Earliest Date Offered: </b>" + form.getLocalContext().getLastReferralErod().getERODDate1());
		
		if(form.getLocalContext().getLastReferralErod().getERODDate2() != null)
		{
			tooltip.append("<br><b>Second Date Offered: </b>" + form.getLocalContext().getLastReferralErod().getERODDate2());
		}
		
		if(form.getLocalContext().getLastReferralErod().getPatAvailFromDate() != null)
		{
			tooltip.append("<br><b>Patient Available from Date: </b>" + form.getLocalContext().getLastReferralErod().getPatAvailFromDate());
		}
		
		tooltip.append("<br><b>EROD Type: </b>" + form.getLocalContext().getLastReferralErod().getERODType().getText());
		
		if(form.getLocalContext().getLastReferralErod().getAppointment() != null)
		{
			tooltip.append("<br><b>Appointment Date: </b>" + (form.getLocalContext().getLastReferralErod().getAppointment() != null ? form.getLocalContext().getLastReferralErod().getAppointment().getAppointmentDate() : ""));
			tooltip.append("<br><b>Clinic Name: </b>" + ((form.getLocalContext().getLastReferralErod().getAppointment() != null && form.getLocalContext().getLastReferralErod().getAppointment().getSession() != null) ? form.getLocalContext().getLastReferralErod().getAppointment().getSession().getName() : ""));
		}
		
		return tooltip.toString();
	}

	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(null);//wdev-22477
		
		if (form.getLocalContext().getPatientElectiveListIsNotNull()) //WDEV-22387
		{
			form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveList(form.getLocalContext().getPatientElectiveList()));
		}
		
		//WDEV-18943 - rewrote nested 'if' statements
		if (form.getForms().RefMan.BookTheatreSlotDetailDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			// WDEV-13243
			// Theatre appointment was re-booked - clear the global context
			form.getGlobalContext().Scheduling.setTheatreAppointment(null);
			refreshScreen();
			//wdev-13790
			if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
			{
				ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
				form.lyr1().tabReferral().treInvAppts().clear();
				populateInvApptTree(voReferral);
			//------

				form.getLocalContext().setLastReferralErod(voReferral.getReferralEROD());
			}
			updateControlsState();
			return;
		}
		if (form.getForms().Scheduling.SessionParentChildSlotDialog.equals(formName) && DialogResult.OK.equals(result))
		{	
			try
			{
				domain.addSlotToSession(form.grdTheatreSession().getValue(), form.getGlobalContext().Scheduling.getSessionParentChildSlot());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			refreshScreen();
			return;
		}
		if (form.getForms().Scheduling.ModifyMultipleSlotsDialog.equals(formName) && DialogResult.OK.equals(result))
		{				
			refreshScreen();
			return;
		}

		if (form.getForms().Scheduling.MoveAppointmentDialog.equals(formName) && DialogResult.OK.equals(result))
		{				
			refreshScreen();
			//wdev-13813
			if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
			{
				ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
				form.lyr1().tabReferral().treInvAppts().clear();
				if(voReferral != null)
					populateInvApptTree(voReferral);
			}
			//------
			return;
		}
		if (form.getForms().Scheduling.SortFixedTheatreAppointments.equals(formName) && DialogResult.OK.equals(result))
		{				
			if(form.grdTheatreSession().getValue() != null)
			{
				refreshScreen();
				//wdev-13813
				if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
				{
					ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
					form.lyr1().tabReferral().treInvAppts().clear();
					if(voReferral != null)
						populateInvApptTree(voReferral);
				}
				//------			
			}
			return;
		}
		else if (formName.equals(form.getForms().RefMan.ERODDialog))
		{
			if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
				form.getLocalContext().setLastReferralErod(domain.getLastTheatreEROD(form.getGlobalContext().RefMan.getCatsReferral()));
			updateControlsState();
			return; //WDEV-18461
		}

		// WDEV-13222
		// Refresh screen
		refreshScreen();
		
		//WDEV-18943  -------------ends here
	}

	/**
	 * 	//1) Fire Search
	 *	//2) Reselect Session
	 */
	private void refreshScreen()
	{
		clearContexts();
		SessionTheatreVo voSessionToReselect = form.grdTheatreSession().getValue();
		//WDEV-18461  - search criteria can be null/invalid
		String[] searchCriteriaValidationErrors = validateSearchCriteria(); //WDEV-18943
		if (searchCriteriaValidationErrors == null)
		{
			loadSessions();
		}	
		//-----------
		form.grdTheatreSession().setValue(voSessionToReselect);
		loadTheatreSlots();
		
		updateControlsState();
	}
	
	protected void onQmbProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		qmbProcedureValueChanged();
	}
	
	protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyr1().tabSearch().qmbProcedure().clear();

		IGenericItem[] procedures = domain.listProcedures(value);
		if(procedures != null)
		{
			for (int i = 0; i < procedures.length; i++)
			{
				if (procedures[i].getIGenericItemInfoName() != null)
					form.lyr1().tabSearch().qmbProcedure().newRow(procedures[i], procedures[i].getIGenericItemInfoName());
			}
			
			if(procedures.length == 1)
			{
				form.lyr1().tabSearch().qmbProcedure().setValue(procedures[0]);
				qmbProcedureValueChanged();
			}
			else if(procedures.length > 1)
				form.lyr1().tabSearch().qmbProcedure().showOpened();
		}	
	}
	
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria(true);
		clearGrids();
	}
	
	private void clearGrids()
	{
		form.grdTheatreSession().getRows().clear();
		form.grdSelected().getRows().clear();
		
		form.txtSessionComments().setValue(null);
		form.getLocalContext().setSessions(null);
		updateControlsState();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = validateSearchCriteria();
		
		if(errors == null)
		{
			loadSessions();
			updateControlsState();
			
		}
		else
			engine.showErrors(errors);		
		
	}
	
	protected void onTreInvApptsTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearContexts();
		engine.close(DialogResult.OK);
	}
	
	private void clearContexts()
	{
		form.getLocalContext().setSch_Booking(null);
		form.getLocalContext().setSelectedAppointments(null);
		form.getLocalContext().setSelectedSessions(null);
		form.getGlobalContext().Scheduling.setSch_BookingTheatre(null);
	}
	
	
	@Override
	protected void onGrdSelectedSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onGrdTheatreSessionSelectionChanged() throws PresentationLogicException
	{
		loadTheatreSlots();
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if(sender != null)
		{
			if(sender.equals(form.grdSelected()))
			{
				switch(menuItemID)
				{
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.BOOK:
						
						BookTheatreSlotDialogVo voData = new BookTheatreSlotDialogVo();
						
						BookTheatreSearchCriteriaVo searchCriteria = form.getLocalContext().getSearchCriteria();
						
						voData.setAppointmentDuration(searchCriteria != null ? searchCriteria.getTimeRequired() : null);
						voData.setKPIDate(form.lyr1().tabReferral().dteEndDayKPI().getValue());
						voData.setParentChildSlot(form.grdSelected().getValue());
						voData.setSession(form.grdTheatreSession().getValue());
						voData.setAnaestheticTypeToDefault(searchCriteria != null ? searchCriteria.getAnaestheticType() : null);
						
						voData.setTheatreApptToRebook(form.getGlobalContext().Scheduling.getTheatreAppointment());
						
						//when re-booking an appt make sure that the time required is updated
						if (voData.getTheatreApptToRebook() != null && searchCriteria != null && searchCriteria.getTimeRequired() != null)
						{
							voData.getTheatreApptToRebook().setCustomProcedureDuration(searchCriteria.getTimeRequired());
						}
					
						voData.setProcedureToDefault(searchCriteria != null ? searchCriteria.getPrimaryProcedure() : null);
						voData.setSecondaryProcedure(searchCriteria != null ? searchCriteria.getAdditionalProcedure() : null);
					
						if( form.getLocalContext().getPatientElectiveList() != null)
						{
							//procedure might have been changed so make sure its the same before defaulting laterality 
							//if (form.getLocalContext().getPatientElectiveList().getPrimaryProcedure() != null && form.lyr1().tabSearch().qmbProcedure().getValue() != null 
								//	&& form.getLocalContext().getPatientElectiveList().getPrimaryProcedure().getID_Procedure().equals(((ProcedureLiteVo)form.lyr1().tabSearch().qmbProcedure().getValue()).getID_Procedure()))
							voData.setLaterality(form.getLocalContext().getPatientElectiveList().getProcLaterality());
							
							//if (form.getLocalContext().getPatientElectiveList().getSecondaryProcedure() != null && form.lyr1().tabSearch().qmbAdditionalProcedure().getValue() != null 
								//	&& form.getLocalContext().getPatientElectiveList().getSecondaryProcedure().getID_Procedure().equals(((ProcedureLiteVo)form.lyr1().tabSearch().qmbAdditionalProcedure().getValue()).getID_Procedure()))
							voData.setSecondaryProcedureLaterality(form.getLocalContext().getPatientElectiveList().getSecondaryProcLaterality());
						}
						
						voData.setConsultantToDefault(searchCriteria != null ? searchCriteria.getConsultant() : null);
						voData.setPatientElectiveList(form.getLocalContext().getPatientElectiveList());
						
						form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);
						
						form.getGlobalContext().RefMan.setReferralEROD(form.getLocalContext().getLastReferralErod());
						engine.open(form.getForms().RefMan.BookTheatreSlotDetailDialog, new Object[] {form.getLocalContext().getReferralCareContext()});
						break;
						
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.ADD:
						form.getGlobalContext().Scheduling.setSessionParentChildSlot(new SessionParentChildSlotVo());
						engine.open(form.getForms().Scheduling.SessionParentChildSlotDialog, new Object[] {form.getLocalContext().getSessionTheatre()} , "Insert Theatre Slot"); //WDEV-22972
					break;
					
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.SUSPEND:
						setContextInfoForModifyMultipleSlotsDialog();
						engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[]{Status_Reason.SUSPENDED}, "Suspend");
					break;
					
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.RELEASE:
						setContextInfoForModifyMultipleSlotsDialog();
						engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[]{Status_Reason.SLOTOPENED}, "Release");
					break;
					
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.MOVE:
						setContextInfoForMoveAppointmentDialog();
						//wdev-13814
						if(form.getGlobalContext().Scheduling.getMoveAppointmentDialogDataIsNotNull())
						{
							BookingAppointmentTheatreLiteVo appointmentVo = form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getFromSlotIsNotNull() ? form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getFromSlot().getAppointment():null;
							BookingAppointmentTheatreLiteVo tempVo = domain.getBookingAppointmentTheatre(appointmentVo);
							if(tempVo != null)
							{
							
								if(tempVo.getVersion_Booking_Appointment() != appointmentVo.getVersion_Booking_Appointment() )
								{
									engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
									refreshScreen();
									
									if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
									{
										ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
										form.lyr1().tabReferral().treInvAppts().clear();
										if(voReferral != null)
											populateInvApptTree(voReferral);
									}
									return;
									
								}
								
							}
							
						}
						//----------
						engine.open(form.getForms().Scheduling.MoveAppointmentDialog, new Object[]{Boolean.TRUE});
					break;
					default:
				}
			}
		}
	}

	/**
	 * 
	 */
	private void setContextInfoForMoveAppointmentDialog()
	{
		MoveAppointmentDataVo voData = new MoveAppointmentDataVo();
		voData.setFromSlot(form.grdSelected().getValue());
		form.getGlobalContext().Scheduling.setMoveAppointmentDialogData(voData);
	}

	/**
	 * 
	 */
	private void setContextInfoForModifyMultipleSlotsDialog()
	{
		BookTheatreSlotDialogVo voData;
		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(new BookTheatreSlotDialogVo());
		
		voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		voData.setParentChildSlot(form.grdSelected().getValue());
		voData.setSession(form.grdTheatreSession().getValue());
		
		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);
	}
	
	class ListOwnerNameComparator implements Comparator<Object>  //WDEV-20017
	{
		private int order = 1;
		public ListOwnerNameComparator()
		{
			order = 1;
		}
		public ListOwnerNameComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}

		public int compare(Object o1, Object o2)
		{			
			{
				Session_ListOwnerVo o1Vo = (Session_ListOwnerVo) o1;
				Session_ListOwnerVo o2Vo = (Session_ListOwnerVo) o2;

				if (o1Vo != null && o1Vo.getHcp() != null && o1Vo.getHcp().getMosIsNotNull() && o1Vo.getHcp().getMos().getName() != null && o1Vo.getHcp().getMos().getName().getSurnameIsNotNull() && o2 != null && o2Vo != null && o2Vo.getHcp() != null && o1Vo.getHcp().getMosIsNotNull() && o2Vo.getHcp().getMos().getName() != null && o2Vo.getHcp().getMos().getName().getSurnameIsNotNull())
					return order * o1Vo.getHcp().getMos().getName().getSurname().compareToIgnoreCase(o2Vo.getHcp().getMos().getName().getSurname());

				if (o1Vo == null || !(o1Vo.getHcp() != null) || !o1Vo.getHcp().getMosIsNotNull())
					return -1 * order;

				if (o2Vo == null || !(o2Vo.getHcp() != null) || !o2Vo.getHcp().getMosIsNotNull())
					return order;
			}

			return 0;
		}
	}

	@Override
	protected void onQmbAdditionalProcedureValueChanged() throws PresentationLogicException
	{
		qmbProcedureValueChanged();
		
	}

	@Override
	protected void onQmbAdditionalProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.lyr1().tabSearch().qmbAdditionalProcedure().clear();

		IGenericItem[] procedures = domain.listProcedures(value);
		
		if(procedures != null)
		{
			for (int i = 0; i < procedures.length; i++)
			{
				if (procedures[i].getIGenericItemInfoName() != null)
					form.lyr1().tabSearch().qmbAdditionalProcedure().newRow(procedures[i], procedures[i].getIGenericItemInfoName());
			}
			
			if(procedures.length == 1)
			{
				form.lyr1().tabSearch().qmbAdditionalProcedure().setValue(procedures[0]);
				qmbProcedureValueChanged();
			}
			else if(procedures.length > 1)
				form.lyr1().tabSearch().qmbAdditionalProcedure().showOpened();
		}	
	}

	@Override
	protected void onQmbConsultantValueChanged() throws PresentationLogicException
	{
		qmbConsultantValueChanged();
		
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException
	{
		form.lyr1().tabSearch().qmbConsultant().clear();
		
		IMos[] medics = null;
		
		ServiceLiteVo electiveListService = form.lyr1().tabSearch().cmbService().getValue();
		
		if (form.getLocalContext().getPatientElectiveList() != null)
		{
			
			if (WaitingCardAdmissionType.SURGICAL.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()))
			{
				/*
				if (ProcedureExecutant.ANY_CONSULTANT.equals(form.getLocalContext().getPatientElectiveList().getProceduredToBeCarriedBy()))
				{
					medics = domain.getMedics(value, null, electiveListService, Boolean.TRUE, null);
				}
				else if (ProcedureExecutant.ANY.equals(form.getLocalContext().getPatientElectiveList().getProceduredToBeCarriedBy()))
				{
					medics = domain.getMedics(value, null, electiveListService, Boolean.TRUE, null);
				}
				else
				*/
					medics = domain.getMedics(value, null, electiveListService, Boolean.TRUE, null);
			}
			else if (WaitingCardAdmissionType.ENDOSCOPY.equals(form.getLocalContext().getPatientElectiveList().getAdmissionType()))
			{
				medics = domain.getMedics(value, null, electiveListService, Boolean.TRUE, Boolean.TRUE);
			}
			else
				medics = domain.getMedics(value, null, electiveListService, Boolean.TRUE, null);
		}
		else
			medics = domain.getMedics(value, null, electiveListService, Boolean.TRUE, null);
		
		
		if(medics != null)
		{
			for (int i = 0; i < medics.length; i++)
			{
				if (medics[i] == null)
					continue;
					
				form.lyr1().tabSearch().qmbConsultant().newRow(medics[i], medics[i].getIMosName());
			}
			
			if(medics.length == 1)
			{
				form.lyr1().tabSearch().qmbConsultant().setValue(medics[0]);
				qmbConsultantValueChanged();
			}
			else if(medics.length > 1)
				form.lyr1().tabSearch().qmbConsultant().showOpened();
			
		}	
		
	}

	private void qmbConsultantValueChanged()
	{
		IMos consultant = form.lyr1().tabSearch().qmbConsultant().getValue();
		
		if (consultant != null)
		{
			MedicGradeVo medicGrade = domain.getMedicGrade(consultant.getIMosHcpId());
			
			if (medicGrade != null)
			{
				if (MedicGrade.CONS.equals(medicGrade.getGrade()))
					form.lyr1().tabSearch().cmbListType().setValue(ProfileListType.CONSULTANT);
				else if (MedicGrade.REG.equals(medicGrade.getGrade()))
					form.lyr1().tabSearch().cmbListType().setValue(ProfileListType.REGISTRAR);
				else if (MedicGrade.SHO.equals(medicGrade.getGrade()))
					form.lyr1().tabSearch().cmbListType().setValue(ProfileListType.SHO);
			}
		}
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException 
	{
		form.lyr1().tabSearch().cmbTheatres().clear();
		
		LocationLiteVoCollection voTheatres = domain.listLocationsByParentLocation(form.lyr1().tabSearch().cmbHospital().getValue());
		if(voTheatres != null)
		{
			for (int i = 0; i < voTheatres.size(); i++)
			{	
				form.lyr1().tabSearch().cmbTheatres().newRow(voTheatres.get(i), voTheatres.get(i).getName());
			}
			if(voTheatres.size() == 1)
				form.lyr1().tabSearch().cmbTheatres().setValue(voTheatres.get(0));
		}	
	}


}
