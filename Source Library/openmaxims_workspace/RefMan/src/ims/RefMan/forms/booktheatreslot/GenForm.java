//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.booktheatreslot;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbAnaesTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.AnaestheticType getValue()
				{
					return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTheatresComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbListTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ProfileListType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ProfileListType getValue()
				{
					return (ims.scheduling.vo.lookups.ProfileListType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ProfileListType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.resource.place.vo.LocationRefVo getValue()
				{
					return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
				}
				public void setValue(ims.core.resource.place.vo.LocationRefVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTheatreTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.TheatreType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.TheatreType getValue()
				{
					return (ims.scheduling.vo.lookups.TheatreType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.TheatreType value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbConsultantComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.vo.interfaces.IMos value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.vo.interfaces.IMos value)
				{
					return super.control.removeRow(value);
				}
				public ims.vo.interfaces.IMos getValue()
				{
					return (ims.vo.interfaces.IMos)super.control.getValue();
				}
				public void setValue(ims.vo.interfaces.IMos value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbAdditionalProcedureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.vo.interfaces.IGenericItem value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.vo.interfaces.IGenericItem value)
				{
					return super.control.removeRow(value);
				}
				public ims.vo.interfaces.IGenericItem getValue()
				{
					return (ims.vo.interfaces.IGenericItem)super.control.getValue();
				}
				public void setValue(ims.vo.interfaces.IGenericItem value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbProcedureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.vo.interfaces.IGenericItem value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.vo.interfaces.IGenericItem value)
				{
					return super.control.removeRow(value);
				}
				public ims.vo.interfaces.IGenericItem getValue()
				{
					return (ims.vo.interfaces.IGenericItem)super.control.getValue();
				}
				public void setValue(ims.vo.interfaces.IGenericItem value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 432, 142, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaes. Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 680, 91, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Laterality>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 680, 65, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Laterality>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 142, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 91, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 277, 13, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 13, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 448, 40, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Theatres:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 432, 168, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Time Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 116, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 448, 13, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Hospital:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 65, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 600, 168, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "mins", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 168, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Type:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 304, 11, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 144, 11, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 520, 140, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAnaesTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAnaesTypeTemp);
				cmbAnaesTypeComboBox cmbAnaesType = (cmbAnaesTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaesTypeComboBox.class, m_cmbAnaesTypeTemp);
				super.addComboBox(cmbAnaesType);
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 520, 37, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbTheatresTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTheatresTemp);
				cmbTheatresComboBox cmbTheatres = (cmbTheatresComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatresComboBox.class, m_cmbTheatresTemp);
				super.addComboBox(cmbTheatres);
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 144, 140, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbListTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbListTypeTemp);
				cmbListTypeComboBox cmbListType = (cmbListTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeComboBox.class, m_cmbListTypeTemp);
				super.addComboBox(cmbListType);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 144, 37, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbServiceTemp);
				cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
				super.addComboBox(cmbService);
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 520, 11, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbHospitalTemp);
				cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
				super.addComboBox(cmbHospital);
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 144, 166, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTheatreTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTheatreTypeTemp);
				cmbTheatreTypeComboBox cmbTheatreType = (cmbTheatreTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreTypeComboBox.class, m_cmbTheatreTypeTemp);
				super.addComboBox(cmbTheatreType);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 144, 114, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbConsultantTemp);
				qmbConsultantComboBox qmbConsultant = (qmbConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantComboBox.class, m_qmbConsultantTemp);
				super.addComboBox(qmbConsultant);
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 144, 89, 520, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbAdditionalProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbAdditionalProcedureTemp);
				qmbAdditionalProcedureComboBox qmbAdditionalProcedure = (qmbAdditionalProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAdditionalProcedureComboBox.class, m_qmbAdditionalProcedureTemp);
				super.addComboBox(qmbAdditionalProcedure);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 144, 63, 520, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureTemp);
				qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
				super.addComboBox(qmbProcedure);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 520, 120, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Multi-Service Case", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 520, 166, 60, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(4)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 778, 165, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 744, 165, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblAnaesType()
			{
				return (Label)super.getControl(0);
			}
			public Label lblSecondaryProcedureLaterality()
			{
				return (Label)super.getControl(1);
			}
			public Label lblPrimaryProcedureLaterality()
			{
				return (Label)super.getControl(2);
			}
			public Label lblAdditionalProcedure()
			{
				return (Label)super.getControl(4);
			}
			public Label lblTheatres()
			{
				return (Label)super.getControl(7);
			}
			public DateControl dteTo()
			{
				return (DateControl)super.getControl(15);
			}
			public DateControl dteFrom()
			{
				return (DateControl)super.getControl(16);
			}
			public cmbAnaesTypeComboBox cmbAnaesType()
			{
				return (cmbAnaesTypeComboBox)super.getComboBox(0);
			}
			public cmbTheatresComboBox cmbTheatres()
			{
				return (cmbTheatresComboBox)super.getComboBox(1);
			}
			public cmbListTypeComboBox cmbListType()
			{
				return (cmbListTypeComboBox)super.getComboBox(2);
			}
			public cmbServiceComboBox cmbService()
			{
				return (cmbServiceComboBox)super.getComboBox(3);
			}
			public cmbHospitalComboBox cmbHospital()
			{
				return (cmbHospitalComboBox)super.getComboBox(4);
			}
			public cmbTheatreTypeComboBox cmbTheatreType()
			{
				return (cmbTheatreTypeComboBox)super.getComboBox(5);
			}
			public qmbConsultantComboBox qmbConsultant()
			{
				return (qmbConsultantComboBox)super.getComboBox(6);
			}
			public qmbAdditionalProcedureComboBox qmbAdditionalProcedure()
			{
				return (qmbAdditionalProcedureComboBox)super.getComboBox(7);
			}
			public qmbProcedureComboBox qmbProcedure()
			{
				return (qmbProcedureComboBox)super.getComboBox(8);
			}
			public CheckBox chkMultiService()
			{
				return (CheckBox)super.getControl(26);
			}
			public IntBox intRequiredProcTime()
			{
				return (IntBox)super.getControl(27);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(28);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(29);
			}
		}
		public static class tabReferralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbReferralServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.clinical.vo.ServiceRefVo getValue()
				{
					return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
				}
				public void setValue(ims.core.clinical.vo.ServiceRefVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 114, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "End week KPI:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 50, 147, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Letter Received:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 82, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Service:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 163, 48, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 163, 16, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 163, 112, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 163, 80, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbReferralServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReferralServiceTemp);
				cmbReferralServiceComboBox cmbReferralService = (cmbReferralServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReferralServiceComboBox.class, m_cmbReferralServiceTemp);
				super.addComboBox(cmbReferralService);
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 404, 16, 414, 152, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public Label lblEWKPI()
			{
				return (Label)super.getControl(1);
			}
			public DateControl dteReferralLetter()
			{
				return (DateControl)super.getControl(4);
			}
			public DateControl dteReferral()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteEndDayKPI()
			{
				return (DateControl)super.getControl(6);
			}
			public cmbReferralServiceComboBox cmbReferralService()
			{
				return (cmbReferralServiceComboBox)super.getComboBox(0);
			}
			public TreeView treInvAppts()
			{
				return (TreeView)super.getControl(8);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSearchContainer m_tabSearchContainer = (tabSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSearchContainer.class, m_tabSearch, factory);
			super.addContainer(m_tabSearch, m_tabSearchContainer);
			ims.framework.utils.SizeInfo m_tabSearchDesignSize = new ims.framework.utils.SizeInfo(832, 224);
			ims.framework.utils.SizeInfo m_tabSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
			m_tabSearchContainer.setContext(form, appForm, m_tabSearch, loader, form_images_local, contextMenus, startControlID, m_tabSearchDesignSize, m_tabSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabReferral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Referral Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabReferralContainer m_tabReferralContainer = (tabReferralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReferralContainer.class, m_tabReferral, factory);
			super.addContainer(m_tabReferral, m_tabReferralContainer);
			ims.framework.utils.SizeInfo m_tabReferralDesignSize = new ims.framework.utils.SizeInfo(832, 224);
			ims.framework.utils.SizeInfo m_tabReferralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
			m_tabReferralContainer.setContext(form, appForm, m_tabReferral, loader, form_images_local, contextMenus, startControlID, m_tabReferralDesignSize, m_tabReferralRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSearch().setVisible(false);
			tabReferral().setVisible(false);
		}
		public void settabSearchEnabled(boolean value)
		{
			tabSearch().setEnabled(value);
		}
		public void settabReferralEnabled(boolean value)
		{
			tabReferral().setEnabled(value);
		}
		public void showtabSearch()
		{
			tabReferral().setVisible(false);
			tabSearch().setVisible(true);
		}
		public void showtabReferral()
		{
			tabSearch().setVisible(false);
			tabReferral().setVisible(true);
		}

		public tabSearchContainer tabSearch()
		{
			return (tabSearchContainer)super.layers.get(0);
		}
		public tabReferralContainer tabReferral()
		{
			return (tabReferralContainer)super.layers.get(1);
		}
	}
	public static class grdSelectedRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSelectedRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDummyIdReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDummyIdReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDummyIdOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDummyId(String value)
		{
			super.row.setTooltip(0, value);
		}
		public Integer getColDummyId()
		{
			return (Integer)super.row.get(0);
		}
		public void setColDummyId(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellColDummyIdTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColStartTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColStartTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColStartTimeOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColStartTime(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.Time getColStartTime()
		{
			return (ims.framework.utils.Time)super.row.get(1);
		}
		public void setColStartTime(ims.framework.utils.Time value)
		{
			super.row.set(1, value);
		}
		public void setCellColStartTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColMinsReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColMinsReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColMinsOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColMins(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColMins()
		{
			return (String)super.row.get(2);
		}
		public void setColMins(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColMinsTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColPatientReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColPatientReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColPatientOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColPatient(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColPatient()
		{
			return (String)super.row.get(3);
		}
		public void setColPatient(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColPatientTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColProcedureReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColProcedureOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColProcedure(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.ProcedureLiteVo getColProcedure()
		{
			return (ims.core.vo.ProcedureLiteVo)super.row.get(4);
		}
		public void setColProcedure(ims.core.vo.ProcedureLiteVo value)
		{
			super.row.set(4, value);
		}
		public void setCellColProcedureTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.scheduling.vo.SessionParentChildSlotVo getValue()
		{
			return (ims.scheduling.vo.SessionParentChildSlotVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionParentChildSlotVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSelectedRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSelectedRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSelectedRow get(int index)
		{
			return new grdSelectedRow(super.collection.get(index));
		}
		public grdSelectedRow newRow()
		{
			return new grdSelectedRow(super.collection.newRow());
		}
		public grdSelectedRow newRow(boolean autoSelect)
		{
			return new grdSelectedRow(super.collection.newRow(autoSelect));
		}
		public grdSelectedRow newRowAt(int index)
		{
			return new grdSelectedRow(super.collection.newRowAt(index));
		}
		public grdSelectedRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSelectedRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSelectedGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
		}
		private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.scheduling.vo.SessionParentChildSlotVoCollection getValues()
		{
			ims.scheduling.vo.SessionParentChildSlotVoCollection listOfValues = new ims.scheduling.vo.SessionParentChildSlotVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.SessionParentChildSlotVo getValue()
		{
			return (ims.scheduling.vo.SessionParentChildSlotVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionParentChildSlotVo value)
		{
			super.grid.setValue(value);
		}
		public grdSelectedRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSelectedRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSelectedRowCollection getRows()
		{
			return new grdSelectedRowCollection(super.grid.getRows());
		}
		public grdSelectedRow getRowByValue(ims.scheduling.vo.SessionParentChildSlotVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSelectedRow(row);
		}
		public void setColDummyIdHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDummyIdHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColStartTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColStartTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColMinsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColMinsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColPatientHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColPatientHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdTheatreSessionRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTheatreSessionRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDate(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Date getColDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setColDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColConsultantReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColConsultantOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColConsultant(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColConsultant()
		{
			return (String)super.row.get(1);
		}
		public void setColConsultant(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColConsultantTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColListTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColListTypeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColListTypeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColListType(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColListType()
		{
			return (String)super.row.get(2);
		}
		public void setColListType(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColListTypeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColLocationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColLocationOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColLocation(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColLocation()
		{
			return (String)super.row.get(3);
		}
		public void setColLocation(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColLocationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColNoBookedReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColNoBookedReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColNoBookedOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColNoBooked(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColNoBooked()
		{
			return (String)super.row.get(4);
		}
		public void setColNoBooked(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColNoBookedTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColTimeRemainingReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColTimeRemainingReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColTimeRemainingOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColTimeRemaining(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColTimeRemaining()
		{
			return (String)super.row.get(5);
		}
		public void setColTimeRemaining(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColTimeRemainingTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.scheduling.vo.SessionTheatreVo getValue()
		{
			return (ims.scheduling.vo.SessionTheatreVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionTheatreVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTheatreSessionRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTheatreSessionRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTheatreSessionRow get(int index)
		{
			return new grdTheatreSessionRow(super.collection.get(index));
		}
		public grdTheatreSessionRow newRow()
		{
			return new grdTheatreSessionRow(super.collection.newRow());
		}
		public grdTheatreSessionRow newRow(boolean autoSelect)
		{
			return new grdTheatreSessionRow(super.collection.newRow(autoSelect));
		}
		public grdTheatreSessionRow newRowAt(int index)
		{
			return new grdTheatreSessionRow(super.collection.newRowAt(index));
		}
		public grdTheatreSessionRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTheatreSessionRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTheatreSessionGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.scheduling.vo.SessionTheatreVoCollection getValues()
		{
			ims.scheduling.vo.SessionTheatreVoCollection listOfValues = new ims.scheduling.vo.SessionTheatreVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.SessionTheatreVo getValue()
		{
			return (ims.scheduling.vo.SessionTheatreVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionTheatreVo value)
		{
			super.grid.setValue(value);
		}
		public grdTheatreSessionRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTheatreSessionRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTheatreSessionRowCollection getRows()
		{
			return new grdTheatreSessionRowCollection(super.grid.getRows());
		}
		public grdTheatreSessionRow getRowByValue(ims.scheduling.vo.SessionTheatreVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTheatreSessionRow(row);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColListTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColListTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColNoBookedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColNoBookedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColTimeRemainingHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColTimeRemainingHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuBookTheatreSlot = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuBookTheatreSlotBOOKItem = factory.createMenuItem(startControlID.intValue() + 1, "Book Into", true, false, new Integer(114103), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4200002)))
			contextMenus.Scheduling.contextMenuBookTheatreSlot.add(contextMenus.Scheduling.contextMenuBookTheatreSlotBOOKItem);
		contextMenus.Scheduling.contextMenuBookTheatreSlotADDItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Slot", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4200001)))
			contextMenus.Scheduling.contextMenuBookTheatreSlot.add(contextMenus.Scheduling.contextMenuBookTheatreSlotADDItem);
		contextMenus.Scheduling.contextMenuBookTheatreSlotSUSPENDItem = factory.createMenuItem(startControlID.intValue() + 3, "Suspend", true, false, new Integer(114134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4200003)))
			contextMenus.Scheduling.contextMenuBookTheatreSlot.add(contextMenus.Scheduling.contextMenuBookTheatreSlotSUSPENDItem);
		contextMenus.Scheduling.contextMenuBookTheatreSlotRELEASEItem = factory.createMenuItem(startControlID.intValue() + 4, "Release Slot", true, false, new Integer(114135), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4200004)))
			contextMenus.Scheduling.contextMenuBookTheatreSlot.add(contextMenus.Scheduling.contextMenuBookTheatreSlotRELEASEItem);
		contextMenus.Scheduling.contextMenuBookTheatreSlotMOVEItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Appointment", true, false, new Integer(102211), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4200005)))
			contextMenus.Scheduling.contextMenuBookTheatreSlot.add(contextMenus.Scheduling.contextMenuBookTheatreSlotMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuBookTheatreSlot);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 565, 832, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 448, 240, 392, 320, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSelectedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuBookTheatreSlot, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSelectedTemp);
		grdSelectedGrid grdSelected = (grdSelectedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSelectedGrid.class, m_grdSelectedTemp);
		grdSelected.addIntColumn("Dummy", 0, 0, 0, true, true, null, false, 0, true, 0);
		grdSelected.addTimeColumn("Time", 0, 0, 45, false, true, false, null, false, 0, true);
		grdSelected.addStringColumn("Mins", 0, 0, 35, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSelected.addStringColumn("Patient", 0, 0, 155, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSelected.addStringColumn("Procedure", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSelected);
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 432, 320, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdTheatreSessionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTheatreSessionTemp);
		grdTheatreSessionGrid grdTheatreSession = (grdTheatreSessionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTheatreSessionGrid.class, m_grdTheatreSessionTemp);
		grdTheatreSession.addDateColumn("Date", 0, 0, 65, true, true, null, false, 1, false);
		grdTheatreSession.addStringColumn("Consultant(s)", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addStringColumn("List Type", 0, 0, 65, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addStringColumn("Hospital", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addStringColumn("No.", 0, 1, 35, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addStringColumn("Remaining", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdTheatreSession);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(2);
	}
	public TextBox txtSessionComments()
	{
		return (TextBox)super.getControl(3);
	}
	public grdSelectedGrid grdSelected()
	{
		return (grdSelectedGrid)super.getGrid(0);
	}
	public grdTheatreSessionGrid grdTheatreSession()
	{
		return (grdTheatreSessionGrid)super.getGrid(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				SortTheatreAppointments = new LocalFormName(114174);
				PrintAppointment = new LocalFormName(114163);
				SessionParentChildSlotDialog = new LocalFormName(114103);
				ModifyMultipleSlotsDialog = new LocalFormName(114104);
				SortFixedTheatreAppointments = new LocalFormName(114106);
				MoveAppointmentDialog = new LocalFormName(114107);
			}
			public final FormName SortTheatreAppointments;
			public final FormName PrintAppointment;
			public final FormName SessionParentChildSlotDialog;
			public final FormName ModifyMultipleSlotsDialog;
			public final FormName SortFixedTheatreAppointments;
			public final FormName MoveAppointmentDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookTheatreSlotDetailDialog = new LocalFormName(114102);
				TheatreAvailability = new LocalFormName(134210);
				ERODDialog = new LocalFormName(134216);
			}
			public final FormName BookTheatreSlotDetailDialog;
			public final FormName TheatreAvailability;
			public final FormName ERODDialog;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClosedFolder = new ImageHelper(102135, "Images/Core/closed_folder.png", new Integer(16), new Integer(16));
				OpenFolder = new ImageHelper(102134, "Images/Core/open_folder_simple.png", new Integer(16), new Integer(16));
				Date = new ImageHelper(102236, "Images/Core/Control_MonthCalendar.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClosedFolder;
			public final ims.framework.utils.Image OpenFolder;
			public final ims.framework.utils.Image Date;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Investigation;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Sessions = new ims.framework.ContextVariable("Sessions", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__Sessions_" + componentIdentifier + "");
			cxl_SelectedSessions = new ims.framework.ContextVariable("SelectedSessions", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SelectedSessions_" + componentIdentifier + "");
			cxl_SelectedAppointments = new ims.framework.ContextVariable("SelectedAppointments", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SelectedAppointments_" + componentIdentifier + "");
			cxl_SessionBookingRights = new ims.framework.ContextVariable("SessionBookingRights", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionBookingRights_" + componentIdentifier + "");
			cxl_Sch_Booking = new ims.framework.ContextVariable("Sch_Booking", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__Sch_Booking_" + componentIdentifier + "");
			cxl_KPIDays = new ims.framework.ContextVariable("KPIDays", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__KPIDays_" + componentIdentifier + "");
			cxl_ReferralCareContext = new ims.framework.ContextVariable("ReferralCareContext", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__ReferralCareContext_" + componentIdentifier + "");
			cxl_SelectedErodDates = new ims.framework.ContextVariable("SelectedErodDates", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SelectedErodDates_" + componentIdentifier + "");
			cxl_LastReferralErod = new ims.framework.ContextVariable("LastReferralErod", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier + "");
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_WasConsultantDefaulted = new ims.framework.ContextVariable("WasConsultantDefaulted", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__WasConsultantDefaulted_" + componentIdentifier + "");
			cxl_SearchCriteria = new ims.framework.ContextVariable("SearchCriteria", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SearchCriteria_" + componentIdentifier + "");
			cxl_SessionTheatre = new ims.framework.ContextVariable("SessionTheatre", prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier + "");
		}
		
		public boolean getSessionsIsNotNull()
		{
			return !cxl_Sessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionTheatreVoCollection getSessions()
		{
			return (ims.scheduling.vo.SessionTheatreVoCollection)cxl_Sessions.getValue(context);
		}
		public void setSessions(ims.scheduling.vo.SessionTheatreVoCollection value)
		{
			cxl_Sessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sessions = null;
		public boolean getSelectedSessionsIsNotNull()
		{
			return !cxl_SelectedSessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionTheatreVoCollection getSelectedSessions()
		{
			return (ims.scheduling.vo.SessionTheatreVoCollection)cxl_SelectedSessions.getValue(context);
		}
		public void setSelectedSessions(ims.scheduling.vo.SessionTheatreVoCollection value)
		{
			cxl_SelectedSessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSessions = null;
		public boolean getSelectedAppointmentsIsNotNull()
		{
			return !cxl_SelectedAppointments.getValueIsNull(context);
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVoCollection getSelectedAppointments()
		{
			return (ims.scheduling.vo.BookingAppointmentTheatreVoCollection)cxl_SelectedAppointments.getValue(context);
		}
		public void setSelectedAppointments(ims.scheduling.vo.BookingAppointmentTheatreVoCollection value)
		{
			cxl_SelectedAppointments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAppointments = null;
		public boolean getSessionBookingRightsIsNotNull()
		{
			return !cxl_SessionBookingRights.getValueIsNull(context);
		}
		public java.util.Map getSessionBookingRights()
		{
			return (java.util.Map)cxl_SessionBookingRights.getValue(context);
		}
		public void setSessionBookingRights(java.util.Map value)
		{
			cxl_SessionBookingRights.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionBookingRights = null;
		public boolean getSch_BookingIsNotNull()
		{
			return !cxl_Sch_Booking.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_BookingTheatreVo getSch_Booking()
		{
			return (ims.scheduling.vo.Sch_BookingTheatreVo)cxl_Sch_Booking.getValue(context);
		}
		public void setSch_Booking(ims.scheduling.vo.Sch_BookingTheatreVo value)
		{
			cxl_Sch_Booking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sch_Booking = null;
		public boolean getKPIDaysIsNotNull()
		{
			return !cxl_KPIDays.getValueIsNull(context);
		}
		public ims.framework.utils.Date[] getKPIDays()
		{
			return (ims.framework.utils.Date[])cxl_KPIDays.getValue(context);
		}
		public void setKPIDays(ims.framework.utils.Date[] value)
		{
			cxl_KPIDays.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_KPIDays = null;
		public boolean getReferralCareContextIsNotNull()
		{
			return !cxl_ReferralCareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getReferralCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_ReferralCareContext.getValue(context);
		}
		public void setReferralCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'ReferralCareContext' RefVo context variable.");
			if(value == null)
				cxl_ReferralCareContext.setValue(context, null);
			else
				cxl_ReferralCareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_ReferralCareContext = null;
		public boolean getSelectedErodDatesIsNotNull()
		{
			return !cxl_SelectedErodDates.getValueIsNull(context);
		}
		public java.util.Map getSelectedErodDates()
		{
			return (java.util.Map)cxl_SelectedErodDates.getValue(context);
		}
		public void setSelectedErodDates(java.util.Map value)
		{
			cxl_SelectedErodDates.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedErodDates = null;
		public boolean getLastReferralErodIsNotNull()
		{
			return !cxl_LastReferralErod.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODVo getLastReferralErod()
		{
			return (ims.RefMan.vo.ReferralERODVo)cxl_LastReferralErod.getValue(context);
		}
		public void setLastReferralErod(ims.RefMan.vo.ReferralERODVo value)
		{
			cxl_LastReferralErod.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastReferralErod = null;
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListBookTheatreVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListBookTheatreVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListBookTheatreVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getWasConsultantDefaultedIsNotNull()
		{
			return !cxl_WasConsultantDefaulted.getValueIsNull(context);
		}
		public Boolean getWasConsultantDefaulted()
		{
			return (Boolean)cxl_WasConsultantDefaulted.getValue(context);
		}
		public void setWasConsultantDefaulted(Boolean value)
		{
			cxl_WasConsultantDefaulted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasConsultantDefaulted = null;
		public boolean getSearchCriteriaIsNotNull()
		{
			return !cxl_SearchCriteria.getValueIsNull(context);
		}
		public ims.RefMan.vo.BookTheatreSearchCriteriaVo getSearchCriteria()
		{
			return (ims.RefMan.vo.BookTheatreSearchCriteriaVo)cxl_SearchCriteria.getValue(context);
		}
		public void setSearchCriteria(ims.RefMan.vo.BookTheatreSearchCriteriaVo value)
		{
			cxl_SearchCriteria.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SearchCriteria = null;
		public boolean getSessionTheatreIsNotNull()
		{
			return !cxl_SessionTheatre.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionTheatreVo getSessionTheatre()
		{
			return (ims.scheduling.vo.SessionTheatreVo)cxl_SessionTheatre.getValue(context);
		}
		public void setSessionTheatre(ims.scheduling.vo.SessionTheatreVo value)
		{
			cxl_SessionTheatre.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionTheatre = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class BookTheatreSlot implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int BOOK = 1;
				public static final int ADD = 2;
				public static final int SUSPEND = 3;
				public static final int RELEASE = 4;
				public static final int MOVE = 5;
			}
			public void disableAllBookTheatreSlotMenuItems()
			{
				this.contextMenuBookTheatreSlotBOOKItem.setEnabled(false);
				this.contextMenuBookTheatreSlotADDItem.setEnabled(false);
				this.contextMenuBookTheatreSlotSUSPENDItem.setEnabled(false);
				this.contextMenuBookTheatreSlotRELEASEItem.setEnabled(false);
				this.contextMenuBookTheatreSlotMOVEItem.setEnabled(false);
			}
			public void hideAllBookTheatreSlotMenuItems()
			{
				this.contextMenuBookTheatreSlotBOOKItem.setVisible(false);
				this.contextMenuBookTheatreSlotADDItem.setVisible(false);
				this.contextMenuBookTheatreSlotSUSPENDItem.setVisible(false);
				this.contextMenuBookTheatreSlotRELEASEItem.setVisible(false);
				this.contextMenuBookTheatreSlotMOVEItem.setVisible(false);
			}
			private Menu contextMenuBookTheatreSlot;
			public ReadOnlyMenuItem getBookTheatreSlotBOOKItem()
			{
				return this.contextMenuBookTheatreSlotBOOKItem;
			}
			private MenuItem contextMenuBookTheatreSlotBOOKItem;
			public ReadOnlyMenuItem getBookTheatreSlotADDItem()
			{
				return this.contextMenuBookTheatreSlotADDItem;
			}
			private MenuItem contextMenuBookTheatreSlotADDItem;
			public ReadOnlyMenuItem getBookTheatreSlotSUSPENDItem()
			{
				return this.contextMenuBookTheatreSlotSUSPENDItem;
			}
			private MenuItem contextMenuBookTheatreSlotSUSPENDItem;
			public ReadOnlyMenuItem getBookTheatreSlotRELEASEItem()
			{
				return this.contextMenuBookTheatreSlotRELEASEItem;
			}
			private MenuItem contextMenuBookTheatreSlotRELEASEItem;
			public ReadOnlyMenuItem getBookTheatreSlotMOVEItem()
			{
				return this.contextMenuBookTheatreSlotMOVEItem;
			}
			private MenuItem contextMenuBookTheatreSlotMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[258];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISACTIVE", "IsActive");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISLATERALITYAPPLICABLE", "IsLateralityApplicable");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISBILATERALLISTINGAPPLICABLE", "IsBilateralListingApplicable");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DEFAULTANAESTHETICTYPE", "DefaultAnaestheticType");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-GENDERSPECIFIC", "GenderSpecific");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISENDOSCOPY", "IsEndoscopy");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ENDOSCOPYTYPE", "EndoscopyType");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-MEDICALWL", "MedicalWL");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-ID", "ID_SessionParentChildSlot");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-STARTTIME", "StartTime");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-ISACTIVE", "IsActive");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-PROFILESLOT", "ProfileSlot");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-SESSDATETIME", "SessDateTime");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-STATUS", "Status");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-STATUSREASON", "StatusReason");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-SESSION", "Session");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-PARENTSLOT", "ParentSlot");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-DURATION", "Duration");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-CANCELBLOCKREASON", "CancelBlockReason");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-CANCELBLOCKCOMMENT", "CancelBlockComment");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-PRIORITY", "Priority");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-COMMENT", "Comment");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PROCEDUREDETAILS", "ProcedureDetails");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.Sch_BookingTheatre", "BO-1055100006-ID", "ID_Sch_Booking");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.Sch_BookingTheatre", "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ID", "ID_ReferralEROD");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODTYPE", "ERODType");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-SEQUENCE", "Sequence");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISACTIVE", "IsActive");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODREASON", "ERODReason");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-ID", "ID_Sch_Booking");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__ReferralCareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ID", "ID_ReferralEROD");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ERODTYPE", "ERODType");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-SEQUENCE", "Sequence");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ISACTIVE", "IsActive");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ERODREASON", "ERODReason");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__LastReferralErod_" + componentIdentifier, "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDURECARRIEDOUTBY", "ProcedureCarriedOutBy");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-MULTISERVICECASE", "MultiServiceCase");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-ID", "ID_Sch_Session");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-NAME", "Name");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-STARTTM", "StartTm");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-ENDTM", "EndTm");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-REMAININGTIME", "RemainingTime");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-THEATRETYPE", "TheatreType");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-SERVICE", "Service");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-SESSIONCOMMENT", "SessionComment");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-SESSIONPROFILETYPE", "SessionProfileType");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlot.__internal_x_context__SessionTheatre_" + componentIdentifier, "BO-1055100010-LISTTYPE", "ListType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
