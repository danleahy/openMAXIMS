//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Michael Noonan using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.rttmanagement;

import ims.RefMan.forms.rttmanagement.GenForm.lyrDetailsLayer.tabEventsContainer.grdEventRow;
import ims.RefMan.vo.CATSReferralRTTManagementVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.RTTManagementGridValueVo;
import ims.RefMan.vo.ReferralLetterDetailsLiteVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.vo.ReferralLiteVo;
import ims.core.vo.ReferralLiteVoCollection;
import ims.core.vo.enums.PatientJourneyAction;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.pathways.vo.PathwayClockRefVo;
import ims.pathways.vo.PathwayRTTClockImpactUndoVo;
import ims.pathways.vo.PathwayRTTStatusVo;
import ims.pathways.vo.PathwayRTTStatusVoCollection;
import ims.pathways.vo.PathwaysRTTClockImpactRefVo;
import ims.pathways.vo.PatientJourneyInterfaceVo;
import ims.pathways.vo.PatientJourneyJourneyTargetInterfaceVo;
import ims.pathways.vo.PatientPathwayJourneyRefVo;
import ims.pathways.vo.PatientPathwaysAwaitingValidationWorklistVo;
import ims.pathways.vo.PauseDetailsVo;
import ims.pathways.vo.PauseDetailsVoCollection;
import ims.pathways.vo.RTTManagementPathwayClockVo;
import ims.pathways.vo.RTTManagementPathwayClockVoCollection;
import ims.pathways.vo.lookups.RTTClockImpactSource;
import ims.scheduling.vo.AppointmentOutcomeDetailsVo;
import ims.scheduling.vo.AppointmentOutcomeDetailsVoCollection;

import java.util.ArrayList;
import java.util.Comparator;



public class Logic extends BaseLogic
{
	private static final Integer VALIDATE_MODE = new Integer(2);
	private static final Integer VIEW_RTTMANAGEMENT_FROM_VALIDATION_WORKLIST = new Integer(1); //WDEV-21155
	
	private static final Integer RTT_CODE_ACTIVITY_NOT_APPLICABLE_RTT = 98;
	

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		updateLinkButtons(args); //WDEV-21155
		//WDEV-21371 Process pathway passed from Pathways Awaiting Validation Worklist
//		open(null);
		PatientPathwayJourneyRefVo patientPathJournRefVo = null;
		if (args != null && args.length > 1 && args[1] != null && args[1] instanceof PatientPathwayJourneyRefVo)
		{
			patientPathJournRefVo = (PatientPathwayJourneyRefVo) args[1];
		}
		open(null, patientPathJournRefVo);
		//WDEV-21371
	}

	//http://jira/browse/WDEV-22534 new method
	private boolean isOutcomeEvent(grdEventRow row)
	{
		if(row!=null
			&&row.getValue()!=null
			&&row.getValue().getClockImpactSourceIsNotNull()
			&&row.getValue().getClockImpactSource().getID()==RTTClockImpactSource.APPOINTMENT_OUTCOME.getID())
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	@Override
	protected void OnbtnEditRTTEvent() throws PresentationLogicException
	{
		
		int size=form.lyrDetails().tabEvents().grdEvent().getRows().size();
		if((size-1)==form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex()&&form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex()!=-1
			&&isOutcomeEvent(form.lyrDetails().tabEvents().grdEvent().getSelectedRow())) //http://jira/browse/WDEV-22534
		{
			engine.showMessage("For an Appointment Outcome only historic events can be edited"); //http://jira/browse/WDEV-22534
			return;
		}
		
		if(form.lyrDetails().tabEvents().grdEvent().getSelectedRow()!=null && form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue()!=null)
		{
		engine.open(form.getForms().RefMan.RTTManagementEditEvent,new Object[]{form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getRttStatus()});
		}
		else
		{
			engine.showMessage("Please select a row to edit");
		}
	}
	
	@Override
	protected void OnMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getUndoMessageBoxIDIsNotNull() && messageBoxId == form.getLocalContext().getUndoMessageBoxID())
		{
			form.getLocalContext().setUndoMessageBoxID(null);

			if (DialogResult.YES.equals(result))
			{
				try
				{
					domain.undoRTTEvent(form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue());
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					e.printStackTrace();
				}

			}
			OnCmbReferralChanged();
		}
	}


	private boolean markReferralAsNotSubjectToRTTImpact(CatsReferralRefVo referral, boolean markAllClocksAsRIE)
	{
		try
		{
			domain.markReferralAsNotSubjectToRTT(referral, markAllClocksAsRIE);
			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			return false;
		}
	}
	
	
	
	@Override
	protected void onBtnMarkReferralAsNotSubjectRTTClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ConfirmReferralNotRTTImpact);
	}
	
	
	
	@Override
	protected void OnBtnAddRTTEvent() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.cmbReferral().getValue()!=null&&form.cmbReferral().getValue().getCatsReferralDetailsIsNotNull())
		{
			form.getGlobalContext().RefMan.setCatsReferral(form.cmbReferral().getValue().getCatsReferralDetails());
			DateTime mostRecentStatus = getMostRecentStatus();
			engine.open(form.getForms().Pathways.AdminEvent,new Object[]{FormMode.EDIT,mostRecentStatus} );
		}
		else
		{
			engine.showMessage("Please select a referral");
		}
	}
	
	private DateTime getMostRecentStatus()
	{
		DateTime mostRecent = null;
		if(form.lyrDetails().tabEvents().grdEvent().getRows()!=null)
		{
			for (int i=0;i<form.lyrDetails().tabEvents().grdEvent().getRows().size();i++)
			{
				grdEventRow row = form.lyrDetails().tabEvents().grdEvent().getRows().get(i);
				if(row.getValue()!=null
						&&row.getValue().getStatusDTIsNotNull()
						&&(mostRecent==null||mostRecent.isLessThan(row.getValue().getStatusDT())))
					{
						mostRecent=row.getValue().getStatusDT();
					}
			}
		}
		return mostRecent;
	}

	@Override
	protected void OnBtnUndoRTTEvent() throws ims.framework.exceptions.PresentationLogicException
	{
		int size=form.lyrDetails().tabEvents().grdEvent().getRows().size();
		if(form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex()==-1)
		{
			engine.showMessage("Select row to undo Status.");
			return;
		}
		if((size-1)!=form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex())//||form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex()==-1) // 0 based index
		{
			engine.showMessage("Only the most recent Status can be undone.");
			return;
		}
		if(form.lyrDetails().tabEvents().grdEvent().getSelectedRow()!=null
				&&form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue()!=null)
		{
			// get Event for Row
			String eventText = null;
			if(form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactRefIsNotNull())
			{
				eventText = domain.getEventDescription(form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactRef());
			}
			if (eventText!=null)
			{
				form.getLocalContext().setUndoMessageBoxID(engine.showMessage("Undoing this Status will RIE the event \""+eventText+"\", Do you want to continue?", "RTT Management" , MessageButtons.YESNO, MessageIcon.WARNING));
			}
			else
			{
				form.getLocalContext().setUndoMessageBoxID(engine.showMessage("Undoing Status, do you want to continue?", "RTT Management" , MessageButtons.YESNO, MessageIcon.WARNING));
			}
		}
	}

	@Override
	protected void OnBtnViewOutcome() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.lyrDetails().tabEvents().grdEvent().getSelectedRow() != null
				&& form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue() != null
				&& form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactRefIsNotNull()
				&& RTTClockImpactSource.APPOINTMENT_OUTCOME.equals(form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactSource()))
		{
			if (clockImpactIsCurrentForAppointment(form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactRef()))
			{
				engine.open(form.getForms().Scheduling.OutcomeSummaryDialog,new Object[]{form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactRef()});
			}
			else
			{
				engine.showMessage("Selected Appointment Outcome is no longer associated with an appointment. The appointment outcome was marked as RIE, but the RTT Clock Impact could not be reverted.");
			}
		}
		else
		{
			engine.showMessage("Please select a row with a Clinical Appointment context to view the outcome.");
		}
	}
	
	
	private boolean clockImpactIsCurrentForAppointment(PathwaysRTTClockImpactRefVo clockImpactRef)
	{
		return domain.isClockImpactValidForAppointment(clockImpactRef);
	}

	@Override
	protected void OnBtnViewAllComments() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney()!=null)
		{
			engine.open(form.getForms().Pathways.PatientJourneyComments);
		}
		else 
		{
			engine.showMessage("Patient Journey must be selected");
		}
	}
	@Override
	protected void OnBtnValidate() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Pathways.PatientJourneyComment, new Object[] { VALIDATE_MODE, PatientJourneyAction.ADDPATHWAYCOMMENT, null});
	}
	@Override
	protected void onDte62DayTargetValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void OnCmbReferralChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		clearControls();
		form.btnValidate().setEnabled(false);
		form.btnCompleteValidation().setEnabled(false); //WDEV-21371
		form.btnCompleteValidation().setTooltip(""); //WDEV-21371
		form.btnViewAllComments().setEnabled(false);
		form.btnUpdateR().setEnabled(false);
		CATSReferralRTTManagementVo cATSReferralRTTManagementVo =null;
		if( form.cmbReferral().getValue()!=null)
		{
			cATSReferralRTTManagementVo = domain.getReferralDetails(form.cmbReferral().getValue());
			form.getGlobalContext().RefMan.setCatsReferral(cATSReferralRTTManagementVo.toCatsReferralRefVo()); //WDEV-23296
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShortVo(cATSReferralRTTManagementVo.toCatsReferralRefVo())); //WDEV-23296
			
			if(cATSReferralRTTManagementVo!=null)
			{
				form.getLocalContext().setReferralDetails(cATSReferralRTTManagementVo.getReferralDetails());//WDEV-20854
				
				//WDEV-21371
//				form.btnValidate().setEnabled(true);
				if (cATSReferralRTTManagementVo.getJourney().getValidationCompletedBy() != null
						&& cATSReferralRTTManagementVo.getJourney().getValidationCompletedDT() != null)
				{
					StringBuffer validationCompleteTooltip = new StringBuffer();
					validationCompleteTooltip.append("<b>" + "Completed by : " + "</b>" + cATSReferralRTTManagementVo.getJourney().getValidationCompletedBy().getName().toString() + "<br>");
					validationCompleteTooltip.append("<b>" + "Completed on : " + "</b>" + cATSReferralRTTManagementVo.getJourney().getValidationCompletedDT().toString(ims.framework.utils.DateTimeFormat.MEDIUM) + "<br>");
					form.btnCompleteValidation().setTooltip(validationCompleteTooltip.toString());
					form.btnValidate().setEnabled(false);
					form.btnCompleteValidation().setText("Undo Validation Complete");
					form.btnCompleteValidation().setEnabled(true);
				} 
				else
				{
					form.btnValidate().setEnabled(true);
					if (cATSReferralRTTManagementVo.getJourney().getNextValidationDate() != null)
					{
						form.btnCompleteValidation().setText("Validation Complete");
						form.btnCompleteValidation().setEnabled(true);
					}
				}
				//WDEV-21371
				
				form.btnViewAllComments().setEnabled(true);
				form.btnUpdateR().setEnabled(true);
				if(cATSReferralRTTManagementVo.getJourney()!=null
					&&cATSReferralRTTManagementVo.getReferralDetails()!=null)
				{
					ReferralRefVo ref =  cATSReferralRTTManagementVo.getJourney().getReferral();
					int adjustedDays = domain.getCurrentPauseDetails(ref);
					if (cATSReferralRTTManagementVo.getReferralDetails().getEnd18WW() != null)
					{
						Date breachDate = (Date) cATSReferralRTTManagementVo.getReferralDetails().getEnd18WW().clone();  // WDEV-21127
						if(breachDate!=null && adjustedDays > 0)
						{
							form.dteAdjusted().setValue( breachDate.addDay(adjustedDays));
							form.dteAdjusted().setEnabled(false);
							form.lblAdjusted().setVisible(true);
							form.dteAdjusted().setVisible(true);
						}
						else
						{
							form.dteAdjusted().setVisible(false);
							form.lblAdjusted().setVisible(false);
						}
					}
					else
					{
						form.dteAdjusted().setVisible(false);
						form.lblAdjusted().setVisible(false);
					}
					
				}
				populateScreenFromdata(cATSReferralRTTManagementVo);
				form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(cATSReferralRTTManagementVo.getJourney());
				form.getLocalContext().setJourney(cATSReferralRTTManagementVo.getJourney());
				
				//WDEV-22718
				if (cATSReferralRTTManagementVo.getJourney().getLastValidationDate() != null)
				{
					form.dteLastValidation().setValue(cATSReferralRTTManagementVo.getJourney().getLastValidationDate());
				}
				//WDEV-22718 ends here
				
				if(cATSReferralRTTManagementVo.getJourney()!=null)
				{
					form.getGlobalContext().Pathways.setSelectedPathway(cATSReferralRTTManagementVo.getJourney().getPathway());
				}
				else
				{
					form.getGlobalContext().Pathways.setSelectedPathway(null);
				}
				form.lyrDetails().tabJourney().ccPatientJourney().hideAllCMExceptViewClockHistory(Boolean.TRUE);
				if (cATSReferralRTTManagementVo.getJourney() == null)
					form.lyrDetails().tabJourney().ccPatientJourney().clear();
				else
				{
					PatientJourneyInterfaceVo patJourney = null;
					patJourney = domain.getPatientJourney(cATSReferralRTTManagementVo.getJourney(), null);
					form.lyrDetails().tabJourney().ccPatientJourney().setValue(patJourney);
					
					// WDEV-20636 - Enable the menu option to remove target from scope
					form.lyrDetails().tabJourney().ccPatientJourney().showRemoveTargetMenuOption();
				}
			}
		}	
		else
		{
			form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(null);
			form.getGlobalContext().Pathways.setSelectedPathway(null);
			form.getLocalContext().setReferralDetails(null);//WDEV-20854
		}

		//WDEV-20854
		updateControlsState();
		updateContextMenuItems();

	}

	//WDEV-20854
	private void updateContextMenuItems()
	{
		ReferralLetterDetailsLiteVo referralDetails = form.getLocalContext().getReferralDetails();
		Boolean isAddRttStatusVisible =referralDetails !=null 
											&& referralDetails.getServiceIsNotNull()
											&& referralDetails.getService().getIsSubjectToRTTClockIsNotNull()
											&& Boolean.TRUE.equals(referralDetails.getService().getIsSubjectToRTTClock());
		
		form.getContextMenus().RefMan.getRTTManagementAddRTTEventItem().setVisible(isAddRttStatusVisible);
		form.getContextMenus().RefMan.getRTTManagementVALIDATEItem().setVisible(form.cmbReferral().getValue()!=null);
		form.getContextMenus().RefMan.getRTTManagementVIEW_ALL_COMMItem().setVisible(form.cmbReferral().getValue()!=null);
		form.getContextMenus().RefMan.getRTTManagementEDIT_RTT_STATUS_DATE_TIMEItem().setVisible(form.lyrDetails().tabEvents().grdEvent().getValue() != null && !(RTTClockImpactSource.APPOINTMENT_OUTCOME.equals(form.lyrDetails().tabEvents().grdEvent().getValue().getClockImpactSource()) || RTTClockImpactSource.ADMISSION.equals(form.lyrDetails().tabEvents().grdEvent().getValue().getClockImpactSource())));
	}
	
	
	//WDEV-21371
//	private void open(Object object) throws PresentationLogicException {
//		loadReferrals(true, patRefVo);
//	}
	private void open(Object object, PatientPathwayJourneyRefVo patientPathJournRefVo) throws PresentationLogicException 
	{
		loadReferrals(true, patientPathJournRefVo);
	}
	//WDEV-21371
	
	private void initialize()
	{
		// WDEV-21127 - Adjusted to be invisible from the outset
		form.dteAdjusted().setVisible(false);
		form.lblAdjusted().setVisible(false);
		
	}
	
	//WDEV-21155
	private void updateLinkButtons(Object[] args)
	{
		form.lnkReturnToPathways().setVisible(args != null && args.length > 0 && args[0] instanceof Integer && (VIEW_RTTMANAGEMENT_FROM_VALIDATION_WORKLIST.equals(args[0])));	
	}

	@Override
	protected void onFormClosing(CancelArgs args)
			throws PresentationLogicException
		{
			form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(null);
			form.getGlobalContext().Pathways.setSelectedPathway(null);
			form.getGlobalContext().RefMan.setCatsReferral(null);
			form.getGlobalContext().RefMan.setCatsReferralSetRTTClockStatus(null);
		}
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		
		if ((formName.equals(form.getForms().Pathways.PatientJourneyComment)) && (result.equals(DialogResult.OK)))
		{
			OnCmbReferralChanged();
			
			
//			PatientJourneyDummyVo voDummy = new PatientJourneyDummyVo();
//			PatientPathwayJourneyRefVo current = form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney();
//			voDummy.setPatientJourneyID(current.getID_PatientPathwayJourney());
//			form.cmbPatientJourney().setValue(voDummy);
//			onBtnViewClick();
		}
		else if(form.getForms().RefMan.UpdateRTTStatusDateTime.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				OnCmbReferralChanged();
			}
		}
		else if(formName.equals(form.getForms().Pathways.AdminEvent))
		{
			OnCmbReferralChanged();
		}

		//WDEV-21371
		else if (formName.equals(form.getForms().Pathways.PatientPathwayValidationCompleteDialog) && (result.equals(DialogResult.OK)))
		{
			PatientPathwaysAwaitingValidationWorklistVo patientPathwayJourney = form.getGlobalContext().Pathways.getPatientPathwaysAwaitingValidationWorklistVo();
			
			try
			{
				domain.savePatientPathwaysAwaitingValidationWorklistVo(patientPathwayJourney);
				OnCmbReferralChanged();
			}
			catch (StaleObjectException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		else if (formName.equals(form.getForms().RefMan.ConfirmReferralNotRTTImpact))
		{
			ReferralLiteVo referral = form.cmbReferral().getValue();
			
			
			if (referral != null && referral.getCatsReferralDetails() != null)
			{
				// If confirmation response is OK - that means RIE just current clock
				if (DialogResult.OK.equals(result))
				{
					markReferralAsNotSubjectToRTTImpact(referral.getCatsReferralDetails(), false);
				}
				// If confirmation response is OK - that means RIE all clocks
				else if (DialogResult.YES.equals(result))
				{
					markReferralAsNotSubjectToRTTImpact(referral.getCatsReferralDetails(), true);
				}
			}
			
			open(null, form.getLocalContext().getJourney());
//			OnCmbReferralChanged();
		}
	
		else 
		{
			OnCmbReferralChanged();
		}
		
//		// WDEV-18474
//		if ((formName.equals(form.getForms().Core.DateEntryDialog)) && (result.equals(DialogResult.OK)))
//		{
//			// Get the date that was recorded
//			try 
//			{
//				domain.saveCancerPathway(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney(), form.getGlobalContext().Core.getGenericDate());
//			} 
//			catch (StaleObjectException e) 
//			{
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			form.btnSetCancerPathway().setEnabled(false);
//			form.btnSetCancerPathway().setTooltip("Cancer Pathway - " + form.getGlobalContext().Core.getGenericDate());
//			form.btnSetCancerPathway().setText("Cancer Pathway " + form.getGlobalContext().Core.getGenericDate());
//		}
//		if ((formName.equals(form.getForms().Pathways.CreateNewEvent)) && (result.equals(DialogResult.OK)))
//		{
//			cmbReferralValueChanged();
//			PatientJourneyDummyVo voDummy = new PatientJourneyDummyVo();
//			PatientPathwayJourneyRefVo current = form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney();
//			voDummy.setPatientJourneyID(current.getID_PatientPathwayJourney());
//			form.cmbPatientJourney().setValue(voDummy);
//			onBtnViewClick();
//		}
//		if ((formName.equals(form.getForms().Pathways.TargetReadjustment)) && (result.equals(DialogResult.OK)))
//		{
//			TargetReadjustmentVoCollection targetReadjustments = form.getGlobalContext().Pathways.getTargetReadjustments();
//			PatientJourneyJourneyTargetInterfaceVo patientJourneyTarget = form.getLocalContext().getPatientJourneyTargetInterface();
//			
//			if (patientJourneyTarget == null)
//				return;
//			
//			patientJourneyTarget.setReadjustments(targetReadjustments);
//			patientJourneyTarget.setHasReadjustments(Boolean.TRUE);
//			String[] errors = patientJourneyTarget.validate();
//			if(errors != null && errors.length > 0)
//			{
//				engine.showErrors(errors);	
//				return;
//			}
//			
//			try 
//			{				
//				domain.save(patientJourneyTarget);
//			} 
//			catch (StaleObjectException e) 
//			{			
//				e.printStackTrace();				
//			}
//		}
//		
//		updateControlsState();
//		onBtnViewClick();
	}
	
	
	
	private String[] validateReferralDate()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		if (form.dteReferral().getValue() == null)
		{
			errorList.add("Referral Date cannot be empty.");
		}
		
		if (form.dteReferral().getValue() != null)
		{
			if (form.dteReferral().getValue().isGreaterThan(new Date()))
			{
				errorList.add("Referral Date cannot be in the future.");
			}
		}
		
		return errorList.toArray(new String[errorList.size()]);
	}

	
	protected void OnReferralDateValueChange() throws PresentationLogicException
	{
		String[] errors = validateReferralDate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			OnCmbReferralChanged();
		}
	}
	
	@Override
	protected void OnBtnUpdateReferralDate() throws PresentationLogicException
	{
		if(form.cmbReferral().getValue()!=null)
		{
			try
			{
				domain.updateReferralDate(form.dteReferral().getValue(), form.cmbReferral().getValue().getCatsReferralDetails());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				e.printStackTrace();
			}				
			OnCmbReferralChanged();
			//WDEV-23889
			if(form.dteRTTBreach().getValue()!=null && form.dteRTTBreach().getValue().isLessThan(new Date()))
			{	
				engine.showMessage("The RTT Breach Date of this referral is earlier than today.", "Date in the past",MessageButtons.OK, MessageIcon.INFORMATION);			
			}
		}
	}
	

	private void hideAllMenuItems()
	{
		form.getContextMenus().RefMan.getRTTManagementAddRTTEventItem().setVisible(false);
		form.getContextMenus().RefMan.getRTTManagementUndoRTTEventItem().setVisible(false);
		form.getContextMenus().RefMan.getRTTManagementEditRTTStatusItem().setVisible(false);
		form.getContextMenus().RefMan.getRTTManagementViewOutcomeItem().setVisible(false);
		form.getContextMenus().RefMan.getRTTManagementEDIT_RTT_STATUS_DATE_TIMEItem().setVisible(false);
	}
	
	

	//WDEV-21371
//	private void loadReferrals(boolean searchAfterCatsReferral) throws PresentationLogicException
	private void loadReferrals(boolean searchAfterCatsReferral , PatientPathwayJourneyRefVo patientPathwayJourneyRefVo) throws PresentationLogicException //WDEV-21371
	{
		form.cmbReferral().clear();
		
		updateControlsState();
		ReferralLiteVoCollection referrals = domain.listReferralWithPathways(form.getGlobalContext().Core.getPatientShort()).sort(new dateReferralComparator()); //wdev-14124
		if(referrals != null)
		{
			
			for(int x = 0; x < referrals.size(); x++)
			{
				//WDEV-19927 
				if (referrals.get(x).getCatsReferralDetailsIsNotNull())
				{
					String dateOfReferral = referrals.get(x).getCatsReferralDetails().getReferralDetailsIsNotNull() && referrals.get(x).getCatsReferralDetails().getReferralDetails().getDateOfReferralIsNotNull() ? referrals.get(x).getCatsReferralDetails().getReferralDetails().getDateOfReferral().toString() : " '' ";
					String urgency = referrals.get(x).getCatsReferralDetails().getUrgencyIsNotNull() ? referrals.get(x).getCatsReferralDetails().getUrgency().getIItemText() : " '' ";
					String service = referrals.get(x).getCatsReferralDetails().getReferralDetailsIsNotNull() && referrals.get(x).getCatsReferralDetails().getReferralDetails().getServiceIsNotNull() ? referrals.get(x).getCatsReferralDetails().getReferralDetails().getService().getServiceName() : " '' ";
					String consultant = referrals.get(x).getCatsReferralDetails().getReferralDetailsIsNotNull() && referrals.get(x).getCatsReferralDetails().getReferralDetails().getReferringConsultantIsNotNull() ? referrals.get(x).getCatsReferralDetails().getReferralDetails().getReferringConsultant().toString() : " '' ";
					
					String comboValue = dateOfReferral + " - " + urgency + " - " + service + " - " + consultant;
					form.cmbReferral().newRow(referrals.get(x), comboValue);
					//WDEV-21371 Populate screen with the pathway that was passed from the Awaiting Validation Worklist form
					if (patientPathwayJourneyRefVo != null && patientPathwayJourneyRefVo.getID_PatientPathwayJourney() != null)
					{
						if (referrals.get(x).getCatsReferralDetails().getJourneyIsNotNull()
								&& referrals.get(x).getCatsReferralDetails().getJourney().getID_PatientPathwayJourneyIsNotNull()
								&& referrals.get(x).getCatsReferralDetails().getJourney().getID_PatientPathwayJourney().equals(patientPathwayJourneyRefVo.getID_PatientPathwayJourney()))
						{
							form.cmbReferral().setValue(referrals.get(x));
						}
					}
					//WDEV-21371
				}
			}
			if (referrals.size() == 1)
			{
				form.cmbReferral().setValue(referrals.get(0));
				//WDEV-23296
				if(referrals.get(0).getCatsReferralDetails() != null)
				{
					form.getGlobalContext().RefMan.setCatsReferral(referrals.get(0).getCatsReferralDetails().toCatsReferralRefVo());
					form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShortVo(referrals.get(0).getCatsReferralDetails().toCatsReferralRefVo()));
				}
			}
		}
		OnCmbReferralChanged();
	}
	
	private void updateControlsState()
	{
		ReferralLiteVo referral = form.cmbReferral().getValue();
		
		boolean catsReferralIsRttClockImpact = referral != null && referral.getCatsReferralDetails() != null && Boolean.TRUE.equals(referral.getCatsReferralDetails().getRTTClockImpact());
		boolean catsReferralTranferred = referral != null && referral.getCatsReferralDetails() != null && referral.getCatsReferralDetails().getCurrentStatus() != null && ReferralApptStatus.TRANSFERRED.equals(referral.getCatsReferralDetails().getCurrentStatus().getReferralStatus());
		

		form.lyrDetails().tabJourney().setHeaderVisible(!catsReferralTranferred);
		if (catsReferralTranferred)
		{
			form.lyrDetails().showtabEvents();
		}
		//else
		//{
		//	form.lyrDetails().showtabJourney();
		//}
		
		
		
		form.lyrDetails().tabEvents().btnMarkReferralAsNotSubjectRTT().setVisible(catsReferralIsRttClockImpact);
		form.lyrDetails().tabEvents().btnMarkReferralAsNotSubjectRTT().setEnabled(catsReferralIsRttClockImpact);
		
		form.lyrDetails().tabEvents().btnUndoRTTEvent().setVisible(form.lyrDetails().tabEvents().grdEvent().getValue() instanceof RTTManagementGridValueVo && !Boolean.TRUE.equals(form.lyrDetails().tabEvents().grdEvent().getValue().getFirstRTTStatus()));
		form.btnReviewReferral().setEnabled(form.cmbReferral().getValue() != null); //WDEV-23296
		
//		boolean referralSelected = form.cmbReferral().getValue() != null;
//		if(!referralSelected)
//			form.cmbPathway().clear();
//		
//		boolean journeySelected = form.cmbPathway().getValue() != null;
//		boolean canAddEditBreachReasons = engine.hasRight(AppRight.CAN_RECORD_OVERALL_PATHWAY_BREACH_REASON);
//		boolean hasBreachReasons = false;
//		
//		form.cmbPathway().setEnabled(referralSelected);		
//		form.btnView().setEnabled(journeySelected);
//		form.btnAllComments().setEnabled(journeySelected);
//		if (!journeySelected) 
//		{ 
//			form.btnAllComments().setTooltip(null);
//			form.btnSetCancerPathway().setEnabled(false);
//			form.btnSetCancerPathway().setText("Set Cancer Pathway");
//		}
//		
//		if (referralSelected && journeySelected)
//		{			
//			form.btnAllComments().setEnabled(true);
//			PatientJourneyDummyVo value = (PatientJourneyDummyVo) form.cmbPathway().getValue();
//
//			if (value != null &&
//					value.getPatientJourneyIDIsNotNull())
//			{			
//				PatientPathwayJourneyRefVo refVo = new PatientPathwayJourneyRefVo();
//				refVo.setID_PatientPathwayJourney(value.getPatientJourneyID());
//				PatientJourneyCommentsVo  vo = domain.getPatientPathwayJourney(refVo);
//				form.getGlobalContext().Pathways.setPatientJourneyComments(vo);
//				
//				hasBreachReasons = vo != null && vo.getPatientJourneyBreachReason() != null && vo.getPatientJourneyBreachReason().size() > 0;
//
//				if (vo != null)
//				{
//					if (vo.getLinkedComments() == null || vo.getLinkedComments().size() ==0)
//					{
//						form.btnAllComments().setTooltip("<b>No Comments Recorded for the Selected Pathway</b>"); //WDEV-19603
////						form.btnAllComments().setEnabledImage(form.getImages().Core.NoComments24x24); //WDEV-19603
//					}
//					else
//
//					{
//						String tooltip = buildCommentsDisplayTooltip(vo);
//						form.btnAllComments().setTooltip(tooltip.toString());
////						form.btnAllComments().setEnabledImage(form.getImages().Core.Comments24x24); //WDEV-19603
//					}
//
//					// WDEV-18474 set the CancerPathway button disabled if already set and set tooltip
//					if (vo.getIsCancerPathwayIsNotNull() && vo.getIsCancerPathway())
//					{
//						form.btnSetCancerPathway().setEnabled(false);
//						form.btnSetCancerPathway().setTooltip("Cancer Pathway Date " + vo.getCancerPathwayDate());
//						form.btnSetCancerPathway().setText("Cancer Pathway " + vo.getCancerPathwayDate());
//					}
//					else 
//					{
//						form.btnSetCancerPathway().setEnabled(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney() != null); //WDEV-18520
//					}
//				}	
//				
//				// start WDEV-20385
//				PatientJourneyBreachReasonListVo breachReasons = domain.getBreachReasons(refVo);
//				if(breachReasons == null)
//				{
//					form.btnViewBreach().setTooltip("<b>No Breach Reasons recorded.</b>");
//				}
//				else
//				{
//					String tooltipBreachReason = buildBreachReasonTooltip(breachReasons);
//					form.btnViewBreach().setTooltip(tooltipBreachReason.toString());
//				}
//				// end WDEV-20385
//			}		
//		}
//		
//		
//		// WDEV-18387 
//		form.txtRttCurrentStatus().setEnabled(false);
//		if (form.getLocalContext().getbDisplayRttStatusDetailsFieldIsNotNull() && 
//				form.getLocalContext().getbDisplayRttStatusDetailsField())
//		{		
//			form.txtRttCurrentStatus().setVisible(true);
//			form.lblRTTCurrentStatus().setVisible(true);	
//		}
//		else
//		{
//			form.txtRttCurrentStatus().setVisible(false);
//			form.lblRTTCurrentStatus().setVisible(false);
//		}
//		
//		if(!referralSelected)
//		{
//			form.lblRTTBreachDate().setVisible(false);
//			form.txtRTTBreachDate().setVisible(false);
//		}
//		
//		//WDEV-19604 
//		form.txtNextValidationdate().setEnabled(false);
//		form.btnValidate().setEnabled(referralSelected && journeySelected);
//		
//		//WDEV-19849 
//		form.btnNewBreach().setEnabled(referralSelected && journeySelected);
//		form.btnNewBreach().setVisible(canAddEditBreachReasons);
//		
//		form.btnViewBreach().setEnabled(referralSelected && journeySelected && hasAtLeastOneActiveBreachReason((PatientJourneyDummyVo) form.cmbPatientJourney().getValue()));
//		form.btnViewBreach().setVisible(hasBreachReasons);
	}
	
	private void populateScreenFromdata(CATSReferralRTTManagementVo referral)
	{
		hideAllMenuItems();
		if(referral!=null)
		{
			
			if(referral.getReferralDetailsIsNotNull())
			{
				form.dteReferral().setValue(referral.getReferralDetails().getDateOfReferral());
				form.dteRTTBreach().setValue(referral.getReferralDetails().getEnd18WW());
				form.dteOptRttStart().setValue(referral.getReferralDetails().getOriginalDateOfReferral());
			}
			form.dte31DayTarget().setValue(referral.getCurrent31TargetDate());
			form.dte62DayTarget().setValue(referral.getCurrent62TargetDate());
			
			if(referral.getJourneyIsNotNull())
			{
				if(referral.getJourney().getPathwayIsNotNull())
				{
					form.lblPathwayID().setValue(referral.getPathwayID());
				}
				form.dteNextValidation().setValue(referral.getJourney().getNextValidationDate());
				
				PathwayClockRefVo clock = null;
				
				if(referral.getJourneyIsNotNull()
						&&referral.getJourney().getClockHistoryIsNotNull())
				{
					RTTManagementPathwayClockVoCollection clocksSorted =  referral.getJourney().getClockHistory().sort(new PathwayClockComparator());
					
					// Get Appointment Outcomes for CatsReferral - RTT Clock Impacts
					AppointmentOutcomeDetailsVoCollection appointmentOutcomes = domain.listAppointmentOutcomeDetails(referral);

					boolean firstRTTClock = true;
					boolean firstRTTStatus = true;
					for (RTTManagementPathwayClockVo rTTManagementPathwayClockVo : clocksSorted)
					{
						if(!Boolean.TRUE.equals(rTTManagementPathwayClockVo.getIsRIE()))
						{
							grdEventRow row=form.lyrDetails().tabEvents().grdEvent().getRows().newRow();
							row.setBold(true);
							clock=rTTManagementPathwayClockVo;
							
							//http://jira/browse/WDEV-21288
							String adjWeeks = getAdjustedWeeks(rTTManagementPathwayClockVo);
							String valueClockStart = getClockString(referral, firstRTTClock, rTTManagementPathwayClockVo, adjWeeks);
							row.setColEvent(valueClockStart);
							
							firstRTTClock = false;

							//WDEV-21756
							row.setCellColEventTooltip(null);
							row.setCellColEventTooltip(valueClockStart);

							if(rTTManagementPathwayClockVo.getRTTStatusHistoryIsNotNull())
							{
								PathwayRTTStatusVoCollection statusSorted = rTTManagementPathwayClockVo.getRTTStatusHistory().sort(new rttStatusComparator());
								for (PathwayRTTStatusVo pathwayRTTStatusVo : statusSorted)
								{
									if(pathwayRTTStatusVo.getIsRIE()==null||pathwayRTTStatusVo.getIsRIE().equals(Boolean.FALSE))
									{
										String toolTipText = getToolTipText(pathwayRTTStatusVo);
										grdEventRow row2=form.lyrDetails().tabEvents().grdEvent().getRows().newRow();
										RTTManagementGridValueVo rowValue = new RTTManagementGridValueVo(); 
										rowValue.setFirstRTTStatus(firstRTTStatus);
										
										firstRTTStatus = false;
										
										rowValue.setClock(clock);
										rowValue.setCatsReferral(referral);
										if(pathwayRTTStatusVo.getStatusDateTimeIsNotNull())
										{
											row2.setColEventDT(pathwayRTTStatusVo.getStatusDateTime().toString());
											row2.setCellColEventDTTooltip(null);
											row2.setCellColEventDTTooltip(toolTipText);
										}
										String description = getDescription(pathwayRTTStatusVo);
										row2.setColEvent(description);

										//WDEV-21756
										row2.setCellColEventTooltip(null);
										row2.setCellColEventTooltip(description + "<br>" + toolTipText);

										//row2.setTooltip(toolTipText);
										rowValue.setRttStatus(pathwayRTTStatusVo);
										rowValue.setStatusDT(pathwayRTTStatusVo.getStatusDateTime());


										StringBuilder contextText = new StringBuilder();
										
										for (PathwayRTTClockImpactUndoVo clockImpactVo : referral.getRTTClockImpacts())
										{
											// Use the Clock Impact for source purpose if the following conditions are met
											// RTT Status matches the Final RTT Status in the Clock Impact record
											// RTT Clock matches the Final RTT Clock in the Clock Impact record
											// Either the RTT Status or RTT Clock will differ from the Initial RTT Status or Initial RTT Clock from Clock Impact
											if (clockImpactVo.getFinalRTTStatus() != null && clockImpactVo.getFinalRTTStatus().getID_PathwayRTTStatus().equals(pathwayRTTStatusVo.getID_PathwayRTTStatus())
													&& clockImpactVo.getFinalClock() != null && clockImpactVo.getFinalClock().getID_PathwayClock().equals(rTTManagementPathwayClockVo.getID_PathwayClock())
													&& (clockImpactVo.getInitialClock() == null || !clockImpactVo.getInitialClock().getID_PathwayClock().equals(rTTManagementPathwayClockVo.getID_PathwayClock())
															|| clockImpactVo.getInitialRTTStatus() == null || !clockImpactVo.getInitialRTTStatus().getID_PathwayRTTStatus().equals(pathwayRTTStatusVo.getID_PathwayRTTStatus())))
											{
												contextText = new StringBuilder();
												
												if (clockImpactVo.getSource() != null)
												{
													contextText.append(clockImpactVo.getSource().getText());
													if (clockImpactVo.getOutcomeDescription() != null)
													{
														contextText.append(" - ").append(clockImpactVo.getOutcomeDescription());
													}
													
													rowValue.setClockImpactSource(clockImpactVo.getSource());
												}

												if (appointmentOutcomes != null)
												{
													for (AppointmentOutcomeDetailsVo appointmentOutcome : appointmentOutcomes)
													{
														if (appointmentOutcome.getRTTClockImpact().equals(clockImpactVo))
														{
															contextText.append(": ").append(appointmentOutcome.getAppointmentDate()).append(" ").append(appointmentOutcome.getApptStartTime());
															
															if (appointmentOutcome.getSession() != null && appointmentOutcome.getSession().getSchLocation() != null)
															{
																contextText.append(" - ").append(appointmentOutcome.getSession().getSchLocation().getName());
															}
														}
													}
												}
												
												row2.setColContext(contextText.toString());
												
												rowValue.setClockImpactRef(clockImpactVo);
											}
										}
										
										
										row2.setValue(rowValue);
										
										if (toolTipText != null && toolTipText.length() > 0)
										{
											contextText.append("<br>");
											contextText.append(toolTipText);
										}
										
										row2.setCellColContextTooltip(contextText.toString());
									}
								}
							}
						}
					}
				}
			}
		}
	}

	private String getClockString(CATSReferralRTTManagementVo referral, boolean firstRTTClock, RTTManagementPathwayClockVo clock, String adjWeeks)
	{
		if (clock == null)
			return "<No Clock Details Found>";
		
		if (firstRTTClock && referral.getCurrentStatus() != null &&  ReferralApptStatus.TRANSFERRED.equals(referral.getCurrentStatus().getReferralStatus()))
		{
			return "Clock Start " + (clock.getStartDate() != null ? clock.getStartDate() : "-") + " - Transfered: " + (clock.getCurrentRTTStatus() != null ? clock.getCurrentRTTStatus().getStatusDateTime() : "-");
		}
		
		//WDEV-23303 
		return "Clock Start "+ clock.getStartDate() + (clock.getStopDateIsNotNull() ? " Clock End " + clock.getStopDate() : "") + getWeeksStr(clock.getStartDate(),clock.getStopDate()) + (adjWeeks != null ? adjWeeks : "");
	}
	
	//WDEV-23303 - rewritten following new specs
	private String getAdjustedWeeks(RTTManagementPathwayClockVo clock)
	{
		if (clock == null || clock.getStartDate() == null)
			return "";

		String pauseRange = "";
		long daysPaused = 0;
		long daysPausedRTTAdjusted = 0;

		PauseDetailsVo currentActivePause = null;
		Date pauseStart = null;
		Date pauseStop = null;
				
		Date currentDate = new Date();
		Date stopDate = clock.getStopDate() == null ? currentDate : clock.getStopDate();
		long daysSinceClockStart = Date.daysBetween(clock.getStartDate(), stopDate);
		
		/*String allPausesAreInFuture = allPausesAreInFuture(clock.getPauseDetails(), stopDate);

		if (allPausesAreInFuture != null)
			return allPausesAreInFuture;*/
		if (clock.getPauseDetails() != null)
		{	
			for (PauseDetailsVo pause : clock.getPauseDetails())
			{
				if (pause.getPauseStart() != null && Boolean.TRUE.equals(pause.getActive()))  
				{
					currentActivePause = pause;
					break;
				}	
			}
		}
		if (currentActivePause != null)
		{
			pauseStart = currentActivePause.getPauseStart();
			pauseStop = currentActivePause.getPauseStop();
					
			if (pauseStop != null)
			{
				daysPaused += Date.daysBetween(pauseStart, pauseStop) + 1; // calculate days for all pause periods
				pauseRange = " - Pause: " + pauseStart.toString() + " to " + pauseStop.toString();
			}

			if (clock.getStopDate() == null)
			{
				if (pauseStart.isGreaterThan(currentDate))
				{
					daysPausedRTTAdjusted +=  daysSinceClockStart + 1;
				}
				
				else if (pauseStop != null && pauseStop.isLessThan(currentDate))
				{
					daysPausedRTTAdjusted += daysSinceClockStart - Date.daysBetween(pauseStart,pauseStop) + 1;
				}
				
				else if (currentDate.isGreaterOrEqualThan(pauseStart) && currentDate.isLessOrEqualThan(pauseStop))
				{					
					daysPausedRTTAdjusted += daysSinceClockStart - Date.daysBetween(pauseStart,currentDate) + 1;
				}
			}
			else
			{
				if (pauseStart.isGreaterThan(clock.getStopDate()))
				{	
					daysPausedRTTAdjusted +=  daysSinceClockStart +1;
				}	
				else if (pauseStop.isGreaterThan(clock.getStopDate()))
				{
					daysPausedRTTAdjusted +=  daysSinceClockStart - Date.daysBetween(pauseStart,clock.getStopDate()) + 1 ;					
				}
				else
				{
					daysPausedRTTAdjusted += daysSinceClockStart - daysPaused;
				}
			}
			long numWeeksForDaysPausedRTTAdjusted = (clock.getStopDate() != null && (clock.getPauseDetails() == null || clock.getPauseDetails().size() == 0)) ? (long)Math.floor((daysSinceClockStart +1)/7.0) : (long)Math.floor(daysPausedRTTAdjusted/7.0);
			long numWeeksForDaysPaused = (long)Math.floor(daysPaused/7.0);
					
			return "  - Weeks Waited: "  + numWeeksForDaysPausedRTTAdjusted + pauseRange + " (" +  numWeeksForDaysPaused + " week" + (numWeeksForDaysPaused == 1 ? "":"s") + ")";
		}
		return null;
	}
	
	//check if all pauses are in future and if true return the first pause start time and all the number of weeks for total pause periods
	private String allPausesAreInFuture(PauseDetailsVoCollection pauses, Date stopDate)
	{
		long daysPaused = 0;
		for (PauseDetailsVo pause : pauses)
		{
			if (pause.getActive() != null && Boolean.TRUE.equals(pause.getActive()) && pause.getPauseStart().isGreaterThan(stopDate))
				daysPaused += Date.daysBetween(pause.getPauseStart(), pause.getPauseStop()) + 1;
			else
				return null;
		}	
		
		long numWeeksForDaysPaused = (long)Math.floor(daysPaused/7.0);
		
		return daysPaused > 0 ? " - Pause Start Date " + pauses.get(0).getPauseStart() + " for " + numWeeksForDaysPaused + " weeks" : null;
	}
	
	private long getCurrentWeek(Date startDate, Date endDate)
	{
		if(startDate == null)
			return 0;
		long numDays = Date.daysBetween(startDate, endDate==null ? new Date() : endDate) + 1;
		long numWeeks =(long) Math.floor(numDays/7.0);
		
			return numWeeks;
	}
	// end WDEV-23303
	
	private String getWeeksStr(Date startDate, Date endDate)
	{
		if(startDate==null || endDate != null)
			return "";
		long numDays = Date.daysBetween(startDate, endDate==null?new Date():endDate)+1;
		long numWeeks =(long) Math.floor(numDays/7.0);
		return " - Weeks since Clock Start: " + numWeeks;
	}
	// END http://jira/browse/WDEV-21288

	private String getToolTipText(PathwayRTTStatusVo pathwayRTTStatusVo) {
		
		StringBuilder toolTip= new StringBuilder("");
		if(	pathwayRTTStatusVo.getRTTStatusUpdateReasonIsNotNull())
			toolTip.append("Update Reason: " + pathwayRTTStatusVo.getRTTStatusUpdateReason().getText()).append(" <br>");
		if(pathwayRTTStatusVo.getRTTStatusUpdateCommentIsNotNull())
			toolTip.append("Update Comment: " +pathwayRTTStatusVo.getRTTStatusUpdateComment());
		return toolTip.toString();
	}

	private String getDescription(PathwayRTTStatusVo status) {
		if(status!=null&&status.getRTTStatusIsNotNull())
		{
			String retVal = ((status.getRTTStatus().getNationalCode()!=null?status.getRTTStatus().getNationalCode().toString():"")  +" - "+status.getRTTStatus().getDescription());
			return retVal; 
		}
		return null;
	}

	private void clearControls()
	{
		form.dteReferral().setValue(null);
		form.dteRTTBreach().setValue(null);
		form.dte31DayTarget().setValue(null);
		form.dte62DayTarget().setValue(null);
		form.dteNextValidation().setValue(null);
		form.lblPathwayID().setValue(null); //WDEV-20886 part 1
		form.dteAdjusted().setValue(null);  //WDEV-20886 part 1
		form.dteLastValidation().setValue(null); //WDEV-22718
		form.lyrDetails().tabEvents().grdEvent().getRows().clear();
		
		form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(null); //WDEV-20886 part 5
		form.getLocalContext().setJourney(null);
		form.getGlobalContext().Pathways.setSelectedPathway(null);
		form.lyrDetails().tabJourney().ccPatientJourney().clear();
	}


	class dateReferralComparator implements Comparator<ReferralLiteVo> {
	    @Override
	    public int compare(ReferralLiteVo a, ReferralLiteVo b) {
	    	if(a!=null&&b!=null
	    			&&a.getCatsReferralDetails()!=null&&b.getCatsReferralDetails()!=null
	    			&&a.getCatsReferralDetails().getReferralDetails()!=null&&b.getCatsReferralDetails().getReferralDetails()!=null)
	    	{
		    	Date dateOfReferralA =  a.getCatsReferralDetails().getReferralDetails().getDateOfReferral();
		    	Date dateOfReferralB =  b.getCatsReferralDetails().getReferralDetails().getDateOfReferral();
		    	if(dateOfReferralA!=null&&dateOfReferralB!=null)
		    	{
		    		return dateOfReferralA.isGreaterThan( dateOfReferralB) ? -1 : dateOfReferralA.equals(dateOfReferralB) ? 0 : 1;
		    	}
	    	}
    		return 0;
	    }
	}
	
	
	class PathwayClockComparator implements Comparator<RTTManagementPathwayClockVo>
	{
		@Override
		public int compare(RTTManagementPathwayClockVo a, RTTManagementPathwayClockVo b)
		{
			if (a != null && b != null && a.getStartDate() != null && b.getStartDate() != null)
			{
				if (a.getStartDate().isLessThan(b.getStartDate()))
					return -1;
				
				if (a.getStartDate().isGreaterThan(b.getStartDate()))
					return 1;
				
				if (a.getStartDate().equals(b.getStartDate()))
					return (-1) * a.getID_PathwayClock().compareTo(b.getID_PathwayClock());
			}
			
			return 0;
		}
	}

	class rttStatusComparator implements Comparator<PathwayRTTStatusVo>
	{
	    @Override
	    public int compare(PathwayRTTStatusVo a, PathwayRTTStatusVo b)
	    {
	    	if (a != null && b != null && a.getStatusDateTime() != null && b.getStatusDateTime() != null)
	    	{
	    		if (a.getStatusDateTime().isLessThan(b.getStatusDateTime()))
	    			return -1;
	    		
	    		if (a.getStatusDateTime().isGreaterThan(b.getStatusDateTime()))
	    			return 1;
	    		
	    		if (a.getStatusDateTime().equals(b.getStatusDateTime()))
	    			return a.getID_PathwayRTTStatus().compareTo(b.getID_PathwayRTTStatus());
	    	}
    		
	    	return 0;
	    }
	}

	

//	protected void Onbtn1Click() throws PresentationLogicException
//	{
//		form.getGlobalContext().RefMan.setCatsReferralSetRTTClockStatus(form.cmbReferral().getValue().getCatsReferralDetails());
//		engine.open(form.getForms().RefMan.ManuallySetRTTClockStatus);
//	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender)throws PresentationLogicException
	{
		switch(menuItemID)
		{
    		case GenForm.ContextMenus.RefManNamespace.RTTManagement.AddRTTEvent:
    			OnBtnAddRTTEvent();
    			break;
    		case GenForm.ContextMenus.RefManNamespace.RTTManagement.UndoRTTEvent:
    			OnBtnUndoRTTEvent();
    			break;
    		case GenForm.ContextMenus.RefManNamespace.RTTManagement.EditRTTStatus:
    			OnbtnEditRTTEvent();
    			break;
    		case GenForm.ContextMenus.RefManNamespace.RTTManagement.ViewOutcome:
    			OnBtnViewOutcome();
    			break;
    			//WDEV-20854
    		case GenForm.ContextMenus.RefManNamespace.RTTManagement.VALIDATE:
    			OnBtnValidate();
    			break;
    		case GenForm.ContextMenus.RefManNamespace.RTTManagement.VIEW_ALL_COMM:
    			OnBtnViewAllComments();
    			break;
    			//WDEV-20854 - end;
    		case GenForm.ContextMenus.RefManNamespace.RTTManagement.EDIT_RTT_STATUS_DATE_TIME:
    			form.getGlobalContext().RefMan.setPreviousRTTStatusDate(getPreviousRTTStatusDate());
    			form.getGlobalContext().RefMan.setNextRTTStatusDate(getNextRTTStatusDate());
    			form.getGlobalContext().RefMan.setRTTManagementValue(form.lyrDetails().tabEvents().grdEvent().getValue());
    			engine.open(form.getForms().RefMan.UpdateRTTStatusDateTime);
    		break;
		}
	}

	private DateTime getNextRTTStatusDate()
	{
		if(form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex() < 0)
			return null;
		
		int index = form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex();
		
		if(index == form.lyrDetails().tabEvents().grdEvent().getRows().size() - 1)
			return null;
		
		index = index + 1;
		
		while(index <= form.lyrDetails().tabEvents().grdEvent().getRows().size() - 1)
		{
			if(form.lyrDetails().tabEvents().grdEvent().getRows().get(index) != null && form.lyrDetails().tabEvents().grdEvent().getRows().get(index).getValue() instanceof RTTManagementGridValueVo)
			{
				return form.lyrDetails().tabEvents().grdEvent().getRows().get(index).getValue().getStatusDT();
			}
			
			index = index + 1;
		}
		
		return null;
	}

	private DateTime getPreviousRTTStatusDate()
	{
		if(form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex() < 0)
			return null;
		
		int index = form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex();
		
		if(index == 0)
			return null;
		
		index = index - 1;
		
		while(index >= 0)
		{
			if(form.lyrDetails().tabEvents().grdEvent().getRows().get(index) != null && form.lyrDetails().tabEvents().grdEvent().getRows().get(index).getValue() instanceof RTTManagementGridValueVo)
			{
				return form.lyrDetails().tabEvents().grdEvent().getRows().get(index).getValue().getStatusDT();
			}
			
			index = index - 1;
		}
		
		return null;
	}

	@Override
	protected void onGrdEventSelectionChanged()	throws PresentationLogicException {
		//Rules
		// Always show Add Event
		form.getContextMenus().RefMan.getRTTManagementAddRTTEventItem().setVisible(true);

		RTTManagementGridValueVo rowValue = form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue();
		
		int size=form.lyrDetails().tabEvents().grdEvent().getRows().size();
		if(((size-1)==form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex() && form.lyrDetails().tabEvents().grdEvent().getValue() instanceof RTTManagementGridValueVo && !Boolean.TRUE.equals(form.lyrDetails().tabEvents().grdEvent().getValue().getFirstRTTStatus()))||form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex()==-1) // 0 based index
		{
			form.getContextMenus().RefMan.getRTTManagementUndoRTTEventItem().setVisible(true);
		}
		else
		{
			form.getContextMenus().RefMan.getRTTManagementUndoRTTEventItem().setVisible(false);
		}
		if(rowValue!=null
				&&((size-1)!=form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex()||form.lyrDetails().tabEvents().grdEvent().getSelectedRowIndex()==-1
						||!isOutcomeEvent(form.lyrDetails().tabEvents().grdEvent().getSelectedRow())))//http://jira/browse/WDEV-22534
		{
			form.getContextMenus().RefMan.getRTTManagementEditRTTStatusItem().setVisible(true);
		}
		else
		{
			form.getContextMenus().RefMan.getRTTManagementEditRTTStatusItem().setVisible(false);
		}

		
		if(form.lyrDetails().tabEvents().grdEvent().getSelectedRow()!=null
				&& form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue()!=null
				&& form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactRefIsNotNull()
				&& RTTClockImpactSource.APPOINTMENT_OUTCOME.equals(form.lyrDetails().tabEvents().grdEvent().getSelectedRow().getValue().getClockImpactSource()))
		{

			form.getContextMenus().RefMan.getRTTManagementViewOutcomeItem().setVisible(true);
		}
		else
		{
			form.getContextMenus().RefMan.getRTTManagementViewOutcomeItem().setVisible(false);
		}
		
		updateControlsState();
		updateContextMenuItems();
	}
	@Override
	protected void onCcPatientJourneyValueChanged() throws PresentationLogicException
	{
		if (PatientJourneyAction.VIEWCLOCKHISTORY.equals(form.lyrDetails().tabJourney().ccPatientJourney().getLastAction()))
		{
			form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(form.getLocalContext().getJourney());
			engine.open(form.getForms().Pathways.PatientJourneyClock);
			
		}
		// WDEV-20636 - new menu option to remove target from scope
		else if (PatientJourneyAction.REMOVETARGETFROMSCOPE.equals(form.lyrDetails().tabJourney().ccPatientJourney().getLastAction()))
		{
			PatientJourneyJourneyTargetInterfaceVo target = (PatientJourneyJourneyTargetInterfaceVo) form.lyrDetails().tabJourney().ccPatientJourney().getSelectedPatientJourneyEventTarget();
			try 
			{
				if (target != null)
				{
					domain.removeTargetFromScope(target, form.getLocalContext().getJourney());
					OnCmbReferralChanged();
				}
				else
				{
					engine.showMessage("Please select a Target for Removal");
					return;
				}
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(e.getMessage());
				OnCmbReferralChanged();
				return;
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				OnCmbReferralChanged();
				return;
			}
		}
	}

	//WDEV-21155
	@Override
	protected void onLnkReturnToPathways() throws PresentationLogicException
	{
		engine.open(form.getForms().Pathways.PatientPathwaysAwaitingValidationWorklist);
	}

	//WDEV-21371
	@Override
	protected void onBtnCompleteValidation() throws PresentationLogicException
	{
		PatientPathwaysAwaitingValidationWorklistVo patientPathwayJourney = domain.getPatientPathwaysAwaitingValidationWorklistVo(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney());
		if (form.btnCompleteValidation().getText().equals("Validation Complete"))
		{
			form.getGlobalContext().Pathways.setPatientPathwaysAwaitingValidationWorklistVo(patientPathwayJourney);
			engine.open(form.getForms().Pathways.PatientPathwayValidationCompleteDialog);
		}

		if (form.btnCompleteValidation().getText().equals("Undo Validation Complete"))
		{
			patientPathwayJourney.setValidationCompletedBy(null);
			patientPathwayJourney.setValidationCompletedDT(null);
			patientPathwayJourney.setLastValidationDate(null);
			
			try
			{
				domain.savePatientPathwaysAwaitingValidationWorklistVo(patientPathwayJourney);
				OnCmbReferralChanged();
			}
			catch (StaleObjectException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}
	//WDEV-23296
	@Override
	protected void onBtnReviewReferralClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ReferralDetailsDialog);
		
	}
}
