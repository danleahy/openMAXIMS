//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.electivelistmanagement;

import ims.admin.vo.ElectiveListConfigLiteVo;
import ims.admin.vo.ElectiveListConfigLiteVoCollection;
import ims.admin.vo.ServiceForElectiveListConfigVo;
import ims.admin.vo.ServiceForElectiveListConfigVoCollection;
import ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus;
import ims.RefMan.forms.electivelistmanagement.GenForm.lyrMainLayer.tabPageSearchCriteriaContainer.GroupAdmissionTypeEnumeration;
import ims.RefMan.forms.electivelistmanagement.GenForm.lyrMainLayer.tabPageSearchCriteriaContainer.GroupElectiveListStatusEnumeration;
import ims.RefMan.forms.electivelistmanagement.GenForm.lyrMainLayer.tabPageSearchCriteriaContainer.GroupElectiveListStatusTCIEnumeration;
import ims.RefMan.forms.electivelistmanagement.GenForm.lyrMainLayer.tabPageSearchCriteriaContainer.GroupElectiveListTypeEnumeration;
import ims.RefMan.forms.electivelistmanagement.GenForm.lyrMainLayer.tabPageSearchCriteriaContainer.GroupTheatreTypeEnumeration;
import ims.RefMan.forms.electivelistmanagement.GenForm.lyrMainLayer.tabPageSearchResultsContainer.grdElectiveListRow;
import ims.RefMan.vo.Booking_AppointmentElectiveListVo;
import ims.RefMan.vo.Booking_AppointmentOutcomeForElectiveListVo;
import ims.RefMan.vo.CatsReferralERODWithElectiveOnlyVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PatientElectiveListShortVo;
import ims.RefMan.vo.PatientElectiveListShortVoCollection;
import ims.RefMan.vo.PatientElectiveListTCIVo;
import ims.RefMan.vo.PatientElectiveListTCIVoCollection;
import ims.RefMan.vo.PatientElevectiveListManagementVo;
import ims.RefMan.vo.SearchCriteriaForElectiveListManagementVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVoCollection;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.RefMan.vo.lookups.ElectiveAdmissionTypeCollection;
import ims.RefMan.vo.lookups.ElectiveListStatusReason;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.RefMan.vo.lookups.WaitingCardAdmissionType;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentLiteVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;

import java.util.ArrayList;
import java.util.Comparator;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	

	private static final int ELECTIVE_LIST_28DAY_RULE_COLUMN = 9;
	private static final int ELECTIVE_LIST_OUTCOME_COMMENTS_COLUMN = 10;
	
	private static final int ELECTIVE_LIST_PRECOLONOSCOPY_REQ_COLUMN = 13;		//wdev-22467
	
	
	
	public static final Integer ELECTIVE_LIST_STATUS_REQUIRES_TCI						= 1;
	public static final Integer ELECTIVE_LIST_STATUS_PREASSESSMENT_OUTCOME_REQUIRED		= 2;
	public static final Integer ELECTIVE_LIST_STATUS_NOT_FIT_FOR_SURGERY				= 3;
	public static final Integer ELECTIVE_LIST_STATUS_TCI_GIVEN							= 4;
	public static final Integer ELECTIVE_LIST_STATUS_REMOVED							= 5;
	
	
	public static final Integer ELECTIVE_LIST_REQUIRES_TCI_DEFERRED_RECORDDS_FOR_CLINICAL_REASONS	= 1;
	public static final Integer ELECTIVE_LIST_REQUIRES_TCI_28_DAYS_RULE_PATIENTS					= 2;
	
	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//---------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize the form
		initialize();
		
		// Present the form to user
		open();
	}
	
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().RefMan.ERODDialog.equals(formName))
		{
			if (DialogResult.OK.equals(result))
			{
				if (form.getLocalContext().getPatientElectiveListIsNotNull() && !form.getLocalContext().getPatientElectiveList().getERODIsNotNull()) // Check if EROD is null
				{
					CatsReferralERODWithElectiveOnlyVo tempVo = domain.getCatsReferralErod(form.getLocalContext().getPatientElectiveList().getReferral());
					if (tempVo != null && tempVo.getElectiveERODHistoryIsNotNull() && tempVo.getElectiveEROD().size() > 0)
					{
						try
						{
							PatientElectiveListForTCIDetailsDialogVo record = form.getLocalContext().getPatientElectiveList();
							record.setEROD(tempVo.getElectiveEROD().get(0));
							String[] arrErrors = record.validate();
							if (arrErrors != null)
							{
								engine.showErrors(arrErrors);

							}
							record = domain.save(record);
						}
						catch (StaleObjectException e)
						{
							engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

						}
						catch (UniqueKeyViolationException e)
						{
							engine.showMessage(e.getMessage());
						}
					}
				}

				// search();
			}
		}
		
		if (form.getForms().RefMan.CancelTCIForPatientElectiveListDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			cancelTCIRecord();
		}

		search(false);
		
		// Update the controls state //WDEV-22834 
		updateControlsState();
	}

	
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getMessageBoxIdForRemoveEntryListIsNotNull() && form.getLocalContext().getMessageBoxIdForRemoveEntryList().equals(messageBoxId))
		{
			if (DialogResult.YES.equals(result))
			{
				RemoveFromElective();
			}
		}
	}

	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Proceed with search
		search(true);
		// Update the controls state
		updateControlsState();
	}
	

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear search criteria
		form.getGlobalContext().RefMan.setSearchCriteriaForElectiveListManagement(null);
		
		clearScreen();
		clearGlobalContexts();
		// Update the controls state
		updateControlsState();
	}
	
	
	@Override
	protected void onRadioButtonGroupElectiveListTypeValueChanged() throws PresentationLogicException
	{
		// For 'Surveillance / Planned' value clear Urgency combo-box
		if (GroupElectiveListTypeEnumeration.rdoPlannedSurveillance.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().getValue()))
			form.lyrMain().tabPageSearchCriteria().cmbUrgency().setValue(null);

		// Update the controls state
		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupAdmissionTypeValueChanged() throws PresentationLogicException
	{
		// Clear on the Theatre Type
		form.lyrMain().tabPageSearchCriteria().GroupTheatreType().setValue(null);
		
		// Clear Procedures values
		form.lyrMain().tabPageSearchCriteria().qmbProcedure().clear();
		
		// Update the controls state
		updateControlsState();
	}

	
	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		// Update the controls state
		updateControlsState();
	}

	
	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateServices(domain.listServices(value));
		
		// Update the controls state
		updateControlsState();
	}

	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException 
	{
		// Update the controls state
		updateControlsState();		
	}
	
	
	@Override
	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException
	{
		populateConsultants(domain.listConsultants(value));
		
		// Update the controls state
		updateControlsState();
	}
	
	@Override
	protected void onQmbConsultantValueChanged() throws PresentationLogicException
	{
		// Update the controls state
		updateControlsState();
	}


	@Override
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		try
		{
			if (GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()))
			{
				populateProcedures(domain.listProcedures(value, WaitingCardAdmissionType.ENDOSCOPY));
			}
			else if (GroupAdmissionTypeEnumeration.rdoMedical.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()))
			{
				populateProcedures(domain.listProcedures(value, WaitingCardAdmissionType.MEDICAL));
			}
			else if (GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()))
			{
				populateProcedures(domain.listProcedures(value, WaitingCardAdmissionType.SURGICAL));
			}
			else
			{
				populateProcedures(domain.listProcedures(value, null));
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		// Update the controls state
		updateControlsState();
	}


	@Override
	protected void onQmbElectiveListNameTextSubmited(String value) throws PresentationLogicException
	{
		populateElectiveLists(domain.listElectiveListConfigurations(value));
		
		// Update the controls state
		updateControlsState();
	}
	
	@Override
	protected void onQmbElectiveListNameValueChanged() throws PresentationLogicException
	{
		// Update the controls state
		updateControlsState();
	}

	@Override
	protected void onRadioButtonGroupElectiveListStatusValueChanged() throws PresentationLogicException
	{
		// If the value is different from 'Requires TCI' then clear the sub-options for Requires TCI
		if (!GroupElectiveListStatusEnumeration.rdoRequiresTCI.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
			form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().setValue(null);
		
		// If the value if 'Removed' 
		if (GroupElectiveListStatusEnumeration.rdoRemoved.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
		{
			form.lyrMain().tabPageSearchCriteria().chkShortNotice().setValue(null);
			form.lyrMain().tabPageSearchCriteria().intDaysShortNoticeRequired().setValue(null);
		}
		
		// Update the controls state
		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupElectiveListStatusTCIValueChanged() throws PresentationLogicException
	{
		// If there is a value selected, then automatically select the 'Requires TCI' for Patient Elective Status
		if (!GroupElectiveListStatusTCIEnumeration.None.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().getValue()))
			form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValue(GroupElectiveListStatusEnumeration.rdoRequiresTCI);
		
		// Update the controls state
		updateControlsState();
	}
	
	
	@Override
	protected void onChkShortNoticeValueChanged() throws PresentationLogicException
	{
		// Update the controls state
		updateControlsState();
	}

	
	@Override
	protected void onIntPlannedDateInValueChanged() throws PresentationLogicException
	{
		// Update the controls state
		updateControlsState();
	}


	@Override
	protected void onIntRTTDateBreachInValueChanged() throws PresentationLogicException
	{
		// Update the controls state
		updateControlsState();
	}
	
	
	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//---------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Initialize the form
	 */
	private void initialize()
	{
		// Clear global contexts (except persistent search criteria) & local contexts
		clearGlobalContexts();
		clearLocalContexts();

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.lyrMain().tabPageSearchResults().grdElectiveList().setColumnIdentifierCaption(dispIdType.getIItemText());
		
		populateHospitals(domain.listHospitals());
		
		// Exclude the 'Seconds', 'Minutes', 'Hours'
		form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().removeRow(TimeUnitsSecondsToMonths.SECONDS);
		form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().removeRow(TimeUnitsSecondsToMonths.MINUTES);
		form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().removeRow(TimeUnitsSecondsToMonths.HOURS);
		
		form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().removeRow(TimeUnitsSecondsToMonths.SECONDS);
		form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().removeRow(TimeUnitsSecondsToMonths.MINUTES);
		form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().removeRow(TimeUnitsSecondsToMonths.HOURS);
		
		
		// Exclude 'LA - PreAssessment' anaesthetic type
		form.lyrMain().tabPageSearchCriteria().cmbAnaestheticType().removeRow(AnaestheticType.LA_PRE_ASSESSMENT);
	}


	/**
	 * Present the screen to user
	 */
	private void open()
	{
		if (form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement() != null)
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement());
			search(false);
		}
		
		updateControlsState();
	}
	
	/**
	 * Search method
	 * @param verbose
	 */
	private void search(boolean verbose)
	{
		// Step 1 - Clear selection and search grid
		form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().clear();
		
		clearGlobalContexts();
		clearLocalContexts();
		
		
		// Step 2 - Validate search criteria
		String[] errors = validateSearchCriteria();
		
		if (errors != null && errors.length > 0)
		{
			if (verbose) engine.showErrors(errors);
			return;
		}
		
		
		// Step 3 - Persist search criteria & perform search
		
		SearchCriteriaForElectiveListManagementVo searchCriteria = populateSearchCriteriaDataFromScreen();
		
		form.getGlobalContext().RefMan.setSearchCriteriaForElectiveListManagement(searchCriteria);
		PatientElectiveListShortVoCollection collPatientElectiveList = domain.listElectiveListEntries(searchCriteria);
		
		
		// Step 4 - Display message for "No records found" if no results are found, or switch to results tab
		if (verbose && (collPatientElectiveList == null || collPatientElectiveList.size() == 0))
		{
			engine.showMessage("No records that match the search criteria entered were found.", "No Data Found", MessageButtons.OK,MessageIcon.INFORMATION);
		}
		else
		{
			form.lyrMain().showtabPageSearchResults();
		}
		
		// Step 5 - Populate results to screen
		populateGrid(collPatientElectiveList);
	}
	
	
	/**
	 * Function used to validate search criteria
	 * @return List of validation errors
	 */
	private String[] validateSearchCriteria()
	{
		// Error list
		ArrayList<String> errorList = new ArrayList<String>();
		
		boolean searchCriteriaEntered = false;

		
		if (!GroupElectiveListTypeEnumeration.None.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().getValue()))
			searchCriteriaEntered = true;
		
		if (!GroupAdmissionTypeEnumeration.None.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()))
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().cmbUrgency().getValue() != null)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().chkListCancerReferralOnly().getValue() == true)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().cmbHospital().getValue() != null)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().qmbService().getValue() != null)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().qmbConsultant().getValue() != null)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().qmbProcedure().getValue() != null)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().getValue() != null)
			searchCriteriaEntered = true;
		
		if (!GroupTheatreTypeEnumeration.None.equals(form.lyrMain().tabPageSearchCriteria().GroupTheatreType().getValue()))
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().cmbAnaestheticType().getValue() != null)
			searchCriteriaEntered = true;
		
		if (!GroupElectiveListStatusEnumeration.None.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
			searchCriteriaEntered = true;
		
		if (!GroupElectiveListStatusTCIEnumeration.None.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().getValue()))
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().chkShortNotice().getValue() == true)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().intDaysShortNoticeRequired().getValue() != null)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().getValue() != null)
		{
			searchCriteriaEntered = true;
			
			if (form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().getValue() == null)
				errorList.add("'RTT Breach Time Units' value is mandatory if 'RTT Breach Date in' value is entered.");
		}
		
		if (form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().getValue() != null)
		{
			searchCriteriaEntered = true;
			
			if (form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().getValue() == null)
				errorList.add("'RTT Breach in' value is mandatory if 'RTT Breach Time Units' value is entered.");
		}
		
		if (form.lyrMain().tabPageSearchCriteria().chkIncludePatientsBreachedRTTDate().getValue() == true)
			searchCriteriaEntered = true;
		
		if (form.lyrMain().tabPageSearchCriteria().intPlannedDateIn().getValue() != null)
		{
			searchCriteriaEntered = true;
			
			if (form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().getValue() == null)
				errorList.add("'Planned Date Time Units' value is mandatory if 'Planned Date in' value is entered.");
		}
		
		if (form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().getValue() != null)
		{
			searchCriteriaEntered = true;
			
			if (form.lyrMain().tabPageSearchCriteria().intPlannedDateIn().getValue() == null)
				errorList.add("'Planned Date in' value is mandatory if 'Planned Date Time Units' value is entered.");
		}
		
		if (form.lyrMain().tabPageSearchCriteria().chkIncludePastPlannedDate().getValue() == true)
			searchCriteriaEntered = true;

		
		if (searchCriteriaEntered == false)
		{
			errorList.add("At least one search criteria must be selected");
		}
		
		return errorList.toArray(new String[errorList.size()]);
	}
	
	
	/**
	 *	Function used to update the controls state
	 */
	private void updateControlsState()
	{
		boolean surveillanceElectiveListType = GroupElectiveListTypeEnumeration.rdoPlannedSurveillance.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().getValue());

		form.lyrMain().tabPageSearchCriteria().lblUrgency().setVisible(!surveillanceElectiveListType);
		form.lyrMain().tabPageSearchCriteria().cmbUrgency().setVisible(!surveillanceElectiveListType);
		
		
		boolean removedElectiveListStatus = GroupElectiveListStatusEnumeration.rdoRemoved.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue());
		
		form.lyrMain().tabPageSearchCriteria().pnlShortNotice().setVisible(!removedElectiveListStatus);
		form.lyrMain().tabPageSearchCriteria().chkShortNotice().setVisible(!removedElectiveListStatus);
		form.lyrMain().tabPageSearchCriteria().lblDaysShortNoticeRequired().setVisible(!removedElectiveListStatus && Boolean.TRUE.equals(form.lyrMain().tabPageSearchCriteria().chkShortNotice().getValue()));
		form.lyrMain().tabPageSearchCriteria().intDaysShortNoticeRequired().setVisible(!removedElectiveListStatus && Boolean.TRUE.equals(form.lyrMain().tabPageSearchCriteria().chkShortNotice().getValue()));
		
		form.lyrMain().tabPageSearchCriteria().chkIncludePatientsBreachedRTTDate().setEnabled(form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().getValue() != null);
		form.lyrMain().tabPageSearchCriteria().lblPlannedDateIn().setVisible(surveillanceElectiveListType);
		form.lyrMain().tabPageSearchCriteria().intPlannedDateIn().setVisible(surveillanceElectiveListType);
		form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().setVisible(surveillanceElectiveListType);
		form.lyrMain().tabPageSearchCriteria().chkIncludePastPlannedDate().setVisible(surveillanceElectiveListType);
		form.lyrMain().tabPageSearchCriteria().chkIncludePastPlannedDate().setEnabled(form.lyrMain().tabPageSearchCriteria().intPlannedDateIn().getValue() != null);
		
		form.lyrMain().tabPageSearchCriteria().GroupTheatreType().setVisible(!GroupAdmissionTypeEnumeration.rdoMedical.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()));
		
		form.lyrMain().tabPageSearchResults().btnTransferToEL().setEnabled(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement() != null
																				&& form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getElectiveListName() != null);
		
		// Update the context menu state
		updateContextMenu();
	}


	/**
	 * Function used to update the context menu options state
	 */
	private void updateContextMenu()
	{
		// Hide all context menu options
		form.getContextMenus().RefMan.hideAllPatientElectiveListManagementMenuItems();
		
		PatientElectiveListShortVo patientElectiveList = form.lyrMain().tabPageSearchResults().grdElectiveList().getValue();
		// The Patient Elective List retrieved from database when the selection on the grid is changed
		PatientElectiveListForTCIDetailsDialogVo selectedPatientElectiveList = form.getLocalContext().getPatientElectiveList();
		
		boolean hasAppointment = selectedPatientElectiveList != null 
										&& (
												(selectedPatientElectiveList.getTCIDetails() != null && selectedPatientElectiveList.getTCIDetails().getAppointment() != null)
												|| (selectedPatientElectiveList.getTheatreAppointment() != null && selectedPatientElectiveList.getTheatreAppointment().getCurrentStatusRecord() != null && !Status_Reason.CANCELLED.equals(selectedPatientElectiveList.getTheatreAppointment().getCurrentStatusRecord().getStatus()) && appointmentIsInTheFuture(selectedPatientElectiveList.getTheatreAppointment())) 
											);
		boolean appointmentCancelledOrCompleted = selectedPatientElectiveList != null
														&& selectedPatientElectiveList.getTCIDetails()!= null
														&& selectedPatientElectiveList.getTCIDetails().getAppointment() != null
														&& selectedPatientElectiveList.getTCIDetails().getAppointment().getCurrentStatusRecord() != null 
														&& Status_Reason.CANCELLED.equals(selectedPatientElectiveList.getTCIDetails().getAppointment().getCurrentStatusRecord().getStatus());
		
		boolean requiresTCI = patientElectiveList != null && patientElectiveList.getElectiveListStatus() != null && WaitingListStatus.REQUIRES_TCI.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus());
		boolean givenTCI = patientElectiveList != null && patientElectiveList.getElectiveListStatus() != null && WaitingListStatus.TCI_GIVEN.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus());
		boolean isRemoved = patientElectiveList != null && patientElectiveList.getElectiveListStatus() != null && WaitingListStatus.REMOVED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus());

		boolean isSurgicalOrEndoscopy = patientElectiveList != null && (WaitingCardAdmissionType.ENDOSCOPY.equals(patientElectiveList.getAdmissionType()) || WaitingCardAdmissionType.SURGICAL.equals(patientElectiveList.getAdmissionType()));
		
		boolean notFitForSurgery = patientElectiveList != null && YesNoUnknown.NO.equals(patientElectiveList.getFitForSurgery());
		boolean tciGivenAndApptCancelled = selectedPatientElectiveList != null && selectedPatientElectiveList.getElectiveListStatus() != null && WaitingListStatus.TCI_GIVEN.equals(selectedPatientElectiveList.getElectiveListStatus().getElectiveListStatus())
											&& selectedPatientElectiveList.getTCIDetails() != null && selectedPatientElectiveList.getTCIDetails().getAppointment() != null && selectedPatientElectiveList.getTCIDetails().getAppointment().getCurrentStatusRecord() != null && Status_Reason.CANCELLED.equals(selectedPatientElectiveList.getTCIDetails().getAppointment().getCurrentStatusRecord().getStatus());
		
		boolean preAssessmentRequired = patientElectiveList != null && Boolean.TRUE.equals(patientElectiveList.getPreAssessmentRequired());
		boolean sourceOfReferralNationalScreening = patientElectiveList != null && patientElectiveList.getReferral() != null && patientElectiveList.getReferral().getReferralDetails() != null &&  SourceOfReferral.NATIONAL_SCREENING.equals(patientElectiveList.getReferral().getReferralDetails().getReferrerType());
		boolean referralUrgencyOrSourceOfReferral = patientElectiveList != null && patientElectiveList.getReferral() != null && (ReferralUrgency.TWO_WEEK_WAIT.equals(patientElectiveList.getReferral().getUrgency()) || ReferralUrgency.CONSULTANT_UPGRADE.equals(patientElectiveList.getReferral().getUrgency()) || sourceOfReferralNationalScreening );
		boolean preAssessmentCompletionExemptService = patientElectiveList != null && patientElectiveList.getReferral() != null && patientElectiveList.getReferral().getReferralDetails() != null && patientElectiveList.getReferral().getReferralDetails().getService() != null && Boolean.TRUE.equals(patientElectiveList.getReferral().getReferralDetails().getService().getIsPreAssessmentCompletionExempt());
		
		boolean requiresVetting = patientElectiveList != null && Boolean.TRUE.equals(patientElectiveList.getRequiresVetting()); //WDEV-22401
		
		boolean canBookTheatre = (!hasAppointment || appointmentCancelledOrCompleted) && !notFitForSurgery && !isRemoved
									&& (
    											(isSurgicalOrEndoscopy && (requiresTCI || tciGivenAndApptCancelled))
    										|| 	(preAssessmentRequired && (preAssessmentCompletionExemptService || referralUrgencyOrSourceOfReferral))
										) && !requiresVetting ; //WDEV-22401
		
		
		// Option 'View Elective List Details'
		form.getContextMenus().RefMan.getPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem().setVisible(patientElectiveList != null);
		// Option 'Book Theatre'
		form.getContextMenus().RefMan.getPatientElectiveListManagementBOOK_THEATREItem().setVisible(false); //WDEV-22832
		// Option 'Cancel TCI'
		form.getContextMenus().RefMan.getPatientElectiveListManagementCANCEL_TCIItem().setVisible(givenTCI);
		// Option 'Remove'
		form.getContextMenus().RefMan.getPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem().setVisible(patientElectiveList != null && !isRemoved);
		// Option 'Patient treated as an emergency'
		form.getContextMenus().RefMan.getPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem().setVisible(patientElectiveList != null && !isRemoved);
		
		// Option 'Referral Details'
		form.getContextMenus().RefMan.getPatientElectiveListManagementREFERRAL_DETAILSItem().setVisible(patientElectiveList != null);
		
//		form.getContextMenus().RefMan.getPatientElectiveListManagementRECORDTCIItem().setVisible(patientElectiveList != null && (patientElectiveList.getTCIDetails() == null || Boolean.FALSE.equals(patientElectiveList.getTCIDetails().getIsActive())) && WaitingListStatus.REQUIRES_TCI.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) && WaitingCardAdmissionType.MEDICAL.equals(patientElectiveList.getAdmissionType()));
		
//		form.getContextMenus().RefMan.getPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem().setVisible(patientElectiveList != null && patientElectiveList.getElectiveListStatusIsNotNull() && (WaitingListStatus.REQUIRES_TCI.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) || WaitingListStatus.CREATED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus())));    //wdev-18320,wdev-18384 //WDEV-19107
//		form.getContextMenus().RefMan.getPatientElectiveListManagementRECORDTCIItem().setVisible(patientElectiveList != null && (patientElectiveList.getTCIDetails() == null || (patientElectiveList.getTCIDetails() != null && patientElectiveList.getTCIDetails().getTCIDate()==null))&& patientElectiveList.getElectiveListStatusIsNotNull() && (WaitingListStatus.REQUIRES_TCI.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) || WaitingListStatus.CREATED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus())) && patientElectiveList.getElectiveAdmissionTypeIsNotNull() && (patientElectiveList.getElectiveAdmissionType().equals(ElectiveAdmissionType.BOOKED_TYPE12) || patientElectiveList.getElectiveAdmissionType().equals(ElectiveAdmissionType.ELECTIVE_TYPE11) || patientElectiveList.getElectiveAdmissionType().equals(ElectiveAdmissionType.PLANNED_TYPE13) )); //WDEV-19107  //WDEV-19940
//		form.getContextMenus().RefMan.getPatientElectiveListManagementAMEND_TCIItem().setVisible(patientElectiveList != null && patientElectiveList.getTCIDetailsIsNotNull() && !isRemoved);
//		form.getContextMenus().RefMan.getPatientElectiveListManagementCANCEL_TCIItem().setVisible(patientElectiveList != null && patientElectiveList.getTCIDetailsIsNotNull() && patientElectiveList.getTCIDetails().getTCIDate()!=null && Boolean.TRUE.equals(patientElectiveList.getTCIDetails().getIsActive()));		//wdev-18384 //WDEV-18527  //WDEV-19940 
//		form.getContextMenus().RefMan.getPatientElectiveListManagementRECORD_ERODItem().setVisible(patientElectiveList != null && !patientElectiveList.getTCIDetailsIsNotNull() && !patientElectiveList.getERODIsNotNull() && !isRemoved && patientElectiveList.getElectiveAdmissionTypeIsNotNull() && ( patientElectiveList.getElectiveAdmissionType().equals(ElectiveAdmissionType.BOOKED_TYPE12) || patientElectiveList.getElectiveAdmissionType().equals(ElectiveAdmissionType.ELECTIVE_TYPE11))); //wdev-18384
//		form.getContextMenus().RefMan.getPatientElectiveListManagementAMEND_ERODItem().setVisible(patientElectiveList != null && patientElectiveList.getERODIsNotNull() && !isRemoved);
		//form.getContextMenus().RefMan.getPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && !tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED) && !tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.SUSPENDED));   //wdev-21045
		//form.getContextMenus().RefMan.getPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.SUSPENDED));																								  //wdev-21045			
//		form.getContextMenus().RefMan.getPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem().setVisible(patientElectiveList != null && !isRemoved);
//		form.getContextMenus().RefMan.getPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem().setVisible(patientElectiveList != null && isRemoved && isPatientRemovedForOtherReasons); 	

		// http://jira/browse/WDEV-22379
		boolean isPatientRemovedForOtherReasons = patientElectiveList != null 
				&& patientElectiveList.getElectiveListStatus() != null
				&& patientElectiveList.getElectiveListStatus().getElectiveListStatus() != null
				&& patientElectiveList.getElectiveListStatus().getRemovalReason() != null
				&& (WaitingListStatus.REMOVED).equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus())
				&& (ElectiveListStatusReason.PATIENT_REMOVED_FOR_OTHER_REASONS).equals(patientElectiveList.getElectiveListStatus().getRemovalReason());
		
		form.getContextMenus().RefMan.getPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem().setVisible(patientElectiveList != null 
				&& isRemoved 
				&& isPatientRemovedForOtherReasons);	
		//WDEV 22379
	}


	//---------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form data exchange functions
	//---------------------------------------------------------------------------------------------------------------------------------------------------------

	
	/**
	 *	Function used to clear screen (search criteria & results)
	 */
	private void clearScreen()
	{
		// Clear search criteria controls
		clearSearchControls();
		// Clear search results grid
		form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().clear();
	}
	
	private boolean appointmentIsInTheFuture(Booking_AppointmentLiteVo theatreAppointment)
	{
		if(theatreAppointment == null)
			return false;
		
		if(theatreAppointment.getAppointmentDate() == null || theatreAppointment.getApptStartTime() == null)
			return false;
		
		DateTime apptDateTime = new DateTime(theatreAppointment.getAppointmentDate(), theatreAppointment.getApptStartTime());
		
		if(apptDateTime.isGreaterThan(new DateTime()))
			return true;
		
		return false;
	}
	
	/**
	 *	Function to clear search criteria controls 
	 */
	private void clearSearchControls()
	{
		form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().setValue(null);
		form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().setValue(null);
		form.lyrMain().tabPageSearchCriteria().cmbUrgency().setValue(null);
		form.lyrMain().tabPageSearchCriteria().chkListCancerReferralOnly().setValue(null);
		form.lyrMain().tabPageSearchCriteria().cmbHospital().setValue(null);
		form.lyrMain().tabPageSearchCriteria().qmbService().clear();
		form.lyrMain().tabPageSearchCriteria().qmbConsultant().clear();
		form.lyrMain().tabPageSearchCriteria().qmbProcedure().clear();
		form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().clear();
		form.lyrMain().tabPageSearchCriteria().GroupTheatreType().setValue(null);
		form.lyrMain().tabPageSearchCriteria().cmbAnaestheticType().setValue(null);
		form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValue(null);
		form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().setValue(null);
		form.lyrMain().tabPageSearchCriteria().chkShortNotice().setValue(null);
		form.lyrMain().tabPageSearchCriteria().intDaysShortNoticeRequired().setValue(null);
		form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().setValue(null);
		form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().setValue(null);
		form.lyrMain().tabPageSearchCriteria().chkIncludePatientsBreachedRTTDate().setValue(null);
		form.lyrMain().tabPageSearchCriteria().intPlannedDateIn().setValue(null);
		form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().setValue(null);
		form.lyrMain().tabPageSearchCriteria().chkIncludePastPlannedDate().setValue(null);
	}

	
	/**
	 * Function to clear global contexts used on form	
	 */
	private void clearGlobalContexts()
	{
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Core.setEpisodeofCareShort(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setCurrentClinicalContact(null);
		form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(null);
	}
	
	
	/**
	 * Function used to clear local contexts used on form
	 */
	private void clearLocalContexts()
	{
		form.getLocalContext().setCatsReferralListVo(null);
	}
	
	
	/**
	 * Function to retrieve the search criteria from screen
	 * @return Search criteria structure populated with values entered by user
	 */
	private SearchCriteriaForElectiveListManagementVo populateSearchCriteriaDataFromScreen()
	{
		SearchCriteriaForElectiveListManagementVo criteria = new SearchCriteriaForElectiveListManagementVo();
		
		// Elective Admission Type
		criteria.setType(new ElectiveAdmissionTypeCollection());
		
		if (GroupElectiveListTypeEnumeration.rdoWaitingBooked.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().getValue()))
		{
			criteria.getType().add(ElectiveAdmissionType.ELECTIVE_TYPE11);
			criteria.getType().add(ElectiveAdmissionType.BOOKED_TYPE12);
		}
		else if (GroupElectiveListTypeEnumeration.rdoPlannedSurveillance.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().getValue()))
		{
			criteria.getType().add(ElectiveAdmissionType.PLANNED_TYPE13);
		}
		
		// Admission Type
		if (GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()))
		{
			criteria.setAdmissionType(WaitingCardAdmissionType.SURGICAL);
		}
		else if (GroupAdmissionTypeEnumeration.rdoMedical.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()))
		{
			criteria.setAdmissionType(WaitingCardAdmissionType.MEDICAL);
		}
		else if (GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().getValue()))
		{
			criteria.setAdmissionType(WaitingCardAdmissionType.ENDOSCOPY);
		}
		
		// Urgency
		criteria.setUrgency(form.lyrMain().tabPageSearchCriteria().cmbUrgency().getValue());
		
		// List only cancer referrals
		criteria.setOnlyCancerReferrals(form.lyrMain().tabPageSearchCriteria().chkListCancerReferralOnly().getValue());
		
		// Hospital
		criteria.setHospital(form.lyrMain().tabPageSearchCriteria().cmbHospital().getValue());
		
		// Service
		criteria.setService(form.lyrMain().tabPageSearchCriteria().qmbService().getValue());
		
		// List Owner (Consultant)
		criteria.setConsultant(form.lyrMain().tabPageSearchCriteria().qmbConsultant().getValue());
		
		// Procedure
		criteria.setProcedure(form.lyrMain().tabPageSearchCriteria().qmbProcedure().getValue());
		
		// Elective List name
		criteria.setElectiveListName(form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().getValue());
		
		// Theatre type - Day Case or Inpatient Theatre type
		if (GroupTheatreTypeEnumeration.rdoDaySurgeryTheatre.equals(form.lyrMain().tabPageSearchCriteria().GroupTheatreType().getValue()))
		{
			criteria.setTheatreType(TheatreType.DAYCASE);
		}
		else if (GroupTheatreTypeEnumeration.rdoInpatientTheatre.equals(form.lyrMain().tabPageSearchCriteria().GroupTheatreType().getValue()))
		{
			criteria.setTheatreType(TheatreType.INPATIENT);
		}
		
		// Anaesthetic type
		criteria.setAnaestheticType(form.lyrMain().tabPageSearchCriteria().cmbAnaestheticType().getValue());
		
		
		// Elective List Status
		if (GroupElectiveListStatusEnumeration.rdoRequiresTCI.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
		{
			criteria.setElectiveListStatus(ELECTIVE_LIST_STATUS_REQUIRES_TCI);
			
			if (GroupElectiveListStatusTCIEnumeration.rdoTCIDeferredRecordsForClinicalReasonsOnly.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().getValue()))
			{
				criteria.setElectiveListStatusRequiresTCISubOption(ELECTIVE_LIST_REQUIRES_TCI_DEFERRED_RECORDDS_FOR_CLINICAL_REASONS);
			}
			else if (GroupElectiveListStatusTCIEnumeration.rdoTCI28DayRulePatientsOnly.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().getValue()))
			{
				criteria.setElectiveListStatusRequiresTCISubOption(ELECTIVE_LIST_REQUIRES_TCI_28_DAYS_RULE_PATIENTS);
			}
		}
		else if (GroupElectiveListStatusEnumeration.rdoPreAssessmentOutcomeRequired.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
		{
			criteria.setElectiveListStatus(ELECTIVE_LIST_STATUS_PREASSESSMENT_OUTCOME_REQUIRED);
			criteria.setElectiveListStatusRequiresTCISubOption(null);
		}
		else if (GroupElectiveListStatusEnumeration.rdoNotFitForSurgery.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
		{
			criteria.setElectiveListStatus(ELECTIVE_LIST_STATUS_NOT_FIT_FOR_SURGERY);
			criteria.setElectiveListStatusRequiresTCISubOption(null);
		}
		else if (GroupElectiveListStatusEnumeration.rdoTCIGiven.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
		{
			criteria.setElectiveListStatus(ELECTIVE_LIST_STATUS_TCI_GIVEN);
			criteria.setElectiveListStatusRequiresTCISubOption(null);
		}
		else if (GroupElectiveListStatusEnumeration.rdoRemoved.equals(form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().getValue()))
		{
			criteria.setElectiveListStatus(ELECTIVE_LIST_STATUS_REMOVED);
			criteria.setElectiveListStatusRequiresTCISubOption(null);
		}
		
		// Short notice
		criteria.setShortNotice(form.lyrMain().tabPageSearchCriteria().chkShortNotice().getValue());
		// Short notice days required
		criteria.setDaysNoticeRequired(form.lyrMain().tabPageSearchCriteria().intDaysShortNoticeRequired().getValue());
		
		
		// RTT Breach in 
		criteria.setRTTBreachIn(form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().getValue());
		criteria.setRTTBreachInPeriod(form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().getValue());
		criteria.setIncludePatientsRTTBreached(form.lyrMain().tabPageSearchCriteria().chkIncludePatientsBreachedRTTDate().getValue());
		
		// Planned Date in
		criteria.setPlannedDateIn(form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().getValue());
		criteria.setPlannedDateInPeriod(form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().getValue());
		criteria.setIncludePatientsPastPlannedDates(form.lyrMain().tabPageSearchCriteria().chkIncludePastPlannedDate().getValue());
				
		return criteria;
	}

	
	/**
	 * Function used to set the search criteria to form from persistent data structure
	 * @param criteria - persistent data structure for search criteria
	 */
	private void populateSearchCriteriaScreenFromData(SearchCriteriaForElectiveListManagementVo criteria)
	{
		clearSearchControls();

		if (criteria == null)
			return;

		// Set Elective List Type value
		if (criteria.getType() != null)
		{
			if (criteria.getType().contains(ElectiveAdmissionType.BOOKED_TYPE12))
				form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().setValue(GroupElectiveListTypeEnumeration.rdoWaitingBooked);
			else if (criteria.getType().contains(ElectiveAdmissionType.PLANNED_TYPE13))
				form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().setValue(GroupElectiveListTypeEnumeration.rdoPlannedSurveillance);
		}
		
		// Set Admission Type value
		if (WaitingCardAdmissionType.SURGICAL.equals(criteria.getAdmissionType()))
			form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoSurgical);
		else if (WaitingCardAdmissionType.MEDICAL.equals(criteria.getAdmissionType()))
			form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoMedical);
		else if (WaitingCardAdmissionType.ENDOSCOPY.equals(criteria.getAdmissionType()))
			form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoEndoscopy);
		
		// Set Urgency value
		form.lyrMain().tabPageSearchCriteria().cmbUrgency().setValue(criteria.getUrgency());
		
		// Set List only Cancer Referrals value
		form.lyrMain().tabPageSearchCriteria().chkListCancerReferralOnly().setValue(criteria.getOnlyCancerReferrals());
		
		// Set Hospital value
		form.lyrMain().tabPageSearchCriteria().cmbHospital().setValue(criteria.getHospital());
		
		// Set Service value
		if (criteria.getService() != null)
		{
			form.lyrMain().tabPageSearchCriteria().qmbService().newRow(criteria.getService(), criteria.getService().getServiceName());
			form.lyrMain().tabPageSearchCriteria().qmbService().setValue(criteria.getService());
		}
		
		// Set List Owner (Consultant) value
		if (criteria.getConsultant() != null)
		{
			form.lyrMain().tabPageSearchCriteria().qmbConsultant().newRow(criteria.getConsultant(), criteria.getConsultant().getIMosName());
			form.lyrMain().tabPageSearchCriteria().qmbConsultant().setValue(criteria.getConsultant());
		}
		
		// Set Procedure value
		if (criteria.getProcedure() != null)
		{
			form.lyrMain().tabPageSearchCriteria().qmbProcedure().newRow(criteria.getProcedure(), criteria.getProcedure().getProcedureName());
			form.lyrMain().tabPageSearchCriteria().qmbProcedure().setValue(criteria.getProcedure());
		}
		
		// Set Elective List Name value
		if (criteria.getElectiveListName() != null)
		{
			form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().newRow(criteria.getElectiveListName(), criteria.getElectiveListName().getWaitingListName());
			form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().setValue(criteria.getElectiveListName());
		}
		
		// Set Theatre Type value
		if (TheatreType.DAYCASE.equals(criteria.getTheatreType()))
			form.lyrMain().tabPageSearchCriteria().GroupTheatreType().setValue(GroupTheatreTypeEnumeration.rdoDaySurgeryTheatre);
		else if (TheatreType.INPATIENT.equals(criteria.getTheatreType()))
			form.lyrMain().tabPageSearchCriteria().GroupTheatreType().setValue(GroupTheatreTypeEnumeration.rdoDaySurgeryTheatre);
		
		// Set Anaesthetic Type value
		form.lyrMain().tabPageSearchCriteria().cmbAnaestheticType().setValue(criteria.getAnaestheticType());
		
		// Set Elective List Status value
		if (criteria.getElectiveListStatus() != null)
		{
			if (ELECTIVE_LIST_STATUS_REQUIRES_TCI.equals(criteria.getElectiveListStatus()))
			{
				form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValue(GroupElectiveListStatusEnumeration.rdoRequiresTCI);
				
				if (criteria.getElectiveListStatusRequiresTCISubOption() != null)
				{
					if (ELECTIVE_LIST_REQUIRES_TCI_DEFERRED_RECORDDS_FOR_CLINICAL_REASONS.equals(criteria.getElectiveListStatusRequiresTCISubOption()))
						form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().setValue(GroupElectiveListStatusTCIEnumeration.rdoTCIDeferredRecordsForClinicalReasonsOnly);
					else if (ELECTIVE_LIST_REQUIRES_TCI_28_DAYS_RULE_PATIENTS.equals(criteria.getElectiveListStatusRequiresTCISubOption()))
						form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().setValue(GroupElectiveListStatusTCIEnumeration.rdoTCI28DayRulePatientsOnly);
				}
			}
			else if (ELECTIVE_LIST_STATUS_PREASSESSMENT_OUTCOME_REQUIRED.equals(criteria.getElectiveListStatus()))
			{
				form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValue(GroupElectiveListStatusEnumeration.rdoPreAssessmentOutcomeRequired);
			}
			else if (ELECTIVE_LIST_STATUS_NOT_FIT_FOR_SURGERY.equals(criteria.getElectiveListStatus()))
			{
				form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValue(GroupElectiveListStatusEnumeration.rdoNotFitForSurgery);
			}
			else if (ELECTIVE_LIST_STATUS_TCI_GIVEN.equals(criteria.getElectiveListStatus()))
			{
				form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValue(GroupElectiveListStatusEnumeration.rdoTCIGiven);
			}
			else if (ELECTIVE_LIST_STATUS_REMOVED.equals(criteria.getElectiveListStatus()))
			{
				form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValue(GroupElectiveListStatusEnumeration.rdoRemoved);
			}
		}
		
		// Set Short Notice value
		form.lyrMain().tabPageSearchCriteria().chkShortNotice().setValue(criteria.getShortNotice());
		
		// Set Number of Days Notice Required value
		form.lyrMain().tabPageSearchCriteria().intDaysShortNoticeRequired().setValue(criteria.getDaysNoticeRequired());
		
		// Set RTT Breach Date In value
		form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().setValue(criteria.getRTTBreachIn());
		// Set RTT Breach Period value
		form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().setValue(criteria.getRTTBreachInPeriod());
		// Set Include Patients that have breached value
		form.lyrMain().tabPageSearchCriteria().chkIncludePatientsBreachedRTTDate().setValue(criteria.getIncludePatientsRTTBreached());
	}
	
	
	/**
	 * Function used to populate Hospital list to combo-box
	 * @param hospitals
	 */
	private void populateHospitals(LocationLiteVoCollection hospitals)
	{
		// Clear Hospital combo-box
		form.lyrMain().tabPageSearchCriteria().cmbHospital().clear();
		
		// Check if the hospital collection has data
		if (hospitals == null)
			return;
		
		// Add hospitals to combo-box
		for (LocationLiteVo hospital : hospitals)
		{
			form.lyrMain().tabPageSearchCriteria().cmbHospital().newRow(hospital, hospital.getName());
		}
		
		// If there is only one value - default to it
		if (hospitals.size() == 1)
			form.lyrMain().tabPageSearchCriteria().cmbHospital().setValue(hospitals.get(0));
	}


	/**
	 * Function used to populate Service list to query combo-box
	 * @param services
	 */
	private void populateServices(ServiceForElectiveListConfigVoCollection services)
	{
		// Clear Service query combo-box
		form.lyrMain().tabPageSearchCriteria().qmbService().clear();

		// Check if the service collection has data
		if (services == null)
			return;

		// Add services to query combo-box
		for (ServiceForElectiveListConfigVo service : services)
		{
			form.lyrMain().tabPageSearchCriteria().qmbService().newRow(service, service.getServiceName());
		}

		// If there is only one value - default to it, else show the query combo-box opened
		if (services.size() == 1)
			form.lyrMain().tabPageSearchCriteria().qmbService().setValue(services.get(0));
		else
			form.lyrMain().tabPageSearchCriteria().qmbService().showOpened();
	}
	
	
	/**
	 * Function used to populate Consultant list to query combo-box
	 * @param consultants
	 */
	private void populateConsultants(HcpLiteVoCollection consultants)
	{
		// Clear List Owner query combo-box
		form.lyrMain().tabPageSearchCriteria().qmbConsultant().clear();

		// Check if the consultant collection has data
		if (consultants == null)
			return;

		// Add consultants to query combo-box
		for (HcpLiteVo consultant : consultants)
		{
			form.lyrMain().tabPageSearchCriteria().qmbConsultant().newRow(consultant, consultant.getName().toString());
		}

		// If there is only one value - default to it, else show the query combo-box opened
		if (consultants.size() == 1)
			form.lyrMain().tabPageSearchCriteria().qmbConsultant().setValue(consultants.get(0));
		else
			form.lyrMain().tabPageSearchCriteria().qmbConsultant().showOpened();
	}


	/**
	 * Function used to populate Procedure list to query combo-box
	 * @param procedures
	 */
	private void populateProcedures(ProcedureLiteVoCollection procedures)
	{
		// Clear Procedure query combo-box
		form.lyrMain().tabPageSearchCriteria().qmbProcedure().clear();
			
		// Check if the procedure collection has data
		if (procedures == null)
			return;
		
		// Add procedures to query comb-box
		for (ProcedureLiteVo procedure : procedures)
		{
			form.lyrMain().tabPageSearchCriteria().qmbProcedure().newRow(procedure, procedure.getProcedureName());
		}
		
		// If there is only one value - default to it, else show the query combo-box opened
		if (procedures.size() == 1)
			form.lyrMain().tabPageSearchCriteria().qmbProcedure().setValue(procedures.get(0));
		else
			form.lyrMain().tabPageSearchCriteria().qmbProcedure().showOpened();
	}
	

	/**
	 * Function used to populate the Elective Lists to query combo-box
	 * @param electiveLists
	 */
	private void populateElectiveLists(ElectiveListConfigLiteVoCollection electiveLists)
	{
		// Clear Elective List query combo-box
		form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().clear();

		// Check if the Elective List collection has data
		if (electiveLists == null)
			return;

		// Add elective lists to query combo-box
		for (ElectiveListConfigLiteVo electiveList : electiveLists)
		{
			form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().newRow(electiveList, electiveList.getWaitingListName());
		}

		// If there is only one value - default to it, else show the query combo-box opened
		if (electiveLists.size() == 1)
			form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().setValue(electiveLists.get(0));
		else
			form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().showOpened();
	}
	

	
	private void populateGrid(PatientElectiveListShortVoCollection patientElectiveLists)
	{
		form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().clear();
		
		if (patientElectiveLists == null)
			return;
		
		for (PatientElectiveListShortVo patientElectiveList : patientElectiveLists)
		{
			grdElectiveListRow row = form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().newRow();
			
			row.setValue(patientElectiveList);
			
			if( patientElectiveList.getPatientIsNotNull() && patientElectiveList.getPatient().getNameIsNotNull() )
			{
				row.setColumnPatientName(patientElectiveList.getPatient().getName().toStringSurnameFirst());
				row.setTooltipForColumnPatientName(patientElectiveList.getPatient().getName().toStringSurnameFirst());
			}
			
			if( patientElectiveList.getPatientIsNotNull() &&  patientElectiveList.getPatient().getDisplayId() != null )
			{
				row.setColumnIdentifier(patientElectiveList.getPatient().getDisplayId().getIdValue());
				row.setTooltipForColumnIdentifier(patientElectiveList.getPatient().getDisplayId().getIdValue());
			}
			
			if( patientElectiveList.getElectiveListIsNotNull() )
			{
				row.setColumnListName(patientElectiveList.getElectiveList().getWaitingListName());
				row.setTooltipForColumnListName(patientElectiveList.getElectiveList().getWaitingListName());
			}
			
			//WDEV-22692
			if( patientElectiveList.getResponsibleHCPIsNotNull() && patientElectiveList.getResponsibleHCP().getMosIsNotNull())
			{
				row.setColumnRespHCP(patientElectiveList.getResponsibleHCP().getMos().getIMosName());
				row.setTooltipForColumnRespHCP(patientElectiveList.getResponsibleHCP().getMos().getIMosName());
			}
			//WDEV-22692 ends here
			
			if( patientElectiveList.getElectiveListIsNotNull() && patientElectiveList.getElectiveList().getServiceIsNotNull())
			{
				row.setColumnService(patientElectiveList.getElectiveList().getService().getServiceName());
				row.setTooltipForColumnService(patientElectiveList.getElectiveList().getService().getServiceName());
			}
			else if(patientElectiveList.getReferral().getReferralDetailsIsNotNull())//WDEV-23010
			{
				row.setColumnService(patientElectiveList.getReferral().getReferralDetails().getService().getServiceName());
				row.setTooltipForColumnService(patientElectiveList.getReferral().getReferralDetails().getService().getServiceName());//WDEV-23010
			}
			//wdev-19535
			if( patientElectiveList.getPriorityIsNotNull() )
			{
				row.setColumnUrgency(patientElectiveList.getPriority().getIItemText());
				row.setTooltipForColumnUrgency(patientElectiveList.getPriority().getIItemText());
			}
			//----------
			if( patientElectiveList.getDateOnListIsNotNull())
			{
				row.setColumnDateOnList( patientElectiveList.getDateOnList());
				row.setTooltipForColumnDateOnList(patientElectiveList.getDateOnList().toString());
			}
			
			if( patientElectiveList.getElectiveListStatusIsNotNull() && patientElectiveList.getElectiveListStatus().getElectiveListStatusIsNotNull() )
			{
				row.setColumnStatus(patientElectiveList.getElectiveListStatus().getElectiveListStatus().getIItemText());
				row.setTooltipForColumnStatus(WaitingListStatus.REMOVED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) 
						&& patientElectiveList.getElectiveListStatus().getRemovalReason()!=null ?"Status: " 
								+ patientElectiveList.getElectiveListStatus().getElectiveListStatus().getIItemText() 
								+ "<br> Removal Reason: "+ (patientElectiveList.getElectiveListStatus().getRemovalReasonIsNotNull()? patientElectiveList.getElectiveListStatus().getRemovalReason(): "")  
								: patientElectiveList.getElectiveListStatus().getElectiveListStatus().getIItemText()); //WDEV-18564
				
			}
			
			
			if (Rule28DayStatus.ACTIVE.equals(patientElectiveList.getRule28DayStatus()))
			{
				row.setColumnImage(form.getImages().RefMan.Appointment16);
				row.setTooltipForColumnImage(" TCI was cancelled for a Non-Medical reason and requires a TCI to be assigned soon. ");
			}
			
			//WDEV-19364
			if (patientElectiveList.getReferralIsNotNull() && patientElectiveList.getReferral().getReferralDetailsIsNotNull() && patientElectiveList.getReferral().getReferralDetails().getEnd18WWIsNotNull())
			{
				row.setColumnRTTBreachDate(patientElectiveList.getReferral().getReferralDetails().getEnd18WW());
				row.setTooltipForColumnRTTBreachDate(patientElectiveList.getReferral().getReferralDetails().getEnd18WW().toString());
			}
			
			if (patientElectiveList.getPrimaryProcedure()!=null)
			{
				row.setColumnProcedure(patientElectiveList.getPrimaryProcedure().getProcedureName());
				row.setTooltipForColumnProcedure(patientElectiveList.getPrimaryProcedure().getProcedureName());
			}
			//WDEV-19382
			if (patientElectiveList.getCreatingAppointment() != null)
			{
				Booking_AppointmentOutcomeForElectiveListVo creatingApptForELE = patientElectiveList.getCreatingAppointment();
				if (creatingApptForELE.getOutcomeReasonIsNotNull() || creatingApptForELE.getOutcomeCommentsIsNotNull())
				{
					row.setColumnOutcomeComments(form.getImages().Emergency.Edit16x16);
					row.setCellColumnOutcomeCommentsTooltip((creatingApptForELE.getOutcomeReasonIsNotNull() ? "Appointment Outcome Reason: <b>" + creatingApptForELE.getOutcomeReason().toString() + "</b><br/>" : "")
					+ (creatingApptForELE.getOutcomeCommentsIsNotNull() ? "Appointment Outcome Comments: <b>" + creatingApptForELE.getOutcomeComments() + "</b>" : ""));
				}
			}
			//wdev-19393
			if( patientElectiveList.getElectiveListStatusIsNotNull() 
					&& (patientElectiveList.getElectiveListStatus().getRemovalReasonIsNotNull() || patientElectiveList.getElectiveListStatus().getUndoRemovalReasonIsNotNull() ))
			{
				row.setColumnRemovalUndoRemovalstatus(form.getImages().Emergency.PatientStatusEnabled16);
				row.setCellColumnRemovalUndoRemovalstatusTooltip((patientElectiveList.getElectiveListStatus().getRemovalReasonIsNotNull() ? 
						"<b> Removal Reason: </b>" 
						+ patientElectiveList.getElectiveListStatus().getRemovalReason().getIItemText()
						+ "<br>": "<b> Undo Removal Reason: </b>" 
						+ patientElectiveList.getElectiveListStatus().getUndoRemovalReason().getIItemText() 
						+ "<br>" )
						+ (patientElectiveList.getElectiveListStatus().getStatusCommentIsNotNull() ? "<b>Comments: </b>" 
						+ patientElectiveList.getElectiveListStatus().getStatusComment()
						+ "<br>":""));
			}
			//wdev-22467
			if( YesNo.YES.equals(patientElectiveList.getPreColonoscopyAssessmentRequired()))
			{
				row.setColumnPreColonoscopyRequired(form.getImages().RefMan.PreColonoscopyRequired16);
				row.setTooltipForColumnPreColonoscopyRequired(" Is pre-colonoscopy assessment required? : Yes");
			}
			//----------
		}
	}

	
	
	//-----------------------------------------------------------------------------
	private Booking_AppointmentVo cancelAppt() 
	{
		int repeats = 0;
		
		do
		{
		try 
		{
		Booking_AppointmentElectiveListVo voAppt = form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull()?form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment():null;
		if (voAppt == null)
			return null;
		
		Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);
			
		if( voApptFull.getApptStatusIsNotNull()
			&& voAppt.getApptStatusIsNotNull()
			&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
		{
			engine.showMessage("The Status of the appointment has already been changed.");
			return null;
		}
			
		if( form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			// appt status and status history
			voApptFull.setApptStatus(Status_Reason.CANCELLED);
			
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptFull.setCurrentStatusRecord(voApptStatus);

			voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
			if( form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				Appointment_StatusVo cancelApptStatusData = form.getGlobalContext().Scheduling.getApptCancelStatus();
				
				voApptFull.setApptStatusReas(cancelApptStatusData.getStatusReason());
				if(cancelApptStatusData.getRebookSelectedIsNotNull())
					voApptFull.setRequiresRebook(cancelApptStatusData.getRebookSelected());
				//WDEV-19445
				if (Boolean.TRUE.equals(cancelApptStatusData.getCancelTCI()) && Boolean.TRUE.equals(cancelApptStatusData.getCancelledForNonMedicalReason()) && Status_Reason.HOSPITALCANCELLED.equals(cancelApptStatusData.getStatusReason()) && cancelApptStatusData.getStatusChangeDateTimeIsNotNull() && cancelApptStatusData.getStatusChangeDateTime().getDate().equals(cancelApptStatusData.getTCIDate()))
				{
					voApptFull.setDate28DayRuleBreach(new DateTime(voApptFull.getAppointmentDate(), voApptFull.getApptStartTime()).addDays(28).getDate());					
				}
			}
		}
		if( voApptFull.getSessionSlotIsNotNull())
			voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus()); //WDEV-18940
		
		String[] arrErrors = voApptFull.validate();
		if( arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return null;
		}
		PatientElectiveListForTCIDetailsDialogVo tempVo = form.getLocalContext().getPatientElectiveList();
		CatsReferralListVo voRef = null;
		if( tempVo != null && tempVo.getReferralIsNotNull())
		{
			voRef  = form.getLocalContext().getCatsReferralListVo();
			if( voRef == null)
				voRef = domain.getCatsReferral(tempVo.getReferral());
			
			form.getGlobalContext().RefMan.setCatsReferral(tempVo.getReferral());
			
			String[] arrErrors2 = voRef.validate();
    		if( arrErrors2 != null)
    		{
    			engine.showErrors(arrErrors2);
    			return null;
    		}
		}

			voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Referral Appointment Details");
		
			if( voRef != null) 
			{
    			domain.updateCatsReferralAdditionalInvStatus(voRef);
			}
			
			if( Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()) && voApptFull.getTheatreBooking() != null)
			{
				domain.cancelReferralEROD(voRef, voApptFull);
			}

			return voApptFull;
		} 
		catch( StaleObjectException e) 
		{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
		}
		catch (DomainInterfaceException e)
		{
			repeats++;
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");		
		return null;
	}
	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		//WDEV-11887
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}
		
		voApptStatus.setSession(voAppt.getSessionIsNotNull() ? voAppt.getSession() : null); //WDEV-23185

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}


	

	
	protected void onGrdElectiveListSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setPatientElectiveList(domain.getPatientElecticeList(form.lyrMain().tabPageSearchResults().grdElectiveList().getValue()));
		form.getGlobalContext().RefMan.setPatientElectiveListRef(form.getLocalContext().getPatientElectiveList());
		form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(null);
		if( form.getLocalContext().getPatientElectiveListIsNotNull())
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.getLocalContext().getPatientElectiveList().getPatient()));
			CatsReferralListVo voRef  = domain.getCatsReferral(form.getLocalContext().getPatientElectiveList().getReferral());
			form.getLocalContext().setCatsReferralListVo(voRef);
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShortVo(voRef.getCareContext()));
			form.getGlobalContext().RefMan.setCatsReferral(form.getLocalContext().getPatientElectiveList().getReferral());
		}
		
		updateControlsState();
	}

	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.SET_STATUS_REQUIRES_TCI: //WDEV-19107 typo fix
				review();
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.RECORDTCI:
				engine.open(form.getForms().RefMan.ElectiveListDetails, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITTCI});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.AMEND_TCI:
				engine.open(form.getForms().RefMan.ElectiveListDetails, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITTCI});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.CANCEL_TCI:
				cancelTCI();
			break;
			
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.RECORD_EROD:
				engine.open(form.getForms().RefMan.ElectiveListDetails, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITEROD});
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.AMEND_EROD:
				engine.open(form.getForms().RefMan.ElectiveListDetails, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITEROD});
				
			break;

			
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.REMOVE_FROM_ELECTIVE_LIST:
				engine.open(form.getForms().RefMan.RemoveFromElectiveList, new Object[] {form.lyrMain().tabPageSearchResults().grdElectiveList().getValue()});	//wdev-18384
			break;
			
			case ContextMenus.RefManNamespace.PatientElectiveListManagement.PATIENT_TREATED_AS_EMERGENCY:
				engine.open(form.getForms().RefMan.RemoveFromElectiveList, new Object[] {form.lyrMain().tabPageSearchResults().grdElectiveList().getValue(), ElectiveListStatusReason.PATIENT_ADMITTED_AS_AN_EMERGENCY_FOR_THE_SAME_CONDITION});
			break;

			
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_WAITING_LIST:
				 form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				 engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST, null, null, ElectiveListAddLaterDlgOpenMode.EDIT}, "Waiting List Details");
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_BOOKED_LIST:
				form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST, null, null, ElectiveListAddLaterDlgOpenMode.EDIT}, "Waiting List Details");
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_PLANNED_LIST:
				form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST, null, null, ElectiveListAddLaterDlgOpenMode.EDIT}, "Planned List Details"); 
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.EDIT_ELECTIVE_LIST_ENTRY:	
				engine.open(form.getForms().RefMan.ElectiveListDetails);//WDEV-18388
				 
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.BOOK_THEATRE:					//wdev-18662	
				bookTheatreAppt();
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.UNDO_REMOVE_FROM_ELECTIVE_LIST:		//wdev-19393
				// http://jira/browse/WDEV-22379
//				engine.open(form.getForms().RefMan.ElectiveListDetails, new Object[] {ims.admin.vo.enums.ElectiveListDetails.UNDO_REMOVAL_ELECTIVE_LIST});
				PatientElectiveListRefVo tempVo = form.getGlobalContext().RefMan.getPatientElectiveListRef();
				engine.open(form.getForms().RefMan.UndoRemovalFromWaitingList, new Object[] {tempVo});
				// http://jira/browse/WDEV-22379
				
			break;
			
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.REFERRAL_DETAILS:
				engine.open(form.getForms().RefMan.ReferralDetailsDialog);
				
			break;
		}
		
	}


	private void cancelTCI()
	{
		PatientElectiveListForTCIDetailsDialogVo selectedPatientElectiveList = form.getLocalContext().getPatientElectiveList();
		
		if (selectedPatientElectiveList != null && selectedPatientElectiveList.getTCIDetails() != null)
		{
			TCIOutcomeForPatientElectiveListVo dummyTCIOutcome = new TCIOutcomeForPatientElectiveListVo();
			dummyTCIOutcome.setTciId(form.getLocalContext().getPatientElectiveList().getTCIDetails().getID_TCIForPatientElectiveList());
			
			if (dummyTCIOutcome != null)
			{
				Boolean hasFutureAppointments = selectedPatientElectiveList.getTCIDetails().getAppointment() != null
												&& selectedPatientElectiveList.getTCIDetails().getAppointment().getTheatreBooking() != null
												&& theatreAppointmetnIsInTheFutureAndIsNotCancelled(selectedPatientElectiveList.getTCIDetails().getAppointment());
				dummyTCIOutcome.setTciHasFutureTheatreAppt(hasFutureAppointments);
				dummyTCIOutcome.setCancelTheatreAppointment(hasFutureAppointments);
			
				form.getGlobalContext().RefMan.setTCIOutcomeForPatientElectiveList(dummyTCIOutcome);
				engine.open(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog);
			}
		}
	}
	
	
	private boolean theatreAppointmetnIsInTheFutureAndIsNotCancelled(Booking_AppointmentElectiveListVo appointment)
	{
		if(appointment == null)
			return false;
		
		DateTime currentDate = new DateTime();
		
		if(appointment.getAppointmentDate() != null && currentDate.getDate().isGreaterThan(appointment.getAppointmentDate()))
			return false;
		
		if(appointment.getCurrentStatusRecord() != null && Status_Reason.CANCELLED.equals(appointment.getCurrentStatusRecord().getStatus()))
			return false;
		
		return true;
	}

	
	private void bookTheatreAppt()
	{
		if (isReferralEndOfCare())
			return;
		
		// WDEV-13243
		// Clear the book theatre global context when booking a new appointment
		form.getGlobalContext().Scheduling.setTheatreAppointment(null);
		
		//WDEV-22832
		PatientElevectiveListManagementVo patientElectiveListManagement = domain.getPatientElectiveListManagement(form.lyrMain().tabPageSearchResults().grdElectiveList().getValue());
		form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(patientElectiveListManagement.getPrimaryProcedureIsNotNull()  ? patientElectiveListManagement.getPrimaryProcedure().getProcedureName() : null);
		
		engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {patientElectiveListManagement});	//wdev-18673
		
	}
	private boolean isReferralEndOfCare()
	{
		CatsReferralListVo  voRef = form.getLocalContext().getCatsReferralListVo();
		if (voRef.getCurrentStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.END_OF_CARE))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			form.getLocalContext().setbReferralAccepted(Boolean.FALSE);
					
			return true;
		}
		else
			return false;
	}
	
	private void review()
	{
		engine.open(form.getForms().RefMan.ElectiveListDetails, new Object[]{ims.admin.vo.enums.ElectiveListDetails.REVIEW},false);  //wdev-18320
	}
	
	private boolean cancelTCIforRemove()
	{
		PatientElectiveListForTCIDetailsDialogVo record = form.getLocalContext().getPatientElectiveList();
		if( record != null )
		{
			
			// create a new electiveliststatus
			ElectiveListStatusVo electivStatus = new ElectiveListStatusVo();
			//set the values for the new created electiveliststatus 
			electivStatus.setElectiveListStatus(WaitingListStatus.REMOVED);
			electivStatus.setStatusDateTime(new DateTime());
			
			
			Object mos  = domain.getMosUser();
			MemberOfStaffLiteVo moslite = null;
			if( mos instanceof MemberOfStaffShortVo )
			{
				moslite = (MemberOfStaffLiteVo) mos;
			}
			
			electivStatus.setAuthoringUser(moslite);

			//get the history
			ElectiveListStatusVoCollection electListColl = record.getElectiveListStatusHistory();		
			if( electListColl == null )
				electListColl = new ElectiveListStatusVoCollection();
			
			electListColl.add(record.getElectiveListStatus());			//add to history the old electiveliststatus
			record.setElectiveListStatusHistory(electListColl);
			record.setElectiveListStatus(electivStatus);				//set the new electiveliststatus

			//----------
			PatientElectiveListTCIVo patTciVo = record.getTCIDetails();
			if( patTciVo != null )
			{
				
				//create a new Outcome
				TCIOutcomeForPatientElectiveListVo  temp = new TCIOutcomeForPatientElectiveListVo();
				//set the values for the new created outcome
				temp.setOutcomeReason(TCIStatusChangeReason.CANCELLEDBYREMOVALOFELECTIVELISTRECORD);
				temp.setStatusDateTime(new DateTime());
				MemberOfStaffLiteVo mossh = null;
				if( mos instanceof MemberOfStaffShortVo )
				{
					mossh = (MemberOfStaffLiteVo) mos;
				}
				temp.setChangeBy(mossh);
				if( patTciVo.getTCIDate().equals(new Date()))		//if the nowdate is equal with TCIDate 
					temp.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7);
				else
					temp.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
				
				
				//get outcome history
				TCIOutcomeForPatientElectiveListVoCollection  tempColl = patTciVo.getOutcomeHistory();
				if( tempColl == null )
					tempColl = new TCIOutcomeForPatientElectiveListVoCollection();
				
				tempColl.add(patTciVo.getCurrentOutcome());			//add the old outcome to history
				patTciVo.setOutcomeHistory(tempColl);
				patTciVo.setCurrentOutcome(temp);					//add the new created outcome to currentoutcome field 
    			
    			
				//get TCI history
    			PatientElectiveListTCIVoCollection patelctTCIcoll = record.getTCIHistory();
    			if( patelctTCIcoll == null )
    				patelctTCIcoll = new PatientElectiveListTCIVoCollection();
    			
    			patelctTCIcoll.add(record.getTCIDetails());			//add the old TCIDetails to history
    			record.setTCIHistory(patelctTCIcoll);
    			record.setTCIDetails(null);							//set NULL to TCI Details	
    			
			}
			String[] arrErrors = record.validate();
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return false;
			}
			try
			{
				record = domain.save(record);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
		}
		return true;

	}
	private void RemoveFromElective()
	{
		
		PatientElectiveListForTCIDetailsDialogVo  tempVo = form.getLocalContext().getPatientElectiveList();
		
		
		if( tempVo != null  && tempVo.getTCIDetailsIsNotNull() && tempVo.getTCIDetails().getAppointmentIsNotNull())
		{
						
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			//voApptStatus.setComment(form.txtComment().getValue());
			voApptStatus.setStatus(Status_Reason.CANCELLED);
			//voApptStatus.setStatusReason(form.cmbCancellationType().getValue());
			//voApptStatus.setCancellationReason(form.cmbCancellationReason().getValue());
			
			form.getGlobalContext().Scheduling.setApptCancelStatus(voApptStatus);
			Booking_AppointmentVo voAppt = cancelAppt();
			if( voAppt == null)
				return;
			
			cancelTCIforRemove();
			search(false);
		}
		
		else
		{
			cancelTCIforRemove();
			search(false);
		}
	}


	protected void onBtnTransferToELClick() throws PresentationLogicException 
	{		
		engine.open(form.getForms().RefMan.TransferElectiveListDialog);				
	}
	//wdev-18419

	protected void onGrdElectiveListGridHeaderClicked(int column) throws PresentationLogicException
	{
		if (form.lyrMain().tabPageSearchResults().grdElectiveList().getRows() == null || form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().size() < 2)
			return;
		PatientElectiveListShortVoCollection collPatientElectiveList = new PatientElectiveListShortVoCollection();
		for(int i = 0 ; i < form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().size();i++)
		{
			collPatientElectiveList.add(form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().get(i).getValue());
		}
		if (ELECTIVE_LIST_28DAY_RULE_COLUMN == column)
		{	
			if( form.getLocalContext().getSortOrderImage28DayRule() == null)
				form.getLocalContext().setSortOrderImage28DayRule(SortOrder.ASCENDING);
			collPatientElectiveList.sort(new Rule28Comparator(form.getLocalContext().getSortOrderImage28DayRule()));

			if(form.getLocalContext().getSortOrderImage28DayRule().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderImage28DayRule(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderImage28DayRule().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderImage28DayRule(SortOrder.ASCENDING);

		}
		else if (ELECTIVE_LIST_OUTCOME_COMMENTS_COLUMN == column)
		{
			if( form.getLocalContext().getSortOrderImageComments() == null)
				form.getLocalContext().setSortOrderImageComments(SortOrder.ASCENDING);
			collPatientElectiveList.sort(new CreatingApptOutcomeCommmentsImageComparator(form.getLocalContext().getSortOrderImageComments()));

			if(form.getLocalContext().getSortOrderImageComments().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderImageComments(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderImageComments().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderImageComments(SortOrder.ASCENDING);			
		}
		else if( ELECTIVE_LIST_PRECOLONOSCOPY_REQ_COLUMN == column)			//wdev-22467
		{
			if( form.getLocalContext().getSortOrderImagePreColonoscopyReq() == null)
				form.getLocalContext().setSortOrderImagePreColonoscopyReq(SortOrder.ASCENDING);
			
			collPatientElectiveList.sort(new PreColonoscopyReqImageComparator(form.getLocalContext().getSortOrderImagePreColonoscopyReq()));
			
			if( form.getLocalContext().getSortOrderImagePreColonoscopyReq().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderImagePreColonoscopyReq(SortOrder.DESCENDING);
			else if( form.getLocalContext().getSortOrderImagePreColonoscopyReq().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderImagePreColonoscopyReq(SortOrder.ASCENDING);
			
			
		}
		
		form.lyrMain().tabPageSearchResults().grdElectiveList().getRows().clear();
		populateGrid(collPatientElectiveList);

	}

	
	//WDEV-19382
	public class CreatingApptOutcomeCommmentsImageComparator implements Comparator<Object>
	{
		private int direction = 1;

		public CreatingApptOutcomeCommmentsImageComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public CreatingApptOutcomeCommmentsImageComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{

			Integer hasApptOutcome1 = 0;
			Integer hasApptOutcome2 = 0;

			if (ob1 instanceof PatientElevectiveListManagementVo)
			{
				PatientElevectiveListManagementVo o1 = (PatientElevectiveListManagementVo) ob1;
				if (o1.getCreatingAppointmentIsNotNull() && (o1.getCreatingAppointment().getOutcomeReasonIsNotNull() || o1.getCreatingAppointment().getOutcomeCommentsIsNotNull()))
				{
					hasApptOutcome1 = 1;

				}
			}

			if (ob2 instanceof PatientElevectiveListManagementVo)
			{
				PatientElevectiveListManagementVo o2 = (PatientElevectiveListManagementVo) ob2;
				if (o2.getCreatingAppointmentIsNotNull() && (o2.getCreatingAppointment().getOutcomeReasonIsNotNull() || o2.getCreatingAppointment().getOutcomeCommentsIsNotNull()))
				{
					hasApptOutcome2 = 1;					
				}
			}			

			if (hasApptOutcome1 != 0 && hasApptOutcome2 != 0)
			{
				return hasApptOutcome1.compareTo(hasApptOutcome2) * direction;
			}

			if (hasApptOutcome1 != 0 && hasApptOutcome2 == 0)
			{
				return direction;
			}

			if (hasApptOutcome2 != 0 && hasApptOutcome1 == 0)
			{
				return -1 * direction;
			}

			return 0;
		}		
	}
	
	//wdev-22467
	public class PreColonoscopyReqImageComparator implements Comparator<PatientElectiveListShortVo>
	{
		private int direction = 1;

		public PreColonoscopyReqImageComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public PreColonoscopyReqImageComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}


		public int compare(PatientElectiveListShortVo arg0, PatientElectiveListShortVo arg1)
		{
			if( YesNo.YES.equals(arg0.getPreColonoscopyAssessmentRequired())
					&& !YesNo.YES.equals(arg1.getPreColonoscopyAssessmentRequired()))
			{
				return direction;
			}
			
			if (!YesNo.YES.equals(arg0.getPreColonoscopyAssessmentRequired())
					&& YesNo.YES.equals(arg1.getPreColonoscopyAssessmentRequired()))
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}

	//---
			
	public class Rule28Comparator implements Comparator<PatientElectiveListShortVo>
	{
		private int direction = 1;

		public Rule28Comparator()
		{
			this(SortOrder.ASCENDING);
		}

		public Rule28Comparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}


		public int compare(PatientElectiveListShortVo arg0, PatientElectiveListShortVo arg1)
		{
			if (Rule28DayStatus.ACTIVE.equals(arg0.getRule28DayStatus())
					&& !Rule28DayStatus.ACTIVE.equals(arg1.getRule28DayStatus()))
			{
				return direction;
			}
			
			if (!Rule28DayStatus.ACTIVE.equals(arg0.getRule28DayStatus())
					&& !Rule28DayStatus.ACTIVE.equals(arg1.getRule28DayStatus()))
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}


	private boolean cancelTCIRecord()
	{
		try
		{
			Booking_AppointmentRefVo appointmentsDetails = null;
			Boolean tciHasAppointment = false;
			if (form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointmentIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment().getTheatreBookingIsNotNull() && theatreAppointmetnIsInTheFutureAndIsNotCancelled(form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment()))
			{
				appointmentsDetails = form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment();
				tciHasAppointment = true;
			}

			Booking_AppointmentRefVo theatreAppt = null;
			if (appointmentsDetails != null && form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment() == null || Boolean.FALSE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
			{
				theatreAppt = appointmentsDetails;
			}

			domain.cancelTCI(form.getLocalContext().getPatientElectiveList(), form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList(), theatreAppt);

			if (tciHasAppointment && form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
			{
				cancelAppt(appointmentsDetails);
			}

			return true;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
	}
	
	private boolean cancelAppt(Booking_AppointmentRefVo appointmentsDetails) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				if(appointmentsDetails == null)
					return false;

				Booking_AppointmentVo voApptFull = populateCancelledAppointment(appointmentsDetails); 

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return false;
				}

				domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");

				if(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getReferral() != null)
				{
					domain.updateCatsReferralAdditionalInvStatus(form.getLocalContext().getPatientElectiveList().getReferral(), voApptFull);
				}

				return true;
			} 
			catch (StaleObjectException e) 
			{
				e.printStackTrace();
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.CANCEL);
				return false;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		return false;
	}
	
	
	private Booking_AppointmentVo populateCancelledAppointment(Booking_AppointmentRefVo appointmentsDetails)
	{
		Booking_AppointmentVo voApptFull = domain.getBookingAppointment(appointmentsDetails);
		
		Appointment_StatusVo voApptStatus = null;
		
		if (form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null)
		{
			voApptStatus = new Appointment_StatusVo();
			voApptStatus.setStatus(Status_Reason.CANCELLED);
			voApptStatus.setStatusReason(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getOutcome()) ? Status_Reason.PATIENTCANCELLED : Status_Reason.HOSPITALCANCELLED);
			voApptStatus.setRebookSelected(false);	
		}
			
		voApptStatus.setSession(voApptFull.getSessionIsNotNull() ? voApptFull.getSession() : null); //WDEV-23185
		
		if(voApptStatus != null)
		{
			voApptFull.setApptStatus(Status_Reason.CANCELLED);
			
			voApptFull.setCurrentStatusRecord(voApptStatus);

			if(voApptFull.getApptStatusHistory() == null)
				voApptFull.setApptStatusHistory(new Appointment_StatusVoCollection());
			
			voApptFull.getApptStatusHistory().add(voApptStatus);
			voApptFull.setApptStatusReas(voApptStatus.getStatusReason());	
			voApptFull.setRequiresRebook(voApptStatus.getRebookSelected());
			
			if(voApptFull.getTheatreBooking()  == null && Status_Reason.HOSPITALCANCELLED.equals(voApptStatus.getStatusReason()))
			{
				int numProviderCancellations = 0;
				
				if(voApptFull.getNumProviderCancellations() != null)
				{
					numProviderCancellations = voApptFull.getNumProviderCancellations();
				}
				numProviderCancellations += 1;
				
				voApptFull.setNumProviderCancellations(numProviderCancellations);
			}
			
			if(voApptFull.getTheatreBooking()  == null && Status_Reason.PATIENTCANCELLED.equals(voApptStatus.getStatusReason()))
			{
				int numPatientCancellations = 0;
				
				if(voApptFull.getNumPatientCancellations() != null)
				{
					numPatientCancellations = voApptFull.getNumPatientCancellations();
				}
				numPatientCancellations += 1;
				
				voApptFull.setNumPatientCancellations(numPatientCancellations);
			}
		}
		
		if (voApptFull.getSessionSlotIsNotNull() && voApptFull.getSessionIsNotNull()) 
			voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus());
		
		return voApptFull;
	}
	
}
