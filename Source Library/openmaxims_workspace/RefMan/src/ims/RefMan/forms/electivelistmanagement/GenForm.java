//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistmanagement;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMainLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageSearchCriteriaContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPlannedDatePeriodComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
				{
					return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRTTBreachPeriodComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
				{
					return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAnaestheticTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.AnaestheticType getValue()
				{
					return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbUrgencyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.ReferralUrgency getValue()
				{
					return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.admin.vo.ServiceForElectiveListConfigVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.admin.vo.ServiceForElectiveListConfigVo getValue()
				{
					return (ims.admin.vo.ServiceForElectiveListConfigVo)super.control.getValue();
				}
				public void setValue(ims.admin.vo.ServiceForElectiveListConfigVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbConsultantComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbProcedureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureLiteVo getValue()
				{
					return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbElectiveListNameComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.admin.vo.ElectiveListConfigLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.admin.vo.ElectiveListConfigLiteVo getValue()
				{
					return (ims.admin.vo.ElectiveListConfigLiteVo)super.control.getValue();
				}
				public void setValue(ims.admin.vo.ElectiveListConfigLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class GroupElectiveListStatusRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 224, 384, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Removed", startTabIndex.intValue() + 22);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 224, 360, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "TCI Given", startTabIndex.intValue() + 21);
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 224, 336, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Not Fit For Surgery", startTabIndex.intValue() + 20);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 224, 312, 192, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(3, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Pre-Assessment Outcome Required", startTabIndex.intValue() + 19);
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 224, 232, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(4, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "Requires TCI", startTabIndex.intValue() + 16);
				}
				public void setText(GroupElectiveListStatusEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupElectiveListStatusEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupElectiveListStatusEnumeration.None;
						case 0: return GroupElectiveListStatusEnumeration.rdoRemoved;
						case 1: return GroupElectiveListStatusEnumeration.rdoTCIGiven;
						case 2: return GroupElectiveListStatusEnumeration.rdoNotFitForSurgery;
						case 3: return GroupElectiveListStatusEnumeration.rdoPreAssessmentOutcomeRequired;
						case 4: return GroupElectiveListStatusEnumeration.rdoRequiresTCI;
					}
					return null;
				}
				public void setValue(GroupElectiveListStatusEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupElectiveListStatusEnumeration.None.id);
				}
				public boolean isEnabled(GroupElectiveListStatusEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupElectiveListStatusEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupElectiveListStatusEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupElectiveListStatusEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupElectiveListStatusEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupElectiveListStatusEnumeration None = new GroupElectiveListStatusEnumeration(-1);
				public static GroupElectiveListStatusEnumeration rdoRemoved = new GroupElectiveListStatusEnumeration(0);
				public static GroupElectiveListStatusEnumeration rdoTCIGiven = new GroupElectiveListStatusEnumeration(1);
				public static GroupElectiveListStatusEnumeration rdoNotFitForSurgery = new GroupElectiveListStatusEnumeration(2);
				public static GroupElectiveListStatusEnumeration rdoPreAssessmentOutcomeRequired = new GroupElectiveListStatusEnumeration(3);
				public static GroupElectiveListStatusEnumeration rdoRequiresTCI = new GroupElectiveListStatusEnumeration(4);
				private GroupElectiveListStatusEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupElectiveListStatusEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupElectiveListStatusTCIRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 264, 280, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "28 day Rule Patients Only", startTabIndex.intValue() + 18);
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 264, 256, 224, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Deferred records for Clinical Reasons Only", startTabIndex.intValue() + 17);
				}
				public void setText(GroupElectiveListStatusTCIEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupElectiveListStatusTCIEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupElectiveListStatusTCIEnumeration.None;
						case 0: return GroupElectiveListStatusTCIEnumeration.rdoTCI28DayRulePatientsOnly;
						case 1: return GroupElectiveListStatusTCIEnumeration.rdoTCIDeferredRecordsForClinicalReasonsOnly;
					}
					return null;
				}
				public void setValue(GroupElectiveListStatusTCIEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupElectiveListStatusTCIEnumeration.None.id);
				}
				public boolean isEnabled(GroupElectiveListStatusTCIEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupElectiveListStatusTCIEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupElectiveListStatusTCIEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupElectiveListStatusTCIEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupElectiveListStatusTCIEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupElectiveListStatusTCIEnumeration None = new GroupElectiveListStatusTCIEnumeration(-1);
				public static GroupElectiveListStatusTCIEnumeration rdoTCI28DayRulePatientsOnly = new GroupElectiveListStatusTCIEnumeration(0);
				public static GroupElectiveListStatusTCIEnumeration rdoTCIDeferredRecordsForClinicalReasonsOnly = new GroupElectiveListStatusTCIEnumeration(1);
				private GroupElectiveListStatusTCIEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupElectiveListStatusTCIEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupTheatreTypeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 584, 144, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Inpatient Theatre", startTabIndex.intValue() + 14);
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 144, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "Day Surgery Theatre", startTabIndex.intValue() + 13);
				}
				public void setText(GroupTheatreTypeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupTheatreTypeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupTheatreTypeEnumeration.None;
						case 0: return GroupTheatreTypeEnumeration.rdoInpatientTheatre;
						case 1: return GroupTheatreTypeEnumeration.rdoDaySurgeryTheatre;
					}
					return null;
				}
				public void setValue(GroupTheatreTypeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupTheatreTypeEnumeration.None.id);
				}
				public boolean isEnabled(GroupTheatreTypeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupTheatreTypeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupTheatreTypeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupTheatreTypeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupTheatreTypeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupTheatreTypeEnumeration None = new GroupTheatreTypeEnumeration(-1);
				public static GroupTheatreTypeEnumeration rdoInpatientTheatre = new GroupTheatreTypeEnumeration(0);
				public static GroupTheatreTypeEnumeration rdoDaySurgeryTheatre = new GroupTheatreTypeEnumeration(1);
				private GroupTheatreTypeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupTheatreTypeEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupAdmissionTypeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 272, 48, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Endoscopy", startTabIndex.intValue() + 5);
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 200, 48, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "Medical", startTabIndex.intValue() + 4);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 128, 48, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Surgical", startTabIndex.intValue() + 3);
				}
				public void setText(GroupAdmissionTypeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAdmissionTypeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAdmissionTypeEnumeration.None;
						case 0: return GroupAdmissionTypeEnumeration.rdoEndoscopy;
						case 1: return GroupAdmissionTypeEnumeration.rdoMedical;
						case 2: return GroupAdmissionTypeEnumeration.rdoSurgical;
					}
					return null;
				}
				public void setValue(GroupAdmissionTypeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAdmissionTypeEnumeration.None.id);
				}
				public boolean isEnabled(GroupAdmissionTypeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAdmissionTypeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAdmissionTypeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAdmissionTypeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAdmissionTypeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAdmissionTypeEnumeration None = new GroupAdmissionTypeEnumeration(-1);
				public static GroupAdmissionTypeEnumeration rdoEndoscopy = new GroupAdmissionTypeEnumeration(0);
				public static GroupAdmissionTypeEnumeration rdoMedical = new GroupAdmissionTypeEnumeration(1);
				public static GroupAdmissionTypeEnumeration rdoSurgical = new GroupAdmissionTypeEnumeration(2);
				private GroupAdmissionTypeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAdmissionTypeEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupElectiveListTypeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 212, 16, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "Surveillance / Planned", startTabIndex.intValue() + 2);
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 84, 16, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "Waiting / Booked", startTabIndex.intValue() + 1);
				}
				public void setText(GroupElectiveListTypeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupElectiveListTypeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupElectiveListTypeEnumeration.None;
						case 0: return GroupElectiveListTypeEnumeration.rdoPlannedSurveillance;
						case 1: return GroupElectiveListTypeEnumeration.rdoWaitingBooked;
					}
					return null;
				}
				public void setValue(GroupElectiveListTypeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupElectiveListTypeEnumeration.None.id);
				}
				public boolean isEnabled(GroupElectiveListTypeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupElectiveListTypeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupElectiveListTypeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupElectiveListTypeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupElectiveListTypeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupElectiveListTypeEnumeration None = new GroupElectiveListTypeEnumeration(-1);
				public static GroupElectiveListTypeEnumeration rdoPlannedSurveillance = new GroupElectiveListTypeEnumeration(0);
				public static GroupElectiveListTypeEnumeration rdoWaitingBooked = new GroupElectiveListTypeEnumeration(1);
				private GroupElectiveListTypeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupElectiveListTypeEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 200, 808, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Elective List Status", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 576, 226, 232, 176, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Short Notice", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 440, 18, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 466, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned Date in", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 434, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Breach Date in", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 600, 316, 164, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "No of Days Notice Required:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 40, 232, 170, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Display elective records that:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 440, 170, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 82, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 440, 42, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 440, 66, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 440, 90, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 440, 114, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Name:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 560, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbHospitalTemp);
				cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
				super.addComboBox(cmbHospital);
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 184, 464, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPlannedDatePeriodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPlannedDatePeriodTemp);
				cmbPlannedDatePeriodComboBox cmbPlannedDatePeriod = (cmbPlannedDatePeriodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlannedDatePeriodComboBox.class, m_cmbPlannedDatePeriodTemp);
				super.addComboBox(cmbPlannedDatePeriod);
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 184, 432, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbRTTBreachPeriodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRTTBreachPeriodTemp);
				cmbRTTBreachPeriodComboBox cmbRTTBreachPeriod = (cmbRTTBreachPeriodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRTTBreachPeriodComboBox.class, m_cmbRTTBreachPeriodTemp);
				super.addComboBox(cmbRTTBreachPeriod);
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 560, 168, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAnaestheticTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAnaestheticTypeTemp);
				cmbAnaestheticTypeComboBox cmbAnaestheticType = (cmbAnaestheticTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticTypeComboBox.class, m_cmbAnaestheticTypeTemp);
				super.addComboBox(cmbAnaestheticType);
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 80, 80, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbUrgencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbUrgencyTemp);
				cmbUrgencyComboBox cmbUrgency = (cmbUrgencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgencyComboBox.class, m_cmbUrgencyTemp);
				super.addComboBox(cmbUrgency);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 560, 40, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbServiceTemp);
				qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
				super.addComboBox(qmbService);
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 560, 64, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbConsultantTemp);
				qmbConsultantComboBox qmbConsultant = (qmbConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantComboBox.class, m_qmbConsultantTemp);
				super.addComboBox(qmbConsultant);
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 560, 88, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureTemp);
				qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
				super.addComboBox(qmbProcedure);
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 560, 112, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbElectiveListNameTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbElectiveListNameTemp);
				qmbElectiveListNameComboBox qmbElectiveListName = (qmbElectiveListNameComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListNameComboBox.class, m_qmbElectiveListNameTemp);
				super.addComboBox(qmbElectiveListName);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 296, 466, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Include Past Planned dates", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 296, 434, 200, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Include Patients that have breached", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 600, 260, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Short Notice", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"List only Cancer Referrals", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 136, 464, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 136, 432, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 600, 340, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 776, 536, 48, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 720, 536, 48, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for Elective entries matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupElectiveListStatus = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupElectiveListStatus);
				GroupElectiveListStatusRadioButton GroupElectiveListStatus = (GroupElectiveListStatusRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListStatusRadioButton.class, tmpGroupElectiveListStatus);
				GroupElectiveListStatus.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupElectiveListStatus);
				RadioButton tmpGroupElectiveListStatusTCI = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupElectiveListStatusTCI);
				GroupElectiveListStatusTCIRadioButton GroupElectiveListStatusTCI = (GroupElectiveListStatusTCIRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListStatusTCIRadioButton.class, tmpGroupElectiveListStatusTCI);
				GroupElectiveListStatusTCI.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupElectiveListStatusTCI);
				RadioButton tmpGroupTheatreType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupTheatreType);
				GroupTheatreTypeRadioButton GroupTheatreType = (GroupTheatreTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTheatreTypeRadioButton.class, tmpGroupTheatreType);
				GroupTheatreType.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupTheatreType);
				RadioButton tmpGroupAdmissionType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupAdmissionType);
				GroupAdmissionTypeRadioButton GroupAdmissionType = (GroupAdmissionTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAdmissionTypeRadioButton.class, tmpGroupAdmissionType);
				GroupAdmissionType.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAdmissionType);
				RadioButton tmpGroupElectiveListType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupElectiveListType);
				GroupElectiveListTypeRadioButton GroupElectiveListType = (GroupElectiveListTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListTypeRadioButton.class, tmpGroupElectiveListType);
				GroupElectiveListType.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupElectiveListType);
			}

			public Panel pnlShortNotice()
			{
				return (Panel)super.getControl(1);
			}
			public Label lblPlannedDateIn()
			{
				return (Label)super.getControl(3);
			}
			public Label lblDaysShortNoticeRequired()
			{
				return (Label)super.getControl(5);
			}
			public Label lblUrgency()
			{
				return (Label)super.getControl(10);
			}
			public cmbHospitalComboBox cmbHospital()
			{
				return (cmbHospitalComboBox)super.getComboBox(0);
			}
			public cmbPlannedDatePeriodComboBox cmbPlannedDatePeriod()
			{
				return (cmbPlannedDatePeriodComboBox)super.getComboBox(1);
			}
			public cmbRTTBreachPeriodComboBox cmbRTTBreachPeriod()
			{
				return (cmbRTTBreachPeriodComboBox)super.getComboBox(2);
			}
			public cmbAnaestheticTypeComboBox cmbAnaestheticType()
			{
				return (cmbAnaestheticTypeComboBox)super.getComboBox(3);
			}
			public cmbUrgencyComboBox cmbUrgency()
			{
				return (cmbUrgencyComboBox)super.getComboBox(4);
			}
			public qmbServiceComboBox qmbService()
			{
				return (qmbServiceComboBox)super.getComboBox(5);
			}
			public qmbConsultantComboBox qmbConsultant()
			{
				return (qmbConsultantComboBox)super.getComboBox(6);
			}
			public qmbProcedureComboBox qmbProcedure()
			{
				return (qmbProcedureComboBox)super.getComboBox(7);
			}
			public qmbElectiveListNameComboBox qmbElectiveListName()
			{
				return (qmbElectiveListNameComboBox)super.getComboBox(8);
			}
			public CheckBox chkIncludePastPlannedDate()
			{
				return (CheckBox)super.getControl(24);
			}
			public CheckBox chkIncludePatientsBreachedRTTDate()
			{
				return (CheckBox)super.getControl(25);
			}
			public CheckBox chkShortNotice()
			{
				return (CheckBox)super.getControl(26);
			}
			public CheckBox chkListCancerReferralOnly()
			{
				return (CheckBox)super.getControl(27);
			}
			public IntBox intPlannedDateIn()
			{
				return (IntBox)super.getControl(28);
			}
			public IntBox intRTTDateBreachIn()
			{
				return (IntBox)super.getControl(29);
			}
			public IntBox intDaysShortNoticeRequired()
			{
				return (IntBox)super.getControl(30);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(31);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(32);
			}
			public GroupElectiveListStatusRadioButton GroupElectiveListStatus()
			{
				return (GroupElectiveListStatusRadioButton)super.getRadioButton(0);
			}
			public GroupElectiveListStatusTCIRadioButton GroupElectiveListStatusTCI()
			{
				return (GroupElectiveListStatusTCIRadioButton)super.getRadioButton(1);
			}
			public GroupTheatreTypeRadioButton GroupTheatreType()
			{
				return (GroupTheatreTypeRadioButton)super.getRadioButton(2);
			}
			public GroupAdmissionTypeRadioButton GroupAdmissionType()
			{
				return (GroupAdmissionTypeRadioButton)super.getRadioButton(3);
			}
			public GroupElectiveListTypeRadioButton GroupElectiveListType()
			{
				return (GroupElectiveListTypeRadioButton)super.getRadioButton(4);
			}
		}
		public static class tabPageSearchResultsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdElectiveListRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdElectiveListRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumnPatientNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumnPatientNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumnPatientNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColumnPatientName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColumnPatientName()
				{
					return (String)super.row.get(0);
				}
				public void setColumnPatientName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumnPatientNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumnIdentifierReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumnIdentifierReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumnIdentifierOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColumnIdentifier(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColumnIdentifier()
				{
					return (String)super.row.get(1);
				}
				public void setColumnIdentifier(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColumnIdentifierTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColumnListNameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColumnListNameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColumnListNameOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColumnListName(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColumnListName()
				{
					return (String)super.row.get(2);
				}
				public void setColumnListName(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColumnListNameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColumnRespHCPReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColumnRespHCPReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColumnRespHCPOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColumnRespHCP(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColumnRespHCP()
				{
					return (String)super.row.get(3);
				}
				public void setColumnRespHCP(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColumnRespHCPTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColumnServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColumnServiceReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColumnServiceOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColumnService(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColumnService()
				{
					return (String)super.row.get(4);
				}
				public void setColumnService(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColumnServiceTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColumnUrgencyReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColumnUrgencyReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColumnUrgencyOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColumnUrgency(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColumnUrgency()
				{
					return (String)super.row.get(5);
				}
				public void setColumnUrgency(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColumnUrgencyTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColumnDateOnListReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColumnDateOnListReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColumnDateOnListOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColumnDateOnList(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.framework.utils.Date getColumnDateOnList()
				{
					return (ims.framework.utils.Date)super.row.get(6);
				}
				public void setColumnDateOnList(ims.framework.utils.Date value)
				{
					super.row.set(6, value);
				}
				public void setCellColumnDateOnListTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColumnStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColumnStatusReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColumnStatusOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColumnStatus(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getColumnStatus()
				{
					return (String)super.row.get(7);
				}
				public void setColumnStatus(String value)
				{
					super.row.set(7, value);
				}
				public void setCellColumnStatusTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setColumnRemovalUndoRemovalstatusReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isColumnRemovalUndoRemovalstatusReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showColumnRemovalUndoRemovalstatusOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForColumnRemovalUndoRemovalstatus(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.framework.utils.Image getColumnRemovalUndoRemovalstatus()
				{
					return (ims.framework.utils.Image)super.row.get(8);
				}
				public void setColumnRemovalUndoRemovalstatus(ims.framework.utils.Image value)
				{
					super.row.set(8, value);
				}
				public void setCellColumnRemovalUndoRemovalstatusTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public void setColumnRTTBreachDateReadOnly(boolean value)
				{
					super.row.setReadOnly(9, value);
				}
				public boolean isColumnRTTBreachDateReadOnly()
				{
					return super.row.isReadOnly(9);
				}
				public void showColumnRTTBreachDateOpened()
				{
					super.row.showOpened(9);
				}
				public void setTooltipForColumnRTTBreachDate(String value)
				{
					super.row.setTooltip(9, value);
				}
				public ims.framework.utils.Date getColumnRTTBreachDate()
				{
					return (ims.framework.utils.Date)super.row.get(9);
				}
				public void setColumnRTTBreachDate(ims.framework.utils.Date value)
				{
					super.row.set(9, value);
				}
				public void setCellColumnRTTBreachDateTooltip(String value)
				{
					super.row.setTooltip(9, value);
				}
				public void setColumnProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(10, value);
				}
				public boolean isColumnProcedureReadOnly()
				{
					return super.row.isReadOnly(10);
				}
				public void showColumnProcedureOpened()
				{
					super.row.showOpened(10);
				}
				public void setTooltipForColumnProcedure(String value)
				{
					super.row.setTooltip(10, value);
				}
				public String getColumnProcedure()
				{
					return (String)super.row.get(10);
				}
				public void setColumnProcedure(String value)
				{
					super.row.set(10, value);
				}
				public void setCellColumnProcedureTooltip(String value)
				{
					super.row.setTooltip(10, value);
				}
				public void setColumnImageReadOnly(boolean value)
				{
					super.row.setReadOnly(11, value);
				}
				public boolean isColumnImageReadOnly()
				{
					return super.row.isReadOnly(11);
				}
				public void showColumnImageOpened()
				{
					super.row.showOpened(11);
				}
				public void setTooltipForColumnImage(String value)
				{
					super.row.setTooltip(11, value);
				}
				public ims.framework.utils.Image getColumnImage()
				{
					return (ims.framework.utils.Image)super.row.get(11);
				}
				public void setColumnImage(ims.framework.utils.Image value)
				{
					super.row.set(11, value);
				}
				public void setCellColumnImageTooltip(String value)
				{
					super.row.setTooltip(11, value);
				}
				public void setColumnOutcomeCommentsReadOnly(boolean value)
				{
					super.row.setReadOnly(12, value);
				}
				public boolean isColumnOutcomeCommentsReadOnly()
				{
					return super.row.isReadOnly(12);
				}
				public void showColumnOutcomeCommentsOpened()
				{
					super.row.showOpened(12);
				}
				public void setTooltipForColumnOutcomeComments(String value)
				{
					super.row.setTooltip(12, value);
				}
				public ims.framework.utils.Image getColumnOutcomeComments()
				{
					return (ims.framework.utils.Image)super.row.get(12);
				}
				public void setColumnOutcomeComments(ims.framework.utils.Image value)
				{
					super.row.set(12, value);
				}
				public void setCellColumnOutcomeCommentsTooltip(String value)
				{
					super.row.setTooltip(12, value);
				}
				public void setColumnPreColonoscopyRequiredReadOnly(boolean value)
				{
					super.row.setReadOnly(13, value);
				}
				public boolean isColumnPreColonoscopyRequiredReadOnly()
				{
					return super.row.isReadOnly(13);
				}
				public void showColumnPreColonoscopyRequiredOpened()
				{
					super.row.showOpened(13);
				}
				public void setTooltipForColumnPreColonoscopyRequired(String value)
				{
					super.row.setTooltip(13, value);
				}
				public ims.framework.utils.Image getColumnPreColonoscopyRequired()
				{
					return (ims.framework.utils.Image)super.row.get(13);
				}
				public void setColumnPreColonoscopyRequired(ims.framework.utils.Image value)
				{
					super.row.set(13, value);
				}
				public void setCellColumnPreColonoscopyRequiredTooltip(String value)
				{
					super.row.setTooltip(13, value);
				}
				public ims.RefMan.vo.PatientElectiveListShortVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListShortVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdElectiveListRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdElectiveListRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdElectiveListRow get(int index)
				{
					return new grdElectiveListRow(super.collection.get(index));
				}
				public grdElectiveListRow newRow()
				{
					return new grdElectiveListRow(super.collection.newRow());
				}
				public grdElectiveListRow newRow(boolean autoSelect)
				{
					return new grdElectiveListRow(super.collection.newRow(autoSelect));
				}
				public grdElectiveListRow newRowAt(int index)
				{
					return new grdElectiveListRow(super.collection.newRowAt(index));
				}
				public grdElectiveListRow newRowAt(int index, boolean autoSelect)
				{
					return new grdElectiveListRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdElectiveListGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColumnIdentifierCaption(String value)
				{
					this.grid.setColumnCaption(1, value);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.RefMan.vo.PatientElectiveListShortVoCollection getValues()
				{
					ims.RefMan.vo.PatientElectiveListShortVoCollection listOfValues = new ims.RefMan.vo.PatientElectiveListShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.PatientElectiveListShortVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListShortVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdElectiveListRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdElectiveListRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdElectiveListRowCollection getRows()
				{
					return new grdElectiveListRowCollection(super.grid.getRows());
				}
				public grdElectiveListRow getRowByValue(ims.RefMan.vo.PatientElectiveListShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdElectiveListRow(row);
				}
				public void setColumnPatientNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumnPatientNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumnIdentifierHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumnIdentifierHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColumnListNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColumnListNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColumnRespHCPHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColumnRespHCPHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColumnServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColumnServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColumnUrgencyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColumnUrgencyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColumnDateOnListHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColumnDateOnListHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColumnStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColumnStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setColumnRemovalUndoRemovalstatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getColumnRemovalUndoRemovalstatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public void setColumnRTTBreachDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(9, value);
				}
				public String getColumnRTTBreachDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(9);
				}
				public void setColumnProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(10, value);
				}
				public String getColumnProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(10);
				}
				public void setColumnImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(11, value);
				}
				public String getColumnImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(11);
				}
				public void setColumnOutcomeCommentsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(12, value);
				}
				public String getColumnOutcomeCommentsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(12);
				}
				public void setColumnPreColonoscopyRequiredHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(13, value);
				}
				public String getColumnPreColonoscopyRequiredHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(13);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 688, 568, 144, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 824, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdElectiveListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuPatientElectiveListManagement, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdElectiveListTemp);
				grdElectiveListGrid grdElectiveList = (grdElectiveListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdElectiveListGrid.class, m_grdElectiveListTemp);
				grdElectiveList.addStringColumn("Patient Name", 0, 0, 96, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addStringColumn("Identifier", 0, 0, 76, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addStringColumn("List Name", 0, 0, 79, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addStringColumn("Resp HCP", 0, 0, 70, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addStringColumn("Service", 0, 0, 65, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addStringColumn("Urgency", 0, 0, 55, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addDateColumn("Date On List", 0, 0, 80, true, true, null, false, 1, true);
				grdElectiveList.addStringColumn("Status", 0, 0, 60, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addImageColumn(" ", 0, 0, 23, true, 0);
				grdElectiveList.addDateColumn("RTT Breach", 0, 0, 75, true, true, null, false, 1, true);
				grdElectiveList.setColumnRTTBreachDateHeaderTooltip("RTT Breach Date");
				grdElectiveList.addStringColumn("Procedure", 0, 0, 70, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElectiveList.addImageColumn("  ", 1, 1, 23, false, 2);
				grdElectiveList.addImageColumn(" ", 1, 1, 23, false, 2);
				grdElectiveList.addImageColumn(" ", 1, 1, 23, false, 2);
				super.addGrid(grdElectiveList);
			}

			public Button btnTransferToEL()
			{
				return (Button)super.getControl(0);
			}
			public grdElectiveListGrid grdElectiveList()
			{
				return (grdElectiveListGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 624, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSearchCriteria = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Search Criteria", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageSearchCriteriaContainer m_tabPageSearchCriteriaContainer = (tabPageSearchCriteriaContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSearchCriteriaContainer.class, m_tabPageSearchCriteria, factory);
			super.addContainer(m_tabPageSearchCriteria, m_tabPageSearchCriteriaContainer);
			ims.framework.utils.SizeInfo m_tabPageSearchCriteriaDesignSize = new ims.framework.utils.SizeInfo(848, 624);
			ims.framework.utils.SizeInfo m_tabPageSearchCriteriaRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper50.getWidth(), anchoringHelper50.getHeight());
			m_tabPageSearchCriteriaContainer.setContext(form, appForm, m_tabPageSearchCriteria, loader, form_images_local, contextMenus, startControlID, m_tabPageSearchCriteriaDesignSize, m_tabPageSearchCriteriaRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 624, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSearchResults = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Search Results", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageSearchResultsContainer m_tabPageSearchResultsContainer = (tabPageSearchResultsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSearchResultsContainer.class, m_tabPageSearchResults, factory);
			super.addContainer(m_tabPageSearchResults, m_tabPageSearchResultsContainer);
			ims.framework.utils.SizeInfo m_tabPageSearchResultsDesignSize = new ims.framework.utils.SizeInfo(848, 624);
			ims.framework.utils.SizeInfo m_tabPageSearchResultsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper51.getWidth(), anchoringHelper51.getHeight());
			m_tabPageSearchResultsContainer.setContext(form, appForm, m_tabPageSearchResults, loader, form_images_local, contextMenus, startControlID, m_tabPageSearchResultsDesignSize, m_tabPageSearchResultsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageSearchCriteria().setVisible(false);
			tabPageSearchResults().setVisible(false);
		}
		public void settabPageSearchCriteriaEnabled(boolean value)
		{
			tabPageSearchCriteria().setEnabled(value);
		}
		public void settabPageSearchResultsEnabled(boolean value)
		{
			tabPageSearchResults().setEnabled(value);
		}
		public void showtabPageSearchCriteria()
		{
			tabPageSearchResults().setVisible(false);
			tabPageSearchCriteria().setVisible(true);
		}
		public void showtabPageSearchResults()
		{
			tabPageSearchCriteria().setVisible(false);
			tabPageSearchResults().setVisible(true);
		}

		public tabPageSearchCriteriaContainer tabPageSearchCriteria()
		{
			return (tabPageSearchCriteriaContainer)super.layers.get(0);
		}
		public tabPageSearchResultsContainer tabPageSearchResults()
		{
			return (tabPageSearchResultsContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.SearchCriteriaForElectiveListManagementVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.SearchCriteriaForElectiveListManagementVo' of the global context variable 'RefMan.SearchCriteriaForElectiveListManagement' is not supported.");
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuPatientElectiveListManagement = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem = factory.createMenuItem(startControlID.intValue() + 1, "Review", true, false, new Integer(134125), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360001)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORDTCIItem = factory.createMenuItem(startControlID.intValue() + 2, "Record TCI", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360002)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORDTCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_TCIItem = factory.createMenuItem(startControlID.intValue() + 3, "Amend TCI", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360003)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_TCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem = factory.createMenuItem(startControlID.intValue() + 4, "Suspend Elective List Entry", true, false, new Integer(114134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360004)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem = factory.createMenuItem(startControlID.intValue() + 5, "Unsuspend Elective List Entry", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360005)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORD_ERODItem = factory.createMenuItem(startControlID.intValue() + 6, "Record EROD", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360006)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORD_ERODItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_ERODItem = factory.createMenuItem(startControlID.intValue() + 7, "Amend EROD", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360007)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_ERODItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementCANCEL_TCIItem = factory.createMenuItem(startControlID.intValue() + 8, "Cancel TCI", true, false, new Integer(114104), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360008)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementCANCEL_TCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove From Elective List", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360009)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem = factory.createMenuItem(startControlID.intValue() + 10, "Add current Patient to a different Waiting List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360010)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem = factory.createMenuItem(startControlID.intValue() + 11, "Add current Patient to a different Booked List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360011)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem = factory.createMenuItem(startControlID.intValue() + 12, "Add current Patient to a different Planned List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360012)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit Elective List Entry", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360013)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementBOOK_THEATREItem = factory.createMenuItem(startControlID.intValue() + 14, "Book Theatre", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360014)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementBOOK_THEATREItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem = factory.createMenuItem(startControlID.intValue() + 15, "Undo Removal", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360015)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementREFERRAL_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 16, "Referral Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360016)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementREFERRAL_DETAILSItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem = factory.createMenuItem(startControlID.intValue() + 17, "Patient treated as an emergency", true, false, new Integer(102300), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360017)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem);
		form.registerMenu(contextMenus.RefMan.contextMenuPatientElectiveListManagement);


		// Layer Clasess
		lyrMainLayer m_lyrMainLayer = (lyrMainLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMainLayer.class, this, factory);
		super.addLayer(m_lyrMainLayer);
		m_lyrMainLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMainLayer lyrMain()
	{
		return (lyrMainLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ERODDialog = new LocalFormName(134216);
				BookAppointment = new LocalFormName(134123);
				BookTheatreSlot = new LocalFormName(134208);
				BookAppointmentDialog = new LocalFormName(134134);
				NewElectiveListTCIErodDialog = new LocalFormName(134224);
				NewElectiveListEntry = new LocalFormName(134217);
				SuspensionDetails = new LocalFormName(134225);
				RemoveFromElectiveList = new LocalFormName(134229);
				TransferElectiveListDialog = new LocalFormName(134234);
				ElectiveListDetails = new LocalFormName(134283);
				ElectiveListAddLaterDialog = new LocalFormName(134247);
				ReferralDetailsDialog = new LocalFormName(134104);
				CancelTCIForPatientElectiveListDialog = new LocalFormName(134227);
				UndoRemovalFromWaitingList = new LocalFormName(134220);
			}
			public final FormName ERODDialog;
			public final FormName BookAppointment;
			public final FormName BookTheatreSlot;
			public final FormName BookAppointmentDialog;
			public final FormName NewElectiveListTCIErodDialog;
			public final FormName NewElectiveListEntry;
			public final FormName SuspensionDetails;
			public final FormName RemoveFromElectiveList;
			public final FormName TransferElectiveListDialog;
			public final FormName ElectiveListDetails;
			public final FormName ElectiveListAddLaterDialog;
			public final FormName ReferralDetailsDialog;
			public final FormName CancelTCIForPatientElectiveListDialog;
			public final FormName UndoRemovalFromWaitingList;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				BookAppointmentDialog = new LocalFormName(114162);
				CancelAppointmentDialog = new LocalFormName(114160);
			}
			public final FormName BookAppointmentDialog;
			public final FormName CancelAppointmentDialog;
		}

		public RefManForms RefMan;
		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			RefMan = new RefManImages();
			Emergency = new EmergencyImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Appointment16 = new ImageHelper(134121, "Images/RefMan/appointment_16.png", new Integer(16), new Integer(16));
				PreColonoscopyRequired16 = new ImageHelper(134180, "Images/RefMan/PrecolonoscopyReq16.png", new Integer(16), new Integer(16));
				PreColonoscopyRequired24 = new ImageHelper(134181, "Images/RefMan/PrecolonoscopyReq24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Appointment16;
			public final ims.framework.utils.Image PreColonoscopyRequired16;
			public final ims.framework.utils.Image PreColonoscopyRequired24;
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				Edit16x16 = new ImageHelper(129185, "Images/Emergency/Edit_16.gif", new Integer(16), new Integer(16));
				PatientStatusEnabled16 = new ImageHelper(129105, "Images/Emergency/infoBubble.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Edit16x16;
			public final ims.framework.utils.Image PatientStatusEnabled16;
		}
		public final CoreImages Core;
		public final RefManImages RefMan;
		public final EmergencyImages Emergency;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_MessageBoxIdForRemoveEntryList = new ims.framework.ContextVariable("MessageBoxIdForRemoveEntryList", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__MessageBoxIdForRemoveEntryList_" + componentIdentifier + "");
			cxl_bReferralAccepted = new ims.framework.ContextVariable("bReferralAccepted", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__bReferralAccepted_" + componentIdentifier + "");
			cxl_CatsReferralListVo = new ims.framework.ContextVariable("CatsReferralListVo", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier + "");
			cxl_SortOrderImage28DayRule = new ims.framework.ContextVariable("SortOrderImage28DayRule", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__SortOrderImage28DayRule_" + componentIdentifier + "");
			cxl_SortOrderImageComments = new ims.framework.ContextVariable("SortOrderImageComments", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__SortOrderImageComments_" + componentIdentifier + "");
			cxl_SortOrderImagePreColonoscopyReq = new ims.framework.ContextVariable("SortOrderImagePreColonoscopyReq", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__SortOrderImagePreColonoscopyReq_" + componentIdentifier + "");
		}
		
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getMessageBoxIdForRemoveEntryListIsNotNull()
		{
			return !cxl_MessageBoxIdForRemoveEntryList.getValueIsNull(context);
		}
		public Integer getMessageBoxIdForRemoveEntryList()
		{
			return (Integer)cxl_MessageBoxIdForRemoveEntryList.getValue(context);
		}
		public void setMessageBoxIdForRemoveEntryList(Integer value)
		{
			cxl_MessageBoxIdForRemoveEntryList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxIdForRemoveEntryList = null;
		public boolean getbReferralAcceptedIsNotNull()
		{
			return !cxl_bReferralAccepted.getValueIsNull(context);
		}
		public Boolean getbReferralAccepted()
		{
			return (Boolean)cxl_bReferralAccepted.getValue(context);
		}
		public void setbReferralAccepted(Boolean value)
		{
			cxl_bReferralAccepted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bReferralAccepted = null;
		public boolean getCatsReferralListVoIsNotNull()
		{
			return !cxl_CatsReferralListVo.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralListVo getCatsReferralListVo()
		{
			return (ims.RefMan.vo.CatsReferralListVo)cxl_CatsReferralListVo.getValue(context);
		}
		public void setCatsReferralListVo(ims.RefMan.vo.CatsReferralListVo value)
		{
			cxl_CatsReferralListVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferralListVo = null;
		public boolean getSortOrderImage28DayRuleIsNotNull()
		{
			return !cxl_SortOrderImage28DayRule.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderImage28DayRule()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderImage28DayRule.getValue(context);
		}
		public void setSortOrderImage28DayRule(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderImage28DayRule.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderImage28DayRule = null;
		public boolean getSortOrderImageCommentsIsNotNull()
		{
			return !cxl_SortOrderImageComments.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderImageComments()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderImageComments.getValue(context);
		}
		public void setSortOrderImageComments(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderImageComments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderImageComments = null;
		public boolean getSortOrderImagePreColonoscopyReqIsNotNull()
		{
			return !cxl_SortOrderImagePreColonoscopyReq.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderImagePreColonoscopyReq()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderImagePreColonoscopyReq.getValue(context);
		}
		public void setSortOrderImagePreColonoscopyReq(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderImagePreColonoscopyReq.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderImagePreColonoscopyReq = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PatientElectiveListManagement implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int SET_STATUS_REQUIRES_TCI = 1;
				public static final int RECORDTCI = 2;
				public static final int AMEND_TCI = 3;
				public static final int SUSPEND_ELECTIVE_LIST_ENTRY = 4;
				public static final int UNSUSPEND_ELECTIVE_LIST_ENTRY = 5;
				public static final int RECORD_EROD = 6;
				public static final int AMEND_EROD = 7;
				public static final int CANCEL_TCI = 8;
				public static final int REMOVE_FROM_ELECTIVE_LIST = 9;
				public static final int ADD_TO_WAITING_LIST = 10;
				public static final int ADD_TO_BOOKED_LIST = 11;
				public static final int ADD_TO_PLANNED_LIST = 12;
				public static final int EDIT_ELECTIVE_LIST_ENTRY = 13;
				public static final int BOOK_THEATRE = 14;
				public static final int UNDO_REMOVE_FROM_ELECTIVE_LIST = 15;
				public static final int REFERRAL_DETAILS = 16;
				public static final int PATIENT_TREATED_AS_EMERGENCY = 17;
			}
			public void disableAllPatientElectiveListManagementMenuItems()
			{
				this.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementRECORDTCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementAMEND_TCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementRECORD_ERODItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementAMEND_ERODItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementCANCEL_TCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementBOOK_THEATREItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementREFERRAL_DETAILSItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem.setEnabled(false);
			}
			public void hideAllPatientElectiveListManagementMenuItems()
			{
				this.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementRECORDTCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementAMEND_TCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementRECORD_ERODItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementAMEND_ERODItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementCANCEL_TCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementBOOK_THEATREItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementREFERRAL_DETAILSItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem.setVisible(false);
			}
			private Menu contextMenuPatientElectiveListManagement;
			public ReadOnlyMenuItem getPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem()
			{
				return this.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementRECORDTCIItem()
			{
				return this.contextMenuPatientElectiveListManagementRECORDTCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementRECORDTCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementAMEND_TCIItem()
			{
				return this.contextMenuPatientElectiveListManagementAMEND_TCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementAMEND_TCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem()
			{
				return this.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem()
			{
				return this.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementRECORD_ERODItem()
			{
				return this.contextMenuPatientElectiveListManagementRECORD_ERODItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementRECORD_ERODItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementAMEND_ERODItem()
			{
				return this.contextMenuPatientElectiveListManagementAMEND_ERODItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementAMEND_ERODItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementCANCEL_TCIItem()
			{
				return this.contextMenuPatientElectiveListManagementCANCEL_TCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementCANCEL_TCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementADD_TO_WAITING_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementADD_TO_BOOKED_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementADD_TO_PLANNED_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem()
			{
				return this.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementBOOK_THEATREItem()
			{
				return this.contextMenuPatientElectiveListManagementBOOK_THEATREItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementBOOK_THEATREItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementREFERRAL_DETAILSItem()
			{
				return this.contextMenuPatientElectiveListManagementREFERRAL_DETAILSItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementREFERRAL_DETAILSItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem()
			{
				return this.contextMenuPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[324];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-ID", "ID_TCIForPatientElectiveList");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCIDATE", "TCIDate");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCITIME", "TCITime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCIOFFERMETHOD", "TCIOfferMethod");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-DATETCIACCEPTED", "DateTCIAccepted");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-SESSION", "Session");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-COMMENTS", "Comments");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-PLANNINGELECTIVE", "PlanningElective");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCIBED", "TCIBed");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-DATETCIOFFERED", "DateTCIOffered");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-ISACTIVE", "IsActive");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-RTTBREACHCOMMENT", "RTTBreachComment");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-PLANNEDTCIDATE", "PlannedTCIDate");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-DAY28BREACHREASON", "Day28BreachReason");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-RTTBREACHREASON", "RTTBreachReason");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPROVIDERCANCELLATIONS", "NumProviderCancellations");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASPRINTED", "WasPrinted");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPATIENTCANCELLATIONS", "NumPatientCancellations");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTAPPTKPIDATE", "FirstApptKPIDate");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-RTTBREACHKPIDATE", "RTTBreachKPIDate");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REASONFORBREACHINGFIRSTAPPTKPI", "ReasonForBreachingFirstApptKPI");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTSFORBREACHINGFIRSTAPPTKPI", "CommentsForBreachingFirstApptKPI");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DONOTMOVE", "DoNotMove");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISFLEXIBLEAPPOINTMENT", "IsFlexibleAppointment");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISWARDATTENDANCE", "IsWardAttendance");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTCONSULTATIONACTIVITY", "FirstConsultationActivity");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ELECTIVELIST", "ElectiveList");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATIENTCATEGORY", "PatientCategory");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTBOOKEDONSAMEDAY", "ApptBookedOnSameDay");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASAPPTCOMMUNICATED", "WasApptCommunicated");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISDISPLACED", "IsDisplaced");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMEDATETIME", "OutcomeDateTime");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISACTIVE", "IsActive");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[220] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[221] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[222] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[223] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISLATERALITYAPPLICABLE", "IsLateralityApplicable");
			fields[224] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISBILATERALLISTINGAPPLICABLE", "IsBilateralListingApplicable");
			fields[225] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DEFAULTANAESTHETICTYPE", "DefaultAnaestheticType");
			fields[226] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-GENDERSPECIFIC", "GenderSpecific");
			fields[227] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISENDOSCOPY", "IsEndoscopy");
			fields[228] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ENDOSCOPYTYPE", "EndoscopyType");
			fields[229] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-MEDICALWL", "MedicalWL");
			fields[230] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[231] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[232] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[233] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[234] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[235] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[236] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[237] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[238] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[239] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[240] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[241] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[242] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[243] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[244] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[245] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PROCEDUREDETAILS", "ProcedureDetails");
			fields[246] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[247] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[248] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[249] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[250] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[251] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[252] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[253] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[254] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[255] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[256] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[257] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[258] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[259] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-WASLETTERPRINTED", "WasLetterPrinted");
			fields[260] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COULDNOTBESEEN", "Couldnotbeseen");
			fields[261] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CAREPROFESSIONALREADYTOSEE", "CareProfessionalReadyToSee");
			fields[262] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CAREPROFESSIONALNOTREADYTOSEE", "CareProfessionalNotReadyToSee");
			fields[263] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-SESSION", "Session");
			fields[264] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-ID", "ID_TCIOutcomeForPatientElectiveList");
			fields[265] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOME", "Outcome");
			fields[266] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CHANGEBY", "ChangeBy");
			fields[267] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-STATUSDATETIME", "StatusDateTime");
			fields[268] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOMEREASON", "OutcomeReason");
			fields[269] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CANCELLEDFORNONMEDICALREASON", "CancelledForNonMedicalReason");
			fields[270] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CANCELLATIONREASON", "CancellationReason");
			fields[271] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-REASONCOMMENTS", "ReasonComments");
			fields[272] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[273] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[274] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[275] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[276] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REFERRAL", "Referral");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CONSULTANT", "Consultant");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIMARYPROCEDURE", "PrimaryProcedure");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[292] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[293] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[294] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[295] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[296] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[297] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[298] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[299] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-CARECONTEXT", "CareContext");
			fields[300] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[301] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[302] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[303] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[304] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[305] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISFLAGGEDFORREVIEW", "IsFlaggedForReview");
			fields[306] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[307] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[308] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[309] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASTLTSTARTCONTACT", "HasTLTStartContact");
			fields[310] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[311] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[312] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASTHEATREAPPT", "HasTheatreAppt");
			fields[313] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISCURRENTLYALLOCATED", "IsCurrentlyAllocated");
			fields[314] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[315] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-OPDLOCATION", "OPDLocation");
			fields[316] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-SUITABLEFORSURGERYDATE", "SuitableForSurgeryDate");
			fields[317] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[318] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[319] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-NUMPROVIDERCANCELLEDAPPTS", "NumProviderCancelledAppts");
			fields[320] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-NUMPATIENTCANCELLEDAPPTS", "NumPatientCancelledAppts");
			fields[321] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-CONSULTATIONACTIVITYREQUIRED", "ConsultationActivityRequired");
			fields[322] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PATIENTCATEGORY", "PatientCategory");
			fields[323] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISEMERGENCYREFERRAL", "IsEmergencyReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
