//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistmanagement;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbPlannedDatePeriodLookup();
	abstract protected void defaultcmbPlannedDatePeriodLookupValue();
	abstract protected void bindcmbRTTBreachPeriodLookup();
	abstract protected void defaultcmbRTTBreachPeriodLookupValue();
	abstract protected void bindcmbAnaestheticTypeLookup();
	abstract protected void defaultcmbAnaestheticTypeLookupValue();
	abstract protected void bindcmbUrgencyLookup();
	abstract protected void defaultcmbUrgencyLookupValue();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPlannedDatePeriodValueSet(Object value);
	abstract protected void onIntPlannedDateInValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbRTTBreachPeriodValueSet(Object value);
	abstract protected void onIntRTTDateBreachInValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkShortNoticeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupElectiveListStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupElectiveListStatusTCIValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbAnaestheticTypeValueSet(Object value);
	abstract protected void onRadioButtonGroupAdmissionTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupElectiveListTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbUrgencyValueSet(Object value);
	abstract protected void onQmbServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbConsultantTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListNameValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbElectiveListNameTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdElectiveListGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdElectiveListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTransferToELClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabPageSearchCriteriaActivated();
			}
		});
		this.form.lyrMain().tabPageSearchResults().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabPageSearchResultsActivated();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().cmbHospital().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbHospitalValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().cmbPlannedDatePeriod().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPlannedDatePeriodValueSet(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().intPlannedDateIn().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntPlannedDateInValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().cmbRTTBreachPeriod().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbRTTBreachPeriodValueSet(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().intRTTDateBreachIn().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntRTTDateBreachInValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().chkShortNotice().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkShortNoticeValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupElectiveListStatusValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().GroupElectiveListStatusTCI().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupElectiveListStatusTCIValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().cmbAnaestheticType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAnaestheticTypeValueSet(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().GroupAdmissionType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupAdmissionTypeValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().GroupElectiveListType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupElectiveListTypeValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().cmbUrgency().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbUrgencyValueSet(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().qmbService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().qmbService().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceTextSubmited(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().qmbConsultant().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbConsultantValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().qmbConsultant().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbConsultantTextSubmited(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().qmbProcedure().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbProcedureTextSubmited(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListNameValueChanged();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().qmbElectiveListName().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbElectiveListNameTextSubmited(value);
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().imbClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearClick();
			}
		});
		this.form.lyrMain().tabPageSearchCriteria().imbSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchClick();
			}
		});
		this.form.lyrMain().tabPageSearchResults().grdElectiveList().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdElectiveListGridHeaderClicked(column);
			}
		});
		this.form.lyrMain().tabPageSearchResults().grdElectiveList().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdElectiveListSelectionChanged();
			}
		});
		this.form.lyrMain().tabPageSearchResults().btnTransferToEL().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTransferToELClick();
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.SET_STATUS_REQUIRES_TCI, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementRECORDTCIItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.RECORDTCI, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementAMEND_TCIItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.AMEND_TCI, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.SUSPEND_ELECTIVE_LIST_ENTRY, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.UNSUSPEND_ELECTIVE_LIST_ENTRY, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementRECORD_ERODItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.RECORD_EROD, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementAMEND_ERODItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.AMEND_EROD, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementCANCEL_TCIItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.CANCEL_TCI, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.REMOVE_FROM_ELECTIVE_LIST, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementADD_TO_WAITING_LISTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_WAITING_LIST, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementADD_TO_BOOKED_LISTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_BOOKED_LIST, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementADD_TO_PLANNED_LISTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_PLANNED_LIST, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.EDIT_ELECTIVE_LIST_ENTRY, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementBOOK_THEATREItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.BOOK_THEATRE, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementUNDO_REMOVE_FROM_ELECTIVE_LISTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.UNDO_REMOVE_FROM_ELECTIVE_LIST, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementREFERRAL_DETAILSItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.REFERRAL_DETAILS, sender);
			}
		});
		this.form.getContextMenus().RefMan.getPatientElectiveListManagementPATIENT_TREATED_AS_EMERGENCYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.PATIENT_TREATED_AS_EMERGENCY, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbPlannedDatePeriodLookup();
		bindcmbRTTBreachPeriodLookup();
		bindcmbAnaestheticTypeLookup();
		bindcmbUrgencyLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbPlannedDatePeriodLookup();
		bindcmbRTTBreachPeriodLookup();
		bindcmbAnaestheticTypeLookup();
		bindcmbUrgencyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbPlannedDatePeriodLookupValue();
		defaultcmbRTTBreachPeriodLookupValue();
		defaultcmbAnaestheticTypeLookupValue();
		defaultcmbUrgencyLookupValue();
	}
	private void onlyrMaintabPageSearchCriteriaActivated()
	{
		this.form.lyrMain().showtabPageSearchCriteria();
	}
	private void onlyrMaintabPageSearchResultsActivated()
	{
		this.form.lyrMain().showtabPageSearchResults();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
