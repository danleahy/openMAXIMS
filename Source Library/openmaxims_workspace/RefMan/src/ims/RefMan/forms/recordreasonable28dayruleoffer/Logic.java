//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.recordreasonable28dayruleoffer;

import ims.RefMan.vo.TCIForPatientElectiveListDetailsVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int DAY28 = 28;
	private static final int DAY21 = 21;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open()
	{
		form.getLocalContext().setRecord(domain.get(form.getGlobalContext().RefMan.getTCIHistorySelected()));
		
		populateScreenFromData(form.getLocalContext().getRecord());
	}

	private void populateScreenFromData(TCIForPatientElectiveListDetailsVo record)
	{
		clear();
		
		if(record == null)
			return;
		
		form.dteTCIDateOffered().setValue(record.getDayTCIDate28Offered());
		form.dteDateOfOffed().setValue(record.getDate28OfOffer());
		form.cmbReasonDeclined().setValue(record.getReasonDeclined28());
	}

	private void clear()
	{
		form.dteTCIDateOffered().setValue(null);
		form.dteDateOfOffed().setValue(null);
		form.cmbReasonDeclined().setValue(null);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}

	private boolean save()
	{
		TCIForPatientElectiveListDetailsVo record = populateDataFromScreen(form.getLocalContext().getRecord());
		
		if(record == null)
			return false;
		
		String[] errors = record.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.save(record);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		return true;
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dteTCIDateOffered().getValue() == null)
		{
			uiErrors.add("'TCI Date Offered' is mandatory.");
		}
		
		if(form.dteDateOfOffed().getValue() == null)
		{
			uiErrors.add("'Date of Offer' is mandatory.");
		}
		
		Date tciDate = null;
		
		if(form.getLocalContext().getRecord() != null && form.getLocalContext().getRecord().getTCIDate() != null)
		{
			tciDate = (Date) form.getLocalContext().getRecord().getTCIDate().clone();
		}
		
		if(form.dteTCIDateOffered().getValue() != null && tciDate != null && form.dteTCIDateOffered().getValue().isGreaterThan(tciDate.addDay(DAY28)))
		{
			uiErrors.add("A 28 day offer must not be more than 28 days after the last admission date.");
		}
		
		if(form.dteDateOfOffed().getValue() != null && form.dteTCIDateOffered().getValue() != null)
		{
			Date tciDateOffered = (Date) form.dteTCIDateOffered().getValue().clone();
			
			if(form.dteDateOfOffed().getValue().isGreaterThan(tciDateOffered.addDay(-DAY21)))
			{
				uiErrors.add("A reasonable offer must be made 21 days or more before the 'TCI Date Offered'.");
			}
		}
		
		if(form.cmbReasonDeclined().getValue() == null)
		{
			uiErrors.add("'Reason Declined' is mandatory.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private TCIForPatientElectiveListDetailsVo populateDataFromScreen(TCIForPatientElectiveListDetailsVo tciHistorySelected)
	{
		if(tciHistorySelected == null)
			return null;
		
		tciHistorySelected.setDayTCIDate28Offered(form.dteTCIDateOffered().getValue());
		tciHistorySelected.setDate28OfOffer(form.dteDateOfOffed().getValue());
		tciHistorySelected.setReasonDeclined28(form.cmbReasonDeclined().getValue());
		
		return tciHistorySelected;
	}
}
