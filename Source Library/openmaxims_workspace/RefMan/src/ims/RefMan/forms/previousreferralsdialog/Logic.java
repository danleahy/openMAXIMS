//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4087.18341)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.previousreferralsdialog;

import ims.RefMan.forms.previousreferralsdialog.GenForm.grdReferralsRow;
import ims.RefMan.vo.CatsReferralForClinicalNotesVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ServerDocumentVo;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateGrid();
	}
	
	private void populateGrid()
	{
		for(int i=0; i<form.getGlobalContext().RefMan.getPreviousReferrals().size(); i++)
		{
			CatsReferralForClinicalNotesVo referral = form.getGlobalContext().RefMan.getPreviousReferrals().get(i);
			
			if(referral == null || referral.getReferralDetails() == null)
				return;
			
			grdReferralsRow row = form.grdReferrals().getRows().newRow();
			
			row.setColDate(referral.getReferralDetails().getDateOfReferral() != null ? referral.getReferralDetails().getDateOfReferral().toString() : null);
			row.setColService(referral.getReferralDetails().getService().getServiceName());//	WDEV-14006
			
			row.setValue(referral);
		}
	}
	
	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onGrdReferralsSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setCatsReport(domain.getCatsReport(form.grdReferrals().getValue()));
		
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.getContextMenus().RefMan.getPreviousReferralMenuOPEN_CATS_REPORTItem().setVisible(form.grdReferrals().getValue() != null && form.getLocalContext().getCatsReportIsNotNull());
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.PreviousReferralMenu.OPEN_CATS_REPORT:
				openReport();
			break;
		}
	}

	private void openReport()
	{
		if(form.getLocalContext().getCatsReport() == null)
			return;
		
		ServerDocumentVo document = form.getLocalContext().getCatsReport().getServerDocument();
		
		if (document != null)
		{
			String fileName = document.getFileName();
			String fullPath = getMaximsDocumentStorePath();

			fullPath += fileName;
				
			//engine.open(form.getForms().Core.PatientDocumentView, new Object[] {fullPath.replace("/", "\\")});
			
			engine.openUrl(fullPath);
		}
	}
	
	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.FILE_SERVER_URL.getValue();//WDEV-13366
		
		if(!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";
				
		return storePath;
	}
}
