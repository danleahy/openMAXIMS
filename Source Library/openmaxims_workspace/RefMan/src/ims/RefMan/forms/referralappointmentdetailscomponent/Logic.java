//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.64 build 3155.28032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.referralappointmentdetailscomponent;

import ims.admin.vo.PDSConfigurationVo;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabAppInvsContainer.grdApptsRow;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabAppInvsContainer.grdInvestigationsRow;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabFutureAppointmentsContainer.grdFutureAppointmentsRow;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabPETContainer.grdPETRow;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabWaitingListContainer.grdWaitingListRow;
import ims.RefMan.vo.CatsReferralCurrentStatusVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.FutureAppointmentStatusVo;
import ims.RefMan.vo.FutureAppointmentStatusVoCollection;
import ims.RefMan.vo.LinkedAppointmentForReferralAppointmentComponentVo;
import ims.RefMan.vo.LinkedAppointmentForReferralAppointmentComponentVoCollection;
import ims.RefMan.vo.OrderInvApptListVo;
import ims.RefMan.vo.PatientElectiveListAddLaterVo;
import ims.RefMan.vo.PatientElectiveListForReferralDetailsVo;
import ims.RefMan.vo.PatientElectiveListForReferralDetailsVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.ReferralERODVo;
import ims.RefMan.vo.ReferralERODVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.enums.ReferralAppointmentDetailsAction;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ElectiveListStatusReason;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.RefMan.vo.lookups.WaitingCardAdmissionType;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.helper.PdsException;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.LocationListVo;
import ims.core.vo.MissingMappingVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PdsErrorVo;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.Button;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.ImportResultsConfigVo;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.ReferralAppointmentDetailsOcsOrderVo;
import ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo;
import ims.ocrr.vo.SpecimenWorkListItemLiteVo;
import ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.scheduling.domain.objects.SessionTheatreProceduresRemanining;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentLiteVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.FutureAppointmentListVo;
import ims.scheduling.vo.FutureAppointmentListVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreAppointmentVo;
import ims.scheduling.vo.PendingEmergencyTheatreAppointmentVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreRemovalVo;
import ims.scheduling.vo.PendingEmergencyTheatreVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.enums.AppointmentOutcomeAction;
import ims.scheduling.vo.lookups.FutureAppointmentStatus;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;
import ims.scheduling.vo.lookups.RequestToSchedule;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TCITime;
import ims.vo.ValueObject;
import ims.vo.interfaces.IReferralApptDetail;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;


public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	private static final int ACTIONED = -1;
	private static final int CANCELLED = -2;
	//private static final int DNAED = -3;
	private static final int ALL_CONSULTATION_ACTIVITY_BOOKED = -4;//WDEV-20643
	private static final int PATIENT_DISCHARGED_BACK_TO_GP = -5;
	private static final int COMPLETED_REBOOKING_SUBSEQUENT_ACTIVITY = -6;
	private static final int REDIRECTED_IN_CAB = -7;
	
	private static final int APPT_DATE_TIME_COLUMN_ID = 1;
	private static final int APPT_LETTER_PRINTED_COLUMN_ID = 5;
	private static final int APPT_BOOKING_COMMENTS_COLUMN_ID = 6;
	
	private static final String	CONSULTANT            = "Consultant";
	private static final String	SPR                   = "Spr";
	private static final String	ASSOCIATE_SPECIALIST  = "Associate Specialist";
	private static final String	ANY_DOCTOR_TO_SEE     = "Any Doctor To See";
	
	private static final int TCI_DETAILS_IMSID = 361; //WDEV-23354
	private static final String ELECTIVE_LIST = "PatientElectiveList_id"; //WDEV-23354
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{ 	
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			form.lyrSelect().tabWaitingList().grdWaitingList().setRowSelectionChangedEventRequirePdsAuthentication(true);
	} 

	private void clearScreen()
	{
		form.lblService().setValue(null);
		form.lblFunction().setValue(null);
		form.lblUrgency().setValue(null);
		form.lblRTTBreachDate().setValue(null);
		form.lblRTTStatus().setValue(null);
		form.lbl1stOPKPIDate().setValue(null);
		
		form.lyrSelect().tabAppInvs().grdAppts().getRows().clear();
		form.lyrSelect().tabAppInvs().grdInvestigations().getRows().clear();
	}

	private void populateScreenFromData(IReferralApptDetail iReferralApptDetail)
	{
		clearScreen();

		if(iReferralApptDetail == null)
			return;
		
		//list of all specimenworklistitems
		SpecimenWorkListItemLiteVoCollection voCollWorkListItem = domain.listSpecimenWorKlistItemsForCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if(voCollWorkListItem != null && voCollWorkListItem.size() > 0)
		{
			SpecimenWorkListItemLiteVoCollection voCollWorkListNotCollected = new SpecimenWorkListItemLiteVoCollection();
			SpecimenWorkListItemLiteVoCollection voCollWorkListCollectedItems = new SpecimenWorkListItemLiteVoCollection();

			for(SpecimenWorkListItemLiteVo voSpecWork : voCollWorkListItem)
			{
				if(voSpecWork.getDateToCollect() == null && voSpecWork.getWard() == null)
					voCollWorkListNotCollected.add(voSpecWork);
				else
					voCollWorkListCollectedItems.add(voSpecWork);
			}
			form.getGlobalContext().RefMan.setSpecimenWorkListItems(voCollWorkListNotCollected.size() > 0 ? voCollWorkListNotCollected : null);
			form.getLocalContext().setCollectedWorkListItems(voCollWorkListCollectedItems);
		}	
		else
		{
			form.getGlobalContext().RefMan.setSpecimenWorkListItems(null);
			form.getGlobalContext().RefMan.setSpecimenWorkListItem(null);
			form.getLocalContext().setCollectedWorkListItems(null);
		}
		
		form.getLocalContext().setReferralApptDetail(iReferralApptDetail);
		form.lblService().setValue(iReferralApptDetail.getIReferralApptDetailServiceName());
		form.lblFunction().setValue(iReferralApptDetail.getIReferralApptDetailFunction() != null ? iReferralApptDetail.getIReferralApptDetailFunction().getText() : null);
		form.lblUrgency().setValue(iReferralApptDetail.getIReferralApptDetailUrgency() != null ? iReferralApptDetail.getIReferralApptDetailUrgency().getText() : null);
		form.lblRTTBreachDate().setValue(!Boolean.TRUE.equals(iReferralApptDetail.getIReferralIsEmergencyReferral()) && iReferralApptDetail.getIReferralApptDetailRTTBreachDate() != null ? iReferralApptDetail.getIReferralApptDetailRTTBreachDate().toString() : null);
		//form.lbl1stOPKPIDate().setValue(iReferralApptDetail.getIReferralFirstOPKPI() != null ? iReferralApptDetail.getIReferralFirstOPKPI().toString() : null);
		form.lbl1stOPKPIDate().setValue(iReferralApptDetail.getIReferralApptDetailEndDateKPI() != null ? iReferralApptDetail.getIReferralApptDetailEndDateKPI().toString() : null);			//wdev-20946
		
		// WDEV-20416 - Display 31 and 62 day target values
		if (iReferralApptDetail.getIReferral31DayTargetDate() != null)
			form.lbl31DayTarget().setValue(iReferralApptDetail.getIReferral31DayTargetDate().toString());
		else
			form.lbl31DayTarget().setValue("");
		
		if (iReferralApptDetail.getIReferral62DayTargetDate() != null)
			form.lbl62DayTarget().setValue(iReferralApptDetail.getIReferral62DayTargetDate().toString());
		else
			form.lbl62DayTarget().setValue("");
		
		
		//WDEV-18387 
		if (form.getLocalContext().getbDisplayRttCurrentStatusFields())
		{
			// WDEV-20604 - limit size displayed and show remainder on tooltip
			String rttCurrentStatus = "";
			if (iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus() != null && iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatusIsNotNull())
				rttCurrentStatus = iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getNationalCodeIsNotNull() ? iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getNationalCode().toString() + ". " + iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getDescription() : iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getDescription();

			String rttCurrentStatusTooltip = rttCurrentStatus;		
			if (rttCurrentStatus.length() > 35)
			{
				rttCurrentStatus = rttCurrentStatus.substring(0,32) + "...";
			}

			form.lblRTTStatus().setValue(rttCurrentStatus);
			form.lblRTTStatus().setTooltip(null);//WDEV-20648
			form.lblRTTStatus().setTooltip(rttCurrentStatusTooltip);
		}
		
	
		
		// Appts
		if(iReferralApptDetail.getIReferralApptDetailAppointments() != null)
		{
			
			iReferralApptDetail.getIReferralApptDetailAppointments().sort(new ApptDateTimeComparator()); // start WDEV-20279
			
			populateAppointmentsGrid(iReferralApptDetail.getIReferralApptDetailAppointments());
		}
		
		// investigations
		if(iReferralApptDetail.getIReferralApptDetailInvestigations() != null)
		{
			for(ReferralAppointmentDetailsOcsOrderVo voOrder : iReferralApptDetail.getIReferralApptDetailInvestigations())
			{
				for(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv : voOrder.getInvestigations())
				{
					grdInvestigationsRow row = form.lyrSelect().tabAppInvs().grdInvestigations().getRows().newRow();
					if(voOrder.getSysInfoIsNotNull() && voOrder.getSysInfo().getCreationDateTime() != null)
						//-------------------------
						row.setcolDate(voOrder.getSysInfo().getCreationDateTime().getDate());
						//row.setcolDate(voOrder.getSysInfo().getCreationDateTime().toString(false));
						//--------------------------
					
					//Need to find this OrderInv in the OrderInvAppts collection or SpecimeWorkListItems and display relevant data
					populateAppointmentData(iReferralApptDetail, voOrderInv, row, voCollWorkListItem);
					
					if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull())
					{
						row.setcolInvestigation(voOrderInv.getInvestigation().getInvestigationIndex().getName());
						//WDEV-6161 - 1
						if(voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterfaceIsNotNull())
						{
							if(voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL) && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterface() == true)
							{	
								//-------------------------
								row.setcolApptDate(voOrderInv.getAppointmentDateIsNotNull() ? voOrderInv.getAppointmentDate().getDate() : null);
								//row.setcolApptDate(voOrderInv.getAppointmentDateIsNotNull() ? voOrderInv.getAppointmentDate().getDate().toString() : null);
								//-----------------
//								if(voOrderInv.getAppointmentDateIsNotNull() && voOrderInv.getAppointmentDate().getTime() != null)
//									row.setTooltipForcolApptDate("Appointment Time : " + voOrderInv.getAppointmentDate().getTime().toString());
							}
						}
					}
						
					if((voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getCanBeScheduledIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getCanBeScheduled()))
					{
						if(voOrderInv.getAppointmentDate() == null && row.getcolApptDate() == null)
						{
							row.setcolImage(form.getImages().OCRR.Information);
							row.setTooltipForcolImage("Investigation requires an Appointment");
						}
					}
					
					if(voOrderInv.getOrdInvCurrentStatusIsNotNull() && voOrderInv.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull()
							&& (voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.CANCEL_REQUEST)
									|| voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.CANCELLED)))
						row.setBackColor(ConfigFlag.UI.CANCELLED_INVESTIGATION_ROW_COLOUR.getValue());
					
					row.setValue(voOrderInv);
				}
			}
		}			
		updateControlState();
		
	}
	
	//WDEV-20053
	private String getTooltipForColLinkedAppt(LinkedAppointmentForReferralAppointmentComponentVoCollection linkedAppointmentForReferralAppointmentComponentVoCollection)
	{
		if (linkedAppointmentForReferralAppointmentComponentVoCollection==null || linkedAppointmentForReferralAppointmentComponentVoCollection.size()==0)
			return "";
			
		StringBuffer tooltip = new StringBuffer();
		
		tooltip.append("<table style=\"border :1px solid black; border-collapse:collapse;\">");
		tooltip.append("<tr><td style=\" border:1px solid black;\"><b>Date Time  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>Service &nbsp &nbsp </b></td><td style=\" border:1px solid black;\"><b>Clinic &nbsp &nbsp </b></td> <td style=\" border:1px solid black;\"><b>Status &nbsp &nbsp </b></td> </tr>");
		
		for (int i = 0; i < linkedAppointmentForReferralAppointmentComponentVoCollection.size(); i++)
		{
			LinkedAppointmentForReferralAppointmentComponentVo linkedAppt = linkedAppointmentForReferralAppointmentComponentVoCollection.get(i);
			
			if (linkedAppt==null)
				continue;
	
			String dateTimeStr = "";
			if(linkedAppt.getAppointmentDateIsNotNull())
				dateTimeStr += linkedAppt.getAppointmentDate().toString() + " ";
			if(linkedAppt.getApptStartTimeIsNotNull())
				dateTimeStr += linkedAppt.getApptStartTime().toString();
			
			tooltip.append("<tr>");
			tooltip.append("<td style=\" border:1px solid black;\"><b>" +dateTimeStr 
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(linkedAppt.getSessionIsNotNull()&& linkedAppt.getSession().getServiceIsNotNull()? linkedAppt.getSession().getService().getServiceName() : "" )
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(linkedAppt.getSessionIsNotNull() && linkedAppt.getSession().getNameIsNotNull() ? linkedAppt.getSession().getName() : "") + "</b></td>"
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(linkedAppt.getApptStatusIsNotNull() ? linkedAppt.getApptStatus() : "") + "</b></td></tr>");
		}
		tooltip.append("</table>");

		return tooltip.toString();
		
	}

	private String getCancellationTooltip(ReferralAppointmentDetailsBookingAppointmentVo voAppt)
	{
		if(voAppt == null)
			return null;
		
		StringBuffer tooltip = new StringBuffer();
		
		if(voAppt.getNumProviderCancellations() != null && voAppt.getNumProviderCancellations() > 0)
		{
			tooltip.append("Number Of Provider Cancellations = ");
			tooltip.append(voAppt.getNumProviderCancellations());
		}
		if(voAppt.getNumPatientCancellations() != null && voAppt.getNumPatientCancellations() > 0)
		{
			if(tooltip.length() > 0)
				tooltip.append("<br>");
			
			tooltip.append("Number Of Patient Cancellations = ");
			tooltip.append(voAppt.getNumPatientCancellations());
		}
		
		return tooltip.toString();
	}

	//WDEV-19381
	private String getTooltipForColAppLetterPrinted(ReferralAppointmentDetailsBookingAppointmentVo  bookAppt)
	{
		if (bookAppt==null || !Boolean.TRUE.equals(bookAppt.getWasPrinted()))
		{
			return null;
		}
		
		String str="Appointment Letter was printed ";
		
		str+=(bookAppt.getBookingLetterIsNotNull() && bookAppt.getBookingLetter().getRecordingUser()!=null ? "<br><b>User:  </b>" + bookAppt.getBookingLetter().getRecordingUser().getIMosName() : "");  
		
		str+=(bookAppt.getBookingLetterIsNotNull() && bookAppt.getBookingLetter().getRecordingDateTime()!=null ? "<br><b>Date/Time: </b>" + bookAppt.getBookingLetter().getRecordingDateTime() : "");  
		
		return str;
	}
	
	private boolean findAnyInvestigationForThisAppointment(IReferralApptDetail referralApptDetail, ReferralAppointmentDetailsBookingAppointmentVo voAppt) 
	{
		if(referralApptDetail.getIReferralApptDetailAppointments() != null)
		{
			//Find the Order Investigaion in the OrderInvApt collection
			for(OrderInvApptListVo voOrderInvAppt : referralApptDetail.getIReferralApptDetailOrdInvAppts())
			{
				if (voOrderInvAppt.getAppointmentIsNotNull()
					&& voAppt.getID_Booking_Appointment().equals(voOrderInvAppt.getAppointment().getID_Booking_Appointment()))
					return true;
			}
		}
		return false;
	}

	private void populateAppointmentData(IReferralApptDetail referralApptDetail, ReferralAppointmentDetailsOrderInvestigationVo voOrderInv, grdInvestigationsRow row, SpecimenWorkListItemLiteVoCollection voCollWorkListItem) 
	{
		if(referralApptDetail.getIReferralApptDetailAppointments() != null)
		{
			//Find the Order Investigaion in the OrderInvAppt collection 
			boolean bFound = false;
			for(OrderInvApptListVo voOrderInvAppt : referralApptDetail.getIReferralApptDetailOrdInvAppts())
			{
				if (voOrderInvAppt.getOrderInvestigationIsNotNull()
					&& voOrderInvAppt.getOrderInvestigation().getID_OrderInvestigationIsNotNull()
					&& voOrderInv.getID_OrderInvestigationIsNotNull()
					&& voOrderInv.getID_OrderInvestigation().equals(voOrderInvAppt.getOrderInvestigation().getID_OrderInvestigation()) )
				{
					//Found the investigation - Now find the corresponding Appt
					for(ReferralAppointmentDetailsBookingAppointmentVo voAppt : referralApptDetail.getIReferralApptDetailAppointments())
					{
						if (voOrderInvAppt.getAppointmentIsNotNull()
								&& voAppt.getID_Booking_Appointment().equals(voOrderInvAppt.getAppointment().getID_Booking_Appointment()))
						{
							bFound = true;
							row.setColOrdInvAppt(voOrderInvAppt);
							if (voAppt.getSessionIsNotNull())
							{
								if(voAppt.getSession().getServiceIsNotNull())
									row.setcolService(voAppt.getSession().getService().getServiceName());
											
								if(voAppt.getSession().getSchLocationIsNotNull())
									row.setcolLocation(voAppt.getSession().getSchLocation().getName());

								if(voAppt.getAppointmentDateIsNotNull())
									//--------------------------
									row.setcolApptDate(voAppt.getAppointmentDate());
									//row.setcolApptDate(voAppt.getAppointmentDate().toString());
									//------------------------------------------------
								
								if(voAppt.getApptStartTimeIsNotNull())
									row.setTooltipForcolApptDate("Appointment Time : " + voAppt.getApptStartTime().toString());
											
								if(voAppt.getApptStatusIsNotNull())
									row.setcolApptStatus(voAppt.getApptStatus().toString());

								row.setcolAPPTVO(voAppt);
								break;
							}
						}
					}
				}
			}
			if(!bFound)
			{
				//find the item in the SpecimenWorkListItem Collection
				if(voCollWorkListItem != null)
				{
					for(SpecimenWorkListItemLiteVo voWorkListItem : voCollWorkListItem)
					{
						if(voWorkListItem.getSpecimenIsNotNull() && voOrderInv.getSpecimenIsNotNull() &&  voWorkListItem.getSpecimen().equals(voOrderInv.getSpecimen()))
						{
							//-----------------
							row.setcolApptDate(voWorkListItem.getDateToCollectIsNotNull() ? voWorkListItem.getDateToCollect() : null);
							//row.setcolApptDate(voWorkListItem.getDateToCollectIsNotNull() ? voWorkListItem.getDateToCollect().toString() : null);
							//----------------
							row.setcolLocation(voWorkListItem.getWardIsNotNull() ? voWorkListItem.getWard().getName() : null);
							break;
						}
					}
				}
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		ReferralAppointmentDetailsBookingAppointmentVo voApptToCancel = null;
		SessionServiceAndSlotActivityVo voServiceAndActivity = null;
		Booking_AppointmentVo voAppt = null;
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.BOOK_APPT:
				bookNewAppt();			// WDEV-12159
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.BOOK_WARD_ATTENDANCE:
				bookNewWardAttendance();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.CANCEL_APPT:
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				cancelAppointment(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			//WDEV-22876
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.CANCEL_CAB_APPT:
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				cancelAppointment(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.REBOOK_APPT:
				// get the full appointment record to be rebooked and set the
				// appropriate context to initialize the screen
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				rebookAppt(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.ORDER_INVESTIGATION:
				orderInvestigation();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.BOOK_THEATRE_APPT:
				bookTheatreAppt(false); //WDEV-19479
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.CANCEL_THEATRE_APPT:
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				cancelTheatreAppointment(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.REBOOK_THEATRE_APPT:
				BookingAppointmentTheatreVo voTheatreAppt = domain.getTheatreAppointment(form.lyrSelect().tabAppInvs().grdAppts().getValue());
				rebookTheatreAppt(voTheatreAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.CancelAppointment:
				voApptToCancel = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO();
				form.getLocalContext().setApptToCancel(voApptToCancel);
				voServiceAndActivity = domain.getServiceAndActivityByAppt(voApptToCancel, null);
				if(voServiceAndActivity != null)
				{
					form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
					form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
					form.getGlobalContext().Scheduling.setBookingSession(voApptToCancel != null ? voApptToCancel.getSession() : null);
					form.getGlobalContext().ChooseAndBook.setisCABAppt(voApptToCancel.getIsCABBooking());
					engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
				}
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.RebookAppointment:
				// get the full appointment record to be rebooked and set the
				// appropriate context to initialize the screen
				if(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow() != null && form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO() != null)
					rebookAppt(domain.getBookingAppointment(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO()), form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO());
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.AMEND_BOOKING_COMMENTS://WDEV-23474
			{
				ReferralAppointmentDetailsBookingAppointmentVo voApp = form.lyrSelect().tabAppInvs().grdAppts().getSelectedRow().getValue();
				form.getGlobalContext().Core.setCommentDialogString(voApp != null && voApp.getBookingCommentsIsNotNull() ? voApp.getBookingComments():null);
				form.getGlobalContext().Core.setCommentDialogTitle("Booking Comment");
				engine.open(form.getForms().Core.CommentDialog, new Object[] { Boolean.TRUE });
			}
			
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ViewOrder:				
				if(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null)
				{
					form.getGlobalContext().OCRR.PathologyResults.setOrder(form.lyrSelect().tabAppInvs().grdInvestigations().getValue().getOrderDetails());
					engine.open(form.getForms().OCRR.OrderSummaryDialog);
				}
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ViewResult:
				form.getGlobalContext().OCRR.setResultDisplayDate(getSelectedDisplayDateTime() != null ? getSelectedDisplayDateTime().getDate() : null);
				form.getGlobalContext().OCRR.setCurrentPathRadResult(getPathRadResult(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()));
				engine.open(form.getForms().OCRR.ResultDialog);
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ENTER_APPT_DETAILS:
				enterAppointmentDetails();
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.EDIT_COLLECTION_DETAILS:
				editCollectionDetails();
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ViewRejectionDetails:
				engine.open(form.getForms().OCRR.RejectedInvestigationDetails);
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.CHANGE_APPT:
				changeAppointment();
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.CANCEL_THEATRE_APPT:
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				cancelTheatreAppointment(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.VIEW_APPT_HISTORY:
				 viewAppHistory();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.REMOVE_ELECTIVE_LIST:  //wdev-18365
				PatientElectiveListForReferralDetailsVo tempVo = form.lyrSelect().tabWaitingList().grdWaitingList().getSelectedRow().getValue();
				engine.open(form.getForms().RefMan.RemoveFromElectiveList, new Object[] {tempVo}); 
			break;
			
			//WDEV-18092
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.CANCEL_TCI:
				
				//WDEV-18541
				if (form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails() != null)
				{
					TCIOutcomeForPatientElectiveListVo dummyTCIOutcome = new TCIOutcomeForPatientElectiveListVo();
					dummyTCIOutcome.setTciId(form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getID_TCIForPatientElectiveList());
					
					if (form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointmentIsNotNull() 
							&& form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointment().getTheatreBookingIsNotNull() 
							&& theatreAppointmetnIsInTheFutureAndIsNotCancelled(form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointment()))
					{
						dummyTCIOutcome.setTciHasFutureTheatreAppt(true);
						dummyTCIOutcome.setCancelTheatreAppointment(true);
					}
					
					form.getGlobalContext().RefMan.setTheatreBookingAppointment(form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointment()); //WDEV-22778
					form.getGlobalContext().RefMan.setTCIOutcomeForPatientElectiveList(dummyTCIOutcome);
				}
				
				engine.open(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog);
				break;
				
			//WDEV-23354
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.PRINT_TCI_DETAILS:
				printReport();
				break;
			//WDEV-23354 - ends here
				
			//WDEV-18391
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.ADD_NEW_WAITING_LIST:
			{
					form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(null);
					form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
					//engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST});
					
					//wdev-21043
					engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,
					null,
					null,
					ElectiveListAddLaterDlgOpenMode.EDIT},
					"Waiting List Details"); 	
					
					break;
			}
			/*case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.ADD_NEW_BOOKED_LIST:
			{
					form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
					engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOBOOKEDLIST});
					break;
			}*/
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.ADD_NEW_PLANNED_LIST:
			{
					form.getGlobalContext().RefMan.setPatientElectiveListRef(null);				
					//engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST});
					
					//wdev-21043
					engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
					null,
					null,
					ElectiveListAddLaterDlgOpenMode.EDIT},
					"Planned List Details"); 	

					
					
					
					break;
			}
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.VIEW_ELECTIVE_LIST: 
					//engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.VIEWEDIT});
				engine.open(form.getForms().RefMan.ElectiveListDetails);
			break;
			
			//WDEV-18391 a1)
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.BOOK_THEATRE:

				//WDEV-20535
				//WDEV-22023
				PDSConfigurationVo config = domain.getPDSConfiguration();
				if (config !=null && config.getTP_BookOutpatientApptIsNotNull() && config.getTP_BookOutpatientAppt())
				{ 
					
					if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
					{
						// PDS AUTHENTICATION
						PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
						if(pdsAuth.hasRightsFor(PdsRight.PDS_RETRIEVAL, PdsCheck.CHECK_ALL, form.getGlobalContext().Core.getSamlXml()))
						{
							if (Boolean.FALSE.equals(ConfigFlag.GEN.ELECTIVE_LIST_TCI_GIVEN_PERFORM_AUTO_PDS_LOOKUP.getValue()))
							{
								engine.open(form.getForms().Core.PDSDemographicsDialog);
								return;
							}
							else
								pdsLookup();
						}

						// END PDS AUTHENTICATION
					}
					else
					{
						engine.open(form.getForms().Core.PDSDemographicsDialog);
						return;
					}

					//in the case where ELECTIVE_LIST_TCI_GIVEN_PERFORM_AUTO_PDS_LOOKUP is true continue with booking  
					bookTheatreAppt(true); //WDEV-19479
					
				}
				else
				{
					//bookTheatreAppt(true); //WDEV-19479
					engine.open(form.getForms().Core.PDSDemographicsDialog);
					return;
				}
				break;
				//WDEV-20535 ends here
				//WDEV-22023
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.BOOK_APPOINTMENT:
				bookFutureAppointment();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.APPOINTMENT_BOOKED:
				updateFutureAppointmentStatus(FutureAppointmentStatus.BOOKED);
				populateFutureAppointmentsGrid();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.REMOVE:
				engine.open(form.getForms().Scheduling.FutureAppointmentRemovalReason);
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.VIEW_DETAILS:
				
				FutureAppointmentListVo futureAppt = form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue();
				
				form.getGlobalContext().Scheduling.setFutureAppointmentDetails(domain.getFutureAppointmentDetails(futureAppt));
				form.getGlobalContext().RefMan.setCatsReferral(futureAppt.getReferral());
				engine.open(form.getForms().Scheduling.FutureAppointmentDetails);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PendingEmergencyTheatre.VIEW_EDIT_EMERGENCY_THEATRE:
				
				form.getGlobalContext().Scheduling.setPendingEmergencyTheatre(domain.getPendingEmergencyTheatre(form.lyrSelect().tabPET().grdPET().getValue()));
				engine.open(form.getForms().RefMan.AddEmergencyTheatre);
				
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PendingEmergencyTheatre.REMOVE_EMERGENCY_THEATRE:
				
				PendingEmergencyTheatreAppointmentVo pet = form.lyrSelect().tabPET().grdPET().getValue();
				boolean hasActiveAppointment = pet != null && pet.getTheatreAppointmentBooked() != null && pet.getTheatreAppointmentBooked().getCurrentStatusRecord() != null && !Status_Reason.CANCELLED.equals(pet.getTheatreAppointmentBooked().getCurrentStatusRecord().getStatus());
				
				if (hasActiveAppointment)
				{
					engine.showMessage("Record cannot be removed as it has an active Theatre Appointment linked", "Warning", MessageButtons.OK, MessageIcon.WARNING);
					return;
				}
				
				form.getGlobalContext().Scheduling.setPendingEmergencyTheatreRemoval(null);
				engine.open(form.getForms().RefMan.RemovePendingEmergencyTheatre);
				
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PendingEmergencyTheatre.BOOK_EMERGENCY_THEATRE:
				
				form.getGlobalContext().Scheduling.setPendingEmergencyTheatreRemoval(null);
				engine.open(form.getForms().RefMan.BookEmergencyTheatre, new Object[] {form.lyrSelect().tabPET().grdPET().getValue()});
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.ADD_FUTURE_APPT_DETAILS:
				addFutureAppointmentDetails();
			break;
			
			//WDEV-22398
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.PATIENT_TREATED_AS_AN_EMERGENCY:
				engine.open(form.getForms().RefMan.RemoveFromElectiveList, new Object[] {form.lyrSelect().tabWaitingList().grdWaitingList().getValue(), ElectiveListStatusReason.PATIENT_ADMITTED_AS_AN_EMERGENCY_FOR_THE_SAME_CONDITION});
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.PRINT:
				engine.open(form.getForms().Core.PrintReport, new Object[] {engine.getFormName()});
			break;
			
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.UNDO_REMOVAL:
				undoRemoval();
			break;
			//WDEV-22921
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.VIEW_APPOINTMENT_OUTCOME:
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW, AppointmentOutcomeAction.VIEW_READ_ONLY}, false);
			break;
			
			default:
		}
	}

	private void undoRemoval()
	{
		PatientElectiveListForReferralDetailsVo electiveList = form.lyrSelect().tabWaitingList().grdWaitingList().getValue();
		
		if(electiveList != null)
		{
			engine.open(form.getForms().RefMan.UndoRemovalFromWaitingList, new Object[] {electiveList});
		}
	}

	private void addFutureAppointmentDetails()
	{
		//WDEV-21210 - implementation per referral
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
		form.getGlobalContext().Scheduling.setFutureAppointmentDetails(null);
		engine.open(form.getForms().Scheduling.FutureAppointmentDetails, "Add Referral Future Appointment Details");
		
	}

	private boolean theatreAppointmetnIsInTheFutureAndIsNotCancelled(ReferralAppointmentDetailsBookingAppointmentVo appointment)
	{
		if(appointment == null)
			return false;
		
		DateTime currentDate = new DateTime();
		
		if(appointment.getAppointmentDate() != null && currentDate.getDate().isGreaterThan(appointment.getAppointmentDate()))
			return false;
		
		if(appointment.getCurrentStatusRecord() != null && Status_Reason.CANCELLED.equals(appointment.getCurrentStatusRecord().getStatus()))
			return false;
		
		return true;
	}

	private void changeAppointment()
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().Rotherham.setBookedAppointments(getBookedAppointmentsCollectionFromApptsGrid());
		engine.open(form.getForms().RefMan.BookedAppointments);
	}

	private void editCollectionDetails() 
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().RefMan.setSpecimenWorkListItem(isPathologyAndSpecimenWorkListItemExists(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()));
		engine.open(form.getForms().RefMan.BookSpecimenAppointmentDialog);
	}

	private void enterAppointmentDetails() 
	{
		if (isReferralEndOfCare())
			return;
		//WDEV-16850
		grdInvestigationsRow row = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow();
		engine.open(form.getForms().RefMan.EnterAppointmentDetails, new Object[]{Boolean.TRUE.equals(row.getValue() != null && row.getValue().getSysInfoIsNotNull() && row.getValue().getSysInfo().getCreationDateTime() != null) ? row.getValue().getSysInfo().getCreationDateTime().getDate() : null });
	}

	private void cancelTheatreAppointment(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voApptToCancel) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null 
			&& voAppt.getApptStatusIsNotNull()
			&& (voAppt.getApptStatus().equals(Status_Reason.BOOKED) || voAppt.getApptStatus().equals(Status_Reason.ADMITTED) || voAppt.getApptStatus().equals(Status_Reason.DISCHARGED)) //WDEV-22778 
			&& isTheatreAppt)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
			form.getLocalContext().setApptToCancel(voApptToCancel);
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voApptToCancel);
			if(voPsc != null)
			{
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[] {null, isTheatreAppt});
			}
		}
		else if (voAppt != null
			&& voAppt.getApptStatusIsNotNull()
			&& voApptToCancel != null
			&& voAppt.getApptStatusIsNotNull()
			&& ! voAppt.getApptStatus().equals(voApptToCancel.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
		}
	}
	
	private Patient updateLocalPatientWithPds(Patient initialPatient, Patient pdsPatient, PdsRequestParameters params, MissingMappingVoCollection missingMappings)
	{
		ArrayList errors = new ArrayList();
		Patient pat = null; 

		if(missingMappings != null && missingMappings.size() > 0)
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(this.domain);
			helper.displayMissingMappings(missingMappings, engine);
		}
		
		try
		{
			pat = domain.updateLocalPatientWithPds(initialPatient, pdsPatient, errors, form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole(), missingMappings);
		}
		catch (DomainInterfaceException e1)
		{
			e1.printStackTrace();
		}
		catch (StaleObjectException e1)
		{
			e1.printStackTrace();
		}
		catch (ForeignKeyViolationException e1)
		{
			e1.printStackTrace();
		}

		if(errors.size() > 0)
		{
			String[] template = new String[] {""};
			String[] patErrors = (String[]) errors.toArray(template);
			if (patErrors != null)
			{
				engine.showErrors(patErrors);
				return null;
			}
		}

		return pat;
	}
	
	private void pdsLookup()
	{
		PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
		PatientShort pat = form.getGlobalContext().Core.getPatientShort();
		PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());
		Patient pdsPatient = null;
		Patient initialPatient = null;

		try
		{
			initialPatient = domain.getPatient(pat);
		}
		catch (StaleObjectException e2)
		{
			e2.printStackTrace();

			engine.showMessage("Error getting the patient record: " + e2.toString());
			return;
		}

		if(initialPatient.getSCN() == null)
		{
			if(initialPatient.getNhsn() == null)
			{
				try
				{
					helper.setPatientInContext(initialPatient);
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PDS_SYNC_REQUIRED,  "The current patient doesn not have an NHS number", PDSBackOfficeWorkPriority.P1);
					return;
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}

			}
		}

		if (pat.getNhsn() != null)
		{

			try
			{
				pdsPatient = helper.makeRequest(params, pat.getNhsn() != null ? pat.getNhsn().getIdValue() : "", PdsRetrievalQueryHelper.HistoricDataIndicator.ON);

				if(pdsPatient == null)
				{
					//spine returned an error
					PdsErrorVo pdsError = helper.getLastErrorDetails();
					String err = "";

					if(PdsQuery.NO_MATCH.equals(pdsError.getQueryResponseCode()))
					{
						engine.showMessage("This record is found to be invalid. Please treat all demographic and clinical data on the record with caution.");

						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.GENERAL, "Review Invalid record", PDSBackOfficeWorkPriority.P1);
							return;
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
					else
					{
						err = "Error calling PdsRetrievalQuery, query response code: " + pdsError.getQueryResponseCode();
						engine.showMessage(err);

						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  err, PDSBackOfficeWorkPriority.P1);
							return;
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
				}
			}
			catch (PdsException e)
			{
				e.printStackTrace();

				engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString());

				helper.setPdsErrorFromException(e);
				try
				{
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  e.toString(), PDSBackOfficeWorkPriority.P1);
					return;
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}
			}
		}
		updateLocalPatientWithPds(initialPatient, pdsPatient, params, helper.getMissingMappings());
	}

		
	private void cancelAppointment(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voReferralAppointmentDetailsBookingAppointment) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null 
			&& voAppt.getApptStatusIsNotNull()
			&& voAppt.getApptStatus().equals(Status_Reason.BOOKED) 
			&& !isTheatreAppt)
		{
			form.getLocalContext().setApptToCancel(voReferralAppointmentDetailsBookingAppointment);
			SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt, null);
			if(voServiceAndActivity != null)
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
				form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
				form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
				form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
			else //WDEV-19379
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
		}
		else if (voAppt != null
				&& voAppt.getApptStatusIsNotNull()
				&& voReferralAppointmentDetailsBookingAppointment != null
				&& voReferralAppointmentDetailsBookingAppointment.getApptStatusIsNotNull()
				&& ! voAppt.getApptStatus().equals(voReferralAppointmentDetailsBookingAppointment.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
		}
	}

	private void viewAppHistory()
	{
		ReferralAppointmentDetailsBookingAppointmentVo value = form.lyrSelect().tabAppInvs().grdAppts().getValue();
		if (value == null)
			throw new CodingRuntimeException("No item is selected in grid");
		
		engine.open(form.getForms().Scheduling.AppointmentHistoryDialog,new Object[]{domain.listAppointmentHistory(value)});
		//Appointment_StatusVoCollection  
	}

	private void rebookTheatreAppt(BookingAppointmentTheatreVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voFromGrid)
	{
		int repeats = 0;

		System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 1. Attempt (" + (repeats + 1) + ")");
		
		System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Appointment " + voAppt.getApptStatus());
		
		do
		{
			try
			{
				System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 2. Attempt (" + (repeats + 1) + ")");
				if (isReferralEndOfCare())
					return;

				boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;

				if (voAppt != null
						&& voAppt.getApptStatusIsNotNull()
						&& voFromGrid != null
						&& voFromGrid.getApptStatusIsNotNull()
						&& ! voAppt.getApptStatus().equals(voFromGrid.getApptStatus()) )
				{
					System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 3. Attempt (" + (repeats + 1) + ")");
					engine.showMessage("The appointment's status has already been changed.");
					form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
					form.fireCustomControlValueChanged();	
				}
				else if (voAppt != null 
						&& voAppt.getRequiresRebookIsNotNull() 
						&& voAppt.getRequiresRebook() 
						&& isTheatreAppt
						&& form.getLocalContext().getbReferralAcceptedIsNotNull() 
						&& form.getLocalContext().getbReferralAccepted()
						&& voAppt.getApptStatusIsNotNull()
						&& (voAppt.getApptStatus().equals(Status_Reason.CANCELLED) || voAppt.getApptStatus().equals(Status_Reason.DNA)))	//WDEV-9091
				{
					System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 4. Attempt (" + (repeats + 1) + ")");
					form.getGlobalContext().Scheduling.setTheatreAppointment(voAppt);

					if(voAppt.getSessionIsNotNull())
						form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSession().getTheatreType());

					TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voAppt);
					if(voPsc != null)
					{
						System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 5. Attempt (" + (repeats + 1) + ")");
						form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
						form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
						form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());

						//WDEV-12918
						if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
						{
							System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 6. Attempt (" + (repeats + 1) + ")");
							engine.open(form.getForms().RefMan.BookTheatreDialog);
						}
						else
						{
							PatientElectiveListRefVo patientElectiveList = domain.getPatientElectiveListForAppt(voAppt);
							
							System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 7. Attempt (" + (repeats + 1) + ")");

							if (patientElectiveList != null)
							{
								System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 8. Attempt (" + (repeats + 1) + ")");
								engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {patientElectiveList});
							}
							else
							{
								System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 9. Attempt (" + (repeats + 1) + ")");
								engine.open(form.getForms().RefMan.BookEmergencyTheatre,new Object[] {domain.getPendingEmergencyTheatreForAppt(voAppt)});
							}
						}
					}
				}
				
				System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Step 10. Attempt (" + (repeats + 1) + ")");
				return;
			}
			catch (Exception e)
			{
				System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Rebook - Exception. Attempt (" + (repeats + 1) + ")");
				repeats++;
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}

	private void bookTheatreAppt(boolean bookForElectiveListEntry) //WDEV-19479
	{
		if (isReferralEndOfCare())
			return;
		
		// WDEV-13243
		// Clear the book theatre global context when booking a new appointment
		form.getGlobalContext().Scheduling.setTheatreAppointment(null);
		form.getGlobalContext().RefMan.setPatientElectiveListRef(bookForElectiveListEntry ? form.lyrSelect().tabWaitingList().grdWaitingList().getValue() : null); //WDEV-19479
		
		form.getGlobalContext().RefMan.setPELProcedureDetailsForBooking(bookForElectiveListEntry ? form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getProcedureDescription() : null); //WDEV-22477

		//WDEV-12918
		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
			engine.open(form.getForms().RefMan.BookTheatreDialog);
		else if (bookForElectiveListEntry)
			engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {domain.getElectiveListManagement(form.lyrSelect().tabWaitingList().grdWaitingList().getValue())});
		else
			engine.open(form.getForms().RefMan.BookEmergencyTheatre);
	}

	private ReferralAppointmentDetailsBookingAppointmentVoCollection getBookedAppointmentsCollectionFromApptsGrid()
	{
		ReferralAppointmentDetailsBookingAppointmentVoCollection voCollAppts = new ReferralAppointmentDetailsBookingAppointmentVoCollection();
		
		for(int i=0;i<form.lyrSelect().tabAppInvs().grdAppts().getRows().size(); i++)
		{
			if(isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getRows().get(i).getValue(), Status_Reason.BOOKED))
				voCollAppts.add(form.lyrSelect().tabAppInvs().grdAppts().getRows().get(i).getValue());
		}
		
		return voCollAppts.size() > 0 ? voCollAppts : null;
	}

	private OcsPathRadResultVo getPathRadResult(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv)
	{
		if(voOrderInv == null)
			return null;
		
		OcsPathRadResultVo voPathRadResult = new OcsPathRadResultVo();
		voPathRadResult.setOrderInvestigation(voOrderInv);
		voPathRadResult.setCategory(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() ? voOrderInv.getInvestigation().getInvestigationIndex().getCategory() : null);
		voPathRadResult.setDescription(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() ? voOrderInv.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		
		return voPathRadResult;
	}
	
	private void bookAppt()
	{
		if (isReferralEndOfCare())
			return;
		
		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
		
	}

	private DateTime getSelectedDisplayDateTime()
	{
		if (form.lyrSelect().tabAppInvs().grdInvestigations().getValue() == null)
			return null;

		ReferralAppointmentDetailsOrderInvestigationVo voOrderInv = form.lyrSelect().tabAppInvs().grdInvestigations().getValue();
		return voOrderInv.getDisplayDateTime();
	}

	private void rebookAppt(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voFromGrid)
	{		
		if (isReferralEndOfCare())
			return;

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null
			&& voAppt.getApptStatusIsNotNull()
			&& voFromGrid != null
			&& voFromGrid.getApptStatusIsNotNull()
			&& ! voAppt.getApptStatus().equals(voFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");

			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
		}
		else if ( voAppt != null 
			&& voAppt.getRequiresRebookIsNotNull() 
			&& voAppt.getRequiresRebook() 
			&& !isTheatreAppt
			&& voAppt.getApptStatusIsNotNull()
			&& (voAppt.getApptStatus().equals(Status_Reason.CANCELLED) || voAppt.getApptStatus().equals(Status_Reason.DNA)))
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
			form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
			form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);
		
			
			bookAppt();
		}
	}

	protected void onGrdApptsSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setSelectedBookAppointmentForPrint(form.lyrSelect().tabAppInvs().grdAppts().getValue());
		form.getGlobalContext().Scheduling.setWardAttendance(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null ? form.lyrSelect().tabAppInvs().grdAppts().getValue().getIsWardAttendance() : Boolean.FALSE);
		form.getLocalContext().setIsAnyTimeRecordedAgainstCaseDetails(form.lyrSelect().tabAppInvs().grdAppts().getValue()!=null ? domain.isAnyTimeRecordedAgainstCaseDetails(form.lyrSelect().tabAppInvs().grdAppts().getValue()) : null); //WDEV-22778
		updateControlState();
	}
	
	private void updateControlState()
	{
		form.getContextMenus().RefMan.hideAllReferralAppointmentDetailsComponentMenuItems();
		form.getContextMenus().RefMan.hideAllWaitingListForReferralDetailsCancelMenuMenuItems();
		
		boolean icpCompleted =form.getLocalContext().getAssociatedICPCompletedIsNotNull() && form.getLocalContext().getAssociatedICPCompleted().booleanValue();
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_APPTItem().setVisible(!icpCompleted && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_WARD_ATTENDANCEItem().setVisible(!icpCompleted && Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()));
		
		//WDEV-22276
		boolean isInpatient = form.getGlobalContext().Core.getPatientShort() != null &&  form.getGlobalContext().Core.getPatientShort().getWard() != null;
		
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setVisible(isInpatient && !icpCompleted && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
		// WDEV-18617 form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setEnabled(hasOutpatientAppointments()); //WDEV-17913
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setEnabled(true);
		
		//WDEV-18488
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(!isAssociatedICPCompleted() && Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()));
		}
	
		form.lyrSelect().tabAppInvs().btnBookWardAttendance().setVisible(!icpCompleted && Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()));
		
		form.lyrSelect().tabAppInvs().btnBookTheatre().setVisible(isInpatient && !icpCompleted && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
		
		if (form.lyrSelect().tabAppInvs().grdAppts().getSelectedRow() != null)
		{
			boolean isTheatreAppt = form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getTheatreBooking() != null;
			boolean isCABAppt = form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && Boolean.TRUE.equals(form.lyrSelect().tabAppInvs().grdAppts().getValue().getIsCABBooking()); //WDEV-22876
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_APPTItem().setVisible(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) && !isTheatreAppt && !isCABAppt); //WDEV-22876
			//WDEV-22876
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_CAB_APPTItem().setVisible(isCABAppt && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) && !isTheatreAppt);
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_APPTItem().setVisible(!icpCompleted && form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebookIsNotNull() 
					&& form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebook() && !isTheatreAppt && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			//WDEV-23474
			ReferralAppointmentDetailsBookingAppointmentVo voAppt = form.lyrSelect().tabAppInvs().grdAppts().getSelectedRow().getValue();
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentAMEND_BOOKING_COMMENTSItem().setVisible(!isTheatreAppt && voAppt !=null && !Boolean.TRUE.equals(voAppt.getIsWardAttendance()));	//WDEV-23474 
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem().setVisible(ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue() && form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) 
					&& !isTheatreAppt && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem().setVisible(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && (isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) || isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.ADMITTED) || isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.DISCHARGED)) && isTheatreAppt && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue() && !Boolean.TRUE.equals(form.getLocalContext().getIsAnyTimeRecordedAgainstCaseDetails())); //wdev-11631  //WDEV-22778
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem().setVisible(!icpCompleted && form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebookIsNotNull() && form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebook() && isTheatreAppt
					 && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem().setVisible(form.lyrSelect().tabAppInvs().grdAppts().getValue()!=null);
						
		}
		
		//Investigation Grid
		boolean isTheatreAppt = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow() != null && form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO() != null && form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO().getTheatreBookingIsNotNull();
		form.getContextMenus().RefMan.hideAllInvestigstionsMenuMenuItems();
		form.getContextMenus().RefMan.getInvestigstionsMenuCancelAppointmentItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdInvestigations().getValue(), Status_Reason.BOOKED) && findApptForGivenInv(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) != null && !isTheatreAppt);
		form.getContextMenus().RefMan.getInvestigstionsMenuRebookAppointmentItem().setVisible(!icpCompleted && form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null && doesItRequireReboot(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) 
				&& !isTheatreAppt && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
		
		if (form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow() != null)
		{			
			form.getContextMenus().RefMan.getInvestigstionsMenuViewOrderItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getValue() != null);
			
			form.getContextMenus().RefMan.getInvestigstionsMenuViewResultItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getValue() != null 
					&& hasInvestigationGotAResult(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getValue()));
			
			form.getContextMenus().RefMan.getInvestigstionsMenuViewRejectionDetailsItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& isResultRejected(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()));
			
			form.getContextMenus().RefMan.getInvestigstionsMenuENTER_APPT_DETAILSItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& isClinicalAndNoInterfaceAndDateIsNull(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getInvestigstionsMenuEDIT_COLLECTION_DETAILSItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& isPathologyAndSpecimenWorkListItemExists(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) != null && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getInvestigstionsMenuCHANGE_APPTItem().setVisible(ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue() && form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& findApptForGivenInv(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) != null && otherBookedAppointmentsExist() && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getInvestigstionsMenuCANCEL_THEATRE_APPTItem().setVisible(isTheatreAppt && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdInvestigations().getValue(), Status_Reason.BOOKED));
		}

		form.lyrSelect().tabAppInvs().btnBookSpecimenCollect().setVisible(form.getGlobalContext().RefMan.getSpecimenWorkListItemsIsNotNull() && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
		if(form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnImportResult().setEnabled(form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && clinicalInvestigationExists());
	
		//WDEV-18092 WDEV-18380
		//WDEV-18425 // WDEV-18527 
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && !form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
		{		
			form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem().setVisible(form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getTCIDate()!=null && !Boolean.TRUE.equals(form.getLocalContext().getReferralCancelledByProvider())); //WDEV-19940 
			form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuPRINT_TCI_DETAILSItem().setVisible(form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getTCIDate()!=null && !Boolean.TRUE.equals(form.getLocalContext().getReferralCancelledByProvider())); //WDEV-23354
		}
		
		CatsReferralCurrentStatusVo voCats = domain.getCatsReferralStatus(form.getGlobalContext().RefMan.getCatsReferral()); //WDEV-20643
		boolean isReferralTransferred = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.TRANSFERRED.equals(voCats.getCurrentStatus().getReferralStatus());	//wdev-19933

		//WDEV-18425
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem().setVisible(
					form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null 
					&& form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getElectiveListStatus().getElectiveListStatusIsNotNull() 
					&& !form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED) && !isReferralTransferred);	//wdev-18365,wdev-19933
		
		//WDEV-18488 EROD buttons
		boolean isReferralNotEocOrCancelledbyProvider = Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()) && !Boolean.TRUE.equals(form.getLocalContext().getReferralCancelledByProvider());
		Button outpERODBtn = form.lyrSelect().tabAppInvs().btnOutpatientEROD();
		outpERODBtn.setVisible(form.getLocalContext().getReferralApptDetail() != null && form.getLocalContext().getReferralApptDetail().getIReferralOutpatientEROD() != null && form.getLocalContext().getReferralApptDetail().getIReferralOutpatientEROD().size() > 0);
		outpERODBtn.setEnabled(outpERODBtn.isVisible() && isReferralNotEocOrCancelledbyProvider);
		
		Button theatreERODBtn = form.lyrSelect().tabAppInvs().btnTheatreEROD();
		theatreERODBtn.setVisible(false); //WDEV-22531 
		theatreERODBtn.setEnabled(theatreERODBtn.isVisible() && isReferralNotEocOrCancelledbyProvider);
		
		//WDEV-22376
		form.lyrSelect().tabAppInvs().btnDischargedBacktoGP().setVisible(Boolean.TRUE.equals(voCats.getHasDNAorNotSeenActivity()));
		
		//WDEV-22375
		form.lyrSelect().tabAppInvs().btnCompletedReBooking().setVisible(Boolean.TRUE.equals(voCats.getHasRebookingSubsequentActivity()));
		
		if(form.getLocalContext().getReferralApptDetail() != null)
		{
			form.lyrSelect().tabAppInvs().btnOutpatientEROD().setTooltip(getErodInfo(getLastEROD(form.getLocalContext().getReferralApptDetail().getIReferralOutpatientEROD())));
			form.lyrSelect().tabAppInvs().btnTheatreEROD().setTooltip(getErodInfo(getLastEROD(form.getLocalContext().getReferralApptDetail().getIReferralTheatreEROD())));
		}	
		
		//WDEV-20944
		boolean isEmergencyReferral = Boolean.TRUE.equals(form.getLocalContext().getIsEmergencyReferral());
				
		// WDEV-18387 
		if (form.getLocalContext().getbDisplayRttCurrentStatusFieldsIsNotNull())
		{
        	form.lblRTTStatus().setEnabled(false);
        	form.lblRTTStatus().setVisible(form.getLocalContext().getbDisplayRttCurrentStatusFields() && !isEmergencyReferral);//WDEV-20944
        	form.lblRttCurrentStatus().setVisible(form.getLocalContext().getbDisplayRttCurrentStatusFields() && !isEmergencyReferral);//WDEV-20944
		}
		
		
		
		
		
		
		//WDEV-18425
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && !form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
		{		
			
			if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.lyrSelect().tabWaitingList().isVisible())
			{				
				//WDEV-18437
				
				
				boolean isReferralRejected = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_REJECTED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralDischarged = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.DISCHARGED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralWaitingOnGPReferral = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.WAITING_ON_GP_REFERRAL.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralProvisionalRejection = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.PROVISIONAL_REJECTION.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isOnwardReferralRequested = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.ONWARDREFERRALREQUESTED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralReceived = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_RECEIVED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isCabCancelld = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.CAB_CANCELLATION.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isCancelledByProvider = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralAwaitingTriage = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.AWAITING_TRIAGE.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralEOC = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(voCats.getCurrentStatus().getReferralStatus());				
				
				
				if (!isReferralRejected
						&&!isReferralDischarged
						&& !isReferralWaitingOnGPReferral
						&& !isReferralReceived
						&& !isCabCancelld
						&& !isCancelledByProvider
						&& !isReferralProvisionalRejection
						&& !isReferralAwaitingTriage
						&& !isReferralEOC
						&& !isOnwardReferralRequested
						&& !isReferralTransferred
						)
				{				
					form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem().setVisible(true);
					form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem().setVisible(true);
				}
			}		
		
				
		}
		//wdev-18457
		if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && !isReferralTransferred)		//wdev-19933
		{						
			form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem().setVisible(true);
		}		
		 
		PatientElectiveListForReferralDetailsVo electiveList = form.lyrSelect().tabWaitingList().grdWaitingList().getValue();
		
		boolean SurgicalOrEndoscopy = electiveList != null && (WaitingCardAdmissionType.ENDOSCOPY.equals(electiveList.getAdmissionType()) || WaitingCardAdmissionType.SURGICAL.equals(electiveList.getAdmissionType()));
		boolean notFitForSurgery = electiveList != null && YesNoUnknown.NO.equals(electiveList.getFitForSurgery());
		boolean requiresTCI = electiveList != null && electiveList.getElectiveListStatus() != null && WaitingListStatus.REQUIRES_TCI.equals(electiveList.getElectiveListStatus().getElectiveListStatus());
		boolean apptCancelled = electiveList != null && electiveList.getTCIDetails() != null && electiveList.getTCIDetails().getAppointment() != null && electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord() != null && Status_Reason.CANCELLED.equals(electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord().getStatus());
		boolean tciGivenAndApptCancelled = apptCancelled && electiveList != null && electiveList.getElectiveListStatus() != null && WaitingListStatus.TCI_GIVEN.equals(electiveList.getElectiveListStatus().getElectiveListStatus());
		
		boolean preAssessmentRequired = electiveList != null && Boolean.TRUE.equals(electiveList.getPreAssessmentRequired());
		boolean sourceOfReferralNationalScreening = electiveList != null && electiveList.getReferral() != null && electiveList.getReferral().getReferralDetails() != null &&  SourceOfReferral.NATIONAL_SCREENING.equals(electiveList.getReferral().getReferralDetails().getReferrerType());
		boolean referralUrgencyOrSourceOfReferral = electiveList != null && electiveList.getReferral() != null && (ReferralUrgency.TWO_WEEK_WAIT.equals(electiveList.getReferral().getUrgency()) || ReferralUrgency.CONSULTANT_UPGRADE.equals(electiveList.getReferral().getUrgency()) || sourceOfReferralNationalScreening );
		boolean preAssessmentCompletionExemptService = electiveList != null && electiveList.getReferral() != null && electiveList.getReferral().getReferralDetails() != null && electiveList.getReferral().getReferralDetails().getService() != null && Boolean.TRUE.equals(electiveList.getReferral().getReferralDetails().getService().getIsPreAssessmentCompletionExempt());
		boolean isReferralAccepted = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_ACCEPTED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isRemoved = electiveList != null && electiveList.getElectiveListStatus() != null && WaitingListStatus.REMOVED.equals(electiveList.getElectiveListStatus().getElectiveListStatus());
		
		boolean hasAppointment = electiveList != null && 
														((electiveList.getTCIDetails() != null && electiveList.getTCIDetails().getAppointment() != null)
															|| (electiveList.getTheatreAppointment() != null && electiveList.getTheatreAppointment().getCurrentStatusRecord() != null && !Status_Reason.CANCELLED.equals(electiveList.getTheatreAppointment().getCurrentStatusRecord().getStatus()) && appointmentIsInTheFuture(electiveList.getTheatreAppointment())));
		
		boolean appointmentCancelledOrCompleted = electiveList != null && electiveList.getTCIDetails() != null && electiveList.getTCIDetails().getAppointment() != null && electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord() != null
													&& Status_Reason.CANCELLED.equals(electiveList.getTCIDetails().getAppointment().getCurrentStatusRecord().getStatus());
		
		boolean requiresVetting = electiveList != null && Boolean.TRUE.equals(electiveList.getRequiresVetting()); //WDEV-22401
		
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem().setVisible((!icpCompleted && Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()) && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue())
																												&& (!hasAppointment || appointmentCancelledOrCompleted) && !notFitForSurgery && !isRemoved
																												&&	(
																														(SurgicalOrEndoscopy  && (requiresTCI || tciGivenAndApptCancelled))
																														||	(preAssessmentRequired && (preAssessmentCompletionExemptService || referralUrgencyOrSourceOfReferral))
																													)
																												&& !requiresVetting //WDEV-22401
																											);
		
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem().setEnabled(true);//WDEV-18722
		
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuPATIENT_TREATED_AS_AN_EMERGENCYItem().setVisible(electiveList != null && !electiveList.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED));//WDEV-22476
		
		boolean isPatientRemovedForOtherReasons = electiveList != null 
		&& electiveList.getElectiveListStatus() != null
		&& (WaitingListStatus.REMOVED).equals(electiveList.getElectiveListStatus().getElectiveListStatus())
		&& (ElectiveListStatusReason.PATIENT_REMOVED_FOR_OTHER_REASONS).equals(electiveList.getElectiveListStatus().getRemovalReason());
		
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuUNDO_REMOVALItem().setVisible(isPatientRemovedForOtherReasons);
		
		form.lyrSelect().tabAppInvs().btnAllConsultationActivityBooked().setVisible(Boolean.TRUE.equals(voCats.getConsultationActivityRequired()) && hasOPAsBooked());//WDEV-20643 //WDEV-21189
		form.lyrSelect().tabAppInvs().btnViewTriageOutcome().setVisible(form.getLocalContext().getReferralApptDetail() != null && form.getLocalContext().getReferralApptDetail().getIReferralApptDetailTriageOutcome() != null);
		
		boolean appointmentOpened = form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue() != null && FutureAppointmentStatus.OPEN.equals(form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue().getCurrentStatus().getPendingStatus());
		
		form.getContextMenus().Scheduling.hideAllFutureAppointmentWorklistMenuItems();
		
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem().setVisible(isReferralAccepted);//WDEV-21210
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistBOOK_APPOINTMENTItem().setVisible(appointmentOpened);
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistREMOVEItem().setVisible(appointmentOpened);
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem().setVisible(appointmentOpened);
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistVIEW_DETAILSItem().setVisible(form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue() != null);
		
		form.lyrSelect().tabFutureAppointments().btnBookFutureAppt().setVisible(appointmentOpened);
		
		//WDEV-20944
		form.lblRTTBreachDateLabel().setVisible(!isEmergencyReferral);
		form.lblRTTBreachDate().setVisible(!isEmergencyReferral);
		form.lbl1stOPKPIDateLabel().setVisible(!isEmergencyReferral && Boolean.TRUE.equals(form.getLocalContext().gethasEndDateKPI()));		//wdev-20946
		form.lbl1stOPKPIDate().setVisible(!isEmergencyReferral && Boolean.TRUE.equals(form.getLocalContext().gethasEndDateKPI()));			//wdev-20946
		form.lbl31DayTargetLabel().setVisible(!isEmergencyReferral);
		form.lbl31DayTarget().setVisible(!isEmergencyReferral);
		form.lbl62DayTargetLabel().setVisible(!isEmergencyReferral);
		form.lbl62DayTarget().setVisible(!isEmergencyReferral);
		
		form.getContextMenus().RefMan.hideAllPendingEmergencyTheatreMenuItems();
		
		PendingEmergencyTheatreAppointmentVo pendingEmergencyAdmision = form.lyrSelect().tabPET().grdPET().getValue();
		
		boolean statusRemoved = pendingEmergencyAdmision != null && PendingEmergencyTheatreStatus.REMOVED.equals(pendingEmergencyAdmision.getCurrentStatus());
		boolean noAppointmentBooked = pendingEmergencyAdmision != null && pendingEmergencyAdmision.getTheatreAppointmentBooked() == null;
		
		form.getContextMenus().RefMan.getPendingEmergencyTheatreVIEW_EDIT_EMERGENCY_THEATREItem().setVisible(pendingEmergencyAdmision != null);
		form.getContextMenus().RefMan.getPendingEmergencyTheatreBOOK_EMERGENCY_THEATREItem().setVisible(pendingEmergencyAdmision != null && !statusRemoved && noAppointmentBooked);
		form.getContextMenus().RefMan.getPendingEmergencyTheatreREMOVE_EMERGENCY_THEATREItem().setVisible(pendingEmergencyAdmision != null && !statusRemoved);
		
		form.lyrSelect().tabAppInvs().btnAddToPET().setVisible(Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()));
		
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentPRINTItem().setVisible(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null);
		
		//WDEV-22921
		ReferralAppointmentDetailsBookingAppointmentVo appointment = form.lyrSelect().tabAppInvs().grdAppts().getValue();
		boolean hasAppointmentOutcome = appointment != null && appointment.getOutcome() != null;
		boolean apptStatusDNA = appointment != null && appointment.getApptStatus() != null && Status_Reason.DNA.getID() == appointment.getApptStatus().getID();
		boolean apptStatusArrival = appointment != null && appointment.getApptStatus() != null && Status_Reason.ARRIVAL.getID() == appointment.getApptStatus().getID();
		boolean apptStatusSeen =  appointment != null && appointment.getApptStatus() != null && Status_Reason.SEEN.getID() == appointment.getApptStatus().getID();
		boolean apptStatusNotSeen = appointment != null && appointment.getApptStatus() != null && Status_Reason.NOT_SEEN.getID() == appointment.getApptStatus().getID();
		boolean hasElectiveList = form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null;
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(appointment);
		
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentVIEW_APPOINTMENT_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue()) && (apptStatusDNA || apptStatusArrival || apptStatusSeen || apptStatusNotSeen) && hasAppointmentOutcome && !hasElectiveList);
		//end WDEV-22921
		
		form.lyrSelect().tabAppInvs().btnRedirectedCAB().setVisible(voCats != null && Boolean.TRUE.equals(voCats.getRedirectCAB()));
		
	}
	//WDEV-23354
	private void printReport()
	{
		if(form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null)
		{
			PatientElectiveListForReferralDetailsVo electiveList = form.lyrSelect().tabWaitingList().grdWaitingList().getValue();
			form.getGlobalContext().Core.setImsReportId(TCI_DETAILS_IMSID);
			engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {ELECTIVE_LIST, electiveList.getID_PatientElectiveList()});
		}
	}
	//WDEV-23354 - ends here
	
	private boolean appointmentIsInTheFuture(Booking_AppointmentLiteVo theatreAppointment)
	{
		if(theatreAppointment == null)
			return false;
		
		if(theatreAppointment.getAppointmentDate() == null || theatreAppointment.getApptStartTime() == null)
			return false;
		
		DateTime apptDateTime = new DateTime(theatreAppointment.getAppointmentDate(), theatreAppointment.getApptStartTime());
		
		if(apptDateTime.isGreaterThan(new DateTime()))
			return true;
		
		return false;
	}

	private boolean hasOPAsBooked()
	{
		ReferralAppointmentDetailsBookingAppointmentVoCollection appts = form.lyrSelect().tabAppInvs().grdAppts().getValues();
		for (ReferralAppointmentDetailsBookingAppointmentVo appt : appts)
		{
			if (appt.getTheatreBooking() == null)
				return true;
		}
		return false;
	}

	private ReferralERODVo getLastEROD(ReferralERODVoCollection referralERODVoCollection)
	{
		if(referralERODVoCollection == null || referralERODVoCollection.size() == 0)
			return null;
		
		int sequence = 0;
		ReferralERODVo lastReferralEROD = null;
		
		for(int i=0; i<referralERODVoCollection.size(); i++)
		{
			if(referralERODVoCollection.get(i) == null)
				continue;
			
			if(referralERODVoCollection.get(i).getSequence() != null && sequence < referralERODVoCollection.get(i).getSequence())
			{
				sequence = referralERODVoCollection.get(i).getSequence();
				lastReferralEROD = referralERODVoCollection.get(i);
			}
		}
		
		return lastReferralEROD;
	}

	private String getErodInfo(ReferralERODVo iReferralOutpatientEROD)
	{
		if(iReferralOutpatientEROD == null)
			return null;
		
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append("<b>Earliest Date Offered: </b>" + iReferralOutpatientEROD.getERODDate1());
		
		if(iReferralOutpatientEROD.getERODDate2() != null)
		{
			tooltip.append("<br><b>Second Date Offered: </b>" + iReferralOutpatientEROD.getERODDate2());
		}
		
		if(iReferralOutpatientEROD.getPatAvailFromDate() != null)
		{
			tooltip.append("<br><b>Patient Available from Date: </b>" + iReferralOutpatientEROD.getPatAvailFromDate());
		}
		
		tooltip.append("<br><b>EROD Type: </b>" + iReferralOutpatientEROD.getERODType().getText());
		
		if(iReferralOutpatientEROD.getAppointment() != null)
		{
			tooltip.append("<br><b>Appointment Date: </b>" + (iReferralOutpatientEROD.getAppointment() != null ? iReferralOutpatientEROD.getAppointment().getAppointmentDate() : ""));
			tooltip.append("<br><b>Clinic Name: </b>" + ((iReferralOutpatientEROD.getAppointment() != null && iReferralOutpatientEROD.getAppointment().getSession() != null) ? iReferralOutpatientEROD.getAppointment().getSession().getName() : ""));
		}
		
		return tooltip.toString();
	}

	/**
	 * Read Appointments grid and check if there are any booked appointments
	 */
	private boolean otherBookedAppointmentsExist()
	{
		for(int i =0; i<form.lyrSelect().tabAppInvs().grdAppts().getRows().size() ;i++)
		{
			grdApptsRow row = form.lyrSelect().tabAppInvs().grdAppts().getRows().get(i);
			ReferralAppointmentDetailsBookingAppointmentVo voAppt = row.getValue();
			if(isApptStatusEqual(voAppt, Status_Reason.BOOKED))
				return true;
		}
			
		return false;
	}

	private SpecimenWorkListItemLiteVo isPathologyAndSpecimenWorkListItemExists(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv)
	{
		if(voOrderInv == null)
			throw new CodingRuntimeException("voOrderInv is null in method isPathologyAndSpecimenWorkListItemExists");
		
		if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(Category.PATHOLOGY))
		{
			SpecimenWorkListItemLiteVoCollection voCollWorkList = form.getLocalContext().getCollectedWorkListItems();
			if(voCollWorkList != null)
			{
				for (SpecimenWorkListItemLiteVo voSpecimenWorkListItem : voCollWorkList)
				{
					if(voOrderInv.getSpecimenIsNotNull())
						if(voSpecimenWorkListItem.getSpecimenIsNotNull() && voSpecimenWorkListItem.getSpecimen().equals(voOrderInv.getSpecimen()))
							return voSpecimenWorkListItem;
				}
			}
		}
		return null;
	}

	private boolean isApptStatusEqual(ReferralAppointmentDetailsBookingAppointmentVo voAppt, Status_Reason status)
	{
		if(status == null)
			throw new CodingRuntimeException("status is null in method isApptStatusEqual");
		
		if(voAppt != null)
		{
			if(voAppt.getApptStatusIsNotNull())
			{
				if(voAppt.getApptStatus().equals(status))
					return true;
			}
		}
		
		return false;
	}

	private boolean isClinicalAndNoInterfaceAndDateIsNull(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv)
	{
		if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterfaceIsNotNull())
			if(voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL) && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterface() && voOrderInv.getAppointmentDate() == null)
				return true;
		
		return false;
		
	}

	private boolean isResultRejected(OrderInvestigationRefVo voInvRef) 
	{
		if (voInvRef == null)
			return false;
		
		ReferralAppointmentDetailsOrderInvestigationVo voInvt = findInv(voInvRef);
		if (voInvt.getOrdInvCurrentStatusIsNotNull()
			&& voInvt.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull()
			&& voInvt.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.REJECTED))
			return true;
		else
			return false;
	}

	private ReferralAppointmentDetailsOrderInvestigationVo findInv(OrderInvestigationRefVo voInvRef)
	{
		for(ReferralAppointmentDetailsOcsOrderVo voOrder : form.getLocalContext().getReferralApptDetail().getIReferralApptDetailInvestigations())
		{
			for(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv : voOrder.getInvestigations())
			{
				if (voOrderInv.getID_OrderInvestigation().equals(voInvRef.getID_OrderInvestigation()) )
					return voOrderInv;
			}
		}
		return null;
	}

	//	WDEV-13251
	private boolean hasInvestigationGotAResult(OrderInvestigationRefVo voInvRef) 
	{
		if (voInvRef == null)
			return false;
		
		ReferralAppointmentDetailsOrderInvestigationVo voInvt = findInv(voInvRef);
		
		if(voInvt == null)
			return false;
		
		if(voInvt.getResultDetailsIsNotNull() && voInvt.getResultDetails().getDocumentResultDetailsIsNotNull())  // WDEV-16224
			return true;
		
		return false;
	}
	
	private boolean isApptStatusEqual(ims.ocrr.orderingresults.vo.OrderInvestigationRefVo voInvRef, Status_Reason status)
	{
		if(status == null)
			throw new CodingRuntimeException("status is null in method isApptStatusEqual");

		//Find the Inv in the OrderInvAppts Collection, for this get the ReferrapApptDetailsBookingApptVo and its status
		if(voInvRef != null)
		{
			ReferralAppointmentDetailsBookingAppointmentVo voAppt = findApptForGivenInv(voInvRef);
			if(voAppt != null
				&& voAppt.getApptStatusIsNotNull()
				&& voAppt.getApptStatus().equals(status))
				return true;
		}
		
		return false;
	}

	private ReferralAppointmentDetailsBookingAppointmentVo findApptForGivenInv(OrderInvestigationRefVo voInvRef) 
	{
		for(OrderInvApptListVo voOrderInvAppt : form.getLocalContext().getReferralApptDetail().getIReferralApptDetailOrdInvAppts())
		{
			if (voOrderInvAppt.getOrderInvestigation().getID_OrderInvestigation().equals(voInvRef.getID_OrderInvestigation()))
			{
				for(ReferralAppointmentDetailsBookingAppointmentVo voAppt: form.getLocalContext().getReferralApptDetail().getIReferralApptDetailAppointments())
				{
					if (voAppt.getID_Booking_Appointment().equals(voOrderInvAppt.getAppointment().getID_Booking_Appointment()))
						return voAppt;
				}					
			}
		}
		return null;
	}

	private boolean doesItRequireReboot(ims.ocrr.orderingresults.vo.OrderInvestigationRefVo voInvRef)
	{
		//Find the Inv in the OrderInvAppts Collection, for this get the ReferrapApptDetailsBookingApptVo and its status
		if(voInvRef != null)
		{
			ReferralAppointmentDetailsBookingAppointmentVo voAppt = findApptForGivenInv(voInvRef);
			if(voAppt != null
				&& voAppt.getRequiresRebookIsNotNull()
				&& voAppt.getRequiresRebook())
				return true;
		}
		
		return false;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		form.getLocalContext().setWasElectiveListTab(null);
		
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				cancelAndRebook();	
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingAppointment(null);
			}
			form.getLocalContext().setApptToCancel(null);
		}
		else if(formName.equals(form.getForms().Core.CommentDialog) && DialogResult.OK.equals(result))//WDEV-23474
		{
			updateBookingComments();
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();
		}
		else if(formName.equals(form.getForms().OCRR.SelectAndOrderDialog) || formName.equals(form.getForms().RefMan.BookAppointmentDialog)
				|| formName.equals(form.getForms().RefMan.BookSpecimenAppointmentDialog) || formName.equals(form.getForms().OCRR.OrderSummaryDialog) 
				|| formName.equals(form.getForms().RefMan.BookTheatreDialog) || formName.equals(form.getForms().OCRR.ImportResultsDialog)
				|| formName.equals(form.getForms().RefMan.BookTheatreSlot) || formName.equals(form.getForms().RefMan.BookEmergencyTheatre) 
				|| formName.equals(form.getForms().OCRR.ResultDialog))				// WDEV-13683
		{
			//WDEV-21028
			if (formName.equals(form.getForms().RefMan.BookAppointmentDialog) && form.lyrSelect().tabFutureAppointments().isVisible() && form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentSaved()))
			{
				if (RequestToSchedule.OPA.equals(form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue().getRequestToSchedule()) || RequestToSchedule.OPA_AND_LINKED_DIAGNOSTICS.equals(form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue().getRequestToSchedule()))
					updateFutureAppointmentStatus(FutureAppointmentStatus.BOOKED);
			}
				
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();
			setActionedDNAedAndCancelledButtons();
		}
		else if(formName.equals(form.getForms().RefMan.EnterAppointmentDetails))
		{
			if(result.equals(DialogResult.OK))
			{
				ReferralAppointmentDetailsOrderInvestigationVo voOrderInv = form.lyrSelect().tabAppInvs().grdInvestigations().getValue();
				voOrderInv.setAppointmentDate( form.getGlobalContext().RefMan.EnterAppointmentDetails.getApptDate());
				try
				{
					domain.saveOrderInv(voOrderInv);
					domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral(),null);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}
			
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
				form.fireCustomControlValueChanged();	
					
				form.getGlobalContext().RefMan.EnterAppointmentDetails.setApptDate(null);
			}
		}
		else if(formName.equals(form.getForms().RefMan.BookedAppointments))
		{
			//WDEV-6787 point 2)
			if(result.equals(DialogResult.OK))
			{
				if(form.getGlobalContext().Rotherham.getAppointmentToLink() == null || form.lyrSelect().tabAppInvs().grdInvestigations().getValue() == null)
					throw new CodingRuntimeException("appt or inv not provide for 'change' appt process");
				
				OrderInvApptListVo voOrdInv = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getColOrdInvAppt();
				if(voOrdInv != null)
				{
					voOrdInv.setAppointment(form.getGlobalContext().Rotherham.getAppointmentToLink());
					try
					{
						domain.saveOrdInvApptAndUpdateCatsReferral(voOrdInv, form.getGlobalContext().RefMan.getCatsReferral());
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					}
				}
				
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
				form.fireCustomControlValueChanged();
				
				form.getGlobalContext().Rotherham.setAppointmentToLink(null);
			}
		}
		else if(formName.equals(form.getForms().RefMan.ERODDialog))
		{
			
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();
		}
		else if (formName.equals(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog))
		{
			if (DialogResult.OK.equals(result))
			{
				cancelTCI();
			}
				
			populateWaitingListGrid();
		}
		else if (formName.equals(form.getForms().RefMan.RemoveFromElectiveList))			//wdev-18365
		{
			if (DialogResult.OK.equals(result))
			{
				form.getLocalContext().setWasElectiveListTab(true);
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
				form.fireCustomControlValueChanged();
				setActionedDNAedAndCancelledButtons();
					
			}
			else
				form.getLocalContext().setWasElectiveListTab(null);
			
			
			populateWaitingListGrid();
		}
		else if (formName.equals(form.getForms().RefMan.NewElectiveListTCIErodDialog))
		{
				form.getLocalContext().setWasElectiveListTab(true);
				form.fireCustomControlValueChanged();
				populateWaitingListGrid();
				updateControlState();
		}
		//WDEV-21210
		else if (form.getForms().Scheduling.FutureAppointmentDetails.equals(formName)  && DialogResult.OK.equals(result))
		{
			saveFutureAppointmentDetails();
			populateFutureAppointmentsGrid();
		}
		else if (formName.equals(form.getForms().Scheduling.FutureAppointmentRemovalReason) && DialogResult.OK.equals(result))
		{
			updateFutureAppointmentStatus(FutureAppointmentStatus.REMOVED);

			populateFutureAppointmentsGrid();
		}		
		//WDEV-20535
		else if (formName.equals(form.getForms().Core.PDSDemographicsDialog))
		{
			bookTheatreAppt(true);
		}
		//WDEV-20535 ends here
		else if (formName.equals(form.getForms().RefMan.ReferralTriage))
		{
			if(DialogResult.ABORT.equals(result))
			{
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFERRALSTATUSCHANGED);
				form.fireCustomControlValueChanged();
			}
		}
		else if (formName.equals(form.getForms().RefMan.RemovePendingEmergencyTheatre) && DialogResult.OK.equals(result))
		{
			removePendingEmergencyTheatre(form.getGlobalContext().Scheduling.getPendingEmergencyTheatreRemoval());
		}
		else if (form.getForms().RefMan.AddEmergencyTheatre.equals(formName) && DialogResult.OK.equals(result))
		{
			populatePendingEmergencyTheatreGrid();
			updateControlState();
		}
		else if( formName.equals(form.getForms().RefMan.ElectiveListAddLaterDialog))	//wdev-21043
		{
			if( DialogResult.OK.equals(result))
			{
				PatientElectiveListAddLaterVo electiveListLater = form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo();
				try
				{
					domain.saveWaitingListCard(electiveListLater);
				}
				catch (DomainInterfaceException e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}
				
				populateWaitingListGrid();
			}
			
			if (form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo() == null)
			{
				form.lyrSelect().tabWaitingList().grdWaitingList().setValue(null);
			}

			updateControlState();
		}
		else if(formName.equals(form.getForms().RefMan.ElectiveListDetails))
		{
			populateWaitingListGrid();
			updateControlState();
		}
		else if(formName.equals(form.getForms().RefMan.UndoRemovalFromWaitingList))
		{
			populateWaitingListGrid();
			updateControlState();
		}
		//WDEV-22921
		else if(formName.equals(form.getForms().Scheduling.AppointmentOutcomeDialog))
		{
			if( DialogResult.OK.equals(result))
			{
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
    			form.fireCustomControlValueChanged();
    			updateControlState();
			}
		}
	}

	private void updateBookingComments()//WDEV-23474
	{
		String commentDialogString = form.getGlobalContext().Core.getCommentDialogString();
		
		ReferralAppointmentDetailsBookingAppointmentVo voApp = form.lyrSelect().tabAppInvs().grdAppts().getSelectedRow().getValue();
		try 
		{
			domain.updateBookingComment(voApp, commentDialogString);
			form.getGlobalContext().Core.setCommentDialogString(null);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
	}

	private void saveFutureAppointmentDetails()
	{
		if (form.getGlobalContext().Scheduling.getFutureAppointmentDetails() == null)
			return;

		FutureAppointmentDetailsVo futureApptToSave = form.getGlobalContext().Scheduling.getFutureAppointmentDetails();
		
		String[] errors = futureApptToSave.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}		
		try
		{
			domain.saveFutureAppointment(futureApptToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}		
	}

	private void removePendingEmergencyTheatre(PendingEmergencyTheatreRemovalVo pendingEmergencyTheatreRemoval)
	{
		if (pendingEmergencyTheatreRemoval == null || form.lyrSelect().tabPET().grdPET().getValue() == null)
			return;
		
		PendingEmergencyTheatreAppointmentVo selectedRecord = form.lyrSelect().tabPET().grdPET().getValue();
		PendingEmergencyTheatreVo pendingEmergencyTheatre = domain.getPendingEmergencyTheatre(selectedRecord);
		
		if (selectedRecord.getVersion_PendingEmergencyTheatre() != pendingEmergencyTheatre.getVersion_PendingEmergencyTheatre())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populatePendingEmergencyTheatreGrid();
			updateControlState();
			return;
		}
		
		pendingEmergencyTheatre.setCurrentStatus(PendingEmergencyTheatreStatus.REMOVED);
		pendingEmergencyTheatre.setRemovalDateTime(pendingEmergencyTheatreRemoval.getRemovalDateTime());
		pendingEmergencyTheatre.setRemovalReason(pendingEmergencyTheatreRemoval.getRemovalReason());
		pendingEmergencyTheatre.setRemovedBy(pendingEmergencyTheatreRemoval.getRemovalBy());
		
		try
		{
			domain.savePendingEmergencyTheatre(pendingEmergencyTheatre);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		populatePendingEmergencyTheatreGrid();
		updateControlState();
		
	}

	private void updateFutureAppointmentStatus(FutureAppointmentStatus appointmentStatus)
	{
		if (form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue() == null)
			return;

		FutureAppointmentListVo futureAppt = form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue();

		FutureAppointmentDetailsVo updatedFutureAppt = domain.getFutureAppointmentDetails(futureAppt);

		if (futureAppt.getVersion_FutureAppointmentDetails() != updatedFutureAppt.getVersion_FutureAppointmentDetails())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		FutureAppointmentStatusVo status = new FutureAppointmentStatusVo();
		status.setPendingStatus(appointmentStatus);
		status.setStatusDateTime(new DateTime());

		Object mosUser = domain.getMosUser();

		if (mosUser instanceof MemberOfStaffRefVo)
		{
			status.setAuthoringUser((MemberOfStaffRefVo) mosUser);
		}

		if (FutureAppointmentStatus.REMOVED.equals(appointmentStatus) && form.getGlobalContext().Scheduling.getFutureAppointmentRemoval() != null)
		{
			status.setRemovalReason(form.getGlobalContext().Scheduling.getFutureAppointmentRemoval().getReason());
			status.setStatusComment(form.getGlobalContext().Scheduling.getFutureAppointmentRemoval().getComment());
		}
		
		updatedFutureAppt.setCurrentStatus(status);

		if (updatedFutureAppt.getStatusHistory() == null)
			updatedFutureAppt.setStatusHistory(new FutureAppointmentStatusVoCollection());

		updatedFutureAppt.getStatusHistory().add(status);

		String[] errors = updatedFutureAppt.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try
		{
			domain.saveFutureAppointment(updatedFutureAppt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
	}
	
	private void cancelAndRebook()
	{
		System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook Started.");
		
		System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - Appointment Cancelled started.");
		
		Booking_AppointmentVo voAppt = cancelAppt(false);
		if(voAppt == null)
		{
			System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - ERROR: Appointment Cancelled finish with appointment null.");
			setActionedDNAedAndCancelledButtons();
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
			return;
		}
		
		System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - Appointment Cancelled finish.");
		
		setActionedDNAedAndCancelledButtons();
		
		System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - Rebook Appointment started.");
		
		// rebook
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
		{	
			int repeats = 0;

			do
			{
				System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - Opening rebook dialog. Attempt (" + (repeats + 1) + ")");
				try
				{
					if(voAppt.getTheatreBookingIsNotNull())
					{
						System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - Opening rebook theatre dialog. Attempt (" + (repeats + 1) + ")");
						rebookTheatreAppt(domain.getTheatreAppointment(voAppt), null);
					}
					else
					{
						System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - Opening rebook appointment dialog. Attempt (" + (repeats + 1) + ")");
						rebookAppt(voAppt, null);
					}
					

					return;
				}
				catch (Exception ex)
				{
					System.out.println(domain.getLoggedInUser().getHostName() + "DEBUG: Cancel and Rebook - ERROR when opening rebook dialog " + Arrays.toString(ex.getStackTrace()));
					repeats++;
				}
			}
			while (repeats < 3);
		}
		
		System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook - Rebook Appointment finished.");
		
		form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
		form.fireCustomControlValueChanged();
		
		System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel and Rebook Started.");
	}
	
	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation) 
	{
		System.out.println(domain.getLoggedInUser().getHostName() + " DEBUG: Cancel Appointment - started.");
		
		int repeats = 0;

		do
		{
			try 
			{
				ReferralAppointmentDetailsBookingAppointmentVo voAppt = form.getLocalContext().getApptToCancel();
		
				if(voAppt == null)
				{
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exit point 1 (The appointment is null)");
					return null;
				}

				Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);
				boolean isTheatreAppt = voApptFull.getTheatreBooking() != null;

				if (voApptFull.getApptStatusIsNotNull()
						&& voAppt.getApptStatusIsNotNull()
						&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
				{
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exit point 2 (The appointment status had been changed.)");
					engine.showMessage("The Status of the appointment has already been changed.");
					return null;
				}

				Appointment_StatusVo cancelApptStatusData = form.getGlobalContext().Scheduling.getApptCancelStatus();
				if (form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Changing appointment status.");

					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					// wdev-6034
					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptStatus.setSession(voApptFull.getSessionIsNotNull() ? voApptFull.getSession() : null); //WDEV-23185
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));

					voApptFull.setApptStatusReas(cancelApptStatusData.getStatusReason());
					if(cancelApptStatusData.getRebookSelectedIsNotNull())
						voApptFull.setRequiresRebook(cancelApptStatusData.getRebookSelected());
					//WDEV-19445
					if (Boolean.TRUE.equals(cancelApptStatusData.getCancelTCI()) && Boolean.TRUE.equals(cancelApptStatusData.getCancelledForNonMedicalReason()) && isTheatreAppt && Status_Reason.HOSPITALCANCELLED.equals(cancelApptStatusData.getStatusReason()) && cancelApptStatusData.getStatusChangeDateTimeIsNotNull() && cancelApptStatusData.getStatusChangeDateTime().getDate().equals(cancelApptStatusData.getTCIDate()))
					{
						System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Apply 28 days rule");
						voApptFull.setDate28DayRuleBreach(new DateTime(voAppt.getAppointmentDate(), voAppt.getApptStartTime()).addDays(28).getDate());					
					}

					if(voApptFull.getTheatreBooking()  == null && Status_Reason.HOSPITALCANCELLED.equals(cancelApptStatusData.getStatusReason()))
					{
						System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Hospital cancelled");
						int numProviderCancellations = 0;

						if(voApptFull.getNumProviderCancellations() != null)
						{
							numProviderCancellations = voApptFull.getNumProviderCancellations();
						}
						numProviderCancellations += 1;

						voApptFull.setNumProviderCancellations(numProviderCancellations);
					}

					if(voApptFull.getTheatreBooking()  == null && Status_Reason.PATIENTCANCELLED.equals(cancelApptStatusData.getStatusReason()))
					{
						System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Patient cancelled");
						int numPatientCancellations = 0;

						if(voApptFull.getNumPatientCancellations() != null)
						{
							numPatientCancellations = voApptFull.getNumPatientCancellations();
						}
						numPatientCancellations += 1;

						voApptFull.setNumPatientCancellations(numPatientCancellations);
					}
				}

				if (voApptFull.getSessionSlotIsNotNull() && voApptFull.getSessionIsNotNull()) //WDEV-19379
					voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus()); //WDEV-18940 

				voApptFull.setLinkedApptsToBeCancelled(form.getGlobalContext().RefMan.getLinkedAppointmentsCollection());//WDEV-19543

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exit point 3 (Validation errors.)");
					return null;
				}

				if (tciCancelation)
				{
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Cancel TCI appointment." + voApptFull.getApptStatus());
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
					
					if (voApptFull == null)
					{
						System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - ERROR: Cancel TCI appointment returned NULL.");
					}
				}
				else
				{
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Cancel non-TCI appointment.");
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Referral Appointment Details");

					if (voApptFull == null)
					{
						System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - ERROR: Cancel non-TCI appointment returned NULL.");
					}
				}

				System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Update CatsReferral Additional Inv Status.");
				domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull);

				if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(cancelApptStatusData.getCancelTCI())) //WDEV-18249
				{
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Cancel TCI And Referral EROD.");
					domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, cancelApptStatusData.getCancellationReason(), cancelApptStatusData.getComment(), Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), cancelApptStatusData.getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
				}

				System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exit point 4 (Succesfull execution).");
				return voApptFull;
			} 
			catch (StaleObjectException e) 
			{
				System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exception Stale Object Exception.");
				if (e.getStaleObject() instanceof SessionTheatreProceduresRemanining)
				{
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exception Stale Object Exception - Session Theatre Procedures Remaining.");
					repeats++;
				}
				else
				{
					System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exception Stale Object Exception." + e.getStaleObject());
    				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    				return null;
				}
			}
			catch (DomainInterfaceException e)
			{
				System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Domain Interface Exception.");
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			catch (Exception e)
			{
				System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Any other Exceptions.");
				repeats++;
				e.printStackTrace();
				
				if (repeats >= 3 && e instanceof RuntimeException)
				{
					throw (RuntimeException) e;
				}
			}
		}
		while (repeats < 3);

		System.out.println("DEBUG " + domain.getLoggedInUser().getHostName() + ": Cancel Appointment - Exit after 3 attemps.");
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
		return null;
	}
	
	/**
	 * @param status
	 * @param appointment
	 * @return
	 */
	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		//WDEV-11887
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}
		
		voApptStatus.setSession(voAppt.getSessionIsNotNull() ? voAppt.getSession() : null); //WDEV-23185

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	private boolean clinicalInvestigationExists() {
		
		IReferralApptDetail iReferralApptDetail = form.getLocalContext().getReferralApptDetail();
		if(iReferralApptDetail != null && iReferralApptDetail.getIReferralApptDetailInvestigations() != null)
		{
			for(ReferralAppointmentDetailsOcsOrderVo voOrder : iReferralApptDetail.getIReferralApptDetailInvestigations())
			{
				for(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv : voOrder.getInvestigations())
				{
					if(configCategory(voOrderInv))
						return true;
				}
			}
		}
				
		return false;
	}

	private boolean configCategory(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv) {
		ImportResultsConfigVo voImportResultsConfig = form.getLocalContext().getImportResultsConfigVo();
		
		if(voImportResultsConfig!=null)
			for (int i = 0 ; i < voImportResultsConfig.getCategories().size() ; i++)
			{
				if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && 
					voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && 
					 voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(voImportResultsConfig.getCategories().get(i)))
					
						return true;
			}
		
		return false;
	}

	private void setActionedDNAedAndCancelledButtons() 
	{
		form.lyrSelect().tabAppInvs().btnActioned().setVisible(false);
		//form.lyrSelect().tabAppInvs().btnDNAReviewed().setVisible(false);
		//form.lyrSelect().tabAppInvs().btnCancelReviewed().setVisible(false);

		CatsReferralVo voRefWizard = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRefWizard.getHasRejectedInvIsNotNull()
				&& voRefWizard.getHasRejectedInv().booleanValue() )
		{
			form.lyrSelect().tabAppInvs().btnActioned().setEnabled(true);
			form.lyrSelect().tabAppInvs().btnActioned().setVisible(true);
		}
		
		/* WDEV-22375
		if (voRefWizard.getHasDNAApptsForReviewIsNotNull()
			&& voRefWizard.getHasDNAApptsForReview().booleanValue()
			&& engine.hasRight(AppRight.CAN_REVIEW_AND_REMOVE_DNA_APPTS))
		{
			form.lyrSelect().tabAppInvs().btnDNAReviewed().setEnabled(true);
			form.lyrSelect().tabAppInvs().btnDNAReviewed().setVisible(true);
		}
		if (voRefWizard.getHasCancelledApptsForReviewIsNotNull()
			&& voRefWizard.getHasCancelledApptsForReview().booleanValue()
			&& engine.hasRight(AppRight.CAN_REVIEW_AND_REMOVE_CANCELLED_APPTS))
		{
			form.lyrSelect().tabAppInvs().btnCancelReviewed().setEnabled(true);
			form.lyrSelect().tabAppInvs().btnCancelReviewed().setVisible(true);
		}
		*/
		
		//WDEV-18380
		form.getLocalContext().setReferralCancelledByProvider(voRefWizard.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(voRefWizard.getCurrentStatus().getReferralStatus()));
	}
	
	protected void onBtnImportResultClick() throws PresentationLogicException
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().OCRR.setReferralAppointmentDetailsOcsOrderVoCollection(form.getLocalContext().getReferralApptDetail().getIReferralApptDetailInvestigations());
		engine.open(form.getForms().OCRR.ImportResultsDialog);
	}

	protected void onBtnBookApptClick() throws PresentationLogicException 
	{
		// WDEV-12159
		// Book a new appointment
		bookNewAppt();
	}

	/**
	 * WDEV-12159
	 * Function used to book a new appointment
	 */
	private void bookNewAppt()
	{
		// Reset global context
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().Scheduling.setWardAttendance(Boolean.FALSE);

		// Call function to book appointment
		bookAppt();
	}

	protected void onBtnOrderInvClick() throws PresentationLogicException 
	{
		orderInvestigation();	
	}

	private void orderInvestigation()
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().Rotherham.setAppointmentToLink(null);
		
		if(ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue())
		{
			boolean isTheatreAppt = form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getTheatreBooking() != null;
			if(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) && !isTheatreAppt)
				form.getGlobalContext().Rotherham.setAppointmentToLink(form.lyrSelect().tabAppInvs().grdAppts().getValue());
		}
			
		engine.open(form.getForms().OCRR.SelectAndOrderDialog);
	}

	@Override
	protected void onBtnActionedClick() throws PresentationLogicException 
	{
		updateCatsReferral(ACTIONED);
		form.lyrSelect().tabAppInvs().btnActioned().setVisible(false);
	}

	private boolean isReferralEndOfCare()
	{
		CatsReferralVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRef.getCurrentStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.END_OF_CARE))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			form.getLocalContext().setbReferralAccepted(Boolean.FALSE);
			form.lyrSelect().tabAppInvs().btnBookAppt().setVisible(Boolean.FALSE);
			form.lyrSelect().tabAppInvs().btnOrderInv().setVisible(Boolean.FALSE);
			
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFERRALSTATUSCHANGED);
			form.fireCustomControlValueChanged();	
			
			updateControlState();
			return true;
		}
		else
			return false;
	}
	private void updateCatsReferral(int action) 
	{
		CatsReferralVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (action == ACTIONED) 
		{
			if (voRef.getHasRejectedInv() == null)
				return;
			
			voRef.setHasRejectedInv(null);
		}
		
		/*
		if (action == DNAED) 
			voRef.setHasDNAApptsForReview(Boolean.FALSE);
		*/
		
		if (action == CANCELLED) 
		{
		
			for (int i = 0 ; voRef.getAppointmentsIsNotNull()&& i < voRef.getAppointments().size() ; i++)
			{
				if (voRef.getAppointments().get(i).getApptStatusIsNotNull()
					&& voRef.getAppointments().get(i).getApptStatus().equals(Status_Reason.CANCELLED))
						voRef.getAppointments().get(i).setWasReviewed(true);
			}
		}

		if (action == ALL_CONSULTATION_ACTIVITY_BOOKED && Boolean.TRUE.equals(voRef.getConsultationActivityRequired()))  //WDEV-20643
			voRef.setConsultationActivityRequired(Boolean.FALSE);
		
		if (action == PATIENT_DISCHARGED_BACK_TO_GP)
			voRef.setHasDNAorNotSeenActivity(false);
		
		if (action == COMPLETED_REBOOKING_SUBSEQUENT_ACTIVITY)
			voRef.setHasRebookingSubsequentActivity(false);
		
		if(action == REDIRECTED_IN_CAB)
		{
			voRef.setRedirectCAB(false);
		}
		
		String[] arrErrors = voRef.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try 
		{
			voRef = domain.saveCatsReferral(voRef);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
	}

	@Override
	protected void onGrdInvestigationsSelectionChanged() throws PresentationLogicException 
	{
		updateControlState();
	}

	@Override
	protected void onBtnBookSpecimenCollectClick() throws PresentationLogicException
	{		
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().RefMan.setSpecimenWorkListItem(null);
		engine.open(form.getForms().RefMan.BookSpecimenAppointmentDialog);
	}

	@Override
	protected void onBtnBookTheatreClick() throws PresentationLogicException
	{
		bookTheatreAppt(false); //WDEV-19479
	}

	// /////////////////////////////////////////
	// component interface methods below here //
	// /////////////////////////////////////////
	
	/**
	 * getValue
	 */
	public IReferralApptDetail getValue()
	{
		return form.getLocalContext().getReferralApptDetail();
	}

	/**
	 * setValue
	 */
	public void setValue(IReferralApptDetail iReferralApptDetail)
	{
		form.getLocalContext().setAction(null);
		form.getLocalContext().setAssociatedICPCompleted(domain.isReferralICPCompleted(form.getGlobalContext().RefMan.getCatsReferral()));
		if(! Boolean.TRUE.equals(form.getLocalContext().getWasElectiveListTab()))	//wdev-18365
			form.lyrSelect().showtabAppInvs();
		else
			form.getLocalContext().setWasElectiveListTab(null);
		
		// WDEV-18387 
		if (Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && Boolean.TRUE.equals(iReferralApptDetail.getIReferralApptDetailHasRTTClockImpact()))
			form.getLocalContext().setbDisplayRttCurrentStatusFields(true);
		else
			form.getLocalContext().setbDisplayRttCurrentStatusFields(false);
		
		form.getGlobalContext().RefMan.setCatsRefConsultationActivityRequired(iReferralApptDetail.getIReferralApptDetailConsultationActivityRequired()); //WDEV-20643
		
		form.getLocalContext().setIsEmergencyReferral(iReferralApptDetail.getIReferralIsEmergencyReferral()); 	//WDEV-20944
		form.getLocalContext().sethasEndDateKPI(iReferralApptDetail.getIReferralApptDetailEndDateKPI() != null);					//wdev-20946
		
		populateScreenFromData(iReferralApptDetail);
	}
	private boolean isAssociatedICPCompleted()
	{
		return form.getLocalContext().getAssociatedICPCompletedIsNotNull() && form.getLocalContext().getAssociatedICPCompleted().booleanValue();
	}
	public void initialise(Boolean canOrderInvestigations)
	{
		form.getLocalContext().setAssociatedICPCompleted(domain.isReferralICPCompleted(form.getGlobalContext().RefMan.getCatsReferral()));
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setReferralApptDetail(null);
		form.getLocalContext().setAction(null);
		form.getLocalContext().setbCanOrderInvestigation(canOrderInvestigations);
		form.getLocalContext().setbReferralAccepted(Boolean.FALSE);
		form.getLocalContext().setWasElectiveListTab(null);  //wdev-18365
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);//WDEV-19543
		
		//WDEV-18488 - moved to updateControlsState
		/*if(form.getMode() == FormMode.EDIT)
		{
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(!isAssociatedICPCompleted() && form.getLocalContext().getbReferralAccepted());
		}
		*/
		updateOrderInvestigationButtonState(canOrderInvestigations);
			
		form.getLocalContext().setImportResultsConfigVo(domain.getImportResultsConfig());
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnImportResult().setEnabled(form.getLocalContext().getbReferralAccepted() && clinicalInvestigationExists());
				
		clearScreen();
		setActionedDNAedAndCancelledButtons();
		updateControlState();
		
	}

	private void updateOrderInvestigationButtonState(Boolean canOrderInvestigations)
	{
		// WDEV-11117
		if (FormMode.EDIT.equals(form.getMode()))
		{
			if (Boolean.TRUE.equals(canOrderInvestigations))
				form.lyrSelect().tabAppInvs().btnOrderInv().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()));
			else
				form.lyrSelect().tabAppInvs().btnOrderInv().setEnabled(false);
		}
	}
	
	public String[] validate()
	{
		if(form.getLocalContext().getReferralApptDetailIsNotNull())
		{
			if(form.getLocalContext().getReferralApptDetail() instanceof ValueObject)
				return ((ValueObject)form.getLocalContext().getReferralApptDetail()).validate();
		}
		return null;
	}

	public ReferralAppointmentDetailsAction getAction()
	{
		return form.getLocalContext().getAction();
	}

	public void setReferralAccepted() 
	{
		form.getLocalContext().setbReferralAccepted(Boolean.TRUE);
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(!isAssociatedICPCompleted() && form.getLocalContext().getbReferralAccepted());
		
		updateOrderInvestigationButtonState(form.getLocalContext().getbCanOrderInvestigation());
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnImportResult().setEnabled(form.getLocalContext().getbReferralAccepted() && clinicalInvestigationExists());
		updateControlState();
	}

	public void enableBookingButton() 
	{
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(true);
	}

	public Booking_AppointmentRefVo getSelectedBookedAppointment()
	{
		if(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED))
			return form.lyrSelect().tabAppInvs().grdAppts().getValue();
		
		return null;	
	}	
	// /////////////////////////////////////////
	// end component interface methods here //
	// /////////////////////////////////////////

	/*
	@Override
	protected void onBtnCancelReviewedClick() throws PresentationLogicException 
	{
		updateCatsReferral(CANCELLED);
		form.lyrSelect().tabAppInvs().btnCancelReviewed().setVisible(false);
	}

	@Override
	protected void onBtnDNAReviewedClick() throws PresentationLogicException 
	{
		updateCatsReferral(DNAED);
		form.lyrSelect().tabAppInvs().btnDNAReviewed().setVisible(false);
	}
	*/

	@Override
	protected void onlyrSelectTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrSelect().tabWaitingList()))
		{
			populateWaitingListGrid();
		}
		//WDEV-18449 
		if (tab.equals(form.lyrSelect().tabAppInvs()))
		{
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.getGlobalContext().RefMan.setPatientElectiveListRef(null); //WDEV-19479
			form.fireCustomControlValueChanged();
		}
		
		if (tab.equals(form.lyrSelect().tabFutureAppointments()))
		{
			populateFutureAppointmentsGrid();
		}
		
		if (tab.equals(form.lyrSelect().tabPET()))
		{
			populatePendingEmergencyTheatreGrid();
			updateControlState();
		}
	}

	private void populatePendingEmergencyTheatreGrid()
	{
		form.getGlobalContext().Scheduling.setPendingEmergencyTheatre(null);
		form.lyrSelect().tabPET().grdPET().getRows().clear();

		PendingEmergencyTheatreAppointmentVoCollection pendingEmergencyTheatreRecords = domain.listPendingEmergencyTheatreRecords(form.getGlobalContext().RefMan.getCatsReferral());

		if (pendingEmergencyTheatreRecords == null)
			return;

		for (int i = 0; i < pendingEmergencyTheatreRecords.size(); i++)
		{
			
			PendingEmergencyTheatreAppointmentVo pendingEmergencyTheatre = pendingEmergencyTheatreRecords.get(i);
			
			if (pendingEmergencyTheatre == null)
				continue;
			
			grdPETRow newRow = form.lyrSelect().tabPET().grdPET().getRows().newRow();

			newRow.setColService(pendingEmergencyTheatre.getService() != null ? pendingEmergencyTheatre.getService().getServiceName() : "");
			newRow.setTooltipForColService(pendingEmergencyTheatre.getService() != null ? pendingEmergencyTheatre.getService().getServiceName() : "");
			
			String procedure = "";
			
			if (pendingEmergencyTheatre.getPrimaryProcedure() != null)
			{
				procedure += pendingEmergencyTheatre.getPrimaryProcedure().getProcedureName();
				
				if (pendingEmergencyTheatre.getSecondaryProcedure() != null)
				{
					procedure += ", " + pendingEmergencyTheatre.getSecondaryProcedure().getProcedureName();
				}
			}
			
			newRow.setColProcedures(procedure);
			newRow.setTooltipForColProcedures(procedure);
			
			newRow.setColStatus(pendingEmergencyTheatre.getCurrentStatus() != null ? pendingEmergencyTheatre.getCurrentStatus().getText() : "");
			newRow.setTooltipForColStatus(pendingEmergencyTheatre.getCurrentStatus() != null ? pendingEmergencyTheatre.getCurrentStatus().getText() : "");
			
			newRow.setColDateOnList(pendingEmergencyTheatre.getSystemInformation() != null ? pendingEmergencyTheatre.getSystemInformation().getCreationDateTime().getDate() : null);
			
			if (pendingEmergencyTheatre.getTheatreAppointmentBooked() != null)
			{
				newRow.setColApptDate(pendingEmergencyTheatre.getTheatreAppointmentBooked().getAppointmentDate());
				newRow.setColApptTime(pendingEmergencyTheatre.getTheatreAppointmentBooked().getApptStartTime());
			}
			
			newRow.setValue(pendingEmergencyTheatre);
		}
		
	}

	private void populateFutureAppointmentsGrid()
	{
		form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getRows().clear();

		FutureAppointmentListVoCollection futureAppts = domain.getFutureAppointmentsForReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (futureAppts == null)
		{
			updateControlState();
			return;
		}

		for (int i = 0; i < futureAppts.size(); i++)
		{
			
			FutureAppointmentListVo appt = futureAppts.get(i);
			
			grdFutureAppointmentsRow newRow = form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getRows().newRow();

			newRow.setColService(appt.getFirstApptService() != null ?  appt.getFirstApptService().getServiceName() : "");
			newRow.setTooltipForColService(appt.getFirstApptService() != null ?  appt.getFirstApptService().getServiceName() : "");
			
			newRow.setColFunction(appt.getFirstApptFunction() != null ?  appt.getFirstApptFunction().getText() : "");
			newRow.setTooltipForColFunction(appt.getFirstApptFunction() != null ?  appt.getFirstApptFunction().getText() : "");
			
			if(appt.getRequestToScheduleIsNotNull() && RequestToSchedule.RECURRING_APPOINTMENTS.equals(appt.getRequestToSchedule()))//wdev-21193
			{
				newRow.setColApptReqIn("Recurring");
				newRow.setTooltipForColApptReqIn("Recurring");
			}
			else if (appt.getFirstApptPeriodValue() != null && appt.getFirstApptPeriodType() != null)
			{
				newRow.setColApptReqIn(appt.getFirstApptPeriodValue().toString() + "  " + appt.getFirstApptPeriodType().getText());
				newRow.setTooltipForColApptReqIn(appt.getFirstApptPeriodValue().toString() + "  " + appt.getFirstApptPeriodType().getText());
			}

			Date today = new Date();
			
			if (appt.getStartingWeekIsNotNull())//wdev-21193
			{
				newRow.setColApptReqDate(appt.getStartingWeekIsNotNull() ?  appt.getStartingWeek().toString() : "");
				newRow.setTooltipForColApptReqDate(appt.getFirstApptFutureApptByDate() != null ?  "Starting week commencing: " + appt.getFirstApptFutureApptByDate().toString() : "");
			}
			else
			{
				newRow.setColApptReqDate(appt.getFirstApptFutureApptByDate() != null ?  appt.getFirstApptFutureApptByDate().toString() : "");
				newRow.setTooltipForColApptReqDate(appt.getFirstApptFutureApptByDate() != null ?  appt.getFirstApptFutureApptByDate().toString() : "");
			}

			newRow.setColDelay(appt.getFirstApptFutureApptByDate() != null ? Long.toString(Date.daysBetween(appt.getFirstApptFutureApptByDate(), today)) + " days" : "");
			newRow.setTooltipForColDelay(appt.getFirstApptFutureApptByDate() != null ? Long.toString(Date.daysBetween(appt.getFirstApptFutureApptByDate(), today)) + " days" : "");
			
			String toSee = getToSee(appt);
			
			newRow.setColToSee(toSee);
			newRow.setTooltipForColToSee(toSee);
			
			if (appt.getCurrentStatus() != null && appt.getCurrentStatus().getPendingStatus() != null)
			{
				String status = appt.getCurrentStatus().getPendingStatus().getText();
				newRow.setColStatus(status);
				
				if (FutureAppointmentStatus.REMOVED.equals(appt.getCurrentStatus().getPendingStatus()) && appt.getCurrentStatus().getRemovalReason() != null)
					status += "<br> <b> Removal Reason </b>: " +appt.getCurrentStatus().getRemovalReason().getText();
				
				newRow.setTooltipForColStatus(status);
			}
			
			newRow.setValue(futureAppts.get(i));
		}
		
		updateControlState();
		
	}

	private String getToSee(FutureAppointmentListVo appt)
	{
		if (appt == null || appt.getFirstApptToSee() == null)
			return "";
		
		if (Boolean.TRUE.equals(appt.getFirstApptToSee().getConsultant()))
			return CONSULTANT;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getAssociateSpecialist()))
			return ASSOCIATE_SPECIALIST;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getSPR()))
			return SPR;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getAnyDoctorToSee()))
			return ANY_DOCTOR_TO_SEE;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getOtherHCP()))
			return appt.getFirstApptToSee().getOtherHCPValue() != null ? appt.getFirstApptToSee().getOtherHCPValue().getText() : "";
		
		return "";
	}
	
	private void populateWaitingListGrid()
	{
		form.lyrSelect().tabWaitingList().grdWaitingList().getRows().clear();

		PatientElectiveListForReferralDetailsVoCollection waitingList = domain.getWaitingListForReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (waitingList == null)
		{
			updateControlState();
			return;
		}

		for (int i = 0; i < waitingList.size(); i++)
		{
			StringBuffer tooltip = new StringBuffer(); //WDEV-20732
			
			grdWaitingListRow newRow = form.lyrSelect().tabWaitingList().grdWaitingList().getRows().newRow();

			newRow.setColName(waitingList.get(i).getElectiveList() != null ? waitingList.get(i).getElectiveList().getWaitingListName() : "");
			newRow.setProcedure(waitingList.get(i) != null ? waitingList.get(i).getPrimaryProcedureIsNotNull()? waitingList.get(i).getPrimaryProcedure().getProcedureName() : "" : "");
			newRow.setColStatus(waitingList.get(i).getElectiveListStatus() != null && waitingList.get(i).getElectiveListStatus().getElectiveListStatus() != null ? waitingList.get(i).getElectiveListStatus().getElectiveListStatus().getText() : "");
			
			tooltip.append(waitingList.get(i).getElectiveListStatus() != null && waitingList.get(i).getElectiveListStatus().getElectiveListStatus() != null && WaitingListStatus.REMOVED.equals(waitingList.get(i).getElectiveListStatus().getElectiveListStatus())? "<b>Status: </b>" +waitingList.get(i).getElectiveListStatus().getElectiveListStatus().getText()+ "<br><b> Removal Reason: </b>" +(waitingList.get(i).getElectiveListStatus().getRemovalReasonIsNotNull() ? waitingList.get(i).getElectiveListStatus().getRemovalReason(): "")  : "");
			tooltip.append(waitingList.get(i).getTCIDetails() != null && waitingList.get(i).getTCIDetails().getRTTBreachReason() != null ? "<br><b>Breach Reason: </b>" + waitingList.get(i).getTCIDetails().getRTTBreachReason().getText() : "");
			
			newRow.setColDateOnList(waitingList.get(i).getDateOnList() != null ? waitingList.get(i).getDateOnList().toString() : "");

			if (waitingList.get(i).getTCIDetails() != null)
			{
				newRow.setColTciDate(waitingList.get(i).getTCIDetails() != null && waitingList.get(i).getTCIDetails().getTCIDateIsNotNull() ? waitingList.get(i).getTCIDetails().getTCIDate().toString() : "");
				newRow.setColTciTime(waitingList.get(i).getTCIDetails() != null && waitingList.get(i).getTCIDetails().getTCITimeIsNotNull() ? waitingList.get(i).getTCIDetails().getTCITime().toString() : "");				
			}
			
			if (Rule28DayStatus.ACTIVE.equals(waitingList.get(i).getRule28DayStatus()))
			{
				newRow.setColImage(form.getImages().RefMan.Appointment16);
				
				if(tooltip.length() > 0)
					tooltip.append("<br>");
				
				tooltip.append("TCI was cancelled for a Non-Medical reason and requires a TCI to be assigned soon.");
			}
			
			newRow.setTooltip(tooltip.length() > 0 ? tooltip.toString() : "");
			newRow.setValue(waitingList.get(i));
		}
		
		updateControlState();
	}

	
	@Override
	protected void onGrdWaitingListSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		
		//WDEV-18391
		form.getGlobalContext().RefMan.setPatientElectiveListRef(form.lyrSelect().tabWaitingList().grdWaitingList().getValue());
		updateControlState();
	}

	private void cancelTCI()
	{
		//WDEV-18449 -- start
		ReferralAppointmentDetailsBookingAppointmentVo appointmentsDetails = null;
		Boolean tciHasAppointment = false;
		if (form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetailsIsNotNull() && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointmentIsNotNull() && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointment().getTheatreBookingIsNotNull())
		{
			appointmentsDetails = form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointment();
			form.getGlobalContext().Scheduling.setApptCancelStatus(setAppointmentStatus(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList()));
			tciHasAppointment = true;
		}
		//WDEV-18449 -- end
		
		try
		{
			Booking_AppointmentRefVo theatreAppt = null;
			if(appointmentsDetails != null && form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment() == null || Boolean.FALSE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
			{
				theatreAppt = appointmentsDetails;
			}
			
			domain.cancelTCI(form.lyrSelect().tabWaitingList().grdWaitingList().getValue(), form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList(), theatreAppt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		//WDEV-18449 -- start
		// WDEV-22274 Also cancel appointment for TCI that has an appt date in the past
		/*
		 * If appointment date is earlier than today only. No check is done on time of appt.
		 * This is because the criteria for determining a future appointment appears to be 
		 * where appt date >= today.
		 * See method theatreAppointmetnIsInTheFutureAndIsNotCancelled
		 */
//		if (tciHasAppointment 
//				&& form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null 
//				&& Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
		Date dateNow = new Date();
		if (tciHasAppointment 
				&& 
				(
				(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null 
				 && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
				|| 
				(appointmentsDetails.getAppointmentDateIsNotNull()
				 && appointmentsDetails.getAppointmentDate().isLessThan(dateNow))
				 )
			) //WDEV-22274
		{
			form.getLocalContext().setApptToCancel(appointmentsDetails);
			cancelAppt(true);
			setActionedDNAedAndCancelledButtons();
		}
		
	}
	
	private Appointment_StatusVo setAppointmentStatus(TCIOutcomeForPatientElectiveListVo tciOutcomeForPatientElectiveList)
	{
		if (tciOutcomeForPatientElectiveList != null)
		{
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptStatus.setStatus(Status_Reason.CANCELLED);
			voApptStatus.setStatusReason(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2.equals(tciOutcomeForPatientElectiveList.getOutcome()) ? Status_Reason.PATIENTCANCELLED : Status_Reason.HOSPITALCANCELLED);
			voApptStatus.setRebookSelected(false);	
			return voApptStatus;			
		}
		return null;
	}

	@Override
	protected void onBtnTheatreERODClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ERODDialog, new Object[] {ERODType.ELECTIVE});
	}

	@Override
	protected void onBtnOutpatientERODClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ERODDialog, new Object[] {ERODType.OUTPATIENT});
	}

	//WDEV-18488  - to refresh controls on component when called from Referral Details form
	public void refreshComponentScreenControls(Boolean canOrderInvestigations, Boolean wasReferralChangedToEOC)
	{
		//WDEV-18540
		if ( form.lyrSelect().tabWaitingList().isVisible())
		{
			populateWaitingListGrid();
		}
		else if ( form.lyrSelect().tabAppInvs().isVisible())
		{
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();
		}
		
		setActionedDNAedAndCancelledButtons();
		form.getLocalContext().setbReferralAccepted(!wasReferralChangedToEOC);
		updateOrderInvestigationButtonState(canOrderInvestigations);
		updateControlState();
		
	}

	@Override
	protected void onGrdApptsGridHeaderClicked(int column) throws PresentationLogicException
	{
		if (form.lyrSelect().tabAppInvs().grdAppts().getRows() == null || form.lyrSelect().tabAppInvs().grdAppts().getRows().size() <= 1)
			return;
		if (APPT_DATE_TIME_COLUMN_ID == column || APPT_BOOKING_COMMENTS_COLUMN_ID == column || APPT_LETTER_PRINTED_COLUMN_ID == column) //WDEV-19381
			sortColumn(column);
	}

	//WDEV-18854
	private void sortColumn(int column)
	{
		
		ReferralAppointmentDetailsBookingAppointmentVo back = form.lyrSelect().tabAppInvs().grdAppts().getValue();
		ReferralAppointmentDetailsBookingAppointmentVoCollection values = form.lyrSelect().tabAppInvs().grdAppts().getValues();
		
		switch (column)
		{
			case APPT_DATE_TIME_COLUMN_ID:
				form.getLocalContext().setSortOrderApptDateTime(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderApptDateTime()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ApptDateTimeComparator(form.getLocalContext().getSortOrderApptDateTime()));
			break;
			//WDEV-19207
			case APPT_BOOKING_COMMENTS_COLUMN_ID:
				form.getLocalContext().setSortOrderComments(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderComments()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ApptBookingCommentsImageComparator(form.getLocalContext().getSortOrderComments()));
			break;
			
			//WDEV-19381
			case APPT_LETTER_PRINTED_COLUMN_ID:
				form.getLocalContext().setSortOrderApptLetterPrintedImage(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderApptLetterPrintedImage()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ApptLetterPrintedImageComparator(form.getLocalContext().getSortOrderApptLetterPrintedImage()));	
			break;
		}
		
		populateAppointmentsGrid(values);
		form.lyrSelect().tabAppInvs().grdAppts().setValue(back);
		
		form.getLocalContext().setIsAnyTimeRecordedAgainstCaseDetails(form.lyrSelect().tabAppInvs().grdAppts().getValue()!=null ? domain.isAnyTimeRecordedAgainstCaseDetails(form.lyrSelect().tabAppInvs().grdAppts().getValue()) : null); //WDEV-22778
		
		updateControlState();
		
	}

	private void populateAppointmentsGrid(ReferralAppointmentDetailsBookingAppointmentVoCollection appointments)
	{
		form.lyrSelect().tabAppInvs().grdAppts().getRows().clear();
		
		if(appointments == null)
			return;
		
		for (int i = 0 ; i < appointments.size() ; i++)
		{
			newApptRow(appointments.get(i));	
		}
		
	}

	private void newApptRow(ReferralAppointmentDetailsBookingAppointmentVo voAppt)
	{
		//Check to see if this appointment is linked to an investigation
		if ( ! findAnyInvestigationForThisAppointment(form.getLocalContext().getReferralApptDetail(), voAppt))
		{
			grdApptsRow row = form.lyrSelect().tabAppInvs().grdAppts().getRows().newRow();
		
			StringBuffer tooltip = new StringBuffer(); //WDEV-20715
			String cancelTooltip = getCancellationTooltip(voAppt);
			
			if (voAppt.getTheatreBooking() != null)
			{
				row.setColIcon(form.getImages().Scheduling.TheatreAppt16);
				row.setTooltipForColIcon("Theatre Booking");
			}
			else if (Boolean.TRUE.equals(voAppt.getIsWardAttendance()))
			{
				row.setColIcon(form.getImages().RefMan.Admission16);
				row.setTooltipForColIcon("Ward Attendance");
			}
			//WDEV-22876
			else if(Boolean.TRUE.equals(voAppt.getIsCABBooking()))
			{
				row.setColIcon(form.getImages().OCRR.LetterC);
				row.setTooltipForColIcon("Choose and Book Referral");
			}
			else
			{
				row.setColIcon(form.getImages().Scheduling.OutpatinetAppt16);
				row.setTooltipForColIcon("Outpatient Appointment");
			}
			
			String dateTimeStr = "";
			if(voAppt.getAppointmentDateIsNotNull())
				dateTimeStr += voAppt.getAppointmentDate().toString() + " ";
			if(voAppt.getApptStartTimeIsNotNull())
				dateTimeStr += voAppt.getApptStartTime().toString();
			else if(voAppt.getTheatreBookingIsNotNull() && voAppt.getTheatreBooking().getTCITimeIsNotNull())
				dateTimeStr += voAppt.getTheatreBooking().getTCITime().getText();
	
			row.setcolDateTime(dateTimeStr);
			tooltip.append("<b>Date/Time:</b> " + dateTimeStr + "<br>");
			
			if(voAppt.getSessionIsNotNull())
			{
				row.setcolClinic(voAppt.getSession().getName());
				if(voAppt.getSession().getServiceIsNotNull())
					row.setcolService(voAppt.getSession().getService().getServiceName());
			}
			
			// start WDEV-20279
			if(Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) && Boolean.TRUE.equals(voAppt.getRequiresRebook()))
			{
				row.setcolStatus("Cancelled Rebook");
			}
			else
				row.setcolStatus(voAppt.getApptStatus().getText());
			// end WDEV-20279

			//WDEV-19207
			//WDEV-23474
			boolean hasBookingComments = voAppt.getBookingCommentsIsNotNull() && voAppt.getBookingComments().length() > 0;
			boolean hasApptComments = voAppt.getCommentsIsNotNull() && voAppt.getComments().length() > 0;
			String tooltipForcolComments = hasBookingComments ? "Booking Comments: <b>" + voAppt.getBookingComments().trim() + "</b><br>":"";
			tooltipForcolComments += hasApptComments && voAppt.getTheatreBooking() == null && !Boolean.TRUE.equals(voAppt.getIsWardAttendance()) ? "Appointment Comments: <b>" + voAppt.getComments().trim() + "</b>":"";
			
			if (tooltipForcolComments.length()>0)
			{
				row.setcolComments(form.getImages().Emergency.CommentNotes16x16);
				row.setCellcolCommentsTooltip(tooltipForcolComments);
			}
			//WDEV-23474 end
			
			//WDEV-19381
			if (Boolean.TRUE.equals(voAppt.getWasPrinted()))
			{	
				row.setcolAppLetterPrinted(form.getImages().Correspondence.Printer);
				row.setTooltipForcolAppLetterPrinted(getTooltipForColAppLetterPrinted(voAppt));
			}
			
			//WDEV-20053
			if (voAppt.getLinkedAppointmentsIsNotNull() && voAppt.getLinkedAppointments().size()>0)
			{
				row.setcolLinkedAppt(form.getImages().Admin.link);
				row.setTooltipForcolLinkedAppt(getTooltipForColLinkedAppt(voAppt.getLinkedAppointments()));
			}
			
			row.setColActivity(voAppt.getActivity() != null ? voAppt.getActivity().getName() : "");
			
			if (voAppt.getSession() != null)
			{
				
				LocationListVo hospital = getHospitalForLocation(voAppt.getSession().getSchLocation());
				
				if (hospital != null && voAppt.getSession().getSchLocation() != null)
				{
					tooltip.append("<b>Location:</b> " + hospital.getName() + " - " + voAppt.getSession().getSchLocation().getName() + "<br>" );
				}

				tooltip.append(voAppt.getSession().getService() != null ? "<b>Service:</b> " + voAppt.getSession().getService().getServiceName() + "<br>" : "");
				tooltip.append(voAppt.getSession().getSch_Profile() != null ? "<b>Profile Name:</b> " + voAppt.getSession().getSch_Profile().getName() + "<br>" : "");

			}
			
			tooltip.append(row.getcolStatus() != null ? "<b>Status:</b> " + row.getcolStatus() + "<br>" : "");
			//WDEV-22993
			if(Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) && voAppt.getCurrentStatusRecord() != null && voAppt.getCurrentStatusRecord().getCancellationReason() != null)
			{
				tooltip.append("<b>Cancellation Reason:</b> " + voAppt.getCurrentStatusRecord().getCancellationReason().getText() + "<br>");
			}
			
			tooltip.append(voAppt.getActivity() != null ? "<b>Activity:</b> " + voAppt.getActivity().getName() + "<br><br>" : "");
			
			if (voAppt.getActivity() != null && Boolean.TRUE.equals(voAppt.getActivity().getFirstAppointment()))
				tooltip.append(voAppt.getReasonForBreachingFirstApptKPI() != null ? "<b>Breach Reason:</b> " + voAppt.getReasonForBreachingFirstApptKPI().getText()+ "<br><br>" : "");
			
			tooltip.append(cancelTooltip);
			
			row.setTooltipForcolDateTime(tooltip.toString());
			row.setTooltipForcolService(tooltip.toString());
			row.setTooltipForcolClinic(tooltip.toString());
			row.setTooltipForcolStatus(tooltip.toString());
			row.setTooltipForColActivity(tooltip.toString());
			
			row.setValue(voAppt);
		}
	}	
	
	private LocationListVo getHospitalForLocation(LocationListVo location)
	{
		if (location == null)
			return null;
		
		if (LocationType.HOSP.equals(location.getType()))
			return  location;
		
		while (location.getParentLocation() != null)
		{
			location = location.getParentLocation();
			
			if (LocationType.HOSP.equals(location.getType()))
				return  location;
			
		}
		
		return  null;
	}
	
	public class ApptDateTimeComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ApptDateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ApptDateTimeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		
		public int compare(Object ob1, Object ob2)
		{
			DateTime rez1 = null;
			DateTime rez2 = null;

			if (ob1 instanceof ReferralAppointmentDetailsBookingAppointmentVo)
			{
				ReferralAppointmentDetailsBookingAppointmentVo ps1 = (ReferralAppointmentDetailsBookingAppointmentVo) ob1;

				DateTime apptDateTime = new DateTime();

				if (ps1.getApptStartTimeIsNotNull())
					apptDateTime.setDateTime(ps1.getAppointmentDate(), ps1.getApptStartTime());
				else if (ps1.getTheatreBookingIsNotNull() && ps1.getTheatreBooking().getTCITimeIsNotNull())
					apptDateTime.setDateTime(ps1.getAppointmentDate(), getTimeFromLookup(ps1.getTheatreBooking().getTCITime()));

				rez1 = ps1.getAppointmentDate() != null ? apptDateTime : null;
			}

			if (ob2 instanceof ReferralAppointmentDetailsBookingAppointmentVo)
			{
				ReferralAppointmentDetailsBookingAppointmentVo ps2 = (ReferralAppointmentDetailsBookingAppointmentVo) ob2;

				DateTime apptDateTime = new DateTime();

				if (ps2.getApptStartTimeIsNotNull())
					apptDateTime.setDateTime(ps2.getAppointmentDate(), ps2.getApptStartTime());
				else if (ps2.getTheatreBookingIsNotNull() && ps2.getTheatreBooking().getTCITimeIsNotNull())
					apptDateTime.setDateTime(ps2.getAppointmentDate(), getTimeFromLookup(ps2.getTheatreBooking().getTCITime()));

				rez2 = ps2.getAppointmentDate() != null ? apptDateTime : null;
			}

			if (rez1 != null && rez2 != null)
				return rez1.compareTo(rez2) * direction;

			if (rez1 != null && rez2 == null)
				return direction;

			if (rez2 != null && rez1 == null)
				return (-1) * direction;

			return 0;
		}

		
		private Time getTimeFromLookup(TCITime tciTime)
		{
			
			Time time =  new Time();

			try
			{
				time = new Time(tciTime.getText());
			}
			catch (Exception e) 
			{
				return new Time(23,59,59); //put it last
			} 
			
			return time;
			
		}
		
	}
	//WDEV-19207
	public class ApptBookingCommentsImageComparator  implements java.util.Comparator<Object>
	{
		private int direction = 1;
		
		public ApptBookingCommentsImageComparator()
		{
			this(SortOrder.ASCENDING);
		}
		public ApptBookingCommentsImageComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		public int compare(Object obj1, Object obj2)
		{
			ReferralAppointmentDetailsBookingAppointmentVo voObj1 = (ReferralAppointmentDetailsBookingAppointmentVo)obj1;
			ReferralAppointmentDetailsBookingAppointmentVo voObj2 = (ReferralAppointmentDetailsBookingAppointmentVo)obj2;

			if (voObj1.getBookingComments() != null && voObj2.getBookingComments() != null)
			{
				return voObj1.getBookingComments().compareTo(voObj2.getBookingComments()) * direction;
			}

			if (voObj1.getBookingComments() != null && voObj2.getBookingComments() == null)
			{
				return direction;
			}

			if (voObj2.getBookingComments() != null && voObj1.getBookingComments() == null)
			{
				return -1 * direction;
			}	

			return direction;
		}
	}
	
	//WDEV-19381
	public class ApptLetterPrintedImageComparator  implements java.util.Comparator<Object>
	{
		private int direction = 1;
		
		public ApptLetterPrintedImageComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ApptLetterPrintedImageComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		
		public int compare(Object obj1, Object obj2)
		{
			ReferralAppointmentDetailsBookingAppointmentVo voObj1 = (ReferralAppointmentDetailsBookingAppointmentVo)obj1;
			ReferralAppointmentDetailsBookingAppointmentVo voObj2 = (ReferralAppointmentDetailsBookingAppointmentVo)obj2;
			
			if(voObj1.getWasPrinted() != null && voObj2.getWasPrinted() == null)
				return  -1*direction;
			
			if(voObj2.getWasPrinted() != null && voObj1.getWasPrinted() == null)
				return 1*direction;
				
			return direction;
		}
	}

	@Override
	protected void onBtnBookWardAttendanceClick() throws PresentationLogicException
	{
		bookNewWardAttendance();
		
	}

	private void bookNewWardAttendance()
	{
		// Reset global context
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		
		if (isReferralEndOfCare())
			return;

		//set the Ward Attendance GC to TRUE
		form.getGlobalContext().Scheduling.setWardAttendance(Boolean.TRUE);
				
		engine.open(form.getForms().RefMan.BookAppointmentDialog, false);//WDEV-22308
				
	}

	//WDEV-20643
	@Override
	protected void onBtnAllConsultationActivityBookedClick() throws PresentationLogicException
	{
		updateCatsReferral(ALL_CONSULTATION_ACTIVITY_BOOKED);
		form.lyrSelect().tabAppInvs().btnAllConsultationActivityBooked().setVisible(false);
	}

	@Override
	protected void onBtnViewTriageOutcomeClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ReferralTriage, new Object[] {null, FormMode.VIEW});
	}

	@Override
	protected void onBtnBookFutureApptClick() throws PresentationLogicException
	{
		bookFutureAppointment();
		
	}

	private void bookFutureAppointment()
	{
		form.getGlobalContext().RefMan.setAppointmentSaved(null);
		
		FutureAppointmentListVo futureAppt = form.lyrSelect().tabFutureAppointments().grdFutureAppointments().getValue();
		
		if (!RequestToSchedule.LINKED_OPA.equals(futureAppt.getRequestToSchedule()))
		{
			form.getGlobalContext().Scheduling.setBookingService(futureAppt.getFirstApptService());
			form.getGlobalContext().Scheduling.setServiceFunctionRef(domain.getServiceFunction(futureAppt.getFirstApptService(), futureAppt.getFirstApptFunction()));
		}
		
		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
		
	}

	@Override
	protected void onGrdFutureAppointmentsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
		
	}

	@Override
	protected void onBtnAddToPETClick() throws PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setPendingEmergencyTheatre(null);
		engine.open(form.getForms().RefMan.AddEmergencyTheatre);
		
	}

	@Override
	protected void onGrdPETSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
		
	}

	@Override
	protected void onBtnDischargedBacktoGPClick() throws PresentationLogicException
	{
		updateCatsReferral(PATIENT_DISCHARGED_BACK_TO_GP);
		updateControlState();
		
	}

	@Override
	protected void onBtnCompletedReBookingClick() throws PresentationLogicException
	{
		updateCatsReferral(COMPLETED_REBOOKING_SUBSEQUENT_ACTIVITY);
		updateControlState();
		
	}

	@Override
	protected void onBtnRedirectedCABClick() throws PresentationLogicException
	{
		updateCatsReferral(REDIRECTED_IN_CAB);
		updateControlState();
	}
	
	
}
