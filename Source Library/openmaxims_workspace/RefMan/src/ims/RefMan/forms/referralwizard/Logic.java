//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.62 build 3121.18691)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.referralwizard;

import ims.RefMan.forms.referralwizard.GenForm.lyrPageLayer.tabPayorContainer.Group1Enumeration;
import ims.RefMan.vo.CancerTypeItemConfigVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.enums.CALLINGFORM;
import ims.RefMan.vo.lookups.AdditionalInvestigationAppointmentsStatus;
import ims.RefMan.vo.lookups.CancerType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.CareContextStatusHistoryVoCollection;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareContextVoCollection;
import ims.core.vo.CareSpellVo;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.EpisodeofCareVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceVo;
import ims.core.vo.enums.DocumentViewLevel;
import ims.core.vo.enums.PatientSearchEvent;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.CareSpelltoEpisodeRelationship;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
		updateControlState();
		manageTabs();
	}
	@Override
	protected void onFormModeChanged() 
	{
		form.lyrPage().tabPageReferral().ccReferralDetails().setMode(form.getMode());
		form.lyrPage().tabPageDemographics().ccDemographics().setMode(form.getMode());
		updateControlState();
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
		clearInstanceControls();
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
			form.getGlobalContext().Core.setPatientShort(null);
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editInstance();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{	
		referralCreationHandler();
	}
	private void referralCreationHandler() throws FormOpenException
	{
		//wdev-2086
		if (form.getGlobalContext().RefMan.getCatsReferral() == null)
		{
			form.getLocalContext().setisCreatingReferral(Boolean.TRUE);
		}
		
		//----- end wdev-20864
		
		if (ConfigFlag.GEN.SHOW_REFERRAL_DETAILS_BILLING_TABS.getValue() &&
				(form.lyrPage().tabPageReferral().isVisible() || form.lyrPage().tabPayor().isVisible() || form.lyrPage().tabContractDetails().isVisible()))
		{
			if (form.lyrPage().tabPageReferral().isVisible())
			{
				form.lyrPage().showtabPayor();
				
				form.lyrPage().settabPageDemographicsEnabled(true);
				form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
				
				form.lyrPage().settabPageReferralEnabled(true);
				form.lyrPage().tabPageReferral().setHeaderEnabled(true);
				
				if (ConfigFlag.GEN.SHOW_REFERRAL_DETAILS_BILLING_TABS.getValue())
				{
					form.lyrPage().settabPayorEnabled(true);
					form.lyrPage().tabPayor().setHeaderEnabled(true);
				
					form.lyrPage().settabContractDetailsEnabled(false);
					form.lyrPage().tabContractDetails().setHeaderEnabled(false);
				}
				
				form.lyrPage().settabPageLetterEnabled(false);
				form.lyrPage().tabPageLetter().setHeaderEnabled(false);
				
				form.btnSave().setText("Next");			
			}		
			else if (form.lyrPage().tabPayor().isVisible())
			{
				form.lyrPage().showtabContractDetails();
				
				form.lyrPage().settabPageDemographicsEnabled(true);
				form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
				
				form.lyrPage().settabPageReferralEnabled(true);
				form.lyrPage().tabPageReferral().setHeaderEnabled(true);
				
				if (ConfigFlag.GEN.SHOW_REFERRAL_DETAILS_BILLING_TABS.getValue())
				{
					form.lyrPage().settabPayorEnabled(true);
					form.lyrPage().tabPayor().setHeaderEnabled(true);
					
					form.lyrPage().settabContractDetailsEnabled(true);
					form.lyrPage().tabContractDetails().setHeaderEnabled(true);
				}
				
				form.lyrPage().settabPageLetterEnabled(false);
				form.lyrPage().tabPageLetter().setHeaderEnabled(false);
				
				form.btnSave().setText("Next");
			}			
			else if (form.lyrPage().tabContractDetails().isVisible())
			{
				form.lyrPage().showtabPageLetter();
				
				form.lyrPage().settabPageDemographicsEnabled(true);
				form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
				
				form.lyrPage().settabPageReferralEnabled(true);
				form.lyrPage().tabPageReferral().setHeaderEnabled(true);
				
				if (ConfigFlag.GEN.SHOW_REFERRAL_DETAILS_BILLING_TABS.getValue())
				{
					form.lyrPage().settabPayorEnabled(true);
					form.lyrPage().tabPayor().setHeaderEnabled(true);
				
					form.lyrPage().settabContractDetailsEnabled(true);
					form.lyrPage().tabContractDetails().setHeaderEnabled(true);
				}
				
				form.lyrPage().settabPageLetterEnabled(true);
				form.lyrPage().tabPageLetter().setHeaderEnabled(true);						
				
				onlyrPageTabChanged((form.lyrPage().tabPageLetter()));
			}
			
			if (save())
			{
				open();	
				manageTabs();		
			}
			
			if (form.lyrPage().tabPageLetter().isVisible()) 
				form.btnSave().setText("Save");
			else
				form.btnSave().setText("Next");
			return;
		}	
		
		if (form.lyrPage().tabPagePatientSearch().isVisible() //wdev-7905
			&& ( (form.getGlobalContext().Core.getPatientShort() == null
					&& ! form.getLocalContext().getbDemographicsSaved())
				|| (form.getGlobalContext().Core.getPatientShort() != null
					&& form.getLocalContext().getbDemographicsSaved()))
			&& form.getGlobalContext().RefMan.getCatsReferral() == null
			)
		{
			form.getLocalContext().setbDemographicsSaved(Boolean.FALSE);

			form.lyrPage().settabPageDemographicsEnabled(true);
			form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
			form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
			form.lyrPage().showtabPageDemographics();

			return;
		}
		
		if ( ! form.getLocalContext().getbDemographicsSaved() 
			&& ( (form.getGlobalContext().Core.getPatientShort() == null)
				|| (form.getGlobalContext().Core.getPatientShortIsNotNull()
						&& form.getGlobalContext().RefMan.getCatsReferral() == null)) 
				|| form.lyrPage().tabPageDemographics().isVisible())
		{
			Boolean bReturn = form.lyrPage().tabPageDemographics().ccDemographics().savePatientDemographics();
			
			if (form.getGlobalContext().Core.getPatientShortIsNotNull() && bReturn)
			{
				form.getLocalContext().setbDemographicsSaved(Boolean.TRUE); 
				form.lyrPage().tabPageReferral().ccReferralDetails().setPatientsGp(domain.getPatientsGp(form.getGlobalContext().Core.getPatientShort().getID_Patient()));
				manageTabs();
				form.lyrPage().showtabPageReferral();
			}
			else
			{
				form.getLocalContext().setbDemographicsSaved(Boolean.FALSE);

				form.lyrPage().settabPageDemographicsEnabled(true);
				form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
				form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
				form.lyrPage().showtabPageDemographics();
			}

			
			return;
		}
		
		if (form.getGlobalContext().RefMan.getCatsReferral() == null)
		{
			if (save())
			{
				open();		
				if (ConfigFlag.GEN.SHOW_REFERRAL_DETAILS_BILLING_TABS.getValue())
				{
					if(isDialog())
					{
						engine.close(DialogResult.OK);
					}
					
					return;
				}
				
				
				manageTabs();				
				form.lyrPage().showtabPageLetter();
			}			
			return;
		}
		
		if(save())		
		{
			if(isDialog())
				engine.close(DialogResult.OK);
			else
				open();		
			
			updateControlState();
			manageTabs();
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		cancel();
		
	}	
	

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		open();
	}
	
	private void initialize()
	{
		form.lyrPage().tabPagePatientSearch().ccPatientSearch().initialize(true);
		form.lyrPage().tabPagePatientSearch().ccPatientSearch().setSearchAsDefaultButton(); //WDEV-19136
		form.lyrPage().tabPageReferral().ccReferralDetails().initialize(CALLINGFORM.REFERRALWIZARD);
		//form.lyrPage().tabPageLetter().ccUploadDoc().initialize();
		form.lyrPage().tabPageDemographics().ccDemographics().initialize();
		
		form.getLocalContext().setbDemographicsSaved(Boolean.FALSE);
		
		form.getGlobalContext().RefMan.setCatsReferralWizard(null);

		form.lyrPage().tabPageReferral().ccReferralDetails().setCreationMode(Boolean.TRUE);
		
		//WDEV-20547
		if (form.getGlobalContext().Core.getPatientShort() != null && engine.getPreviosFormName().equals(form.getForms().RefMan.PatientReferralStatusList))
		{
			form.lyrPage().showtabPageReferral();
		}
		
		form.getLocalContext().setCancerTypeConfig(domain.getCancerTypeConfig());
		
		if (form.getGlobalContext().RefMan.getDiagnosticReferralForApplication() == null)
			form.getGlobalContext().RefMan.setDiagnosticReferralForApplication(domain.hasLocationDiagnosicContracts((LocationRefVo) engine.getCurrentLocation()));
	}
	
	public void open() throws FormOpenException
	{
		if(isDialog())
			form.setMode(FormMode.EDIT);
		else
			form.setMode(FormMode.VIEW);

		
		if(form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
		{
			CatsReferralWizardVo record = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			form.getLocalContext().setRecord(record);
			
			if(record != null)
				populateScreenFromData(form.getLocalContext().getRecord());
		}	
		else if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			
			Patient patVo = domain.getPatient(form.getGlobalContext().Core.getPatientShort());
			
			//WDEV-20547
			if (!(engine.getPreviosFormName().equals(form.getForms().RefMan.PatientReferralStatusList)))
				form.getLocalContext().setRecord(new CatsReferralWizardVo()); 
				
			if(patVo != null)
				populateScreenFromData(patVo);
			
		}	
		else
		{		
			clearInstanceControls();
		}
	}
	
	private void populateScreenFromData(Patient patVo) 
	{
		//clearInstanceControls();
		
		if(patVo == null)
			return;
		
		form.lyrPage().tabPageDemographics().ccDemographics().setValue(patVo);
	}

	private void populateScreenFromData(CatsReferralWizardVo record) 
	{
		clearInstanceControls();
		
		if(record == null)
			return;
		
		form.lyrPage().tabPageReferral().ccReferralDetails().setValue(record.getReferralDetails(), record);
		form.lyrPage().tabPageDemographics().ccDemographics().setValue(record.getPatient());
	}

	private void clearInstanceControls()
	{
		form.lyrPage().tabPageReferral().ccReferralDetails().setValue(null, null);
		form.lyrPage().tabPageDemographics().ccDemographics().setValue(null);	
		form.lyrPage().tabPagePatientSearch().ccPatientSearch().clear();
	}
	
	private boolean isDialog()
	{
		if(engine.isDialog())
			return true;
		return false;
	}
	
	private void newInstance()
	{
		form.setMode(FormMode.EDIT);
		
		manageTabs();
		
	}
	
	private void manageTabs()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
		{
			form.lyrPage().showtabPagePatientSearch();
	
			form.lyrPage().settabPageDemographicsEnabled(false);
			form.lyrPage().tabPageDemographics().setHeaderEnabled(false);
			
			form.lyrPage().settabPageReferralEnabled(false);
			form.lyrPage().tabPageReferral().setHeaderEnabled(false);
			
			if (ConfigFlag.GEN.SHOW_REFERRAL_DETAILS_BILLING_TABS.getValue())
			{
				form.lyrPage().settabPayorEnabled(false);
				form.lyrPage().tabPayor().setHeaderEnabled(false);
			
				form.lyrPage().settabContractDetailsEnabled(false);
				form.lyrPage().tabContractDetails().setHeaderEnabled(false);
			}
			else
			{
				form.lyrPage().tabPayor().setHeaderVisible(false);
				form.lyrPage().tabContractDetails().setHeaderVisible(false);
			}
			
			form.lyrPage().settabPageLetterEnabled(false);
			form.lyrPage().tabPageLetter().setHeaderEnabled(false);
			
			form.btnSave().setText("Next");
		}
		else if (form.getGlobalContext().Core.getPatientShortIsNotNull()
				&& form.getGlobalContext().RefMan.getCatsReferral() == null)
		{
			
			form.lyrPage().settabPageDemographicsEnabled(true);
			form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
			form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
			
			form.lyrPage().settabPageReferralEnabled(true);
			form.lyrPage().tabPageReferral().setHeaderEnabled(true);
			form.lyrPage().tabPageReferral().ccReferralDetails().setMode(FormMode.EDIT);
			
			form.lyrPage().settabPageLetterEnabled(false);
			form.lyrPage().tabPageLetter().setHeaderEnabled(false);
			
			form.btnSave().setText("Next");
			
			//WDEV-20547
			if ((engine.getPreviosFormName().equals(form.getForms().RefMan.PatientReferralStatusList)))
			{
				if (ConfigFlag.GEN.SHOW_REFERRAL_DETAILS_BILLING_TABS.getValue())
				{
					form.lyrPage().settabPayorEnabled(false);
					form.lyrPage().tabPayor().setHeaderEnabled(false);
				
					form.lyrPage().settabContractDetailsEnabled(false);
					form.lyrPage().tabContractDetails().setHeaderEnabled(false);
				}
				else
				{
					form.lyrPage().tabPayor().setHeaderVisible(false);
					form.lyrPage().tabContractDetails().setHeaderVisible(false);
				}
				
				//hide these two tabs
				form.lyrPage().tabPagePatientSearch().setHeaderVisible(false);
				form.lyrPage().tabPageDemographics().setHeaderVisible(false);
				
				//set the local context as if the patient was saved
				form.getLocalContext().setbDemographicsSaved(true);
				
				//enable the Referal Details tab
				form.lyrPage().tabPageReferral().setHeaderEnabled(true);
				
			}
		}
		else
		{
			form.lyrPage().settabPageDemographicsEnabled(true);
			form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
			form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
			
			form.lyrPage().settabPageReferralEnabled(true);
			form.lyrPage().tabPageReferral().setHeaderEnabled(true);
			
			form.lyrPage().settabPageLetterEnabled(true);
			form.lyrPage().tabPageLetter().setHeaderEnabled(true);
			form.lyrPage().tabPageLetter().ccUploadDoc().setMode(FormMode.EDIT);
			tabUploadChange();
			
			form.btnSave().setText("Save");
		}
	}

	private void editInstance()
	{
		form.setMode(FormMode.EDIT);
		manageTabs();
	}
	
	private boolean save() throws FormOpenException
	{
		CatsReferralWizardVo record = populateDataFromScreen(form.getLocalContext().getRecord());
		
		//wdev-20946
		if(record.getID_CatsReferral() == null)
		{
			if (!Boolean.TRUE.equals(record.getIsEmergencyReferral()))		//new referral and elective (not emergency) 
			{
				if (record.getReferralDetailsIsNotNull() && record.getReferralDetails().getServiceIsNotNull() && !Boolean.TRUE.equals(record.getReferralDetails().getService().getIsSubjectToRTTClock()))		//Non_RTT
				{
					record.setIsEmergencyReferral(Boolean.FALSE);
					record.setRTTClockImpact(Boolean.FALSE);
				}
				record.getReferralDetails().setEndDateEmailKPI(null);
				record.getReferralDetails().setEndDatePaperKPI(null);
				record.getReferralDetails().setEndDateKPI(domain.getEndDateKPI(record));
			}
			else //WDEV-21176 
			{
				record.getReferralDetails().setEndDateEmailKPI(null);
				record.getReferralDetails().setEndDatePaperKPI(null);
				record.getReferralDetails().setEndDateKPI(null);
				record.getReferralDetails().setEnd18WW(null);
			}
			
		}
		//----------
				
		//The Upload Component may have saved Cats Referral, time stamp and latest data needed. 
		if (form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull())
			record = form.getGlobalContext().RefMan.getCatsReferralWizard();
		
		if (record.getPatient() == null)
		{
			engine.showMessage("No Patient data was found. Is the Patient saved correctly on the demographics tab?", "No Patient Data", MessageButtons.OK, MessageIcon.ERROR);
			return false;
		}
		
		String[] errors = record.getPatient().validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		errors = validateUIRules(errors);
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		//WDEV-22259
		HcpLiteVo voHCPLite = record.getReferralDetails() != null ? record.getReferralDetails().getConsultant() :  null;
		if (voHCPLite == null)
		{	
			Object currentHCP = domain.getHcpLiteUser();
			voHCPLite =  currentHCP != null ? (HcpLiteVo) currentHCP : null;
		}	
		//WDEV-22259 -- end			
		if (form.lyrPage().tabPageReferral().isVisible() && !Boolean.TRUE.equals(form.lyrPage().tabPageReferral().ccReferralDetails().validateRTTDate()) && !Boolean.TRUE.equals(form.lyrPage().tabPageReferral().ccReferralDetails().isBreachDateAcknowledged()))
			return false;
		
		if (record.getCareContext() == null)
		{
			CareSpellVo voCareSpell = populateCareSpellDataFromScreen(voHCPLite);
			
			if(voCareSpell == null)
				return false;
			
			String[] arrErrors = voCareSpell.validate();
			if(arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return false;
			}
			try 
			{
				//wdev-12682
				record = domain.saveCareSpellAndReferralDetails(record, voCareSpell, form.getGlobalContext().RefMan.getReferralContractTypeForPatientIsNotNull() && form.getGlobalContext().RefMan.getReferralContractTypeForPatient().equals(ReferralManagementContractType.DIAGNOSTIC));
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();		
				return false;
			}
			catch (DomainInterfaceException e)
			{
				engine.showErrors(new String[]{e.getMessage()});
				return false;
			}
		} 
		else
		{	
			errors = record.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			
			try 
			{
				record = domain.saveCatsReferral(record);
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				open();		
				return false;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();		
				return false;
			}
		}
		
		form.getLocalContext().setRecord(record);		
		form.getGlobalContext().RefMan.setCatsReferral(record);
		form.getGlobalContext().RefMan.setReferralContractTypeForPatient(record.getContractIsNotNull() ? record.getContract().getContractType() : null);
		form.getGlobalContext().RefMan.setCatsReferralWizard(record);
		
		//WDEV-14160
		if(record != null && record.getCareContextIsNotNull())
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(record.getCareContext()));
		}
		
		return true;
	}
	
	private String[] validateUIRules(String[] errors2) 
	{
		String[] errors = form.lyrPage().tabPageReferral().ccReferralDetails().validate(errors2);
		
		return errors;
	}
	
	private CareSpellVo populateCareSpellDataFromScreen(HcpLiteVo voHCPLite)
	{
		CareSpellVo voCareSpell = populateCareSpellInstanceData();
		
		EpisodeofCareVo voEpisodeOfCare = populateEpisodeOfCare(voCareSpell, voHCPLite);
		
		populateCareContext(voEpisodeOfCare,voHCPLite);
		
		return voCareSpell;
	}
	

	private CatsReferralWizardVo populateDataFromScreen(CatsReferralWizardVo record) 
	{
		boolean bSetAwaiting = false;
		
		if(record == null)
		{
			record = new CatsReferralWizardVo();

			record.setIsCAB(Boolean.FALSE);
			record.setAdditionalInvApptsStatus(AdditionalInvestigationAppointmentsStatus.NONE);
			record.setHasAppointments(Boolean.FALSE);
			record.setHasDocuments(Boolean.FALSE);
			record.setHasInvestigations(Boolean.FALSE);
			record.setHasReferralLetter(Boolean.FALSE);
			record.setHasConsultationDetails(Boolean.FALSE);
			
			bSetAwaiting = true;
			
			//WDEV-21698 As the Demographics Tab is no longer visible, get the Patient from the GC
			record.setPatient(domain.getPatient(form.getGlobalContext().Core.getPatientShort()));
		}
		
		//WDEV-21698 record.setPatient(form.lyrPage().tabPageDemographics().ccDemographics().getValue());
		record.setReferralDetails(form.lyrPage().tabPageReferral().ccReferralDetails().getValue());
		record.setReferralCategory(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull()?form.getGlobalContext().RefMan.getCatsReferralWizard().getReferralCategory():null);

		if (bSetAwaiting)
		{
			//wdev-10020
			// GlobalContext.RefMan.CatsReferralWizard used to get the Awaiting info etc......clear it once used as this GC is used by the documents tab also
			record.setIsAwaitingClinicalInfo(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getIsAwaitingClinicalInfo() : null);
			record.setAwaitingClinicalInfo(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getAwaitingClinicalInfo() : null);
			record.setContract(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getContract() : null);
			// WDEV-18478 
			record.setUrgency(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getUrgency() : null);
			//WDEV-19700
			record.setCancerType(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getCancerType() : null);
			//WDEV-18452 
			record.setConsUpgradeDate(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getConsUpgradeDate() : null);
			//wdev-13647
			if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
			{
				record.setNearestTreatmentCentre(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getNearestTreatmentCentre():null);
			}
			//-----------
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() && form.getGlobalContext().RefMan.getCatsReferralWizard().getContractIsNotNull()? form.getGlobalContext().RefMan.getCatsReferralWizard().getContract().getContractType() : null);
			
			record.setPatientCategory(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getPatientCategory() : null); //WDEV-20761
			
			if (form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() && form.getGlobalContext().RefMan.getCatsReferralWizard().getID_CatsReferral() == null)
				form.getGlobalContext().RefMan.setCatsReferralWizard(null);//clear it out
		}
		else	//wdev-20864
		{
			if( Boolean.TRUE.equals(form.getLocalContext().getisCreatingReferral()))
			{
				record.setUrgency(form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull() ? form.getGlobalContext().RefMan.getCatsReferralWizard().getUrgency() : null);
				//form.getLocalContext().setisCreatingReferral(Boolean.FALSE);
				//WDEV-21176 
				if (form.getGlobalContext().RefMan.getCatsReferralWizardIsNotNull())
				{	
					boolean hadGPLetterUploaded = Boolean.TRUE.equals(form.getGlobalContext().RefMan.getCatsReferralWizard().getHasReferralLetter());
					record.setHasReferralLetter(hadGPLetterUploaded);
				}
			}
		}
	
		form.getLocalContext().setSelectedReferralService(record.getReferralDetails().getService());
		
		if (record.getReferralDetails().getID_ReferralLetterDetails() == null)
		{
			CatsReferralStatusVo voStatus = new CatsReferralStatusVo();
			
			voStatus.setAuthoringUser((MemberOfStaffRefVo)domain.getMosUser());
			voStatus.setStatusDateTime(new DateTime());
			
			voStatus.setReferralStatus(ReferralApptStatus.REFERRAL_RECEIVED);
			
			record.setCurrentStatus(voStatus);
			
			record.setStatusHistory(new CatsReferralStatusVoCollection());
			record.getStatusHistory().add(voStatus);
		}
		
		boolean isRefStatusEndCare = ReferralApptStatus.END_OF_CARE.equals(record.getCurrentStatus().getReferralStatus());
		boolean isSelfReferralAndDirectAccessEmergencyReferral = isSORSelfandDirectReferralandUrgEmer(record);
		boolean isNationalScreeningAndNoLetterRequired =  isNationalScreeningAndNoLetterRequired(record);
		boolean isEmergReferralAndNotReferredByPatient = isNotSelfReferralAndHasEmergencyUrgency(record);
		
		if((isSelfReferralAndDirectAccessEmergencyReferral || isNationalScreeningAndNoLetterRequired || isEmergReferralAndNotReferredByPatient) && neverHadAcceptedStatusBefore(record.getStatusHistory()) && !isRefStatusEndCare)
		{
			CatsReferralStatusVo voStatus = new CatsReferralStatusVo();
			
			voStatus.setAuthoringUser((MemberOfStaffRefVo)domain.getMosUser());
			voStatus.setStatusDateTime(new DateTime());
			
			voStatus.setReferralStatus(ReferralApptStatus.REFERRAL_ACCEPTED);
			
			record.setCurrentStatus(voStatus);
			
			if(record.getStatusHistory() == null)
			{
				record.setStatusHistory(new CatsReferralStatusVoCollection());
			}
			
			record.getStatusHistory().add(voStatus);	
			
			
			//wdev-20864
			
			CatsReferralWizardVo catsglobal = form.getGlobalContext().RefMan.getCatsReferralWizard();
			if( catsglobal != null )
			{
				catsglobal.setCurrentStatus(voStatus);
				if(catsglobal.getStatusHistory() == null)
				{
					catsglobal.setStatusHistory(new CatsReferralStatusVoCollection());
				}
				
				catsglobal.getStatusHistory().add(voStatus);
				form.getGlobalContext().RefMan.setCatsReferralWizard(catsglobal);
			}
			
			//---
		}
		
		//WDEV-22372
		if(isSelfReferralAndDirectAccessEmergencyReferral)
		{
			record.setHasReferralLetter(true);
		}
		//WDEV-22372 ends here
		
		//WDEV-18395 
		//WDEV-21176 
		boolean isEmergencyReferral = record.getReferralDetails()!=null && ReferralUrgency.EMERGENCY.equals(record.getUrgency()); //WDEV-20944
		if (isEmergencyReferral) //WDEV-20944
		{
			record.setIsEmergencyReferral(Boolean.TRUE);
			record.setRTTClockImpact(Boolean.FALSE);
		}
		else
		{	
			record.setRTTClockImpact(form.lyrPage().tabPageReferral().ccReferralDetails().getRTTClockImpact());
		}
		record.setPathwayID(form.lyrPage().tabPageReferral().ccReferralDetails().getPathwayID());
		//WDEV-18395

		//wdev-18432
		if (form.getGlobalContext().RefMan.getReferralTransferIsNotNull())
		{
			record.setPathwayID(form.getGlobalContext().RefMan.getReferralTransfer().getPathwayID());
			record.getReferralDetails().setOriginalDateOfReferral(form.getGlobalContext().RefMan.getReferralTransfer().getRTTStartDate()); //WDEV-20383
			record.setReferralTransfer(form.getGlobalContext().RefMan.getReferralTransfer());
		}
		return record;
	}
	
	private boolean isNationalScreeningAndNoLetterRequired(CatsReferralWizardVo record)
	{
		if(record == null)
			return false;
		
		return record.getReferralDetails() != null && SourceOfReferral.NATIONAL_SCREENING.equals(record.getReferralDetails().getReferrerType()) && hasCancerTypeNoLetterRequired(record.getCancerType());
	}
	
	private boolean hasCancerTypeNoLetterRequired(CancerType cancerType)
	{
		if(cancerType == null || form.getLocalContext().getCancerTypeConfig() == null || form.getLocalContext().getCancerTypeConfig().getCancerItemConfig() == null)
			return false;
		
		for(CancerTypeItemConfigVo item : form.getLocalContext().getCancerTypeConfig().getCancerItemConfig())
		{
			if(item == null)
				continue;
			
			if(cancerType.equals(item.getCancerType()) && Boolean.TRUE.equals(item.getNoReferralLetterRequired()))
				return true;
		}
		
		return false;
	}
	
	private boolean isSORSelfandDirectReferralandUrgEmer(CatsReferralWizardVo voRefWizard) 
	{	
		if(voRefWizard == null)
			return false;
		
		return voRefWizard.getReferralDetails() != null && SourceOfReferral.SELF.equals(voRefWizard.getReferralDetails().getReferrerType())
					&& voRefWizard.getReferralDetails().getService() != null && Boolean.TRUE.equals(voRefWizard.getReferralDetails().getService().getDirectSelfReferralsAccepted())
					&& ReferralUrgency.EMERGENCY.equals(voRefWizard.getUrgency());
	}
	private boolean isNotSelfReferralAndHasEmergencyUrgency(CatsReferralWizardVo voRefWizard) 
	{	
		if(voRefWizard == null || !Boolean.TRUE.equals(voRefWizard.getHasReferralLetter()))
			return false;
		
		return ReferralUrgency.EMERGENCY.equals(voRefWizard.getUrgency()) && voRefWizard.getReferralDetails() != null && !SourceOfReferral.SELF.equals(voRefWizard.getReferralDetails().getReferrerType());	
	}
	private boolean neverHadAcceptedStatusBefore(CatsReferralStatusVoCollection statusHistory) 
	{
		if(statusHistory == null)
			return false;
		
		for(int i = 0 ; statusHistory != null && i < statusHistory.size() ; i++)
		{
			if (statusHistory.get(i).getReferralStatusIsNotNull()
				&& (statusHistory.get(i).getReferralStatus().equals(ReferralApptStatus.REFERRAL_ACCEPTED)
					|| statusHistory.get(i).getReferralStatus().equals(ReferralApptStatus.REFERRAL_REJECTED) ) )
					return false;
		}
		
		return true;
	}
	
	private void cancel() throws FormOpenException
	{
		if(isDialog())
			engine.close(DialogResult.CANCEL);
		else
		{
			open();
			updateControlState();
		}
	}
	
	private void updateControlState()
	{
		if(form.getMode() == FormMode.VIEW)
		{	
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(form.getLocalContext().getRecord() == null);
			form.btnEdit().setVisible(form.getLocalContext().getRecord() != null);
			if (form.getGlobalContext().Core.getPatientShortIsNotNull())
			{
				form.btnEdit().setEnabled(true);
				form.btnEdit().setVisible(true);
			}
		}
		
	}
	
	@Override
	protected void onlyrPageTabChanged(LayerBridge tab)
	{
		//WDEV-19136 
		if (tab.equals(form.lyrPage().tabPagePatientSearch()))
			form.lyrPage().tabPagePatientSearch().ccPatientSearch().setSearchAsDefaultButton();
		if (tab.equals(form.lyrPage().tabPageLetter()))
			tabUploadChange();
	}

	private void tabUploadChange()
	{
		try 
		{			
			form.lyrPage().tabPageLetter().ccUploadDoc().initialize(DocumentCategory.GPLETTER, UploadDocumentStoreLevel.REFERRAL,DocumentViewLevel.REFERRAL);
			//form.getGlobalContext().RefMan.setCatsReferralWizard(form.getLocalContext().getRecord());
			//ADDED FOR WDEV-7474 GlobalContext CatsRefferralWizard could be saved by upload document and you
			//must be sure that the CatsRefferalWizard has the latest version
			//form.getGlobalContext().RefMan.setCatsReferralWizard(domain.getCatsReferral(form.getLocalContext().getRecord()));
		}
		catch (RuntimeException e)
		{
			engine.showMessage(e.toString());				
		}
	}

	private CareSpellVo populateCareSpellInstanceData()
	{
		CareSpellVo voCareSpell = new CareSpellVo();
		
		voCareSpell.setStartDate(new Date());
		voCareSpell.setEndDate(null);
		voCareSpell.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		return voCareSpell;
	}
	
	private void populateEpisodeOfCareInstanceData(EpisodeofCareVo voEpisodeOfCare, HcpLiteVo voHCPLite)
	{
		if(voEpisodeOfCare == null)
			voEpisodeOfCare = new EpisodeofCareVo();
		
		voEpisodeOfCare.setRelationship(CareSpelltoEpisodeRelationship.PRIMARY);
		
		ServiceVo voServ = new ServiceVo();
		voServ.setID_Service(form.getLocalContext().getSelectedReferralService().getID_Service());
		voServ = domain.getServiceById(voServ);
		voEpisodeOfCare.setSpecialty(voServ != null && voServ.getSpecialtyIsNotNull()? voServ.getSpecialty() : Specialty.DAD);
		voEpisodeOfCare.setResponsibleHCP(voHCPLite);
		voEpisodeOfCare.setStartDate(new Date());
		voEpisodeOfCare.setEndDate(null);
	}
	

	private EpisodeofCareVo populateEpisodeOfCare(CareSpellVo voCareSpell, HcpLiteVo voHCPLite)
	{
		EpisodeofCareVo voEpisodeOfCare = new EpisodeofCareVo();
		populateEpisodeOfCareInstanceData(voEpisodeOfCare, voHCPLite);
		voEpisodeOfCare.setCareSpell(voCareSpell);

		if(voCareSpell.getEpisodes() == null)
			voCareSpell.setEpisodes(new  EpisodeofCareVoCollection());
		
		voCareSpell.getEpisodes().add(voEpisodeOfCare);
		
		return voEpisodeOfCare;
	}

	private CareContextVo populateCareContextInstanceData(CareContextVo voCareContext, HcpLiteVo voHCPLite)
	{
		if(voCareContext == null)
			voCareContext = new CareContextVo();
			
		voCareContext.setContext(ContextType.REFERRAL); //http://jira/browse/WDEV-20263
		voCareContext.setStartDateTime(new DateTime());
		voCareContext.setEndDateTime(null);
		voCareContext.setLocationType(null);	
		voCareContext.setPasEvent(null);
		
		//WDEV-22259
		voCareContext.setResponsibleHCP(voHCPLite);
		
		CareContextStatusHistoryVo firstStatus = new CareContextStatusHistoryVo();
		firstStatus.setStatus(CareContextStatus.OPEN);
		firstStatus.setStatusDateTime(new DateTime());
		
		voCareContext.setCurrentStatus(firstStatus);
		voCareContext.setStatusHistory(new CareContextStatusHistoryVoCollection());
		voCareContext.getStatusHistory().add(firstStatus);
		//WDEV-22259 -- end
		
		return voCareContext;
	}
	

	private CareContextVo populateCareContext(EpisodeofCareVo voEpisodeOfCare, HcpLiteVo voHCPLite)
	{
		CareContextVo voCareContext = new CareContextVo();
		populateCareContextInstanceData(voCareContext,voHCPLite);
		voCareContext.setEpisodeOfCare(voEpisodeOfCare);
		if(voEpisodeOfCare.getCareContexts() == null)
			voEpisodeOfCare.setCareContexts(new CareContextVoCollection());
			
		voEpisodeOfCare.getCareContexts().add(voCareContext);
		
		return voCareContext;
	}
	
	@Override
	protected void onCcPatientSearchValueChanged() throws PresentationLogicException 
	{
		if (form.lyrPage().tabPagePatientSearch().ccPatientSearch().getEvent() != PatientSearchEvent.NONE)
		{
			form.getGlobalContext().RefMan.setCatsReferral(null);
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);//wdev-12682
			form.getGlobalContext().Core.setPatientShort(null);	
			form.getLocalContext().setbDemographicsSaved(false);
			form.lyrPage().tabPageReferral().ccReferralDetails().setValue(null, null);
			form.lyrPage().tabPageReferral().ccReferralDetails().setInitializedBooleanToFalse();
			
			manageTabs();

			PatientShort patient = null;
			if(form.lyrPage().tabPagePatientSearch().ccPatientSearch().getEvent().equals(PatientSearchEvent.PATIENT_SELECTED))
			{
				patient = form.lyrPage().tabPagePatientSearch().ccPatientSearch().getSelectedPatient();
				form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
			}
			else if(form.lyrPage().tabPagePatientSearch().ccPatientSearch().getEvent().equals(PatientSearchEvent.NEW_PATIENT))
			{
				form.getGlobalContext().Core.setPatientShort(null);
				form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
				form.lyrPage().tabPageDemographics().ccDemographics().displayDemographics();
			}
			
			form.lyrPage().showtabPageDemographics();
			form.lyrPage().settabPageDemographicsEnabled(true);
			form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
			form.lyrPage().tabPageDemographics().ccDemographics().setValue(patient);
			form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
		}
		// WDEV-20015 -- starts here
		else // on patient search on component clear all contexts for the rest of the tabs
		{
			form.getGlobalContext().RefMan.setCatsReferral(null);
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);
			form.getGlobalContext().Core.setPatientShort(null);	
			form.getGlobalContext().Core.setPatientFilter(null);
			form.getGlobalContext().Core.setPatientToBeDisplayed(null);
			form.getLocalContext().setbDemographicsSaved(false);
			form.lyrPage().tabPageDemographics().setHeaderEnabled(false);
			form.lyrPage().tabPageReferral().setHeaderEnabled(false);
			form.lyrPage().tabPageReferral().ccReferralDetails().setValue(null, null);
			form.lyrPage().tabPageReferral().ccReferralDetails().setInitializedBooleanToFalse();
		}
		//- WDEV-20015 -- ends here
	}
	@Override
	protected void onCcDemographicsValueChanged() throws PresentationLogicException 
	{
		if (form.lyrPage().tabPageDemographics().ccDemographics().getPDSPatientEdited())
		{
			if (form.getGlobalContext().Core.getPatientShortIsNotNull())
			{
				form.getLocalContext().setbDemographicsSaved(Boolean.TRUE); 
				manageTabs();
				form.lyrPage().showtabPageReferral();
			}
			else
			{
				form.getLocalContext().setbDemographicsSaved(Boolean.FALSE);
	
				form.lyrPage().settabPageDemographicsEnabled(true);
				form.lyrPage().tabPageDemographics().setHeaderEnabled(true);
				form.lyrPage().tabPageDemographics().ccDemographics().setMode(FormMode.EDIT);
				form.lyrPage().showtabPageDemographics();
			}
		}
		
		return;
	}
	@Override
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{	
		if (form.lyrPage().tabPayor().Group1().getValue().equals(Group1Enumeration.rdoInsurance))
		{
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderVisible(true);
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderEnabled(true);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().showtabInsuranceDetails();
		}
		else if (form.lyrPage().tabPayor().Group1().getValue().equals(Group1Enumeration.rdo3rdParty))
		{
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderVisible(true);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderEnabled(true);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().showtab3rdParty();
		}
		else if (form.lyrPage().tabPayor().Group1().getValue().equals(Group1Enumeration.rdoSelfPay))
		{
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderVisible(true);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderEnabled(true);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().showtabSelfPay();
		}
		else if (form.lyrPage().tabPayor().Group1().getValue().equals(Group1Enumeration.rdoNHS))
		{
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabInsuranceDetails().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tab3rdParty().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderVisible(false);
			form.lyrPage().tabPayor().lyr1().tabSelfPay().setHeaderEnabled(false);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderVisible(true);
			form.lyrPage().tabPayor().lyr1().tabNHS().setHeaderEnabled(true);
			form.lyrPage().tabPayor().lyr1().showtabNHS();
		}
	}
	//WDEV-19330 
	@Override
	protected void onCcUploadDocValueChanged()throws PresentationLogicException 
	{
		if (form.getGlobalContext().RefMan.getCatsReferralWizard() != null)
		{
			form.lyrPage().tabPageReferral().ccReferralDetails().setValue(form.getGlobalContext().RefMan.getCatsReferralWizard().getReferralDetails(), form.getGlobalContext().RefMan.getCatsReferralWizard());
			//WDEV-21176
			boolean isEmergReferralAndNotReferredByPatient = isNotSelfReferralAndHasEmergencyUrgency(form.getGlobalContext().RefMan.getCatsReferralWizard());
			boolean hadGPLetterUploaded = Boolean.TRUE.equals(form.getGlobalContext().RefMan.getCatsReferralWizard().getHasReferralLetter());
			if (isEmergReferralAndNotReferredByPatient && hadGPLetterUploaded)
			{
				if(save())		
				{
					if(isDialog())
						engine.close(DialogResult.OK);
					else
					{	
						open();
						updateControlState();
						manageTabs();
					}					
				}
			}			
		}	
	}
	
	protected void onCcReferralDetailsValueChanged() throws PresentationLogicException
	{
		//WDEV-23904
		if (Boolean.TRUE.equals(form.lyrPage().tabPageReferral().ccReferralDetails().isBreachDateAcknowledged()))
				referralCreationHandler();		
	}
 }
