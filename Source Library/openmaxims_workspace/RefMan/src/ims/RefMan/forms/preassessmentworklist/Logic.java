//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.preassessmentworklist;

import ims.RefMan.forms.preassessmentworklist.GenForm.GroupTheatreEnumeration;
import ims.RefMan.forms.preassessmentworklist.GenForm.grdInformationRequiredRow;
import ims.RefMan.vo.BookAppointmentForPreAssessmentWorklistVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.PatientElectiveListForPreAssessmentWorklistVo;
import ims.RefMan.vo.PatientElectiveListForPreAssessmentWorklistVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PreAssessmentOutcomeForWorklistVo;
import ims.RefMan.vo.PreAssessmentWorklistSearchCriteriaVo;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.clinical.vo.lookups.PreAssessmentInformationRequiredCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PersonName;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ProcedureNameVo;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_PATIENT_NAME = 0;
	private static final int COL_IDENTIFIER = 1;
	private static final int COL_REFERRAL_DATE = 2;
	private static final int COL_BREACH_DATE = 3;
	private static final int COL_URGENCY = 4;
	private static final int COL_REFERAL_SERVICE = 5;
	private static final int COL_PROCEDURE = 6;
	private static final int COL_SUITABLE_FOR_TELEPHONE = 7;
	private static final int COL_PREASSESSMENT_APPOINTMENT = 8;
	
	

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
		
	}
	private void open()
	{

		if (form.getGlobalContext().RefMan.getPreAssessmentWorklistSearchCriteriaIsNotNull())
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().RefMan.getPreAssessmentWorklistSearchCriteria());
			doSearch();
		}
		
		form.setMode(FormMode.VIEW);
		updateControlsState();
		
		
	}
	private PreAssessmentWorklistSearchCriteriaVo populateSearchCriteriaDataFromScreen()
	{
		PreAssessmentWorklistSearchCriteriaVo criteria = new PreAssessmentWorklistSearchCriteriaVo();
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());//WDEV-22781
		
		criteria.setService(form.qmbService().getValue());
		criteria.setServices(form.getGlobalContext().RefMan.getReferralServiceSearchList());
		criteria.setProcedure(form.qmbProcedure().getValue());
		criteria.setAnaestheticType(form.cmbAnaestheticType().getValue());
		criteria.setUrgency(form.cmbUrgency().getValue());
		criteria.setBreachDateFrom(form.dteBreachFrom().getValue());
		criteria.setBreachDateTo(form.dteBreachTo().getValue());
		criteria.setTheatreType(GroupTheatreEnumeration.rdoDaySurgeryTheatre.equals(form.GroupTheatre().getValue()) ? TheatreType.DAYCASE : (GroupTheatreEnumeration.rdoInpatientTheatre.equals(form.GroupTheatre().getValue()) ? TheatreType.INPATIENT : null));
		criteria.setPreAssessmentRequired(form.chkPreAssessmentRequired().getValue());
		criteria.setFitForSurgery(form.chkFitforSurgery().getValue());
		criteria.setNotFitForSurgery(form.chkNotFitforSurgery().getValue());
		criteria.setPreAssessmentOutcomePending(form.chkPreAssessmentOutcomePending().getValue());
		criteria.setWaitingFor(getSelectedWaitingForFromGrid());
		
		//WDEV-21037
		criteria.setWaitingList(form.chkWaitingList().getValue());
		criteria.setSurveillancePlannedList(form.chkSurveillancePlannedList().getValue());
		criteria.setPlannedFrom(form.dtePlannedFrom().getValue());
		criteria.setPlannedTo(form.dtePlannedTo().getValue());
		criteria.setAddedToday(form.chkAddedToday().getValue());
		criteria.setIncludeEndoscopy(form.chkIncludeEndoscopy().getValue()); //WDEV-23462
		criteria.setPastAppointment(form.chkPastAppointments().getValue());
		criteria.setFutureAppointment(form.chkFutureAppointment().getValue());
		//WDEV-22781
		criteria.setPatIdType(dispIdType);
		criteria.setPatientIdentifier(form.txtIdentifier().getValue());
		
		return criteria;
		
	}
	private PreAssessmentInformationRequiredCollection getSelectedWaitingForFromGrid()
	{
		PreAssessmentInformationRequiredCollection collWaitingFor=new PreAssessmentInformationRequiredCollection();
		
		for (int i=0;i<form.grdInformationRequired().getRows().size();i++)
		{
			if (form.grdInformationRequired().getRows().get(i).getColSelect())
			{
				collWaitingFor.add(form.grdInformationRequired().getRows().get(i).getValue());
			}
		}
		
		return collWaitingFor;
		
	}
	
	private boolean doSearch()
	{
		form.dyngrdPreAssessment().getRows().clear();

		if (isSearchCriteriaValid())
		{
			PatientElectiveListForPreAssessmentWorklistVoCollection preAssessmentsColl = domain.listPreAssessments(populateSearchCriteriaDataFromScreen());
			if (preAssessmentsColl == null || preAssessmentsColl.size() == 0)
			{
				engine.showMessage("No records found.");
				return true;
			}
			
			if (preAssessmentsColl!=null)
			{
				preAssessmentsColl.sort(new BreachDateComparator(SortOrder.ASCENDING));
				populateScreenFromData(preAssessmentsColl);
			}
			return true;
		}

		return false;
	}
	
	private void populateScreenFromData(PatientElectiveListForPreAssessmentWorklistVoCollection preAssessmentsColl)
	{
		form.dyngrdPreAssessment().getRows().clear();
		
		if (preAssessmentsColl==null || preAssessmentsColl.size()==0)
			return;
		
		for (int i=0;i<preAssessmentsColl.size();i++)
		{
			addRowToDynGrid(preAssessmentsColl.get(i));
		}
		
	}
	
	private void addRowToDynGrid(PatientElectiveListForPreAssessmentWorklistVo preAssessment)
	{
		if (preAssessment==null)
			return;
		
		DynamicGridRow newRow = form.dyngrdPreAssessment().getRows().newRow();
		newRow.setValue(preAssessment);
		
		if (preAssessment.getPatient().getNameIsNotNull())
		{
			DynamicGridCell cellPatName = newRow.getCells().newCell(getColumnDynGrid(COL_PATIENT_NAME), DynamicCellType.STRING);
			cellPatName.setValue(preAssessment.getPatient().getName()!=null ? getPatNameSurnameFirst(preAssessment.getPatient().getName()): null);
			cellPatName.setTooltip(preAssessment.getPatient().getName()!=null ? getPatNameSurnameFirst(preAssessment.getPatient().getName()): null);
		}
		
		if (preAssessment.getPatient().getDisplayId() != null )
		{
			DynamicGridCell cellPatID = newRow.getCells().newCell(getColumnDynGrid(COL_IDENTIFIER), DynamicCellType.STRING);
			cellPatID.setValue(preAssessment.getPatient().getDisplayId().getIdValue());
			cellPatID.setTooltip(preAssessment.getPatient().getDisplayId().getIdValue());
		}
		
		if (preAssessment.getReferral().getReferralDetailsIsNotNull() && preAssessment.getReferral().getReferralDetails().getDateOfReferral()!=null)
		{
			DynamicGridCell cellRefDate = newRow.getCells().newCell(getColumnDynGrid(COL_REFERRAL_DATE), DynamicCellType.STRING);
			cellRefDate.setValue(preAssessment.getReferral().getReferralDetails().getDateOfReferral().toString());
			cellRefDate.setTooltip(preAssessment.getReferral().getReferralDetails().getDateOfReferral().toString());
		} 
		
		if (preAssessment.getReferral().getReferralDetailsIsNotNull() && preAssessment.getReferral().getReferralDetails().getEnd18WWIsNotNull())
		{
			DynamicGridCell cellBreachDate = newRow.getCells().newCell(getColumnDynGrid(COL_BREACH_DATE), DynamicCellType.STRING);
			cellBreachDate.setValue(preAssessment.getReferral().getReferralDetails().getEnd18WW().toString());
			cellBreachDate.setTooltip(preAssessment.getReferral().getReferralDetails().getEnd18WW().toString());
		} 
		
		if (preAssessment.getReferral().getUrgencyIsNotNull() )
		{
			DynamicGridCell cellUrgency = newRow.getCells().newCell(getColumnDynGrid(COL_URGENCY), DynamicCellType.STRING);
			cellUrgency.setValue(preAssessment.getReferral().getUrgency().getText());
			cellUrgency.setTooltip(preAssessment.getReferral().getUrgency().toString());
		} 
		
		if (preAssessment.getReferral().getReferralDetailsIsNotNull() && preAssessment.getReferral().getReferralDetails().getServiceIsNotNull())
		{
			DynamicGridCell cellRefService = newRow.getCells().newCell(getColumnDynGrid(COL_REFERAL_SERVICE), DynamicCellType.STRING);
			cellRefService.setValue(preAssessment.getReferral().getReferralDetails().getService().getServiceName());
			cellRefService.setTooltip(preAssessment.getReferral().getReferralDetails().getService().getServiceName());
		}
		
		if (preAssessment.getPrimaryProcedureIsNotNull() || preAssessment.getSecondaryProcedureIsNotNull() || preAssessment.getOtherProceduresIsNotNull())
		{
			DynamicGridCell cellProcedures = newRow.getCells().newCell(getColumnDynGrid(COL_PROCEDURE), DynamicCellType.STRING);
			//cellProcedures.setValue(preAssessment.getPrimaryProcedure().getProcedureName());
			//cellProcedures.setTooltip(preAssessment.getPrimaryProcedure().getProcedureName());
			String strProceduresTooltip=getProceduresTooltip(preAssessment);
			String strProcedures = getProcedures(preAssessment);
			
			cellProcedures.setValue(strProcedures);
			cellProcedures.setTooltip(strProceduresTooltip);
		}
		
		//WDEV-21037
		if (Boolean.TRUE.equals(preAssessment.getIsSuitableForTelephoneAssessment()))
		{
			DynamicGridCell cellSuitableForTelephone = newRow.getCells().newCell(getColumnDynGrid(COL_SUITABLE_FOR_TELEPHONE), DynamicCellType.IMAGE);
			cellSuitableForTelephone.setValue(form.getImages().CcoSched.SuitableForTelephone16);
			cellSuitableForTelephone.setTooltip("Suitable For Telephone Pre-Assessment");
		}

		//WDEV-21037
		if (Boolean.TRUE.equals(preAssessment.getPreAssessmentAppointmentIsNotNull()))
		{
			DynamicGridCell cellPreAssessmentAppt = newRow.getCells().newCell(getColumnDynGrid(COL_PREASSESSMENT_APPOINTMENT), DynamicCellType.IMAGE);
			cellPreAssessmentAppt.setValue(getImageForPreAssessmentApptColumn(preAssessment.getPreAssessmentAppointment()));
			cellPreAssessmentAppt.setTooltip(getTooltipForPreAssessmentApptColumn(preAssessment.getPreAssessmentAppointment()));
		}
				
		//colour the rows
		boolean isfurtehrInformationsRequired = isFurtherInfoRequired(preAssessment.getPreAssessmentOutcome()); //orDetailsOutstanding from Bo is True
		
		if (preAssessment.getPreAssessmentOutcomeIsNotNull() && Boolean.FALSE.equals(preAssessment.getPreAssessmentOutcome().getFitToProceed()))
		{
			newRow.setBackColor(Color.Red);
		}
		else if (preAssessment.getPreAssessmentOutcomeIsNotNull() && Boolean.TRUE.equals(preAssessment.getPreAssessmentOutcome().getFitToProceed()) )
		{
			newRow.setBackColor(Color.Green);
		}
		else if (preAssessment.getPreAssessmentOutcomeIsNotNull() && isfurtehrInformationsRequired)
		{
			newRow.setBackColor(Color.LightYellow);
		}
		
	}
	
	//WDEV-21037
	private Image getImageForPreAssessmentApptColumn(BookAppointmentForPreAssessmentWorklistVo preAssessmentAppointment)
	{
		if (preAssessmentAppointment==null || preAssessmentAppointment.getApptStatus()==null)
			return null;
		
		Image img=null;
		
		if (Status_Reason.BOOKED.equals(preAssessmentAppointment.getApptStatus()))
		{
			img=form.getImages().CcoSched.AppointmentBooked16;
		}
		else if (Status_Reason.ARRIVAL.equals(preAssessmentAppointment.getApptStatus()))
		{
			img=form.getImages().CcoSched.AppointmentArrival16;
		}
		else if (Status_Reason.SEEN.equals(preAssessmentAppointment.getApptStatus()))
		{
			img=form.getImages().CcoSched.AppointmentSeen16;
		}
		else if (Status_Reason.DNA.equals(preAssessmentAppointment.getApptStatus()))
		{
			img=form.getImages().CcoSched.AppointmentDNA16;
		}
		else if (Status_Reason.CANCELLED.equals(preAssessmentAppointment.getApptStatus()))
		{
			img=form.getImages().CcoSched.AppointmentCancelled16;
		}
		return img;
	}
	
	//WDEV-21037
	private String getTooltipForPreAssessmentApptColumn(BookAppointmentForPreAssessmentWorklistVo preAssessmentAppointment)
	{
		String strTooltip="";
		
		if (preAssessmentAppointment==null)
			return strTooltip;
		
		if (preAssessmentAppointment.getSessionIsNotNull()&& preAssessmentAppointment.getSession().getNameIsNotNull())
		{
			
			strTooltip+="<b>Clinic: </b>" + preAssessmentAppointment.getSession().getName() + "<br>";
		}
		
		if (preAssessmentAppointment.getAppointmentDateIsNotNull())
		{
			strTooltip+="<b>Appointment Date: </b>" +preAssessmentAppointment.getAppointmentDate() + "<br>";
		}
		
		if (preAssessmentAppointment.getApptStatusIsNotNull())
		{
			strTooltip+="<b>Status: </b>" +preAssessmentAppointment.getApptStatus().getText() + "<br>";
		}
		
		return strTooltip;
	}
	
	private String getPatNameSurnameFirst(PersonName patName) //WDEV-20395
	{
		if (patName==null)
			return "";
		
		String strPatName = "";
		if (patName.getSurnameIsNotNull())
			strPatName+=patName.getSurname();
		
		if (patName.getForenameIsNotNull())
			strPatName+=", "+patName.getForename();
		
		if (patName.getTitleIsNotNull())
			strPatName+=", "+patName.getTitle().toString();
		
		return strPatName;
	}
	
	private boolean isFurtherInfoRequired(PreAssessmentOutcomeForWorklistVo preAssessmentOutcome)
	{
		if (preAssessmentOutcome==null || preAssessmentOutcome.getWaitingForDetails()==null || preAssessmentOutcome.getWaitingForDetails().size()==0)
			return false;
		
		for (int i=0;i<preAssessmentOutcome.getWaitingForDetails().size();i++)
		{
			if (!Boolean.TRUE.equals(preAssessmentOutcome.getWaitingForDetails().get(i).getReceived()))
				return true;
		}
		
		return false;
	}
	private String getProceduresTooltip(PatientElectiveListForPreAssessmentWorklistVo preAssessment)
	{
		String strTooltip="";
		if (preAssessment==null)
			return strTooltip;
		
		if (preAssessment.getPrimaryProcedure()!=null)
		{
			
			strTooltip+="<b>Primary Procedure: </b>" + preAssessment.getPrimaryProcedure().getProcedureName() + "<br>";
		}
		
		if (preAssessment.getSecondaryProcedure()!=null)
		{
			strTooltip+="<b>Secondary Procedure: </b>" +preAssessment.getSecondaryProcedure().getProcedureName() + "<br>";
		}
		
		if (preAssessment.getOtherProcedures()!=null && preAssessment.getOtherProcedures().size()>0)
		{
			strTooltip+="<b>Other Procedures: </b>";
			String strOtherProcedures="";
			for (int i=0;i<preAssessment.getOtherProcedures().size(); i++)
			{
				ProcedureNameVo otherProc = preAssessment.getOtherProcedures().get(i);
				strOtherProcedures+=(strOtherProcedures.length()>0 ? "," : "" ) +otherProc.getProcedureName();
			}
			strTooltip+=strOtherProcedures;
		}
		
		return strTooltip;
	}
	private String getProcedures(PatientElectiveListForPreAssessmentWorklistVo preAssessment)
	{
		String strProcedures="";
		if (preAssessment==null)
			return strProcedures;
		
		if (preAssessment.getPrimaryProcedure()!=null)
		{
			strProcedures+=preAssessment.getPrimaryProcedure().getProcedureName();
		}
		
		if (preAssessment.getSecondaryProcedure()!=null)
		{
			strProcedures+=(strProcedures.length()>0 ? "," : "" ) +preAssessment.getSecondaryProcedure().getProcedureName();
		}
		
		if (preAssessment.getOtherProcedures()!=null && preAssessment.getOtherProcedures().size()>0)
		{
			String strOtherProcedures="";
			for (int i=0;i<preAssessment.getOtherProcedures().size(); i++)
			{
				ProcedureNameVo otherProc = preAssessment.getOtherProcedures().get(i);
				strOtherProcedures+=(strOtherProcedures.length()>0 ? "," : "" ) +otherProc.getProcedureName();
			}
			strProcedures+=strOtherProcedures;
		}
		
		return strProcedures;
	}
	
	private boolean isSearchCriteriaValid() //WDEV-21037
	{
		List<String> uiErrors = new ArrayList<String>();
		
		Date dateFrom = form.dteBreachFrom().getValue();
		Date dateTo = form.dteBreachTo().getValue();

		if (dateFrom!= null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add("'Breach Date From' cannot be greater than 'Breach Date To'");
		}
		
		if (form.dtePlannedFrom().getValue()!= null && form.dtePlannedTo().getValue() != null && form.dtePlannedTo().getValue().isLessThan(form.dtePlannedFrom().getValue()))
		{
			uiErrors.add("'Planned Date From' cannot be greater than 'Planned Date To'");
		}

		//if (isAtLeastOneSearchFieldCompleted())
		//	return true;

		//engine.showMessage("Complete at least one search field.", "Validation error", MessageButtons.OK, MessageIcon.ERROR);

		if (!Boolean.TRUE.equals(form.chkWaitingList().getValue()) && !Boolean.TRUE.equals(form.chkSurveillancePlannedList().getValue()))
		{
			uiErrors.add("'Waiting List' or 'Surveillance / Planned List' is mandatory.");
		}
		
    	String[] uiResults = new String[uiErrors.size()];
    	uiErrors.toArray(uiResults);
    
        if(uiResults != null && uiResults.length > 0)
        {
        	engine.showErrors(uiResults);
        	return false;
        }

		return true;
	}
	
	private boolean isAtLeastOneSearchFieldCompleted()
	{
		return form.qmbService().getValue()!=null || form.getGlobalContext().RefMan.getReferralServiceSearchListIsNotNull() || form.qmbProcedure().getValue() != null || form.cmbAnaestheticType().getValue()!=null || form.cmbUrgency().getValue()!=null  || form.dteBreachFrom().getValue() != null || form.dteBreachTo().getValue() != null || GroupTheatreEnumeration.rdoDaySurgeryTheatre.equals(form.GroupTheatre().getValue()) || GroupTheatreEnumeration.rdoInpatientTheatre.equals(form.GroupTheatre().getValue()) || Boolean.TRUE.equals(form.chkPreAssessmentRequired().getValue() || Boolean.TRUE.equals(form.chkNotFitforSurgery().getValue()) || Boolean.TRUE.equals(form.chkFitforSurgery().getValue()) ||Boolean.TRUE.equals(form.chkPreAssessmentOutcomePending().getValue()));
	}
	
	private void populateSearchCriteriaScreenFromData(PreAssessmentWorklistSearchCriteriaVo criteria)
	{
		clearScreen();

		if (criteria == null)
			return;
		if (criteria.getService()!=null)
		{
			form.qmbService().newRow(criteria.getService(), criteria.getService().getServiceName());
			form.qmbService().setValue(criteria.getService());
		}
		form.getGlobalContext().RefMan.setReferralServiceSearchList(criteria.getServices());
		setServiceLabelValue(listServices());
		if (criteria.getProcedure()!=null)
		{
			form.qmbProcedure().newRow(criteria.getProcedure(), criteria.getProcedure().getProcedureName());
			form.qmbProcedure().setValue(criteria.getProcedure());
		}
		form.cmbAnaestheticType().setValue(criteria.getAnaestheticType());
		form.cmbUrgency().setValue(criteria.getUrgency());
		form.dteBreachFrom().setValue(criteria.getBreachDateFrom());
		form.dteBreachTo().setValue(criteria.getBreachDateTo());
		form.GroupTheatre().setValue(TheatreType.DAYCASE.equals(criteria.getTheatreType()) ? GroupTheatreEnumeration.rdoDaySurgeryTheatre : (TheatreType.INPATIENT.equals(criteria.getTheatreType()) ? GroupTheatreEnumeration.rdoInpatientTheatre : null));
		
		form.chkPreAssessmentRequired().setValue(criteria.getPreAssessmentRequired());
		form.chkNotFitforSurgery().setValue(criteria.getNotFitForSurgery());
		form.chkFitforSurgery().setValue(criteria.getFitForSurgery());
		form.chkPreAssessmentOutcomePending().setValue(criteria.getPreAssessmentOutcomePending());
		
		//WDEV-21037
		form.chkWaitingList().setValue(criteria.getWaitingList());
		form.chkSurveillancePlannedList().setValue(criteria.getSurveillancePlannedList());
		form.dtePlannedFrom().setValue(criteria.getPlannedFrom());
		form.dtePlannedTo().setValue(criteria.getPlannedTo());
		form.chkAddedToday().setValue(criteria.getAddedToday());
		form.chkIncludeEndoscopy().setValue(criteria.getIncludeEndoscopy()); //WDEV-23462
		form.chkPastAppointments().setValue(criteria.getPastAppointment());
		form.chkFutureAppointment().setValue(criteria.getFutureAppointment());
		
		if (criteria.getPreAssessmentOutcomePending())
		{
			populateWaitingForGridWithLookups();
			if (criteria.getWaitingForIsNotNull() && criteria.getWaitingFor().size()>0)
			{
				for (int i=0;i<form.grdInformationRequired().getRows().size();i++)
				{
					if (criteria.getWaitingFor().contains(form.grdInformationRequired().getRows().get(i).getValue()))
					{
						form.grdInformationRequired().getRows().get(i).setColSelect(true);
					}
				}
			}
		}
	}
	
	private void populateWaitingForGridWithLookups()
	{
		form.grdInformationRequired().getRows().clear();
		ims.clinical.vo.lookups.PreAssessmentInformationRequiredCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getPreAssessmentInformationRequired(this.domain.getLookupService());
		for(int i = 0; i < lookupCollection.size(); i++)
		{
			grdInformationRequiredRow row = form.grdInformationRequired().getRows().newRow();
			row.setColWaitingFor(lookupCollection.get(i).getText());
			row.setTooltipForColWaitingFor(lookupCollection.get(i).getText());
			row.setValue(lookupCollection.get(i));
		}
	}
	private String listServices() 
	{
		if(form.getGlobalContext().RefMan.getReferralServiceSearchList() == null || form.getGlobalContext().RefMan.getReferralServiceSearchList().size() == 0)
			return null;
		
		StringBuffer displayText = new StringBuffer();
		
		for( ServiceShortVo servicrReferral : form.getGlobalContext().RefMan.getReferralServiceSearchList())
		{
			if( servicrReferral == null)
				continue;
			
			if(displayText.length() > 0)
				displayText.append(", ");
			
			displayText.append(servicrReferral.getServiceName());
		}
		
		if( displayText.length() > 0)
			displayText.insert(0, "Service(s):       ");
		
		return displayText.toString();
	}
	
	private void setServiceLabelValue(String services) 
	{
		form.lblServicesColl().setValue(null);
		form.lblServicesColl().setTooltip(null);
		
		if(services == null || services.length() == 0)
			return;
		
		form.lblServicesColl().setValue(services.toString().length() > 70 ? services.toString().substring(0, 70) + "..." : services.toString());
		form.lblServicesColl().setTooltip(services);
	}
	
	private void clearScreen()
	{
		clearSearchCriteria();
		form.dyngrdPreAssessment().getRows().clear();
	}
	
	private void clearSearchCriteria()
	{
		form.qmbService().setValue(null);
		form.getGlobalContext().RefMan.setReferralServiceSearchList(null);
		setServiceLabelValue(listServices());
		form.qmbProcedure().setValue(null);
		form.cmbAnaestheticType().setValue(null);
		form.cmbUrgency().setValue(null);
		form.dteBreachFrom().setValue(null);
		form.dteBreachTo().setValue(null);
		form.GroupTheatre().setValue(null);
		
		form.chkPreAssessmentRequired().setValue(null);
		form.chkNotFitforSurgery().setValue(null);
		form.chkFitforSurgery().setValue(null);
		form.chkPreAssessmentOutcomePending().setValue(null);
		
		form.grdInformationRequired().getRows().clear();
		
		//WDEV-21037
		form.chkWaitingList().setValue(null);
		form.chkSurveillancePlannedList().setValue(null);
		form.dtePlannedFrom().setValue(null);
		form.dtePlannedTo().setValue(null);
		form.chkAddedToday().setValue(null);
		form.chkIncludeEndoscopy().setValue(null); //WDEV-23462
		form.chkPastAppointments().setValue(null);
		form.chkFutureAppointment().setValue(null);
		
		//WDEV-22781
		form.txtIdentifier().setValue(null);
		
	}
	private void initialize()
	{
		//WDEV-22781
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		form.lblPatIdentifier().setValue(dispIdType.getText().length() > 13 ? dispIdType.getText().substring(0, 13) + "...:" : dispIdType.getText() + ":");
		form.lblPatIdentifier().setTooltip(dispIdType.getText().length() > 13 ? dispIdType.getText() : "");
		//WDEV-22781 ends here
		
		form.cmbAnaestheticType().removeRow(AnaestheticType.LA_PRE_ASSESSMENT);
		initializePreAssessmentDynGrid();
		form.chkWaitingList().setValue(true); //WDEV-21037
		
	}
	private void initializePreAssessmentDynGrid()
	{
		form.dyngrdPreAssessment().clear();

		DynamicGridColumn column;

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		form.dyngrdPreAssessment().setReadOnly(true);
		
		column = form.dyngrdPreAssessment().getColumns().newColumn("Patient Name");
		column.setIdentifier(COL_PATIENT_NAME);
		column.setWidth(165);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPreAssessment().getColumns().newColumn(dispIdType.getText());
		column.setIdentifier(COL_IDENTIFIER);
		column.setWidth(80);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPreAssessment().getColumns().newColumn("Referral Date");
		column.setIdentifier(COL_REFERRAL_DATE);
		column.setWidth(95);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdPreAssessment().getColumns().newColumn("Breach Date");
		column.setIdentifier(COL_BREACH_DATE);
		column.setWidth(95);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdPreAssessment().getColumns().newColumn("Referral Urgency");
		column.setIdentifier(COL_URGENCY);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPreAssessment().getColumns().newColumn("Referral Service");
		column.setIdentifier(COL_REFERAL_SERVICE);
		column.setWidth(120);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPreAssessment().getColumns().newColumn("Procedure");
		column.setIdentifier(COL_PROCEDURE);
		column.setWidth(120);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		//WDEV-21037
		column = form.dyngrdPreAssessment().getColumns().newColumn("");
		column.setIdentifier(COL_SUITABLE_FOR_TELEPHONE);
		column.setWidth(25);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dyngrdPreAssessment().getColumns().newColumn("");
		column.setIdentifier(COL_PREASSESSMENT_APPOINTMENT);
		column.setWidth(25);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);

	}
	
	private DynamicGridColumn getColumnDynGrid(Integer identifier)
	{
		return form.dyngrdPreAssessment().getColumns().getByIdentifier(identifier);
	}
	
	@Override
	protected void onDyngrdPreAssessmentRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		form.getLocalContext().setSelectedRecord((PatientElectiveListForPreAssessmentWorklistVo) form.dyngrdPreAssessment().getValue());
		setGlobalContexts(form.getLocalContext().getSelectedRecord());
		updateControlsState();
	}
	private void setGlobalContexts(PatientElectiveListForPreAssessmentWorklistVo patElectiveList)
	{
		form.getGlobalContext().RefMan.setPatientElectiveListRef(patElectiveList);
		if( patElectiveList!=null)
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShortVo(patElectiveList.getPatient()));
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShortVo(patElectiveList.getReferral().getCareContext()));
			form.getGlobalContext().RefMan.setCatsReferral(patElectiveList.getReferral());
		}
	}
	@Override
	protected void onDyngrdPreAssessmentColumnHeaderClicked(ims.framework.controls.DynamicGridColumn column)
	{
		PatientElectiveListForPreAssessmentWorklistVoCollection values = new PatientElectiveListForPreAssessmentWorklistVoCollection();
		for (int i=0;i<form.dyngrdPreAssessment().getRows().size();i++)
		{
			values.add((PatientElectiveListForPreAssessmentWorklistVo) form.dyngrdPreAssessment().getRows().get(i).getValue());
		}
		
		if (values==null || values.size()<=1)
			return;
		
		switch((Integer)column.getIdentifier())
		{
			case COL_BREACH_DATE:
				form.getLocalContext().setBreachDateColumnSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getBreachDateColumnSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new BreachDateComparator(form.getLocalContext().getBreachDateColumnSortOrder()));
			break;
				
			case COL_REFERRAL_DATE:
				form.getLocalContext().setReferralDateColumnSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getReferralDateColumnSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ReferralDateComparator(form.getLocalContext().getReferralDateColumnSortOrder()));
			break;	
			
			case COL_SUITABLE_FOR_TELEPHONE: //WDEV-21037
				form.getLocalContext().setSuitableForTelephoneColumnSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getSuitableForTelephoneColumnSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new SuitableForTelephoneImageComparator(form.getLocalContext().getSuitableForTelephoneColumnSortOrder()));
			break;
			
			case COL_PREASSESSMENT_APPOINTMENT: //WDEV-21037 TO DO
				form.getLocalContext().setBookApptStatusColumnSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getBookApptStatusColumnSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ApptStatusImageComparator(form.getLocalContext().getBookApptStatusColumnSortOrder()));
			break;
		}
			
		populateScreenFromData(values);
	}
	@Override
	protected void onRadioButtonGroupTheatreValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onChkPreAssessmentOutcomePendingValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		populateWaitingForGridWithLookups();
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.pnlInformationRequired().setVisible(form.chkPreAssessmentOutcomePending().getValue());
		form.grdInformationRequired().setVisible(form.chkPreAssessmentOutcomePending().getValue());
		form.grdInformationRequired().setEnabled(true);
		form.grdInformationRequired().setReadOnly(false);
		
		boolean isRowSelected = form.dyngrdPreAssessment().getValue()!=null;
		form.getContextMenus().RefMan.hideAllPreAssessmentWorklistMenuMenuItems();
		form.getContextMenus().RefMan.getPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem().setVisible(isRowSelected);
		form.getContextMenus().RefMan.getPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem().setVisible(isRowSelected);
		form.getContextMenus().RefMan.getPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem().setVisible(isRowSelected);
		form.getContextMenus().RefMan.getPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem().setVisible(form.dyngrdPreAssessment().getValue() instanceof PatientElectiveListForPreAssessmentWorklistVo && (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(((PatientElectiveListForPreAssessmentWorklistVo) form.dyngrdPreAssessment().getValue()).getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(((PatientElectiveListForPreAssessmentWorklistVo) form.dyngrdPreAssessment().getValue()).getElectiveAdmissionType())));
		form.getContextMenus().RefMan.getPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem().setVisible(isRowSelected); //WDEV-21037
		form.getContextMenus().RefMan.getPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem().setVisible(form.dyngrdPreAssessment().getValue() instanceof PatientElectiveListForPreAssessmentWorklistVo && ElectiveAdmissionType.PLANNED_TYPE13.equals(((PatientElectiveListForPreAssessmentWorklistVo) form.dyngrdPreAssessment().getValue()).getElectiveAdmissionType()));
		
		//WDEV-21037
		boolean isSurveillanceChecked = form.chkSurveillancePlannedList().getValue();
		form.lblPlannedFrom().setVisible(isSurveillanceChecked);
		form.dtePlannedFrom().setVisible(isSurveillanceChecked);
		form.lblPlannedTo().setVisible(isSurveillanceChecked);
		form.dtePlannedTo().setVisible(isSurveillanceChecked);
		
	}
	
	protected void onQmbProcedureValueChanged() throws PresentationLogicException
	{
		// TODO Add your code here.
	}
	
	
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbProcedure().clear();
		
		ProcedureLiteVoCollection procedureCollection = new ProcedureLiteVoCollection();
		
		try
		{
			procedureCollection = domain.listProcedure(value);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		for (int i=0; i < procedureCollection.size(); i++)
		{
			form.qmbProcedure().newRow(procedureCollection.get(i), procedureCollection.get(i).getProcedureName());
		}
		
		if (procedureCollection.size() == 1)
		{
			form.qmbProcedure().setValue(procedureCollection.get(0));
						
		}
		else if (procedureCollection.size() > 1)
			form.qmbProcedure().showOpened();
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		clearGlobalContexts();
		updateControlsState();
	}
	
	private void clearGlobalContexts()
	{
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedRecord(null);

		if (doSearch())
		{
			form.getGlobalContext().RefMan.setPreAssessmentWorklistSearchCriteria(populateSearchCriteriaDataFromScreen());
		}

		updateControlsState();
	}
	
	@Override
	protected void onImbServiceSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ReferralServiceSelectionDialog, "Select Services");
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.PreAssessmentWorklistMenu.BOOK_OUTPATIENT_APPOINTMENT:
				bookAppt();
			break;
			
			//WDEV-22780 - Start
			case GenForm.ContextMenus.RefManNamespace.PreAssessmentWorklistMenu.VIEW_PREASSESSMENTOUTCOME:
				engine.open(form.getForms().RefMan.PreAssessmentOutcomeDlg , new Object[] {(PatientElectiveListRefVo)form.dyngrdPreAssessment().getValue(), Boolean.TRUE});
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PreAssessmentWorklistMenu.EDIT_PREASSESSMENT_OUTCOME:
				engine.open(form.getForms().RefMan.PreAssessmentOutcomeDlg , new Object[] {(PatientElectiveListRefVo)form.dyngrdPreAssessment().getValue()});
			break;
				//WDEV-22780 - End
				
			case GenForm.ContextMenus.RefManNamespace.PreAssessmentWorklistMenu.VIEW_WAITING_LIST_CARD:
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,null,(PatientElectiveListRefVo)form.dyngrdPreAssessment().getValue(),ElectiveListAddLaterDlgOpenMode.READ_ONLY},"Waiting List Details"); 	
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PreAssessmentWorklistMenu.VIEW_REFERRAL_DETTAILS: //WDEV-21037
				form.getGlobalContext().RefMan.setCatsReferral((CatsReferralRefVo)((PatientElectiveListForPreAssessmentWorklistVo) form.dyngrdPreAssessment().getValue()).getReferral());
				engine.open(form.getForms().RefMan.ReferralDetailsDialog); 	
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PreAssessmentWorklistMenu.VIEW_PLANNED_LIST_CARD:
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
					null,
					(PatientElectiveListRefVo)form.dyngrdPreAssessment().getValue(),
					ElectiveListAddLaterDlgOpenMode.READ_ONLY},
					"Planned List Details");
			break;
		}
	}
	
	private void bookAppt()
	{
		//if (isReferralEndOfCare()) - not in this realeas Maxims 10.4
		//	return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog, new Object[] {Boolean.TRUE, Boolean.TRUE}, false);	//wdev-22219 //WDEV-22308 //WDEV-22894
	}
	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbService().clear();

		ServiceShortVoCollection voCollService = domain.listServices(value);
		if (voCollService==null || voCollService.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollService.size(); i++)
		{
			form.qmbService().newRow(voCollService.get(i), voCollService.get(i).getServiceName());
		}

		if (form.qmbService().size() == 1)
			form.qmbService().setValue(voCollService.get(0));
		else
			form.qmbService().showOpened();
		
		if( form.qmbService().getValue() != null)
		{
			form.getGlobalContext().RefMan.setReferralServiceSearchList(null);
			setServiceLabelValue(listServices());
		}
	}
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if( form.getForms().RefMan.ReferralServiceSelectionDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				setServiceLabelValue(listServices());
				form.qmbService().setValue(null);
			}
		}
		else 
		{
			doSearch();
			form.dyngrdPreAssessment().setValue(form.getLocalContext().getSelectedRecord());//WDEV-21037
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setReferralServiceSearchList(null);
		setServiceLabelValue(listServices());
	}
	

	@Override
	protected void onChkFitforSurgeryValueChanged() throws PresentationLogicException
	{
		
	}
	@Override
	protected void onChkNotFitforSurgeryValueChanged() throws PresentationLogicException
	{
		
	}
	
	public class ReferralDateComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ReferralDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ReferralDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date date1 = null;
			Date date2 = null;
			if(ob1 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList1 = (PatientElectiveListForPreAssessmentWorklistVo)ob1;
				date1 = patElList1.getReferral().getReferralDetails()!= null ? patElList1.getReferral().getReferralDetails().getDateOfReferral():null;
			}
			if(ob2 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList2 = (PatientElectiveListForPreAssessmentWorklistVo)ob2;
				date2 = patElList2.getReferral().getReferralDetails()!= null ? patElList2.getReferral().getReferralDetails().getDateOfReferral():null;
			}
			
			if(date1 != null && date2 != null)
				return  date1.compareTo(date2)*direction;
			
			if(date1 != null && date2 == null)
				return  direction;
			
			if(date2 != null && date1 == null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	public class BreachDateComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public BreachDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public BreachDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date date1 = null;
			Date date2 = null;
			if(ob1 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList1 = (PatientElectiveListForPreAssessmentWorklistVo)ob1;
				date1 = patElList1.getReferral().getReferralDetails()!= null ? patElList1.getReferral().getReferralDetails().getEnd18WW():null;
			}
			if(ob2 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList2 = (PatientElectiveListForPreAssessmentWorklistVo)ob2;
				date2 = patElList2.getReferral().getReferralDetails()!= null ? patElList2.getReferral().getReferralDetails().getEnd18WW():null;
			}
			
			if(date1 != null && date2 != null)
				return  date1.compareTo(date2)*direction;
			
			if(date1 != null && date2 == null)
				return  direction;
			
			if(date2 != null && date1 == null)
				return (-1)*direction;
			
			return 0; 
			
		}
	
	}
	
	//WDEV-21037
	public class SuitableForTelephoneImageComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public SuitableForTelephoneImageComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SuitableForTelephoneImageComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Boolean isSuitable1 = null;
			Boolean isSuitable2 = null;
			if(ob1 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList1 = (PatientElectiveListForPreAssessmentWorklistVo)ob1;
				isSuitable1 = Boolean.TRUE.equals(patElList1.getIsSuitableForTelephoneAssessment()) ? Boolean.TRUE : Boolean.FALSE ;
			}
			if(ob2 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList2 = (PatientElectiveListForPreAssessmentWorklistVo)ob2;
				isSuitable2 = Boolean.TRUE.equals(patElList2.getIsSuitableForTelephoneAssessment()) ? Boolean.TRUE : Boolean.FALSE ;
			}
			
			if(isSuitable1 != null && isSuitable2 != null)
				return  isSuitable1.compareTo(isSuitable2)*direction;
			
			if(isSuitable1 != null && isSuitable2 == null)
				return  direction;
			
			if(isSuitable2 != null && isSuitable1 == null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	//WDEV-21037
	public class ApptStatusImageComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ApptStatusImageComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ApptStatusImageComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String apptStatus1 = null;
			String apptStatus2 = null;
			if(ob1 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList1 = (PatientElectiveListForPreAssessmentWorklistVo)ob1;
				apptStatus1 = patElList1.getPreAssessmentAppointmentIsNotNull() && patElList1.getPreAssessmentAppointment().getApptStatusIsNotNull() && apptStatusColumnHasImage(patElList1.getPreAssessmentAppointment().getApptStatus()) ? patElList1.getPreAssessmentAppointment().getApptStatus().getText(): null;
			}
			if(ob2 instanceof PatientElectiveListForPreAssessmentWorklistVo )
			{
				PatientElectiveListForPreAssessmentWorklistVo patElList2 = (PatientElectiveListForPreAssessmentWorklistVo)ob2;
				apptStatus2 = patElList2.getPreAssessmentAppointmentIsNotNull() && patElList2.getPreAssessmentAppointment().getApptStatusIsNotNull() && apptStatusColumnHasImage(patElList2.getPreAssessmentAppointment().getApptStatus()) ? patElList2.getPreAssessmentAppointment().getApptStatus().getText(): null;
			}
			
			if(apptStatus1 != null && apptStatus2 != null)
				return  apptStatus1.compareTo(apptStatus2)*direction;
			
			if(apptStatus1 != null && apptStatus2 == null)
				return  direction;
			
			if(apptStatus2 != null && apptStatus1 == null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	
	//WDEV-21037
	private boolean apptStatusColumnHasImage(Status_Reason apptStatus)
	{
		if (apptStatus==null )
			return false;
		
		if (Status_Reason.BOOKED.equals(apptStatus) || Status_Reason.ARRIVAL.equals(apptStatus) || Status_Reason.SEEN.equals(apptStatus) || Status_Reason.DNA.equals(apptStatus) || Status_Reason.CANCELLED.equals(apptStatus))
		{
			return true;
		}
		
		return false;
	}
	
	@Override
	protected void onChkSurveillancePlannedListValueChanged() throws PresentationLogicException
	{
		form.dtePlannedFrom().setValue(null);
		form.dtePlannedTo().setValue(null);
		updateControlsState();
	}
	@Override
	protected void onChkWaitingListValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
}
