//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.preassessmentworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAnaestheticTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.AnaestheticType getValue()
		{
			return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbUrgencyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReferralUrgency getValue()
		{
			return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceShortVo getValue()
		{
			return (ims.core.vo.ServiceShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceShortVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbProcedureComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ProcedureLiteVo getValue()
		{
			return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ProcedureLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdInformationRequiredRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdInformationRequiredRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColWaitingForReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColWaitingForReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColWaitingForOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColWaitingFor(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColWaitingFor()
		{
			return (String)super.row.get(0);
		}
		public void setColWaitingFor(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColWaitingForTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColSelect(String value)
		{
			super.row.setTooltip(1, value);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public  ims.clinical.vo.lookups.PreAssessmentInformationRequired getValue()
		{
			return ( ims.clinical.vo.lookups.PreAssessmentInformationRequired)super.row.getValue();
		}
		public void setValue( ims.clinical.vo.lookups.PreAssessmentInformationRequired value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdInformationRequiredRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdInformationRequiredRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdInformationRequiredRow get(int index)
		{
			return new grdInformationRequiredRow(super.collection.get(index));
		}
		public grdInformationRequiredRow newRow()
		{
			return new grdInformationRequiredRow(super.collection.newRow());
		}
		public grdInformationRequiredRow newRow(boolean autoSelect)
		{
			return new grdInformationRequiredRow(super.collection.newRow(autoSelect));
		}
		public grdInformationRequiredRow newRowAt(int index)
		{
			return new grdInformationRequiredRow(super.collection.newRowAt(index));
		}
		public grdInformationRequiredRow newRowAt(int index, boolean autoSelect)
		{
			return new grdInformationRequiredRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdInformationRequiredGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public  ims.clinical.vo.lookups.PreAssessmentInformationRequired[] getValues()
		{
			 ims.clinical.vo.lookups.PreAssessmentInformationRequired[] listOfValues = new  ims.clinical.vo.lookups.PreAssessmentInformationRequired[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public  ims.clinical.vo.lookups.PreAssessmentInformationRequired getValue()
		{
			return ( ims.clinical.vo.lookups.PreAssessmentInformationRequired)super.grid.getValue();
		}
		public void setValue( ims.clinical.vo.lookups.PreAssessmentInformationRequired value)
		{
			super.grid.setValue(value);
		}
		public grdInformationRequiredRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdInformationRequiredRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdInformationRequiredRowCollection getRows()
		{
			return new grdInformationRequiredRowCollection(super.grid.getRows());
		}
		public grdInformationRequiredRow getRowByValue( ims.clinical.vo.lookups.PreAssessmentInformationRequired value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdInformationRequiredRow(row);
		}
		public void setColWaitingForHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColWaitingForHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}

	public static class GroupTheatreRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 116, 232, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Day Surgery Theatre", startTabIndex.intValue() + 13);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 308, 232, 124, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Inpatient Theatre", startTabIndex.intValue() + 14);
		}
		public void setText(GroupTheatreEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupTheatreEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupTheatreEnumeration.None;
				case 0: return GroupTheatreEnumeration.rdoDaySurgeryTheatre;
				case 1: return GroupTheatreEnumeration.rdoInpatientTheatre;
			}
			return null;
		}
		public void setValue(GroupTheatreEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupTheatreEnumeration.None.id);
		}
		public boolean isEnabled(GroupTheatreEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupTheatreEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupTheatreEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupTheatreEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupTheatreEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupTheatreEnumeration None = new GroupTheatreEnumeration(-1);
		public static GroupTheatreEnumeration rdoDaySurgeryTheatre = new GroupTheatreEnumeration(0);
		public static GroupTheatreEnumeration rdoInpatientTheatre = new GroupTheatreEnumeration(1);
		private GroupTheatreEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupTheatreEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.PreAssessmentWorklistSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.PreAssessmentWorklistSearchCriteriaVo' of the global context variable 'RefMan.PreAssessmentWorklistSearchCriteria' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(254);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem = factory.createMenuItem(startControlID.intValue() + 1, "Book Outpatient Appointment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6160001)))
			contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu.add(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem);
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem = factory.createMenuItem(startControlID.intValue() + 2, "View Waiting List Card Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6160003)))
			contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu.add(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem);
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_EDIT_PREASSESSMENT_OUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 3, "View/Edit Pre-Assessment Outcome", true, false, new Integer(123175), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6160002)))
			contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu.add(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_EDIT_PREASSESSMENT_OUTCOMEItem);
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem = factory.createMenuItem(startControlID.intValue() + 4, "View Referral Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6160004)))
			contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu.add(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem);
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem = factory.createMenuItem(startControlID.intValue() + 5, "View Surveillance/Planned List Card Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6160005)))
			contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu.add(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem);
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 6, "View Pre-Assessment Outcome", true, false, new Integer(123175), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6160006)))
			contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu.add(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem);
		contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit Pre-Assessment Outcome", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6160007)))
			contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu.add(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 464, 126, 376, 122, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Information Required", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 173, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "<pat identifier>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "List Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 383, 8, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 561, 8, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 116, 53, 324, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 111, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Anaesthetic Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Breach Date From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 137, 88, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Elective         \nList Urgency:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 79, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Procedure:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 288, 200, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 33, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Service(s):", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 116, 171, 324, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 463, 6, 85, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 579, 6, 85, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 116, 200, 132, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 308, 200, 132, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 116, 109, 324, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAnaestheticTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAnaestheticTypeTemp);
		cmbAnaestheticTypeComboBox cmbAnaestheticType = (cmbAnaestheticTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticTypeComboBox.class, m_cmbAnaestheticTypeTemp);
		super.addComboBox(cmbAnaestheticType);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 116, 141, 324, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbUrgencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbUrgencyTemp);
		cmbUrgencyComboBox cmbUrgency = (cmbUrgencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgencyComboBox.class, m_cmbUrgencyTemp);
		super.addComboBox(cmbUrgency);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 116, 31, 300, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbServiceTemp);
		qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
		super.addComboBox(qmbService);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 116, 77, 324, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbProcedureTemp);
		qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
		super.addComboBox(qmbProcedure);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 712, 48, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Include Endoscopy", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 464, 96, 280, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Future Appointment Booked - No Pre-Assessment", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 464, 80, 240, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Past Appointment with No Pre-Assessment", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 712, 32, 92, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Added Today", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 234, 8, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Surveillance / Planned", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 116, 8, 108, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Waiting / Booked", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 464, 112, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Pre-Assessment Outcome Pending ", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 464, 64, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Fit for Surgery", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 464, 48, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Not Fit for Surgery", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 464, 32, 208, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Pre-Assessment Appointment Required", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 472, 142, 360, 96, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		Grid m_grdInformationRequiredTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, Boolean.TRUE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdInformationRequiredTemp);
		grdInformationRequiredGrid grdInformationRequired = (grdInformationRequiredGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInformationRequiredGrid.class, m_grdInformationRequiredTemp);
		grdInformationRequired.addStringColumn("Waiting for", 0, 0, 305, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInformationRequired.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
		super.addGrid(grdInformationRequired);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 256, 832, 368, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.RefMan.contextMenuPreAssessmentWorklistMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 810, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 778, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for Pre-Assessments matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 417, 31, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled16, this.getImages().Core.FindDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupTheatre = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupTheatre);
		GroupTheatreRadioButton GroupTheatre = (GroupTheatreRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTheatreRadioButton.class, tmpGroupTheatre);
		GroupTheatre.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupTheatre);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlInformationRequired()
	{
		return (Panel)super.getControl(0);
	}
	public Label lblPatIdentifier()
	{
		return (Label)super.getControl(1);
	}
	public Label lblListType()
	{
		return (Label)super.getControl(2);
	}
	public Label lblPlannedFrom()
	{
		return (Label)super.getControl(3);
	}
	public Label lblPlannedTo()
	{
		return (Label)super.getControl(4);
	}
	public Label lblServicesColl()
	{
		return (Label)super.getControl(5);
	}
	public Label lblBreachDateFrom()
	{
		return (Label)super.getControl(7);
	}
	public Label lblTo()
	{
		return (Label)super.getControl(10);
	}
	public Label lblServices()
	{
		return (Label)super.getControl(11);
	}
	public TextBox txtIdentifier()
	{
		return (TextBox)super.getControl(12);
	}
	public DateControl dtePlannedFrom()
	{
		return (DateControl)super.getControl(13);
	}
	public DateControl dtePlannedTo()
	{
		return (DateControl)super.getControl(14);
	}
	public DateControl dteBreachFrom()
	{
		return (DateControl)super.getControl(15);
	}
	public DateControl dteBreachTo()
	{
		return (DateControl)super.getControl(16);
	}
	public cmbAnaestheticTypeComboBox cmbAnaestheticType()
	{
		return (cmbAnaestheticTypeComboBox)super.getComboBox(0);
	}
	public cmbUrgencyComboBox cmbUrgency()
	{
		return (cmbUrgencyComboBox)super.getComboBox(1);
	}
	public qmbServiceComboBox qmbService()
	{
		return (qmbServiceComboBox)super.getComboBox(2);
	}
	public qmbProcedureComboBox qmbProcedure()
	{
		return (qmbProcedureComboBox)super.getComboBox(3);
	}
	public CheckBox chkIncludeEndoscopy()
	{
		return (CheckBox)super.getControl(21);
	}
	public CheckBox chkFutureAppointment()
	{
		return (CheckBox)super.getControl(22);
	}
	public CheckBox chkPastAppointments()
	{
		return (CheckBox)super.getControl(23);
	}
	public CheckBox chkAddedToday()
	{
		return (CheckBox)super.getControl(24);
	}
	public CheckBox chkSurveillancePlannedList()
	{
		return (CheckBox)super.getControl(25);
	}
	public CheckBox chkWaitingList()
	{
		return (CheckBox)super.getControl(26);
	}
	public CheckBox chkPreAssessmentOutcomePending()
	{
		return (CheckBox)super.getControl(27);
	}
	public CheckBox chkFitforSurgery()
	{
		return (CheckBox)super.getControl(28);
	}
	public CheckBox chkNotFitforSurgery()
	{
		return (CheckBox)super.getControl(29);
	}
	public CheckBox chkPreAssessmentRequired()
	{
		return (CheckBox)super.getControl(30);
	}
	public grdInformationRequiredGrid grdInformationRequired()
	{
		return (grdInformationRequiredGrid)super.getGrid(0);
	}
	public DynamicGrid dyngrdPreAssessment()
	{
		return (DynamicGrid)super.getControl(32);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(33);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(34);
	}
	public ImageButton imbServiceSearch()
	{
		return (ImageButton)super.getControl(35);
	}
	public GroupTheatreRadioButton GroupTheatre()
	{
		return (GroupTheatreRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ReferralServiceSelectionDialog = new LocalFormName(134243);
				PreAssessmentOutcomeDlg = new LocalFormName(134273);
				BookAppointmentDialog = new LocalFormName(134134);
				ElectiveListAddLaterDialog = new LocalFormName(134247);
				ReferralDetailsDialog = new LocalFormName(134104);
			}
			public final FormName ReferralServiceSelectionDialog;
			public final FormName PreAssessmentOutcomeDlg;
			public final FormName BookAppointmentDialog;
			public final FormName ElectiveListAddLaterDialog;
			public final FormName ReferralDetailsDialog;
		}

		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			CcoSched = new CcoSchedImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final class CcoSchedImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CcoSchedImages()
			{
				AppointmentBooked16 = new ImageHelper(128150, "Images/CcoSched/AppointmentBooked16.png", new Integer(16), new Integer(16));
				AppointmentCancelled16 = new ImageHelper(128152, "Images/CcoSched/AppointmentCancelled16.png", new Integer(16), new Integer(16));
				AppointmentDNA16 = new ImageHelper(128155, "Images/CcoSched/AppointmentDNA16.png", new Integer(16), new Integer(16));
				AppointmentSeen16 = new ImageHelper(128158, "Images/CcoSched/AppointmentSeen16.png", new Integer(16), new Integer(16));
				SuitableForTelephone16 = new ImageHelper(128161, "Images/CcoSched/SuitableForTelephone16.png", new Integer(16), new Integer(16));
				AppointmentArrival16 = new ImageHelper(128164, "Images/CcoSched/AppointmentArrival16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AppointmentBooked16;
			public final ims.framework.utils.Image AppointmentCancelled16;
			public final ims.framework.utils.Image AppointmentDNA16;
			public final ims.framework.utils.Image AppointmentSeen16;
			public final ims.framework.utils.Image SuitableForTelephone16;
			public final ims.framework.utils.Image AppointmentArrival16;
		}
		public final CoreImages Core;
		public final CcoSchedImages CcoSched;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_BreachDateColumnSortOrder = new ims.framework.ContextVariable("BreachDateColumnSortOrder", prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__BreachDateColumnSortOrder_" + componentIdentifier + "");
			cxl_ReferralDateColumnSortOrder = new ims.framework.ContextVariable("ReferralDateColumnSortOrder", prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__ReferralDateColumnSortOrder_" + componentIdentifier + "");
			cxl_SuitableForTelephoneColumnSortOrder = new ims.framework.ContextVariable("SuitableForTelephoneColumnSortOrder", prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__SuitableForTelephoneColumnSortOrder_" + componentIdentifier + "");
			cxl_BookApptStatusColumnSortOrder = new ims.framework.ContextVariable("BookApptStatusColumnSortOrder", prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__BookApptStatusColumnSortOrder_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListForPreAssessmentWorklistVo getSelectedRecord()
		{
			return (ims.RefMan.vo.PatientElectiveListForPreAssessmentWorklistVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.RefMan.vo.PatientElectiveListForPreAssessmentWorklistVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getBreachDateColumnSortOrderIsNotNull()
		{
			return !cxl_BreachDateColumnSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getBreachDateColumnSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_BreachDateColumnSortOrder.getValue(context);
		}
		public void setBreachDateColumnSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_BreachDateColumnSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BreachDateColumnSortOrder = null;
		public boolean getReferralDateColumnSortOrderIsNotNull()
		{
			return !cxl_ReferralDateColumnSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getReferralDateColumnSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_ReferralDateColumnSortOrder.getValue(context);
		}
		public void setReferralDateColumnSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_ReferralDateColumnSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralDateColumnSortOrder = null;
		public boolean getSuitableForTelephoneColumnSortOrderIsNotNull()
		{
			return !cxl_SuitableForTelephoneColumnSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSuitableForTelephoneColumnSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SuitableForTelephoneColumnSortOrder.getValue(context);
		}
		public void setSuitableForTelephoneColumnSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_SuitableForTelephoneColumnSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SuitableForTelephoneColumnSortOrder = null;
		public boolean getBookApptStatusColumnSortOrderIsNotNull()
		{
			return !cxl_BookApptStatusColumnSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getBookApptStatusColumnSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_BookApptStatusColumnSortOrder.getValue(context);
		}
		public void setBookApptStatusColumnSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_BookApptStatusColumnSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BookApptStatusColumnSortOrder = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PreAssessmentWorklistMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int BOOK_OUTPATIENT_APPOINTMENT = 1;
				public static final int VIEW_WAITING_LIST_CARD = 2;
				public static final int VIEW_EDIT_PREASSESSMENT_OUTCOME = 3;
				public static final int VIEW_REFERRAL_DETTAILS = 4;
				public static final int VIEW_PLANNED_LIST_CARD = 5;
				public static final int VIEW_PREASSESSMENTOUTCOME = 6;
				public static final int EDIT_PREASSESSMENT_OUTCOME = 7;
			}
			public void disableAllPreAssessmentWorklistMenuMenuItems()
			{
				this.contextMenuPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem.setEnabled(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem.setEnabled(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_EDIT_PREASSESSMENT_OUTCOMEItem.setEnabled(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem.setEnabled(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem.setEnabled(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem.setEnabled(false);
				this.contextMenuPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem.setEnabled(false);
			}
			public void hideAllPreAssessmentWorklistMenuMenuItems()
			{
				this.contextMenuPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem.setVisible(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem.setVisible(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_EDIT_PREASSESSMENT_OUTCOMEItem.setVisible(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem.setVisible(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem.setVisible(false);
				this.contextMenuPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem.setVisible(false);
				this.contextMenuPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem.setVisible(false);
			}
			private Menu contextMenuPreAssessmentWorklistMenu;
			public ReadOnlyMenuItem getPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem()
			{
				return this.contextMenuPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem;
			}
			private MenuItem contextMenuPreAssessmentWorklistMenuBOOK_OUTPATIENT_APPOINTMENTItem;
			public ReadOnlyMenuItem getPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem()
			{
				return this.contextMenuPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem;
			}
			private MenuItem contextMenuPreAssessmentWorklistMenuVIEW_WAITING_LIST_CARDItem;
			public ReadOnlyMenuItem getPreAssessmentWorklistMenuVIEW_EDIT_PREASSESSMENT_OUTCOMEItem()
			{
				return this.contextMenuPreAssessmentWorklistMenuVIEW_EDIT_PREASSESSMENT_OUTCOMEItem;
			}
			private MenuItem contextMenuPreAssessmentWorklistMenuVIEW_EDIT_PREASSESSMENT_OUTCOMEItem;
			public ReadOnlyMenuItem getPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem()
			{
				return this.contextMenuPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem;
			}
			private MenuItem contextMenuPreAssessmentWorklistMenuVIEW_REFERRAL_DETTAILSItem;
			public ReadOnlyMenuItem getPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem()
			{
				return this.contextMenuPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem;
			}
			private MenuItem contextMenuPreAssessmentWorklistMenuVIEW_PLANNED_LIST_CARDItem;
			public ReadOnlyMenuItem getPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem()
			{
				return this.contextMenuPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem;
			}
			private MenuItem contextMenuPreAssessmentWorklistMenuVIEW_PREASSESSMENTOUTCOMEItem;
			public ReadOnlyMenuItem getPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem()
			{
				return this.contextMenuPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem;
			}
			private MenuItem contextMenuPreAssessmentWorklistMenuEDIT_PREASSESSMENT_OUTCOMEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[149];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1014100020-ISSUITABLEFORTELEPHONEASSESSMENT", "IsSuitableForTelephoneAssessment");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PreAssessmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
