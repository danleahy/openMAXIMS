//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.sourceofreferralandurgencyconfiguration;

import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.RefMan.vo.lookups.ReferralUrgencyCollection;
import ims.core.vo.ReferralSourceUrgencyVo;
import ims.core.vo.ReferralSourceUrgencyVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer	COLUMN_SOURCEREFERRAL	= new Integer(1);
	private static final Integer	COLUMN_URGENCY			= new Integer(2);
	private static final Integer	COLUMN_SELECTION		= new Integer(3);
	
		
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialise();
		open();
				
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
			open();
	}
	
	private boolean save()
	{
		ReferralSourceUrgencyVoCollection recordColl = populateDataFromScreen();
		if( recordColl == null || recordColl.size() == 0 )
			return false;
		
		String[] arrErrors = recordColl.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		try
		{
			domain.saveRecord(recordColl);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		return true;
	}
	private ReferralSourceUrgencyVoCollection populateDataFromScreen()
	{
		if( form.dyngrdSourceOfReferralAndUrgency().getRows().size() == 0)
			return null;
		if( form.getLocalContext().getSourceOfReferral() == null && form.getLocalContext().getSourceOfReferral().size() == 0)
			return null;
		
		ReferralSourceUrgencyVoCollection tempColl = new ReferralSourceUrgencyVoCollection();
		
		for(int i = 0; i < form.getLocalContext().getSourceOfReferral().size();i++)
		{
			
			ims.core.vo.lookups.SourceOfReferral sourceLkp = form.getLocalContext().getSourceOfReferral().get(i);
			ReferralSourceUrgencyVo tempVo = getReferralSourceUrgencyFromGrid(sourceLkp);
			tempColl.add(tempVo);
		}
		
		return tempColl;
	}
	
	private ReferralSourceUrgencyVo getReferralSourceUrgencyFromGrid(ims.core.vo.lookups.SourceOfReferral sourceLkp)
	{
		if( sourceLkp == null )
			return null;
		if( form.dyngrdSourceOfReferralAndUrgency().getRows().size() == 0)
			return null;
		
		ims.RefMan.vo.lookups.ReferralUrgencyCollection tempUrgencyColl = new ReferralUrgencyCollection();
		
		ReferralSourceUrgencyVo currentVal = null;
		for(int i = 0; i < form.dyngrdSourceOfReferralAndUrgency().getRows().size();i++)
		{
			
			DynamicGridRow referralsourceRow = form.dyngrdSourceOfReferralAndUrgency().getRows().get(i);
			ReferralSourceUrgencyVo tempVo = (ReferralSourceUrgencyVo) referralsourceRow.getValue();
			if( tempVo != null && tempVo.getSourceOfReferralIsNotNull() && tempVo.getSourceOfReferral().equals(sourceLkp))
			{
				currentVal = tempVo;
				DynamicGridCell cellsel = referralsourceRow.getCells().get(getColumn(COLUMN_SELECTION));
				if( cellsel.getValue().equals(Boolean.TRUE))
				{
					tempUrgencyColl.add((ReferralUrgency) referralsourceRow.getIdentifier());
				}
				
				
			}
		}
		if( currentVal != null )
			currentVal.setUrgency(tempUrgencyColl);
		
		return currentVal;
		
	}
	
	protected void onBtnNewEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	private void createReferralKPIDinamicGrid()
	{
		form.dyngrdSourceOfReferralAndUrgency().getRows().clear();
		DynamicGridColumn columnName = form.dyngrdSourceOfReferralAndUrgency().getColumns().newColumn("Source of Referral", COLUMN_SOURCEREFERRAL);
		columnName.setWidth(550);
		columnName.setCanGrow(true);
		
		columnName = form.dyngrdSourceOfReferralAndUrgency().getColumns().newColumn("Urgency", COLUMN_URGENCY);
		columnName.setWidth(200);
		columnName.setCanGrow(true);
		
		columnName = form.dyngrdSourceOfReferralAndUrgency().getColumns().newColumn(" ", COLUMN_SELECTION);
		columnName.setWidth(-1);
		columnName.setCanGrow(true);
		columnName.setAlignment(Alignment.CENTER);

	}
	private void initialise()
	{
		createReferralKPIDinamicGrid();
		
	}
	
	void open()
	{
		
		form.getLocalContext().setSourceOfReferralConfiguration(domain.getSourceOfReferralConfigVoColl());
		populatedynamicgrid();
		form.setMode(FormMode.VIEW);
	}
		
	private ReferralSourceUrgencyVo getSourceReferralUrgencyVo(ims.core.vo.lookups.SourceOfReferral sourceLkp, ReferralSourceUrgencyVoCollection  sourceColl)
	{
		if( sourceLkp != null && sourceColl != null && sourceColl.size() > 0)
		{
			for(int i = 0; i < sourceColl.size();i++)
			{
				ReferralSourceUrgencyVo tempVo = sourceColl.get(i); 
				if( tempVo != null && sourceLkp!= null && sourceLkp.equals(tempVo.getSourceOfReferral()))
					return tempVo;
			}
		}
		
		return null;
	}
	
	private void populatedynamicgrid()
	{
		form.dyngrdSourceOfReferralAndUrgency().getRows().clear();
		ims.core.vo.lookups.SourceOfReferralCollection tempSourceOfReferralColl = ims.core.vo.lookups.LookupHelper.getSourceOfReferral(this.domain.getLookupService());
		form.getLocalContext().setSourceOfReferral(tempSourceOfReferralColl);
		ims.RefMan.vo.lookups.ReferralUrgencyCollection tempUrgencyColl = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgency(this.domain.getLookupService());
		
		if( tempSourceOfReferralColl != null && tempSourceOfReferralColl.size() > 0)
		{
			for( int i = 0; i < tempSourceOfReferralColl.size();i++)
			{
				ims.core.vo.lookups.SourceOfReferral Source = tempSourceOfReferralColl.get(i);
				if( Source != null )
				{
					
					ReferralSourceUrgencyVo tempVo = getSourceReferralUrgencyVo(Source, form.getLocalContext().getSourceOfReferralConfiguration());
					
					if( tempVo == null )
					{
						tempVo = new ReferralSourceUrgencyVo();
						tempVo.setSourceOfReferral(Source);
					}
					DynamicGridRow referralsourceRow = form.dyngrdSourceOfReferralAndUrgency().getRows().newRow();
					referralsourceRow.setBackColor(Color.LightYellow);
					
					referralsourceRow.setValue(tempVo);
					DynamicGridCell WorklistType = referralsourceRow.getCells().newCell(getColumn(COLUMN_SOURCEREFERRAL), DynamicCellType.STRING);
					WorklistType.setValue(Source.getIItemText());
					
					if( tempUrgencyColl != null && tempUrgencyColl.size() > 0)
					{
						for(int m = 0; m < tempUrgencyColl.size();m++)
						{
							ims.RefMan.vo.lookups.ReferralUrgency urgencylk = tempUrgencyColl.get(m);
							
							if( urgencylk != null )
							{
    							if( m == 0)
    							{
    								DynamicGridCell urgency = referralsourceRow.getCells().newCell(getColumn(COLUMN_URGENCY), DynamicCellType.STRING);
    								urgency.setValue(urgencylk.getIItemText());
    								DynamicGridCell selection = referralsourceRow.getCells().newCell(getColumn(COLUMN_SELECTION), DynamicCellType.BOOL);
    								
    								if( tempVo.getUrgencyIsNotNull() && tempVo.getUrgency().size() > 0 && tempVo.getUrgency().contains(urgencylk))
    									selection.setValue(true);
    								else
    									selection.setValue(false);
    								
    								
    								referralsourceRow.setIdentifier(urgencylk);
    							}
    							else
    							{
    								referralsourceRow = form.dyngrdSourceOfReferralAndUrgency().getRows().newRow();
    								referralsourceRow.setValue(tempVo);
    								WorklistType = referralsourceRow.getCells().newCell(getColumn(COLUMN_SOURCEREFERRAL), DynamicCellType.STRING);
    								WorklistType.setValue("");
    								DynamicGridCell urgency = referralsourceRow.getCells().newCell(getColumn(COLUMN_URGENCY), DynamicCellType.STRING);
    								urgency.setValue(urgencylk.getIItemText());
    								DynamicGridCell selection = referralsourceRow.getCells().newCell(getColumn(COLUMN_SELECTION), DynamicCellType.BOOL);
    								
    								if( tempVo.getUrgencyIsNotNull() && tempVo.getUrgency().size() > 0 && tempVo.getUrgency().contains(urgencylk))
    									selection.setValue(true);
    								else
    									selection.setValue(false);
    								
    								referralsourceRow.setIdentifier(urgencylk);
    							}
							}
						}
					}
					
				}
			}
		}
		
	}
	private DynamicGridColumn getColumn(Integer identifier) 
	{
		return form.dyngrdSourceOfReferralAndUrgency().getColumns().getByIdentifier(identifier);
	}
	private void updateControlsState()
	{
	
		if( form.getMode().equals(FormMode.VIEW))
		{
			form.btnNewEdit().setVisible(form.dyngrdSourceOfReferralAndUrgency().getRows().size() > 0);
		}
		else
			form.btnNewEdit().setVisible(false);
	}

	
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}

	
}
