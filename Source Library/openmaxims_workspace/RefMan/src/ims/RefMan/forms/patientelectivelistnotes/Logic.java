//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.patientelectivelistnotes;

import ims.RefMan.vo.PatientElectiveListNotesVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.enums.MosType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.ccAuthoringUser().isRequired(form.getMode().equals(FormMode.EDIT));
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		if (args!=null && args.length>0 && args[0] instanceof FormMode)
		{
			form.setMode((FormMode) args[0]);
		}
	
		if (form.getGlobalContext().RefMan.getPatientElectiveListNotes()==null)
			initialize();
		else
			open();
	}

	private void initialize()
	{
		form.ccAuthoringUser().initialize(MosType.ALL);
		
		Object mos = domain.getMosUser();
		
		if (mos instanceof MemberOfStaffLiteVo)
			form.ccAuthoringUser().setValue((MemberOfStaffLiteVo) mos);
		
		form.dteAuthoringDate().setValue(new Date());
	}

	private void open()
	{
		populateScreenFromData(form.getGlobalContext().RefMan.getPatientElectiveListNotes());
	}

	private void populateScreenFromData(PatientElectiveListNotesVo note)
	{
		if (note==null)
			return;
		
		form.ccAuthoringUser().setValue(note.getAuthoringUser());
		form.dteAuthoringDate().setValue(note.getAuthoringDateTime());
		form.txtComments().setValue(note.getNotes());
		
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.ABORT);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}

	private boolean save()
	{
		PatientElectiveListNotesVo noteToSave=populateDataFromScreen(form.getGlobalContext().RefMan.getPatientElectiveListNotes());
		
		String[] errors = noteToSave.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		form.getGlobalContext().RefMan.setPatientElectiveListNotes(noteToSave);
		return true;
	}

	private PatientElectiveListNotesVo populateDataFromScreen(PatientElectiveListNotesVo note)
	{
		if (note==null)
			note=new PatientElectiveListNotesVo();
		else
			note=(PatientElectiveListNotesVo) note.clone();
		
		note.setAuthoringUser((MemberOfStaffLiteVo) form.ccAuthoringUser().getValue());
		note.setAuthoringDateTime(form.dteAuthoringDate().getValue());
		note.setNotes(form.txtComments().getValue());
		return note;
	}

}
