//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.appointmentoutcomeprocedureselectiondialog;

import ims.RefMan.forms.appointmentoutcomeprocedureselectiondialog.GenForm.grdCareContextRow;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open()
	{

		populateScreenFromData(domain.listPatientProcedures(form.getGlobalContext().Core.getCurrentCareContext()));
		form.setMode(FormMode.EDIT);
	}

	private void populateScreenFromData(PatientProcedureForAppointmentOutcomeVoCollection patientProcedures)
	{
		clearScreen();

		if (patientProcedures != null)
		{
			for (PatientProcedureForAppointmentOutcomeVo procedure : patientProcedures)
			{
				addProcedureRow(procedure);
			}
		}

		markProceduresAsChecked(form.getGlobalContext().RefMan.getSelectedProceduresApptOutcomeList());

	}

	private void addProcedureRow(PatientProcedureForAppointmentOutcomeVo procedure)
	{
		grdCareContextRow row = form.grdCareContext().getRows().newRow();

		row.setcolDescription(procedure.getProcedureDescription());
		row.setTooltipForcolDescription(procedure.getProcedureDescription());
		row.setColLaterality(procedure.getProcLaterality() != null ? procedure.getProcLaterality().getText() : "");
		row.setcolProcedureDate(procedure.getProcDate() != null ? procedure.getProcDate().toString() : "");

		if (procedure.getPeformedBy() != null)
		{
			row.setcolPerformedBy(procedure.getPeformedBy().getIItemText());
			row.setTooltipForcolPerformedBy(procedure.getPeformedBy().getIItemText());
		}

		row.setcolStatus(procedure.getProcedureStatus() != null ? procedure.getProcedureStatus().getText() : "");
		row.setTooltipForcolStatus(procedure.getProcedureStatus() != null ? procedure.getProcedureStatus().getText() : "");
		//WDEV-19768
		row.setColPrimary(Boolean.TRUE.equals(procedure.getIsPrimary()) ? true : false);

		if (procedure.getID_PatientProcedure() == null)
		{
			row.setcolSelect(true);
			row.setReadOnly(true);
			row.setBackColor(Color.LightYellow);
		}

		row.setValue(procedure);
	}

	private void markProceduresAsChecked(PatientProcedureForAppointmentOutcomeVoCollection addedProcedures)
	{
		if (addedProcedures == null)
			return;

		// check Referral Procedures Grid
		for (PatientProcedureForAppointmentOutcomeVo procedure : addedProcedures)
		{
			for (int i = 0; i < form.grdCareContext().getRows().size(); i++)
			{
				grdCareContextRow procedureRow = form.grdCareContext().getRows().get(i);

				if (procedure.equals(procedureRow.getValue()))
					procedureRow.setcolSelect(true);
			}
		}

		// add procedures which are not yet saved
		for (PatientProcedureForAppointmentOutcomeVo procedure : addedProcedures)
		{
			if (procedure.getID_PatientProcedure() == null)
			{
				addProcedureRow(procedure);
			}
		}
	}

	private void clearScreen()
	{
		form.grdCareContext().getRows().clear();

	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientProcedureForAppointmentOutcomeVoCollection proceduresColl = new PatientProcedureForAppointmentOutcomeVoCollection();

		for (int i = 0; i < form.grdCareContext().getRows().size(); i++)
		{
			if (form.grdCareContext().getRows().get(i).getcolSelect())
			{
				proceduresColl.add(form.grdCareContext().getRows().get(i).getValue());
			}
		}

		form.getGlobalContext().RefMan.setSelectedProceduresApptOutcomeList(proceduresColl);
		engine.close(DialogResult.OK);
	}
}
