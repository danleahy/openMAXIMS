//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.referraltransferdialog;

import ims.RefMan.vo.ReferralTransferVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.pathways.vo.RTTStatusPointVo;
import ims.pathways.vo.RTTStatusPointVoCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args!=null && args.length>0 && args[0] instanceof FormMode)
		{
			form.setMode((FormMode) args[0]);
			if (((FormMode) args[0]).equals(FormMode.VIEW))
				form.btnCancel().setText("Close");
		}

		initialise();
		open();
		updateControlState();
		
	}
	private void open() 
	{
		ReferralTransferVo voTransfer = form.getGlobalContext().RefMan.getReferralTransfer();
		if (voTransfer != null)
		{
			form.txtPathwayID().setValue(voTransfer.getPathwayID());
			form.cmbRTTStatus().setValue(voTransfer.getCurrentRTTStatus());
			form.dteStatusDate().setValue(voTransfer.getRTTStatusDate() != null ? voTransfer.getRTTStatusDate().getDate() : null); //WDEV-20726
			form.dteStartDate().setValue(voTransfer.getRTTStartDate()); //WDEV-20383
			form.txtHospNum().setValue(voTransfer.getOtherPatientNumber());
			form.cmbOrganisationCode().setValue(voTransfer.getOTherOrganisationCode());//WDEV-19698
			form.txtRefOrgCode().setValue(voTransfer.getReferringOrganisationCode()); //WDEV-20383
		}
	}
	private void updateControlState() {
		
		ReferralTransferVo voTransfer = form.getGlobalContext().RefMan.getReferralTransfer();
		
		if (voTransfer != null && voTransfer.getPathwayIDIsNotNull() && voTransfer.getID_ReferralTransferIsNotNull())
		{
			form.txtPathwayID().setEnabled(false);
		}
		
		if(voTransfer != null && voTransfer.getID_ReferralTransferIsNotNull())
		{
			//WDEV-20592 - start
			form.dteStatusDate().setEnabled(false);
			form.cmbRTTStatus().setEnabled(false);
			form.dteStartDate().setEnabled(false);
			//WDEV-20592 - end
		}
		
		form.dteStatusDate().setRequired(form.cmbRTTStatus().getValue() != null && form.getMode().equals(FormMode.EDIT)); //WDEV-20383
		form.cmbRTTStatus().setRequired(form.dteStatusDate().getValue() != null && form.getMode().equals(FormMode.EDIT)); //WDEV-20383
	}
	private void initialise()
	{
		RTTStatusPointVoCollection collVO = domain.listRTTStatusPoints();
		
		for(int i = 0; i < collVO.size();i++)
		{
			RTTStatusPointVo tempVo = collVO.get(i);
			form.cmbRTTStatus().newRow(tempVo, tempVo.getDescription());
		}
		
	}
	
	private boolean validateUIControls()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if (form.dteStartDate().getValue() == null)
		{
			errors.add("RTT Start Date is mandatory.");
		}
		//WDEV-20383
		if (form.dteStartDate().getValue() != null && form.dteStartDate().getValue().isGreaterThan(new Date()))
		{
			errors.add("RTT Start Date cannot be in the future.");
		}
		if(form.cmbRTTStatus().getValue() == null && form.dteStatusDate().getValue() != null)
		{
			errors.add("Current RTT Status is mandatory.");
		}
		if(form.dteStatusDate().getValue() == null && form.cmbRTTStatus().getValue() != null)
		{
			errors.add("RTT Status Date is mandatory.");
		}
		//WDEV-20383
		if(form.dteStatusDate().getValue() != null && form.dteStatusDate().getValue().isGreaterThan(new Date()))
		{
			errors.add("RTT Status Date cannot be in the future.");
		}
		if (errors.size()>0)
		{
			engine.showErrors(errors.toArray(new String[errors.size()]));
			return false;
		}
		return true;
	}
		
	// start WDEV-20383
	private ReferralTransferVo populateDataFromScreen()
	{
		ReferralTransferVo voTransfer = form.getGlobalContext().RefMan.getReferralTransfer();
		
		if (voTransfer == null)
			voTransfer = new ReferralTransferVo();
		
		voTransfer.setPathwayID(form.txtPathwayID().getValue());
		voTransfer.setCurrentRTTStatus(form.cmbRTTStatus().getValue());
		if(form.dteStatusDate().getValue() != null)
			voTransfer.setRTTStatusDate(new DateTime(form.dteStatusDate().getValue(), new Time(12, 0))); //WDEV-20726
		else
			voTransfer.setRTTStatusDate(null);
		voTransfer.setRTTStartDate(form.dteStartDate().getValue());
		voTransfer.setOtherPatientNumber(form.txtHospNum().getValue());
		voTransfer.setOTherOrganisationCode(form.cmbOrganisationCode().getValue()); //WDEV-19698
		voTransfer.setReferringOrganisationCode(form.txtRefOrgCode().getValue());
		
		form.getGlobalContext().RefMan.setReferralTransfer(voTransfer);
		
		return voTransfer;
	}
	// end WDEV-20383

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//  start WDEV-20383
		if(validateUIControls())
		{
			populateDataFromScreen();
			engine.close(DialogResult.OK);
		}
		// end WDEV-20383
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))
			engine.close(DialogResult.CANCEL);
		else
			engine.close(DialogResult.NO);
	}
	
	//WDEV-20383
	@Override
	protected void onDteStatusDateValueChanged() throws PresentationLogicException {
		
		updateControlState();
	}
	
	@Override
	protected void onCmbRTTStatusValueChanged() throws PresentationLogicException 
	{
		updateControlState();
	}
	//WDEV-20383

}
