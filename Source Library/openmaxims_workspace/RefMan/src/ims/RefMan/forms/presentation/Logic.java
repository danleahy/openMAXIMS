//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.62 build 3126.20282)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.presentation;

import ims.RefMan.vo.PresentationReferralSummaryVo;
import ims.core.vo.enums.DocumentViewLevel;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.core.vo.lookups.DocumentCategory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{

		initialze();
		
	
	}

	private void initialze()
	{
		form.lyr1().tabPagePresentationComp().ccPresentationComp().initialize();
		form.lyr1().tabPageLetter().ccUploadDoc().initialize(DocumentCategory.GPLETTER, UploadDocumentStoreLevel.REFERRAL,DocumentViewLevel.REFERRAL);
		form.getGlobalContext().setPresentationReferalSummaryChanged(false);
		form.getLocalContext().setPresentationReferralSummaryvo(null);
	
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] strErrors = form.lyr1().tabPagePresentationComp().ccPresentationComp().validate(null);
		PresentationReferralSummaryVo voPres = form.lyr1().tabPagePresentationComp().ccPresentationComp().getValue();

		String[] str = voPres.validate(strErrors);
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return;
		}

		try
		{
			domain.savePresentationReferralSummary(voPres);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.toString());
			return;
		}

		engine.close(DialogResult.OK);

	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{

		engine.close(DialogResult.CANCEL);

	}

	protected void onlyr1TabChanged(LayerBridge tab)
	{

		if (tab.equals(form.lyr1().tabPagePresentationComp()))
		{
			
			if(form.getLocalContext().getPresentationReferralSummaryvoIsNotNull())
			{
				
				populatePresentationTab(form.getLocalContext().getPresentationReferralSummaryvo());
				
			}
			else
			{
			
				PresentationReferralSummaryVo refSummary  = domain.getPresentationReferralSummary(form.getGlobalContext().RefMan.getCatsReferral());
				form.getLocalContext().setPresentationReferralSummaryvo(refSummary);
				populatePresentationTab(refSummary);
			
			}	
	
		}
		else if (tab.equals(form.lyr1().tabPageLetter()))
		{
			try
			{
			
				form.lyr1().tabPageLetter().ccUploadDoc().initialize(DocumentCategory.GPLETTER, UploadDocumentStoreLevel.REFERRAL,DocumentViewLevel.REFERRAL);//WDEV-12242
			
			}
			catch (RuntimeException e)
			{
				engine.showMessage(e.toString());
			}
		}
	}

	private void populatePresentationTab(PresentationReferralSummaryVo refSummary)
	{
		
		form.lyr1().tabPagePresentationComp().ccPresentationComp().setValue(refSummary);
	}

	@Override
	protected void onPresentationCCValueChanged() throws PresentationLogicException
	{
	
		if(form.getGlobalContext().getPresentationReferalSummaryChanged() == true)
		{
		
			form.getLocalContext().setPresentationReferralSummaryvo(form.getGlobalContext().getsavedPresentationReferralSummary());
			form.getGlobalContext().setPresentationReferalSummaryChanged(false);
			
			
		}
	}


}
