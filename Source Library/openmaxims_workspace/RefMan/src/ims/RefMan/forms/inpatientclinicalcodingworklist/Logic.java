//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.inpatientclinicalcodingworklist;

import ims.RefMan.forms.inpatientclinicalcodingworklist.GenForm.GroupCommentEnumeration;
import ims.RefMan.vo.AdmissionDetailForCoderWorklistVo;
import ims.RefMan.vo.AdmissionDetailForCoderWorklistVoCollection;
import ims.RefMan.vo.DischargedEpisodeForClinicalCodingWorklistVo;
import ims.RefMan.vo.InpatientClinicalCodingWorklistSearchCriteriaVo;
import ims.RefMan.vo.PasEventForClinicalCodingWorklistVo;
import ims.clinical.vo.CodingCommentVo;
import ims.clinical.vo.CodingCommentVoCollection;
import ims.clinical.vo.lookups.CodingCommentStatus;
import ims.clinical.vo.lookups.StructuredCodingComment;
import ims.clinical.vo.lookups.StructuredCodingCommentCollection;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.DischargedEpisodeRefVoCollection;
import ims.core.vo.CodingDelayVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientId;
import ims.core.vo.PersonName;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.CodingStatus;
import ims.core.vo.lookups.CodingStatusCollection;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupTypeVo;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	
	private static class EstimateDischargeComparator implements Comparator<AdmissionDetailForCoderWorklistVo>
	{
		private int direction;
		
		//WDEV-21115
		public EstimateDischargeComparator(SortOrder sortOrderEstimatedDischage)
		{
			if (SortOrder.ASCENDING.equals(sortOrderEstimatedDischage))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AdmissionDetailForCoderWorklistVo o1, AdmissionDetailForCoderWorklistVo o2)
		{
			Boolean o1IsNotNull = o1.getDischargedEpisodeLinkedIsNotNull() && o1.getDischargedEpisodeLinked().getDischargeDateTimeIsNotNull();
			Boolean o2IsNotNull = o2.getDischargedEpisodeLinkedIsNotNull() && o2.getDischargedEpisodeLinked().getDischargeDateTimeIsNotNull();
			if (o1IsNotNull && o2IsNotNull)
			{
				return o1.getDischargedEpisodeLinked().getDischargeDateTime().getDate().compareTo(o2.getDischargedEpisodeLinked().getDischargeDateTime().getDate()) * direction;
			}
			
			if (o1IsNotNull && !o2IsNotNull)
			{
				return direction;
			}
			
			if (o2IsNotNull && !o1IsNotNull)
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}
	private static final long serialVersionUID = 1L;
	
	//WDEV-20395
	private static final int ICON_COLUMN = 0;
	private static final int PATIENT_NAME_COLUMN = 1;
	private static final int IDENTIFIER_COLUMN = 2;
	private static final int WARD_COLUMN = 3;
	private static final int CASE_NOTES_LOCATION_COLUMN = 4;
	private static final int CASE_NOTES_DATE_COLUMN = 5;
	private static final int CODING_COMMENTS_COLUMN = 6;
	private static final int CODING_DELAY_ICON_COLUMN = 7;
	private static final int LAST_CODING_COMMENT = 8; //WDEV-20786
	private static final int CODING_STATUS_COLUMN = 9;
	private static final int CODING_DISCHARGE_DATE_COLUMN = 10;//WDEV-21115

	private void addGridRow(AdmissionDetailForCoderWorklistVo admissionDetail,DynamicGridRow row) //WDEV-20395
	{
		if(admissionDetail == null)
			return;
		
		DynamicGridCell inpatientCell = row.getCells().newCell(getColumn(ICON_COLUMN), DynamicCellType.IMAGE);
		DynamicGridCell patNameCell = row.getCells().newCell(getColumn(PATIENT_NAME_COLUMN), DynamicCellType.STRING);
		DynamicGridCell idenNumCell = row.getCells().newCell(getColumn(IDENTIFIER_COLUMN), DynamicCellType.STRING);
	
		patNameCell.setReadOnly(true);
		idenNumCell.setReadOnly(true);
		
		//WDEV-20395
		String strActualDischargeDate = "";
		if(admissionDetail.getDischargedEpisodeLinkedIsNotNull()) 
		{
			if (admissionDetail.getDischargedEpisodeLinked().getDischargeDateTimeIsNotNull())
			{
				strActualDischargeDate+="<b>Actual Discharge Date Time: </b>" + admissionDetail.getDischargedEpisodeLinked().getDischargeDateTime().toString();
			}
	
			DynamicGridCell codingDelayIconCell = row.getCells().newCell(getColumn(CODING_DELAY_ICON_COLUMN), DynamicCellType.IMAGE);
			codingDelayIconCell.setValue(admissionDetail.getDischargedEpisodeLinked().getCodingDelayIsNotNull() ? form.getImages().Core.Time : null );
			codingDelayIconCell.setTooltip(admissionDetail.getDischargedEpisodeLinked().getCodingDelayIsNotNull() ? getTooltipForCodingDelay(admissionDetail.getDischargedEpisodeLinked().getCodingDelay()) : "");			
		}
		
		if (admissionDetail.getPasEvent() != null && admissionDetail.getPasEvent().getPatient() != null)
		{
			inpatientCell.setValue(admissionDetail.getPasEvent().getPatient().getWard() != null ? form.getImages().RefMan.Admission16 : null);
			
			if(inpatientCell.getValue() != null)
				inpatientCell.setTooltip("Patient is a current inpatient - " + admissionDetail.getPasEvent().getPatient().getWard().getName());
			
			//WDEV-20395
			String strPatName=getPatNameSurnameFirst(admissionDetail.getPasEvent().getPatient().getName());
			patNameCell.setValue(strPatName);
			patNameCell.setTooltip(strPatName);

			//WDEV-22424
			String name = ims.configuration.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue();
			ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(name);
			
			if (type == null) type = ims.core.vo.lookups.PatIdType.HOSPNUM;
			PatientId patID = admissionDetail.getPasEvent().getPatient().getPatId(type);
			idenNumCell.setValue(patID!=null ? patID.getValue() : null);
			
			idenNumCell.setTooltip(strActualDischargeDate);//WDEV-20395
			
			DynamicGridCell caseNoteLocCell = row.getCells().newCell(getColumn(CASE_NOTES_LOCATION_COLUMN), DynamicCellType.STRING);
			caseNoteLocCell.setValue(admissionDetail.getPasEvent().getPatient().getCurrentCaseNoteLocation() != null ? admissionDetail.getPasEvent().getPatient().getCurrentCaseNoteLocation().getName() : null);
			caseNoteLocCell.setTooltip(admissionDetail.getPasEvent().getPatient().getCurrentCaseNoteLocation() != null ? admissionDetail.getPasEvent().getPatient().getCurrentCaseNoteLocation().getName() : null);
			caseNoteLocCell.setReadOnly(true);
			
			DynamicGridCell caseNoteDateCell = row.getCells().newCell(getColumn(CASE_NOTES_DATE_COLUMN), DynamicCellType.STRING);
			caseNoteDateCell.setValue(admissionDetail.getPasEvent().getPatient().getCaseNoteLastTransferDate() != null ? admissionDetail.getPasEvent().getPatient().getCaseNoteLastTransferDate().toString() : null);
			caseNoteDateCell.setTooltip(strActualDischargeDate);//WDEV-20395
			caseNoteDateCell.setReadOnly(true);
		}

		DynamicGridCell wardCell = row.getCells().newCell(getColumn(WARD_COLUMN), DynamicCellType.STRING);
		wardCell.setValue(admissionDetail.getPasEvent() != null && admissionDetail.getPasEvent().getLocation() != null ? admissionDetail.getPasEvent().getLocation().getName() : null);
		wardCell.setTooltip(admissionDetail.getPasEvent() != null && admissionDetail.getPasEvent().getLocation() != null ? admissionDetail.getPasEvent().getLocation().getName() : null);
		wardCell.setReadOnly(true);
	
		DynamicGridCell commentsCell = row.getCells().newCell(getColumn(CODING_COMMENTS_COLUMN), DynamicCellType.IMAGEBUTTON);
		commentsCell.setValue(form.getImages().Core.Comment16);
		commentsCell.setTooltip(getCommentTooltipDisplay(admissionDetail.getCodingComments()));
		commentsCell.setReadOnly(false);
		commentsCell.setAutoPostBack(true);
		
		//WDEV-20786
		String lastComment = getLastComment(admissionDetail.getCodingComments());
		DynamicGridCell lastCodingCommentCell = row.getCells().newCell(getColumn(LAST_CODING_COMMENT), DynamicCellType.STRING);
		lastCodingCommentCell.setValue(lastComment);
		lastCodingCommentCell.setTooltip(lastComment!=null ? lastComment : "");
		lastCodingCommentCell.setReadOnly(true);
		
		DynamicGridCell codingStatusCell = row.getCells().newCell(getColumn(CODING_STATUS_COLUMN), DynamicCellType.STRING);
		codingStatusCell.setValue(admissionDetail.getCodingStatusIsNotNull() ? admissionDetail.getCodingStatus().getText() : CodingStatus.UNCODED.getText());
		codingStatusCell.setTooltip(strActualDischargeDate);//WDEV-20395
		codingStatusCell.setReadOnly(true);
		
		DynamicGridCell codingDischargeDate = row.getCells().newCell(getColumn(CODING_DISCHARGE_DATE_COLUMN), DynamicCellType.LABEL);
		boolean dischargeDate = admissionDetail.getDischargedEpisodeLinkedIsNotNull() && admissionDetail.getDischargedEpisodeLinked().getDischargeDateTimeIsNotNull();
		codingDischargeDate.setValue(dischargeDate  ? admissionDetail.getDischargedEpisodeLinked().getDischargeDateTime().getDate().toString():null);
		codingDischargeDate.setTooltip(strActualDischargeDate);//WDEV-20395
		codingDischargeDate.setReadOnly(true);
	}
	
	//WDEV-20786
	private String getLastComment(CodingCommentVoCollection codingComments)
	{
		if (codingComments == null || codingComments.size() == 0)
			return null;
		
		codingComments.sort(SortOrder.DESCENDING);
		
		for(CodingCommentVo comm : codingComments)
		{
			if(comm == null || CodingCommentStatus.SUPERCEDED.equals(comm.getCommentStatus()))
				continue;
			
			return comm.getCommentText();
		}
		
		return null;
	}

	private String getPatNameSurnameFirst(PersonName patName) //WDEV-20395
	{
		if (patName==null)
			return "";
		
		String strPatName = "";
		if (patName.getSurnameIsNotNull())
			strPatName+=patName.getSurname();
		
		if (patName.getForenameIsNotNull())
			strPatName+=", "+patName.getForename();
		
		if (patName.getTitleIsNotNull())
			strPatName+=", "+patName.getTitle().toString();
		
		return strPatName;
	}

	private void clearScreen(boolean resetFilters)
	{		
		if (resetFilters)
		{
			if (engine.hasRight(AppRight.VIEW_OTHER_CODED_RECORDS))
				form.ccUser().setValue(null);
			
			form.chkForReview().setValue(false);
			form.chkUncoded().setValue(false);
			form.chkInProgress().setValue(false);
		}
		
		form.cmbSpecialty().setValue(null);
		form.cmbHospital().setValue(null);
		
		clearSelectedWards();
		clearSelectedCaseNoteFolderLocations();
		
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);		
		
		form.cmbComment().setValue(null);
		form.txtComments().setValue(null);
		form.txtComments().setTooltip(null);
		form.chkCoded().setValue(false);
		form.txtMRN().setValue(null);
		form.txtMRN().setTooltip(null);
		
		form.GroupComment().setValue(GroupCommentEnumeration.rdoLastComment);
		
		form.chkHistology().setValue(false);
		form.qmbCaseNoteLocation().clear();
		form.dynGrdCodingRecords().getRows().clear();
		form.lblTotal().setValue("Total: ");
	}

	private CodingStatusCollection getCodingStatusCriteriaFromScreenControls()
	{
		CodingStatusCollection codingStatuses = new CodingStatusCollection();
		if (form.chkUncoded().getValue())
			codingStatuses.add(CodingStatus.UNCODED);
		if (form.chkInProgress().getValue())
			codingStatuses.add(CodingStatus.INPROGRESS);
		if (form.chkForReview().getValue())
			codingStatuses.add(CodingStatus.FORREVIEW);
		if (form.chkCoded().getValue())
			codingStatuses.add(CodingStatus.CODED);

		if (codingStatuses.size() == 0)
			return null;

		return codingStatuses;
	}
	
	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dynGrdCodingRecords().getColumns().getByIdentifier(identifier);
	}

	private String getCommentsLabel(LookupInstanceCollection selectedLookupInstances)
	{
		int size = selectedLookupInstances.size();
		
		StringBuilder tooltip = new StringBuilder();
		tooltip.append(size >0 ? "and also: ":"" );
		
		for (int i=1;i<size;i++)
		{
			boolean oneComment = i == size -1;

			tooltip.append(selectedLookupInstances.getIndex(i).getText() + (oneComment ? "": "; "));
		}	
		
		return tooltip.append(size > 1 ? "." : "").toString();	
	}

	private String getCommentTooltipDisplay(ims.clinical.vo.CodingCommentVoCollection codingCommentColl)
	{
		if (codingCommentColl == null || codingCommentColl.size() == 0)
			return "";
		
		StringBuilder szTooltip = new StringBuilder();
		CodingCommentVoCollection parseColl = codingCommentColl.sort(SortOrder.DESCENDING);
		String szSeparator = "";
		for (int i =0; i<parseColl.size();i++)
		{
			if (codingCommentColl.get(i) == null)
				continue;
			
			if(CodingCommentStatus.SUPERCEDED.equals(codingCommentColl.get(i).getCommentStatus()))
				continue;
			
			szTooltip.append(szSeparator).append((codingCommentColl.get(i).getAuthoringMOSIsNotNull() ? "Authoring User: <b>" + codingCommentColl.get(i).getAuthoringMOS().getIMosName() + "</b><br/>" : "") + (codingCommentColl.get(i).getAuthoringDateTimeIsNotNull() ? "Authoring Date/Time: <b>" + codingCommentColl.get(i).getAuthoringDateTime().toString() + "</b><br/>" : "") + (codingCommentColl.get(i).getStructuredCommentIsNotNull()  ? "Comment: <b>"  + codingCommentColl.get(i).getStructuredComment().getText() + "</b><br/>" : "") + (codingCommentColl.get(i).getCommentTextIsNotNull() ? "Text Comment: <b>" + codingCommentColl.get(i).getCommentText() + "</b><br/>" : ""));
			szSeparator = "<br/>";
		}
		
		return szTooltip.toString();
	}

	//WDEV-19609
	private String getTooltipForCodingDelay(CodingDelayVo codingDelay)
	{
		if (codingDelay == null)
			return "";

		StringBuffer tooltip = new StringBuffer();

		if (codingDelay.getCodingDelayReasonIsNotNull())
		{
			tooltip.append("<b>Coding Delay Reason: </b> "+ codingDelay.getCodingDelayReason().getText());
		}

		if (codingDelay.getCodingDelayReasonText()!=null)
		{
			if (tooltip.length()>0)
				tooltip.append("<br>");

			tooltip.append("<b>Coding Delay Reason Text: </b> "+ codingDelay.getCodingDelayReasonText());
		}

		return tooltip.toString();
	}

	private AdmissionDetailForCoderWorklistVoCollection getValuesFromGrid()
	{
		AdmissionDetailForCoderWorklistVoCollection coll = new AdmissionDetailForCoderWorklistVoCollection();

		DynamicGridRowCollection rows = form.dynGrdCodingRecords().getRows();
		for (int i=0;i<rows.size();i++)
		{
			if (rows.get(i) == null || rows.get(i).getValue() == null)
				continue;
			coll.add((AdmissionDetailForCoderWorklistVo) rows.get(i).getValue());
		}
		
		return coll;	
	}

	private void initialise()
	{
		populateHospital();
		listCurrentWards(form.cmbHospital().getValue(), null, false);
		
		ILocation currentLocation = engine.getCurrentLocation();
		if(form.cmbHospital().getValue() != null && currentLocation instanceof LocationLiteVo)
		{
			form.qmbDischargeWard().setValue((LocationLiteVo) currentLocation);
		}
		
		form.GroupComment().setValue(GroupCommentEnumeration.rdoLastComment);
		
		form.ccUser().initialize(MosType.ALL);
		
		form.getGlobalContext().Core.setSelectLookupType(new LookupTypeVo(StructuredCodingComment.TYPE_ID));
		form.getGlobalContext().Core.setSelectedLookupInstances(null);	
		
		initialiseDynamicGrid();
	}
	
	private void populateHospital() 
	{
		form.cmbHospital().clear();
		
		LocationLiteVoCollection hospColl = domain.listHospitals();
		
		if(hospColl == null)
			return;
		
		for (int i = 0; i < hospColl.size(); i++)
		{
			LocationLiteVo hosp = hospColl.get(i);
			form.cmbHospital().newRow(hosp, hosp.getName());
		}
		
		LocationLiteVo currentHospital = domain.getCurrentHospital(engine.getCurrentLocation());
		form.cmbHospital().setValue(currentHospital);
	}

	private void initialiseDynamicGrid() //WDEV-20395
	{
		form.dynGrdCodingRecords().clear();
		form.dynGrdCodingRecords().setSelectable(true);
		form.dynGrdCodingRecords().setHeaderHeight(56);		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		DynamicGridColumn col = form.dynGrdCodingRecords().getColumns().newColumn("", ICON_COLUMN);
		col.setWidth(20);
		col.setCanGrow(Boolean.FALSE);
		col.setReadOnly(Boolean.TRUE);
		//col.setSortMode(SortMode.AUTOMATIC);
		
		col = form.dynGrdCodingRecords().getColumns().newColumn(dispIdType.getText(), IDENTIFIER_COLUMN);
		col.setWidth(95);
		col.setCanGrow(Boolean.FALSE);
		col.setReadOnly(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);
		
		col = form.dynGrdCodingRecords().getColumns().newColumn("Patient Name", PATIENT_NAME_COLUMN);
		col.setWidth(149);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);

		col = form.dynGrdCodingRecords().getColumns().newColumn("Ward", WARD_COLUMN);
		col.setWidth(90);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);

		col = form.dynGrdCodingRecords().getColumns().newColumn("Case Note \nFolder Location", CASE_NOTES_LOCATION_COLUMN);
		col.setWidth(93);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);
		
		col = form.dynGrdCodingRecords().getColumns().newColumn("Case Note \nTransfer Date", CASE_NOTES_DATE_COLUMN);
		col.setWidth(95);
		col.setCanGrow(Boolean.FALSE);
		col.setReadOnly(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);

		col = form.dynGrdCodingRecords().getColumns().newColumn(" ", CODING_COMMENTS_COLUMN);
		col.setWidth(26);
		col.setCanGrow(Boolean.FALSE);
		col.setAlignment(Alignment.CENTER);
		col.setReadOnly(Boolean.TRUE);

		col = form.dynGrdCodingRecords().getColumns().newColumn(" ", CODING_DELAY_ICON_COLUMN);
		col.setWidth(23);
		col.setCanGrow(Boolean.FALSE);
		col.setReadOnly(Boolean.TRUE);
		col.setAlignment(Alignment.CENTER);
		
		col = form.dynGrdCodingRecords().getColumns().newColumn("Coding Comment", LAST_CODING_COMMENT);
		col.setWidth(100);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);
		
		col = form.dynGrdCodingRecords().getColumns().newColumn("Coding Status", CODING_STATUS_COLUMN);
		col.setWidth(50);		
		col.setReadOnly(Boolean.FALSE);
		col.setCanGrow(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);
		
		col = form.dynGrdCodingRecords().getColumns().newColumn("Discharge Date", CODING_DISCHARGE_DATE_COLUMN);//WDEV-21115
		col.setWidth(-1);		
		col.setReadOnly(Boolean.FALSE);
		col.setCanGrow(Boolean.TRUE);
		col.setSortMode(SortMode.MANUAL);
	}

	private boolean isSearchCriteriaValid(boolean isFromButton)
	{
		ArrayList<String> uiErrors = new ArrayList<String>();

		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();

		if (form.cmbSpecialty().getValue() == null && form.cmbHospital().getValue() == null && form.qmbDischargeWard().getValue() == null && form.ccUser().getValue() == null && dateFrom == null && dateTo == null && form.cmbComment().getValue() == null && form.qmbCaseNoteLocation().getValue() == null && !Boolean.TRUE.equals(form.chkCoded().getValue()) && !Boolean.TRUE.equals(form.chkForReview().getValue()) && !Boolean.TRUE.equals(form.chkHistology().getValue()) && !Boolean.TRUE.equals(form.chkInProgress().getValue()) && !Boolean.TRUE.equals(form.chkUncoded().getValue()) && form.txtMRN().getValue() == null)
		{
			uiErrors.add("Complete at least one search field.");
		}

		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add( "'Discharge Date From' date cannot be later than 'Discharge Date To' date.");
		}

		if (uiErrors.size() > 0)
		{
			if(isFromButton)
			{
				engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			}

			return false;
		}

		return true;
	}

	private void listCurrentWards(LocationLiteVo hospital, String wardName, boolean showOpened) 
	{
		form.qmbDischargeWard().clear();

		if(hospital == null || hospital.getID_Location() == null)
			return;

		LocationLiteVoCollection wards = domain.listWards(hospital, wardName);

		if(wards == null || wards.size() == 0)
			return;

		for(LocationLiteVo ward : wards)
		{
			if(ward == null)
				continue;

			form.qmbDischargeWard().newRow(ward, ward.getName());
		}

		if(showOpened)
		{
			if(wards.size() == 1)
			{
				form.qmbDischargeWard().setValue(wards.get(0));
				qmbDischargeWardValueChanged();//WDEV-20395
				return;
			}

			form.qmbDischargeWard().showOpened();
		}
	}

	@Override
	protected void onBtnAddCommentClick() throws PresentationLogicException
	{
		addComment();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
    			//WDEV-19609
    		case GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.RECORD_DELAYED_CODING_REASON:
    			if (form.dynGrdCodingRecords().getValue()!=null)
    			{
    				engine.open(form.getForms().RefMan.RecordDelayedCodingReason, new Object[] {((AdmissionDetailForCoderWorklistVo )form.dynGrdCodingRecords().getValue()).getDischargedEpisodeLinked(), FormMode.EDIT});
    			}
    		break;
    
    		case GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.VIEW_DELAYED_CODING_REASON:	
    			if (form.dynGrdCodingRecords().getValue()!=null)
    			{
    				engine.open(form.getForms().RefMan.RecordDelayedCodingReason, new Object[] {((AdmissionDetailForCoderWorklistVo )form.dynGrdCodingRecords().getValue()).getDischargedEpisodeLinked(), FormMode.VIEW});
    			}
    		break;
    
    			//WDEV-19610
    		case GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.VIEW_PATIENT_CODING_RECORDS:	
    			engine.open(form.getForms().RefMan.ViewPatientCodingRecords, new Object[] {form.getGlobalContext().RefMan.getCatsReferral()});
    		break;
    		
    		case GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.COMMENT:
    			addComment();
    		break;
    		
    		case GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.VIEW_PATIENT_ACTIVITY_SUMMARY: //WDEV-20786
    			openPatientActivitySummary();
    		break;	
		}
	}

	private void encode()
	{
		if (form.dynGrdCodingRecords().getValue() == null)
			return;
		
		engine.open(form.getForms().RefMan.ReferralExternalCoding, new Object[] {form.dynGrdCodingRecords().getValue()});
	}

	private void addComment()
	{
		if (form.dynGrdCodingRecords().getValue() == null)
			return;
		
		form.getGlobalContext().RefMan.setAdmissionDetailRef(form.dynGrdCodingRecords().getValue() != null ? ((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()) : null);
		
		engine.open(form.getForms().RefMan.CodingComment, new Object[]{FormMode.EDIT});
	}

	@Override
	protected void onDynGrdCodingRecordsCellButtonClicked(DynamicGridCell cell)
	{
		if (DynamicCellType.IMAGEBUTTON.equals(cell.getType()) && cell.getColumn().equals(getColumn(CODING_COMMENTS_COLUMN)))
		{
			Object rowVal = cell.getRow().getValue(); 
			form.dynGrdCodingRecords().setValue(rowVal);
			
			if (rowVal instanceof AdmissionDetailForCoderWorklistVo)
			{
				if (((AdmissionDetailForCoderWorklistVo) rowVal).getPasEventIsNotNull())	
					form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((AdmissionDetailForCoderWorklistVo) rowVal).getPasEvent().getPatient()));
					form.getGlobalContext().RefMan.setAdmissionDetailRef((AdmissionDetailForCoderWorklistVo) cell.getRow().getValue() != null ?  ((AdmissionDetailForCoderWorklistVo) cell.getRow().getValue()) : null);
			}	
			
			engine.open(form.getForms().RefMan.CodingComment, new Object[]{FormMode.VIEW});
		}
	}

	@Override
	protected void onDynGrdCodingRecordsColumnHeaderClicked(DynamicGridColumn column)
	{
		AdmissionDetailForCoderWorklistVoCollection coll = getValuesFromGrid();	

		if (coll.size() == 0)
			return;

		switch((Integer)column.getIdentifier()) //WDEV-20395
		{
		case CODING_DISCHARGE_DATE_COLUMN:
			{
				
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getDischargeDateTimeSortOrder()))
				form.getLocalContext().setDischargeDateTimeSortOrder(SortOrder.DESCENDING);
			
			else
				form.getLocalContext().setDischargeDateTimeSortOrder(SortOrder.ASCENDING);
			
			
			coll.sort(new EstimateDischargeComparator(form.getLocalContext().getDischargeDateTimeSortOrder()));
			break;
			}
		}
		populateScreenFromData(coll);
	}

	@Override
	protected void onDynGrdCodingRecordsRowSelectionChanged(DynamicGridRow row)	throws PresentationLogicException 
	{
		selectionChanged();
		
		updateControlsState();
	}

	private void selectionChanged()
	{
		AdmissionDetailForCoderWorklistVo rowVal = form.dynGrdCodingRecords().getValue() instanceof AdmissionDetailForCoderWorklistVo  ? (AdmissionDetailForCoderWorklistVo) form.dynGrdCodingRecords().getValue() : null;
		
		form.getLocalContext().setSelRecord(rowVal);
		if (rowVal != null)
		{
			PasEventForClinicalCodingWorklistVo pasEvent = rowVal.getPasEvent();
			if (pasEvent != null)
			{
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(pasEvent.getPatient()));
			}
			
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(rowVal.getPasEvent()));
		}
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.SelectLookupInstances))
		{
			if(DialogResult.OK.equals(result))
			{
				populateCommentsSearchFields(form.getGlobalContext().Core.getSelectedLookupInstances());
			}
			
			updateControlsState();
		}
		else if (formName.equals(form.getForms().RefMan.CodingComment) || formName.equals(form.getForms().RefMan.RecordDelayedCodingReason)) //WDEV-19609
		{
			open();			
		}	
		else if(form.getForms().RefMan.WardSelection.equals(formName))
		{	
			if(DialogResult.OK.equals(result))
			{
				if(LocationType.WARD.equals(form.getLocalContext().getLocationType()))
				{
					populateDischargedWardsSearchFields();
				}
				else if(LocationType.CASE_NOTE_FOLDER_LOCATION.equals(form.getLocalContext().getLocationType()))
				{
					populateCaseNoteFolderLocationsSearchFields();
				}
			}
			
			updateControlsState();
		}
		else if (form.getForms().Core.PrintReport.equals(formName)) //WDEV-20395
		{
			form.getGlobalContext().RefMan.setDischargedEpisodeRefColl(null);
		}
	}

	private void populateCaseNoteFolderLocationsSearchFields()
	{
		form.txtCaseNoteFoldersLocations().setValue(null);
		form.txtCaseNoteFoldersLocations().setTooltip(null);
		form.qmbCaseNoteLocation().clear();
		
		if(form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations() != null && form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().size() > 0)
		{
			form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().sort();
			
			form.qmbCaseNoteLocation().newRow(form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().get(0), form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().get(0).getName());
			form.qmbCaseNoteLocation().setValue(form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().get(0));
			
			StringBuffer caseNoteFolderLocationsAsString = new StringBuffer();
			
			if(form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().size() > 1)
			{
				for(int i=1; i<form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().size(); i++)
				{
					if(form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().get(i) == null)
						continue;
					
					if(caseNoteFolderLocationsAsString.length() > 0)
						caseNoteFolderLocationsAsString.append("; ");
					
					caseNoteFolderLocationsAsString.append(form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations().get(i).getName());
				}
				
				caseNoteFolderLocationsAsString.insert(0, "and also: ");
			}
			
			form.txtCaseNoteFoldersLocations().setValue(caseNoteFolderLocationsAsString.toString());
			form.txtCaseNoteFoldersLocations().setTooltip(caseNoteFolderLocationsAsString.toString());
		}
	}

	private void populateDischargedWardsSearchFields()
	{
		form.txtDischargedWards().setValue(null);
		form.txtDischargedWards().setTooltip(null);
		form.qmbDischargeWard().clear();
		
		if(form.getGlobalContext().RefMan.getSelectedWards() != null && form.getGlobalContext().RefMan.getSelectedWards().size() > 0)
		{
			form.getGlobalContext().RefMan.getSelectedWards().sort();
			
			form.qmbDischargeWard().newRow(form.getGlobalContext().RefMan.getSelectedWards().get(0), form.getGlobalContext().RefMan.getSelectedWards().get(0).getName());
			form.qmbDischargeWard().setValue(form.getGlobalContext().RefMan.getSelectedWards().get(0));
			
			StringBuffer wardsAsString = new StringBuffer();
			
			if(form.getGlobalContext().RefMan.getSelectedWards().size() > 1)
			{
				for(int i=1; i<form.getGlobalContext().RefMan.getSelectedWards().size(); i++)
				{
					if(form.getGlobalContext().RefMan.getSelectedWards().get(i) == null)
						continue;
					
					if(wardsAsString.length() > 0)
						wardsAsString.append("; ");
					
					wardsAsString.append(form.getGlobalContext().RefMan.getSelectedWards().get(i).getName());
				}
				
				wardsAsString.insert(0, "and also: ");
			}
			
			form.txtDischargedWards().setValue(wardsAsString.toString());
			form.txtDischargedWards().setTooltip(wardsAsString.toString());
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}


	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen(true);
		
		form.getLocalContext().setSelRecord(null);
		form.getGlobalContext().RefMan.setInpatientClinicalCodingWorklistCriteria(null);
		form.getGlobalContext().Core.setSelectedLookupInstances(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null);
		
		updateControlsState();
	}

	@Override
	protected void onImbCommentSelectClick() throws PresentationLogicException
	{
		selectComments();		
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (search(true))
		{
			form.getGlobalContext().RefMan.setInpatientClinicalCodingWorklistCriteria(populateSearchCriteriaDataFromScreen());
		}

		updateControlsState();
	}

	@Override
	protected void onQmbDischargeWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		listCurrentWards(form.cmbHospital().getValue(), value, true);
	}

	private void open()
	{
		if(form.getGlobalContext().RefMan.getInpatientClinicalCodingWorklistCriteria() != null)
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().RefMan.getInpatientClinicalCodingWorklistCriteria());
		}
		else
		{
			setDefaultSearchCriteria();
		}
		
		search(false);
		
		if (form.getLocalContext().getSelRecordIsNotNull())
		{
			form.dynGrdCodingRecords().setValue(form.getLocalContext().getSelRecord());
			
			selectionChanged();
		}
		
		form.setMode(FormMode.VIEW);
	}

	private void populateCommentsSearchFields(LookupInstanceCollection selectedLookupInstances)
	{
		form.cmbComment().setValue(null);
		form.txtComments().setValue(null);
		form.txtComments().setTooltip(null);

		if (selectedLookupInstances == null || selectedLookupInstances.size() == 0)
			return;

		int commentsSelectedCount = selectedLookupInstances.size();

		if (commentsSelectedCount >=1)
		{	
			form.cmbComment().setValue((StructuredCodingComment) selectedLookupInstances.getIndex(0));

			if (commentsSelectedCount > 1)
			{
				String strLabel = getCommentsLabel(selectedLookupInstances);
				form.txtComments().setValue(strLabel);
				form.txtComments().setTooltip(strLabel);
			}	
		}
	}

	private void populateScreenFromData(AdmissionDetailForCoderWorklistVoCollection AdmissionDetailForCoderWorklistVoCollection)
	{
		form.dynGrdCodingRecords().getRows().clear();
		form.getGlobalContext().Core.setPatientShort(null);

		if (AdmissionDetailForCoderWorklistVoCollection == null)
			return;

		for (ims.RefMan.vo.AdmissionDetailForCoderWorklistVo episode : AdmissionDetailForCoderWorklistVoCollection)
		{
			if (episode == null)
				return;

			DynamicGridRow row = form.dynGrdCodingRecords().getRows().newRow();

			addGridRow(episode, row);
			
			row.setValue(episode);
			
			row.setIdentifier(episode.getDischargedEpisodeLinkedIsNotNull() ? episode.getDischargedEpisodeLinked() : episode);
		}
		
		form.txtMRN().setTooltip(form.txtMRN().getValue());
		form.lblTotal().setValue("Total: " + form.dynGrdCodingRecords().getRows().size());
	}

	private InpatientClinicalCodingWorklistSearchCriteriaVo populateSearchCriteriaDataFromScreen()
	{
		InpatientClinicalCodingWorklistSearchCriteriaVo criteria = new InpatientClinicalCodingWorklistSearchCriteriaVo();
		
		criteria.setHospital(form.cmbHospital().getValue());
		criteria.setDischargeWards(form.getGlobalContext().RefMan.getSelectedWards());
		criteria.setSpecialty(form.cmbSpecialty().getValue());
		criteria.setDateFrom(form.dteFrom().getValue());
		criteria.setDateTo(form.dteTo().getValue());
		criteria.setUser(form.ccUser().getValue());

		criteria.setCodingStatuses(getCodingStatusCriteriaFromScreenControls());
		criteria.setAwaitingHistology(form.chkHistology().getValue());
		criteria.setComments(form.getGlobalContext().Core.getSelectedLookupInstances());
		criteria.setCaseNoteLocation(form.getGlobalContext().RefMan.getSelectedCaseNoteFolderLocations());
		criteria.setMRNNumbers(form.txtMRN().getValue());
		
		criteria.setLastComment(GroupCommentEnumeration.rdoLastComment.equals(form.GroupComment().getValue()));
		criteria.setAllComments(GroupCommentEnumeration.rdoAllComments.equals(form.GroupComment().getValue()));

		return criteria;
	}

	private void populateSearchCriteriaScreenFromData(InpatientClinicalCodingWorklistSearchCriteriaVo criteria)
	{
		clearScreen(false);

		if(criteria == null)
			return;
		
		form.cmbHospital().setValue(criteria.getHospital());
		form.getGlobalContext().RefMan.setSelectedWards(criteria.getDischargeWards());
		populateDischargedWardsSearchFields();
		
		form.getGlobalContext().RefMan.setSelectedCaseNoteFolderLocations(criteria.getCaseNoteLocation());
		populateCaseNoteFolderLocationsSearchFields();
		
		form.cmbSpecialty().setValue(criteria.getSpecialty());
	
		form.ccUser().setValue(criteria.getUser());
		form.dteFrom().setValue(criteria.getDateFrom());
		form.dteTo().setValue(criteria.getDateTo());
		
		populateStatusSearchFields(criteria);
		
		if (Boolean.TRUE.equals(criteria.getAwaitingHistology()))
			form.chkHistology().setValue(true);
		
		form.getGlobalContext().Core.setSelectedLookupInstances(criteria.getComments());
		populateCommentsSearchFields(form.getGlobalContext().Core.getSelectedLookupInstances());
		
		form.GroupComment().setValue(Boolean.TRUE.equals(criteria.getLastComment()) ? GroupCommentEnumeration.rdoLastComment : (Boolean.TRUE.equals(criteria.getAllComments()) ? GroupCommentEnumeration.rdoAllComments : null));
		
		form.txtMRN().setValue(criteria.getMRNNumbers());
		form.txtMRN().setTooltip(criteria.getMRNNumbers());
	}

	private void populateStatusSearchFields(InpatientClinicalCodingWorklistSearchCriteriaVo criteria)
	{
		if(criteria == null)
			return;
		
		if (criteria.getCodingStatusesIsNotNull())
		{
			for (int i=0;i<criteria.getCodingStatuses().size();i++)
			{	
				if (criteria.getCodingStatuses().getIndex(i) == null)
					continue;

				if (CodingStatus.CODED.equals(criteria.getCodingStatuses().getIndex(i)))
				{		
					form.chkCoded().setValue(true);
					continue;
				}
				else if (CodingStatus.UNCODED.equals(criteria.getCodingStatuses().getIndex(i)))
				{	
					form.chkUncoded().setValue(true);
					continue;
				}
				else if (CodingStatus.FORREVIEW.equals(criteria.getCodingStatuses().getIndex(i)))
				{	
					form.chkForReview().setValue(true);
					continue;
				}
				else if (CodingStatus.INPROGRESS.equals(criteria.getCodingStatuses().getIndex(i)))
				{
					form.chkInProgress().setValue(true);
					continue;
				}
			}
		}
	}

	private boolean search(boolean isFromButton)
	{
		if(isSearchCriteriaValid(isFromButton))
		{
			if (isFromButton)
			{
				form.getLocalContext().setSelRecord(null);
			}
			
			populateScreenFromData(domain.listEpisodes(populateSearchCriteriaDataFromScreen()));
			form.getLocalContext().setDischargeDateTimeSortOrder(SortOrder.ASCENDING);

			if(form.dynGrdCodingRecords().getRows().size() == 0)
				engine.showMessage("No records found.");

			return true;
		}

		return false;
	}

	private void selectComments()
	{		
		//WDEV-23084
		/*LookupInstanceCollection instancesToAdd  = new LookupInstanceCollection();
		
		if (form.getGlobalContext().RefMan.getInpatientClinicalCodingWorklistCriteriaIsNotNull())
		{
			instancesToAdd = form.getGlobalContext().RefMan.getInpatientClinicalCodingWorklistCriteria().getComments();	
		}
		else if (form.cmbComment().getValue() != null)
		{
			instancesToAdd.add(form.cmbComment().getValue());
		}
		
		form.getGlobalContext().Core.setSelectedLookupInstances(instancesToAdd);*/		
		engine.open(form.getForms().Core.SelectLookupInstances);
	}

	private void setDefaultSearchCriteria()
	{
		form.txtComments().setValue(null);
		form.txtComments().setTooltip(null);
		form.chkUncoded().setValue(true);//WDEV-21434
	}

	private void updateControlsState()
	{
		form.qmbDischargeWard().setEnabled(form.cmbHospital().getValue() != null);
		form.imbWardsSearch().setEnabled(form.cmbHospital().getValue() != null);
		form.qmbCaseNoteLocation().setEnabled(form.cmbHospital().getValue() != null);
		form.imbSearchCaseNoteLocations().setEnabled(form.cmbHospital().getValue() != null);
		form.txtDischargedWards().setVisible(form.txtDischargedWards().getValue() != null);
		form.txtDischargedWards().setEnabled(false);
		form.txtCaseNoteFoldersLocations().setVisible(form.txtCaseNoteFoldersLocations().getValue() != null);
		form.txtCaseNoteFoldersLocations().setEnabled(false);
		
		form.ccUser().setEnabled(engine.hasRight(AppRight.VIEW_OTHER_CODED_RECORDS));
		
		form.txtComments().setVisible(form.txtComments().getValue() != null);
		form.txtComments().setEnabled(false);
		
		form.GroupComment().setEnabled(form.cmbComment().getValue() != null);
		
		form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuRECORD_DELAYED_CODING_REASONItem().setVisible(form.dynGrdCodingRecords().getValue() != null && ((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getDischargedEpisodeLinkedIsNotNull() && ((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getDischargedEpisodeLinked().getCodingDelay()==null && (((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getCodingStatus()==null || CodingStatus.UNCODED.equals(((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()))) ); //WDEV-19609  //WDEV-20163	 	
		form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuVIEW_DELAYED_CODING_REASONItem().setVisible(form.dynGrdCodingRecords().getValue() != null && ((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getDischargedEpisodeLinkedIsNotNull() && ((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getDischargedEpisodeLinked().getCodingDelay()!=null); //WDEV-19609
		form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuVIEW_PATIENT_CODING_RECORDSItem().setVisible(form.dynGrdCodingRecords().getValue() != null  && Boolean.TRUE.equals(domain.hasPatientReferralCodings(form.getGlobalContext().Core.getPatientShort()))); //WDEV-19610
		
		form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuCOMMENTItem().setVisible(form.dynGrdCodingRecords().getValue() != null);//&& ((((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getCodingComments() == null || ((((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getCodingComments() != null && (((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getCodingComments().size() ==0))))));
		form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuVIEW_PATIENT_ACTIVITY_SUMMARYItem().setVisible(form.dynGrdCodingRecords().getValue() != null); //WDEV-20786  // && ((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()) != null && !CodingStatus.CODED.equals(((AdmissionDetailForCoderWorklistVo) form.dynGrdCodingRecords().getValue()).getCodingStatus())); 
		
		form.btnAddComment().setVisible(form.dynGrdCodingRecords().getValue() != null);
		form.btnAddComment().setEnabled(form.dynGrdCodingRecords().getValue() != null);// && ((((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getCodingComments() == null || ((((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getCodingComments() != null && (((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getValue()).getCodingComments().size() ==0))))));
		form.btnPrint().setVisible(form.dynGrdCodingRecords().getRows().size()>0); //WDEV-20395
		form.btnPatActivitySummary().setVisible(form.dynGrdCodingRecords().getValue() != null); //WDEV-20786
	}
	
	class ConsultantComparator implements Comparator<AdmissionDetailForCoderWorklistVo>
	{
		private int order = 1;
		
		public ConsultantComparator()
		{
			order = 1;
		}
		public ConsultantComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		public int compare (AdmissionDetailForCoderWorklistVo o1, AdmissionDetailForCoderWorklistVo o2)
		{
			if(o1 != null && o1.getPasEvent() != null && o1.getPasEvent().getConsultantIsNotNull() && o2 != null && o2.getPasEvent() != null && o2.getPasEvent().getConsultantIsNotNull()) 
				return order*o1.getPasEvent().getConsultant().getMos().getName().compareTo(o2.getPasEvent().getConsultant().getMos().getName());

			if (o1 == null || !(o1.getPasEvent() != null) || !o1.getPasEvent().getConsultantIsNotNull())
				return -1 * order;

			if (o2 == null || !(o2.getPasEvent() != null) || !o2.getPasEvent().getConsultantIsNotNull())
				return order;

			return 0;
		}	
	}

	private static class DischargedDateTimeComparator implements Comparator<AdmissionDetailForCoderWorklistVo>
	{
		private int direction = 1;

		public DischargedDateTimeComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				this.direction = 1;
			else
				this.direction = -1;
		}

		public int compare(AdmissionDetailForCoderWorklistVo o1, AdmissionDetailForCoderWorklistVo o2)
		{
			if (o1.getDischargedEpisodeLinkedIsNotNull() && o2.getDischargedEpisodeLinkedIsNotNull())
				return compareByDischDateTime(o1.getDischargedEpisodeLinked(), o2.getDischargedEpisodeLinked());

			if (o1.getDischargedEpisodeLinkedIsNotNull() && !o2.getDischargedEpisodeLinkedIsNotNull())
				return direction;

			if (o2.getDischargedEpisodeLinkedIsNotNull() && !o1.getDischargedEpisodeLinkedIsNotNull())
				return -1 * direction;

			return 0;
		}

		private int compareByDischDateTime(DischargedEpisodeForClinicalCodingWorklistVo dischargedEpisode,	DischargedEpisodeForClinicalCodingWorklistVo dischargedEpisode2)
		{
			if (dischargedEpisode.getDischargeDateTimeIsNotNull() && dischargedEpisode2.getDischargeDateTimeIsNotNull())
				return dischargedEpisode.getDischargeDateTime().compareTo(dischargedEpisode2.getDischargeDateTime()) * direction;
			
			if (dischargedEpisode.getDischargeDateTimeIsNotNull() && !dischargedEpisode2.getDischargeDateTimeIsNotNull())
				return direction;
			
			if (dischargedEpisode2.getDischargeDateTimeIsNotNull() && !dischargedEpisode.getDischargeDateTimeIsNotNull())
				return -1 * direction;

			return 0;
		}
	}
	
	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		clearSelectedWards();
		clearSelectedCaseNoteFolderLocations();
		
		updateControlsState();
	}

	private void clearSelectedCaseNoteFolderLocations()
	{
		form.getGlobalContext().RefMan.setSelectedCaseNoteFolderLocations(null);
		form.qmbCaseNoteLocation().clear();
		form.txtCaseNoteFoldersLocations().setValue(null);
		form.txtCaseNoteFoldersLocations().setTooltip(null);
	}

	private void clearSelectedWards()
	{
		form.getGlobalContext().RefMan.setSelectedWards(null);
		form.qmbDischargeWard().clear();
		form.txtDischargedWards().setValue(null);
		form.txtDischargedWards().setTooltip(null);
	}

	@Override
	protected void onImbWardsSearchClick() throws PresentationLogicException
	{
		form.getLocalContext().setLocationType(LocationType.WARD);
		form.getGlobalContext().RefMan.setSelectedHospital(form.cmbHospital().getValue());
		engine.open(form.getForms().RefMan.WardSelection, new Object[] {LocationType.WARD});
	}

	@Override
	protected void onQmbCaseNoteLocationTextSubmited(String value) throws PresentationLogicException
	{
		listCaseNoteLocations(form.cmbHospital().getValue(), value, true);
	}
	
	private void listCaseNoteLocations(LocationLiteVo hospital, String locName, boolean showOpened) 
	{
		form.qmbCaseNoteLocation().clear();

		if(hospital == null || hospital.getID_Location() == null)
			return;

		LocationLiteVoCollection locColl = domain.listCaseNoteFolderLocations(hospital, locName);

		if(locColl == null || locColl.size() == 0)
			return;

		for(LocationLiteVo caseNoteLoc : locColl)
		{
			if(caseNoteLoc == null || caseNoteLoc.equals(form.cmbHospital().getValue()))//WDEV-22088 
				continue;

			form.qmbCaseNoteLocation().newRow(caseNoteLoc, caseNoteLoc.getName());
		}

		if(showOpened)
		{
			if(locColl.size() == 1)
			{
				form.qmbCaseNoteLocation().setValue(locColl.get(0));
				return;
			}

			form.qmbCaseNoteLocation().showOpened();
		}
	}

	@Override
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setDischargedEpisodeRefColl(getDischargeEpisodesFromGrid());
		engine.open(form.getForms().Core.PrintReport);
	}

	private DischargedEpisodeRefVoCollection getDischargeEpisodesFromGrid()
	{
		DischargedEpisodeRefVoCollection collDischargedEpisodeRef = new DischargedEpisodeRefVoCollection();
		if (form.dynGrdCodingRecords().getRows().size()==0)
			return collDischargedEpisodeRef;
	
		for (int i=0;i<form.dynGrdCodingRecords().getRows().size();i++)
		{
			if (form.dynGrdCodingRecords().getRows().get(i)!=null && form.dynGrdCodingRecords().getRows().get(i).getValue() instanceof  AdmissionDetailForCoderWorklistVo && ((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getRows().get(i).getValue()).getDischargedEpisodeLinkedIsNotNull())
			{
				collDischargedEpisodeRef.add(((AdmissionDetailForCoderWorklistVo)form.dynGrdCodingRecords().getRows().get(i).getValue()).getDischargedEpisodeLinked());
			}
		}
		return collDischargedEpisodeRef;
	}

	@Override
	protected void onQmbDischargeWardValueChanged() throws PresentationLogicException
	{
		qmbDischargeWardValueChanged(); //WDEV-20395
	}

	private void qmbDischargeWardValueChanged() //WDEV-20395
	{
		form.txtDischargedWards().setValue(null);
		form.txtDischargedWards().setTooltip(null);
		
		LocationLiteVoCollection coll = null;
		
		if(form.qmbDischargeWard().getValue() != null)
		{
			coll = new LocationLiteVoCollection();
			coll.add(form.qmbDischargeWard().getValue());
		}
		
		form.getGlobalContext().RefMan.setSelectedWards(coll);
		
		updateControlsState();
	}

	@Override
	protected void onCmbCommentValueChanged() throws PresentationLogicException
	{
		form.txtComments().setValue(null);
		form.txtComments().setTooltip(null);
		
		StructuredCodingCommentCollection coll = null;
			
		if(form.cmbComment().getValue() != null)
		{
			coll = new StructuredCodingCommentCollection();
			coll.add(form.cmbComment().getValue());
		}
			
		form.getGlobalContext().Core.setSelectedLookupInstances(coll);
		
		updateControlsState();
	}

	@Override
	protected void onImbSearchCaseNoteLocationsClick() throws PresentationLogicException
	{
		form.getLocalContext().setLocationType(LocationType.CASE_NOTE_FOLDER_LOCATION);
		form.getGlobalContext().RefMan.setSelectedHospital(form.cmbHospital().getValue());
		engine.open(form.getForms().RefMan.WardSelection, new Object[] {LocationType.CASE_NOTE_FOLDER_LOCATION}, "Case Note Folder Location - Selection");
	}

	@Override
	protected void onQmbCaseNoteLocationValueChanged() throws PresentationLogicException
	{
		form.txtCaseNoteFoldersLocations().setValue(null);
		form.txtCaseNoteFoldersLocations().setTooltip(null);
		
		LocationLiteVoCollection coll = null;
		
		if(form.qmbCaseNoteLocation().getValue() != null)
		{
			coll = new LocationLiteVoCollection();
			coll.add(form.qmbCaseNoteLocation().getValue());
		}
		
		form.getGlobalContext().RefMan.setSelectedCaseNoteFolderLocations(coll);
		
		updateControlsState();
	}

	@Override
	protected void onChkUncodedValueChanged() throws PresentationLogicException
	{
		if(form.chkUncoded().getValue())
		{
			clearFiltersForUncoded();
		}
	}

	private void clearFiltersForUncoded()
	{
		form.chkInProgress().setValue(null);
		form.chkForReview().setValue(null);
		form.chkCoded().setValue(null);
		form.chkHistology().setValue(null);
		form.ccUser().clear();
	}

	@Override
	protected void onChkHistologyValueChanged() throws PresentationLogicException
	{
		if(form.chkHistology().getValue())
		{
			hasCoded();
		}
	}

	private void hasCoded()//WDEV-21434
	{
		form.ccUser().setValue((IMos)domain.getMosUser());
		form.chkUncoded().setValue(null);
	}

	@Override
	protected void onChkCodedValueChanged() throws PresentationLogicException
	{
		if(form.chkCoded().getValue())
		{
			hasCoded();
		}
	}

	@Override
	protected void onChkForReviewValueChanged() throws PresentationLogicException
	{
		if(form.chkForReview().getValue())
		{
			hasCoded();
		}
	}

	@Override
	protected void onChkInProgressValueChanged() throws PresentationLogicException
	{
		if(form.chkInProgress().getValue())
		{
			hasCoded();
		}
	}

	@Override
	protected void onCcUserValueChanged() throws PresentationLogicException
	{
		if(form.ccUser().getValue() != null)
		{
			form.chkUncoded().setValue(null);
		}
	}

	//WDEV-20786
	@Override
	protected void onBtnPatActivitySummaryClick() throws PresentationLogicException
	{
		openPatientActivitySummary();
	}

	//WDEV-20786
	private void openPatientActivitySummary()
	{
		engine.open(form.getForms().RefMan.PatientCodingList, new Object[] {Boolean.TRUE});
	}

	@Override
	protected void onBtnDashboardClick() throws PresentationLogicException
	{
		if(ConfigFlag.GEN.CLINICAL_CODING_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.CLINICAL_CODING_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("CLINICAL_CODING_DASHBOARD_URL config flag was not set.");
			return;
		}
		
		//WDEV-22837
		engine.openDashboard(ConfigFlag.GEN.CLINICAL_CODING_DASHBOARD_URL.getValue(), null);
		
		/*
		String url = ConfigFlag.GEN.CLINICAL_CODING_DASHBOARD_URL.getValue();
		List<WindowParam> params = new ArrayList<WindowParam>(); 
		params.add(new WindowParam("FullScreen","false")); 
		params.add(new WindowParam("ToolBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("MenuBar","false")); 
		params.add(new WindowParam("AddressBar","false")); 
		params.add(new WindowParam("Resizable","true")); 
		params.add(new WindowParam("Visible","true"));
		params.add(new WindowParam("Width","1440")); 
		params.add(new WindowParam("Height","1000")); 

		engine.openCustomUrl(url, params, true);
		*/
	}
}
