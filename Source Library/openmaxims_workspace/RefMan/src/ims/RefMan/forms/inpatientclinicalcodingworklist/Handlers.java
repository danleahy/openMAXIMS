//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.inpatientclinicalcodingworklist;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode, ims.framework.interfaces.IClearInfo
{
	abstract protected void bindcmbCommentLookup();
	abstract protected void defaultcmbCommentLookupValue();
	abstract protected void bindcmbSpecialtyLookup();
	abstract protected void defaultcmbSpecialtyLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnDashboardClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPatActivitySummaryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchCaseNoteLocationsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbCaseNoteLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbCaseNoteLocationTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbWardsSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddCommentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDynGrdCodingRecordsCellButtonClicked(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDynGrdCodingRecordsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDynGrdCodingRecordsColumnHeaderClicked(ims.framework.controls.DynamicGridColumn column);
	abstract protected void onChkHistologyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbCommentSelectClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbCommentValueSet(Object value);
	abstract protected void onCmbCommentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCodedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkForReviewValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkInProgressValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkUncodedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcUserValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSpecialtyValueSet(Object value);
	abstract protected void onQmbDischargeWardValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbDischargeWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnDashboard().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnDashboardClick();
			}
		});
		this.form.btnPatActivitySummary().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPatActivitySummaryClick();
			}
		});
		this.form.imbSearchCaseNoteLocations().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchCaseNoteLocationsClick();
			}
		});
		this.form.qmbCaseNoteLocation().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbCaseNoteLocationValueChanged();
			}
		});
		this.form.qmbCaseNoteLocation().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbCaseNoteLocationTextSubmited(value);
			}
		});
		this.form.btnPrint().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPrintClick();
			}
		});
		this.form.imbWardsSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbWardsSearchClick();
			}
		});
		this.form.cmbHospital().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbHospitalValueChanged();
			}
		});
		this.form.btnAddComment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddCommentClick();
			}
		});
		this.form.dynGrdCodingRecords().setDynamicGridCellButtonClickedEvent(new DynamicGridCellButtonClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDynGrdCodingRecordsCellButtonClicked(cell);
			}
		});
		this.form.dynGrdCodingRecords().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDynGrdCodingRecordsRowSelectionChanged(row);
			}
		});
		this.form.dynGrdCodingRecords().setDynamicGridColumnHeaderClickedEvent(new DynamicGridColumnHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridColumn column) throws ims.framework.exceptions.PresentationLogicException
			{
				onDynGrdCodingRecordsColumnHeaderClicked(column);
			}
		});
		this.form.chkHistology().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkHistologyValueChanged();
			}
		});
		this.form.imbCommentSelect().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbCommentSelectClick();
			}
		});
		this.form.cmbComment().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCommentValueSet(value);
			}
		});
		this.form.cmbComment().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbCommentValueChanged();
			}
		});
		this.form.chkCoded().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCodedValueChanged();
			}
		});
		this.form.chkForReview().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkForReviewValueChanged();
			}
		});
		this.form.chkInProgress().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkInProgressValueChanged();
			}
		});
		this.form.chkUncoded().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkUncodedValueChanged();
			}
		});
		this.form.setccUserValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcUserValueChanged();
			}
		});
		this.form.cmbSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecialtyValueSet(value);
			}
		});
		this.form.qmbDischargeWard().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbDischargeWardValueChanged();
			}
		});
		this.form.qmbDischargeWard().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbDischargeWardTextSubmited(value);
			}
		});
		this.form.imbSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchClick();
			}
		});
		this.form.imbClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearClick();
			}
		});
		this.form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuRECORD_DELAYED_CODING_REASONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.RECORD_DELAYED_CODING_REASON, sender);
			}
		});
		this.form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuVIEW_DELAYED_CODING_REASONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.VIEW_DELAYED_CODING_REASON, sender);
			}
		});
		this.form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuVIEW_PATIENT_CODING_RECORDSItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.VIEW_PATIENT_CODING_RECORDS, sender);
			}
		});
		this.form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuVIEW_PATIENT_ACTIVITY_SUMMARYItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.VIEW_PATIENT_ACTIVITY_SUMMARY, sender);
			}
		});
		this.form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuCOMMENTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.COMMENT, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbCommentLookup();
		bindcmbSpecialtyLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbCommentLookup();
		bindcmbSpecialtyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbCommentLookupValue();
		defaultcmbSpecialtyLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	public abstract void clearContextInformation();
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
