//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.linkappointments;

import ims.RefMan.forms.linkappointments.GenForm.grdAppointmetsRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVo;
import ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Booking_AppointmentVoCollection;
import ims.vo.ValueObjectCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-20053
		if (args!=null && args.length==2 && args[0] instanceof Boolean && args[1] instanceof  Booking_AppointmentVoCollection)
		{
			form.getLocalContext().setLinkMultipleBookings((Boolean) args[0]);
			populateGrid((Booking_AppointmentVoCollection)args[1]);
		}
		else
		{		
			BookingAppointmentForLinkedAppointmentsVoCollection collApp = domain.listAppointments(domain.getCareContextByCatsRef(form.getGlobalContext().RefMan.getCatsReferral()));
			populateGrid(collApp);
		}
	}
	
	private void populateGrid(ValueObjectCollection collApp) //WDEV-20053
	{
		form.grdAppointmets().getRows().clear();
		
		if (collApp==null || collApp.size()==0)
		{
			form.lblSelectAll().setVisible(false);
			form.chkSelectAll().setVisible(false);
			return;
		}
		
		//WDEV-20053
		for (int i=0;i<collApp.size();i++)
		{
			if (collApp.getItems()[i]!=null && collApp.getItems()[i] instanceof BookingAppointmentForLinkedAppointmentsVo)
			{
				addRow((BookingAppointmentForLinkedAppointmentsVo) collApp.getItems()[i]);
			}
			else if (collApp.getItems()[i]!=null && collApp.getItems()[i] instanceof Booking_AppointmentVo)
			{
				addRowMultipleBooking((Booking_AppointmentVo) collApp.getItems()[i]);
			}
			
		}
	}
	
	//WDEV-20053
	private void addRowMultipleBooking(Booking_AppointmentVo voAppt)
	{
		if (voAppt==null)
			return;
		
		grdAppointmetsRow row = form.grdAppointmets().getRows().newRow();
		
		String dateTimeStr = "";
		if(voAppt.getAppointmentDateIsNotNull())
			dateTimeStr += voAppt.getAppointmentDate().toString() + " ";
		if(voAppt.getApptStartTimeIsNotNull())
			dateTimeStr += voAppt.getApptStartTime().toString();
		
		row.setColDateTime(dateTimeStr);
		row.setTooltipForColDateTime(dateTimeStr);
		
		row.setColService(voAppt.getSessionIsNotNull() && voAppt.getSession().getServiceIsNotNull() ? voAppt.getSession().getService().getServiceName() : null);
		row.setTooltipForColService(voAppt.getSessionIsNotNull() && voAppt.getSession().getServiceIsNotNull() ? voAppt.getSession().getService().getServiceName() : null);
		
		row.setColClinic(voAppt.getSessionIsNotNull() && voAppt.getSession().getSchLocationIsNotNull() ? voAppt.getSession().getSchLocation().getName() : null);
		row.setColClinic(voAppt.getSessionIsNotNull() && voAppt.getSession().getSchLocationIsNotNull() ? voAppt.getSession().getSchLocation().getName() : null);
	
		row.setColStatus(voAppt.getApptStatusIsNotNull() ? voAppt.getApptStatus().toString() : null);
		row.setTooltipForColStatus(voAppt.getApptStatusIsNotNull() ? voAppt.getApptStatus().toString() : null);
		
		row.setValue(voAppt);
	}

	private void addRow(BookingAppointmentForLinkedAppointmentsVo voAppt)
	{
		if (voAppt==null)
			return;
		
		grdAppointmetsRow row = form.grdAppointmets().getRows().newRow();
		
		String dateTimeStr = "";
		if(voAppt.getAppointmentDateIsNotNull())
			dateTimeStr += voAppt.getAppointmentDate().toString() + " ";
		if(voAppt.getApptStartTimeIsNotNull())
			dateTimeStr += voAppt.getApptStartTime().toString();
		
		row.setColDateTime(dateTimeStr);
		row.setTooltipForColDateTime(dateTimeStr);
		
		row.setColService(voAppt.getSessionIsNotNull() && voAppt.getSession().getServiceIsNotNull() ? voAppt.getSession().getService().getServiceName() : null);
		row.setTooltipForColService(voAppt.getSessionIsNotNull() && voAppt.getSession().getServiceIsNotNull() ? voAppt.getSession().getService().getServiceName() : null);
		
		row.setColClinic(voAppt.getSessionIsNotNull() && voAppt.getSession().getSchLocationIsNotNull() ? voAppt.getSession().getSchLocation().getName() : null);
		row.setColClinic(voAppt.getSessionIsNotNull() && voAppt.getSession().getSchLocationIsNotNull() ? voAppt.getSession().getSchLocation().getName() : null);
	
		row.setColStatus(voAppt.getApptStatusIsNotNull() ? voAppt.getApptStatus().toString() : null);
		row.setTooltipForColStatus(voAppt.getApptStatusIsNotNull() ? voAppt.getApptStatus().toString() : null);
		
		row.setColSelect(form.getGlobalContext().RefMan.getLinkedAppointmentsCollectionIsNotNull() ? form.getGlobalContext().RefMan.getLinkedAppointmentsCollection().contains(voAppt) : false);
		
		row.setValue(voAppt);

	}
	
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-20053
		if (Boolean.TRUE.equals(form.getLocalContext().getLinkMultipleBookings()))
		{
			form.getGlobalContext().RefMan.setLinkApptsOnMultipleBooking(getSelectedAppoinmentsMultipleBook());
		}
		else
		{
			form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(getSelectedAppointments());
		}
		engine.close(DialogResult.OK);
	}
	
	//WDEV-20053
	private Booking_AppointmentVoCollection getSelectedAppoinmentsMultipleBook()
	{
		Booking_AppointmentVoCollection collSelecteAppt = new Booking_AppointmentVoCollection();
		for (int i=0;i<form.grdAppointmets().getRows().size();i++)
		{
			if (Boolean.TRUE.equals(form.grdAppointmets().getRows().get(i).getColSelect()) && form.grdAppointmets().getRows().get(i).getValue() instanceof Booking_AppointmentVo)
				collSelecteAppt.add((Booking_AppointmentVo)form.grdAppointmets().getRows().get(i).getValue());
		}
		
		return collSelecteAppt;
	}

	private BookingAppointmentForLinkedAppointmentsVoCollection getSelectedAppointments()
	{
		BookingAppointmentForLinkedAppointmentsVoCollection collSelecteAppt = new BookingAppointmentForLinkedAppointmentsVoCollection();
		for (int i=0;i<form.grdAppointmets().getRows().size();i++)
		{
			if (Boolean.TRUE.equals(form.grdAppointmets().getRows().get(i).getColSelect()) && form.grdAppointmets().getRows().get(i).getValue() instanceof BookingAppointmentForLinkedAppointmentsVo)
				collSelecteAppt.add((BookingAppointmentForLinkedAppointmentsVo)form.grdAppointmets().getRows().get(i).getValue()); //WDEV-20053
		}
		
		return collSelecteAppt;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-20765
		if (!Boolean.TRUE.equals(form.getLocalContext().getLinkMultipleBookings()) && form.getGlobalContext().RefMan.getLinkedAppointmentsCollection() == null)
		{
			form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(new BookingAppointmentForLinkedAppointmentsVoCollection());
		}
		
		engine.close(DialogResult.CANCEL);
	}


	private boolean isAnyRowSelected()
	{
		for (int i=0;i<form.grdAppointmets().getRows().size();i++)
		{
			if (Boolean.TRUE.equals(form.grdAppointmets().getRows().get(i).getColSelect()))
					return true;
		}
	
		return false;
	}

	//WDEV-19543
	@Override
	protected void onChkSelectAllValueChanged() throws PresentationLogicException
	{
		for (int i=0;i<form.grdAppointmets().getRows().size(); i++ )
		{
			form.grdAppointmets().getRows().get(i).setColSelect(form.chkSelectAll().getValue());
		}
	}

	//WDEV-20796
	@Override
	protected void onGrdAppointmetsGridCheckBoxClicked(int column, grdAppointmetsRow row, boolean isChecked) throws PresentationLogicException
	{
		if (!isChecked)
			form.chkSelectAll().setValue(false);
	}
}
