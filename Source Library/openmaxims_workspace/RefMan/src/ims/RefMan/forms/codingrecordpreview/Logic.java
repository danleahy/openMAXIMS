//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.codingrecordpreview;

import ims.RefMan.forms.codingrecordpreview.GenForm.grdCodingRecordsRow;
import ims.RefMan.vo.AdmissionDetailForCodingListVo;
import ims.RefMan.vo.ConsultantStayForPatientCodingListVo;
import ims.RefMan.vo.ReferralExternalCodingItemVo;
import ims.RefMan.vo.ReferralExternalCodingVo;
import ims.clinical.vo.lookups.CodingCommentType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);
		open();
	}
	
	private void open()
	{
		populateScreenFromData(form.getLocalContext().getCurrentAdmission(), form.getLocalContext().getCurrentRecord());	
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData(AdmissionDetailForCodingListVo admission, ReferralExternalCodingVo referralCoding)
	{
		clearScreen();
		
		if(admission != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append((admission.getPasEvent() != null && admission.getPasEvent().getEventDateTimeIsNotNull()) ? admission.getPasEvent().getEventDateTime().toString() : "");
			sb.append(" - ");
			sb.append(admission.getDischargeDateTimeIsNotNull() ? admission.getDischargeDateTime().toString() : "");

			form.txtAdmission().setValue(sb.toString());
		}
		
		if(referralCoding != null)
		{
    		form.txtHCP().setValue(referralCoding.getAuthoringMOS() != null ? referralCoding.getAuthoringMOS().getIMosName() : null);
    		form.txtSpecialty().setValue((referralCoding.getFCE() != null && referralCoding.getFCE().getSpecialty() != null) ? referralCoding.getFCE().getSpecialty().getIItemText() : null);
    		form.txtStay().setValue(getStayText(referralCoding.getFCE()));	
    		
    		form.txtComments().setValue((referralCoding.getFCE().getCodingCommentIsNotNull() 
    				&& referralCoding.getFCE().getCodingComment().size() > 0 
    				&& referralCoding.getFCE().getCodingComment().get(referralCoding.getFCE().getCodingComment().size() - 1) != null
    				&& CodingCommentType.EXTERNAL.equals(referralCoding.getFCE().getCodingComment().get(referralCoding.getFCE().getCodingComment().size() - 1).getCodingType())) ? referralCoding.getFCE().getCodingComment().get(referralCoding.getFCE().getCodingComment().size() -1 ).getCommentText() : "");
    		
    		form.txtDate().setValue(referralCoding.getAuthoringDateTime().toString());
    		populateCodingItemsGrid(referralCoding);
		}
	}

	private void populateCodingItemsGrid(ReferralExternalCodingVo referralCoding)
	{
		form.grdCodingRecords().getRows().clear();
		
		if(referralCoding == null)
			return;
		
		for(ReferralExternalCodingItemVo item : referralCoding.getCodingItems())
		{
			if(item == null)
				continue;
			
    		grdCodingRecordsRow row = form.grdCodingRecords().getRows().newRow();
    		
    		if(item.getPatientDiagnosis() != null)
    		{
    			row.setColDP(item.getPatientDiagnosis() != null ? item.getPatientDiagnosis().getDiagnosisDescription() : null);
    		}
    		else if(item.getPatientProcedure() != null)
    		{
    			row.setColDP(item.getPatientProcedure() != null ? item.getPatientProcedure().getProcedureDescription() : null);
    		}
    		    		
    		row.setColOPCS4(item.getOPCS4());
    		row.setColICD10(item.getICD10());
    		
    		row.setValue(item);
		}
	}

	private String getStayText(ConsultantStayForPatientCodingListVo consultantStayForPatientCodingListVo)
	{
		if(consultantStayForPatientCodingListVo == null)
			return null;
		
		StringBuffer text = new StringBuffer();
		
		text.append(consultantStayForPatientCodingListVo.getTransferDateTime());
		
		if(text.length() > 0)
			text.append(" - ");
		
		text.append(consultantStayForPatientCodingListVo.getEndDateTime());
		
		return text.toString();
	}

	private void clearScreen()
	{
		form.txtAdmission().setValue(null);
		form.txtHCP().setValue(null);
		form.txtSpecialty().setValue(null);
		form.txtStay().setValue(null);
		
		form.grdCodingRecords().getRows().clear();
	}

	private void initialise(Object[] args)
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof AdmissionDetailForCodingListVo)
			{
				form.getLocalContext().setCurrentAdmission((AdmissionDetailForCodingListVo) args[0]);
				
				if(args.length > 1)
				{
    				if(args[1] instanceof ReferralExternalCodingVo)
    				{
    					form.getLocalContext().setCurrentRecord((ReferralExternalCodingVo) args[1]);
    				}
				}
			}
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
}
