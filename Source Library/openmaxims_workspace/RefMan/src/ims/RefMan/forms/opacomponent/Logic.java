//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.opacomponent;

import java.util.ArrayList;
import java.util.List;

import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.OPAVo;
import ims.core.vo.ServiceTriageActionVo;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void setVisible(Boolean value)
	{
		form.getLocalContext().setIsVisible(value);
		
		if(Boolean.FALSE.equals(value))
		{
			form.chkAnyDoctorToSee().setVisible(value);
			form.chkAssociatedSpecialist().setVisible(value);
			form.chkConsultant().setVisible(value);
			form.chkOtherHCP().setVisible(value);
			form.chkSPR().setVisible(value);
			form.cmbOtherHCP().setVisible(value);
		}
		
		form.pnlOPA().setVisible(value);
		form.lblToSee().setVisible(value);
	}

	public void setValue(OPAVo value)
	{
		form.getLocalContext().setCurrentRecord(value);
		
		clear();
		
		if(value == null)
			return;

		form.chkConsultant().setValue(value.getConsultant());
		form.chkSPR().setValue(value.getSPR());
		form.chkAssociatedSpecialist().setValue(value.getAssociateSpecialist());
		form.chkAnyDoctorToSee().setValue(value.getAnyDoctorToSee());
		form.chkOtherHCP().setValue(value.getOtherHCP());
		form.cmbOtherHCP().setValue(value.getOtherHCPValue());
		
		updateControlsState();
	}

	private void clear()
	{
		form.chkConsultant().setValue(null);
		form.chkSPR().setValue(null);
		form.chkAssociatedSpecialist().setValue(null);
		form.chkAnyDoctorToSee().setValue(null);
		form.chkOtherHCP().setValue(null);
		form.cmbOtherHCP().setValue(null);
	}

	private void updateControlsState()
	{
		form.chkAnyDoctorToSee().setVisible(form.getLocalContext().getServiceTriageConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConfig().getAnyDoctorToSee()) && !Boolean.FALSE.equals(form.getLocalContext().getIsVisible()));
		form.chkAssociatedSpecialist().setVisible(form.getLocalContext().getServiceTriageConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConfig().getAssociateSpecialist()) && !Boolean.FALSE.equals(form.getLocalContext().getIsVisible()));
		form.chkConsultant().setVisible(form.getLocalContext().getServiceTriageConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConfig().getConsultant()) && !Boolean.FALSE.equals(form.getLocalContext().getIsVisible()));
		form.chkOtherHCP().setVisible(form.getLocalContext().getServiceTriageConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConfig().getOtherHCP()) && !Boolean.FALSE.equals(form.getLocalContext().getIsVisible()));
		form.chkSPR().setVisible(form.getLocalContext().getServiceTriageConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConfig().getSPR()) && !Boolean.FALSE.equals(form.getLocalContext().getIsVisible()));
		form.cmbOtherHCP().setVisible(form.chkOtherHCP().getValue() && !Boolean.FALSE.equals(form.getLocalContext().getIsVisible()));
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.chkAnyDoctorToSee().setEnabled(false);
			form.chkAssociatedSpecialist().setEnabled(false);
			form.chkConsultant().setEnabled(false);
			form.chkOtherHCP().setEnabled(false);
			form.chkSPR().setEnabled(false);
			form.cmbOtherHCP().setEnabled(false);
		}
	}

	public OPAVo getValue()
	{
		return populateDataFromScreen(form.getLocalContext().getCurrentRecord());
	}

	private OPAVo populateDataFromScreen(OPAVo currentRecord)
	{
		if(currentRecord == null)
		{
			currentRecord = new OPAVo();
			currentRecord.setCatsReferral(form.getLocalContext().getCatsReferral());
		}
		
		currentRecord.setConsultant(form.chkConsultant().getValue());
		currentRecord.setSPR(form.chkSPR().getValue());
		currentRecord.setAnyDoctorToSee(form.chkAnyDoctorToSee().getValue());
		currentRecord.setAssociateSpecialist(form.chkAssociatedSpecialist().getValue());
		currentRecord.setOtherHCP(form.chkOtherHCP().getValue());
		
		currentRecord.setOtherHCPValue(form.cmbOtherHCP().getValue());
		
		return currentRecord;
	}

	@Override
	protected void onChkOtherHCPValueChanged() throws PresentationLogicException
	{
		if(form.chkOtherHCP().getValue())
		{
			form.chkAnyDoctorToSee().setValue(null);
			form.chkConsultant().setValue(null);
			form.chkAssociatedSpecialist().setValue(null);
			form.chkSPR().setValue(null);
		}
		
		form.cmbOtherHCP().setValue(null);
		
		updateControlsState();
	}

	public void initialise(CatsReferralRefVo catsReferral, ServiceTriageActionVo serviceTriageConfig)
	{
		form.getLocalContext().setCatsReferral(catsReferral);
		form.getLocalContext().setServiceTriageConfig(serviceTriageConfig);
		
		form.cmbOtherHCP().clear();
		
		if(serviceTriageConfig == null || serviceTriageConfig.getOtherHCPValues() == null)
			return;
		
		for(int i=0; i<serviceTriageConfig.getOtherHCPValues().size(); i++)
		{
			if(serviceTriageConfig.getOtherHCPValues().get(i) == null)
				continue;
			
			form.cmbOtherHCP().newRow(serviceTriageConfig.getOtherHCPValues().get(i), serviceTriageConfig.getOtherHCPValues().get(i).getText());
		}
		
		updateControlsState();
	}

	public List<String> getErrors()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(!form.chkAnyDoctorToSee().getValue() && !form.chkAssociatedSpecialist().getValue() && !form.chkConsultant().getValue() && !form.chkSPR().getValue() && !form.chkOtherHCP().getValue())
		{
			uiErrors.add("To See is mandatory.");
		}
		
		if(form.chkOtherHCP().getValue() && form.cmbOtherHCP().getValue() == null)
		{
			uiErrors.add("Other HCP is mandatory.");
		}
		
		return uiErrors;
	}

	@Override
	protected void onChkAssociatedSpecialistValueChanged() throws PresentationLogicException
	{
		if(form.chkAssociatedSpecialist().getValue())
		{
			form.chkAnyDoctorToSee().setValue(null);
			form.chkConsultant().setValue(null);
			form.chkOtherHCP().setValue(null);
			form.chkSPR().setValue(null);
			form.cmbOtherHCP().setValue(null);
		}
		
		updateControlsState();
	}

	@Override
	protected void onChkAnyDoctorToSeeValueChanged() throws PresentationLogicException
	{
		if(form.chkAnyDoctorToSee().getValue())
		{
			form.chkAssociatedSpecialist().setValue(null);
			form.chkConsultant().setValue(null);
			form.chkOtherHCP().setValue(null);
			form.chkSPR().setValue(null);
			form.cmbOtherHCP().setValue(null);
		}
		
		updateControlsState();
	}

	@Override
	protected void onChkSPRValueChanged() throws PresentationLogicException
	{
		if(form.chkSPR().getValue())
		{
			form.chkAnyDoctorToSee().setValue(null);
			form.chkConsultant().setValue(null);
			form.chkOtherHCP().setValue(null);
			form.chkAssociatedSpecialist().setValue(null);
			form.cmbOtherHCP().setValue(null);
		}
		
		updateControlsState();
	}

	@Override
	protected void onChkConsultantValueChanged() throws PresentationLogicException
	{
		if(form.chkConsultant().getValue())
		{
			form.chkAnyDoctorToSee().setValue(null);
			form.chkAssociatedSpecialist().setValue(null);
			form.chkOtherHCP().setValue(null);
			form.chkSPR().setValue(null);
			form.cmbOtherHCP().setValue(null);
		}
		
		updateControlsState();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
}
