//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3225.30788)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.bookspecimenappointmentdialog;

import java.util.ArrayList;
import java.util.List;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;
import ims.ocrr.vo.SpecimenWorkListItemLiteVo;
import ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	private void open()
	{
		SpecimenWorkListItemLiteVo voSpecWorkListItem = form.getGlobalContext().RefMan.getSpecimenWorkListItem();
		if(voSpecWorkListItem != null)
			populateScreenFromData(voSpecWorkListItem);
	}
	
	private void populateScreenFromData(SpecimenWorkListItemLiteVo voSpecWorkListItem)
	{
		form.cmbLocation().setValue(null);
		form.dteAppt().setValue(null);
		
		if(voSpecWorkListItem != null)
		{
			form.dteAppt().setValue(voSpecWorkListItem.getDateToCollect());
			form.cmbLocation().setValue(voSpecWorkListItem.getWard());
		}
	}

	private void initialize()
	{
		loadLocations();
	}
	
	private void loadLocations()
	{
		form.cmbLocation().clear();
		LocationLiteVoCollection voCollLoc = domain.listLocationLite();
		if(voCollLoc != null)
		{
			for(LocationLiteVo item : voCollLoc)
				form.cmbLocation().newRow(item, item.getName());
		}
	}
	
	@Override
	protected void onBtnDiaryClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.openUrl(ConfigFlag.GEN.MOBILE_UNIT_DIARY_FILEPATH.getValue());
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.cmbLocation().getValue() == null)
			errors.add("Location is mandatory");
		if(form.dteAppt().getValue() == null)
			errors.add("Date is mandatory");
		//----------------------------------------------------------
		else if(form.dteAppt().getValue().isLessThan(new Date()))
		{
			errors.add("The date cannot be in the past ");
		}
		//-----------------------------------------------------------
		String[] arrErrors = (errors.size() > 0 ? errors.toArray(new String[0]) : null);
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		SpecimenWorkListItemLiteVoCollection voCollWorkListItems = null;
		//saving a new collection of
		if(form.getGlobalContext().RefMan.getSpecimenWorkListItemsIsNotNull())
		{
			voCollWorkListItems = form.getGlobalContext().RefMan.getSpecimenWorkListItems();
			for(SpecimenWorkListItemLiteVo voWorkListItem : voCollWorkListItems)
			{
				voWorkListItem.setDateToCollect(form.dteAppt().getValue());
				voWorkListItem.setWard(form.cmbLocation().getValue());
			}
		}
		else
		{
			//editing a single record
			SpecimenWorkListItemLiteVo voSpecWorkListItem = form.getGlobalContext().RefMan.getSpecimenWorkListItem();
			if(voSpecWorkListItem != null)
			{
				voSpecWorkListItem.setDateToCollect(form.dteAppt().getValue());
				voSpecWorkListItem.setWard(form.cmbLocation().getValue());
				voCollWorkListItems = new SpecimenWorkListItemLiteVoCollection();
				voCollWorkListItems.add(voSpecWorkListItem);
			}
		}
		
		try
		{
			domain.saveWorkListItems(voCollWorkListItems);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
			
		try
		{
			domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
