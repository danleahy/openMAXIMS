//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.linkeddiagnosticcomponent;

import ims.RefMan.forms.linkeddiagnosticcomponent.GenForm.GroupScheduledEnumeration;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.LinkedDiagnosticVo;
import ims.RefMan.vo.LinkedDiagnosticVoCollection;
import ims.RefMan.vo.lookups.TriageOutcomeAppointmentDay;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.ServiceDiagnosticsVo;
import ims.core.vo.ServiceLiteVo;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer COLUMN_DIAGNOSTIC = new Integer(0);
	private static final Integer COLUMN_SCHEDULE = new Integer(1);
	
	private static final String OPA_SAME_DAY_TEXT = "Same Day";
	private static final String OPA_OTHER_DAY_TEXT = "Before OPA Appt";
	private static final String CAB_SAME_DAY_TEXT = "Same Day as C&#38;B Appt";
	private static final String CAB_OTHER_DAY_TEXY = "Before C&#38;B Appt";
	
	private static final String TRIAGE_PENDING_TEXT = "Pending Diagnostic Result";

	public void setVisible(Boolean value)
	{
		form.pnlLinkedDiagnostic().setVisible(value);
		
		form.dyngrdDiagnostics().setVisible(value);
		
		if(Boolean.FALSE.equals(value))
		{
			form.lblDiagnostic().setVisible(value);
			form.cmbDiagnostic().setVisible(value);
			form.intValue().setVisible(value);
			form.cmbType().setVisible(value);
			form.btnRemove().setVisible(value);
			
			form.btnAdd().setVisible(value);
			form.btnCancel().setVisible(value);
			form.btnEdit().setVisible(value);
			form.btnSave().setVisible(value);
			
			form.lblManual2().setVisible(value);
			form.lblInterval().setVisible(value);
			form.lblForCAB2().setVisible(value);
			form.GroupScheduled().setVisible(value);
		}
	}

	public void initialise(CatsReferralRefVo catsReferral, ServiceRefVo service, Boolean isCAB, Boolean isTriagePending)
	{
		form.getLocalContext().setCatsReferral(catsReferral);
		form.getLocalContext().setIsCAB(isCAB);
		form.getLocalContext().setIsTriagePending(isTriagePending);
		form.getLocalContext().setReferralService((ServiceLiteVo)service);//WDEV-20706
		
		if(Boolean.TRUE.equals(isTriagePending))
		{
			form.pnlLinkedDiagnostic().setValue(TRIAGE_PENDING_TEXT);
		}
		
		initialiseGrid(isCAB);
		
		if(!Boolean.TRUE.equals(isCAB))
		{
			form.GroupScheduled().setText(GroupScheduledEnumeration.rdoSameDay, OPA_SAME_DAY_TEXT);
			form.GroupScheduled().setText(GroupScheduledEnumeration.rdoBeforeAppt, OPA_OTHER_DAY_TEXT);
		}
		else
		{
			form.GroupScheduled().setText(GroupScheduledEnumeration.rdoSameDay, CAB_SAME_DAY_TEXT);
			form.GroupScheduled().setText(GroupScheduledEnumeration.rdoBeforeAppt, CAB_OTHER_DAY_TEXY);
		}
		
		form.setMode(FormMode.VIEW);
	}

	private void bindDiagnosticCombo()
	{
		ServiceRefVo service = form.getLocalContext().getReferralService();
		form.cmbDiagnostic().clear();
		
		if(service == null)
			return;	
		
		ArrayList<Integer> dynGrdRowIds = getDynGrdRowIds();

		ServiceDiagnosticsVo serviceConf = domain.getServiceDiagnostics(service);
		
		if(serviceConf == null || serviceConf.getDiagnostics() == null)
			return;
		
		for(int i=0; i<serviceConf.getDiagnostics().size(); i++)
		{
			//WDEV-20706
			if(form.dyngrdDiagnostics().getSelectedRow()!= null &&
					form.dyngrdDiagnostics().getSelectedRow().getValue() instanceof LinkedDiagnosticVo &&
					((LinkedDiagnosticVo)form.dyngrdDiagnostics().getSelectedRow().getValue()).getDiagnostics().equals(serviceConf.getDiagnostics().get(i)))
			{
				LinkedDiagnosticVo selectedRow = (LinkedDiagnosticVo)form.dyngrdDiagnostics().getSelectedRow().getValue();
				form.dyngrdDiagnostics().getSelectedRow().getValue();
				form.cmbDiagnostic().newRow(selectedRow.getDiagnostics(), selectedRow.getDiagnostics().getText());
				form.cmbDiagnostic().setValue(selectedRow.getDiagnostics());
				continue;
			}
			
			if(serviceConf.getDiagnostics().get(i) == null || (dynGrdRowIds!= null && dynGrdRowIds.contains((Integer)serviceConf.getDiagnostics().get(i).getID())))//WDEV-20706
				continue;
			
			form.cmbDiagnostic().newRow(serviceConf.getDiagnostics().get(i), serviceConf.getDiagnostics().get(i).getText());
			
		}
	}

	private ArrayList<Integer> getDynGrdRowIds()
	{
		ArrayList<Integer> diagnosticIds = new ArrayList<Integer>();
		
		DynamicGridRowCollection rows = form.dyngrdDiagnostics().getRows();
		if(rows != null && rows.size()>0 && rows.get(0).getValue() instanceof LinkedDiagnosticVo )
		{
			for(int i=0; i<rows.size(); i++)
			{
			
				Integer diagnosticId = ((LinkedDiagnosticVo)rows.get(i).getValue()).getDiagnostics().getID();
				diagnosticIds.add(diagnosticId);

			}
		}
		return diagnosticIds;
	}
	private void initialiseGrid(Boolean isCAB)
	{
		form.dyngrdDiagnostics().clear();
		
		boolean isTriagePending = Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending());
		
		DynamicGridColumn columnName = form.dyngrdDiagnostics().getColumns().newColumn("Diagnostic", COLUMN_DIAGNOSTIC);
		columnName.setCanGrow(true);
		columnName.setWidth(isTriagePending ? -1 : 350);
		
		if(!isTriagePending)
		{
			columnName = form.dyngrdDiagnostics().getColumns().newColumn(Boolean.TRUE.equals(isCAB) ? "Schedule Details" : "In Period (Before OPA)", COLUMN_SCHEDULE);
			columnName.setWidth(-1);
		}
	}
	
	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdDiagnostics().getColumns().getByIdentifier(identifier);
	}

	public void setValue(LinkedDiagnosticVoCollection diagnostics)
	{
		form.dyngrdDiagnostics().getRows().clear();
		
		if(diagnostics == null)
			return;
		
		for(LinkedDiagnosticVo diagnostic : diagnostics)
		{
			addDiagnosticRow(diagnostic, null);
		}
	}

	private void addDiagnosticRow(LinkedDiagnosticVo diagnostic, DynamicGridRow newRow)
	{
		if(diagnostic == null)
			return;
		
		if(newRow == null)
			newRow = form.dyngrdDiagnostics().getRows().newRow();
		
		DynamicGridCell rowCell = newRow.getCells().newCell(getColumn(COLUMN_DIAGNOSTIC), DynamicCellType.STRING);
		rowCell.setValue(diagnostic.getDiagnostics() != null ? diagnostic.getDiagnostics().getText() : null);
		
		if(!Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()))
		{
			rowCell = newRow.getCells().newCell(getColumn(COLUMN_SCHEDULE), DynamicCellType.STRING);
			
			if(TriageOutcomeAppointmentDay.SAME_DAY.equals(diagnostic.getSameDay()))
			{
				rowCell.setValue(TriageOutcomeAppointmentDay.SAME_DAY.getText());
			}
			else
			{
				rowCell.setValue((diagnostic.getPeriodValue() != null ? diagnostic.getPeriodValue().toString() : "") + " " + (diagnostic.getPeriodType() != null ? diagnostic.getPeriodType().getText() : ""));
			}
		}
		
		newRow.setValue(diagnostic);
	}

	public LinkedDiagnosticVoCollection getValue()
	{
		LinkedDiagnosticVoCollection coll = new LinkedDiagnosticVoCollection();
		
		for(int i=0; i<form.dyngrdDiagnostics().getRows().size(); i++)
		{
			coll.add((LinkedDiagnosticVo) form.dyngrdDiagnostics().getRows().get(i).getValue());
		}
		
		return coll.size() > 0 ? coll : null;
	}

	@Override
	protected void onFormModeChanged()
	{
		populateCmbDiagnosticInViewMode();
		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean iReadOnly = Boolean.TRUE.equals(form.getLocalContext().getReadOnly());
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.dyngrdDiagnostics().setReadOnly(true);
		}
		else
		{
			form.dyngrdDiagnostics().setEnabled(false);
		}
		
		form.lblDiagnostic().setVisible(form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode()));
		form.cmbDiagnostic().setVisible(form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode()));
		form.cmbDiagnostic().setEnabled(FormMode.EDIT.equals(form.getMode()) && !iReadOnly);
		form.intValue().setVisible((form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode())) 
				&& GroupScheduledEnumeration.rdoBeforeAppt.equals(form.GroupScheduled().getValue())
				&& !Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()));
		form.intValue().setEnabled(FormMode.EDIT.equals(form.getMode()) && !iReadOnly);
		form.cmbType().setVisible((form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode()))
				&& GroupScheduledEnumeration.rdoBeforeAppt.equals(form.GroupScheduled().getValue())
				&& !Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()));
		form.cmbType().setEnabled(FormMode.EDIT.equals(form.getMode()) && !iReadOnly);
		form.btnRemove().setVisible(form.dyngrdDiagnostics().getValue() != null);
		
		form.lblInterval().setVisible((form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode())) && !Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()));
		form.lblManual2().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsCAB()) && GroupScheduledEnumeration.rdoBeforeAppt.equals(form.GroupScheduled().getValue()) && (form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode())) && !Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()));
		form.lblForCAB2().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsCAB()) && GroupScheduledEnumeration.rdoBeforeAppt.equals(form.GroupScheduled().getValue()) && (form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode())) && !Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()));
		
		form.GroupScheduled().setVisible((form.dyngrdDiagnostics().getValue() != null || FormMode.EDIT.equals(form.getMode())) && !Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()));
		form.GroupScheduled().setEnabled(FormMode.EDIT.equals(form.getMode()) && !iReadOnly);
		
		form.btnAdd().setVisible(FormMode.VIEW.equals(form.getMode()) && !iReadOnly);
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.dyngrdDiagnostics().getValue() != null && !iReadOnly);
		form.btnEdit().setEnabled(form.dyngrdDiagnostics().getValue() != null);
		
		form.btnRemove().setVisible(form.dyngrdDiagnostics().getValue() != null && !iReadOnly);
		
		form.btnSave().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.btnSave().setEnabled(true);
		
		form.btnCancel().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.btnCancel().setEnabled(true);
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		form.dyngrdDiagnostics().getRows().remove(form.dyngrdDiagnostics().getSelectedRow());
		
		clearDetails();
		
		updateControlsState();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		LinkedDiagnosticVo record = populateDataFromScreen(form.getLocalContext().getCurrentRecord());
		
		String[] errors = record.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		addOrUpdateDiagnosticRow(record);
		
		form.dyngrdDiagnostics().setValue(record);
		
		form.setMode(FormMode.VIEW);
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(!Boolean.TRUE.equals(form.getLocalContext().getIsTriagePending()) && form.GroupScheduled().getValue().equals(GroupScheduledEnumeration.rdoBeforeAppt))
		{
			if(form.intValue().getValue() == null || form.cmbType().getValue() == null)
			{
				if(Boolean.TRUE.equals(form.getLocalContext().getIsCAB()))
				{
					uiErrors.add("Interval before C&B appointment is mandatory.");
				}
				else
				{
					uiErrors.add("Interval before OPA is mandatory.");
				}
			}
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private void addOrUpdateDiagnosticRow(LinkedDiagnosticVo record)
	{
		addDiagnosticRow(record, form.dyngrdDiagnostics().getSelectedRow());
	}

	private LinkedDiagnosticVo populateDataFromScreen(LinkedDiagnosticVo currentRecord)
	{
		if(currentRecord == null)
			currentRecord = new LinkedDiagnosticVo();
		else
		{
			currentRecord = (LinkedDiagnosticVo) currentRecord.clone();
		}
		
		currentRecord.setDiagnostics(form.cmbDiagnostic().getValue());
		currentRecord.setPeriodValue(form.intValue().getValue());
		currentRecord.setPeriodType(form.cmbType().getValue());
		
		currentRecord.setSameDay(getDayValue(form.GroupScheduled().getValue()));
		
		return currentRecord;
	}

	private TriageOutcomeAppointmentDay getDayValue(GroupScheduledEnumeration value)
	{
		if(GroupScheduledEnumeration.rdoSameDay.equals(value))
			return TriageOutcomeAppointmentDay.SAME_DAY;	
		else if(GroupScheduledEnumeration.rdoBeforeAppt.equals(value) && Boolean.TRUE.equals(form.getLocalContext().getIsCAB()))
			return TriageOutcomeAppointmentDay.BEFORE_CB_APPOINTMENT;
		else if(GroupScheduledEnumeration.rdoBeforeAppt.equals(value) && !Boolean.TRUE.equals(form.getLocalContext().getIsCAB()))
			return TriageOutcomeAppointmentDay.BEFORE_OPA_APPOINTMENT;
		
		return null;
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		rowSelection();
		form.setMode(FormMode.VIEW);
	}
	//WDEV-20706
	private void populateCmbDiagnosticInViewMode() 
	{
		
		if(FormMode.EDIT.equals(form.getMode()))
			return;

		form.cmbDiagnostic().clear();
		if(form.dyngrdDiagnostics().getSelectedRow()!= null)
			if(form.dyngrdDiagnostics().getSelectedRow().getValue()!= null && form.dyngrdDiagnostics().getSelectedRow().getValue() instanceof LinkedDiagnosticVo )
			{
				LinkedDiagnosticVo selectedRow = (LinkedDiagnosticVo)form.dyngrdDiagnostics().getSelectedRow().getValue();
				form.cmbDiagnostic().newRow(selectedRow.getDiagnostics(), selectedRow.getDiagnostics().getText());
				form.cmbDiagnostic().setValue(selectedRow.getDiagnostics());
			}
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		bindDiagnosticCombo();//WDEV-20706
	}

	@Override
	protected void onBtnAddClick() throws PresentationLogicException
	{
		form.dyngrdDiagnostics().setValue(null);
		form.getLocalContext().setCurrentRecord(null);
		
		clearDetails();
		
		form.GroupScheduled().setValue(GroupScheduledEnumeration.rdoSameDay);
		
		form.setMode(FormMode.EDIT);
		bindDiagnosticCombo();
		
	}

	@Override
	protected void onDyngrdDiagnosticsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		rowSelection();
		populateCmbDiagnosticInViewMode();//WDEV-20706
		updateControlsState();
	}

	private void rowSelection()
	{
		form.getLocalContext().setCurrentRecord((LinkedDiagnosticVo) form.dyngrdDiagnostics().getValue());
		populateDetails(form.getLocalContext().getCurrentRecord());
		
		updateControlsState();
	}

	private void populateDetails(LinkedDiagnosticVo value)
	{
		clearDetails();
		
		if(value == null)
			return;
		
		form.GroupScheduled().setValue(getScheduledValue(value.getSameDay()));
		
		form.cmbDiagnostic().setValue(value.getDiagnostics());
		form.intValue().setValue(value.getPeriodValue());
		form.cmbType().setValue(value.getPeriodType());
	}

	private GroupScheduledEnumeration getScheduledValue(TriageOutcomeAppointmentDay sameDay)
	{
		if(sameDay == null)
			return null;
		
		if(TriageOutcomeAppointmentDay.SAME_DAY.equals(sameDay))
			return GroupScheduledEnumeration.rdoSameDay;	
		else if(TriageOutcomeAppointmentDay.BEFORE_CB_APPOINTMENT.equals(sameDay))
			return GroupScheduledEnumeration.rdoBeforeAppt;
		else if(TriageOutcomeAppointmentDay.BEFORE_OPA_APPOINTMENT.equals(sameDay))
			return GroupScheduledEnumeration.rdoBeforeAppt;
		
		return null;
	}

	private void clearDetails()
	{
		form.cmbDiagnostic().setValue(null);
		form.intValue().setValue(null);
		form.cmbType().setValue(null);
	}

	@Override
	protected void onRadioButtonGroupScheduledValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	public List<String> getErrors()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dyngrdDiagnostics().getRows().size() == 0)
		{
			uiErrors.add("Linked Diagnostic is mandatory.");
		}
		
		return uiErrors;
	}

	public void setReadOnly(Boolean value)
	{
		form.getLocalContext().setReadOnly(value);
		
		updateControlsState();
	}
}
