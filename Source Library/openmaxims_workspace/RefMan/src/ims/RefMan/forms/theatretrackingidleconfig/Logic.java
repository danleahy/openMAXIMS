//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4161.27134)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.theatretrackingidleconfig;

import ims.RefMan.vo.TheatreTrackingIdleConfigVo;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	public void initialize() throws FormOpenException
	{
		super.initialize();
		
		Color[] colors = Color.getAllColors();
		
		form.cmbTOACol().clear();
		for (int i = 0; i < colors.length; i++)
		{
			form.cmbTOACol().newRow(colors[i], colors[i].getName(), colors[i].getImage());
		}
		
		form.cmbTPACUCol().clear();
		for (int i = 0; i < colors.length; i++)
		{
			form.cmbTPACUCol().newRow(colors[i], colors[i].getName(), colors[i].getImage());
		}
		
		form.cmbTTTCol().clear();
		for (int i = 0; i < colors.length; i++)
		{
			form.cmbTTTCol().newRow(colors[i], colors[i].getName(), colors[i].getImage());
		}
	}
	
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRecord(domain.get());
		populateScreenFromData(form.getLocalContext().getRecord());
		form.setMode(FormMode.VIEW);
	}
	
	private boolean save() throws PresentationLogicException
	{
		TheatreTrackingIdleConfigVo record = populateDataFromScreen(form.getLocalContext().getRecord());
		String[] errors = record.validate();
		if (errors != null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			domain.save(record);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		return true;
	}
	
	@Override
	protected void populateScreenFromData(TheatreTrackingIdleConfigVo value)
	{
		super.populateScreenFromData(value);
		if (value == null)
			return;
		form.cmbTOACol().setValue(value.getTimeOfArrivalIdleColour());
		form.cmbTPACUCol().setValue(value.getTimeIntoPACUIdleColour());
		form.cmbTTTCol().setValue(value.getTimeToTheatreIdleColour());
	}
	
	@Override
	protected void clearScreen()
	{
		super.clearScreen();
		form.cmbTOACol().setValue(null);
		form.cmbTPACUCol().setValue(null);
		form.cmbTTTCol().setValue(null);
	}
	
	@Override
	protected TheatreTrackingIdleConfigVo populateDataFromScreen(TheatreTrackingIdleConfigVo value)
	{
		TheatreTrackingIdleConfigVo record = super.populateDataFromScreen(value);
		record.setTimeOfArrivalIdleColour(form.cmbTOACol().getValue());
		record.setTimeIntoPACUIdleColour(form.cmbTPACUCol().getValue());
		record.setTimeToTheatreIdleColour(form.cmbTTTCol().getValue());
		return record;
	}
}
