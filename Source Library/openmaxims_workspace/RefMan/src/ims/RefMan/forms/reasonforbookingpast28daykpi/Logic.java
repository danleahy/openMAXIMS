//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.reasonforbookingpast28daykpi;

import ims.RefMan.vo.Reason28DayRuleBreachVo;
import ims.RefMan.vo.ReasonRTTWeekWaitBreachVo;
import ims.RefMan.vo.enums.TCITheatreAppointmentKPIs;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private void clear()
	{
		form.cmbReason().setValue(null);
		form.txtComment().setValue(null);
		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (populateReason(form.getLocalContext().getKPIReasonType()))
		{
			engine.close(DialogResult.OK);
		}
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null && args.length > 0 )
		{
			if (args.length >= 1 && args[0] != null && args[0] instanceof TCITheatreAppointmentKPIs)
				form.getLocalContext().setKPIReasonType((TCITheatreAppointmentKPIs) args[0]);
		}
		open();
	}
	private void open()
	{
		clear();
		engine.setCaption(TCITheatreAppointmentKPIs.KPI_28DAY.equals(form.getLocalContext().getKPIReasonType())  || TCITheatreAppointmentKPIs.KPI_28DAY_TCI.equals(form.getLocalContext().getKPIReasonType()) ? "28 Day Rule Breach Reason" : (TCITheatreAppointmentKPIs.KPI_RTT.equals(form.getLocalContext().getKPIReasonType()) ? "RTT Breach Reason" : "Reason"));
		form.pnlHeader().setValue(TCITheatreAppointmentKPIs.KPI_28DAY.equals(form.getLocalContext().getKPIReasonType()) ? "You are rebooking past the 28-day interval" : (TCITheatreAppointmentKPIs.KPI_28DAY_TCI.equals(form.getLocalContext().getKPIReasonType()) ? "The given TCI date is later than 28 Days" : "The given TCI date is later than RTT KPI date"));
		if (TCITheatreAppointmentKPIs.KPI_28DAY.equals(form.getLocalContext().getKPIReasonType()) || TCITheatreAppointmentKPIs.KPI_28DAY_TCI.equals(form.getLocalContext().getKPIReasonType()))
			form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(null);
		
		if (form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreachIsNotNull())
		{	
			form.getGlobalContext().RefMan.setReason28DayRuleBreach(null);
			form.cmbReason().setValue(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getReason());
			form.txtComment().setValue(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment());
		}
		
	}
	private boolean populateReason(TCITheatreAppointmentKPIs reasonForKPI) 
	{
		if (reasonForKPI == null)
			return false;
		
		if (TCITheatreAppointmentKPIs.KPI_28DAY.equals(reasonForKPI) || TCITheatreAppointmentKPIs.KPI_28DAY_TCI.equals(reasonForKPI))
		{
			Reason28DayRuleBreachVo reasonFor28DayBreach = new Reason28DayRuleBreachVo();

			reasonFor28DayBreach.setReason(form.cmbReason().getValue());
			reasonFor28DayBreach.setComment(form.txtComment().getValue());

			form.getGlobalContext().RefMan.setReason28DayRuleBreach(reasonFor28DayBreach);
			form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(null);
		}

		else if (TCITheatreAppointmentKPIs.KPI_RTT.equals(reasonForKPI))
		{
			ReasonRTTWeekWaitBreachVo reasonForRttBreach = new ReasonRTTWeekWaitBreachVo();

			reasonForRttBreach.setReason(form.cmbReason().getValue());
			reasonForRttBreach.setComment(form.txtComment().getValue());

			form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(reasonForRttBreach);			
		}

		String[] errors = validateUI();
		if (errors != null)
		{
			engine.showErrors("Invalid Reason",errors);
			return false;
		}
		return true;
	}

	private String[] validateUI()
	{
		if (form.cmbReason().getValue() == null && (form.txtComment().getValue() == null ||  form.txtComment().getValue().length() == 0))
		{
			return new String[]{"Reason is mandatory."};
		}
		return null;	
	}
}
