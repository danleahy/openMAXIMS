//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5332.26009)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.selectpreviousdiagnosisforreferralcoding;

import ims.RefMan.forms.selectpreviousdiagnosisforreferralcoding.GenForm.grdDiagnosisRow;
import ims.RefMan.vo.PatientDiagnosisForReferralCodingVo;
import ims.RefMan.vo.PatientDiagnosisForReferralCodingVoCollection;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);
	}
	
	private void initialise(Object[] args)
	{
		if(args != null && args.length > 1 && args[0] instanceof PatientRefVo && args[1] instanceof EpisodeOfCareRefVo)
		{
			populateDiagnosisGrid(domain.listDiagnosis((PatientRefVo) args[0], (EpisodeOfCareRefVo) args[1]));
		}
	}

	private void populateDiagnosisGrid(PatientDiagnosisForReferralCodingVoCollection colldiagnosis)
	{
		form.grdDiagnosis().getRows().clear();
		
		if (colldiagnosis==null || colldiagnosis.size()==0)
			return;
		
		for (int i=0;i<colldiagnosis.size();i++)
		{
			addRowToGrid(colldiagnosis.get(i));
		}
	}

	private void addRowToGrid(PatientDiagnosisForReferralCodingVo patientDiagnosis)
	{
		if (patientDiagnosis==null)
			return;
		
		grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
		row.setcolDescription(patientDiagnosis.getDiagnosisDescription());
		row.setTooltipForcolDescription(patientDiagnosis.getDiagnosisDescription());
		
		row.setcolDiagnosisDate(patientDiagnosis.getDiagnosedDate() != null ? patientDiagnosis.getDiagnosedDate().toString() : "");
		row.setTooltipForcolDiagnosisDate(patientDiagnosis.getDiagnosedDate() != null ? patientDiagnosis.getDiagnosedDate().toString() : "");
		
		if (patientDiagnosis.getAuthoringInfo() != null)
		{		
			row.setcolAuthoringHCPDateTime(patientDiagnosis.getAuthoringInfo().getIItemText());
			row.setTooltipForcolAuthoringHCPDateTime(patientDiagnosis.getAuthoringInfo().getIItemText());
		}
		
		row.setcolStatus((patientDiagnosis.getCurrentStatus() != null && patientDiagnosis.getCurrentStatus().getStatus() != null) ? patientDiagnosis.getCurrentStatus().getStatus().getText() : "");
		row.setTooltipForcolStatus((patientDiagnosis.getCurrentStatus() != null && patientDiagnosis.getCurrentStatus().getStatus() != null) ? patientDiagnosis.getCurrentStatus().getStatus().getText() : "");
		
		row.setValue(patientDiagnosis);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setSelectedPatientDiagnosisForReferralCoding(populateDataFromScreen());
		
		engine.close(DialogResult.OK);
	}
	
	private PatientDiagnosisForReferralCodingVoCollection populateDataFromScreen()
	{
		PatientDiagnosisForReferralCodingVoCollection collDiagnosisSelected = new PatientDiagnosisForReferralCodingVoCollection();
		
		for (int i=0;i<form.grdDiagnosis().getRows().size();i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getcolSelect())
				collDiagnosisSelected.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		
		return collDiagnosisSelected;
	}
	
	@Override
	protected void onGrdDiagnosisGridCheckBoxClicked(int column, GenForm.grdDiagnosisRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}
	
	private void updateControlState()
	{
		form.btnOk().setEnabled(valueSelected());
	}
	
	private boolean valueSelected()
	{
		for (int i=0;i<form.grdDiagnosis().getRows().size();i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getcolSelect())
				return true;
		}
		
		return false;
	}
}
