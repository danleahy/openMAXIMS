//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.appointmentpatientdiagnosisdialog;

import ims.RefMan.vo.CSPrimaryDiagnosisForClinicalNotesVo;
import ims.RefMan.vo.CSPrimaryDiagnosisForClinicalNotesVoCollection;
import ims.RefMan.vo.PatientDiagnosisApptDetailVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}

	private boolean save()
	{
		PatientDiagnosisApptDetailVo diagnosis = populateDataFromScreen();
		
		String[] errors = diagnosis.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
	
		try
		{
			form.getGlobalContext().RefMan.setAppointmentPatientDiagnosis(domain.savePatientDiagnosis(diagnosis));
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		
		return true;
	}

	private PatientDiagnosisApptDetailVo populateDataFromScreen()
	{
		PatientDiagnosisApptDetailVo diagnosis = form.getGlobalContext().RefMan.getAppointmentPatientDiagnosis();	
		setCsPrimaryDiagnosis(diagnosis, form.chkMain().getValue());
		
		return diagnosis;
	}
	
	private void setCsPrimaryDiagnosis(PatientDiagnosisApptDetailVo voPatDiagnosis, boolean isChkPrimaryChecked)
	{
		CSPrimaryDiagnosisForClinicalNotesVo voCSPrimaryDiagnosis = getPrimaryDiagnosisRecord(voPatDiagnosis);
		
		if (voCSPrimaryDiagnosis != null || isChkPrimaryChecked)
		{
			if (voCSPrimaryDiagnosis == null)
			{
				voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(new CSPrimaryDiagnosisForClinicalNotesVo(), voPatDiagnosis, isChkPrimaryChecked);
				
				if (voPatDiagnosis.getPrimaryForCareSpells() == null)
					voPatDiagnosis.setPrimaryForCareSpells(new CSPrimaryDiagnosisForClinicalNotesVoCollection());
				
				voPatDiagnosis.getPrimaryForCareSpells().add(voCSPrimaryDiagnosis);
			}
			else
			{
				int index = voPatDiagnosis.getPrimaryForCareSpells().indexOf(voCSPrimaryDiagnosis);
				if (index >= 0)
				{
					voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(voCSPrimaryDiagnosis, voPatDiagnosis, isChkPrimaryChecked);
					voPatDiagnosis.getPrimaryForCareSpells().set(index, voCSPrimaryDiagnosis);
				}
			}
		}
	}
	
	private CSPrimaryDiagnosisForClinicalNotesVo populatePrimaryDiagnosisDataFromScreen(CSPrimaryDiagnosisForClinicalNotesVo primaryDiagnosisVo, PatientDiagnosisApptDetailVo voPatDiagnosis, boolean isChkPrimaryChecked)
	{
		if (primaryDiagnosisVo == null)
			primaryDiagnosisVo = new CSPrimaryDiagnosisForClinicalNotesVo();
		
		primaryDiagnosisVo.setAuthoringInformation(form.ccAuthoring().getValue());
		primaryDiagnosisVo.setDiagnosis(voPatDiagnosis);
		primaryDiagnosisVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(primaryDiagnosisVo.getEpisodeOfCare() == null)
			primaryDiagnosisVo.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		primaryDiagnosisVo.setIsActive(isChkPrimaryChecked);
		
		return primaryDiagnosisVo;
	}
	
	private CSPrimaryDiagnosisForClinicalNotesVo getPrimaryDiagnosisRecord(PatientDiagnosisApptDetailVo voPatDiagnosis)
	{
		if (voPatDiagnosis == null || voPatDiagnosis.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryDiagnosisForClinicalNotesVoCollection voColl = voPatDiagnosis.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagnosis);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (sameDiagnosis && sameCareContext && voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive())
				return voColl.get(i);
		}

		return null;
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
	}

	private void initialize()
	{
		form.ccDiagnosis().setCodingItemType(CodingItemType.DIAGNOSIS);
		form.ccDiagnosis().setIsRequired(true);
		form.ccDiagnosis().setParentEditing(true);
		
		form.ccDiagnosis().setEnabled(false);
	}

	private void open()
	{
		populateScreenFromData(form.getGlobalContext().RefMan.getAppointmentPatientDiagnosis());
	}

	private void populateScreenFromData(PatientDiagnosisApptDetailVo patientDiagnosis)
	{
		if(patientDiagnosis == null)
			return;
		
		form.ccDiagnosis().setValue(patientDiagnosis);
		form.ccAuthoring().setValue(patientDiagnosis.getAuthoringInfo());
		
		CSPrimaryDiagnosisForClinicalNotesVo primDiag= getPrimaryDiagnosisRecord(patientDiagnosis);
		form.chkMain().setValue(primDiag != null && Boolean.TRUE.equals(primDiag.getIsActive()));
	}
}
