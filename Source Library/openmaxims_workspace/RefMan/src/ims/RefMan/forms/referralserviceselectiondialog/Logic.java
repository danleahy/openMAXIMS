//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.referralserviceselectiondialog;

import ims.RefMan.forms.referralserviceselectiondialog.GenForm.grdReferralServiceRow;
import ims.RefMan.forms.referralserviceselectiondialog.GenForm.grdSelectedRow;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.lookups.ServiceCategory;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if( args != null && args.length > 0 &&  args[0] instanceof ServiceCategory)
		{
			engine.setCaption("Select Services");
			form.getLocalContext().setServiceCategory((ServiceCategory) args[0]);
		}
		
		populateSelectedGrid(form.getGlobalContext().RefMan.getReferralServiceSearchList());
	}
	
	private void populateScreenFromData(ServiceShortVoCollection services)
	{
		form.grdReferralService().getRows().clear();
		
		if(services == null)
			return;

		for(int i = 0 ; i < services.size(); i++ )
		{
			ServiceShortVo servVo = services.get(i);
			
			if( servVo == null || !Boolean.TRUE.equals(servVo.getIsActive()))
				continue;
			
			grdReferralServiceRow row = form.grdReferralService().getRows().newRow();
			row.setColService(servVo.getServiceName());
			row.setValue(servVo);
		}
	}
	
	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setReferralServiceSearchList(getServices(null));
		engine.close(DialogResult.OK);
	}
	
	private ServiceShortVoCollection getServices(ServiceShortVoCollection coll) 
	{
		if(coll == null)
			coll = new ServiceShortVoCollection();
		
		for(int i=0; i < form.grdSelected().getRows().size(); i++)
		{
			if(form.grdSelected().getRows().get(i).getColSelect() && form.grdSelected().getRows().get(i).getValue() instanceof ServiceShortVo)
			{
				coll.add((ServiceShortVo) form.grdSelected().getRows().get(i).getValue());
			}
		}
		
		return coll;
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onCmbSpecialtyValueChanged() throws PresentationLogicException
	{
		
	}

	@Override
	protected void onBtnAddClick() throws PresentationLogicException
	{
		ServiceShortVoCollection coll = new ServiceShortVoCollection();
		
		coll = getServices(coll);
		
		for(int i=0; i<form.grdReferralService().getRows().size(); i++)
		{
			grdReferralServiceRow row = form.grdReferralService().getRows().get(i);
			
			if(row.getColSelect())
				coll.add(row.getValue());
		}
		
		coll.sort();
		populateSelectedGrid(coll);
	}

	private void populateSelectedGrid(ServiceShortVoCollection services)
	{
		form.grdSelected().getRows().clear();
		
		if(services == null)
			return;

		for(int i = 0 ; i < services.size(); i++ )
		{
			ServiceShortVo servVo = services.get(i);
			
			if(servVo == null)
				continue;
			
			grdSelectedRow row = form.grdSelected().getRows().newRow();
			row.setColService(servVo.getServiceName());
			row.setValue(servVo);
				
			row.setColSelect(true);
		}
	}
	
	private void selectSearchServices(boolean select)
	{
		for (int i = 0; i < form.grdReferralService().getRows().size(); i++)
		{
			form.grdReferralService().getRows().get(i).setColSelect(select);
		}
	}

	@Override
	protected void onBtnDeselectAllClick() throws PresentationLogicException
	{
		selectSearchServices(false);
	}

	@Override
	protected void onBtnSelectAllClick() throws PresentationLogicException
	{
		selectSearchServices(true);
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		form.txtService().setValue(null);
		form.cmbSpecialty().setValue(null);
		
		form.grdReferralService().getRows().clear();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		if(form.txtService().getValue() == null && form.cmbSpecialty().getValue() == null)
		{
			engine.showErrors(new String[] {"Service or Specialty is mandatory."});
			return;
		}
		
		ServiceShortVoCollection services = null;
		
		if (form.getLocalContext().getServiceCategory() != null)
		{
			services = domain.getServicesForCategory(form.txtService().getValue(), form.cmbSpecialty().getValue(), form.getLocalContext().getServiceCategory());
		}
		else
			services = domain.getReferralServices(form.txtService().getValue(), form.cmbSpecialty().getValue());
		
		if (services == null || services.size()<1)//WDEV-20855 
		{	
			if(form.grdReferralService().getRows() != null && form.grdReferralService().getRows().size() > 0)
				form.grdReferralService().getRows().clear();
			
			engine.showMessage("No results found.");
			return;
		}
		
		populateScreenFromData(services);
	}
}
