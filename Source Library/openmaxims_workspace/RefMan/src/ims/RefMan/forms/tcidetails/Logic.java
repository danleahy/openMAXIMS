//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5540.19885)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.tcidetails;

import ims.RefMan.forms.tcidetails.GenForm.GroupWasReasonableEnumeration;
import ims.RefMan.vo.TCIForPatientElectiveListDetailsVo;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open()
	{
		populateDataFromScreen(domain.get(form.getGlobalContext().RefMan.getSelectedTCIHistory()));
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.lblWasReasonable28DayOfferMade().setVisible(!GroupWasReasonableEnumeration.None.equals(form.GroupWasReasonable().getValue()));
		form.GroupWasReasonable().setVisible(!GroupWasReasonableEnumeration.None.equals(form.GroupWasReasonable().getValue()));
		form.GroupWasReasonable().setEnabled(false);
		
		boolean wasReasonable28DaysOfferMadeYes = false;//GroupWasReasonableEnumeration.rdoYes.equals(form.GroupWasReasonable().getValue());
		form.lblTCIDateOffered().setVisible(wasReasonable28DaysOfferMadeYes);
		form.dteTCIDateOffered().setVisible(wasReasonable28DaysOfferMadeYes);
		form.dteTCIDateOffered().setEnabled(false);
		
		form.lblDateOfOfferSecond().setVisible(wasReasonable28DaysOfferMadeYes);
		form.dteDateOfOfferSecond().setVisible(wasReasonable28DaysOfferMadeYes);
		form.dteDateOfOfferSecond().setEnabled(false);
		
		form.lblReasonDeclined().setVisible(wasReasonable28DaysOfferMadeYes);
		form.cmbReasonDeclined().setVisible(wasReasonable28DaysOfferMadeYes);
		form.cmbReasonDeclined().setEnabled(false);
	}

	private void populateDataFromScreen(TCIForPatientElectiveListDetailsVo tciDetails)
	{
		clearTCI();
		
		if(tciDetails == null)
			return;
		
		if(tciDetails.getAppointment() != null && tciDetails.getAppointment().getTheatreBooking() != null)
		{
			form.lblTheatreDate().setValue((tciDetails.getAppointment().getAppointmentDate() != null ? tciDetails.getAppointment().getAppointmentDate().toString() : "") + " " + (tciDetails.getAppointment().getApptStartTime() != null ? tciDetails.getAppointment().getApptStartTime().toString() : ""));
			form.lblTheatreSession().setValue(tciDetails.getAppointment().getSession() != null ? tciDetails.getAppointment().getSession().getName() : null);
		}
		
		form.dteTCIDate().setValue(tciDetails.getTCIDate());
		form.timTCITime().setValue(tciDetails.getTCITime());
		
		if (tciDetails.getTCIWard()!=null)
		{
			form.qmbTCIWard().newRow(tciDetails.getTCIWard(), tciDetails.getTCIWard().getName());
			form.qmbTCIWard().setValue(tciDetails.getTCIWard());
		}
		
		if (tciDetails.getTCIHospital()!=null)
		{
			form.qmbHospital().newRow(tciDetails.getTCIHospital(),tciDetails.getTCIHospital().getName());
			form.qmbHospital().setValue(tciDetails.getTCIHospital());
		}
		
		form.cmbBreachReason().setValue(tciDetails.getRTTBreachReason());
		form.dteDateOfOffer().setValue(tciDetails.getDateTCIOffered());
		form.GroupWasReasonable().setValue(getReasonable28dayOfferMadeValueFromData(tciDetails.getWasReasonable28dayOfferMade()));
		form.dteTCIDateOffered().setValue(tciDetails.getDayTCIDate28Offered());
		form.dteDateOfOfferSecond().setValue(tciDetails.getDate28OfOffer());
		form.cmbReasonDeclined().setValue(tciDetails.getReasonDeclined28());
		form.cmbTCOOfferedMethod().setValue(tciDetails.getTCIOfferMethod());
	}
	
	private void clearTCI()
	{
		form.lblTheatreDate().setValue(null);
		form.lblTheatreSession().setValue(null);
		
		form.dteTCIDate().setValue(null);
		form.timTCITime().setValue(null);
		
		form.qmbTCIWard().clear();
		form.qmbHospital().clear();
		
		form.cmbBreachReason().setValue(null);
		form.dteDateOfOffer().setValue(null);
		form.GroupWasReasonable().setValue(null);
		form.dteTCIDateOffered().setValue(null);
		form.dteDateOfOfferSecond().setValue(null);
		form.cmbReasonDeclined().setValue(null);
		form.cmbTCOOfferedMethod().setValue(null);
	}

	private GroupWasReasonableEnumeration getReasonable28dayOfferMadeValueFromData(Boolean wasReasonable28dayOfferMade)
	{
		if(Boolean.TRUE.equals(wasReasonable28dayOfferMade))
			return GroupWasReasonableEnumeration.rdoYes;
		
		if(Boolean.FALSE.equals(wasReasonable28dayOfferMade))
			return GroupWasReasonableEnumeration.rdoNo;
		
		return null;
	}

	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
}
