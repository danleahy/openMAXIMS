//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.servicehistorydlg;

import java.util.Comparator;

import ims.RefMan.forms.servicehistorydlg.GenForm.grdServiceHistoryRow;
import ims.RefMan.vo.ReferralServiceUpdatesVo;
import ims.RefMan.vo.ReferralServiceUpdatesVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.utils.DateTime;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null &&  args.length > 0 && args[0] != null && args[0] instanceof ReferralServiceUpdatesVoCollection  )
		{
			form.getLocalContext().setReferralServiceUpdatesVoColl((ReferralServiceUpdatesVoCollection) args[0]);
		}
		open();
	}
	private void open()
	{
		populateScreenFromData();
	}
	private void populateScreenFromData()
	{
		form.grdServiceHistory().getRows().clear();
		if( form.getLocalContext().getReferralServiceUpdatesVoCollIsNotNull() && form.getLocalContext().getReferralServiceUpdatesVoColl().size() > 0)
		{
			ReferralServiceUpdatesVoCollection tempColl  = form.getLocalContext().getReferralServiceUpdatesVoColl();
			tempColl.sort(new ServiceUpdatesComparator(SortOrder.DESCENDING));
			for(int i = 0; i < tempColl.size();i++)
			{
				ReferralServiceUpdatesVo tempVo = tempColl.get(i);
				if( tempVo != null )
				{
					grdServiceHistoryRow row = form.grdServiceHistory().getRows().newRow();
					
					row.setColumnDate(tempVo.getRecordingDateTimeIsNotNull() ? tempVo.getRecordingDateTime().toString():null);
					row.setTooltipForColumnDate(tempVo.getRecordingDateTimeIsNotNull() ? tempVo.getRecordingDateTime().toString():null);
					
					row.setColumnService(tempVo.getServiceIsNotNull() ? tempVo.getService().getServiceName():null);
					row.setTooltipForColumnService(tempVo.getServiceIsNotNull() ? tempVo.getService().getServiceName():null);
					
					row.setColumnChangedBy(tempVo.getRecordingUserIsNotNull() && tempVo.getRecordingUser().getNameIsNotNull() ? tempVo.getRecordingUser().getName().toString():null);
					row.setTooltipForColumnChangedBy(tempVo.getRecordingUserIsNotNull() && tempVo.getRecordingUser().getNameIsNotNull() ? tempVo.getRecordingUser().getName().toString():null);
				}
			}
		}
	}
	
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	public class ServiceUpdatesComparator implements Comparator
	{
		private int direction = 1;
		
		public ServiceUpdatesComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ServiceUpdatesComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime pdate1 = null;
			DateTime pdate2 = null;
			if(ob1 instanceof ReferralServiceUpdatesVo )
			{
				ReferralServiceUpdatesVo ps1 = (ReferralServiceUpdatesVo)ob1;
				pdate1 = ps1.getRecordingDateTime();
			}
			if(ob2 instanceof ReferralServiceUpdatesVo)
			{
				ReferralServiceUpdatesVo ps2 = (ReferralServiceUpdatesVo)ob2;
				pdate2 = ps2.getRecordingDateTime();
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	
}
