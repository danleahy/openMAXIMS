//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.codedrecordcc;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdHRGRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdHRGRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColHRGCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColHRGCodeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColHRGCodeOpened()
		{
			super.row.showOpened(0);
		}
		public String getColHRGCode()
		{
			return (String)super.row.get(0);
		}
		public void setColHRGCode(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColHRGCodeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDescription()
		{
			return (String)super.row.get(1);
		}
		public void setColDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVo getValue()
		{
			return (ims.RefMan.vo.ReferralExternalCodingItemVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdHRGRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdHRGRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdHRGRow get(int index)
		{
			return new grdHRGRow(super.collection.get(index));
		}
		public grdHRGRow newRow()
		{
			return new grdHRGRow(super.collection.newRow());
		}
		public grdHRGRow newRow(boolean autoSelect)
		{
			return new grdHRGRow(super.collection.newRow(autoSelect));
		}
		public grdHRGRow newRowAt(int index)
		{
			return new grdHRGRow(super.collection.newRowAt(index));
		}
		public grdHRGRow newRowAt(int index, boolean autoSelect)
		{
			return new grdHRGRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdHRGGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVoCollection getValues()
		{
			ims.RefMan.vo.ReferralExternalCodingItemVoCollection listOfValues = new ims.RefMan.vo.ReferralExternalCodingItemVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVo getValue()
		{
			return (ims.RefMan.vo.ReferralExternalCodingItemVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			super.grid.setValue(value);
		}
		public grdHRGRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdHRGRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdHRGRowCollection getRows()
		{
			return new grdHRGRowCollection(super.grid.getRows());
		}
		public grdHRGRow getRowByValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdHRGRow(row);
		}
		public void setColHRGCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColHRGCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdProceduresCodedRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProceduresCodedRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColProcedureCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColProcedureCodeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColProcedureCodeOpened()
		{
			super.row.showOpened(0);
		}
		public String getColProcedureCode()
		{
			return (String)super.row.get(0);
		}
		public void setColProcedureCode(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColProcedureCodeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColProcDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColProcDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColProcDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getColProcDescription()
		{
			return (String)super.row.get(1);
		}
		public void setColProcDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColProcDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColProcedureDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColProcedureDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColProcedureDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getColProcedureDate()
		{
			return (String)super.row.get(2);
		}
		public void setColProcedureDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColProcedureDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColProcedureConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColProcedureConsultantReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColProcedureConsultantOpened()
		{
			super.row.showOpened(3);
		}
		public String getColProcedureConsultant()
		{
			return (String)super.row.get(3);
		}
		public void setColProcedureConsultant(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColProcedureConsultantTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColPrimarySecondaryReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColPrimarySecondaryReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColPrimarySecondaryOpened()
		{
			super.row.showOpened(4);
		}
		public String getColPrimarySecondary()
		{
			return (String)super.row.get(4);
		}
		public void setColPrimarySecondary(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColPrimarySecondaryTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVo getValue()
		{
			return (ims.RefMan.vo.ReferralExternalCodingItemVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProceduresCodedRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProceduresCodedRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProceduresCodedRow get(int index)
		{
			return new grdProceduresCodedRow(super.collection.get(index));
		}
		public grdProceduresCodedRow newRow()
		{
			return new grdProceduresCodedRow(super.collection.newRow());
		}
		public grdProceduresCodedRow newRow(boolean autoSelect)
		{
			return new grdProceduresCodedRow(super.collection.newRow(autoSelect));
		}
		public grdProceduresCodedRow newRowAt(int index)
		{
			return new grdProceduresCodedRow(super.collection.newRowAt(index));
		}
		public grdProceduresCodedRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProceduresCodedRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProceduresCodedGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVoCollection getValues()
		{
			ims.RefMan.vo.ReferralExternalCodingItemVoCollection listOfValues = new ims.RefMan.vo.ReferralExternalCodingItemVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVo getValue()
		{
			return (ims.RefMan.vo.ReferralExternalCodingItemVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			super.grid.setValue(value);
		}
		public grdProceduresCodedRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProceduresCodedRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProceduresCodedRowCollection getRows()
		{
			return new grdProceduresCodedRowCollection(super.grid.getRows());
		}
		public grdProceduresCodedRow getRowByValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProceduresCodedRow(row);
		}
		public void setColProcedureCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColProcedureCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColProcDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColProcDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColProcedureDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColProcedureDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColProcedureConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColProcedureConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColPrimarySecondaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColPrimarySecondaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdDiagnosesCodedRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosesCodedRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColCodingCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColCodingCodeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColCodingCodeOpened()
		{
			super.row.showOpened(0);
		}
		public String getColCodingCode()
		{
			return (String)super.row.get(0);
		}
		public void setColCodingCode(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColCodingCodeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColCodingDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColCodingDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColCodingDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getColCodingDescription()
		{
			return (String)super.row.get(1);
		}
		public void setColCodingDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColCodingDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDaggerAsteriskReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDaggerAsteriskReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDaggerAsteriskOpened()
		{
			super.row.showOpened(2);
		}
		public String getColDaggerAsterisk()
		{
			return (String)super.row.get(2);
		}
		public void setColDaggerAsterisk(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColDaggerAsteriskTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVo getValue()
		{
			return (ims.RefMan.vo.ReferralExternalCodingItemVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosesCodedRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosesCodedRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosesCodedRow get(int index)
		{
			return new grdDiagnosesCodedRow(super.collection.get(index));
		}
		public grdDiagnosesCodedRow newRow()
		{
			return new grdDiagnosesCodedRow(super.collection.newRow());
		}
		public grdDiagnosesCodedRow newRow(boolean autoSelect)
		{
			return new grdDiagnosesCodedRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosesCodedRow newRowAt(int index)
		{
			return new grdDiagnosesCodedRow(super.collection.newRowAt(index));
		}
		public grdDiagnosesCodedRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosesCodedRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosesCodedGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVoCollection getValues()
		{
			ims.RefMan.vo.ReferralExternalCodingItemVoCollection listOfValues = new ims.RefMan.vo.ReferralExternalCodingItemVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.ReferralExternalCodingItemVo getValue()
		{
			return (ims.RefMan.vo.ReferralExternalCodingItemVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosesCodedRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosesCodedRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosesCodedRowCollection getRows()
		{
			return new grdDiagnosesCodedRowCollection(super.grid.getRows());
		}
		public grdDiagnosesCodedRow getRowByValue(ims.RefMan.vo.ReferralExternalCodingItemVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosesCodedRow(row);
		}
		public void setColCodingCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColCodingCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColCodingDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColCodingDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColDaggerAsteriskHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDaggerAsteriskHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class GroupHistologyRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 144, 21, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Received", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 72, 21, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Awaiting", startTabIndex.intValue() + 1);
		}
		public void setText(GroupHistologyEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupHistologyEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupHistologyEnumeration.None;
				case 0: return GroupHistologyEnumeration.rdoReceived;
				case 1: return GroupHistologyEnumeration.rdoAwaiting;
			}
			return null;
		}
		public void setValue(GroupHistologyEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupHistologyEnumeration.None.id);
		}
		public boolean isEnabled(GroupHistologyEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupHistologyEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupHistologyEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupHistologyEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupHistologyEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupHistologyEnumeration None = new GroupHistologyEnumeration(-1);
		public static GroupHistologyEnumeration rdoReceived = new GroupHistologyEnumeration(0);
		public static GroupHistologyEnumeration rdoAwaiting = new GroupHistologyEnumeration(1);
		private GroupHistologyEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupHistologyEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(840, 528);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 21, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histology:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 504, 47, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "HRG:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 504, 328, 118, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Encoder Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 47, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Coded Items:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 320, 17, 152, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Remove Histology Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 232, 17, 80, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit Histology", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 504, 352, 328, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 504, 64, 328, 256, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdHRGTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdHRGTemp);
		grdHRGGrid grdHRG = (grdHRGGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHRGGrid.class, m_grdHRGTemp);
		grdHRG.addStringColumn("HRG Code", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdHRG.addStringColumn("HRG Description", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdHRG);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 328, 488, 192, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdProceduresCodedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProceduresCodedTemp);
		grdProceduresCodedGrid grdProceduresCoded = (grdProceduresCodedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProceduresCodedGrid.class, m_grdProceduresCodedTemp);
		grdProceduresCoded.addStringColumn("Procedure Code", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProceduresCoded.addStringColumn("Procedure Description", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProceduresCoded.addStringColumn("Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProceduresCoded.addStringColumn("Consultant", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProceduresCoded.addStringColumn("P/S", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdProceduresCoded);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 488, 256, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDiagnosesCodedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDiagnosesCodedTemp);
		grdDiagnosesCodedGrid grdDiagnosesCoded = (grdDiagnosesCodedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosesCodedGrid.class, m_grdDiagnosesCodedTemp);
		grdDiagnosesCoded.addStringColumn("Diagnosis Code", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosesCoded.addStringColumn("Diagnosis Description", 0, 0, 240, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosesCoded.addStringColumn("Dagger Asterisk", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDiagnosesCoded);

		// RadioButton Controls
		RadioButton tmpGroupHistology = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupHistology);
		GroupHistologyRadioButton GroupHistology = (GroupHistologyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupHistologyRadioButton.class, tmpGroupHistology);
		GroupHistology.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupHistology);
	}


	public Label lblHistology()
	{
		return (Label)super.getControl(0);
	}
	public Button btnRemoveHistologyDetails()
	{
		return (Button)super.getControl(4);
	}
	public Button btnEditHistology()
	{
		return (Button)super.getControl(5);
	}
	public TextBox txtCoderComment()
	{
		return (TextBox)super.getControl(6);
	}
	public grdHRGGrid grdHRG()
	{
		return (grdHRGGrid)super.getGrid(0);
	}
	public grdProceduresCodedGrid grdProceduresCoded()
	{
		return (grdProceduresCodedGrid)super.getGrid(1);
	}
	public grdDiagnosesCodedGrid grdDiagnosesCoded()
	{
		return (grdDiagnosesCodedGrid)super.getGrid(2);
	}
	public GroupHistologyRadioButton GroupHistology()
	{
		return (GroupHistologyRadioButton)super.getRadioButton(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_bCanEncode = new ims.framework.ContextVariable("bCanEncode", prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__bCanEncode_" + componentIdentifier + "");
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
			cxl_CurrentAdmission = new ims.framework.ContextVariable("CurrentAdmission", prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentAdmission_" + componentIdentifier + "");
			cxl_CurrentDischargedEpisode = new ims.framework.ContextVariable("CurrentDischargedEpisode", prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentDischargedEpisode_" + componentIdentifier + "");
			cxl_CurrentInpatient = new ims.framework.ContextVariable("CurrentInpatient", prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentInpatient_" + componentIdentifier + "");
		}
		
		public boolean getbCanEncodeIsNotNull()
		{
			return !cxl_bCanEncode.getValueIsNull(context);
		}
		public Boolean getbCanEncode()
		{
			return (Boolean)cxl_bCanEncode.getValue(context);
		}
		public void setbCanEncode(Boolean value)
		{
			cxl_bCanEncode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bCanEncode = null;
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralExternalCodingVo getCurrentRecord()
		{
			return (ims.RefMan.vo.ReferralExternalCodingVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.RefMan.vo.ReferralExternalCodingVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
		public boolean getCurrentAdmissionIsNotNull()
		{
			return !cxl_CurrentAdmission.getValueIsNull(context);
		}
		public ims.core.admin.pas.vo.AdmissionDetailRefVo getCurrentAdmission()
		{
			return (ims.core.admin.pas.vo.AdmissionDetailRefVo)cxl_CurrentAdmission.getValue(context);
		}
		public void setCurrentAdmission(ims.core.admin.pas.vo.AdmissionDetailRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CurrentAdmission' RefVo context variable.");
			if(value == null)
				cxl_CurrentAdmission.setValue(context, null);
			else
				cxl_CurrentAdmission.setValue(context, new ims.core.admin.pas.vo.AdmissionDetailRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CurrentAdmission = null;
		public boolean getCurrentDischargedEpisodeIsNotNull()
		{
			return !cxl_CurrentDischargedEpisode.getValueIsNull(context);
		}
		public ims.core.admin.pas.vo.DischargedEpisodeRefVo getCurrentDischargedEpisode()
		{
			return (ims.core.admin.pas.vo.DischargedEpisodeRefVo)cxl_CurrentDischargedEpisode.getValue(context);
		}
		public void setCurrentDischargedEpisode(ims.core.admin.pas.vo.DischargedEpisodeRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CurrentDischargedEpisode' RefVo context variable.");
			if(value == null)
				cxl_CurrentDischargedEpisode.setValue(context, null);
			else
				cxl_CurrentDischargedEpisode.setValue(context, new ims.core.admin.pas.vo.DischargedEpisodeRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CurrentDischargedEpisode = null;
		public boolean getCurrentInpatientIsNotNull()
		{
			return !cxl_CurrentInpatient.getValueIsNull(context);
		}
		public ims.core.admin.pas.vo.InpatientEpisodeRefVo getCurrentInpatient()
		{
			return (ims.core.admin.pas.vo.InpatientEpisodeRefVo)cxl_CurrentInpatient.getValue(context);
		}
		public void setCurrentInpatient(ims.core.admin.pas.vo.InpatientEpisodeRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CurrentInpatient' RefVo context variable.");
			if(value == null)
				cxl_CurrentInpatient.setValue(context, null);
			else
				cxl_CurrentInpatient.setValue(context, new ims.core.admin.pas.vo.InpatientEpisodeRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CurrentInpatient = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[154];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100037-ID", "ID_ReferralCoding");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100037-CATSREFERRAL", "CatsReferral");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100037-PASEVENT", "PasEvent");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100037-APPOINTMENT", "Appointment");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100037-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100037-COMMENTS", "Comments");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100037-ACTIVE", "Active");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentAdmission_" + componentIdentifier, "BO-1014100008-ID", "ID_AdmissionDetail");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentDischargedEpisode_" + componentIdentifier, "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.CodedRecordCc.__internal_x_context__CurrentInpatient_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
