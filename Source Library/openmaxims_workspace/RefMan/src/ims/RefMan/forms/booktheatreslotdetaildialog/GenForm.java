//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.booktheatreslotdetaildialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTCIOfferedMethodComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.TCIOfferMethod value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.TCIOfferMethod getValue()
		{
			return (ims.core.vo.lookups.TCIOfferMethod)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.TCIOfferMethod value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReasonDeclinedComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReasonDeclined28DayOffer getValue()
		{
			return (ims.RefMan.vo.lookups.ReasonDeclined28DayOffer)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReasonDeclined28DayOffer value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbERODReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ERODReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ERODReason getValue()
		{
			return (ims.RefMan.vo.lookups.ERODReason)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ERODReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbExceededReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason getValue()
		{
			return (ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAnaesTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.AnaestheticType getValue()
		{
			return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbListOwnersComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.interfaces.IMos value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.vo.interfaces.IMos value)
		{
			return super.control.removeRow(value);
		}
		public ims.vo.interfaces.IMos getValue()
		{
			return (ims.vo.interfaces.IMos)super.control.getValue();
		}
		public void setValue(ims.vo.interfaces.IMos value)
		{
			super.control.setValue(value);
		}
	}

	public static class GroupReasonableOfferMadeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 221, 309, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 13);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 141, 309, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 12);
		}
		public void setText(GroupReasonableOfferMadeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupReasonableOfferMadeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupReasonableOfferMadeEnumeration.None;
				case 0: return GroupReasonableOfferMadeEnumeration.rdoNo;
				case 1: return GroupReasonableOfferMadeEnumeration.rdoYes;
			}
			return null;
		}
		public void setValue(GroupReasonableOfferMadeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupReasonableOfferMadeEnumeration.None.id);
		}
		public boolean isEnabled(GroupReasonableOfferMadeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupReasonableOfferMadeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupReasonableOfferMadeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupReasonableOfferMadeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupReasonableOfferMadeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupReasonableOfferMadeEnumeration None = new GroupReasonableOfferMadeEnumeration(-1);
		public static GroupReasonableOfferMadeEnumeration rdoNo = new GroupReasonableOfferMadeEnumeration(0);
		public static GroupReasonableOfferMadeEnumeration rdoYes = new GroupReasonableOfferMadeEnumeration(1);
		private GroupReasonableOfferMadeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupReasonableOfferMadeEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Scheduling.BookTheatreSlotDialogData", "_cv_Scheduling.BookTheatreSlotDialogData").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Scheduling.BookTheatreSlotDialogData' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(592, 640);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 504, 50, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Rtt Date>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 448, 50, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 76, 67, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<laterality>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 10, 67, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 76, 50, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<procedure>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 10, 50, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 76, 29, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<laterality>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 10, 29, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 76, 11, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<procedure>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 10, 11, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 504, 11, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<date>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 448, 11, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 280, 559, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Offer:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 10, 374, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Offered Method:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 10, 344, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason Declined:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 280, 309, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Date Offered:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 10, 304, 112, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Was reasonable 28 \nday offer made ?", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 10, 280, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Offer:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 10, 198, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 10, 555, 101, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Available \nfrom Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 280, 506, 96, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD Reason \nComment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 280, 480, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 10, 252, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Breach Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 10, 225, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 10, 531, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Second Date Offered:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 10, 480, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Earliest Date Offered :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 10, 117, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Type :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 504, 29, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<time>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 448, 29, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 10, 400, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 10, 171, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Date / Time :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 10, 455, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 10, 144, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 216, 91, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mins", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 10, 91, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment Length :", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 198, 591, 88, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 198, 591, 120, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pending Emergency Record", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 10, 591, 88, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resource Availability", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 104, 591, 88, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Summary", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 425, 591, 75, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Book", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 506, 591, 75, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 261, 307, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 381, 506, 200, 46, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 141, 400, 440, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 381, 557, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 381, 307, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 141, 278, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 141, 557, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 141, 169, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 141, 529, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 141, 478, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 141, 278, 171, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 141, 372, 440, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTCIOfferedMethodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTCIOfferedMethodTemp);
		cmbTCIOfferedMethodComboBox cmbTCIOfferedMethod = (cmbTCIOfferedMethodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTCIOfferedMethodComboBox.class, m_cmbTCIOfferedMethodTemp);
		super.addComboBox(cmbTCIOfferedMethod);
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 141, 342, 440, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbReasonDeclinedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbReasonDeclinedTemp);
		cmbReasonDeclinedComboBox cmbReasonDeclined = (cmbReasonDeclinedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonDeclinedComboBox.class, m_cmbReasonDeclinedTemp);
		super.addComboBox(cmbReasonDeclined);
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 141, 196, 440, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 381, 478, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbERODReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbERODReasonTemp);
		cmbERODReasonComboBox cmbERODReason = (cmbERODReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbERODReasonComboBox.class, m_cmbERODReasonTemp);
		super.addComboBox(cmbERODReason);
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 141, 250, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbExceededReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbExceededReasonTemp);
		cmbExceededReasonComboBox cmbExceededReason = (cmbExceededReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbExceededReasonComboBox.class, m_cmbExceededReasonTemp);
		super.addComboBox(cmbExceededReason);
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 141, 223, 440, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 141, 115, 440, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAnaesTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbAnaesTypeTemp);
		cmbAnaesTypeComboBox cmbAnaesType = (cmbAnaesTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaesTypeComboBox.class, m_cmbAnaesTypeTemp);
		super.addComboBox(cmbAnaesType);
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 141, 142, 440, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbListOwnersTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbListOwnersTemp);
		cmbListOwnersComboBox cmbListOwners = (cmbListOwnersComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListOwnersComboBox.class, m_cmbListOwnersTemp);
		super.addComboBox(cmbListOwners);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 141, 506, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Extended Delay:", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 144, 455, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// Time Controls
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 264, 169, 42, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 141, 89, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 557, 248, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Edit, this.getImages().Core.EditDisabled, "Enter Other Reason", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupReasonableOfferMade = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupReasonableOfferMade);
		GroupReasonableOfferMadeRadioButton GroupReasonableOfferMade = (GroupReasonableOfferMadeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupReasonableOfferMadeRadioButton.class, tmpGroupReasonableOfferMade);
		GroupReasonableOfferMade.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupReasonableOfferMade);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblRttDateValue()
	{
		return (Label)super.getControl(0);
	}
	public Label lblRttDate()
	{
		return (Label)super.getControl(1);
	}
	public Label lblAdditionalLateralityValue()
	{
		return (Label)super.getControl(2);
	}
	public Label lblAdditionalLaterality()
	{
		return (Label)super.getControl(3);
	}
	public Label lblAdditionalProcedureValue()
	{
		return (Label)super.getControl(4);
	}
	public Label lblAdditionalProcedure()
	{
		return (Label)super.getControl(5);
	}
	public Label lblPrimaryLateralityValue()
	{
		return (Label)super.getControl(6);
	}
	public Label lblPrimaryLaterality()
	{
		return (Label)super.getControl(7);
	}
	public Label lblPrimaryProcedureValue()
	{
		return (Label)super.getControl(8);
	}
	public Label lblApptDate()
	{
		return (Label)super.getControl(10);
	}
	public Label lblErodDateOfOffer()
	{
		return (Label)super.getControl(12);
	}
	public Label lblTciOfferedMethod()
	{
		return (Label)super.getControl(13);
	}
	public Label lblReasonDeclined()
	{
		return (Label)super.getControl(14);
	}
	public Label lblTCIDateOffered()
	{
		return (Label)super.getControl(15);
	}
	public Label lblWasReasonable28OfferMade()
	{
		return (Label)super.getControl(16);
	}
	public Label lblDateOfOffer()
	{
		return (Label)super.getControl(17);
	}
	public Label lblHospital()
	{
		return (Label)super.getControl(18);
	}
	public Label lblPatinetAvailable()
	{
		return (Label)super.getControl(19);
	}
	public Label lblErodComment()
	{
		return (Label)super.getControl(20);
	}
	public Label lblErodReason()
	{
		return (Label)super.getControl(21);
	}
	public Label lblExceededReason()
	{
		return (Label)super.getControl(22);
	}
	public Label lblWard()
	{
		return (Label)super.getControl(23);
	}
	public Label lblERODDate2()
	{
		return (Label)super.getControl(24);
	}
	public Label lblERODDate1()
	{
		return (Label)super.getControl(25);
	}
	public Label lblAnaestheticType()
	{
		return (Label)super.getControl(26);
	}
	public Label lblApptTime()
	{
		return (Label)super.getControl(27);
	}
	public Label lblComments()
	{
		return (Label)super.getControl(29);
	}
	public Label lblToComeInTime()
	{
		return (Label)super.getControl(30);
	}
	public Label lblEROD()
	{
		return (Label)super.getControl(31);
	}
	public Label lblConsultant()
	{
		return (Label)super.getControl(32);
	}
	public Button btnElectiveListDetails()
	{
		return (Button)super.getControl(35);
	}
	public Button btnPendingEmergency()
	{
		return (Button)super.getControl(36);
	}
	public Button btnResource()
	{
		return (Button)super.getControl(37);
	}
	public Button btnDashboard()
	{
		return (Button)super.getControl(38);
	}
	public Button btnBook()
	{
		return (Button)super.getControl(39);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(40);
	}
	public TextBox txtWasReasonMandatoryField()
	{
		return (TextBox)super.getControl(41);
	}
	public TextBox txtERODReasonComment()
	{
		return (TextBox)super.getControl(42);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(43);
	}
	public DateControl dteErodDateOfOffer()
	{
		return (DateControl)super.getControl(44);
	}
	public DateControl dteTCIOfferedDate()
	{
		return (DateControl)super.getControl(45);
	}
	public DateControl dteDateOfOffer()
	{
		return (DateControl)super.getControl(46);
	}
	public DateControl dtePatAvailFromDate()
	{
		return (DateControl)super.getControl(47);
	}
	public DateControl dteToComeIn()
	{
		return (DateControl)super.getControl(48);
	}
	public DateControl dteEROD2()
	{
		return (DateControl)super.getControl(49);
	}
	public DateControl dteErod()
	{
		return (DateControl)super.getControl(50);
	}
	public DateTimeControl dtimExpected()
	{
		return (DateTimeControl)super.getControl(51);
	}
	public cmbTCIOfferedMethodComboBox cmbTCIOfferedMethod()
	{
		return (cmbTCIOfferedMethodComboBox)super.getComboBox(0);
	}
	public cmbReasonDeclinedComboBox cmbReasonDeclined()
	{
		return (cmbReasonDeclinedComboBox)super.getComboBox(1);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(2);
	}
	public cmbERODReasonComboBox cmbERODReason()
	{
		return (cmbERODReasonComboBox)super.getComboBox(3);
	}
	public cmbExceededReasonComboBox cmbExceededReason()
	{
		return (cmbExceededReasonComboBox)super.getComboBox(4);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(5);
	}
	public cmbAnaesTypeComboBox cmbAnaesType()
	{
		return (cmbAnaesTypeComboBox)super.getComboBox(6);
	}
	public cmbListOwnersComboBox cmbListOwners()
	{
		return (cmbListOwnersComboBox)super.getComboBox(7);
	}
	public CheckBox chkExtendedDelay()
	{
		return (CheckBox)super.getControl(60);
	}
	public CheckBox chkErod()
	{
		return (CheckBox)super.getControl(61);
	}
	public TimeControl timTCI()
	{
		return (TimeControl)super.getControl(62);
	}
	public IntBox intApptLength()
	{
		return (IntBox)super.getControl(63);
	}
	public ImageButton imbOtherReason()
	{
		return (ImageButton)super.getControl(64);
	}
	public GroupReasonableOfferMadeRadioButton GroupReasonableOfferMade()
	{
		return (GroupReasonableOfferMadeRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				PrintAppointment = new LocalFormName(114163);
			}
			public final FormName PrintAppointment;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				SelectElectiveListConfiguration = new LocalFormName(134222);
				ReasonForBookingPast28DayKPI = new LocalFormName(134241);
				ElectiveListDetails = new LocalFormName(134283);
				AddEmergencyTheatre = new LocalFormName(134278);
			}
			public final FormName SelectElectiveListConfiguration;
			public final FormName ReasonForBookingPast28DayKPI;
			public final FormName ElectiveListDetails;
			public final FormName AddEmergencyTheatre;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				InfoDisabled24 = new ImageHelper(102512, "Images/Core/info_disabled_24.png", new Integer(24), new Integer(24));
				InfoEnabled24 = new ImageHelper(102511, "Images/Core/info_enabled_24.png", new Integer(24), new Integer(24));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image InfoDisabled24;
			public final ims.framework.utils.Image InfoEnabled24;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ApptInPastMessageBoxId = new ims.framework.ContextVariable("ApptInPastMessageBoxId", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ApptInPastMessageBoxId_" + componentIdentifier + "");
			cxl_RTTDialogKPIReasonConfirmed = new ims.framework.ContextVariable("RTTDialogKPIReasonConfirmed", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__RTTDialogKPIReasonConfirmed_" + componentIdentifier + "");
			cxl_Sch_Booking = new ims.framework.ContextVariable("Sch_Booking", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__Sch_Booking_" + componentIdentifier + "");
			cxl_ReferralCareContext = new ims.framework.ContextVariable("ReferralCareContext", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralCareContext_" + componentIdentifier + "");
			cxl_ReferralERODForRebook = new ims.framework.ContextVariable("ReferralERODForRebook", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier + "");
			cxl_CatsReferral = new ims.framework.ContextVariable("CatsReferral", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__CatsReferral_" + componentIdentifier + "");
			cxl_ReasonableDateMessageBoxId = new ims.framework.ContextVariable("ReasonableDateMessageBoxId", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReasonableDateMessageBoxId_" + componentIdentifier + "");
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_PatientElectiveListIsNotMandatory = new ims.framework.ContextVariable("PatientElectiveListIsNotMandatory", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveListIsNotMandatory_" + componentIdentifier + "");
			cxl_ConfirmCreateNewPatientElectiveListMessageBoxID = new ims.framework.ContextVariable("ConfirmCreateNewPatientElectiveListMessageBoxID", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ConfirmCreateNewPatientElectiveListMessageBoxID_" + componentIdentifier + "");
			cxl_ElectiveListConfigurationWasSelectedFromDialog = new ims.framework.ContextVariable("ElectiveListConfigurationWasSelectedFromDialog", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ElectiveListConfigurationWasSelectedFromDialog_" + componentIdentifier + "");
			cxl_HasReferralTheatreApptBookedWithTci = new ims.framework.ContextVariable("HasReferralTheatreApptBookedWithTci", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__HasReferralTheatreApptBookedWithTci_" + componentIdentifier + "");
			cxl_RTT28DayKPIReasonConfirmed = new ims.framework.ContextVariable("RTT28DayKPIReasonConfirmed", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__RTT28DayKPIReasonConfirmed_" + componentIdentifier + "");
			cxl_PendingEmergencyTheatre = new ims.framework.ContextVariable("PendingEmergencyTheatre", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier + "");
			cxl_PreviousEarliestDateOffered = new ims.framework.ContextVariable("PreviousEarliestDateOffered", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PreviousEarliestDateOffered_" + componentIdentifier + "");
			cxl_IsRttBRMandatory = new ims.framework.ContextVariable("IsRttBRMandatory", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__IsRttBRMandatory_" + componentIdentifier + "");
			cxl_IsFirstDefinitiveTreatment = new ims.framework.ContextVariable("IsFirstDefinitiveTreatment", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__IsFirstDefinitiveTreatment_" + componentIdentifier + "");
		}
		
		public boolean getApptInPastMessageBoxIdIsNotNull()
		{
			return !cxl_ApptInPastMessageBoxId.getValueIsNull(context);
		}
		public Integer getApptInPastMessageBoxId()
		{
			return (Integer)cxl_ApptInPastMessageBoxId.getValue(context);
		}
		public void setApptInPastMessageBoxId(Integer value)
		{
			cxl_ApptInPastMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptInPastMessageBoxId = null;
		public boolean getRTTDialogKPIReasonConfirmedIsNotNull()
		{
			return !cxl_RTTDialogKPIReasonConfirmed.getValueIsNull(context);
		}
		public Boolean getRTTDialogKPIReasonConfirmed()
		{
			return (Boolean)cxl_RTTDialogKPIReasonConfirmed.getValue(context);
		}
		public void setRTTDialogKPIReasonConfirmed(Boolean value)
		{
			cxl_RTTDialogKPIReasonConfirmed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RTTDialogKPIReasonConfirmed = null;
		public boolean getSch_BookingIsNotNull()
		{
			return !cxl_Sch_Booking.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_BookingTheatreVo getSch_Booking()
		{
			return (ims.scheduling.vo.Sch_BookingTheatreVo)cxl_Sch_Booking.getValue(context);
		}
		public void setSch_Booking(ims.scheduling.vo.Sch_BookingTheatreVo value)
		{
			cxl_Sch_Booking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sch_Booking = null;
		public boolean getReferralCareContextIsNotNull()
		{
			return !cxl_ReferralCareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getReferralCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_ReferralCareContext.getValue(context);
		}
		public void setReferralCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'ReferralCareContext' RefVo context variable.");
			if(value == null)
				cxl_ReferralCareContext.setValue(context, null);
			else
				cxl_ReferralCareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_ReferralCareContext = null;
		public boolean getReferralERODForRebookIsNotNull()
		{
			return !cxl_ReferralERODForRebook.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODVo getReferralERODForRebook()
		{
			return (ims.RefMan.vo.ReferralERODVo)cxl_ReferralERODForRebook.getValue(context);
		}
		public void setReferralERODForRebook(ims.RefMan.vo.ReferralERODVo value)
		{
			cxl_ReferralERODForRebook.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralERODForRebook = null;
		public boolean getCatsReferralIsNotNull()
		{
			return !cxl_CatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralForNewElectivListEntryVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralForNewElectivListEntryVo)cxl_CatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralForNewElectivListEntryVo value)
		{
			cxl_CatsReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferral = null;
		public boolean getReasonableDateMessageBoxIdIsNotNull()
		{
			return !cxl_ReasonableDateMessageBoxId.getValueIsNull(context);
		}
		public Integer getReasonableDateMessageBoxId()
		{
			return (Integer)cxl_ReasonableDateMessageBoxId.getValue(context);
		}
		public void setReasonableDateMessageBoxId(Integer value)
		{
			cxl_ReasonableDateMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReasonableDateMessageBoxId = null;
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getPatientElectiveListIsNotMandatoryIsNotNull()
		{
			return !cxl_PatientElectiveListIsNotMandatory.getValueIsNull(context);
		}
		public Boolean getPatientElectiveListIsNotMandatory()
		{
			return (Boolean)cxl_PatientElectiveListIsNotMandatory.getValue(context);
		}
		public void setPatientElectiveListIsNotMandatory(Boolean value)
		{
			cxl_PatientElectiveListIsNotMandatory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveListIsNotMandatory = null;
		public boolean getConfirmCreateNewPatientElectiveListMessageBoxIDIsNotNull()
		{
			return !cxl_ConfirmCreateNewPatientElectiveListMessageBoxID.getValueIsNull(context);
		}
		public Integer getConfirmCreateNewPatientElectiveListMessageBoxID()
		{
			return (Integer)cxl_ConfirmCreateNewPatientElectiveListMessageBoxID.getValue(context);
		}
		public void setConfirmCreateNewPatientElectiveListMessageBoxID(Integer value)
		{
			cxl_ConfirmCreateNewPatientElectiveListMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmCreateNewPatientElectiveListMessageBoxID = null;
		public boolean getElectiveListConfigurationWasSelectedFromDialogIsNotNull()
		{
			return !cxl_ElectiveListConfigurationWasSelectedFromDialog.getValueIsNull(context);
		}
		public Boolean getElectiveListConfigurationWasSelectedFromDialog()
		{
			return (Boolean)cxl_ElectiveListConfigurationWasSelectedFromDialog.getValue(context);
		}
		public void setElectiveListConfigurationWasSelectedFromDialog(Boolean value)
		{
			cxl_ElectiveListConfigurationWasSelectedFromDialog.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ElectiveListConfigurationWasSelectedFromDialog = null;
		public boolean getHasReferralTheatreApptBookedWithTciIsNotNull()
		{
			return !cxl_HasReferralTheatreApptBookedWithTci.getValueIsNull(context);
		}
		public Boolean getHasReferralTheatreApptBookedWithTci()
		{
			return (Boolean)cxl_HasReferralTheatreApptBookedWithTci.getValue(context);
		}
		public void setHasReferralTheatreApptBookedWithTci(Boolean value)
		{
			cxl_HasReferralTheatreApptBookedWithTci.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasReferralTheatreApptBookedWithTci = null;
		public boolean getRTT28DayKPIReasonConfirmedIsNotNull()
		{
			return !cxl_RTT28DayKPIReasonConfirmed.getValueIsNull(context);
		}
		public Boolean getRTT28DayKPIReasonConfirmed()
		{
			return (Boolean)cxl_RTT28DayKPIReasonConfirmed.getValue(context);
		}
		public void setRTT28DayKPIReasonConfirmed(Boolean value)
		{
			cxl_RTT28DayKPIReasonConfirmed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RTT28DayKPIReasonConfirmed = null;
		public boolean getPendingEmergencyTheatreIsNotNull()
		{
			return !cxl_PendingEmergencyTheatre.getValueIsNull(context);
		}
		public ims.scheduling.vo.PendingEmergencyTheatreVo getPendingEmergencyTheatre()
		{
			return (ims.scheduling.vo.PendingEmergencyTheatreVo)cxl_PendingEmergencyTheatre.getValue(context);
		}
		public void setPendingEmergencyTheatre(ims.scheduling.vo.PendingEmergencyTheatreVo value)
		{
			cxl_PendingEmergencyTheatre.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PendingEmergencyTheatre = null;
		public boolean getPreviousEarliestDateOfferedIsNotNull()
		{
			return !cxl_PreviousEarliestDateOffered.getValueIsNull(context);
		}
		public ims.framework.utils.Date getPreviousEarliestDateOffered()
		{
			return (ims.framework.utils.Date)cxl_PreviousEarliestDateOffered.getValue(context);
		}
		public void setPreviousEarliestDateOffered(ims.framework.utils.Date value)
		{
			cxl_PreviousEarliestDateOffered.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousEarliestDateOffered = null;
		public boolean getIsRttBRMandatoryIsNotNull()
		{
			return !cxl_IsRttBRMandatory.getValueIsNull(context);
		}
		public Boolean getIsRttBRMandatory()
		{
			return (Boolean)cxl_IsRttBRMandatory.getValue(context);
		}
		public void setIsRttBRMandatory(Boolean value)
		{
			cxl_IsRttBRMandatory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRttBRMandatory = null;
		public boolean getIsFirstDefinitiveTreatmentIsNotNull()
		{
			return !cxl_IsFirstDefinitiveTreatment.getValueIsNull(context);
		}
		public Boolean getIsFirstDefinitiveTreatment()
		{
			return (Boolean)cxl_IsFirstDefinitiveTreatment.getValue(context);
		}
		public void setIsFirstDefinitiveTreatment(Boolean value)
		{
			cxl_IsFirstDefinitiveTreatment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsFirstDefinitiveTreatment = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[276];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.Sch_BookingTheatre", "BO-1055100006-ID", "ID_Sch_Booking");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.Sch_BookingTheatre", "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PATIENT", "Patient");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-REFERRAL", "Referral");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-DATEONLIST", "DateOnList");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PRIORITY", "Priority");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-TRANSPORT", "Transport");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-EROD", "EROD");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-BED", "Bed");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-LANGUAGE", "Language");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-SUBJECTTO28DAYRULE", "SubjectTo28DayRule");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-RULE28DAYSTATUS", "Rule28DayStatus");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-RULE28DAYPERIODSTART", "Rule28DayPeriodStart");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-ID", "ID_ElectiveListConfiguration");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-WAITINGLISTNAME", "WaitingListName");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-STARTDATE", "StartDate");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-ENDDATE", "EndDate");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-WAITINGLISTCODE", "WaitingListCode");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-ISACTIVE", "IsActive");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ID", "ID_ReferralEROD");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODTYPE", "ERODType");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-SEQUENCE", "Sequence");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISACTIVE", "IsActive");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODREASON", "ERODReason");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISLATERALITYAPPLICABLE", "IsLateralityApplicable");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISBILATERALLISTINGAPPLICABLE", "IsBilateralListingApplicable");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DEFAULTANAESTHETICTYPE", "DefaultAnaestheticType");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-GENDERSPECIFIC", "GenderSpecific");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISENDOSCOPY", "IsEndoscopy");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ENDOSCOPYTYPE", "EndoscopyType");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-MEDICALWL", "MedicalWL");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_Scheduling.PendingEmergencyTheatre", "BO-1090100024-ID", "ID_PendingEmergencyTheatre");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-ID", "ID_Sch_Booking");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralCareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ID", "ID_ReferralEROD");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODTYPE", "ERODType");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-SEQUENCE", "Sequence");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ISACTIVE", "IsActive");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODREASON", "ERODReason");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODREASONCOMMENT", "ERODReasonComment");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODSTATUS", "ErodStatus");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ISEXTENDEDDELAY", "IsExtendedDelay");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-DATEOFOFFER", "DateOfOffer");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-PATIENT", "Patient");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REFERRAL", "Referral");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-EROD", "EROD");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-BED", "Bed");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-LANGUAGE", "Language");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SUBJECTTO28DAYRULE", "SubjectTo28DayRule");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-RULE28DAYSTATUS", "Rule28DayStatus");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-RULE28DAYPERIODSTART", "Rule28DayPeriodStart");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-ID", "ID_PendingEmergencyTheatre");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-PATIENT", "Patient");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-CATSREFERRAL", "CatsReferral");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-CURRENTSTATUS", "CurrentStatus");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-WASINPATIENTWHENADDEDTOLIST", "WasInpatientWhenAddedToList");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-URGENCYCATEGORY", "UrgencyCategory");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-PROCLATERALITY", "ProcLaterality");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-PROCEDUREDETAILS", "ProcedureDetails");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-ISENDOSCOPYPROCEDURE", "IsEndoscopyProcedure");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-SURGERYTIMEMINS", "SurgeryTimeMins");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-THEATRETYPE", "TheatreType");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-CURRENTLOCATIONOFPATIENT", "CurrentLocationOfPatient");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-EXPECTEDDATETIME", "ExpectedDateTime");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-THEATREAPPOINTMENTBOOKED", "TheatreAppointmentBooked");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-REMOVEDBY", "RemovedBy");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-REMOVALREASON", "RemovalReason");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-REMOVALDATETIME", "RemovalDateTime");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PendingEmergencyTheatre_" + componentIdentifier, "BO-1090100024-ISENDOSCOPYSECONDPROCEDURE", "IsEndoscopySecondProcedure");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
