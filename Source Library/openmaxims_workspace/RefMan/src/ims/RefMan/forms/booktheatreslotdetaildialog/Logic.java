//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.booktheatreslotdetaildialog;

import ims.admin.vo.ElectiveListConfigurationVo;
import ims.RefMan.forms.booktheatreslotdetaildialog.GenForm.GroupReasonableOfferMadeEnumeration;
import ims.RefMan.vo.CatsReferralForNewElectivListEntryVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListElectiveTCIVo;
import ims.RefMan.vo.PatientElectiveListElectiveTCIVoCollection;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.PatientElectiveListVoCollection;
import ims.RefMan.vo.ReasonRTTWeekWaitBreachVo;
import ims.RefMan.vo.ReferralERODForBookTheatreVo;
import ims.RefMan.vo.enums.TCITheatreAppointmentKPIs;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageDefaultButton;
import ims.framework.MessageIcon;
import ims.framework.UrlParam;
import ims.framework.WindowParam;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.icp.vo.PatientICPFullVo;
import ims.pathways.vo.PathwayRTTStatusLiteVo;
import ims.pathways.vo.PathwayRTTStatusLiteVoCollection;
import ims.scheduling.domain.objects.SessionTheatreProceduresRemanining;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookTheatreSlotDialogVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.BookingAppointmentTheatreVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ExclusionTimesVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreVo;
import ims.scheduling.vo.Sch_BookingTheatreVo;
import ims.scheduling.vo.SessionParentChildSlotRefVoCollection;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionTheatreProceduresRemainingVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.Session_ListOwnerVoCollection;
import ims.scheduling.vo.TheatreBookingLiteVo;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.exception.LockAcquisitionException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int DAY28 = 28;
	private static final int DAY21 = 21;
	private static final int FIRST_DEFINITIVE_TREATMENT = 30;
	private static final int NUMBER_OF_RETRIES = 3;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//for ICP save
		if(args != null)
		{
			//WDEV-18396
			if(args.length > 0)
			{
				if(args[0] instanceof CareContextRefVo)
					form.getLocalContext().setReferralCareContext((CareContextRefVo) args[0]);
			}
		}

		initialise();
		open();
	}

	private void open()
	{		
		PatientElectiveListVo patientElectiveList = form.getLocalContext().getPatientElectiveList();
		populatePatientElectiveListFromData(patientElectiveList);

		form.getLocalContext().setIsFirstDefinitiveTreatment(referralHasFirstDefinitiveTreatment(form.getLocalContext().getCatsReferral())); //WDEV-23025

		//WDEV-22648
		form.getLocalContext().setIsRttBRMandatory(!(patientElectiveList != null && patientElectiveList.getTCIDetailsIsNotNull()
				&& Boolean.TRUE.equals(patientElectiveList.getTCIDetails().getRTTBreachCommentIsNotNull())
				&& patientElectiveList.getTCIDetails().getRTTBreachComment().length() > 0)
				&& form.getLocalContext().getCatsReferral() != null 
				&& form.getLocalContext().getCatsReferral().getReferralDetails() != null 
				&& form.getLocalContext().getCatsReferral().getReferralDetails().getEnd18WW() != null //WDEV-22724
				&& !form.getLocalContext().getIsFirstDefinitiveTreatment()); //WDEV-23025

		if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null)
		{

			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook() != null)
			{
				//display previous appointment data on a rebook
				BookingAppointmentTheatreVo voAppt = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook();

				form.intApptLength().setValue(voAppt.getCustomProcedureDuration());

				if(voAppt.getTheatreBookingIsNotNull())
				{
					form.getLocalContext().setReferralERODForRebook(domain.getReferralERODByAppointment(voAppt));

					form.lblPrimaryProcedureValue().setValue(voAppt.getTheatreBooking().getProcedure() != null ? (voAppt.getTheatreBooking().getProcedure().getProcedureName().length() > 50 ?  
							voAppt.getTheatreBooking().getProcedure().getProcedureName().substring(0, 50) +"..." : voAppt.getTheatreBooking().getProcedure().getProcedureName()) : "");
					form.lblPrimaryProcedureValue().setTooltip(voAppt.getTheatreBooking().getProcedure() != null ? voAppt.getTheatreBooking().getProcedure().getProcedureName() : "");//wdev-22440
					form.lblPrimaryLateralityValue().setValue(voAppt.getTheatreBooking().getProcLaterality() != null ? voAppt.getTheatreBooking().getProcLaterality().getText() : "");

					form.lblAdditionalProcedureValue().setValue(voAppt.getTheatreBooking().getSecondaryProcedure() != null ? (voAppt.getTheatreBooking().getSecondaryProcedure().getProcedureName().length() > 50 ?  
							voAppt.getTheatreBooking().getSecondaryProcedure().getProcedureName().substring(0, 50) + "..." : voAppt.getTheatreBooking().getSecondaryProcedure().getProcedureName()) : "");
					form.lblAdditionalProcedureValue().setTooltip(voAppt.getTheatreBooking().getSecondaryProcedure() != null ? voAppt.getTheatreBooking().getSecondaryProcedure().getProcedureName(): "");//wdev-22440
					form.lblAdditionalLateralityValue().setValue(voAppt.getTheatreBooking().getSecondaryProcLaterality() != null ? voAppt.getTheatreBooking().getSecondaryProcLaterality().getText() : "");

					form.cmbAnaesType().setValue(voAppt.getTheatreBooking().getAnaestheticType());
					//WDEV-22409
					/*
						1. Default the consultant field on booking with the operating surgeon denoted on the waiting list card
						2. Default the consultant field on re-booking with the consultant associated with the appointment that is selected for re-booking
					 */
					//					form.cmbListOwners().setValue(voAppt.getTheatreBooking().getConsultant());
					if (form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook() != null
							&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getConsultantToDefault() != null)
					{
						// This is a rebooking
						IMos consultantToDefault = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getConsultantToDefault();

						if (consultantToDefault != null )
						{
							HcpLiteVo hcp = null;

							if (consultantToDefault instanceof MedicLiteVo)
							{
								hcp = new HcpLiteVo(((MedicLiteVo)consultantToDefault).getID_Hcp(), ((MedicLiteVo)consultantToDefault).getVersion_Hcp());
							}
							else if (consultantToDefault instanceof HcpLiteVo)
							{
								hcp = (HcpLiteVo) consultantToDefault;
							}

							form.cmbListOwners().setValue(hcp);
						}
					}
					else
					{
						form.cmbListOwners().setValue(voAppt.getTheatreBooking().getConsultant());
					} //WDEV-22409

					if(form.getLocalContext().getReferralERODForRebook() != null)
					{
						form.dteErod().setValue(form.getLocalContext().getReferralERODForRebook().getERODDate1());
						form.dteEROD2().setValue(form.getLocalContext().getReferralERODForRebook().getERODDate2());
						form.cmbERODReason().setValue(form.getLocalContext().getReferralERODForRebook().getERODReason());
						form.txtERODReasonComment().setValue(form.getLocalContext().getReferralERODForRebook().getERODReasonComment());
						form.dtePatAvailFromDate().setValue(form.getLocalContext().getReferralERODForRebook().getPatAvailFromDate());
						form.chkExtendedDelay().setValue(form.getLocalContext().getReferralERODForRebook().getIsExtendedDelay());
						form.dteErodDateOfOffer().setValue(form.getLocalContext().getReferralERODForRebook().getDateOfOffer());
					}

					form.txtComments().setValue(voAppt.getComments());

				}	

			}
		}

		updateControlState();
	}

	//WDEV-23025
	private boolean referralHasFirstDefinitiveTreatment(CatsReferralForNewElectivListEntryVo catsReferral) 
	{
		if (form.getLocalContext().getCatsReferral() != null 
				&& form.getLocalContext().getCatsReferral().getJourney() != null
				&& form.getLocalContext().getCatsReferral().getJourney().getCurrentClock() != null
				&& form.getLocalContext().getCatsReferral().getJourney().getCurrentClock().getStopDate() != null)
		{
			if (form.getLocalContext().getCatsReferral().getJourney().getCurrentClock().getCurrentRTTStatus() != null
					&& form.getLocalContext().getCatsReferral().getJourney().getCurrentClock().getCurrentRTTStatus().getRTTStatus() != null
					&& FIRST_DEFINITIVE_TREATMENT == form.getLocalContext().getCatsReferral().getJourney().getCurrentClock().getCurrentRTTStatus().getRTTStatus().getNationalCode())
			{
				return true;	
			}
			else
			{
				return rttStatusHistoryHasFirstDefinitiveTreatment(form.getLocalContext().getCatsReferral().getJourney().getCurrentClock().getRTTStatusHistory());
			}
		}

		return false;
	}

	private boolean rttStatusHistoryHasFirstDefinitiveTreatment(PathwayRTTStatusLiteVoCollection rttStatusHistory) 
	{
		if (rttStatusHistory == null)
			return false;

		for (PathwayRTTStatusLiteVo status : rttStatusHistory)
		{
			if (status.getRTTStatus() == null)
			{
				continue;
			}
			if (FIRST_DEFINITIVE_TREATMENT == status.getRTTStatus().getNationalCode())
				return true;
		}
		return false;
	}
	//WDEV-23025 - ends here

	private void initialise()
	{	

		form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(null);
		form.getGlobalContext().RefMan.setReason28DayRuleBreach(null);

		form.getLocalContext().setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));		

		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();

		if(voData != null)
		{

			form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveListByRefId(voData.getPatientElectiveList()));
			form.getLocalContext().setPendingEmergencyTheatre(domain.getPendingEmergencyTheatre(voData.getPendingEmergencyTheatre()));

			//default Appointment Date
			if(voData.getSession() != null && voData.getSession().getSessionDate() != null)
				form.lblApptDate().setValue(voData.getSession().getSessionDate().toString());

			//default Appointment Time
			if(voData.getParentChildSlot() != null && voData.getParentChildSlot().getStartTime() != null)
				form.lblApptTime().setValue(voData.getParentChildSlot().getStartTime().toString());

			//default primary procedure
			if(voData.getProcedureToDefault() != null)
			{
				if(voData.getProcedureToDefault() instanceof ProcedureLiteVo)
				{
					form.lblPrimaryProcedureValue().setValue(((ProcedureLiteVo) voData.getProcedureToDefault()).getProcedureName() != null 
							? (((ProcedureLiteVo) voData.getProcedureToDefault()).getProcedureName().length() > 50 ?  
									((ProcedureLiteVo) voData.getProcedureToDefault()).getProcedureName().substring(0, 50) + "..." : ((ProcedureLiteVo) voData.getProcedureToDefault()).getProcedureName()) : "");
					form.lblPrimaryProcedureValue().setTooltip(((ProcedureLiteVo) voData.getProcedureToDefault()).getProcedureName());//wdev-22440
				}

				if(voData.getLaterality() != null)
				{
					form.lblPrimaryLateralityValue().setValue(voData.getLaterality().getText());
				}
			}

			//default secondary procedure
			if(voData.getSecondaryProcedure() != null)
			{
				if(voData.getSecondaryProcedure() instanceof ProcedureLiteVo)
				{
					form.lblAdditionalProcedureValue().setValue(((ProcedureLiteVo) voData.getSecondaryProcedure()).getProcedureName().length() > 50 ?  
							((ProcedureLiteVo) voData.getSecondaryProcedure()).getProcedureName().substring(0, 50) + "..." : ((ProcedureLiteVo) voData.getSecondaryProcedure()).getProcedureName() );
					form.lblAdditionalProcedureValue().setTooltip(((ProcedureLiteVo) voData.getSecondaryProcedure()).getProcedureName());//wdev-22440
				}

				if(voData.getSecondaryProcedureLaterality() != null)
				{
					form.lblAdditionalLateralityValue().setValue(voData.getSecondaryProcedureLaterality().getText());
				}
			}

			//default appointment length 
			form.intApptLength().setValue(voData.getAppointmentDuration());

			//load anaesthetic type
			if(voData.getSession() != null && voData.getSession().getAnaestheticType() != null)
			{
				for(int i = 0; i < voData.getSession().getAnaestheticType().size(); i++)
				{
					AnaestheticType lkpAnaes = voData.getSession().getAnaestheticType().get(i);
					form.cmbAnaesType().newRow(lkpAnaes, lkpAnaes.getText());
				}
			}

			//default anaesthetic type
			form.cmbAnaesType().setValue(voData.getAnaestheticTypeToDefault());

			//load Consultant
			if(voData.getSession() != null && voData.getSession().getListOwners() != null)
			{
				form.cmbListOwners().clear();

				for(Session_ListOwnerVo voListOwner : voData.getSession().getListOwners())
				{
					form.cmbListOwners().newRow(voListOwner.getHcp(), voListOwner.getHcp().toString());
				}
			}

			//default Consultant
			IMos consultantToDefault = voData.getConsultantToDefault();

			if(consultantToDefault != null )
			{
				HcpLiteVo hcp = null;

				if (consultantToDefault instanceof MedicLiteVo)
				{
					hcp = new HcpLiteVo(((MedicLiteVo)consultantToDefault).getID_Hcp(), ((MedicLiteVo)consultantToDefault).getVersion_Hcp());
				}
				else if( consultantToDefault instanceof HcpLiteVo)
				{
					hcp = (HcpLiteVo) consultantToDefault;
				}

				form.cmbListOwners().setValue(hcp);

			}
			else if (voData.getSession().getListOwners() != null && voData.getSession().getListOwners().size() == 1 && voData.getSession().getListOwners().get(0) != null)
			{
				form.cmbListOwners().setValue(voData.getSession().getListOwners().get(0).getHcp());
			}

			//load hospital and wards
			if(voData.getSession() != null && voData.getSession().getSchLocation() != null)
			{
				LocationLiteVo hospital = domain.getParentHospitalLocation(voData.getSession().getSchLocation());

				form.cmbHospital().newRow(hospital, hospital.getName());
				form.cmbHospital().setValue(hospital);

				populateWardCombo(hospital);
			}

			boolean isOutpatient = form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getWard() == null;
			boolean hasPET = form.getLocalContext().getPendingEmergencyTheatre() != null;

			form.lblHospital().setValue(isOutpatient && hasPET ? "Expected Hospital:" : "Hospital:");
			form.lblWard().setValue(isOutpatient && hasPET ? "Expected Ward:" : "Ward:");
			form.lblDateOfOffer().setValue(isOutpatient && hasPET ? "Expected Date Time:" : "Date of Offer:");
			form.lblRttDateValue().setValue(form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDetails() != null && form.getLocalContext().getCatsReferral().getReferralDetails().getEnd18WW() != null ? form.getLocalContext().getCatsReferral().getReferralDetails().getEnd18WW().toString() : "");

			if (isOutpatient && hasPET)
			{
				populateHospitalCombo();
				form.cmbHospital().setValue(form.getLocalContext().getPendingEmergencyTheatre().getExpectedHospital());

				populateWardCombo(form.cmbHospital().getValue());
				form.cmbWard().setValue(form.getLocalContext().getPendingEmergencyTheatre().getExpectedWard());

				form.dtimExpected().setValue(form.getLocalContext().getPendingEmergencyTheatre().getExpectedDateTime());
			}
		}

		//default TCI Date
		//already have a TCI date

		PatientElectiveListVo electiveList = form.getLocalContext().getPatientElectiveList();

		if (electiveList != null && electiveList.getTCIDetails() != null)
		{
			form.dteToComeIn().setValue(electiveList.getTCIDetails().getTCIDate());
			form.timTCI().setValue(electiveList.getTCIDetails().getTCITime());
		}
		//has Pre-Operative Overnight Stay
		else if (electiveList != null && Boolean.TRUE.equals(electiveList.getPreOperativeOvernightStayRequired()) && electiveList.getNoOfPreOperativeNights() != null)
		{
			Date appointmentDate = null;

			if(voData.getSession() != null && voData.getSession().getSessionDate() != null)
				appointmentDate = (Date) voData.getSession().getSessionDate().clone();

			appointmentDate.addDay( (-1) * electiveList.getNoOfPreOperativeNights());

			form.dteToComeIn().setValue(appointmentDate);
			//form.timTCI().setValue(voData.getParentChildSlot() != null ? voData.getParentChildSlot().getStartTime() : null);

		}
		else if (voData != null && voData.getSession() != null && voData.getSession() != null && voData.getSession().getSessionDate() != null)
		{
			form.dteToComeIn().setValue(voData.getSession().getSessionDate());

		}

		//default Date Of Offer
		form.dteDateOfOffer().setValue(new Date());

		//populate EROD details
		if(electiveList != null && electiveList.getEROD() != null)
		{
			ReferralERODForBookTheatreVo erod = domain.getEROD(electiveList.getEROD());

			form.chkErod().setValue(true);
			form.dteErod().setValue(erod.getERODDate1());
			form.dteEROD2().setValue(erod.getERODDate2());
			form.cmbERODReason().setValue(erod.getERODReason());
			form.txtERODReasonComment().setValue(erod.getERODReasonComment());
			form.dtePatAvailFromDate().setValue(erod.getPatAvailFromDate());
			form.chkExtendedDelay().setValue(erod.getIsExtendedDelay());
			form.dteErodDateOfOffer().setValue(erod.getDateOfOffer());

			form.getLocalContext().setPreviousEarliestDateOffered((Date) (erod.getERODDate1() != null ? erod.getERODDate1().clone() : null));
		}

	}

	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voCollLoc = domain.listHospitals();

		if (voCollLoc != null)
		{
			for (LocationLiteVo item : voCollLoc)
			{
				form.cmbHospital().newRow(item, item.getName());
			}
		}

	}

	private void populateWardCombo(LocationLiteVo hospital)
	{
		form.cmbWard().clear();

		if (hospital == null)
			return;

		LocationLiteVoCollection wardsColl = domain.listWardsForCurrentLocation(hospital);

		if (wardsColl != null && wardsColl.size() > 0) //WDEV-19479
		{
			for(int x = 0; x < wardsColl.size(); x++)
			{
				addWard(wardsColl.get(x));
			}
		}

		if(wardsColl.size() == 1)
		{
			form.cmbWard().setValue(wardsColl.get(0));
		}

	}

	private void addWard(LocationLiteVo ward) 
	{
		if(ward == null)
			return;

		form.cmbWard().newRow(ward, ward.getName());
	}

	private void updateControlState()
	{

		boolean isPlannedElectiveList = form.getLocalContext().getPatientElectiveList() != null && ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType());
		boolean anaestheticTypeDefaulted = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getAnaestheticTypeToDefault() != null;
		boolean listOwnerDefaulted = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getConsultantToDefault() != null;

		boolean primaryProcedureHasLaterality = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getLaterality() != null;
		boolean hasSecondaryProcedure = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSecondaryProcedure() != null;
		boolean secondaryProcedureHasLaterality = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSecondaryProcedureLaterality() != null;

		boolean notEmergencyTheatre = form.getLocalContext().getPatientElectiveList() != null;
		boolean isOutpatient = form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getWard() == null;
		boolean hasPET = form.getLocalContext().getPendingEmergencyTheatre() != null;

		form.lblToComeInTime().setVisible(notEmergencyTheatre);
		form.dteToComeIn().setVisible(notEmergencyTheatre);
		form.timTCI().setVisible(notEmergencyTheatre);

		form.lblHospital().setVisible(notEmergencyTheatre || (isOutpatient && hasPET));
		form.cmbHospital().setVisible(notEmergencyTheatre || (isOutpatient && hasPET));
		form.cmbHospital().setEnabled(!notEmergencyTheatre);

		form.lblWard().setVisible(notEmergencyTheatre || (isOutpatient && hasPET));
		form.cmbWard().setVisible(notEmergencyTheatre || (isOutpatient && hasPET));

		form.lblDateOfOffer().setVisible(notEmergencyTheatre || (isOutpatient && hasPET));
		form.dtimExpected().setVisible(isOutpatient && hasPET);

		form.dteDateOfOffer().setVisible(notEmergencyTheatre);

		form.lblTciOfferedMethod().setVisible(notEmergencyTheatre);
		form.cmbTCIOfferedMethod().setVisible(notEmergencyTheatre);

		form.lblPrimaryLaterality().setVisible(primaryProcedureHasLaterality);
		form.lblPrimaryLateralityValue().setVisible(primaryProcedureHasLaterality);

		form.lblAdditionalProcedure().setVisible(hasSecondaryProcedure);
		form.lblAdditionalProcedureValue().setVisible(hasSecondaryProcedure);

		form.lblAdditionalLaterality().setVisible(hasSecondaryProcedure && secondaryProcedureHasLaterality);
		form.lblAdditionalLateralityValue().setVisible(hasSecondaryProcedure && secondaryProcedureHasLaterality);

		form.lblConsultant().setVisible(notEmergencyTheatre);
		form.cmbListOwners().setVisible(notEmergencyTheatre);
		//		form.cmbListOwners().setEnabled(!listOwnerDefaulted); //WDEV-22409 The consultant field is to be always editable
		form.cmbListOwners().setEnabled(true);

		form.lblAnaestheticType().setVisible(notEmergencyTheatre);
		form.cmbAnaesType().setVisible(notEmergencyTheatre);
		form.cmbAnaesType().setEnabled(engine.hasRight(AppRight.ALLOW_ANAESTHETIC_TYPE_CHANGE) && !anaestheticTypeDefaulted); 

		form.dteToComeIn().setEnabled(form.getLocalContext().getPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList() != null && (form.getLocalContext().getPatientElectiveList().getTCIDetails() == null || isPlannedElectiveList))); //WDEV-19479

		form.cmbWard().setEnabled(form.getLocalContext().getPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() == null));

		form.btnElectiveListDetails().setVisible(form.getLocalContext().getPatientElectiveList() != null);
		form.btnPendingEmergency().setVisible(form.getLocalContext().getPendingEmergencyTheatre() != null);

		updateERODControls();
		updateRTTBreachReasonControls();
		updateTCIDetails();

	}

	private void updateERODControls()
	{
		boolean notEmergencyTheatre = form.getLocalContext().getPatientElectiveList() != null;

		form.lblEROD().setVisible(notEmergencyTheatre);
		form.chkErod().setVisible(notEmergencyTheatre);

		form.lblERODDate1().setVisible(notEmergencyTheatre);
		form.dteErod().setVisible(notEmergencyTheatre);
		form.dteErod().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()));

		form.lblERODDate2().setVisible(notEmergencyTheatre);
		form.dteEROD2().setVisible(notEmergencyTheatre);
		form.dteEROD2().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()));	
		form.dteEROD2().setRequired(!Boolean.TRUE.equals(form.chkExtendedDelay().getValue()));

		form.lblErodDateOfOffer().setVisible(notEmergencyTheatre);
		form.dteErodDateOfOffer().setVisible(notEmergencyTheatre);
		form.dteErodDateOfOffer().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()));

		form.chkExtendedDelay().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()));
		form.chkExtendedDelay().setVisible(notEmergencyTheatre);

		form.lblErodReason().setVisible(notEmergencyTheatre);
		form.cmbERODReason().setVisible(notEmergencyTheatre);
		form.cmbERODReason().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()));

		form.lblErodComment().setVisible(notEmergencyTheatre);
		form.txtERODReasonComment().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()));
		form.txtERODReasonComment().setVisible(notEmergencyTheatre);

		form.lblPatinetAvailable().setVisible(notEmergencyTheatre);
		form.dtePatAvailFromDate().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()));
		form.dtePatAvailFromDate().setVisible(notEmergencyTheatre);

	}

	private void updateTCIDetails()
	{
		boolean wasReasonableOfferMade = GroupReasonableOfferMadeEnumeration.rdoYes.equals(form.GroupReasonableOfferMade().getValue());

		form.lblTCIDateOffered().setVisible(wasReasonableOfferMade);
		form.dteTCIOfferedDate().setVisible(wasReasonableOfferMade);

		form.lblReasonDeclined().setVisible(wasReasonableOfferMade);
		form.cmbReasonDeclined().setVisible(wasReasonableOfferMade);

		Date dayBreached28 = null;
		if(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart() != null)
		{
			dayBreached28 = (Date) form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart().clone();
			dayBreached28.addDay(DAY28);
		}

		boolean shouldReasonable28DayOfferBeMade = (form.getLocalContext().getPatientElectiveList() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getSubjectTo28DayRule()) && dayBreached28 != null && dayBreached28.isLessThan(form.dteToComeIn().getValue())) || (!GroupReasonableOfferMadeEnumeration.None.equals(form.GroupReasonableOfferMade().getValue()));

		form.lblWasReasonable28OfferMade().setVisible(shouldReasonable28DayOfferBeMade);
		form.GroupReasonableOfferMade().setVisible(shouldReasonable28DayOfferBeMade);
		form.txtWasReasonMandatoryField().setVisible(shouldReasonable28DayOfferBeMade);//WDEV-22648

	}

	private void updateRTTBreachReasonControls( )
	{
		boolean showBreachReasonTCI = form.dteToComeIn().getValue() != null && form.dteToComeIn().getValue().isGreaterOrEqualThan(form.getLocalContext().getCatsReferral().getReferralDetails().getEnd18WW()) && !Boolean.TRUE.equals(form.getLocalContext().getHasReferralTheatreApptBookedWithTci()) && !form.getLocalContext().getIsFirstDefinitiveTreatment(); //WDEV-23025
		boolean notEmergencyTheatre = form.getLocalContext().getPatientElectiveList() != null;

		form.lblExceededReason().setVisible(notEmergencyTheatre && showBreachReasonTCI);
		form.cmbExceededReason().setVisible(notEmergencyTheatre && showBreachReasonTCI);
		form.cmbExceededReason().setRequired(Boolean.TRUE.equals(form.getLocalContext().getIsRttBRMandatory())); 
		form.imbOtherReason().setVisible(notEmergencyTheatre && showBreachReasonTCI);

	}

	@Override
	protected void onBtnBookClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateUI())
		{
			if(form.getLocalContext().getApptInPastMessageBoxId() != null || !apptInThePastValidateNeeded())
			{
				if (form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebookIsNotNull() 
						&& !Boolean.TRUE.equals(form.getLocalContext().getHasReferralTheatreApptBookedWithTci()) 
						&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook().getDate28DayRuleBreachIsNotNull() 
						&& form.dteToComeIn().getValue() != null
						&& form.dteToComeIn().getValue().isGreaterThan(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook().getDate28DayRuleBreach()))
				{	
					engine.open(form.getForms().RefMan.ReasonForBookingPast28DayKPI, new Object[]{TCITheatreAppointmentKPIs.KPI_28DAY});
				}	
				else
				{
					doBooking(null);
				}	
			}			
		}	
	}

	private void doBooking(Boolean reasonableOffer)
	{
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();

		//Sch_Booking
		form.getLocalContext().setSch_Booking(form.getGlobalContext().Scheduling.getSch_BookingTheatre());
		Sch_BookingTheatreVo voSchBooking = form.getLocalContext().getSch_Booking();
		if(voSchBooking == null)
			voSchBooking = new Sch_BookingTheatreVo();

		voSchBooking.setPatient(form.getGlobalContext().Core.getPatientShort());
		voSchBooking.setBookingComments(form.txtComments().getValue());

		//Booking_Appointment
		BookingAppointmentTheatreVo voTheatreAppt = voData.getTheatreApptToRebook();
		if(voTheatreAppt == null)
			voTheatreAppt = new BookingAppointmentTheatreVo();
		else
			voTheatreAppt = domain.getBookingTheatreAppointment(voTheatreAppt);

		voTheatreAppt.setComments(form.txtComments().getValue()); //wdev-22477
		voTheatreAppt.setProcedureDetails(form.getGlobalContext().RefMan.getPELProcedureDetailsForBooking()); //wdev-22477

		voTheatreAppt.setPatient(form.getGlobalContext().Core.getPatientShort());
		voTheatreAppt.setParentChildSlot(voData.getParentChildSlot());
		voTheatreAppt.setCustomProcedureDuration(form.intApptLength().getValue());
		voTheatreAppt.setAppointmentTCITime(form.timTCI().getValue());
		voTheatreAppt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //wdev-18616
		if (voTheatreAppt.getID_Booking_AppointmentIsNotNull() && form.getGlobalContext().RefMan.getReason28DayRuleBreach() != null) //WDEV-19445
		{
			voTheatreAppt.setDay28BreachReason(form.getGlobalContext().RefMan.getReason28DayRuleBreach().getReason());
			voTheatreAppt.setDay28BreachComment(form.getGlobalContext().RefMan.getReason28DayRuleBreach().getComment());
		}
		if(voData.getParentChildSlotIsNotNull())
		{
			voTheatreAppt.setApptStartTime(voData.getParentChildSlot().getStartTime());
			voTheatreAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(voData.getParentChildSlot().getStartTime() , form.intApptLength().getValue()));
			voTheatreAppt.setParentChildSlot(voData.getParentChildSlot());
		}
		if(form.chkErod().getValue() == true)
			voTheatreAppt.setEarliestOfferedDate(form.dteErod().getValue());

		if(voData.getSessionIsNotNull())
		{
			voTheatreAppt.setAppointmentDate(voData.getSession().getSessionDate());
			voTheatreAppt.setSession(voData.getSession());
		}
		//Status and Status History
		populateStatus(voTheatreAppt);

		//TheatreBooking
		TheatreBookingLiteVo voBooking = voTheatreAppt.getTheatreBooking();
		if(voBooking == null)
			voBooking = new TheatreBookingLiteVo();

		voBooking.setConsultant(form.cmbListOwners().getValue());	
		voBooking.setAnaestheticType(form.cmbAnaesType().getValue());

		//primary procedure
		if(voData.getProcedureToDefault() != null)
		{
			if(voData.getProcedureToDefault() instanceof ProcedureLiteVo)
			{
				voBooking.setProcedure((ProcedureLiteVo) voData.getProcedureToDefault());
			}

			voBooking.setProcLaterality(voData.getLaterality());
		}

		//secondary procedure
		if(voData.getSecondaryProcedure() != null)
		{
			if(voData.getSecondaryProcedure() instanceof ProcedureLiteVo)
			{
				voBooking.setSecondaryProcedure((ProcedureLiteVo) voData.getSecondaryProcedure());
			}

			voBooking.setSecondaryProcLaterality(voData.getSecondaryProcedureLaterality());
		}

		voTheatreAppt.setTheatreBooking(voBooking);

		if(form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getJourney() != null)
		{
			voTheatreAppt.setPathwayClock(form.getLocalContext().getCatsReferral().getJourney().getCurrentClock());
		}

		BookingAppointmentTheatreVoCollection voCollAppts = voSchBooking.getAppointments();
		if(voCollAppts == null)
			voCollAppts = new BookingAppointmentTheatreVoCollection();
		else
			voCollAppts.clear();

		voCollAppts.add(voTheatreAppt);		
		voSchBooking.setAppointments(voCollAppts);
		voSchBooking.setPatient(form.getGlobalContext().Core.getPatientShort());

		ReferralERODForBookTheatreVo erod = null;
		Boolean isDiagnostic = false;

		if (Boolean.TRUE.equals(form.chkErod().getValue()))
		{
			isDiagnostic = form.getLocalContext().getPatientElectiveList() != null && ElectiveListReason.DIAGNOSTIC.equals(form.getLocalContext().getPatientElectiveList().getElectiveListReason()) ? true : false;
			erod = createReferralEROD(voTheatreAppt, reasonableOffer, isDiagnostic);
		}

		String[] arrErrors = voSchBooking.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		if(erod != null)
		{
			arrErrors = erod.validate();
			if(arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}
		}

		SessionParentChildSlotRefVoCollection voCollChildSlots = null;
		if(voData.getSessionIsNotNull() && voTheatreAppt.getParentChildSlotIsNotNull())
		{
			
			if(!engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS))
			{
				voCollChildSlots = voData.getSession().calculateChildSlots(voTheatreAppt.getParentChildSlot(), form.intApptLength().getValue(), null);
				
				if(voCollChildSlots == null)
				{
					engine.showMessage("Not enough Slots available to Book into");
					return;
				}
				//WDEV-16530 
				else if (voCollChildSlots != null && !isSessionTimeEnough(voData.getSession(), voTheatreAppt.getParentChildSlot(), form.intApptLength().getValue()))
				{
					engine.showMessage("Not enough Slots available to Book into");
					return;
				}
			}
			else //WDEV-23620
				voCollChildSlots = voData.getSession().calculateChildSlotsForOverbooking(voTheatreAppt.getParentChildSlot(), form.intApptLength().getValue());
		}

		//------------------
		//wdev-13765
		TheatreType theatreType = null;

		if(voData != null && voData.getSession() != null)
		{
			theatreType = voData.getSession().getTheatreType();
		}
		//------------


		PatientElectiveListVo patElectiveListToSave = populatePatElectiveListDataFromScreen(form.getLocalContext().getPatientElectiveList(), voTheatreAppt);

		if (patElectiveListToSave != null)
		{
			String[] patElectiveListErrors = patElectiveListToSave.validate();

			if (patElectiveListErrors != null)
			{
				engine.showErrors(patElectiveListErrors);
				return;
			}
		}

		PendingEmergencyTheatreVo pendingEmergencyTheatre = populatePendingEmergencyTheatre(form.getLocalContext().getPendingEmergencyTheatre(), voTheatreAppt);

		if (pendingEmergencyTheatre != null)
		{
			String[] pendingEmergencyTheatreErrors = pendingEmergencyTheatre.validate();

			if (pendingEmergencyTheatreErrors != null)
			{
				engine.showErrors(pendingEmergencyTheatreErrors);
				return;
			}
		}
		
		int count = 0;
		
		while(count < NUMBER_OF_RETRIES)
		{
    		try
    		{			
    			saveBookingTheatre(voData, voSchBooking, erod, voCollChildSlots,theatreType, patElectiveListToSave, pendingEmergencyTheatre);//WDEV-23337
    			return;
    		}
    		catch (StaleObjectException e)
    		{
    			if(e.getStaleObject() instanceof SessionTheatreProceduresRemanining)
    			{
    				e.printStackTrace();
    				count++;
    			}
    			else
    			{
    				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    				engine.close(DialogResult.OK);
    				return;
    			}
    		}
    		catch (DomainInterfaceException e)
    		{
    			e.printStackTrace();
    			engine.showMessage(e.getMessage());
    			return;
    		}
    		catch (LockAcquisitionException e) //http://jira/browse/WDEV-23500
    		{
    			e.printStackTrace();
				count++;
    		}
    		// Any other exception should fall through to the framework and cause a crash
    		
//    		catch (Exception e)
//    		{
//    			if(e instanceof LockAcquisitionException)
//    			{
//    				e.printStackTrace();
//    				count++;
//    			}
//    			else
//    			{
//    				return;
//    			}
//    		}
		}
		
		engine.showMessage("The booking was unsuccessful as other users were using the same Session, please try again.");
	}
	//WDEV-23337
	private void saveBookingTheatre(BookTheatreSlotDialogVo voData,
									Sch_BookingTheatreVo voSchBooking,
									ReferralERODForBookTheatreVo erod,
									SessionParentChildSlotRefVoCollection voCollChildSlots,
									TheatreType theatreType,
									PatientElectiveListVo patElectiveListToSave,
									PendingEmergencyTheatreVo pendingEmergencyTheatre)
			throws DomainInterfaceException, StaleObjectException 
	{
		if(voSchBooking != null && voSchBooking.getAppointments() != null)
		{
			for(int i=0; i<voSchBooking.getAppointments().size(); i++)
			{
				if(voSchBooking.getAppointments().get(i) != null && voSchBooking.getAppointments().get(i).getSession() != null && voSchBooking.getAppointments().get(i).getSession().getTheatreProceduresRemaining() != null)
				{
					SessionTheatreProceduresRemainingVo theatreRemaining = domain.getSessionTheatreProcedureRemaining(voSchBooking.getAppointments().get(i).getSession().getTheatreProceduresRemaining());
					voSchBooking.getAppointments().get(i).getSession().setTheatreProceduresRemaining(theatreRemaining);
				}
			}
		}
		
		voSchBooking = domain.saveTheatreBooking(voSchBooking, form.getGlobalContext().RefMan.getCatsReferral(), voCollChildSlots, voData.getParentChildSlot(),theatreType, erod, patElectiveListToSave, pendingEmergencyTheatre, form.getLocalContext().getPreviousEarliestDateOffered());   //wdev-13765 //WDEV-18084

		//WDEV-20064
		if (patElectiveListToSave!=null && patElectiveListToSave.getTCIDetails() != null && patElectiveListToSave.getTCIDetails().getTCIHospital()!=null) //WDEV-20064 //WDEV-20338
		{
			LocationLiteVo caseNoteLocation=getCaseNoteLocAssociatedWithHospital(patElectiveListToSave.getElectiveList(), getParentHospitalLocation(form.cmbWard().getValue()));

			//WDEV-21951
			if (caseNoteLocation == null && patElectiveListToSave.getTCIDetails().getTCIWard() != null && Boolean.TRUE.equals(patElectiveListToSave.getTCIDetails().getTCIWard().getCaseNoteFolderLocation()))
			{
				caseNoteLocation = patElectiveListToSave.getTCIDetails().getTCIWard();
			}

			domain.createCaseNoteRequests(voSchBooking.getTciId(), caseNoteLocation);
		}
		if(!saveICP(voSchBooking))
			return;

		//WDEV-8295		
		form.getGlobalContext().Scheduling.setAppointmentIds(getApptIds(voSchBooking));	
		form.getGlobalContext().RefMan.setReferralEROD(null); //WDEV-18459
		form.getLocalContext().setRTT28DayKPIReasonConfirmed(null);
		form.getLocalContext().setRTTDialogKPIReasonConfirmed(null);
		engine.open(form.getForms().Scheduling.PrintAppointment);
	}

	private PendingEmergencyTheatreVo populatePendingEmergencyTheatre(PendingEmergencyTheatreVo pendingEmergencyTheatre, BookingAppointmentTheatreVo voTheatreAppt)
	{
		if (pendingEmergencyTheatre == null)
			return null;

		if (form.cmbHospital().getVisible())
		{
			pendingEmergencyTheatre.setExpectedHospital(form.cmbHospital().getValue());
		}

		if (form.cmbWard().getVisible())
		{
			pendingEmergencyTheatre.setExpectedWard(form.cmbWard().getValue());
		}

		if (form.dtimExpected().isVisible())
		{
			pendingEmergencyTheatre.setExpectedDateTime(form.dtimExpected().getValue());
		}

		pendingEmergencyTheatre.setTheatreAppointmentBooked(voTheatreAppt);
		pendingEmergencyTheatre.setCurrentStatus(PendingEmergencyTheatreStatus.THEATRE_SLOT_BOOKED);

		return pendingEmergencyTheatre;
	}

	//WDEV-20064
	private LocationLiteVo getCaseNoteLocAssociatedWithHospital(ElectiveListConfigurationVo electiveList, LocationLiteVo tciHospital)
	{
		if (electiveList==null || electiveList.getListLocations()==null || tciHospital==null)
			return null;

		for (int i=0;i<electiveList.getListLocations().size();i++)
		{
			if (tciHospital.equals(electiveList.getListLocations().get(i).getListLocation()))
			{
				return electiveList.getListLocations().get(i).getCaseNoteFolderLocation();
			}
		}

		return null;
	}

	private boolean isSessionTimeEnough(SessionTheatreVo session,SessionParentChildSlotVo parentChildSlot, Integer value) 
	{
		if (session == null || parentChildSlot == null || value == null)
			return false;

		ExclusionTimesVoCollection exclusionTime = session.getExclusionTimes();
		int exTime = 0;

		if (exclusionTime != null && exclusionTime.size() > 0)
			exTime = getExclusionDuration(exclusionTime, parentChildSlot);

		int sessionAvailableMinutes = 0;

		if (session.getEndTmIsNotNull() && parentChildSlot.getStartTimeIsNotNull())
		{
			sessionAvailableMinutes = session.getEndTm().getTotalMinutes() - parentChildSlot.getStartTime().getTotalMinutes();
		}

		int remainingTime = sessionAvailableMinutes - exTime - value;

		if (remainingTime >= 0)
			return true;

		return false;
	}

	private int getExclusionDuration(ExclusionTimesVoCollection exclusionTime,SessionParentChildSlotVo parentChildSlot)
	{
		int exTime = 0;

		for (int i = 0; i < exclusionTime.size(); i++)
		{
			if (Boolean.TRUE.equals(exclusionTime.get(i).getIsActive()) && exclusionTime.get(i).getEndTime() != null && exclusionTime.get(i).getStartTime() != null
					&& exclusionTime.get(i).getStartTime().isGreaterOrEqualThan(parentChildSlot.getStartTime()))
				exTime += (exclusionTime.get(i).getEndTime().getTotalMinutes() - exclusionTime.get(i).getStartTime().getTotalMinutes());
		}

		return exTime;
	}

	private String checkReasonableDate()
	{
		String warnings = "";
		int numberOfDates = 0;

		if(form.dteErod().getValue() != null && form.dteErod().getValue().isLessThan(new Date().addDay(DAY21)))
		{
			warnings += "'Earliest Date Offered' is less than " + DAY21 + " days";
			numberOfDates++;
		}

		if(form.dteEROD2().getValue() != null && form.dteEROD2().getValue().isLessThan(new Date().addDay(DAY21)))
		{
			warnings += (warnings.length() > 0 ? "\n" : "") + "'Second Date Offered' is less than " + DAY21 + " days";
			numberOfDates++;
		}

		if(warnings.length() > 0)
		{
			warnings += "\nDid the patient confirm " + (numberOfDates == 2 ? "these dates" : "this date") + "?";
		}

		return warnings.length() > 0 ? warnings : null;
	}

	//WDEV-18084 //WDEV-19348
	private PatientElectiveListVo populatePatElectiveListDataFromScreen(PatientElectiveListVo patientElectiveListVo, BookingAppointmentTheatreVo voTheatreAppt)
	{
		if (patientElectiveListVo == null)
			return null;

		patientElectiveListVo=(PatientElectiveListVo) patientElectiveListVo.clone();

		//WDEV-18396
		if ( patientElectiveListVo!=null && patientElectiveListVo.getElectiveListStatus()!=null && patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()!=null && WaitingListStatus.SUSPENDED.equals(patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()))
		{
			for (int i=0;patientElectiveListVo.getSuspensionsIsNotNull() && patientElectiveListVo.getSuspensions().size()>0 && i<patientElectiveListVo.getSuspensions().size();i++)
			{
				if (patientElectiveListVo.getSuspensions().get(i)!=null && patientElectiveListVo.getSuspensions().get(i).getEndDate()==null)
				{
					patientElectiveListVo.getSuspensions().get(i).setEndDate(new Date());
				}
			}
		}

		if (patientElectiveListVo.getElectiveListStatus() == null || WaitingListStatus.REQUIRES_TCI.equals(patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()) || WaitingListStatus.SUSPENDED.equals(patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()) || (WaitingListStatus.CREATED.equals(patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()) && form.dteToComeIn().getValue() != null))
		{
			ElectiveListStatusVo status = populateElectiveListStatus(WaitingListStatus.TCI_GIVEN);
			patientElectiveListVo.setElectiveListStatus(status);

			if(patientElectiveListVo.getElectiveListStatusHistory() == null)
				patientElectiveListVo.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

			patientElectiveListVo.getElectiveListStatusHistory().add(status);
		}

		patientElectiveListVo.setPatient(form.getGlobalContext().Core.getPatientShort());
		patientElectiveListVo.setReferral(form.getGlobalContext().RefMan.getCatsReferral());

		patientElectiveListVo.setEpisodeOfCare(form.getLocalContext().getCatsReferral().getCareContext().getEpisodeOfCare());

		//patientElectiveListVo.setConsultant(domain.getHCPMin((HcpRefVo) form.cmbListOwners().getValue()));	

		if (patientElectiveListVo.getDateOnList()==null) //WDEV-22846
		{
			patientElectiveListVo.setDateOnList(new Date());
		}

		patientElectiveListVo.setOperativeProcedureStatus(true);

		PatientElectiveListElectiveTCIVo tci = populatePatientElectiveListTCI(patientElectiveListVo, voTheatreAppt);

		boolean isNewTCI = tci != null && tci.getID_TCIForPatientElectiveList() == null;

		if(isNewTCI)
		{
			if(Boolean.TRUE.equals(patientElectiveListVo.getSubjectTo28DayRule()))
			{
				Date rule28DayPeriodStart = patientElectiveListVo.getRule28DayPeriodStart();
				Date day28Breached = null;

				if(rule28DayPeriodStart != null)
				{
					rule28DayPeriodStart = (Date) rule28DayPeriodStart.clone();
					day28Breached = rule28DayPeriodStart.addDay(DAY28);

					if(form.dteToComeIn().getValue() != null && form.dteToComeIn().getValue().isLessOrEqualThan(day28Breached) && offerWasAccepted())
					{
						patientElectiveListVo.setRule28DayStatus(Rule28DayStatus.OFFER_ACCEPTED);
						tci.setRule28DayStatus(Rule28DayStatus.OFFER_ACCEPTED);
					}

					if(form.dteToComeIn().getValue() != null && form.dteToComeIn().getValue().isGreaterThan(day28Breached) && offerWasAccepted())
					{
						patientElectiveListVo.setSubjectTo28DayRule(false);
						patientElectiveListVo.setRule28DayStatus(Rule28DayStatus.BREACHED);
						patientElectiveListVo.setRule28DayPeriodStart(null);
						tci.setRule28DayStatus(Rule28DayStatus.BREACHED);
						tci.setRule28DayPeriodStart(null);
					}

					if(GroupReasonableOfferMadeEnumeration.rdoYes.equals(form.GroupReasonableOfferMade().getValue()))
					{
						patientElectiveListVo.setSubjectTo28DayRule(false);
						patientElectiveListVo.setRule28DayStatus(Rule28DayStatus.REASONABLE_OFFER_DECLINED);
						patientElectiveListVo.setRule28DayPeriodStart(null);
						tci.setRule28DayStatus(Rule28DayStatus.REASONABLE_OFFER_DECLINED);
						tci.setRule28DayPeriodStart(null);
					}
				}
			}

			if(GroupReasonableOfferMadeEnumeration.rdoYes.equals(form.GroupReasonableOfferMade().getValue()))
			{
				PatientElectiveListElectiveTCIVo getLasTTCIFromHistory = getLastTCI(patientElectiveListVo);

				if(getLasTTCIFromHistory != null)
				{
					getLasTTCIFromHistory.setDayTCIDate28Offered(form.dteTCIOfferedDate().getValue());
					getLasTTCIFromHistory.setDate28OfOffer(form.dteDateOfOffer().getValue());
					getLasTTCIFromHistory.setReasonDeclined28(form.cmbReasonDeclined().getValue());
				}
			}
		}

		patientElectiveListVo.setTCIDetails(tci);

		if (patientElectiveListVo.getTCIDetails() != null && (patientElectiveListVo.getTCIDetails().getAppointment()==null || (patientElectiveListVo.getTCIDetails().getAppointment()!=null && Status_Reason.CANCELLED.equals(patientElectiveListVo.getTCIDetails().getAppointment().getApptStatus()))))//WDEV-18490
		{
			patientElectiveListVo.getTCIDetails().setAppointment(voTheatreAppt);
		}

		return patientElectiveListVo;
	}

	private PatientElectiveListElectiveTCIVo getLastTCI(PatientElectiveListVo patientElectiveList)
	{
		if(patientElectiveList == null || patientElectiveList.getTCIHistory() == null || patientElectiveList.getTCIHistory().size() == 0)
			return null;

		PatientElectiveListElectiveTCIVo lastTCI = patientElectiveList.getTCIHistory().get(0);

		for(int i = 1; i<patientElectiveList.getTCIHistory().size(); i++)
		{
			if(patientElectiveList.getTCIHistory().get(i) == null)
				continue;

			if(lastTCI.getSystemInformation() != null && patientElectiveList.getTCIHistory().get(i).getSystemInformation() != null && lastTCI.getSystemInformation().getCreationDateTime().isLessThan(patientElectiveList.getTCIHistory().get(i).getSystemInformation().getCreationDateTime()))
			{
				lastTCI = patientElectiveList.getTCIHistory().get(i);
			}
		}

		return lastTCI;
	}

	private boolean offerWasAccepted()
	{
		if(form.GroupReasonableOfferMade().getValue() == null || GroupReasonableOfferMadeEnumeration.rdoNo.equals(form.GroupReasonableOfferMade().getValue()) || GroupReasonableOfferMadeEnumeration.None.equals(form.GroupReasonableOfferMade().getValue()))
			return true;

		return false;
	}

	//WDEV-18084
	private PatientElectiveListElectiveTCIVo populatePatientElectiveListTCI(PatientElectiveListVo patientElectiveListVo, BookingAppointmentTheatreVo voTheatreAppt)
	{
		PatientElectiveListElectiveTCIVo tciDet = patientElectiveListVo.getTCIDetails();

		if (tciDet == null)
		{
			tciDet = new PatientElectiveListElectiveTCIVo();
			tciDet.setAppointment(voTheatreAppt);
			tciDet.setTCIDate(form.dteToComeIn().getValue());
		}

		if (tciDet.getTCIDate() == null) //WDEV-20814
			tciDet.setTCIDate(form.dteToComeIn().getValue());

		tciDet.setTCITime(form.timTCI().getValue());
		tciDet.setComments(form.txtComments().getValue());
		tciDet.setRTTBreachReason(form.cmbExceededReason().getValue());
		tciDet.setRTTBreachComment(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogDataIsNotNull() ? form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getRTTBreachComments() : null); //WDEV-19445
		tciDet.setSession(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession());
		tciDet.setTCIWard(form.cmbWard().getValue());
		tciDet.setTCIHospital(form.cmbHospital().getValue());
		tciDet.setTCIConsultant((HcpLiteVo) form.cmbListOwners().getValue());
		tciDet.setIsActive(true);

		tciDet.setDateTCIOffered(form.dteDateOfOffer().getValue());
		tciDet.setTCIOfferMethod(form.cmbTCIOfferedMethod().getValue());

		tciDet.setWasReasonable28dayOfferMade(getReasonable28dayOfferMadeValueFromScreen());

		return tciDet;	
	}

	private Boolean getReasonable28dayOfferMadeValueFromScreen()
	{
		if(GroupReasonableOfferMadeEnumeration.rdoNo.equals(form.GroupReasonableOfferMade().getValue()))
			return false;

		if(GroupReasonableOfferMadeEnumeration.rdoYes.equals(form.GroupReasonableOfferMade().getValue()))
			return true;

		return null;
	}

	//WDEV-18656
	private LocationLiteVo getParentHospitalLocation(LocationLiteVo location)
	{
		return domain.getParentHospitalLocation(location);

	}

	//WDEV-18084
	private ElectiveListStatusVo populateElectiveListStatus(WaitingListStatus status)
	{
		ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();

		electiveListStatus.setElectiveListStatus(status); 
		electiveListStatus.setStatusDateTime(new DateTime());

		Object mos = domain.getMosUser();
		if (mos !=null && mos instanceof MemberOfStaffLiteVo)
		{
			electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) mos);
		}
		return electiveListStatus;
	}

	private ReferralERODForBookTheatreVo createReferralEROD(BookingAppointmentTheatreVo voTheatreAppt, Boolean reasonableOffer, Boolean isDiagnostic)
	{
		ReferralERODForBookTheatreVo erod = null;

		if (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getEROD() != null)
		{	
			erod =  domain.getEROD( form.getLocalContext().getPatientElectiveList().getEROD());
		}

		if(form.getLocalContext().getReferralERODForRebook() != null)
		{	
			erod = domain.getEROD(form.getLocalContext().getReferralERODForRebook());
		}

		if(erod == null)
			erod = new ReferralERODForBookTheatreVo();

		erod.setERODDate1(form.dteErod().getValue());
		erod.setERODDate2(form.dteEROD2().getValue());		
		erod.setPatAvailFromDate(form.dtePatAvailFromDate().getValue());
		erod.setERODReason(form.cmbERODReason().getValue());
		erod.setERODReasonComment(form.txtERODReasonComment().getValue());
		erod.setIsExtendedDelay(form.chkExtendedDelay().getValue());
		erod.setDateOfOffer(form.dteErodDateOfOffer().getValue());

		if (isDiagnostic)
			erod.setERODType(ERODType.DIAGNOSTIC);
		else
			erod.setERODType(ERODType.ELECTIVE);

		erod.setAppointment(voTheatreAppt);
		erod.setReasonableOffer(reasonableOffer);
		erod.setIsActive(true);

		return erod;
	}

	public java.util.ArrayList<Integer> getApptIds(Sch_BookingTheatreVo voBooking)
	{
		if(voBooking.getAppointments() == null || voBooking.getAppointments().size() == 0)
			return null;

		java.util.ArrayList<Integer> ids = new java.util.ArrayList<Integer>();
		for(int i=0;i<voBooking.getAppointments().size();i++)
			ids.add(voBooking.getAppointments().get(i).getID_Booking_Appointment());

		return ids;
	}

	private boolean saveICP(Sch_BookingTheatreVo voBooking)
	{
		//if no CareContext we cant saveICP
		if(form.getLocalContext().getReferralCareContext() == null)
			return false;

		PatientICPFullVo voICP = domain.getPatientICP(form.getLocalContext().getReferralCareContext());

		if  (voICP != null)
		{
			Booking_AppointmentRefVoCollection voApptsColl = voICP.getAppointments();
			if (voApptsColl == null)
				voApptsColl = new Booking_AppointmentRefVoCollection();

			BookingAppointmentTheatreVoCollection voCollBookAppointments = voBooking.getAppointments();

			for (int i = 0; i < voCollBookAppointments.size(); i++)
				voApptsColl.add(voCollBookAppointments.get(i));

			voICP.setAppointments(voApptsColl);

			String[] strErr = voICP.validate();
			if (strErr != null)
			{
				engine.showErrors(strErr);
				return false;
			}

			try 
			{
				domain.savePatientICP(voICP);
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				form.setMode(FormMode.VIEW);
				return false;
			}
		}

		return true;
	}


	private void populateStatus(BookingAppointmentTheatreVo voTheatreAppt)
	{
		voTheatreAppt.setApptStatus(Status_Reason.BOOKED);

		voTheatreAppt.setCurrentStatusRecord(new Appointment_StatusVo());
		voTheatreAppt.getCurrentStatusRecord().setApptDate(voTheatreAppt.getAppointmentDate());
		voTheatreAppt.getCurrentStatusRecord().setApptTime(voTheatreAppt.getApptStartTime());
		voTheatreAppt.getCurrentStatusRecord().setEarliestOfferedDate(form.dteErod().getValue());
		voTheatreAppt.getCurrentStatusRecord().setStatus(Status_Reason.BOOKED);
		voTheatreAppt.getCurrentStatusRecord().setStatusChangeDateTime(new DateTime());
		voTheatreAppt.getCurrentStatusRecord().setStatusReason(Status_Reason.BOOKED);

		if(voTheatreAppt.getApptStatusHistory() == null)
			voTheatreAppt.setApptStatusHistory(new Appointment_StatusVoCollection());

		voTheatreAppt.getApptStatusHistory().add(voTheatreAppt.getCurrentStatusRecord());
	}

	private boolean apptInThePastValidateNeeded()
	{
		boolean isValidationNeeded = false;
		if(ConfigFlag.UI.DISPLAY_WARNING_MESSAGE_IF_BOOKING_IN_PAST.getValue())
		{
			if(isApptInthePast())
			{
				form.getLocalContext().setApptInPastMessageBoxId(engine.showMessage("The selected date of the appointment is in the past. Do you wish to continue to book the appointment", "Booking Historical Appointment?", MessageButtons.YESNO));
				isValidationNeeded = true;
			}
		}

		return isValidationNeeded;
	}

	private boolean isApptInthePast()
	{
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		voData.getSession().getSessionDate();

		if(voData.getSessionIsNotNull() && voData.getSession().getSessionDateIsNotNull())
		{
			if(voData.getSession().getSessionDate().isLessThan(new Date()))
				return true;
		}

		return false;
	}

	private boolean validateUI()
	{
		List<String> errors = new ArrayList<String>(); 

		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();

		Date dateOfLastAdmission = null;

		if(form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart() != null)
		{
			dateOfLastAdmission = (Date) form.getLocalContext().getPatientElectiveList().getRule28DayPeriodStart().clone();
		}

		Date dateOnList = form.getLocalContext().getPatientElectiveList() != null ? form.getLocalContext().getPatientElectiveList().getDateOnList() : null;

		if(form.intApptLength().getValue() == null)
			errors.add("'Appointment Length' is mandatory");

		if(form.cmbAnaesType().getVisible() && form.cmbAnaesType().isEnabled() && form.cmbAnaesType().getValue() == null)
			errors.add("'Anaesthetic Type' is mandatory");

		if(form.cmbListOwners().getVisible() && form.cmbListOwners().isEnabled() && form.cmbListOwners().getValue() == null)
			errors.add("'Consultant' is mandatory");

		if(form.timTCI().isVisible() && form.timTCI().isEnabled() && form.timTCI().getValue() == null)
			errors.add("'TCI Time' is mandatory");

		if(form.dteToComeIn().isVisible())
		{
			if (form.dteToComeIn().getValue() == null && form.dteToComeIn().isEnabled())
			{
				errors.add("'TCI Date' is mandatory");
			}

			if (form.dteToComeIn().getValue() != null && form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getDateOnList() != null && form.dteToComeIn().getValue().isLessThan(form.getLocalContext().getPatientElectiveList().getDateOnList()))
			{
				errors.add("'TCI Date' cannot be earlier than " + form.getLocalContext().getPatientElectiveList().getDateOnList());
			}

			if (form.dteToComeIn().getValue() != null && form.timTCI().getValue() != null)
			{
				DateTime tciDateTime = new DateTime(form.dteToComeIn().getValue(), form.timTCI().getValue());

				Date appointmentDate = voData != null && voData.getSession() != null ? voData.getSession().getSessionDate() : null;
				Time appointmentTime = voData.getParentChildSlot() != null ? voData.getParentChildSlot().getStartTime() : null;

				DateTime appointmentDateTime = new DateTime(appointmentDate, appointmentTime);

				if (tciDateTime.isGreaterOrEqualThan(appointmentDateTime))
				{
					errors.add("'TCI Date/Time' must be earlier than Appointment Date/Time: " + appointmentDateTime);
				}

			}
		}

		if (form.cmbWard().getVisible() && form.cmbWard().isEnabled() && form.cmbWard().getValue() == null) 
			errors.add(form.cmbHospital().isEnabled() ? "'Expected Ward' is mandatory": "'Ward' is mandatory");

		if (form.cmbExceededReason().getVisible() && form.cmbExceededReason().isEnabled() && !(form.cmbExceededReason().getValue() != null  ||  Boolean.FALSE.equals(form.getLocalContext().getIsRttBRMandatory())))
			errors.add("'RTT Breach Reason' is mandatory");

		if (form.dteDateOfOffer().isVisible() && form.dteDateOfOffer().isEnabled())
		{
			if (form.dteDateOfOffer().getValue() == null)
				errors.add("'Date of Offer' is mandatory");
			else 
			{

				if (dateOnList != null && form.dteDateOfOffer().getValue().isLessThan(dateOnList))
				{
					errors.add("'Date of Offer' cannot be earlier than " + dateOnList );
				}

				if (form.dteToComeIn().getValue() != null && form.dteDateOfOffer().getValue().isGreaterThan(form.dteToComeIn().getValue()))
				{
					errors.add("'Date of Offer' must be earlier than TCI date");
				}
			}
		}

		if (form.lblWasReasonable28OfferMade().isVisible() && GroupReasonableOfferMadeEnumeration.None.equals(form.GroupReasonableOfferMade().getValue()))
		{
			errors.add("'Was reasonable 28 day offer made?' is mandatory");
		}

		if (form.dteTCIOfferedDate().isVisible() && form.dteTCIOfferedDate().isEnabled())
		{
			if (form.dteTCIOfferedDate().getValue() == null)
			{
				errors.add("'TCI Date Offered' is mandatory");
			}
			else if(dateOfLastAdmission != null && form.dteTCIOfferedDate().getValue().isGreaterThan(dateOfLastAdmission.addDay(DAY28)))
			{
				errors.add("A 28 day offer must be made no more than 28 days after the last admission date.");
			}
		}

		if (form.dteDateOfOffer().isVisible() && form.dteDateOfOffer().isEnabled() )
		{

			if(form.dteDateOfOffer().getValue() != null && form.dteTCIOfferedDate().getValue() != null)
			{
				Date tciDateOffered = (Date) form.dteTCIOfferedDate().getValue().clone();

				if(form.dteDateOfOffer().getValue().isGreaterThan(tciDateOffered.addDay(-DAY21)))
				{
					errors.add("A reasonable offer must be made 21 days or more before the 'TCI Date Offered'.");
				}
			}

		}

		if (form.cmbReasonDeclined().getVisible() && form.cmbReasonDeclined().isEnabled() && form.cmbReasonDeclined().getValue() == null)
		{
			errors.add("'Reason Declined' is mandatory");
		}

		if (form.cmbTCIOfferedMethod().getVisible() && form.cmbTCIOfferedMethod().isEnabled() && form.cmbTCIOfferedMethod().getValue() == null)
		{
			errors.add("'TCI Offered Method' is mandatory");
		}

		if(form.dteErod().isEnabled() && form.dteErod().getValue() == null)
		{
			errors.add("'Earliest Date Offered' is mandatory");
		}

		if(form.dteErod().isEnabled() && form.dteToComeIn().getValue() != null &&  form.dteErod().getValue() != null && form.dteErod().getValue().isGreaterOrEqualThan(form.dteToComeIn().getValue()))
		{
			errors.add("'Earliest Date Offered' must be earlier than 'TCI Date'.");
		}

		if(form.dteErod().isEnabled() && form.dteErod().getValue() != null && dateOnList != null && form.dteErod().getValue().isLessThan(dateOnList))
		{
			errors.add("'Earliest Date Offered' must be later than 'Date on List'.");
		}

		if(form.dteEROD2().isRequired() && form.dteEROD2().isEnabled() &&  form.dteEROD2().getValue() == null)
		{
			errors.add("'Second Date Offered' is mandatory");
		}

		if(form.dteEROD2().isVisible() && form.dteEROD2().isEnabled() &&  form.dteEROD2().getValue() != null &&  form.dteErod().getValue() != null && form.dteEROD2().getValue().isLessOrEqualThan(form.dteErod().getValue()))
		{
			errors.add("'Second Date Offered' must be later than 'Earliest Date Offered'.");
		}

		if(form.dteEROD2().isVisible() && form.dteEROD2().isEnabled() &&  form.dteEROD2().getValue() != null && form.dteToComeIn().getValue() != null && form.dteEROD2().getValue().isGreaterOrEqualThan(form.dteToComeIn().getValue()))
		{
			errors.add("'Second Date Offered' must be earlier than 'TCI Date'.");
		}

		if(form.dtePatAvailFromDate().isEnabled() && form.dtePatAvailFromDate().getValue() == null)
		{
			errors.add("'Patient Available from Date' is mandatory");
		}

		if(form.dtePatAvailFromDate().isEnabled() && form.dtePatAvailFromDate().getValue() != null && form.dteEROD2().getValue() != null  && form.dtePatAvailFromDate().getValue().isLessOrEqualThan(form.dteEROD2().getValue()))
		{
			errors.add("'Patient Available from Date' must be later than 'Second Date Offered'.");
		}

		if(form.dtePatAvailFromDate().isEnabled() &&  form.dtePatAvailFromDate().getValue() != null && form.dteToComeIn().getValue() != null && form.dtePatAvailFromDate().getValue().isGreaterOrEqualThan(form.dteToComeIn().getValue()))
		{
			errors.add("'Patient Available from Date' must be earlier than 'TCI Date'.");
		}

		if(form.cmbERODReason().isEnabled() && form.cmbERODReason().getValue() == null)
		{
			errors.add("'EROD Reason' is mandatory");
		}

		if(form.dteErodDateOfOffer().isEnabled() && form.dteErodDateOfOffer().getValue() == null)
		{
			errors.add("EROD 'Date of Offer' is mandatory");
		}

		if(form.dteErodDateOfOffer().isEnabled() &&  form.dteErodDateOfOffer().getValue() != null && form.dteToComeIn().getValue() != null && form.dteErodDateOfOffer().getValue().isGreaterOrEqualThan(form.dteToComeIn().getValue()))
		{
			errors.add("EROD 'Date of Offer' must be earlier than TCI Date");
		}

		if(form.dteErodDateOfOffer().isEnabled() && form.dteErodDateOfOffer().getValue() != null)
		{
			if (dateOnList != null && form.dteErodDateOfOffer().getValue().isLessThan(dateOnList))
			{
				errors.add("EROD 'Date of Offer' cannot be earlier than " + dateOnList);
			}

			if (form.dteErod().getValue() != null)
			{
				Date earlisetDateOffered = (Date) form.dteErod().getValue().clone();

				if(form.dteErodDateOfOffer().getValue().isGreaterThan(earlisetDateOffered.addDay(-DAY21)))
				{
					errors.add("A reasonable offer must be made 21 days or more before the 'Earliest Date Offered'.");
				}
			}
		}

		if (form.cmbHospital().getVisible() && form.cmbHospital().isEnabled() && form.cmbHospital().getValue() == null)
		{
			errors.add("'Expected Hospital' is mandatory");
		}

		if (form.dtimExpected().isVisible() && form.dtimExpected().isEnabled() && form.dtimExpected().getValue() == null)
		{
			errors.add("'Expected Date Time' is mandatory");
		}


		ProcedureLiteVo procedure = null;

		if (form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getProcedureToDefault() != null  && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getProcedureToDefault() instanceof ProcedureLiteVo)
		{
			procedure = (ProcedureLiteVo) form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getProcedureToDefault();
		}

		//WDEV-13229
		String message = allowBooking(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession(), procedure);

		if(message != null)
			errors.add(message);

		String[] arrErrors = errors.size() > 0 ? errors.toArray(new String[0]) : null;	
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		return true;
	}

	//WDEV-13229
	private String allowBooking(SessionTheatreVo session, ProcedureLiteVo voProcedure)
	{
		//if we have an overbooking right we disregard all the checks
		if(engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS))
			return null;

		/*
		if(session != null && voProcedure != null)
		{
			if(session.getTheatreProceduresRemainingIsNotNull())
			{
				//if the procedure is limited and the number of procedures left is 0
				for(TheatreProcedureLiteVo voTheatreProc : session.getTheatreProceduresRemaining().getProcedureDetails())
				{
					if(voTheatreProc.getProcedure().equals(voProcedure))
					{
						if(voTheatreProc.getIsLimitedIsNotNull() && voTheatreProc.getIsLimited() && voTheatreProc.getNumberOfProceduresLeftIsNotNull() && voTheatreProc.getNumberOfProceduresLeft() == 0)
							return "Limit has been reached for this procedure.";
					}
				}
			}
		}
		 */

		return null;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onChkErodValueChanged() throws PresentationLogicException
	{
		if (!form.chkErod().getValue())	
		{
			form.dteErod().setValue(null);
			form.dteEROD2().setValue(null);
			form.cmbERODReason().setValue(null);
			form.txtERODReasonComment().setValue(null); 
			form.dtePatAvailFromDate().setValue(null);		
			form.dteErodDateOfOffer().setValue(null);
			form.chkExtendedDelay().setValue(null);
		}

		updateControlState();
	}
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getApptInPastMessageBoxIdIsNotNull())
		{
			if(form.getLocalContext().getApptInPastMessageBoxId().equals(messageBoxId))
			{
				if(result.equals(DialogResult.YES))
				{
					boolean requires28DayBreachReason = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebookIsNotNull() 
					&& !Boolean.TRUE.equals(form.getLocalContext().getHasReferralTheatreApptBookedWithTci()) 
					&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook().getDate28DayRuleBreachIsNotNull() 
					&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook().getDay28BreachReason() == null
					&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook().getDay28BreachComment() == null
					&&  form.dteToComeIn().getValue() != null
					&&	form.dteToComeIn().getValue().isGreaterThan(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook().getDate28DayRuleBreach());
					if (requires28DayBreachReason)
					{
						engine.open(form.getForms().RefMan.ReasonForBookingPast28DayKPI, new Object[]{TCITheatreAppointmentKPIs.KPI_28DAY});
					}

					else
					{	
						doBooking(null);
					}
				}
				else
				{
					form.getLocalContext().setApptInPastMessageBoxId(null);
				}
			}
		}

		if(form.getLocalContext().getReasonableDateMessageBoxId() != null && form.getLocalContext().getReasonableDateMessageBoxId() == messageBoxId)
		{
			Boolean reasonableOffer = null;
			if(DialogResult.YES.equals(result))
			{
				reasonableOffer = true;
			}
			else if(DialogResult.NO.equals(result))
			{
				if( ConfigFlag.DOM.EROD_SAVE_ONLY_REASONABLE_OFFERS.getValue() == true )	//wdev-19200
				{
					form.chkErod().setValue(null);											//on booking the EROD will not be saved
					form.dteErod().setValue(null);
					form.dteEROD2().setValue(null);
					form.cmbERODReason().setValue(null);
					form.dtePatAvailFromDate().setValue(null);
					form.txtERODReasonComment().setValue(null);
				}


				reasonableOffer = false;
			}

			doBooking(reasonableOffer);	

			form.getLocalContext().setReasonableDateMessageBoxId(null);
		}

		//WDEV-18396
		if (form.getLocalContext().getConfirmCreateNewPatientElectiveListMessageBoxIDIsNotNull() && form.getLocalContext().getConfirmCreateNewPatientElectiveListMessageBoxID().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			clearElectiveListControls();
			form.getLocalContext().setPatientElectiveList(null);
			form.getLocalContext().setHasReferralTheatreApptBookedWithTci(null);
			updateControlState();

		}
	}

	//WDEV-18396
	private void clearElectiveListControls()
	{
		form.timTCI().setValue(null);
		form.dteToComeIn().setValue(null);
		form.cmbWard().setValue(null);
		form.cmbExceededReason().setValue(null);
		form.imbOtherReason().setTooltip("Enter Other Reason");

	}

	/**
	 * 
	 */

	/*
	private void qmbProcedureValueChanged()
	{
		if(form.qmbProcedure().getValue() == null)
			return;

		Time tciTime = null;

		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		if(voData != null &&  voData.getParentChildSlotIsNotNull() && voData.getParentChildSlot().getStartTimeIsNotNull())
		{
			tciTime = (Time) voData.getParentChildSlot().getStartTime().clone();
			if((form.qmbProcedure().getValue()).getTCILagTimeIsNotNull()) //WDEV-20386
				tciTime.addMinutes(-(form.qmbProcedure().getValue()).getTCILagTime()); //WDEV-20386
		}

		form.timTCI().setValue(tciTime);

		//WDEV-18212
		if (form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook() == null)
		{
			form.intApptLength().setValue((form.qmbProcedure().getValue()).getDurationInMins()); //WDEV-20386
		}

		//WDEV-18084 //WDEV-19479
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective())
		{	
			PatientElectiveListVoCollection pElRecords = getPatientElectiveListRecord(voData);
			PatientElectiveListVo selectedPatientElectiveList = null;

			if (pElRecords != null && pElRecords.size() == 1)
			{
				selectedPatientElectiveList = pElRecords.get(0);

				if  (selectedPatientElectiveList != null && (selectedPatientElectiveList.getCanBeUsed() == null || Boolean.TRUE.equals(selectedPatientElectiveList.getCanBeUsed())))
				{
					form.getLocalContext().setPatientElectiveList(selectedPatientElectiveList);
					form.getGlobalContext().RefMan.setSelectedWaitingListConfig(selectedPatientElectiveList.getElectiveList());
					populatePatientElectiveListFromData(form.getLocalContext().getPatientElectiveList());
				}
				else if(selectedPatientElectiveList != null && Boolean.FALSE.equals(selectedPatientElectiveList.getCanBeUsed()))
				{
					form.getLocalContext().setPatientElectiveListIsNotMandatory(true);
				}
			}			

			else
			{
				engine.open(form.getForms().RefMan.SelectElectiveListConfiguration, new Object[] {voData != null ? voData.getSession() : null, form.qmbProcedure().getValue(),voData != null && voData.getSession()!= null && voData.getSession().getListOwners() != null ? getHCPId(voData.getSession().getListOwners()) : null}); //WDEV-20386
			}	

		}
	}
	 */

	//WDEV-19479
	private PatientElectiveListVoCollection getPatientElectiveListRecord(BookTheatreSlotDialogVo voData)
	{
		if (voData == null || !ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			return null;

		PatientElectiveListVo selectedPatElectiveList = null;
		PatientElectiveListVoCollection patElectiveListColl = new PatientElectiveListVoCollection();

		if 	(form.getGlobalContext().RefMan.getPatientElectiveListRefIsNotNull())
		{
			selectedPatElectiveList = domain.getPatientElectiveListByRefId(form.getGlobalContext().RefMan.getPatientElectiveListRef());
			if (selectedPatElectiveList != null)
				patElectiveListColl.add(selectedPatElectiveList);

		}
		/*
		else if  (form.getLocalContext().getPatientElectiveList()== null &&  voData.getSessionIsNotNull() && voData.getSession().getServiceIsNotNull() && form.qmbProcedure().getValue()!=null) //WDEV-18396 //WDEV-20386
		{
			patElectiveListColl = domain.getPatientElectiveList(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().RefMan.getCatsReferral(),voData.getSession()!=null ? voData.getSession().getService() : null , form.qmbProcedure().getValue(),voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()) : null, form.getLocalContext().getCatsReferral(),true); //WDEV-20386

		}
		 */
		return patElectiveListColl;
	}
	//WDEV-18084
	private String getHCPId(Session_ListOwnerVoCollection listOwners)
	{
		StringBuffer idList=new StringBuffer();

		for (int i=0;i<listOwners.size();i++)
		{
			idList.append(listOwners.get(i).getHcp().getID_Hcp()+",");

		}

		if (idList!=null && idList.length()>0)
		{
			idList.deleteCharAt(idList.length()-1);
			idList.append(")");
			idList.insert(0, "(");
		}

		return idList.toString();
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV=18084
		if (formName.equals(form.getForms().RefMan.SelectElectiveListConfiguration))
		{
			if (result.equals(DialogResult.OK))
			{
				if (form.getGlobalContext().RefMan.getSelectedWaitingListConfigIsNotNull())
				{
					//WDEV-18396
					if (form.getLocalContext().getPatientElectiveListIsNotNull())
					{
						form.getLocalContext().setConfirmCreateNewPatientElectiveListMessageBoxID(engine.showMessage("Please confirm adding " + form.getGlobalContext().Core.getPatientShort().getName().toString() + " to " + form.getGlobalContext().RefMan.getSelectedWaitingListConfig().getWaitingListName(), "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION, MessageDefaultButton.BUTTON1));
					}
					else
					{	
						form.getLocalContext().setElectiveListConfigurationWasSelectedFromDialog(true);
					}					
				}
				else if (form.getGlobalContext().RefMan.getSelectedPatientElectiveListIsNotNull())
				{

					form.getLocalContext().setPatientElectiveList(form.getGlobalContext().RefMan.getSelectedPatientElectiveList());
					form.getGlobalContext().RefMan.setSelectedWaitingListConfig(form.getGlobalContext().RefMan.getSelectedPatientElectiveList().getElectiveList());
					form.getLocalContext().setElectiveListConfigurationWasSelectedFromDialog(false);
					populatePatientElectiveListFromData(form.getLocalContext().getPatientElectiveList());

				}

			}
			form.getLocalContext().setHasReferralTheatreApptBookedWithTci(form.getGlobalContext().RefMan.getSelectedPatientElectiveListIsNotNull() ?  hasPatientElectiveListTciBreached(form.getGlobalContext().RefMan.getSelectedPatientElectiveList()) : hasPatientElectiveListTciBreached(form.getLocalContext().getPatientElectiveList()));
			updateControlState();			
		}
		//WDEV-19445
		else if (formName.equals(form.getForms().RefMan.ReasonForBookingPast28DayKPI)) 
		{	
			if (DialogResult.OK.equals(result))
			{				
				BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
				boolean requires28DayBreachReason = voData.getTheatreApptToRebookIsNotNull() 
				&& !Boolean.TRUE.equals(form.getLocalContext().getHasReferralTheatreApptBookedWithTci()) 
				&&	voData.getTheatreApptToRebook().getDate28DayRuleBreachIsNotNull() 
				&&  voData.getSessionIsNotNull()
				&&  voData.getSession().getSessionDate() != null
				&&	voData.getSession().getSessionDate().isGreaterThan(voData.getTheatreApptToRebook().getDate28DayRuleBreach())
				&&  !Boolean.TRUE.equals(form.getLocalContext().getRTT28DayKPIReasonConfirmed());				
				if (voData.getTheatreApptToRebookIsNotNull())
				{
					if (form.getGlobalContext().RefMan.getReason28DayRuleBreach() != null)
					{
						requires28DayBreachReason = false;

						form.getLocalContext().setRTT28DayKPIReasonConfirmed(true);
					}

				}
				if (form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach() != null)
				{

					voData.setRTTBreachReason(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getReason());
					voData.setRTTBreachComments(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment());

					form.cmbExceededReason().setValue(voData.getRTTBreachReason());
					form.imbOtherReason().setTooltip(voData.getRTTBreachCommentsIsNotNull() ? "Other RTT Breach Reason: <b>" + voData.getRTTBreachComments() + "</b>" : "Enter Other Reason"); //WDEV-19445

					form.getLocalContext().setIsRttBRMandatory(!(voData != null 
							&& Boolean.TRUE.equals(voData.getRTTBreachCommentsIsNotNull())
							&& voData.getRTTBreachComments().length() > 0)
							&& form.getLocalContext().getCatsReferral() != null 
							&& form.getLocalContext().getCatsReferral().getReferralDetails() != null 
							&& form.getLocalContext().getCatsReferral().getReferralDetails().getEnd18WW() != null); //WDEV-22724
					updateRTTBreachReasonControls();

					form.getLocalContext().setRTTDialogKPIReasonConfirmed(true);

				}					
				form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);

				if (Boolean.TRUE.equals(form.getLocalContext().getRTT28DayKPIReasonConfirmed()) && !requires28DayBreachReason && form.getGlobalContext().RefMan.getReason28DayRuleBreach() != null)
					doBooking(null);

			}
			else if (DialogResult.CANCEL.equals(result) && form.getLocalContext().getRTTDialogKPIReasonConfirmed() == null)
				engine.close(result);	
		}
		else if (formName.equals(form.getForms().Scheduling.PrintAppointment))
		{	
			engine.close(DialogResult.OK);
		}

	}


	private boolean hasPatientElectiveListTciBreached(PatientElectiveListVo patientElectiveList)
	{		
		PatientElectiveListElectiveTCIVo currentTCi = patientElectiveList != null ? patientElectiveList.getTCIDetails() : null;
		if (patientElectiveList != null)
		{	
			if ((patientElectiveList.getTCIHistory() == null || patientElectiveList.getTCIHistory().size() == 0 || isNoTCIBreached(patientElectiveList.getTCIHistory()))
					&&	(patientElectiveList.getTCIDetails() == null || 	patientElectiveList.getTCIDetails().getID_TCIForPatientElectiveList() == null || (currentTCi != null && patientElectiveList.getTCIDetails().equals(currentTCi))))
				return true;	
		}
		return false;
	}
	private boolean isNoTCIBreached(PatientElectiveListElectiveTCIVoCollection tciHistory)
	{
		for (int i=0;i<tciHistory.size();i++)
		{
			if (tciHistory.get(i) == null)
				continue;
			if (tciHistory.get(i).getRTTBreachCommentIsNotNull() || tciHistory.get(i).getRTTBreachReasonIsNotNull())
				return false;
		}
		return true;
	}	

	private void populatePatientElectiveListFromData(PatientElectiveListVo patientElectiveList) 
	{
		if (patientElectiveList==null)
			return;

		if (patientElectiveList.getTCIDetails()!=null && form.cmbWard().getValues().contains(patientElectiveList.getTCIDetails().getTCIWard()))
		{
			form.cmbWard().setValue(patientElectiveList.getTCIDetails().getTCIWard());
		}
		else if(patientElectiveList.getTCIDetails()!=null && patientElectiveList.getTCIDetails().getTCIWard() != null)
		{
			form.cmbWard().newRow(patientElectiveList.getTCIDetails().getTCIWard(), patientElectiveList.getTCIDetails().getTCIWard().getName());
			form.cmbWard().setValue(patientElectiveList.getTCIDetails().getTCIWard()); 
		}

		HcpLiteVo hcpLiteVo=patientElectiveList.getConsultant() != null ? domain.getHCPLiteVo(patientElectiveList.getConsultant()): null;

		if (form.cmbListOwners().getValues().contains(hcpLiteVo))
		{
			form.cmbListOwners().setValue(hcpLiteVo);
		}
		else if(hcpLiteVo != null)
		{
			form.cmbListOwners().newRow(hcpLiteVo, hcpLiteVo.getIHcpName());
		}

		form.txtComments().setValue(patientElectiveList.getTCIDetails() != null ? patientElectiveList.getTCIDetails().getComments(): null);

		boolean hasRttCommentsReason = patientElectiveList.getTCIDetails() != null && patientElectiveList.getTCIDetails().getRTTBreachCommentIsNotNull();

		form.cmbExceededReason().setValue(patientElectiveList.getTCIDetails() != null ? patientElectiveList.getTCIDetails().getRTTBreachReason(): null);
		form.imbOtherReason().setTooltip(hasRttCommentsReason ? "Other RTT Exceeded Reason: <b>" + patientElectiveList.getTCIDetails().getRTTBreachComment() + "</b>" : "Enter Other Reason");

		//WDEV-22648
		ReasonRTTWeekWaitBreachVo reasonRTTWeekWaitBreach = new ReasonRTTWeekWaitBreachVo();
		reasonRTTWeekWaitBreach.setComment(hasRttCommentsReason ? patientElectiveList.getTCIDetails().getRTTBreachComment(): null);
		reasonRTTWeekWaitBreach.setReason(patientElectiveList.getTCIDetails() != null ? patientElectiveList.getTCIDetails().getRTTBreachReason(): null);
		form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(reasonRTTWeekWaitBreach);
	}

	@Override
	protected void onDteToComeInValueChanged() throws PresentationLogicException
	{
		form.cmbExceededReason().setValue(null);

		if (form.dteToComeIn().getValue() == null || (form.dteToComeIn().getValue().isLessOrEqualThan(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getKPIDate()) && form.cmbExceededReason().getValue() != null))
		{
			form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(null);

			if (form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null)
			{	
				form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().setRTTBreachComments(null);
				form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().setRTTBreachReason(null);
			}

			form.imbOtherReason().setTooltip("Enter Other Reason");
		}

		updateControlState();
	}
	@Override
	protected void onBtnDashboardClick() throws PresentationLogicException
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			if(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue().length() == 0)
			{
				engine.showMessage("PATIENT_DASHBOARD_URL config flag was not set.");
				return;
			}

			//WDEV-22837
			List<UrlParam> params = new ArrayList<UrlParam>();
			if(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull())
				params.add(new UrlParam("PID", form.getGlobalContext().Core.getPatientShort().getID_Patient().toString()));
			engine.openDashboardCloseableOnContextChange(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue(), params);

			/*
			String url = ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() + "&PID=" + form.getGlobalContext().Core.getPatientShort().getID_Patient();
			List<WindowParam> params = new ArrayList<WindowParam>(); 
			params.add(new WindowParam("FullScreen","false")); 
			params.add(new WindowParam("ToolBar","false")); 
			params.add(new WindowParam("StatusBar","false")); 
			params.add(new WindowParam("StatusBar","false")); 
			params.add(new WindowParam("MenuBar","false")); 
			params.add(new WindowParam("AddressBar","false")); 
			params.add(new WindowParam("Resizable","true")); 
			params.add(new WindowParam("Visible","true"));
			params.add(new WindowParam("Width","1440")); 
			params.add(new WindowParam("Height","1000")); 

			engine.openCustomUrlCloseableOnContextChange(url, params, true);
			 */
		}
	}

	@Override
	protected void onBtnResourceClick() throws PresentationLogicException
	{
		if(ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("WARD_DASHBOARD_URL config flag was not set.");
			return;
		}

		//WDEV-22837
		engine.openDashboard(ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue(), null);

		/*
		String url = ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue();
		List<WindowParam> params = new ArrayList<WindowParam>(); 
		params.add(new WindowParam("FullScreen","false")); 
		params.add(new WindowParam("ToolBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("MenuBar","false")); 
		params.add(new WindowParam("AddressBar","false")); 
		params.add(new WindowParam("Resizable","true")); 
		params.add(new WindowParam("Visible","true"));
		params.add(new WindowParam("Width","1440")); 
		params.add(new WindowParam("Height","1000")); 

		engine.openCustomUrl(url, params, true);
		 */
	}
	@Override
	protected void onImbOtherReasonClick() throws PresentationLogicException
	{	
		form.getLocalContext().setRTTDialogKPIReasonConfirmed(false);

		ReasonRTTWeekWaitBreachVo rTTBreachReason = form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreachIsNotNull() ? form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach() : new ReasonRTTWeekWaitBreachVo();
		rTTBreachReason.setReason(form.cmbExceededReason().getValue());
		form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(rTTBreachReason);

		engine.open(form.getForms().RefMan.ReasonForBookingPast28DayKPI, new Object[]{TCITheatreAppointmentKPIs.KPI_RTT});				

	}

	@Override
	protected void onBtnElectiveListDetailsClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setPatientElectiveListRef(form.getLocalContext().getPatientElectiveList());
		engine.open(form.getForms().RefMan.ElectiveListDetails, new Object[] {Boolean.TRUE});

	}

	@Override
	protected void onChkExtendedDelayValueChanged() throws PresentationLogicException
	{
		updateControlState();

	}

	@Override
	protected void onRadioButtonGroupReasonableOfferMadeValueChanged() throws PresentationLogicException
	{
		form.dteTCIOfferedDate().setValue(null);
		form.cmbReasonDeclined().setValue(null);

		updateControlState();

	}

	@Override
	protected void onDteDateOfOfferValueChanged() throws PresentationLogicException
	{
		updateTCIDetails();

	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		populateWardCombo(form.cmbHospital().getValue());

	}

	@Override
	protected void onBtnPendingEmergencyClick() throws PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setPendingEmergencyTheatre(form.getLocalContext().getPendingEmergencyTheatre());
		engine.open(form.getForms().RefMan.AddEmergencyTheatre, new Object[] {Boolean.FALSE, Boolean.TRUE});
	}
}
