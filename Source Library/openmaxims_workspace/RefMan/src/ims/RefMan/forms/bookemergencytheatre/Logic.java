//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.bookemergencytheatre;

import ims.RefMan.forms.bookemergencytheatre.GenForm.grdTheatreSessionsRow;
import ims.RefMan.forms.bookemergencytheatre.GenForm.grdTheatreSlotsRow;
import ims.RefMan.vo.BookEmergencyTheatreSearchCriteriaVo;
import ims.RefMan.vo.PendingEmergencyTheatreForBookVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.scheduling.vo.BookTheatreSlotDialogVo;
import ims.scheduling.vo.BookingAppointmentTheatreLiteVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.MoveAppointmentDataVo;
import ims.scheduling.vo.PendingEmergencyTheatreRefVo;
import ims.scheduling.vo.SessionEmergencyTheatreVo;
import ims.scheduling.vo.SessionEmergencyTheatreVoCollection;
import ims.scheduling.vo.SessionListOwnerLiteVo;
import ims.scheduling.vo.SessionListOwnerLiteVoCollection;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionParentChildSlotVoCollection;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IGenericItem;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null && args.length > 0 && args[0] != null && args[0] instanceof PendingEmergencyTheatreRefVo)
		{
			form.getLocalContext().setPendingEmergencyTheatre(domain.getPendingEmergencyTheatre((PendingEmergencyTheatreRefVo) args[0]));
		}

		initialise();
		open();
	}

	private void initialise()
	{
		form.dteFrom().setValue(new Date());
		form.dteTo().setValue(new Date());//WDEV-22462
		
		form.cmbTheatreType().removeRow(TheatreType.OP_CASE);

		loadServices();
		loadHospitals();

	}

	private void loadServices()
	{
		form.cmbService().clear();

		ServiceLiteVoCollection voCollServices = domain.listServices();

		if (voCollServices != null)
		{
			for (int i = 0; i < voCollServices.size(); i++)
				form.cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}

	}

	private void loadHospitals()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voCollLoc = domain.listHospitals();

		if (voCollLoc != null)
		{
			for (LocationLiteVo item : voCollLoc)
			{
				form.cmbHospital().newRow(item, item.getName());
			}
		}
	}

	private void open()
	{
		populateSearchCriteria(form.getLocalContext().getPendingEmergencyTheatre());
		updateControlsState();
		
		if (form.getGlobalContext().Scheduling.getTheatreAppointment() != null)
			doSearch();

	}

	private void populateSearchCriteria(PendingEmergencyTheatreForBookVo pendingEmergencyTheatre)
	{

		// new appointment
		if (form.getGlobalContext().Scheduling.getTheatreAppointment() == null)
		{
			PatientShort patient = form.getGlobalContext().Core.getPatientShort();

			if (patient != null && patient.getWard() != null)
			{
				form.cmbHospital().setValue(domain.getHospitalForLocation(patient.getWard()));
			}
			
			if (pendingEmergencyTheatre == null)
				return;

			if (pendingEmergencyTheatre.getPrimaryProcedure() != null)
			{
				form.qmbPrimaryProcedure().newRow(pendingEmergencyTheatre.getPrimaryProcedure(), pendingEmergencyTheatre.getPrimaryProcedure().getProcedureName());
				form.qmbPrimaryProcedure().setValue(pendingEmergencyTheatre.getPrimaryProcedure());

				form.cmbPrimaryLaterality().setValue(pendingEmergencyTheatre.getProcLaterality());
			}

			if (pendingEmergencyTheatre.getSecondaryProcedure() != null)
			{
				form.qmbAdditionalProcedure().newRow(pendingEmergencyTheatre.getSecondaryProcedure(), pendingEmergencyTheatre.getSecondaryProcedure().getProcedureName());
				form.qmbAdditionalProcedure().setValue(pendingEmergencyTheatre.getSecondaryProcedure());

				form.cmbAdditionalLaterality().setValue(pendingEmergencyTheatre.getSecondaryProcLaterality());
			}

			form.cmbTheatreType().setValue(pendingEmergencyTheatre.getTheatreType());
			form.intTimeReq().setValue(pendingEmergencyTheatre.getSurgeryTimeMins());

			if (patient != null && patient.getWard() == null)
			{
				form.cmbHospital().setValue(pendingEmergencyTheatre.getExpectedHospital());
			}
		}
		else // rebooking appointment
		{
			
			//service
			form.cmbService().setValue(form.getGlobalContext().Scheduling.getTheatreService());
			
			//Theatre Type 
			form.cmbTheatreType().setValue(form.getGlobalContext().Scheduling.getTheatreType());		
			
			BookingAppointmentTheatreVo voAppt = form.getGlobalContext().Scheduling.getTheatreAppointment();
			
			//default dates WDEV-22772
			form.dteFrom().setValue(voAppt.getAppointmentDate());
			form.dteTo().setValue(voAppt.getAppointmentDate());
			
			if (voAppt.getTheatreBooking() != null)
			{
				//Procedure duration 
				form.intTimeReq().setValue(voAppt.getCustomProcedureDuration());
				
				//Primary Procedure
				if (voAppt.getTheatreBooking().getProcedure() != null)
				{
					form.qmbPrimaryProcedure().newRow(voAppt.getTheatreBooking().getProcedure(), voAppt.getTheatreBooking().getProcedure().getProcedureName());
					form.qmbPrimaryProcedure().setValue(voAppt.getTheatreBooking().getProcedure());
					
					form.cmbPrimaryLaterality().setValue(voAppt.getTheatreBooking().getProcLaterality());
				}
				
				//Secondary Procedure
				if (voAppt.getTheatreBooking().getSecondaryProcedure() != null)
				{
					form.qmbAdditionalProcedure().newRow(voAppt.getTheatreBooking().getSecondaryProcedure(), voAppt.getTheatreBooking().getSecondaryProcedure().getProcedureName());
					form.qmbAdditionalProcedure().setValue(voAppt.getTheatreBooking().getSecondaryProcedure());
					
					form.cmbAdditionalLaterality().setValue(voAppt.getTheatreBooking().getSecondaryProcLaterality());
				}
			}
		}

	}

	@Override
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().Scheduling.SessionParentChildSlotDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			try
			{
				domain.addSlotToSession(form.grdTheatreSessions().getValue(), form.getGlobalContext().Scheduling.getSessionParentChildSlot());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}

			grdSessionSelectionChanged();

		}
		else if (form.getForms().Scheduling.ModifyMultipleSlotsDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			grdSessionSelectionChanged();
		}
		else if (form.getForms().RefMan.BookTheatreSlotDetailDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			form.getGlobalContext().Scheduling.setTheatreAppointment(null);
			
			//WDEV-22585 WDEV-22962
			engine.close(DialogResult.CANCEL);
			return;
			
			//grdSessionSelectionChanged();
		}
		else if (form.getForms().Scheduling.MoveAppointmentDialog.equals(formName) && DialogResult.OK.equals(result))
		{				
			grdSessionSelectionChanged();
		}
	}

	@Override
	protected void onQmbAdditionalProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		qmbProcedureValueChanged();
	}

	@Override
	protected void onQmbAdditionalProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbAdditionalProcedure().clear();
		form.cmbAdditionalLaterality().setValue(null);

		IGenericItem[] procedures = domain.listProcedures(value);

		if (procedures != null)
		{
			for (int i = 0; i < procedures.length; i++)
			{
				if (procedures[i].getIGenericItemInfoName() != null)
					form.qmbAdditionalProcedure().newRow(procedures[i], procedures[i].getIGenericItemInfoName());
			}

			if (procedures.length == 1)
			{
				form.qmbAdditionalProcedure().setValue(procedures[0]);
				qmbProcedureValueChanged();
			}
			else if (procedures.length > 1)
				form.qmbAdditionalProcedure().showOpened();
		}
	}

	private void qmbProcedureValueChanged()
	{

		form.intTimeReq().setValue(getTimeToDefault());
		updateControlsState();

	}

	private Integer getTimeToDefault()
	{
		ProcedureLiteVo primaryProcedure = form.qmbPrimaryProcedure().getValue() != null ? (ProcedureLiteVo) form.qmbPrimaryProcedure().getValue() : null;
		ProcedureLiteVo secondaryProcedure = form.qmbAdditionalProcedure().getValue() != null ? (ProcedureLiteVo) form.qmbAdditionalProcedure().getValue() : null;

		Integer primaryProcedureDuration = null;
		Integer secondaryProcedureDuration = null;

		if (primaryProcedure != null)
			primaryProcedureDuration = primaryProcedure.getDurationInMins();

		if (secondaryProcedure != null)
			secondaryProcedureDuration = secondaryProcedure.getDurationInMins();

		if (primaryProcedureDuration != null && secondaryProcedureDuration != null)
			return primaryProcedureDuration > secondaryProcedureDuration ? primaryProcedureDuration : secondaryProcedureDuration;
		else if (primaryProcedureDuration != null)
			return primaryProcedureDuration;
		else if (secondaryProcedureDuration != null)
			return secondaryProcedureDuration;

		return null;
	}

	@Override
	protected void onQmbPrimaryProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		qmbProcedureValueChanged();
	}

	@Override
	protected void onQmbPrimaryProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbPrimaryProcedure().clear();
		form.cmbPrimaryLaterality().setValue(null);

		IGenericItem[] procedures = domain.listProcedures(value);

		if (procedures != null)
		{
			for (int i = 0; i < procedures.length; i++)
			{
				if (procedures[i].getIGenericItemInfoName() != null)
					form.qmbPrimaryProcedure().newRow(procedures[i], procedures[i].getIGenericItemInfoName());
			}

			if (procedures.length == 1)
			{
				form.qmbPrimaryProcedure().setValue(procedures[0]);
				qmbProcedureValueChanged();
			}
			else if (procedures.length > 1)
				form.qmbPrimaryProcedure().showOpened();
		}
	}

	@Override
	protected void onCmbTheatreTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbService().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean lateralityForFirstProcedure = form.qmbPrimaryProcedure().getValue() != null && Boolean.TRUE.equals(((ProcedureLiteVo) form.qmbPrimaryProcedure().getValue()).getIsLateralityApplicable());
		boolean lateralityForSecondProcedure = form.qmbAdditionalProcedure().getValue() != null && Boolean.TRUE.equals(((ProcedureLiteVo) form.qmbAdditionalProcedure().getValue()).getIsLateralityApplicable());

		boolean noPETSelected = form.getLocalContext().getPendingEmergencyTheatre() == null;
		boolean petHasSecondProcedure = form.getLocalContext().getPendingEmergencyTheatre() != null && form.getLocalContext().getPendingEmergencyTheatre().getSecondaryProcedure() != null;
		
		boolean enableSearchCriteria = form.getGlobalContext().Scheduling.getTheatreAppointment() == null;

		form.qmbPrimaryProcedure().setEnabled(noPETSelected && enableSearchCriteria);

		form.lblPrimaryLaterality().setVisible(lateralityForFirstProcedure);
		form.cmbPrimaryLaterality().setVisible(lateralityForFirstProcedure);
		form.cmbPrimaryLaterality().setEnabled(noPETSelected && enableSearchCriteria);

		form.lblAdditionalProcedure().setVisible(noPETSelected || petHasSecondProcedure);
		form.qmbAdditionalProcedure().setVisible(noPETSelected || petHasSecondProcedure);
		form.qmbAdditionalProcedure().setEnabled(noPETSelected && enableSearchCriteria);

		form.lblAdditionalLaterality().setVisible(lateralityForSecondProcedure);
		form.cmbAdditionalLaterality().setVisible(lateralityForSecondProcedure);
		form.cmbAdditionalLaterality().setEnabled(noPETSelected && enableSearchCriteria);
		
		//form.cmbTheatreType().setEnabled(enableSearchCriteria);
		//form.intTimeReq().setEnabled(enableSearchCriteria);
		form.imbClear().setEnabled(enableSearchCriteria);

		boolean isNullOrTheatreTypeEmergency = form.cmbTheatreType().getValue() == null || TheatreType.EMERGENCY.equals(form.cmbTheatreType().getValue()) || TheatreType.EMERGENCY_NON_TO.equals(form.cmbTheatreType().getValue());

		form.lblService().setVisible(!isNullOrTheatreTypeEmergency);
		form.cmbService().setVisible(!isNullOrTheatreTypeEmergency);
		//form.cmbService().setEnabled(enableSearchCriteria);

		SessionParentChildSlotVo voSlot = form.grdTheatreSlots().getValue();
		boolean slotAvailable = voSlot != null && voSlot.getAppointment() == null && Status_Reason.SLOTOPENED.equals(voSlot.getStatus());

		form.getContextMenus().Scheduling.getBookTheatreSlotBOOKItem().setVisible(slotAvailable);
		form.getContextMenus().Scheduling.getBookTheatreSlotSUSPENDItem().setVisible(slotAvailable);
		form.getContextMenus().Scheduling.getBookTheatreSlotRELEASEItem().setVisible(voSlot != null && Status_Reason.SUSPENDED.equals(voSlot.getStatus()));
		form.getContextMenus().Scheduling.getBookTheatreSlotADDItem().setVisible(form.grdTheatreSessions().getValue() != null && engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS));
		form.getContextMenus().Scheduling.getBookTheatreSlotMOVEItem().setVisible(voSlot != null && voSlot.getAppointment() != null && Status_Reason.BOOKED.equals(voSlot.getAppointment().getApptStatus()));

	}

	private void clearScreen()
	{
		clearGrids();

		if (form.qmbPrimaryProcedure().isEnabled())
			form.qmbPrimaryProcedure().clear();

		if (form.cmbPrimaryLaterality().getVisible() && form.cmbPrimaryLaterality().isEnabled())
			form.cmbPrimaryLaterality().setValue(null);

		if (form.qmbAdditionalProcedure().getVisible() && form.qmbAdditionalProcedure().isEnabled())
			form.qmbAdditionalProcedure().clear();

		if (form.cmbAdditionalLaterality().getVisible() && form.cmbAdditionalLaterality().isEnabled())
			form.cmbAdditionalLaterality().setValue(null);

		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbHospital().setValue(null);
		form.cmbTheatreType().setValue(null);
		form.intTimeReq().setValue(null);
		form.cmbService().setValue(null);
		form.txtSessionComments().setValue(null);
		
		form.getLocalContext().setSearchCriteria(null);

	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
	}

	private void doSearch()
	{

		if (!validateSearchCriteria())
		{
			clearGrids();
			updateControlsState();
			return;
		}

		populateSessions(domain.listSessions(getSearchCriteria()));
		updateControlsState();
	}

	private void clearGrids()
	{
		form.grdTheatreSessions().getRows().clear();
		form.grdTheatreSlots().getRows().clear();

	}

	private void populateSessions(SessionEmergencyTheatreVoCollection listSessions)
	{

		clearGrids();

		if (listSessions == null || listSessions.size() == 0)
		{
			engine.showMessage("No records found"); //wdev-21267
			return;
		}

		for (int i = 0; i < listSessions.size(); i++)
		{
			SessionEmergencyTheatreVo session = listSessions.get(i);

			if (session == null)
				continue;

			grdTheatreSessionsRow row = form.grdTheatreSessions().getRows().newRow();

			row.setColDate(session.getSessionDate());

			String consultantDisplayString = getConsultantsListString(session);

			row.setColConsultant(consultantDisplayString);
			row.setCellColConsultantTooltip(consultantDisplayString);

			row.setColListType(session.getListType() != null ? session.getListType().getText() : "");
			row.setCellColListTypeTooltip(session.getListType() != null ? session.getListType().getText() : "");

			row.setColLocation(session.getSchLocation() != null ? session.getSchLocation().getName() : "");
			row.setCellColLocationTooltip(session.getSchLocation() != null ? session.getSchLocation().getName() : "");

			row.setColNoBooked(session.getNoOfAppointments() != null ? session.getNoOfAppointments().toString() : "");
			row.setColTimeRemaining(session.getTheatreProceduresRemaining() != null && session.getTheatreProceduresRemaining().getRemainingTimeInMins() != null ? session.getTheatreProceduresRemaining().formatTimeRemaining() : "");

			row.setValue(session);
		}
	}

	private String getConsultantsListString(SessionEmergencyTheatreVo session)
	{
		if (session == null || session.getListOwners() == null)
			return "";

		String strConsultant = "";

		SessionListOwnerLiteVoCollection collListOwners = session.getListOwners().sort(new ListOwnerNameComparator(SortOrder.ASCENDING));

		for (int i = 0; i < collListOwners.size(); i++)
		{
			SessionListOwnerLiteVo voCons = collListOwners.get(i);

			if (voCons.getHcp() != null)
				strConsultant += strConsultant.length() > 0 ? ", " + voCons.getHcp().toString() : voCons.getHcp().toString();
		}

		return strConsultant;
	}

	private BookEmergencyTheatreSearchCriteriaVo getSearchCriteria()
	{
		BookEmergencyTheatreSearchCriteriaVo searchCriteria = new BookEmergencyTheatreSearchCriteriaVo();

		searchCriteria.setDateFrom(form.dteFrom().getValue());
		searchCriteria.setDateTo(form.dteTo().getValue());
		searchCriteria.setHospital(form.cmbHospital().getValue());
		searchCriteria.setTheatreType(form.cmbTheatreType().getValue());
		searchCriteria.setService(form.cmbService().getValue());
		searchCriteria.setTimeRequired(form.intTimeReq().getValue());
		searchCriteria.setAllowOverBook(engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS));

		searchCriteria.setPrimaryProcedure(form.qmbPrimaryProcedure().getValue());
		searchCriteria.setPrimaryProcedureLaterality(form.cmbPrimaryLaterality().getValue());
		searchCriteria.setSecondaryProcedure(form.qmbAdditionalProcedure().getValue());
		searchCriteria.setSecondaryProcedureLaterality(form.cmbAdditionalLaterality().getValue());
		
		form.getLocalContext().setSearchCriteria(searchCriteria);
		
		return searchCriteria;
	}

	private boolean validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.dteFrom().getValue() == null)
		{
			listOfErrors.add("Date From is mandatory");
		}

		if (form.dteTo().getValue() == null)
		{
			listOfErrors.add("Date To is mandatory");
		}

		if (form.qmbPrimaryProcedure().isEnabled() && form.qmbPrimaryProcedure().getValue() == null)
		{
			listOfErrors.add("Procedure is mandatory");
		}

		if (form.cmbPrimaryLaterality().getVisible() && form.cmbPrimaryLaterality().isEnabled() && form.cmbPrimaryLaterality().getValue() == null)
		{
			listOfErrors.add("Laterality is mandatory");
		}

		if (form.cmbAdditionalLaterality().getVisible() && form.cmbAdditionalLaterality().isEnabled() && form.cmbAdditionalLaterality().getValue() == null)
		{
			listOfErrors.add("Additional Procedure Laterality is mandatory");
		}

		if (form.intTimeReq().getValue() == null)
		{
			listOfErrors.add("Time Required is mandatory");
		}

		if (form.intTimeReq().getValue() != null && form.getLocalContext().getPendingEmergencyTheatre() != null && form.getLocalContext().getPendingEmergencyTheatre().getSurgeryTimeMins() != null && form.intTimeReq().getValue() < form.getLocalContext().getPendingEmergencyTheatre().getSurgeryTimeMins())
		{
			listOfErrors.add("Time Required cannot be less than " + form.getLocalContext().getPendingEmergencyTheatre().getSurgeryTimeMins() + " mins");
		}

		if (form.intTimeReq().getValue() != null && form.getLocalContext().getPendingEmergencyTheatre() == null)
		{
			Integer duration = getTimeToDefault();

			if (duration != null && form.intTimeReq().getValue() < duration)
			{
				listOfErrors.add("Time Required cannot be less than " + duration + " mins");
			}
		}

		String[] uiResults = new String[listOfErrors.size()];
		listOfErrors.toArray(uiResults);

		if (uiResults != null && uiResults.length > 0)
		{
			engine.showErrors(uiResults);
			return false;
		}

		return true;
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onGrdTheatreSlotsSelectionChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onGrdTheatreSessionsSelectionChanged()
	{
		grdSessionSelectionChanged();

	}

	private void grdSessionSelectionChanged()
	{
		form.txtSessionComments().setValue(form.grdTheatreSessions().getValue() != null ? form.grdTheatreSessions().getValue().getSessionComment() : null);
		
		populateSlotsGrid(domain.getSessionSlots(form.grdTheatreSessions().getValue()));
		updateControlsState();

	}

	private void populateSlotsGrid(SessionParentChildSlotVoCollection sessionSlots)
	{
		form.grdTheatreSlots().getRows().clear();

		if (sessionSlots == null || sessionSlots.size() == 0)
			return;

		boolean hasBookingRights = doesRoleHaveBookingRightsForSession(form.grdTheatreSessions().getValue());

		for (int i = 0; i < sessionSlots.size(); i++)
		{
			SessionParentChildSlotVo slot = sessionSlots.get(i);

			if (slot == null)
				continue;

			if (slot.getAppointment() == null && (Status_Reason.BOOKED.equals(slot.getStatus()) || Status_Reason.CLOSED.equals(slot.getStatus())))
				continue;

			grdTheatreSlotsRow row = form.grdTheatreSlots().getRows().newRow();

			if (slot.getAppointment() != null)
			{
				// slot with an appointment
				row.setColStartTime(slot.getAppointment().getApptStartTime());
				row.setColMins(slot.getAppointment().getCustomProcedureDuration() != null ? slot.getAppointment().getCustomProcedureDuration().toString() : "");

				if (slot.getAppointment().getPatient() != null)
				{
					row.setColPatient(slot.getAppointment().getPatient().toString());

					String apptComment = domain.getBookingCommentForAppt(slot.getAppointment());

					row.setTooltipForColPatient(apptComment != null ? slot.getAppointment().getPatient().toString() + "<br>Booking Comments: <b>" + apptComment + "</b>" : slot.getAppointment().getPatient().toString());
				}

				if (slot.getAppointment().getTheatreBooking() != null)
				{
					if (slot.getAppointment().getTheatreBooking().getProcedure() != null)
					{
						row.setColProcedure(slot.getAppointment().getTheatreBooking().getProcedure());
						row.setTooltipForColProcedure(slot.getAppointment().getTheatreBooking().getProcedure().toString());
					}
				}
			}
			else
			{
				// add empty slots
				row.setColStartTime(slot.getStartTime());

				if (Status_Reason.CANCELLED.equals(slot.getStatus()))
					row.setTooltip("Slot Cancelled");
				else if (Status_Reason.BLOCKED.equals(slot.getStatus()))
					row.setTooltip("Slot Blocked");
			}

			// Suspended Slots
			if (Status_Reason.SUSPENDED.equals(slot.getStatus()))
			{
				row.setBackColor(Color.Bisque);
				row.setColPatient("Suspended for: " + (slot.getStatusReason() != null ? slot.getStatusReason().getText() : ""));
			}

			row.setValue(slot);

			// colour overlapping appointments
			grdTheatreSlotsRow previousRow;

			if (form.grdTheatreSlots().getRows().size() > 1)
			{
				previousRow = form.grdTheatreSlots().getRows().get(form.grdTheatreSlots().getRows().size() - 2);

				if (previousRow.getValue() != null && previousRow.getValue().getAppointmentIsNotNull())
				{
					if (previousRow.getValue().getAppointment().getApptEndTimeIsNotNull() && previousRow.getValue().getAppointment().getApptEndTime().isGreaterThan(slot.getStartTime()))
						previousRow.setBackColor(Color.Red);
				}
			}

			row.setSelectable(hasBookingRights);

			if (!hasBookingRights)
				row.setTooltip("Role does not have rights to book in this Session");
		}

		fillGridUntilMidnightWithEmptySlots();
	}

	private void fillGridUntilMidnightWithEmptySlots()
	{
		SessionEmergencyTheatreVo voSession = form.grdTheatreSessions().getValue();

		if (voSession == null)
			return;

		// Get the last appointment end time
		Time sessionEndTm = voSession.getEndTm().copy();

		if (form.grdTheatreSlots().getRows().size() > 0)
		{
			grdTheatreSlotsRow row = form.grdTheatreSlots().getRows().get(form.grdTheatreSlots().getRows().size() - 1);

			if (row.getValue() != null)
			{
				if (row.getValue().getStartTimeIsNotNull() && row.getValue().getDurationIsNotNull())
					sessionEndTm = Booking_AppointmentVo.calculateEndTime(row.getValue().getStartTime(), row.getValue().getDuration());

				if (row.getValue().getAppointmentIsNotNull() && row.getValue().getAppointment().getApptEndTimeIsNotNull())
					sessionEndTm = row.getValue().getAppointment().getApptEndTime();

				// Colour last row red if it is over-booked
				if (row.getValue().getAppointmentIsNotNull())
				{
					if (row.getValue().getAppointment().getApptEndTimeIsNotNull())
					{
						if (row.getValue().getAppointment().getApptEndTime().isGreaterThan(voSession.getEndTm()))
							row.setBackColor(Color.Red);
					}
				}
			}
		}

		if (sessionEndTm != null)
		{
			int fillerDuration = 0;

			if (voSession.getParentChildSlots() != null && voSession.getParentChildSlots().size() > 0)
			{
				if (voSession.getParentChildSlots().get(0).getDurationIsNotNull())
				{
					fillerDuration = voSession.getParentChildSlots().get(0).getDuration();
				}
			}

			if (fillerDuration == 0)
				fillerDuration = 5; // default fill slots to 5 mins

			Time midNight = new Time(23, 59);

			// need to fill this time period with multiple dummy slots of
			// 'fillerDuration' size
			int timeFillRequired = (midNight.getTotalMinutes() + 1) - sessionEndTm.getTotalMinutes();

			Time tmDummySlot = (Time) sessionEndTm.clone();
			while (timeFillRequired > 0)
			{
				tmDummySlot = roundTimeIfRequired(tmDummySlot);

				grdTheatreSlotsRow row = form.grdTheatreSlots().getRows().newRow();
				row.setColStartTime((Time) tmDummySlot.clone());
				row.setBackColor(Color.Bisque);
				row.setSelectable(false);
				timeFillRequired -= fillerDuration;
				tmDummySlot.addMinutes(fillerDuration);
			}
		}

	}

	private Time roundTimeIfRequired(Time tmDummySlot)
	{
		int round = 5;
		int intTime = Integer.parseInt(tmDummySlot.toString(TimeFormat.FLAT4));

		// check for remainder if there is a remainder rounding is required
		if (!(intTime % round == 0))
		{
			double result = Math.round((intTime + 5) / round) * round;
			String prepend = "";

			// WDEV-13221
			// Reversed conditions to correctly prepend
			if (intTime < 1)
				prepend = "0000";
			else if (intTime < 10)
				prepend = "000";
			else if (intTime < 100)
				prepend = "00";
			else if (intTime < 1000)
				prepend = "0";

			int res = (int) result;

			String timeVal = prepend + res;
			timeVal = correctSixtyMinHourIfNeeded(timeVal);

			timeVal = timeVal.substring(0, 2) + ":" + timeVal.substring(2, 4);

			tmDummySlot = new Time(String.valueOf(timeVal));
		}
		return tmDummySlot;
	}

	private String correctSixtyMinHourIfNeeded(String res)
	{
		if (res == null)
			throw new CodingRuntimeException("res cannot be null in method correctSixtyMinHourIfNeeded");

		if (res.length() >= 2)
		{
			String last2Digits = res.substring((res.length() - 2), res.length());
			if (last2Digits.equals("60"))
			{

				last2Digits = "00";
				String first2Digits = res.substring(0, 2);
				int val = Integer.parseInt(first2Digits);
				if (val < 23)
					val += 1;
				else
					val = 0;

				first2Digits = String.valueOf(val);
				if (first2Digits.length() == 1)
					first2Digits = "0" + first2Digits;

				return first2Digits + last2Digits;
			}
		}

		return res;
	}

	private boolean doesRoleHaveBookingRightsForSession(SessionEmergencyTheatreVo voSession)
	{
		Map map = form.getLocalContext().getSessionBookingRights();
		if (map == null)
			map = new HashMap();

		Object entry = map.get(voSession.getID_Sch_Session());

		if (entry == null)
		{
			map.put(voSession.getID_Sch_Session(), domain.hasBookingRights(engine.getLoggedInRole(), voSession));
			entry = map.get(voSession.getID_Sch_Session());
		}

		form.getLocalContext().setSessionBookingRights(map);

		return (Boolean) entry;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.BOOK:

				bookTheatreSlot();
				break;

			case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.ADD:

				form.getGlobalContext().Scheduling.setSessionParentChildSlot(new SessionParentChildSlotVo());
				engine.open(form.getForms().Scheduling.SessionParentChildSlotDialog, "Insert Theatre Slot");
				break;

			case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.SUSPEND:

				setSuspendReleaseSlotGC();
				engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[] { Status_Reason.SUSPENDED }, "Suspend");
				break;

			case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.RELEASE:

				setSuspendReleaseSlotGC();
				engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[] { Status_Reason.SLOTOPENED }, "Release");
				break;

			case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.MOVE:
				
				moveAppointment();
				break;
		}

	}

	private void moveAppointment()
	{
		
		form.getGlobalContext().Scheduling.setMoveAppointmentDialogData(new MoveAppointmentDataVo());
		form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().setFromSlot(form.grdTheatreSlots().getValue());
		
		BookingAppointmentTheatreLiteVo appointment = form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getFromSlot() != null ? form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getFromSlot().getAppointment():null;
		BookingAppointmentTheatreLiteVo updatedAppointment = domain.geTheatreAppointment(appointment);
		
		if(updatedAppointment != null)
		{
			if(updatedAppointment.getVersion_Booking_Appointment() != appointment.getVersion_Booking_Appointment() )
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				grdSessionSelectionChanged();
				return;
					
			}
		}
			
		engine.open(form.getForms().Scheduling.MoveAppointmentDialog, new Object[]{Boolean.TRUE});
		
	}

	private void setSuspendReleaseSlotGC()
	{
		BookTheatreSlotDialogVo voData = new BookTheatreSlotDialogVo();

		voData.setParentChildSlot(form.grdTheatreSlots().getValue());
		voData.setSession(domain.getSession(form.grdTheatreSessions().getValue()));

		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);
	}

	private void bookTheatreSlot()
	{
		BookTheatreSlotDialogVo voData = new BookTheatreSlotDialogVo();

		BookEmergencyTheatreSearchCriteriaVo searchCriteria = form.getLocalContext().getSearchCriteria();
		
		voData.setAppointmentDuration(searchCriteria != null ? searchCriteria.getTimeRequired() : null);
		voData.setParentChildSlot(form.grdTheatreSlots().getValue());
		voData.setSession(domain.getSession(form.grdTheatreSessions().getValue()));

		voData.setTheatreApptToRebook(form.getGlobalContext().Scheduling.getTheatreAppointment());
		
		//WDEV-23113 when re-booking an appt make sure that the time required is updated
		if (voData.getTheatreApptToRebook() != null && searchCriteria != null && searchCriteria.getTimeRequired() != null)
		{
			voData.getTheatreApptToRebook().setCustomProcedureDuration(searchCriteria.getTimeRequired());
		}

		voData.setProcedureToDefault(searchCriteria != null ? searchCriteria.getPrimaryProcedure() : null);
		voData.setLaterality(searchCriteria != null ? searchCriteria.getPrimaryProcedureLaterality() : null);

		voData.setSecondaryProcedure(searchCriteria != null ? searchCriteria.getSecondaryProcedure() : null);
		voData.setSecondaryProcedureLaterality(searchCriteria != null ? searchCriteria.getSecondaryProcedureLaterality() : null);

		voData.setPendingEmergencyTheatre(form.getLocalContext().getPendingEmergencyTheatre());

		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);

		engine.open(form.getForms().RefMan.BookTheatreSlotDetailDialog, new Object[] { domain.getCareContextForReferral(form.getGlobalContext().RefMan.getCatsReferral()) });

	}
}

class ListOwnerNameComparator implements Comparator<Object>
{
	private int order = 1;

	public ListOwnerNameComparator()
	{
		order = 1;
	}

	public ListOwnerNameComparator(SortOrder order)
	{
		this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
	}

	public int compare(Object o1, Object o2)
	{
		{
			SessionListOwnerLiteVo o1Vo = (SessionListOwnerLiteVo) o1;
			SessionListOwnerLiteVo o2Vo = (SessionListOwnerLiteVo) o2;

			if (o1Vo != null && o1Vo.getHcp() != null && o1Vo.getHcp().getMosIsNotNull() && o1Vo.getHcp().getMos().getName() != null && o1Vo.getHcp().getMos().getName().getSurnameIsNotNull() && o2 != null && o2Vo != null && o2Vo.getHcp() != null && o1Vo.getHcp().getMosIsNotNull() && o2Vo.getHcp().getMos().getName() != null && o2Vo.getHcp().getMos().getName().getSurnameIsNotNull())
				return order * o1Vo.getHcp().getMos().getName().getSurname().compareToIgnoreCase(o2Vo.getHcp().getMos().getName().getSurname());

			if (o1Vo == null || !(o1Vo.getHcp() != null) || !o1Vo.getHcp().getMosIsNotNull())
				return -1 * order;

			if (o2Vo == null || !(o2Vo.getHcp() != null) || !o2Vo.getHcp().getMosIsNotNull())
				return order;
		}

		return 0;
	}
}
