//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.51 build 2475.20711)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.viewassessment;

import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportVoCollection;
import ims.assessment.vo.UserAssessmentShortVoCollection;
import ims.assessment.vo.ViewAssessmentSearchCriteriaVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		//WDEV-19389 
		if (!(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Assessment.getViewAssessmentSearchCriteriaIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().equals(form.getGlobalContext().Assessment.getViewAssessmentSearchCriteria().getCareContext())))
			form.getGlobalContext().Assessment.setViewAssessmentSearchCriteria(null);
		
		if(form.getGlobalContext().Assessment.getViewAssessmentSearchCriteriaIsNotNull())
		{
			setSearchCriteria(form.getGlobalContext().Assessment.getViewAssessmentSearchCriteria());
			onImbViewClick();
		}
		//WDEV-19389 - end
	}
	
	private ViewAssessmentSearchCriteriaVo getSearchCriteria()
	{
		ViewAssessmentSearchCriteriaVo searchCriteria = new ViewAssessmentSearchCriteriaVo();
		
		searchCriteria.setFromDate(form.dteStart().getValue());
		searchCriteria.setToDate(form.dteEnd().getValue());
		searchCriteria.setUserDefinedForm(form.cmbUDF().getValue());	
		searchCriteria.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		return searchCriteria;
	}
	
	
	private void setSearchCriteria(ViewAssessmentSearchCriteriaVo viewAssessmentSearchCriteriaVo) 
	{
		form.dteStart().setValue(viewAssessmentSearchCriteriaVo.getFromDate());
		form.dteEnd().setValue(viewAssessmentSearchCriteriaVo.getToDate());
		form.cmbUDF().setValue(viewAssessmentSearchCriteriaVo.getUserDefinedForm());
	}

	private void open()
	{
		Date now = new Date();
		now.addDay(-7);
		
		form.dteStart().setValue(now);
		form.dteEnd().setValue(new Date());
		
		UserAssessmentShortVoCollection udfList = domain.listUserAssessments(UserDefinedAssessmentType.DPP);
		
		for(int i = 0; i < udfList.size(); i++)
		{
			if(udfList.get(i).getActiveStatusIsNotNull() && udfList.get(i).getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
			{
				form.cmbUDF().newRow(udfList.get(i), udfList.get(i).getName() + " - " + udfList.get(i).getDescription(), Color.Green);
				form.cmbUDF().setValue(udfList.get(i));
			}
			else
				form.cmbUDF().newRow(udfList.get(i), udfList.get(i).getName() + " - " + udfList.get(i).getDescription());
		}
	}

	protected void onImbViewClick() throws PresentationLogicException
	{
		if(form.cmbUDF().getValue() == null)
		{
			engine.showMessage("Please select an User Defined Form !");
			return;
		}
		
		if(form.dteStart().getValue() == null)
		{
			engine.showMessage("Please select a Start date !");
			return;
		}
		
		form.htmFrame().setHTML("<br><br><br><br><br><br><br><br><center><b>Please wait...</b></center>");
		
		form.getGlobalContext().Assessment.setViewAssessmentSearchCriteria(getSearchCriteria()); //WDEV-19389 
		
		viewReport();
	}

	private void viewReport()
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		ReportVoCollection coll = domain.listAssignedReports(new Integer(engine.getFormName().getID()));

		if(coll != null && coll.size() > 0)
		{
			//this form must have a single report asigned to it and single template
			ReportVo rep = coll.get(0);
			
			if(rep.getTemplatesIsNotNull() && rep.getTemplates().size() > 0)
			{
				ReportTemplateVo template = rep.getTemplates().get(0);
				
				String[] obj = null;
				try
				{
					obj = domain.getReportAndTemplate(rep.getID_ReportBo(), template.getID_TemplateBo());				
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage("Error retrieving report template !\r\n" + e.getMessage());
					return;
				}
				
				if(obj == null || obj.length == 0)
				{
					engine.showMessage("I could not get the report and template !");
					return;
				}

				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
				client.addSeed(new SeedValue("UA_ID", form.cmbUDF().getValue().getID_UserAssessment(), Integer.class));
				client.addSeed(new SeedValue("CARE_ID", form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext(), Integer.class));
				
				Time time1 = new Time(0,0,0);
				Time time2 = new Time(23,59,59);
				DateTime dateTime1 = new DateTime(form.dteStart().getValue(), time1);
				DateTime dateTime2 = new DateTime(form.dteEnd().getValue(), time2);
				
				client.addSeed(new SeedValue("DATE1", dateTime1.getJavaDate(), java.util.Date.class));
				client.addSeed(new SeedValue("DATE2", dateTime2.getJavaDate(), java.util.Date.class));
				
				String resultUrl = "";
				try
				{
					resultUrl = client.buildReportAsUrlInlineFrame(obj[0], obj[1], urlReportServer, "PDF", "", 1);
				} 
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating report: " + e1.getMessage());
					return;
				}
				
				form.htmFrame().setHTML(resultUrl);
			}
		}
		else
		{
			form.htmFrame().setHTML("<CENTER><B>No report was assigned to this form. Please go to Admin->Reports and assign a report to this form.</B></CENTER>");
		}
	}

	protected void onDteStartValueChanged() throws PresentationLogicException
	{
		Date date = form.dteStart().getValue();
		
		if(date == null)
			form.dteEnd().setValue(null);
		else
		{
			date = new Date(date); 
			form.dteEnd().setValue(date.addDay(7));
		}
		
		form.htmFrame().setHTML("");
	}

	protected void onCmbUDFValueChanged() throws PresentationLogicException
	{
		form.htmFrame().setHTML("");
	}
}
