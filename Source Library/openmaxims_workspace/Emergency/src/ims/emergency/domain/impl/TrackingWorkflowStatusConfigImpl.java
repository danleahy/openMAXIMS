//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Mara Iroaie using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;

import ims.domain.DomainFactory;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.emergency.configuration.domain.objects.TrackingWorkflowConfig;
import ims.emergency.domain.base.impl.BaseTrackingWorkflowStatusConfigImpl;
import ims.emergency.vo.TrackingStatusWorkflowVoCollection;
import ims.emergency.vo.domain.TrackingStatusWorkflowVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class TrackingWorkflowStatusConfigImpl extends BaseTrackingWorkflowStatusConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TrackingStatusWorkflowVo getTrackingWorkflowStatusRecord(ims.emergency.vo.lookups.TrackingStatus trackingStatus)
	{
		if(trackingStatus == null)
			return null;
		
		DomainFactory factory = getDomainFactory();

		String hsql = "select twc from TrackingWorkflowConfig as twc left join twc.trackingStatus as ts where (ts.id = :idStatus and (twc.isRIE is null  or twc.isRIE = 0)) ";
		 	
		List twsRecords = factory.find(hsql, new String[] {"idStatus"}, new Object[] {trackingStatus.getID()});
		if(twsRecords!= null && twsRecords.size() > 0)
		{
			TrackingStatusWorkflowVoCollection tempCol = TrackingStatusWorkflowVoAssembler.createTrackingStatusWorkflowVoCollectionFromTrackingWorkflowConfig(twsRecords);
			if( tempCol != null && tempCol.size() > 0)
				return tempCol.get(0);
		}
		return null;
	}
	
	public ims.emergency.vo.TrackingStatusWorkflowVo saveTrackingWorkflowStatus(ims.emergency.vo.TrackingStatusWorkflowVo record) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (record == null)
			throw new CodingRuntimeException("Cannot save null AttendanceKPIConfigVo");

		DomainFactory factory = getDomainFactory();
				
		TrackingWorkflowConfig doTrackingStatusWorkflow = TrackingStatusWorkflowVoAssembler.extractTrackingWorkflowConfig(factory, record);

		try
		{
			factory.save(doTrackingStatusWorkflow);
		}
		catch(UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException();
		}

		return TrackingStatusWorkflowVoAssembler.create(doTrackingStatusWorkflow);
	}
}
