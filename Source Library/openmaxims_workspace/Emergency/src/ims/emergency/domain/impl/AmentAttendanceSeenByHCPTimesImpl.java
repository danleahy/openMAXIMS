//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.domain.DomainFactory;
import ims.emergency.domain.base.impl.BaseAmentAttendanceSeenByHCPTimesImpl;
import ims.emergency.domain.objects.ReferralToSpecTeam;
import ims.emergency.domain.objects.SeenByHCP;
import ims.emergency.vo.ReferralToSpecTeamRefVo;
import ims.emergency.vo.ReferralToSpecialtyTeamForEventHistoryVo;
import ims.emergency.vo.SeenByHcpForEventHistoryVo;
import ims.emergency.vo.domain.ReferralToSpecialtyTeamForEventHistoryVoAssembler;
import ims.emergency.vo.domain.SeenByHcpForEventHistoryVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class AmentAttendanceSeenByHCPTimesImpl extends BaseAmentAttendanceSeenByHCPTimesImpl
{
	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.SeenByHcpForEventHistoryVo getSeenBy(ims.emergency.vo.SeenByHCPRefVo seenByRef)
	{
		if(seenByRef == null || seenByRef.getID_SeenByHCP() == null)
			return null;
		
		SeenByHCP doSeenBy = (SeenByHCP) getDomainFactory().getDomainObject(SeenByHCP.class, seenByRef.getID_SeenByHCP());
		
		return SeenByHcpForEventHistoryVoAssembler.create(doSeenBy);
	}

	public void save(SeenByHcpForEventHistoryVo seenBy, ReferralToSpecialtyTeamForEventHistoryVo referralToSpecialty) throws ims.domain.exceptions.StaleObjectException
	{
		if(seenBy != null && !seenBy.isValidated())
			throw new CodingRuntimeException("SeenByHcpForEventHistoryVo is not validated.");
		
		if(referralToSpecialty != null && !referralToSpecialty.isValidated())
			throw new CodingRuntimeException("ReferralToSpecialtyTeamForEventHistoryVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		if(seenBy != null)
		{
			SeenByHCP doSeenBy = SeenByHcpForEventHistoryVoAssembler.extractSeenByHCP(factory, seenBy);
			factory.save(doSeenBy);
		}
		
		if(referralToSpecialty != null)
		{
			ReferralToSpecTeam doReferralToSpecialty = ReferralToSpecialtyTeamForEventHistoryVoAssembler.extractReferralToSpecTeam(factory, referralToSpecialty);
			factory.save(doReferralToSpecialty);
		}
	}

	public ReferralToSpecialtyTeamForEventHistoryVo getReferralToSpecialty(ReferralToSpecTeamRefVo referralToSpecialty)
	{
		if(referralToSpecialty == null || referralToSpecialty.getID_ReferralToSpecTeam() == null)
			return null;
		
		ReferralToSpecTeam doReferral = (ReferralToSpecTeam) getDomainFactory().getDomainObject(ReferralToSpecTeam.class, referralToSpecialty.getID_ReferralToSpecTeam());
		
		return ReferralToSpecialtyTeamForEventHistoryVoAssembler.create(doReferral);
	}
}
