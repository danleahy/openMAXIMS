//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.domain.DomainFactory;
import ims.emergency.domain.base.impl.BaseAmentAttendanceDNWTimesImpl;
import ims.emergency.domain.objects.DNWStatus;
import ims.emergency.vo.domain.DNWStatusForAmendTimesVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class AmentAttendanceDNWTimesImpl extends BaseAmentAttendanceDNWTimesImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.DNWStatusForAmendTimesVo get(ims.emergency.vo.DNWStatusRefVo dnwStatusRef)
	{
		if(dnwStatusRef == null || dnwStatusRef.getID_DNWStatus() == null)
			return null;
		
		DNWStatus doDNW = (DNWStatus) getDomainFactory().getDomainObject(DNWStatus.class, dnwStatusRef.getID_DNWStatus());
		
		return DNWStatusForAmendTimesVoAssembler.create(doDNW);	}

	public ims.emergency.vo.DNWStatusForAmendTimesVo save(ims.emergency.vo.DNWStatusForAmendTimesVo dnwStatus) throws ims.domain.exceptions.StaleObjectException
	{
		if(dnwStatus == null)
			throw new CodingRuntimeException("Cannot save a null DNWStatusForAmendTimesVo.");
	
		if(!dnwStatus.isValidated())
			throw new CodingRuntimeException("DNWStatusForAmendTimesVo is not validated.");
	
		DomainFactory factory = getDomainFactory();
	
		DNWStatus doDNW = DNWStatusForAmendTimesVoAssembler.extractDNWStatus(factory, dnwStatus);
		factory.save(doDNW);
		
		return DNWStatusForAmendTimesVoAssembler.create(doDNW);
	}
}
