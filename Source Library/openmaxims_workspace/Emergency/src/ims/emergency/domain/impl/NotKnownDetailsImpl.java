//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.domain.InterventionsDiagnosisInvestigationsCc;
import ims.emergency.domain.base.impl.BaseNotKnownDetailsImpl;
import ims.emergency.domain.objects.AttendDiagInvTreatStatus;
import ims.emergency.vo.AttendDiagInvTreatStatusVo;
import ims.emergency.vo.domain.AttendDiagInvTreatStatusVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class NotKnownDetailsImpl extends BaseNotKnownDetailsImpl
{
	private static final long serialVersionUID = 1L;

	public AttendDiagInvTreatStatusVo saveAttendDiagInvTreatStatus(AttendDiagInvTreatStatusVo attendDiagInvTreatStatus) throws StaleObjectException
	{
		if(attendDiagInvTreatStatus == null)
			throw new CodingRuntimeException("Cannot save a null AttendDiagInvTreatStatusVo.");
		
		if(!attendDiagInvTreatStatus.isValidated())
			throw new CodingRuntimeException("AttendDiagInvTreatStatusVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		AttendDiagInvTreatStatus doAttendDiagInvTreatStatus = AttendDiagInvTreatStatusVoAssembler.extractAttendDiagInvTreatStatus(factory, attendDiagInvTreatStatus);
		factory.save(doAttendDiagInvTreatStatus);
			
		return AttendDiagInvTreatStatusVoAssembler.create(doAttendDiagInvTreatStatus);
	}

	public AttendDiagInvTreatStatusVo getAttendDiagInvTreatStatus(CareContextRefVo careContextRef)
	{
		InterventionsDiagnosisInvestigationsCc impl=(InterventionsDiagnosisInvestigationsCc) getDomainImpl(InterventionsDiagnosisInvestigationsCcImpl.class);
		return impl.getAttendDiagInvTreatStatus(careContextRef);
	}
}
