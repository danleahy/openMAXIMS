//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.emergency.domain.base.impl.BasePAWSPaediatricAdvancedWarningSystemCCImpl;
import ims.emergency.domain.objects.Triage;
import ims.emergency.vo.domain.TriageForPAWSVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class PAWSPaediatricAdvancedWarningSystemCCImpl extends BasePAWSPaediatricAdvancedWarningSystemCCImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TriageForPAWSVo getPAWSScore(ims.emergency.vo.TriageRefVo triageRefVo)
	{
		if(	triageRefVo == null )
			throw new CodingRuntimeException("TriageRefVo not provided");
		
		DomainFactory factory = getDomainFactory();
		Triage doTriage  =(Triage) factory.getDomainObject(Triage.class, triageRefVo.getID_Triage());
		return TriageForPAWSVoAssembler.create(doTriage);
	}

	public ims.emergency.vo.TriageForPAWSVo savePAWSScore(ims.emergency.vo.TriageForPAWSVo voPAWSToSave) throws ims.domain.exceptions.StaleObjectException
	{
		if (voPAWSToSave == null)
			throw new CodingRuntimeException("Cannot save null voPAWSToSave");

		if (!voPAWSToSave.isValidated())
			throw new DomainRuntimeException("TriageForPAWSVo Not Validated.");

		DomainFactory factory = getDomainFactory();
		Triage domainTriageForPaws = TriageForPAWSVoAssembler.extractTriage(factory, voPAWSToSave);

		factory.save(domainTriageForPaws);

		return TriageForPAWSVoAssembler.create(domainTriageForPaws);
	}

	public ims.emergency.vo.TriageForPAWSVo getPAWSScore(ims.core.admin.vo.CareContextRefVo attendanceRefVo)
	{
		DomainFactory factory = getDomainFactory();
		
		if (attendanceRefVo == null || attendanceRefVo.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get CareContextRefVo on null Id ");
		}
		
		StringBuffer hql = new StringBuffer();
		
		hql.append("select triage from Triage as triage where triage.attendance.id = :careContextID ");
	
		List<?> list = factory.find(hql.toString(), new String[] {"careContextID"}, new Object[] {attendanceRefVo.getID_CareContext()});
			
		if (list!=null && list.size()>0)
			return TriageForPAWSVoAssembler.create((Triage)list.get(0));
		
		return null;
	}
}
