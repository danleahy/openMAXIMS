//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.domain.DomainFactory;
import ims.emergency.domain.InterventionsDiagnosisInvestigationsCc;
import ims.emergency.domain.base.impl.BaseInvestigationAttendenceDetailDialogImpl;
import ims.emergency.domain.objects.AttendDiagInvTreatStatus;
import ims.emergency.domain.objects.InvestigationAttendenceDetail;
import ims.emergency.domain.objects.InvestigationsForAttend;
import ims.emergency.vo.AttendDiagInvTreatStatusVo;
import ims.emergency.vo.InvestigationAttendenceDetailVo;
import ims.emergency.vo.InvestigationAttendenceDetailVoCollection;
import ims.emergency.vo.InvestigationsForAttendVo;
import ims.emergency.vo.domain.AttendDiagInvTreatStatusVoAssembler;
import ims.emergency.vo.domain.InvestigationAttendenceDetailVoAssembler;
import ims.emergency.vo.domain.InvestigationsForAttendVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class InvestigationAttendenceDetailDialogImpl extends BaseInvestigationAttendenceDetailDialogImpl
{
	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.InvestigationAttendenceDetailVo save(ims.emergency.vo.InvestigationAttendenceDetailVo record, InvestigationsForAttendVo investigationsForAttend) throws ims.domain.exceptions.StaleObjectException
	{
		if(record == null)
			throw new CodingRuntimeException("Cannot save a null InvestigationAttendenceDetailVo.");
		
		if(!record.isValidated())
			throw new CodingRuntimeException("InvestigationAttendenceDetailVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		InvestigationAttendenceDetail doRecord = InvestigationAttendenceDetailVoAssembler.extractInvestigationAttendenceDetail(factory, record);
		factory.save(doRecord);
		
		InvestigationAttendenceDetailVo newRecord = InvestigationAttendenceDetailVoAssembler.create(doRecord);
		
		if(investigationsForAttend != null)
		{
			if(record.getID_InvestigationAttendenceDetail() == null)
			{
    			if(investigationsForAttend.getInvestigations() == null)
    			{
    				investigationsForAttend.setInvestigations(new InvestigationAttendenceDetailVoCollection());
    			}
    			
    			investigationsForAttend.getInvestigations().add(newRecord);
    			
    			InvestigationsForAttend doInvestigationsForAttend = InvestigationsForAttendVoAssembler.extractInvestigationsForAttend(factory, investigationsForAttend);
    			factory.save(doInvestigationsForAttend);
			}
		
    		//WDEV-19057
			if(!Boolean.TRUE.equals(record.getAddedDuringCoding()))
			{
        		AttendDiagInvTreatStatusVo attendDiagInvTreatStatus = getAttendDiagInvTreatStatus(investigationsForAttend.getAttendance());
        		if (attendDiagInvTreatStatus != null && (Boolean.TRUE.equals(attendDiagInvTreatStatus.getNoInvestigations()) || Boolean.TRUE.equals(attendDiagInvTreatStatus.getInvestigationNotRecorded())))
        		{
        			attendDiagInvTreatStatus.setNoInvestigations(null);
        			attendDiagInvTreatStatus.setInvestigationNotRecorded(null);
        			
        			AttendDiagInvTreatStatus doAttendDiagInvTreatStatus = AttendDiagInvTreatStatusVoAssembler.extractAttendDiagInvTreatStatus(factory, attendDiagInvTreatStatus);
        			factory.save(doAttendDiagInvTreatStatus);
        		}
			}
		}
			
		return newRecord;
	}

	//WDEV-19057
	private AttendDiagInvTreatStatusVo getAttendDiagInvTreatStatus(CareContextRefVo attendance)
	{
		InterventionsDiagnosisInvestigationsCc impl = (InterventionsDiagnosisInvestigationsCc) getDomainImpl(InterventionsDiagnosisInvestigationsCcImpl.class);
		return impl.getAttendDiagInvTreatStatus(attendance);
	}
}
