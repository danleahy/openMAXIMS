//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;

import ims.core.admin.domain.objects.EmergencyAttendance;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PrivateInsuranceCompanyVoCollection;
import ims.core.vo.domain.PrivateInsuranceCompanyVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.configuration.domain.objects.LocationDepartmentTypes;
import ims.emergency.domain.base.impl.BaseInsuranceDetailsCCImpl;
import ims.emergency.helper.EmergencyHelper;
import ims.emergency.helper.IEmergencyHelper;
import ims.emergency.vo.EmergencyAttendanceNonInsuranceHealthCoverVo;
import ims.emergency.vo.PatientWithNonHealthCoverLiteVo;
import ims.emergency.vo.domain.EmergencyAttendanceNonInsuranceHealthCoverVoAssembler;
import ims.emergency.vo.domain.LocationDepartmentTypesVoAssembler;
import ims.emergency.vo.domain.PatientWithNonHealthCoverLiteVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class InsuranceDetailsCCImpl extends BaseInsuranceDetailsCCImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.EmergencyAttendanceNonInsuranceHealthCoverVo saveRecord(ims.emergency.vo.EmergencyAttendanceNonInsuranceHealthCoverVo record) throws StaleObjectException, UniqueKeyViolationException
	{
		if( record == null )
		{
			throw new CodingRuntimeException("Cannot get EmergencyAttendanceNonInsuranceHealthCoverVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();
		EmergencyAttendance domainEmergencyAttendance = EmergencyAttendanceNonInsuranceHealthCoverVoAssembler.extractEmergencyAttendance(factory, record);
		factory.save(domainEmergencyAttendance);
		return EmergencyAttendanceNonInsuranceHealthCoverVoAssembler.create(domainEmergencyAttendance);
	}

	public ims.emergency.vo.EmergencyAttendanceNonInsuranceHealthCoverVo getEmergencyAttendanceNonInsuranceHealthCoverVo(ims.core.admin.vo.EmergencyAttendanceRefVo attendanceRef)
	{
		if( attendanceRef == null )
			throw new CodingRuntimeException("EmergencyAttendanceRefVo not provided");
		
		DomainFactory factory = getDomainFactory();
		EmergencyAttendance doEmergencyAttendancee = (EmergencyAttendance) factory.getDomainObject(EmergencyAttendance.class, attendanceRef.getID_EmergencyAttendance());
		return EmergencyAttendanceNonInsuranceHealthCoverVoAssembler.create(doEmergencyAttendancee);
	}

	public ims.admin.vo.EDAttendanceControlsConfigVoCollection getEDAttendanceControlsConfig(ims.admin.vo.lookups.EDAttendenceControlType controlType)
	{
		IEmergencyHelper impl = (IEmergencyHelper)getDomainImpl(EmergencyHelper.class);
		return impl.getEDAttendanceControlsConfig(controlType);
	}

	public EmergencyAttendanceNonInsuranceHealthCoverVo getLastEmergencyAttendanceNonInsuranceHealthCover(PatientRefVo patRef)
	{
		if( patRef == null || patRef.getID_Patient() == null)
			return null;
				
		DomainFactory factory = getDomainFactory();
		String query = "select e1_1 from EmergencyAttendance as e1_1 left join e1_1.patient as p1_1 where (p1_1.id = :patientid)	order by e1_1.systemInformation.creationDateTime desc";
		List<?> emergencyAttendance = factory.find(query, new String[] {"patientid"}, new Object[] {patRef.getID_Patient()});
		
		if( emergencyAttendance != null && emergencyAttendance.size() > 0)
		{
			 return EmergencyAttendanceNonInsuranceHealthCoverVoAssembler.create((EmergencyAttendance) emergencyAttendance.get(0));
		}
		
		return null;
	}

	public PrivateInsuranceCompanyVoCollection listPrivateInsuranceCompanyVo()
	{
		DomainFactory factory = getDomainFactory();
		String query = "select p1_1 from PrivateInsuranceCompany as p1_1 where (p1_1.isActive = 1) order by p1_1.upperName asc ";
		List<?> privateInsuranceComp = factory.find(query);
		
		if( privateInsuranceComp != null && privateInsuranceComp.size() > 0)
		{
			 return PrivateInsuranceCompanyVoAssembler.createPrivateInsuranceCompanyVoCollectionFromPrivateInsuranceCompany(privateInsuranceComp);
		}
		
		return null;
	}

	//wdev-19085
	public PatientWithNonHealthCoverLiteVo getPatientWithNonHealthCoverLiteVo(PatientRefVo recordRef)
	{
		if( recordRef == null || recordRef.getID_Patient() == null )
			return null;
		DomainFactory factory = getDomainFactory();
		Patient doPatient = (Patient) factory.getDomainObject(Patient.class, recordRef.getID_Patient());
		return PatientWithNonHealthCoverLiteVoAssembler.create(doPatient);
				
	}

}
