//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.emergencyattendancetimeamendments;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnTimesContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class grdBedRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdBedRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColWardReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColWardReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColWardOpened()
			{
				super.row.showOpened(0);
			}
			public String getColWard()
			{
				return (String)super.row.get(0);
			}
			public void setColWard(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColWardTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColAwaitingDateReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColAwaitingDateReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColAwaitingDateOpened()
			{
				super.row.showOpened(1);
			}
			public String getColAwaitingDate()
			{
				return (String)super.row.get(1);
			}
			public void setColAwaitingDate(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColAwaitingDateTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColAvailableDateReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColAvailableDateReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColAvailableDateOpened()
			{
				super.row.showOpened(2);
			}
			public String getColAvailableDate()
			{
				return (String)super.row.get(2);
			}
			public void setColAvailableDate(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColAvailableDateTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.emergency.vo.BedAvailabilityVo getValue()
			{
				return (ims.emergency.vo.BedAvailabilityVo)super.row.getValue();
			}
			public void setValue(ims.emergency.vo.BedAvailabilityVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdBedRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdBedRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdBedRow get(int index)
			{
				return new grdBedRow(super.collection.get(index));
			}
			public grdBedRow newRow()
			{
				return new grdBedRow(super.collection.newRow());
			}
			public grdBedRow newRow(boolean autoSelect)
			{
				return new grdBedRow(super.collection.newRow(autoSelect));
			}
			public grdBedRow newRowAt(int index)
			{
				return new grdBedRow(super.collection.newRowAt(index));
			}
			public grdBedRow newRowAt(int index, boolean autoSelect)
			{
				return new grdBedRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdBedGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.emergency.vo.BedAvailabilityVoCollection getValues()
			{
				ims.emergency.vo.BedAvailabilityVoCollection listOfValues = new ims.emergency.vo.BedAvailabilityVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.emergency.vo.BedAvailabilityVo getValue()
			{
				return (ims.emergency.vo.BedAvailabilityVo)super.grid.getValue();
			}
			public void setValue(ims.emergency.vo.BedAvailabilityVo value)
			{
				super.grid.setValue(value);
			}
			public grdBedRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdBedRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdBedRowCollection getRows()
			{
				return new grdBedRowCollection(super.grid.getRows());
			}
			public grdBedRow getRowByValue(ims.emergency.vo.BedAvailabilityVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdBedRow(row);
			}
			public void setColWardHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColWardHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColAwaitingDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColAwaitingDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColAvailableDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColAvailableDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		public static class grdTransferRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTransferRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColHospitalReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColHospitalReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColHospitalOpened()
			{
				super.row.showOpened(0);
			}
			public String getColHospital()
			{
				return (String)super.row.get(0);
			}
			public void setColHospital(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColHospitalTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColReferredByReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColReferredByReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColReferredByOpened()
			{
				super.row.showOpened(1);
			}
			public String getColReferredBy()
			{
				return (String)super.row.get(1);
			}
			public void setColReferredBy(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColReferredByTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColReferredDateReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColReferredDateReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColReferredDateOpened()
			{
				super.row.showOpened(2);
			}
			public String getColReferredDate()
			{
				return (String)super.row.get(2);
			}
			public void setColReferredDate(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColReferredDateTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColAcceptedDateReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColAcceptedDateReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColAcceptedDateOpened()
			{
				super.row.showOpened(3);
			}
			public String getColAcceptedDate()
			{
				return (String)super.row.get(3);
			}
			public void setColAcceptedDate(String value)
			{
				super.row.set(3, value);
			}
			public void setCellColAcceptedDateTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public ims.emergency.vo.EDTransferVo getValue()
			{
				return (ims.emergency.vo.EDTransferVo)super.row.getValue();
			}
			public void setValue(ims.emergency.vo.EDTransferVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTransferRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTransferRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTransferRow get(int index)
			{
				return new grdTransferRow(super.collection.get(index));
			}
			public grdTransferRow newRow()
			{
				return new grdTransferRow(super.collection.newRow());
			}
			public grdTransferRow newRow(boolean autoSelect)
			{
				return new grdTransferRow(super.collection.newRow(autoSelect));
			}
			public grdTransferRow newRowAt(int index)
			{
				return new grdTransferRow(super.collection.newRowAt(index));
			}
			public grdTransferRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTransferRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTransferGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.emergency.vo.EDTransferVoCollection getValues()
			{
				ims.emergency.vo.EDTransferVoCollection listOfValues = new ims.emergency.vo.EDTransferVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.emergency.vo.EDTransferVo getValue()
			{
				return (ims.emergency.vo.EDTransferVo)super.grid.getValue();
			}
			public void setValue(ims.emergency.vo.EDTransferVo value)
			{
				super.grid.setValue(value);
			}
			public grdTransferRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTransferRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTransferRowCollection getRows()
			{
				return new grdTransferRowCollection(super.grid.getRows());
			}
			public grdTransferRow getRowByValue(ims.emergency.vo.EDTransferVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTransferRow(row);
			}
			public void setColHospitalHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColHospitalHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColReferredByHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColReferredByHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColReferredDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColReferredDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColAcceptedDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColAcceptedDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
		}
		public static class grdSentToXrayRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdSentToXrayRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColNurseReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColNurseReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColNurseOpened()
			{
				super.row.showOpened(0);
			}
			public String getColNurse()
			{
				return (String)super.row.get(0);
			}
			public void setColNurse(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColNurseTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColSentDateReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColSentDateReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColSentDateOpened()
			{
				super.row.showOpened(1);
			}
			public String getColSentDate()
			{
				return (String)super.row.get(1);
			}
			public void setColSentDate(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColSentDateTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColReturnedDateReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColReturnedDateReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColReturnedDateOpened()
			{
				super.row.showOpened(2);
			}
			public String getColReturnedDate()
			{
				return (String)super.row.get(2);
			}
			public void setColReturnedDate(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColReturnedDateTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.emergency.vo.SentToXrayVo getValue()
			{
				return (ims.emergency.vo.SentToXrayVo)super.row.getValue();
			}
			public void setValue(ims.emergency.vo.SentToXrayVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdSentToXrayRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdSentToXrayRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdSentToXrayRow get(int index)
			{
				return new grdSentToXrayRow(super.collection.get(index));
			}
			public grdSentToXrayRow newRow()
			{
				return new grdSentToXrayRow(super.collection.newRow());
			}
			public grdSentToXrayRow newRow(boolean autoSelect)
			{
				return new grdSentToXrayRow(super.collection.newRow(autoSelect));
			}
			public grdSentToXrayRow newRowAt(int index)
			{
				return new grdSentToXrayRow(super.collection.newRowAt(index));
			}
			public grdSentToXrayRow newRowAt(int index, boolean autoSelect)
			{
				return new grdSentToXrayRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdSentToXrayGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.emergency.vo.SentToXrayVoCollection getValues()
			{
				ims.emergency.vo.SentToXrayVoCollection listOfValues = new ims.emergency.vo.SentToXrayVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.emergency.vo.SentToXrayVo getValue()
			{
				return (ims.emergency.vo.SentToXrayVo)super.grid.getValue();
			}
			public void setValue(ims.emergency.vo.SentToXrayVo value)
			{
				super.grid.setValue(value);
			}
			public grdSentToXrayRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdSentToXrayRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdSentToXrayRowCollection getRows()
			{
				return new grdSentToXrayRowCollection(super.grid.getRows());
			}
			public grdSentToXrayRow getRowByValue(ims.emergency.vo.SentToXrayVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdSentToXrayRow(row);
			}
			public void setColNurseHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColNurseHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColSentDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColSentDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColReturnedDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColReturnedDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		public static class grdDNWRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdDNWRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColDateReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColDateReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColDateOpened()
			{
				super.row.showOpened(0);
			}
			public String getColDate()
			{
				return (String)super.row.get(0);
			}
			public void setColDate(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColDateTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColNumberReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColNumberReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColNumberOpened()
			{
				super.row.showOpened(1);
			}
			public String getColNumber()
			{
				return (String)super.row.get(1);
			}
			public void setColNumber(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColNumberTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColHCPReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColHCPReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColHCPOpened()
			{
				super.row.showOpened(2);
			}
			public String getColHCP()
			{
				return (String)super.row.get(2);
			}
			public void setColHCP(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColHCPTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.emergency.vo.DNWStatusForAmendTimesVo getValue()
			{
				return (ims.emergency.vo.DNWStatusForAmendTimesVo)super.row.getValue();
			}
			public void setValue(ims.emergency.vo.DNWStatusForAmendTimesVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdDNWRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdDNWRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdDNWRow get(int index)
			{
				return new grdDNWRow(super.collection.get(index));
			}
			public grdDNWRow newRow()
			{
				return new grdDNWRow(super.collection.newRow());
			}
			public grdDNWRow newRow(boolean autoSelect)
			{
				return new grdDNWRow(super.collection.newRow(autoSelect));
			}
			public grdDNWRow newRowAt(int index)
			{
				return new grdDNWRow(super.collection.newRowAt(index));
			}
			public grdDNWRow newRowAt(int index, boolean autoSelect)
			{
				return new grdDNWRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdDNWGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.emergency.vo.DNWStatusForAmendTimesVoCollection getValues()
			{
				ims.emergency.vo.DNWStatusForAmendTimesVoCollection listOfValues = new ims.emergency.vo.DNWStatusForAmendTimesVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.emergency.vo.DNWStatusForAmendTimesVo getValue()
			{
				return (ims.emergency.vo.DNWStatusForAmendTimesVo)super.grid.getValue();
			}
			public void setValue(ims.emergency.vo.DNWStatusForAmendTimesVo value)
			{
				super.grid.setValue(value);
			}
			public grdDNWRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdDNWRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdDNWRowCollection getRows()
			{
				return new grdDNWRowCollection(super.grid.getRows());
			}
			public grdDNWRow getRowByValue(ims.emergency.vo.DNWStatusForAmendTimesVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdDNWRow(row);
			}
			public void setColDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColNumberHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColNumberHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColHCPHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColHCPHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		public static class grdCubicleAllocationRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdCubicleAllocationRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColNurseReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColNurseReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColNurseOpened()
			{
				super.row.showOpened(0);
			}
			public String getColNurse()
			{
				return (String)super.row.get(0);
			}
			public void setColNurse(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColNurseTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColAllocatedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColAllocatedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColAllocatedOpened()
			{
				super.row.showOpened(1);
			}
			public String getColAllocated()
			{
				return (String)super.row.get(1);
			}
			public void setColAllocated(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColAllocatedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColCubicleReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColCubicleReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColCubicleOpened()
			{
				super.row.showOpened(2);
			}
			public String getColCubicle()
			{
				return (String)super.row.get(2);
			}
			public void setColCubicle(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColCubicleTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.core.vo.CubicleAllocationForAmendTimesVo getValue()
			{
				return (ims.core.vo.CubicleAllocationForAmendTimesVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.CubicleAllocationForAmendTimesVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdCubicleAllocationRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdCubicleAllocationRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdCubicleAllocationRow get(int index)
			{
				return new grdCubicleAllocationRow(super.collection.get(index));
			}
			public grdCubicleAllocationRow newRow()
			{
				return new grdCubicleAllocationRow(super.collection.newRow());
			}
			public grdCubicleAllocationRow newRow(boolean autoSelect)
			{
				return new grdCubicleAllocationRow(super.collection.newRow(autoSelect));
			}
			public grdCubicleAllocationRow newRowAt(int index)
			{
				return new grdCubicleAllocationRow(super.collection.newRowAt(index));
			}
			public grdCubicleAllocationRow newRowAt(int index, boolean autoSelect)
			{
				return new grdCubicleAllocationRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdCubicleAllocationGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.core.vo.CubicleAllocationForAmendTimesVoCollection getValues()
			{
				ims.core.vo.CubicleAllocationForAmendTimesVoCollection listOfValues = new ims.core.vo.CubicleAllocationForAmendTimesVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.CubicleAllocationForAmendTimesVo getValue()
			{
				return (ims.core.vo.CubicleAllocationForAmendTimesVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.CubicleAllocationForAmendTimesVo value)
			{
				super.grid.setValue(value);
			}
			public grdCubicleAllocationRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdCubicleAllocationRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdCubicleAllocationRowCollection getRows()
			{
				return new grdCubicleAllocationRowCollection(super.grid.getRows());
			}
			public grdCubicleAllocationRow getRowByValue(ims.core.vo.CubicleAllocationForAmendTimesVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdCubicleAllocationRow(row);
			}
			public void setColNurseHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColNurseHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColAllocatedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColAllocatedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColCubicleHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColCubicleHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		public static class grdMovementTimesRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdMovementTimesRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColTrackingAreaReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColTrackingAreaReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColTrackingAreaOpened()
			{
				super.row.showOpened(0);
			}
			public String getColTrackingArea()
			{
				return (String)super.row.get(0);
			}
			public void setColTrackingArea(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColTrackingAreaTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColTimeReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColTimeReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColTimeOpened()
			{
				super.row.showOpened(1);
			}
			public String getColTime()
			{
				return (String)super.row.get(1);
			}
			public void setColTime(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColTimeTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.emergency.vo.TrackingMovementTimesForEventHistoryVo getValue()
			{
				return (ims.emergency.vo.TrackingMovementTimesForEventHistoryVo)super.row.getValue();
			}
			public void setValue(ims.emergency.vo.TrackingMovementTimesForEventHistoryVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdMovementTimesRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdMovementTimesRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdMovementTimesRow get(int index)
			{
				return new grdMovementTimesRow(super.collection.get(index));
			}
			public grdMovementTimesRow newRow()
			{
				return new grdMovementTimesRow(super.collection.newRow());
			}
			public grdMovementTimesRow newRow(boolean autoSelect)
			{
				return new grdMovementTimesRow(super.collection.newRow(autoSelect));
			}
			public grdMovementTimesRow newRowAt(int index)
			{
				return new grdMovementTimesRow(super.collection.newRowAt(index));
			}
			public grdMovementTimesRow newRowAt(int index, boolean autoSelect)
			{
				return new grdMovementTimesRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdMovementTimesGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.emergency.vo.TrackingMovementTimesForEventHistoryVoCollection getValues()
			{
				ims.emergency.vo.TrackingMovementTimesForEventHistoryVoCollection listOfValues = new ims.emergency.vo.TrackingMovementTimesForEventHistoryVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.emergency.vo.TrackingMovementTimesForEventHistoryVo getValue()
			{
				return (ims.emergency.vo.TrackingMovementTimesForEventHistoryVo)super.grid.getValue();
			}
			public void setValue(ims.emergency.vo.TrackingMovementTimesForEventHistoryVo value)
			{
				super.grid.setValue(value);
			}
			public grdMovementTimesRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdMovementTimesRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdMovementTimesRowCollection getRows()
			{
				return new grdMovementTimesRowCollection(super.grid.getRows());
			}
			public grdMovementTimesRow getRowByValue(ims.emergency.vo.TrackingMovementTimesForEventHistoryVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdMovementTimesRow(row);
			}
			public void setColTrackingAreaHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColTrackingAreaHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColTimeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColTimeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdPatientStatusRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdPatientStatusRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(0);
			}
			public String getColStatus()
			{
				return (String)super.row.get(0);
			}
			public void setColStatus(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColTimeReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColTimeReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColTimeOpened()
			{
				super.row.showOpened(1);
			}
			public String getColTime()
			{
				return (String)super.row.get(1);
			}
			public void setColTime(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColTimeTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColTrackingAreaReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColTrackingAreaReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColTrackingAreaOpened()
			{
				super.row.showOpened(2);
			}
			public String getColTrackingArea()
			{
				return (String)super.row.get(2);
			}
			public void setColTrackingArea(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColTrackingAreaTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo getValue()
			{
				return (ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo)super.row.getValue();
			}
			public void setValue(ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdPatientStatusRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdPatientStatusRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdPatientStatusRow get(int index)
			{
				return new grdPatientStatusRow(super.collection.get(index));
			}
			public grdPatientStatusRow newRow()
			{
				return new grdPatientStatusRow(super.collection.newRow());
			}
			public grdPatientStatusRow newRow(boolean autoSelect)
			{
				return new grdPatientStatusRow(super.collection.newRow(autoSelect));
			}
			public grdPatientStatusRow newRowAt(int index)
			{
				return new grdPatientStatusRow(super.collection.newRowAt(index));
			}
			public grdPatientStatusRow newRowAt(int index, boolean autoSelect)
			{
				return new grdPatientStatusRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdPatientStatusGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVoCollection getValues()
			{
				ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVoCollection listOfValues = new ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo getValue()
			{
				return (ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo)super.grid.getValue();
			}
			public void setValue(ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo value)
			{
				super.grid.setValue(value);
			}
			public grdPatientStatusRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdPatientStatusRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdPatientStatusRowCollection getRows()
			{
				return new grdPatientStatusRowCollection(super.grid.getRows());
			}
			public grdPatientStatusRow getRowByValue(ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdPatientStatusRow(row);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColTimeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColTimeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColTrackingAreaHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColTrackingAreaHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		public static class grdSeenHCPRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdSeenHCPRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColNurseReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColNurseReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColNurseOpened()
			{
				super.row.showOpened(0);
			}
			public String getColNurse()
			{
				return (String)super.row.get(0);
			}
			public void setColNurse(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColNurseTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColAllocatedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColAllocatedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColAllocatedOpened()
			{
				super.row.showOpened(1);
			}
			public String getColAllocated()
			{
				return (String)super.row.get(1);
			}
			public void setColAllocated(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColAllocatedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColSeenReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColSeenReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColSeenOpened()
			{
				super.row.showOpened(2);
			}
			public String getColSeen()
			{
				return (String)super.row.get(2);
			}
			public void setColSeen(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColSeenTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColCompletedReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColCompletedReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColCompletedOpened()
			{
				super.row.showOpened(3);
			}
			public String getColCompleted()
			{
				return (String)super.row.get(3);
			}
			public void setColCompleted(String value)
			{
				super.row.set(3, value);
			}
			public void setCellColCompletedTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public ims.vo.ValueObject getValue()
			{
				return (ims.vo.ValueObject)super.row.getValue();
			}
			public void setValue(ims.vo.ValueObject value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdSeenHCPRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdSeenHCPRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdSeenHCPRow get(int index)
			{
				return new grdSeenHCPRow(super.collection.get(index));
			}
			public grdSeenHCPRow newRow()
			{
				return new grdSeenHCPRow(super.collection.newRow());
			}
			public grdSeenHCPRow newRow(boolean autoSelect)
			{
				return new grdSeenHCPRow(super.collection.newRow(autoSelect));
			}
			public grdSeenHCPRow newRowAt(int index)
			{
				return new grdSeenHCPRow(super.collection.newRowAt(index));
			}
			public grdSeenHCPRow newRowAt(int index, boolean autoSelect)
			{
				return new grdSeenHCPRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdSeenHCPGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.vo.ValueObject[] getValues()
			{
				ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.vo.ValueObject getValue()
			{
				return (ims.vo.ValueObject)super.grid.getValue();
			}
			public void setValue(ims.vo.ValueObject value)
			{
				super.grid.setValue(value);
			}
			public grdSeenHCPRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdSeenHCPRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdSeenHCPRowCollection getRows()
			{
				return new grdSeenHCPRowCollection(super.grid.getRows());
			}
			public grdSeenHCPRow getRowByValue(ims.vo.ValueObject value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdSeenHCPRow(row);
			}
			public void setColNurseHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColNurseHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColAllocatedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColAllocatedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColSeenHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColSeenHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColCompletedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColCompletedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 864, 304, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Bed Availability Times", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 312, 864, 496, 216, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Transfer Times", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 312, 640, 496, 216, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Sent To Xray Times", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 640, 304, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"DNW Times", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 312, 416, 496, 216, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Cubicle Allocation Times", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 416, 304, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"ED Movement Times", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 0, 208, 304, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Patient Status Times", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 312, 208, 496, 200, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Seen By HCP and Referral Details", new Integer(2), ""}));
	
			// Label Controls
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 400, 90, 173, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Decision to Admit Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 114, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Registration End Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Incident Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 400, 42, 177, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Triage Completion Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 66, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Conclusion Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 177, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ambulance Arrival Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 400, 18, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Triage Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 400, 114, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Departed Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 90, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Registration Start Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Arrival Date/Time:", new Integer(1), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 608, 151, 144, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit Attendance Times", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// Date Time Controls
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 584, 88, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 192, 112, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 192, 16, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 584, 40, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 584, 64, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 192, 40, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 584, 16, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 584, 112, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 192, 88, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 192, 64, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 892, 288, 182, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdBedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsBedAvailabilityMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdBedTemp);
			grdBedGrid grdBed = (grdBedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBedGrid.class, m_grdBedTemp);
			grdBed.addStringColumn("Ward", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdBed.addStringColumn("Awaiting Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdBed.addStringColumn("Available Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdBed);
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 320, 891, 480, 182, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Grid m_grdTransferTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsTransferMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdTransferTemp);
			grdTransferGrid grdTransfer = (grdTransferGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTransferGrid.class, m_grdTransferTemp);
			grdTransfer.addStringColumn("Hospital", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTransfer.addStringColumn("Referred By", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTransfer.addStringColumn("Referred Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTransfer.addStringColumn("Accepted Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdTransfer);
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 320, 665, 480, 182, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Grid m_grdSentToXrayTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsSentToXrayMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdSentToXrayTemp);
			grdSentToXrayGrid grdSentToXray = (grdSentToXrayGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSentToXrayGrid.class, m_grdSentToXrayTemp);
			grdSentToXray.addStringColumn("Sent By", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdSentToXray.addStringColumn("Sent Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdSentToXray.addStringColumn("Returned Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdSentToXray);
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 666, 288, 181, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdDNWTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsDNWTimesMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdDNWTemp);
			grdDNWGrid grdDNW = (grdDNWGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDNWGrid.class, m_grdDNWTemp);
			grdDNW.addStringColumn("Patient Called DateTime", 0, 0, 142, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDNW.addStringColumn("No of Time Called", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDNW.addStringColumn("Authoring User", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdDNW);
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 320, 440, 480, 182, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Grid m_grdCubicleAllocationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsCubicleAllocationMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdCubicleAllocationTemp);
			grdCubicleAllocationGrid grdCubicleAllocation = (grdCubicleAllocationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCubicleAllocationGrid.class, m_grdCubicleAllocationTemp);
			grdCubicleAllocation.addStringColumn("Allocated By", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdCubicleAllocation.addStringColumn("Allocated On", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdCubicleAllocation.addStringColumn("Cubicle/Room/Bed", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdCubicleAllocation);
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 441, 288, 181, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdMovementTimesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdMovementTimesTemp);
			grdMovementTimesGrid grdMovementTimes = (grdMovementTimesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMovementTimesGrid.class, m_grdMovementTimesTemp);
			grdMovementTimes.addStringColumn("Tracking Area", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdMovementTimes.addStringColumn("Time", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdMovementTimes);
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 233, 288, 167, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdPatientStatusTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdPatientStatusTemp);
			grdPatientStatusGrid grdPatientStatus = (grdPatientStatusGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientStatusGrid.class, m_grdPatientStatusTemp);
			grdPatientStatus.addStringColumn("Status", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdPatientStatus.addStringColumn("Time", 0, 0, 120, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdPatientStatus.addStringColumn("Tracking Area", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdPatientStatus);
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 320, 233, 480, 167, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Grid m_grdSeenHCPTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdSeenHCPTemp);
			grdSeenHCPGrid grdSeenHCP = (grdSeenHCPGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSeenHCPGrid.class, m_grdSeenHCPTemp);
			grdSeenHCP.addStringColumn("Seen By HCP/ Referral", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdSeenHCP.addStringColumn("Allocated On", 0, 0, 105, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdSeenHCP.addStringColumn("Seen Time", 0, 0, 105, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdSeenHCP.addStringColumn("Completed Time", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdSeenHCP);
		}
		public Button btnEdit()
		{
			return (Button)super.getControl(18);
		}
		public DateTimeControl dtimDecisionToAdmit()
		{
			return (DateTimeControl)super.getControl(19);
		}
		public DateTimeControl dtimRegistrationEnd()
		{
			return (DateTimeControl)super.getControl(20);
		}
		public DateTimeControl dtimIncident()
		{
			return (DateTimeControl)super.getControl(21);
		}
		public DateTimeControl dtimTriageCompletion()
		{
			return (DateTimeControl)super.getControl(22);
		}
		public DateTimeControl dtimConclusion()
		{
			return (DateTimeControl)super.getControl(23);
		}
		public DateTimeControl dtimAmbulanceArrival()
		{
			return (DateTimeControl)super.getControl(24);
		}
		public DateTimeControl dtimTriage()
		{
			return (DateTimeControl)super.getControl(25);
		}
		public DateTimeControl dtimDischarge()
		{
			return (DateTimeControl)super.getControl(26);
		}
		public DateTimeControl dtimRegistration()
		{
			return (DateTimeControl)super.getControl(27);
		}
		public DateTimeControl dtimArrival()
		{
			return (DateTimeControl)super.getControl(28);
		}
		public grdBedGrid grdBed()
		{
			return (grdBedGrid)super.getGrid(0);
		}
		public grdTransferGrid grdTransfer()
		{
			return (grdTransferGrid)super.getGrid(1);
		}
		public grdSentToXrayGrid grdSentToXray()
		{
			return (grdSentToXrayGrid)super.getGrid(2);
		}
		public grdDNWGrid grdDNW()
		{
			return (grdDNWGrid)super.getGrid(3);
		}
		public grdCubicleAllocationGrid grdCubicleAllocation()
		{
			return (grdCubicleAllocationGrid)super.getGrid(4);
		}
		public grdMovementTimesGrid grdMovementTimes()
		{
			return (grdMovementTimesGrid)super.getGrid(5);
		}
		public grdPatientStatusGrid grdPatientStatus()
		{
			return (grdPatientStatusGrid)super.getGrid(6);
		}
		public grdSeenHCPGrid grdSeenHCP()
		{
			return (grdSeenHCPGrid)super.getGrid(7);
		}
	}
	public static class recbrEmergencyAttendanceRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo getValue()
		{
			return (ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo)super.control.getValue();
		}
		public void setValue(ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(35);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuTimeAmendmentsBedAvailabilityMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem = factory.createMenuItem(startControlID.intValue() + 1, "Edit Bed Availability Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5710001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsBedAvailabilityMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsBedAvailabilityMenu);
		contextMenus.Emergency.contextMenuTimeAmendmentsTransferMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Emergency.contextMenuTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Transfer Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5700001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsTransferMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsTransferMenu);
		contextMenus.Emergency.contextMenuTimeAmendmentsSentToXrayMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Emergency.contextMenuTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit Sent To Xray Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5690001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsSentToXrayMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsSentToXrayMenu);
		contextMenus.Emergency.contextMenuTimeAmendmentsDNWTimesMenu = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Emergency.contextMenuTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit DNW Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5680001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsDNWTimesMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsDNWTimesMenu);
		contextMenus.Emergency.contextMenuTimeAmendmentsCubicleAllocationMenu = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.Emergency.contextMenuTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Cubicle Allocation Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5670001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsCubicleAllocationMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsCubicleAllocationMenu);
		contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenu = factory.createMenu(startControlID.intValue() + 6);
		contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Movement Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5660001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem);
		contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenuMOVEItem = factory.createMenuItem(startControlID.intValue() + 7, "Move", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5660002)))
			contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenuMOVEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsMovementTimesMenu);
		contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenu = factory.createMenu(startControlID.intValue() + 7);
		contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem = factory.createMenuItem(startControlID.intValue() + 8, "Edit Patient Status Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5640001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem);
		contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem = factory.createMenuItem(startControlID.intValue() + 9, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5640002)))
			contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsPatientStatusMenu);
		contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenu = factory.createMenu(startControlID.intValue() + 8);
		contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem = factory.createMenuItem(startControlID.intValue() + 10, "Edit Seen By HCP Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5650001)))
			contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem);
		contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit Referral to Specialty Time", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5650002)))
			contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem);
		contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem = factory.createMenuItem(startControlID.intValue() + 12, "Seen/Complete HCP", true, false, new Integer(129157), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5650003)))
			contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem);
		contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuREFER_TOItem = factory.createMenuItem(startControlID.intValue() + 13, "Refer To", true, false, new Integer(129154), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5650004)))
			contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenu.add(contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenuREFER_TOItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTimeAmendmentsSeenByHCPMenu);


		// Container Clasess
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctnTimes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctnTimes);
		ctnTimesContainer ctnTimes = (ctnTimesContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnTimesContainer.class, m_ctnTimes, factory);
		ims.framework.utils.SizeInfo m_ctnTimesDesignSize = new ims.framework.utils.SizeInfo(832, 576);
		ims.framework.utils.SizeInfo m_ctnTimesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
		ctnTimes.setContext(form, appForm, m_ctnTimes, loader, contextMenus, startControlID, m_ctnTimesDesignSize, m_ctnTimesRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnTimes);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 24, 8, 800, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrEmergencyAttendanceTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrEmergencyAttendanceTemp);
		recbrEmergencyAttendanceRecordBrowser recbrEmergencyAttendance = (recbrEmergencyAttendanceRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrEmergencyAttendanceRecordBrowser.class, m_recbrEmergencyAttendanceTemp);
		super.addRecordBrowser(recbrEmergencyAttendance);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ctnTimesContainer ctnTimes()
	{
		return (ctnTimesContainer)super.getContainer(0);
	}
	public recbrEmergencyAttendanceRecordBrowser recbrEmergencyAttendance()
	{
		return (recbrEmergencyAttendanceRecordBrowser)super.getRecordBrowser(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Emergency = new EmergencyForms();
			Core = new CoreForms();
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				AmendAttendanceTimesDialog = new LocalFormName(129219);
				AmentAttendanceMovementTimes = new LocalFormName(129222);
				AmentAttendancePatientStatusTimes = new LocalFormName(129220);
				AmentAttendanceSeenByHCPTimes = new LocalFormName(129221);
				AmentAttendanceCubicleAllocationTimes = new LocalFormName(129223);
				AmentAttendanceDNWTimes = new LocalFormName(129224);
				AmentAttendanceSentToXrayTimes = new LocalFormName(129225);
				AmentAttendanceBedAvailabilityTimes = new LocalFormName(129229);
				AmentAttendanceTransferTimes = new LocalFormName(129228);
				EDReferralToSpecialtyDialog = new LocalFormName(129188);
				EDSeenByAndCompleteDialog = new LocalFormName(129191);
			}
			public final FormName AmendAttendanceTimesDialog;
			public final FormName AmentAttendanceMovementTimes;
			public final FormName AmentAttendancePatientStatusTimes;
			public final FormName AmentAttendanceSeenByHCPTimes;
			public final FormName AmentAttendanceCubicleAllocationTimes;
			public final FormName AmentAttendanceDNWTimes;
			public final FormName AmentAttendanceSentToXrayTimes;
			public final FormName AmentAttendanceBedAvailabilityTimes;
			public final FormName AmentAttendanceTransferTimes;
			public final FormName EDReferralToSpecialtyDialog;
			public final FormName EDSeenByAndCompleteDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public EmergencyForms Emergency;
		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientStatusForRIE = new ims.framework.ContextVariable("PatientStatusForRIE", prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__PatientStatusForRIE_" + componentIdentifier + "");
			cxl_Tracking = new ims.framework.ContextVariable("Tracking", prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__Tracking_" + componentIdentifier + "");
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
		}
		
		public boolean getPatientStatusForRIEIsNotNull()
		{
			return !cxl_PatientStatusForRIE.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo getPatientStatusForRIE()
		{
			return (ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo)cxl_PatientStatusForRIE.getValue(context);
		}
		public void setPatientStatusForRIE(ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo value)
		{
			cxl_PatientStatusForRIE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientStatusForRIE = null;
		public boolean getTrackingIsNotNull()
		{
			return !cxl_Tracking.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingForTimeAmendmentsVo getTracking()
		{
			return (ims.emergency.vo.TrackingForTimeAmendmentsVo)cxl_Tracking.getValue(context);
		}
		public void setTracking(ims.emergency.vo.TrackingForTimeAmendmentsVo value)
		{
			cxl_Tracking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Tracking = null;
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo getCurrentRecord()
		{
			return (ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TimeAmendmentsBedAvailabilityMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT_BED_AVAILABILITY_TIME = 1;
			}
			public void disableAllTimeAmendmentsBedAvailabilityMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsBedAvailabilityMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsBedAvailabilityMenu;
			public ReadOnlyMenuItem getTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem;
			public final class TimeAmendmentsTransferMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT_TRANSFER_TIME = 2;
			}
			public void disableAllTimeAmendmentsTransferMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsTransferMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsTransferMenu;
			public ReadOnlyMenuItem getTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem;
			public final class TimeAmendmentsSentToXrayMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT_SENT_TO_XRAY_TIME = 3;
			}
			public void disableAllTimeAmendmentsSentToXrayMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsSentToXrayMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsSentToXrayMenu;
			public ReadOnlyMenuItem getTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem;
			public final class TimeAmendmentsDNWTimesMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT_DNW_TIME = 4;
			}
			public void disableAllTimeAmendmentsDNWTimesMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsDNWTimesMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsDNWTimesMenu;
			public ReadOnlyMenuItem getTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem;
			public final class TimeAmendmentsCubicleAllocationMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT_CUBICLE_ALLOCATION_TIME = 5;
			}
			public void disableAllTimeAmendmentsCubicleAllocationMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsCubicleAllocationMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsCubicleAllocationMenu;
			public ReadOnlyMenuItem getTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem;
			public final class TimeAmendmentsMovementTimesMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT_MOVOMENT_TIME = 6;
				public static final int MOVE = 7;
			}
			public void disableAllTimeAmendmentsMovementTimesMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem.setEnabled(false);
				this.contextMenuTimeAmendmentsMovementTimesMenuMOVEItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsMovementTimesMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem.setVisible(false);
				this.contextMenuTimeAmendmentsMovementTimesMenuMOVEItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsMovementTimesMenu;
			public ReadOnlyMenuItem getTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem;
			public ReadOnlyMenuItem getTimeAmendmentsMovementTimesMenuMOVEItem()
			{
				return this.contextMenuTimeAmendmentsMovementTimesMenuMOVEItem;
			}
			private MenuItem contextMenuTimeAmendmentsMovementTimesMenuMOVEItem;
			public final class TimeAmendmentsPatientStatusMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT_PATIENT_STATUS_TIMES = 8;
				public static final int MARK_AS_RIE = 9;
			}
			public void disableAllTimeAmendmentsPatientStatusMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem.setEnabled(false);
				this.contextMenuTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsPatientStatusMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem.setVisible(false);
				this.contextMenuTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsPatientStatusMenu;
			public ReadOnlyMenuItem getTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem()
			{
				return this.contextMenuTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem;
			}
			private MenuItem contextMenuTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem;
			public ReadOnlyMenuItem getTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem()
			{
				return this.contextMenuTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem;
			}
			private MenuItem contextMenuTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem;
			public final class TimeAmendmentsSeenByHCPMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDI_SEEN_BY_HCP_TIME = 10;
				public static final int EDIT_REFERRAL_TO_SPECIALTY_TIME = 11;
				public static final int SEEN_COMPLETE_HCP = 12;
				public static final int REFER_TO = 13;
			}
			public void disableAllTimeAmendmentsSeenByHCPMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem.setEnabled(false);
				this.contextMenuTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem.setEnabled(false);
				this.contextMenuTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem.setEnabled(false);
				this.contextMenuTimeAmendmentsSeenByHCPMenuREFER_TOItem.setEnabled(false);
			}
			public void hideAllTimeAmendmentsSeenByHCPMenuMenuItems()
			{
				this.contextMenuTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem.setVisible(false);
				this.contextMenuTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem.setVisible(false);
				this.contextMenuTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem.setVisible(false);
				this.contextMenuTimeAmendmentsSeenByHCPMenuREFER_TOItem.setVisible(false);
			}
			private Menu contextMenuTimeAmendmentsSeenByHCPMenu;
			public ReadOnlyMenuItem getTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem;
			public ReadOnlyMenuItem getTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem()
			{
				return this.contextMenuTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem;
			}
			private MenuItem contextMenuTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem;
			public ReadOnlyMenuItem getTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem()
			{
				return this.contextMenuTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem;
			}
			private MenuItem contextMenuTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem;
			public ReadOnlyMenuItem getTimeAmendmentsSeenByHCPMenuREFER_TOItem()
			{
				return this.contextMenuTimeAmendmentsSeenByHCPMenuREFER_TOItem;
			}
			private MenuItem contextMenuTimeAmendmentsSeenByHCPMenuREFER_TOItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[171];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Emergency.EmergencyAttendanceForTimeAmendments", "BO-1004100025-ID", "ID_EmergencyAttendance");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Emergency.EmergencyAttendanceForTimeAmendments", "BO-1004100025-REGISTRATIONDATETIME", "RegistrationDateTime");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Emergency.EmergencyAttendanceForTimeAmendments", "BO-1004100025-DISCHARGEDATETIME", "DischargeDateTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Emergency.EmergencyAttendanceForTimeAmendments", "BO-1004100025-CARECONTEXT", "CareContext");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Emergency.EmergencyAttendanceForTimeAmendments", "BO-1004100025-CUSTOMID", "CustomID");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendancePatientStatusTimes", "BO-1086100013-ID", "ID_TrackingAttendanceStatus");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceSeenByTimes", "BO-1086100034-ID", "ID_SeenByHCP");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceCubicleAllocationTimes", "BO-1086100010-ID", "ID_CubicleAllocation");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceDNWTimes", "BO-1086100008-ID", "ID_DNWStatus");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceSentToXrayTimes", "BO-1086100023-ID", "ID_SentToXray");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceTimes", "BO-1086100005-ID", "ID_Tracking");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceReferralToSpecialtyTimes", "BO-1086100003-ID", "ID_ReferralToSpecTeam");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceTransferTimes", "BO-1086100042-ID", "ID_EDTransfer");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceBedAvailabilityTimes", "BO-1086100001-ID", "ID_BedAvailability");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Emergency.Tracking", "BO-1086100005-ID", "ID_Tracking");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Emergency.AmendAttendanceMovementTimes", "BO-1086100009-ID", "ID_TrackingMovementTimes");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__PatientStatusForRIE_" + componentIdentifier, "BO-1086100013-ID", "ID_TrackingAttendanceStatus");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__PatientStatusForRIE_" + componentIdentifier, "BO-1086100013-ATTENDANCE", "Attendance");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__PatientStatusForRIE_" + componentIdentifier, "BO-1086100013-STATUSDATETIME", "StatusDatetime");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__PatientStatusForRIE_" + componentIdentifier, "BO-1086100013-STATUS", "Status");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__Tracking_" + componentIdentifier, "BO-1086100005-ID", "ID_Tracking");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__Tracking_" + componentIdentifier, "BO-1086100005-CURRENTSTATUS", "CurrentStatus");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1004100025-ID", "ID_EmergencyAttendance");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1004100025-REGISTRATIONDATETIME", "RegistrationDateTime");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1004100025-DISCHARGEDATETIME", "DischargeDateTime");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1004100025-CARECONTEXT", "CareContext");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EmergencyAttendanceTimeAmendments.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1004100025-CUSTOMID", "CustomID");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
