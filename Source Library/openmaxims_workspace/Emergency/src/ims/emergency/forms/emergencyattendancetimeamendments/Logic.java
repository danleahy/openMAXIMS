//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.emergencyattendancetimeamendments;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CubicleAllocationForAmendTimesVo;
import ims.core.vo.CubicleAllocationForAmendTimesVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdBedRow;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdCubicleAllocationRow;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdDNWRow;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdMovementTimesRow;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdPatientStatusRow;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdSeenHCPRow;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdSentToXrayRow;
import ims.emergency.forms.emergencyattendancetimeamendments.GenForm.ctnTimesContainer.grdTransferRow;
import ims.emergency.vo.BedAvailabilityVo;
import ims.emergency.vo.BedAvailabilityVoCollection;
import ims.emergency.vo.DNWStatusForAmendTimesVo;
import ims.emergency.vo.DNWStatusForAmendTimesVoCollection;
import ims.emergency.vo.EDTransferVo;
import ims.emergency.vo.EDTransferVoCollection;
import ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVo;
import ims.emergency.vo.EmergencyAttendanceForTimeAmendmentsLiteVoCollection;
import ims.emergency.vo.ReferralToSpecialtyTeamForEventHistoryVo;
import ims.emergency.vo.ReferralToSpecialtyTeamForEventHistoryVoCollection;
import ims.emergency.vo.SeenByHcpForEventHistoryVo;
import ims.emergency.vo.SeenByHcpForEventHistoryVoCollection;
import ims.emergency.vo.SentToXrayVo;
import ims.emergency.vo.SentToXrayVoCollection;
import ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo;
import ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVoCollection;
import ims.emergency.vo.TrackingForTimeAmendmentsVo;
import ims.emergency.vo.TrackingMovementTimesForEventHistoryVo;
import ims.emergency.vo.TrackingMovementTimesForEventHistoryVoCollection;
import ims.emergency.vo.lookups.TransferToHospital;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.vo.ValueObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String PARTIAL_ADMISSION = "PARTIAL";
	private static final String PENDING_ADMISSION = "PENDING";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open()
	{
		populateRecordBrowser();
		
		form.getGlobalContext().Emergency.setEmergencyAttendanceForTimeAmendments(form.recbrEmergencyAttendance().getValue());
		form.getLocalContext().setTracking(domain.getTracking(form.recbrEmergencyAttendance().getValue()));
		
		if(form.recbrEmergencyAttendance().getValue() != null)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(form.getLocalContext().getCurrentRecord().getCareContext()));
		}
		form.getGlobalContext().Emergency.setTracking(form.getLocalContext().getTracking());
		
		populateScreenFromData(form.getLocalContext().getTracking());
		
		updateControlsState();
	}

	private void populateScreenFromData(TrackingForTimeAmendmentsVo record)
	{
		populateAttendanceDetails(record);
		populateGrids();
	}

	private void populateAttendanceDetails(TrackingForTimeAmendmentsVo record)
	{
		clearAttendanceDetails();
		
		if(record == null)
			return;
		
		if(record.getAttendance() != null)
		{
    		form.ctnTimes().dtimArrival().setValue(record.getAttendance().getArrivalDateTime());
    		form.ctnTimes().dtimRegistration().setValue(record.getAttendance().getRegistrationDateTime());
    		form.ctnTimes().dtimRegistrationEnd().setValue(record.getAttendance().getEndOfRegistrationDateTime());
    		form.ctnTimes().dtimDischarge().setValue(record.getAttendance().getDischargeDateTime());
    		form.ctnTimes().dtimAmbulanceArrival().setValue(record.getAttendance().getAmbulanceArrivalDateTime());
    		//form.ctnTimes().dtimExpectedArrival().setValue(record.getAttendance().getExpectedArrivalDateTime());
    		form.ctnTimes().dtimConclusion().setValue(record.getAttendance().getConclusionDateTime());
		}
		
		if(record.getTriageDetails() != null)
		{
			form.ctnTimes().dtimTriage().setValue(record.getTriageDetails().getTriageStartDateTime());
			form.ctnTimes().dtimTriageCompletion().setValue(record.getTriageDetails().getTriageCompletionTime());
		}
		
		if(record.getEpisode() != null)
		{
			form.ctnTimes().dtimIncident().setValue(record.getEpisode().getInjuryDateTime());
		}
		
		if(ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals(PENDING_ADMISSION))
		{
			form.ctnTimes().dtimDecisionToAdmit().setValue(record.getAssociatedPendingEmergencyAdmission() != null ? record.getAssociatedPendingEmergencyAdmission().getDTADateTime() : null);
		}
		else if(ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals(PARTIAL_ADMISSION))
		{
			form.ctnTimes().dtimDecisionToAdmit().setValue(record.getCurrentPartialAdmission() != null ? record.getCurrentPartialAdmission().getDecisionToAdmitDateTime() : null);
		}
	}

	private void clearAttendanceDetails()
	{
		form.ctnTimes().dtimIncident().setValue(null);
		form.ctnTimes().dtimArrival().setValue(null);
		form.ctnTimes().dtimRegistration().setValue(null);
		form.ctnTimes().dtimRegistrationEnd().setValue(null);
		form.ctnTimes().dtimDischarge().setValue(null);
		form.ctnTimes().dtimAmbulanceArrival().setValue(null);
		//form.ctnTimes().dtimExpectedArrival().setValue(null);
		form.ctnTimes().dtimConclusion().setValue(null);
		form.ctnTimes().dtimDecisionToAdmit().setValue(null);
		
		form.ctnTimes().dtimTriage().setValue(null);
		form.ctnTimes().dtimTriageCompletion().setValue(null);
	}

	private void populateGrids()
	{
		populateSeenByHCPGrid();
		populatePatientStatusGrid();
		populateMovementsGrid();
		populateCubicleGrid();
		populateDNWGrid();
		populateSentToXrayGrid();
		populateTransferGrid();
		populateBedAvailabilityGrid();
	}

	private void populateBedAvailabilityGrid()
	{
		form.ctnTimes().grdBed().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		BedAvailabilityVoCollection bedTimes = domain.listBedAvailability(form.recbrEmergencyAttendance().getValue().getCareContext());

		for (int i = 0; i < bedTimes.size(); i++)
		{
			addBedAvailabilityTimeRowToGrid(bedTimes.get(i));
		}
	}

	private void addBedAvailabilityTimeRowToGrid(BedAvailabilityVo bedAvailabilityVo)
	{
		if(bedAvailabilityVo == null)
			return;
		
		grdBedRow newrow = form.ctnTimes().grdBed().getRows().newRow();

		if(bedAvailabilityVo.getWard() != null)
		{
			newrow.setColWard(bedAvailabilityVo.getWard().getName());
		}

		if (bedAvailabilityVo.getAvailableDateTime() != null)
		{
			newrow.setColAvailableDate(bedAvailabilityVo.getAvailableDateTime().toString());
		}
		
		if(bedAvailabilityVo.getAwaitingDateTime() != null)
		{
			newrow.setColAwaitingDate(bedAvailabilityVo.getAwaitingDateTime().toString());
		}
		
		newrow.setValue(bedAvailabilityVo);
	}

	private void populateTransferGrid()
	{
		form.ctnTimes().grdTransfer().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		EDTransferVoCollection transferTimes = domain.listTransfers(form.recbrEmergencyAttendance().getValue().getCareContext());

		for (int i = 0; i < transferTimes.size(); i++)
		{
			addTransferTimeRowToGrid(transferTimes.get(i));
		}
	}

	private void addTransferTimeRowToGrid(EDTransferVo edTransferVo)
	{
		if(edTransferVo == null)
			return;
		
		grdTransferRow newrow = form.ctnTimes().grdTransfer().getRows().newRow();

		newrow.setColHospital(getTransfer(edTransferVo));

		if (edTransferVo.getReferredBy() != null)
		{
			newrow.setColReferredBy(edTransferVo.getReferredBy().getIMosName());
		}
		
		if(edTransferVo.getReferredDateTime() != null)
		{
			newrow.setColReferredDate(edTransferVo.getReferredDateTime().toString());
		}
		
		if(edTransferVo.getAcceptedDateTime() != null)
		{
			newrow.setColAcceptedDate(edTransferVo.getAcceptedDateTime().toString());
		}
		
		newrow.setValue(edTransferVo);
	}

	private String getTransfer(EDTransferVo edTransferVo)
	{
		if(edTransferVo == null)
			return null;
		
		if(edTransferVo.getToHospital() != null && !TransferToHospital.OTHER.equals(edTransferVo.getToHospital()))
			return edTransferVo.getToHospital().getText();
		
		if(edTransferVo.getOtherHospital() != null)
			return edTransferVo.getOtherHospital();
		
		return null;
	}

	private void populateSentToXrayGrid()
	{
		form.ctnTimes().grdSentToXray().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		SentToXrayVoCollection sentToXrayTimes = domain.listSentToXray(form.recbrEmergencyAttendance().getValue().getCareContext());

		for (int i = 0; i < sentToXrayTimes.size(); i++)
		{
			addSentToXrayTimeRowToGrid(sentToXrayTimes.get(i));
		}
	}

	private void addSentToXrayTimeRowToGrid(SentToXrayVo sentToXrayVo)
	{
		if(sentToXrayVo == null)
			return;
		
		grdSentToXrayRow newrow = form.ctnTimes().grdSentToXray().getRows().newRow();

		if (sentToXrayVo.getSentBy() != null)
		{
			newrow.setColNurse(sentToXrayVo.getSentBy().getIMosName());
		}

		if (sentToXrayVo.getSentDateTime() != null)
		{
			newrow.setColSentDate(sentToXrayVo.getSentDateTime().toString());
		}
		
		if(sentToXrayVo.getReturnedDateTime() != null)
		{
			newrow.setColReturnedDate(sentToXrayVo.getReturnedDateTime().toString());
		}
		
		newrow.setValue(sentToXrayVo);
	}

	private void populateDNWGrid()
	{
		form.ctnTimes().grdDNW().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		DNWStatusForAmendTimesVoCollection dnwTimes = domain.listDNW(form.recbrEmergencyAttendance().getValue().getCareContext());

		for (int i = 0; i < dnwTimes.size(); i++)
		{
			addDNWTimeRowToGrid(dnwTimes.get(i));
		}
	}

	private void addDNWTimeRowToGrid(DNWStatusForAmendTimesVo dnwStatusForAmendTimesVo)
	{
		if(dnwStatusForAmendTimesVo == null)
			return;
		
		grdDNWRow newrow = form.ctnTimes().grdDNW().getRows().newRow();

		if (dnwStatusForAmendTimesVo.getStatusDateTime() != null)
		{
			newrow.setColDate(dnwStatusForAmendTimesVo.getStatusDateTime().toString());
		}

		if (dnwStatusForAmendTimesVo.getCalledAmount() != null)
		{
			newrow.setColNumber(dnwStatusForAmendTimesVo.getCalledAmount().toString());
		}
		
		if(dnwStatusForAmendTimesVo.getAuthoringUser() != null)
		{
			newrow.setColHCP(dnwStatusForAmendTimesVo.getAuthoringUser().getIMosName());
		}
		
		newrow.setValue(dnwStatusForAmendTimesVo);
	}

	private void populateCubicleGrid()
	{
		form.ctnTimes().grdCubicleAllocation().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		CubicleAllocationForAmendTimesVoCollection cubicleTimes = domain.listCubicleAllocation(form.recbrEmergencyAttendance().getValue().getCareContext());

		for (int i = 0; i < cubicleTimes.size(); i++)
		{
			addCubicleTimeRowToGrid(cubicleTimes.get(i));
		}
	}

	private void addCubicleTimeRowToGrid(CubicleAllocationForAmendTimesVo cubicleAllocationForAmendTimesVo)
	{
		if(cubicleAllocationForAmendTimesVo == null)
			return;
		
		grdCubicleAllocationRow newrow = form.ctnTimes().grdCubicleAllocation().getRows().newRow();

		if (cubicleAllocationForAmendTimesVo.getAllocatedBy() != null)
		{
			newrow.setColNurse(cubicleAllocationForAmendTimesVo.getAllocatedBy().getIMosName());
		}

		if (cubicleAllocationForAmendTimesVo.getAllocatedCubicleDateTime() != null)
		{
			newrow.setColAllocated(cubicleAllocationForAmendTimesVo.getAllocatedCubicleDateTime().toString());
		}
		
		if(cubicleAllocationForAmendTimesVo.getCubicleRoomBed() != null)
		{
			newrow.setColCubicle(cubicleAllocationForAmendTimesVo.getCubicleRoomBed().getCubicleRoomBedName());
		}
		
		newrow.setValue(cubicleAllocationForAmendTimesVo);
	}

	private void populateMovementsGrid()
	{
		form.ctnTimes().grdMovementTimes().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		TrackingMovementTimesForEventHistoryVoCollection trackingMovementTimes = domain.listTrackingMovementTimes(form.recbrEmergencyAttendance().getValue().getCareContext());

		for (int i = 0; i < trackingMovementTimes.size(); i++)
		{
			addMovementTimeRowToGrid(trackingMovementTimes.get(i));
		}
	}
	
	private void populatePatientStatusGrid()
	{
		form.ctnTimes().grdPatientStatus().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		TrackingAttendanceStatusForEventHistoryVoCollection attendanceStatuses = domain.listTrackingAttendanceStatuses(form.recbrEmergencyAttendance().getValue().getCareContext());
		
		for (int i = 0; i < attendanceStatuses.size(); i++)
		{
			addAttendanceStatusRowToGrid(attendanceStatuses.get(i));
		}
	}

	private void populateSeenByHCPGrid()
	{
		form.ctnTimes().grdSeenHCP().getRows().clear();
		
		if(form.recbrEmergencyAttendance().getValue() == null)
			return;
		
		SeenByHcpForEventHistoryVoCollection seenByHcp = domain.listSeenByHcp(form.recbrEmergencyAttendance().getValue().getCareContext());
		ReferralToSpecialtyTeamForEventHistoryVoCollection referralsToSpecialty = domain.listReferralsToSpecialty(form.recbrEmergencyAttendance().getValue().getCareContext());
		
		List<ValueObject> values = new ArrayList<ValueObject>();
		
		for (int i = 0; i < seenByHcp.size(); i++)
		{
			values.add(seenByHcp.get(i));
		}

		for (int i = 0; i < referralsToSpecialty.size(); i++)
		{
			values.add(referralsToSpecialty.get(i));
		}
		
		Collections.sort(values, new SeenByAndReferralToSpecialtyDateComparator(SortOrder.DESCENDING));
		
		for(int i = 0; i < values.size(); i++)
		{
			if(values.get(i) instanceof SeenByHcpForEventHistoryVo)
			{
				addSeenByHCPRowToGrid((SeenByHcpForEventHistoryVo) values.get(i));
			}
			else if(values.get(i) instanceof ReferralToSpecialtyTeamForEventHistoryVo)
			{
				addReferralRowToGrid((ReferralToSpecialtyTeamForEventHistoryVo) values.get(i));
			}
		}
	}
	
	class SeenByAndReferralToSpecialtyDateComparator implements Comparator<ValueObject>
	{
		private int order =1;
		public SeenByAndReferralToSpecialtyDateComparator()
		{
			order = 1;
		}
		public SeenByAndReferralToSpecialtyDateComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(ValueObject o1, ValueObject o2)
		{
			DateTime date1 = null;
			DateTime date2 = null;
			
			if(o1 instanceof SeenByHcpForEventHistoryVo)
			{
				date1 = ((SeenByHcpForEventHistoryVo) o1).getSystemInformation().getCreationDateTime();
			}
			else if(o1 instanceof ReferralToSpecialtyTeamForEventHistoryVo)
			{
				date1 = ((ReferralToSpecialtyTeamForEventHistoryVo) o1).getSystemInformation().getCreationDateTime();
			}
			
			if(o2 instanceof SeenByHcpForEventHistoryVo)
			{
				date2 = ((SeenByHcpForEventHistoryVo) o2).getSystemInformation().getCreationDateTime();
			}
			else if(o2 instanceof ReferralToSpecialtyTeamForEventHistoryVo)
			{
				date2 = ((ReferralToSpecialtyTeamForEventHistoryVo) o2).getSystemInformation().getCreationDateTime();
			}
			
			if (date1 != null && date2 != null )
			{
				return order * date1.compareTo(date2);
			}
			if (date1 == null)
				return -1 * order;
			
			if (date2 == null)
				return order;
			
			return 0;
		}	
	}

	private void addMovementTimeRowToGrid(TrackingMovementTimesForEventHistoryVo trackingMovementTimesForEventHistoryVo)
	{
		grdMovementTimesRow newrow = form.ctnTimes().grdMovementTimes().getRows().newRow();

		if (trackingMovementTimesForEventHistoryVo.getAreaMovedToIsNotNull())
		{
			newrow.setColTrackingArea(trackingMovementTimesForEventHistoryVo.getAreaMovedTo().getAreaDisplayName());
		}

		if (trackingMovementTimesForEventHistoryVo.getMovedDateTimeIsNotNull())
		{
			newrow.setColTime(trackingMovementTimesForEventHistoryVo.getMovedDateTime().toString());
		}
		
		newrow.setValue(trackingMovementTimesForEventHistoryVo);
	}

	private void addAttendanceStatusRowToGrid(TrackingAttendanceStatusForEventHistoryVo trackingAttendanceStatusForEventHistoryVo)
	{
		if(trackingAttendanceStatusForEventHistoryVo == null)
			return;
		
		grdPatientStatusRow newrow = form.ctnTimes().grdPatientStatus().getRows().newRow();
		
		if(isCurrentStatus(trackingAttendanceStatusForEventHistoryVo))
		{
			newrow.setBackColor(Color.Beige);
		}

		if (trackingAttendanceStatusForEventHistoryVo.getStatusIsNotNull())
		{
			newrow.setColStatus(trackingAttendanceStatusForEventHistoryVo.getStatus().getText());
		}

		if (trackingAttendanceStatusForEventHistoryVo.getStatusDatetimeIsNotNull())
		{
			newrow.setColTime(trackingAttendanceStatusForEventHistoryVo.getStatusDatetime().toString());
		}

		if (trackingAttendanceStatusForEventHistoryVo.getTrackingAreaIsNotNull())
		{
			newrow.setColTrackingArea(trackingAttendanceStatusForEventHistoryVo.getTrackingArea().getAreaDisplayName());
		}
		
		newrow.setValue(trackingAttendanceStatusForEventHistoryVo);
	}

	private boolean isCurrentStatus(TrackingAttendanceStatusForEventHistoryVo trackingAttendanceStatusForEventHistoryVo)
	{
		if(trackingAttendanceStatusForEventHistoryVo == null)
			return false;
		
		return form.getLocalContext().getTracking() != null && form.getLocalContext().getTracking().getCurrentStatus() != null && form.getLocalContext().getTracking().getCurrentStatus().getID_TrackingAttendanceStatus().equals(trackingAttendanceStatusForEventHistoryVo.getID_TrackingAttendanceStatus());
	}

	private void addReferralRowToGrid(ReferralToSpecialtyTeamForEventHistoryVo referralToSpecialtyTeamForEventHistoryVo)
	{
		if (referralToSpecialtyTeamForEventHistoryVo==null)
			return;
		
		grdSeenHCPRow newrow = form.ctnTimes().grdSeenHCP().getRows().newRow();

		if (referralToSpecialtyTeamForEventHistoryVo.getTeamConsultant()!=null)
		{
			newrow.setColNurse(referralToSpecialtyTeamForEventHistoryVo.getTeamConsultant().getText()+ ", " + referralToSpecialtyTeamForEventHistoryVo.getSpecialty().getText());
		}
		else
		{
			newrow.setColNurse(referralToSpecialtyTeamForEventHistoryVo.getSpecialty().getText());
		}
		
		if (referralToSpecialtyTeamForEventHistoryVo.getReferredDateTimeIsNotNull())
		{
			newrow.setColAllocated(referralToSpecialtyTeamForEventHistoryVo.getReferredDateTime().toString());
		}

		if (referralToSpecialtyTeamForEventHistoryVo.getSeenDateTimeIsNotNull())
		{
			newrow.setColSeen(referralToSpecialtyTeamForEventHistoryVo.getSeenDateTime().toString());
		}

		if (referralToSpecialtyTeamForEventHistoryVo.getCompletionDateTimeIsNotNull())
		{
			newrow.setColCompleted(referralToSpecialtyTeamForEventHistoryVo.getCompletionDateTime().toString());
		}
		
		newrow.setValue(referralToSpecialtyTeamForEventHistoryVo);
	}

	private void addSeenByHCPRowToGrid(SeenByHcpForEventHistoryVo seenByHcp)
	{
		if (seenByHcp==null)
			return;
		
		grdSeenHCPRow newrow = form.ctnTimes().grdSeenHCP().getRows().newRow();

		if (seenByHcp.getAllocatedMedic()!=null && seenByHcp.getAllocatedMedic().getMos()!=null && seenByHcp.getAllocatedMedic().getMos().getName()!=null)
		{
			newrow.setColNurse((seenByHcp.getAllocatedMedic().getMos().getName().getSurname()!=null ? seenByHcp.getAllocatedMedic().getMos().getName().getSurname():"") + ", " + (seenByHcp.getAllocatedMedic().getMos().getName().getForename()!=null ? seenByHcp.getAllocatedMedic().getMos().getName().getForename():""));
		}
		else if (seenByHcp.getAllocatedNurse()!=null && seenByHcp.getAllocatedNurse().getMos()!=null && seenByHcp.getAllocatedNurse().getMos().getName()!=null)
		{
			newrow.setColNurse((seenByHcp.getAllocatedNurse().getMos().getName().getSurname()!=null ? seenByHcp.getAllocatedNurse().getMos().getName().getSurname():"") + ", " + (seenByHcp.getAllocatedNurse().getMos().getName().getForename()!=null ? seenByHcp.getAllocatedNurse().getMos().getName().getForename():null));
		}
		
		if (seenByHcp.getAllocatedDateTimeIsNotNull())
		{
			newrow.setColAllocated(seenByHcp.getAllocatedDateTime().toString());
		}

		if (seenByHcp.getSeenDateTimeIsNotNull())
		{
			newrow.setColSeen(seenByHcp.getSeenDateTime().toString());
		}

		if (seenByHcp.getCompletedDateTimeIsNotNull())
		{
			newrow.setColCompleted(seenByHcp.getCompletedDateTime().toString());
		}
		
		newrow.setValue(seenByHcp);
	}

	private void populateRecordBrowser()
	{
		form.recbrEmergencyAttendance().clear();
		
		EmergencyAttendanceForTimeAmendmentsLiteVoCollection attendances = domain.getPastEmergencyEpisodes(form.getGlobalContext().Core.getPatientShort());
		
		for (int i = 0; i < attendances.size(); i++)
		{
			EmergencyAttendanceForTimeAmendmentsLiteVo attendance = attendances.get(i); 
			form.recbrEmergencyAttendance().newRow(attendance, getDisplayString(attendance));
		}
		
		if(form.getLocalContext().getCurrentRecord() == null)
		{
			form.getLocalContext().setCurrentRecord(form.recbrEmergencyAttendance().getValue());
		}
		else
		{
			form.recbrEmergencyAttendance().setValue(form.getLocalContext().getCurrentRecord());
		}
	}
	
	private String getDisplayString(EmergencyAttendanceForTimeAmendmentsLiteVo attendance)
	{
		StringBuffer sb = new StringBuffer();
		
		if(attendance != null)
		{
			if(attendance.getID_EmergencyAttendance() != null)
			{
				sb.append("Attendance Id = ");
				sb.append(ConfigFlag.GEN.ED_USE_CUSTOM_ATTENDANCE_ID.getValue() ? attendance.getCustomID() : attendance.getID_EmergencyAttendance().toString());
			}			

			if (attendance.getRegistrationDateTime() != null)
			{
				sb.append("  Registration: ");
				sb.append(attendance.getRegistrationDateTime().toString());

			}
			
			if (attendance.getDischargeDateTime() != null)
			{
				sb.append("  Discharged: ");
				sb.append(attendance.getDischargeDateTime().toString());

			}
		}
		
		return sb.toString();
	}

	@Override
	protected void onRecbrEmergencyAttendanceValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setTracking(domain.getTracking(form.recbrEmergencyAttendance().getValue()));
		form.getLocalContext().setCurrentRecord(form.recbrEmergencyAttendance().getValue());
		form.getGlobalContext().Emergency.setEmergencyAttendanceForTimeAmendments(form.recbrEmergencyAttendance().getValue());
		
		if(form.recbrEmergencyAttendance().getValue() != null)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(form.getLocalContext().getCurrentRecord().getCareContext()));
		}
		form.getGlobalContext().Emergency.setTracking(form.getLocalContext().getTracking());
		
		populateScreenFromData(form.getLocalContext().getTracking());
		
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(form.getForms().Core.RieConfirmationDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				markAsRIE();
			}
		}
		
		open();
	}

	private void markAsRIE()
	{
		if (form.getLocalContext().getPatientStatusForRIE() == null)
			return;
		
		if (domain.isStale(form.getLocalContext().getPatientStatusForRIE()))
        {
        	engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        	open();
        	return;
        }
     
		try 
		{	
			if(isCurrentStatus(form.getLocalContext().getPatientStatusForRIE()))
			{
				domain.saveTrackingAndRIECurrentStatus(form.getLocalContext().getTracking(), form.getLocalContext().getPatientStatusForRIE(), engine.getFormName(), form.getGlobalContext().Core.getPatientShort(), form.recbrEmergencyAttendance().getValue() != null ? form.recbrEmergencyAttendance().getValue().getCareContext() : null, form.getGlobalContext().Core.getRieMessage());
			}
			else
			{
				domain.markAsRie(form.getLocalContext().getPatientStatusForRIE(), engine.getFormName(), form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, form.recbrEmergencyAttendance().getValue() != null ? form.recbrEmergencyAttendance().getValue().getCareContext().getID_CareContext() : null, form.getGlobalContext().Core.getRieMessage());
			}
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
	}

	@Override
	protected void onGrdMovementTimesSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAmendAttendanceMovementTimes(form.ctnTimes().grdMovementTimes().getValue());
		
		updateControlsState();
	}

	@Override
	protected void onGrdPatientStatusSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAmendAttendancePatientStatusTimes(form.ctnTimes().grdPatientStatus().getValue());
		
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.ctnTimes().btnEdit().setVisible(form.recbrEmergencyAttendance().getValue() != null);
		form.getContextMenus().Emergency.getTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem().setVisible(form.ctnTimes().grdPatientStatus().getValue() != null);
		form.getContextMenus().Emergency.getTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem().setVisible(form.ctnTimes().grdPatientStatus().getValue() != null && form.ctnTimes().grdPatientStatus().getRows().size() > 1);
		form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem().setVisible(form.ctnTimes().grdSeenHCP().getValue() instanceof SeenByHcpForEventHistoryVo);
		//form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem().setVisible(true);
		//form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuREFER_TOItem().setVisible(true);
		form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem().setVisible(form.ctnTimes().grdSeenHCP().getValue() instanceof ReferralToSpecialtyTeamForEventHistoryVo);
		form.getContextMenus().Emergency.getTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem().setVisible(form.ctnTimes().grdMovementTimes().getValue() != null);
		form.getContextMenus().Emergency.getTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem().setVisible(form.ctnTimes().grdCubicleAllocation().getValue() != null);
		form.getContextMenus().Emergency.getTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem().setVisible(form.ctnTimes().grdDNW().getValue() != null);
		form.getContextMenus().Emergency.getTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem().setVisible(form.ctnTimes().grdSentToXray().getValue() != null);
		form.getContextMenus().Emergency.getTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem().setVisible(form.ctnTimes().grdTransfer().getValue() != null);
		form.getContextMenus().Emergency.getTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem().setVisible(form.ctnTimes().grdBed().getValue() != null);
	}

	@Override
	protected void onGrdSeenHCPSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAmendAttendanceSeenByTimes(null);
		form.getGlobalContext().Emergency.setAmendAttendanceReferralToSpecialtyTimes(null);
		
		if(form.ctnTimes().grdSeenHCP().getValue() instanceof SeenByHcpForEventHistoryVo)
		{
			form.getGlobalContext().Emergency.setAmendAttendanceSeenByTimes((SeenByHcpForEventHistoryVo) form.ctnTimes().grdSeenHCP().getValue());
		}
		else if(form.ctnTimes().grdSeenHCP().getValue() instanceof ReferralToSpecialtyTeamForEventHistoryVo)
		{
			form.getGlobalContext().Emergency.setAmendAttendanceReferralToSpecialtyTimes((ReferralToSpecialtyTeamForEventHistoryVo) form.ctnTimes().grdSeenHCP().getValue());
		}
		
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsPatientStatusMenu.EDIT_PATIENT_STATUS_TIMES:
				engine.open(form.getForms().Emergency.AmentAttendancePatientStatusTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsPatientStatusMenu.MARK_AS_RIE:
				form.getLocalContext().setPatientStatusForRIE(form.ctnTimes().grdPatientStatus().getValue());
				engine.open(form.getForms().Core.RieConfirmationDialog);
			break;
				
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.EDI_SEEN_BY_HCP_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceSeenByHCPTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.EDIT_REFERRAL_TO_SPECIALTY_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceSeenByHCPTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.SEEN_COMPLETE_HCP:
				//engine.open(form.getForms().Emergency.EDSeenByAndCompleteDialog);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.REFER_TO:
				//engine.open(form.getForms().Emergency.EDReferralToSpecialtyDialog);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsMovementTimesMenu.EDIT_MOVOMENT_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceMovementTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsCubicleAllocationMenu.EDIT_CUBICLE_ALLOCATION_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceCubicleAllocationTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsDNWTimesMenu.EDIT_DNW_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceDNWTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSentToXrayMenu.EDIT_SENT_TO_XRAY_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceSentToXrayTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsTransferMenu.EDIT_TRANSFER_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceTransferTimes);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsBedAvailabilityMenu.EDIT_BED_AVAILABILITY_TIME:
				engine.open(form.getForms().Emergency.AmentAttendanceBedAvailabilityTimes);
			break;
		}
	}

	@Override
	protected void onGrdCubicleAllocationSelectionChanged() throws PresentationLogicException
	{
		if(form.ctnTimes().grdCubicleAllocation().getValue() != null)
		{
			form.getGlobalContext().Emergency.setAmendAttendanceCubicleAllocationTimes(form.ctnTimes().grdCubicleAllocation().getValue());
		}
		
		updateControlsState();
	}

	@Override
	protected void onGrdDNWSelectionChanged() throws PresentationLogicException
	{
		if(form.ctnTimes().grdDNW().getValue() != null)
		{
			form.getGlobalContext().Emergency.setAmendAttendanceDNWTimes(form.ctnTimes().grdDNW().getValue());
		}
		
		updateControlsState();
	}

	@Override
	protected void onGrdSentToXraySelectionChanged() throws PresentationLogicException
	{
		if(form.ctnTimes().grdSentToXray().getValue() != null)
		{
			form.getGlobalContext().Emergency.setAmendAttendanceSentToXrayTimes(form.ctnTimes().grdSentToXray().getValue());
		}
		
		updateControlsState();
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAmendAttendanceTimes(form.getLocalContext().getTracking());
		engine.open(form.getForms().Emergency.AmendAttendanceTimesDialog);
	}

	@Override
	protected void onGrdTransferSelectionChanged() throws PresentationLogicException
	{
		if(form.ctnTimes().grdTransfer().getValue() != null)
		{
			form.getGlobalContext().Emergency.setAmendAttendanceTransferTimes(form.ctnTimes().grdTransfer().getValue());
		}
		
		updateControlsState();
	}

	@Override
	protected void onGrdBedSelectionChanged() throws PresentationLogicException
	{
		if(form.ctnTimes().grdBed().getValue() != null)
		{
			form.getGlobalContext().Emergency.setAmendAttendanceBedAvailabilityTimes(form.ctnTimes().grdBed().getValue());
		}
		
		updateControlsState();
	}
}
