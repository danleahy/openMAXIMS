//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.emergencyattendancetimeamendments;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdBedSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdTransferSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSentToXraySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDNWSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdCubicleAllocationSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdMovementTimesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPatientStatusSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSeenHCPSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRecbrEmergencyAttendanceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.ctnTimes().grdBed().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdBedSelectionChanged();
			}
		});
		this.form.ctnTimes().grdTransfer().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdTransferSelectionChanged();
			}
		});
		this.form.ctnTimes().btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.ctnTimes().grdSentToXray().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSentToXraySelectionChanged();
			}
		});
		this.form.ctnTimes().grdDNW().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDNWSelectionChanged();
			}
		});
		this.form.ctnTimes().grdCubicleAllocation().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdCubicleAllocationSelectionChanged();
			}
		});
		this.form.ctnTimes().grdMovementTimes().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdMovementTimesSelectionChanged();
			}
		});
		this.form.ctnTimes().grdPatientStatus().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPatientStatusSelectionChanged();
			}
		});
		this.form.ctnTimes().grdSeenHCP().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSeenHCPSelectionChanged();
			}
		});
		this.form.recbrEmergencyAttendance().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRecbrEmergencyAttendanceValueChanged();
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsBedAvailabilityMenuEDIT_BED_AVAILABILITY_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsBedAvailabilityMenu.EDIT_BED_AVAILABILITY_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsTransferMenuEDIT_TRANSFER_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsTransferMenu.EDIT_TRANSFER_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsSentToXrayMenuEDIT_SENT_TO_XRAY_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSentToXrayMenu.EDIT_SENT_TO_XRAY_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsDNWTimesMenuEDIT_DNW_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsDNWTimesMenu.EDIT_DNW_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsCubicleAllocationMenuEDIT_CUBICLE_ALLOCATION_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsCubicleAllocationMenu.EDIT_CUBICLE_ALLOCATION_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsMovementTimesMenuEDIT_MOVOMENT_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsMovementTimesMenu.EDIT_MOVOMENT_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsMovementTimesMenuMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsMovementTimesMenu.MOVE, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsPatientStatusMenuEDIT_PATIENT_STATUS_TIMESItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsPatientStatusMenu.EDIT_PATIENT_STATUS_TIMES, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsPatientStatusMenuMARK_AS_RIEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsPatientStatusMenu.MARK_AS_RIE, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuEDI_SEEN_BY_HCP_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.EDI_SEEN_BY_HCP_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuEDIT_REFERRAL_TO_SPECIALTY_TIMEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.EDIT_REFERRAL_TO_SPECIALTY_TIME, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuSEEN_COMPLETE_HCPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.SEEN_COMPLETE_HCP, sender);
			}
		});
		this.form.getContextMenus().Emergency.getTimeAmendmentsSeenByHCPMenuREFER_TOItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.TimeAmendmentsSeenByHCPMenu.REFER_TO, sender);
			}
		});
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
