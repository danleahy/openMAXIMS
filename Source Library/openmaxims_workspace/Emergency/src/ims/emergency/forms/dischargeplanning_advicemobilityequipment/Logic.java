//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.dischargeplanning_advicemobilityequipment;


import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientMobility;
import ims.core.vo.lookups.PatientMobilityCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabMobilityAndEquipmentContainer.grdEquipmentRow;
import ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabMobilityAndEquipmentContainer.grdMobilityRow;
import ims.emergency.vo.AdviceLeafletConfigDisplayVo;
import ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection;
import ims.emergency.vo.AdviceLeafletsForSelectAndPrinterVo;
import ims.emergency.vo.AdviceLeafletsForSelectAndPrinterVoCollection;
import ims.emergency.vo.DischargeServicesAndAdviceForDischargePlanningVo;
import ims.emergency.vo.EmergencyAttendanceForDischargeLetterVo;
import ims.emergency.vo.InterventionTreatmentDetailForAdviceLeafletVo;
import ims.emergency.vo.InterventionTreatmentDetailForAdviceLeafletVoCollection;
import ims.emergency.vo.InterventionsTreatmentForAdviceLeafletVo;
import ims.emergency.vo.TreatmentInterventionForAdviceLeafletVo;
import ims.emergency.vo.enums.DischargeDetails_CustomEvents;
import ims.emergency.vo.lookups.Dischargequipment;
import ims.emergency.vo.lookups.DischargequipmentCollection;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	//WDEV-19375
	private String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
	private String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
	
	private static final Integer ED_DISCHARGE_IMS_ID = 346;
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.CANCEL);
		form.fireCustomControlValueChanged();
		
		open();
		form.lyrAdviceMobility().showtabAdvice();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.SAVE);
		form.fireCustomControlValueChanged();
		
		form.getLocalContext().setRecord(populateDataFromInstanceControls(form.getLocalContext().getRecord()));
		form.getLocalContext().setCurrentEmergencyAttendance(populateEmergencyAttendanceDataFromScreen(form.getLocalContext().getCurrentEmergencyAttendance())); //WDEV-19375 //WDEV-19398
		
		if ( !isFormPopulated())
		{
			//WDEV-18103
			engine.showMessage("There is no data entered to save. Please enter some data on either 'Advice' or 'Mobility and Equipment' or 'Discharge Letter' tabs and save again."); //WDEV-19398
			return;
		}
		if( save())
		{
			open();
			
		}
	}
	public boolean save() throws PresentationLogicException
	{
		try
		{
			// Get data from screen
			form.getLocalContext().setRecord(populateDataFromInstanceControls(form.getLocalContext().getRecord()));
			
			EmergencyAttendanceForDischargeLetterVo emergencyAttendanceToSave=form.getLocalContext().getCurrentEmergencyAttendance(); //WDEV-19375 //WDEV-19398
			
			// Validate data
			String[] errors = form.getLocalContext().getRecord().validate(emergencyAttendanceToSave.validate());//WDEV-17822 //WDEV-19375

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt to save data to database
			form.getLocalContext().setRecord(domain.save(form.getLocalContext().getRecord(),null,emergencyAttendanceToSave)); //WDEV-19375

			return true;
		}
		// Treat any errors that might arise
		catch (StaleObjectException e)
		{
			e.printStackTrace();

			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialize();
			open();
			form.lyrAdviceMobility().showtabAdvice();
			return false;
		}
	}
	
	//WDEV-19375
	private EmergencyAttendanceForDischargeLetterVo populateEmergencyAttendanceDataFromScreen(EmergencyAttendanceForDischargeLetterVo currentEmergencyAttendance)
	{
		currentEmergencyAttendance.setAttendanceDischargeComment(form.lyrAdviceMobility().tabDischargeLetter().richTextAttSummary().getText());
		currentEmergencyAttendance.setAttendanceSupplementaryComment(form.lyrAdviceMobility().tabDischargeLetter().richTextSupplementary().getText());
		currentEmergencyAttendance.setIsDischargeLetterRequired(!form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().isVisible() ? Boolean.TRUE : form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().getValue()); //WDEV-19401
		
		return currentEmergencyAttendance;
	}

	//WDEV-17822
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.lyrAdviceMobility().tabDischargeLetter().richTextActionsCommentsAdvice().getValue()==null)//WDEV-19375
		{
			errors.add("'Actions, Comments and advice for GP' is mandatory!");
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private DischargeServicesAndAdviceForDischargePlanningVo populateDataFromInstanceControls(DischargeServicesAndAdviceForDischargePlanningVo record)
	{
		// If no record exist then create and initialize one
		if (record == null)
		{
			record = new DischargeServicesAndAdviceForDischargePlanningVo();
			
			record.setPatient(form.getGlobalContext().Core.getPatientShort());
			record.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			record.setAttendance(form.getLocalContext().getCareContext());
		}
		
		// Get selected PatientMobility values
		record.setPatientMobility(new PatientMobilityCollection());
		
		for (int i = 0; i < form.lyrAdviceMobility().tabMobilityAndEquipment().grdMobility().getRows().size(); i++)
		{
			ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabMobilityAndEquipmentContainer.grdMobilityRow row = form.lyrAdviceMobility().tabMobilityAndEquipment().grdMobility().getRows().get(i);
			
			if (row.getColSelect())
			{
				record.getPatientMobility().add(row.getValue());
			}
		}
		
		// Get Transport details
		record.setTransportArrangedType(form.lyrAdviceMobility().tabMobilityAndEquipment().cmbTransportType().getValue());
		record.setTransportDateTime(form.lyrAdviceMobility().tabMobilityAndEquipment().dtimTransport().getValue());
		record.setBookingNo(form.lyrAdviceMobility().tabMobilityAndEquipment().txtBookingNo().getValue());
		
		// Get selected Equipment values
		record.setEquipment(new DischargequipmentCollection());
		
		for (int i = 0; i < form.lyrAdviceMobility().tabMobilityAndEquipment().grdEquipment().getRows().size(); i++)
		{
			ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabMobilityAndEquipmentContainer.grdEquipmentRow row = form.lyrAdviceMobility().tabMobilityAndEquipment().grdEquipment().getRows().get(i);
			
			if (row.getColSelect())
			{
				record.getEquipment().add(row.getValue());
			}
		}
		
		// Get overall Comments
		record.setComments(form.lyrAdviceMobility().tabDischargeLetter().richTextActionsCommentsAdvice().getValue());//WDEV-19375
		
		return record;
	}
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		updateInstance();
	}
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		newInstance();
	}
	public void newInstance() throws PresentationLogicException
	{
		// Set form in EDIT mode
		form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().setValue(true); //WDEV-19375
		form.setMode(FormMode.EDIT);
	}
	protected void onBtnPrintAdviceClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		selectPrinter();
	}
	private void selectPrinter()
	{
		engine.open(form.getForms().Admin.SelectPrinterDialog);
	}
	
	protected void onGrdAdviceLefletGridCheckBoxClicked(int column, ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabAdviceContainer.grdAdviceLefletRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		//WDEV-20437
		if (column ==1 ) //If column is For print, ishould clear all selection from Given Column 
		{
			clearSelectedPrePrintedAdviceLeafletToBeGiven();
		}
		else if (column==2)
		{
			clearSelectedAdviceLeafletToBePrinted();
		}
	
		updateControlsState();
	}
	
	//WDEV-20437
	private void clearSelectedAdviceLeafletToBePrinted()
	{
		for (int i = 0; i < form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().size(); i++)
		{
			if( form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getColSelect() == true)
				form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).setColSelect(false);
			
		}
	}

	//WDEV-20437
	private void clearSelectedPrePrintedAdviceLeafletToBeGiven()
	{
		for (int i = 0; i < form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().size(); i++)
		{
			if(form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getValue().getTemplate()==null && form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getColumnGiven() == true && !isPrePrintedAdviceLeafletGiven(form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getValue(),form.getLocalContext().getRecord(),null))
				form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).setColumnGiven(false);
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.ContextMenus.EmergencyNamespace.DischargeAdviceLeaflet.Preview:

				form.getLocalContext().setCustomEvent(null);
				
				previewReport();
				break;
		}
	}
	private void previewReport() 
	{
		String result = "";
		
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		
		if( form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getSelectedRow().getValue() instanceof AdviceLeafletConfigDisplayVo)
		{
			result = previewAdviceLeafletReport(form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getSelectedRow().getValue(), urlReportServer, client); 
		}
		if(result != "")
		{
			engine.openUrl(result);
		}
	}
	private String previewAdviceLeafletReport(AdviceLeafletConfigDisplayVo valuerow, String urlReportServer, QueryBuilderClient client) 
	{
		String result = "";
		
		if(urlReportServer == null)
			urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		if(client == null)
			client = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());
		
		// Get Report and Template from database
		String report[] = domain.getReportAndTemplate(valuerow.getTemplate());

		
		
		if(report == null || report.length < 2)
		{
			engine.showMessage("I could not get the report and template for selected advice lealfet! ");
			return result;
		}

		if(report[0] == null || report[1] == null)
		{
			engine.showMessage("The report for selected advice leaflet has not been deployed !");
			return result;
		}
		
		//OrderInvestigationRefVo refDFTInv = (OrderInvestigationRefVo) row.getValue();
		//client.addSeed(new SeedValue("OrderInvestigation_id", refDFTInv.getID_OrderInvestigation(), Integer.class));
		
		try
		{
			result = client.buildReportAsUrl(report[0], report[1], urlReportServer, "PDF", "",1);
			client.getSeeds().clear();
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return result;
		}
		
		return result;
	}
	public void initialize()
	{
		form.lyrAdviceMobility().tabAdvice().setHeaderVisible(true);
		form.lyrAdviceMobility().tabMobilityAndEquipment().setHeaderVisible(true);
		
		// Bind PatientMobility grid
		bindPatientMobilityGrid();
		
		// Bind Equipment Provided grid
		bindEquipmentProvided();
	}

	public void setValue(ims.clinical.configuration.vo.ClinicalProblemRefVo clinicalProblem, ims.core.admin.vo.CareContextRefVo careContext)
	{
		// Initialize the form
		initialize();
		
		// Set local context for problem
		form.getLocalContext().setCareContext(careContext);
		
		// Set local context for CareContext
		form.getLocalContext().setMainProblem(clinicalProblem);
		
		form.getLocalContext().setCurrentEmergencyAttendance(domain.getEmergencyAttendance(careContext));//WDEV-19375
		
		// Present form to screen
		open();
	}
	public void clear()
	{
		// Clear 'Advice Leaflet' grid
		form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().clear();
		
		// Clear instance controls
		clearInstanceControls();
	}
	public void clearInstanceControls()
	{
		// Clear patient mobility
		for (int i = 0; i < form.lyrAdviceMobility().tabMobilityAndEquipment().grdMobility().getRows().size(); i++)
		{
			form.lyrAdviceMobility().tabMobilityAndEquipment().grdMobility().getRows().get(i).setColSelect(false);
		}
		
		// Clear Transport Details
		form.lyrAdviceMobility().tabMobilityAndEquipment().cmbTransportType().setValue(null);
		form.lyrAdviceMobility().tabMobilityAndEquipment().dtimTransport().setValue(null);
		form.lyrAdviceMobility().tabMobilityAndEquipment().txtBookingNo().setValue(null);
		
		// Clear Equipment provided
		for (int i = 0; i < form.lyrAdviceMobility().tabMobilityAndEquipment().grdEquipment().getRows().size(); i++)
		{
			form.lyrAdviceMobility().tabMobilityAndEquipment().grdEquipment().getRows().get(i).setColSelect(false);
		}
		
		// Clear comments
		//WDEV-19375
		form.lyrAdviceMobility().tabDischargeLetter().richTextActionsCommentsAdvice().setValue(null);
		form.lyrAdviceMobility().tabDischargeLetter().richTextAttSummary().setValue(null);
		form.lyrAdviceMobility().tabDischargeLetter().richTextSupplementary().setValue(null);
		form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().setValue(null);
	}
	
	public void open()
	{
		// Clear screen
		clear();
		
		form.getLocalContext().setRecord(domain.getDischargeServiceAndAdvice(form.getLocalContext().getCareContext()));
		form.getLocalContext().setCurrentEmergencyAttendance(domain.getEmergencyAttendance(form.getLocalContext().getCareContext())); //WDEV-19375
		
		// Populate advice leaflets
		populateAdviceLeaflets(domain.getAdviceLeaflets(form.getLocalContext().getMainProblem()));
		
		// Populate instance controls
		
		populateInstanceControls(form.getLocalContext().getRecord());

		// Set form in VIEW mode
		form.setMode(FormMode.VIEW);
		updateControlsState();
	}
	
	//WDEV-19375
	private void populatePreviewTab()
	{
		String url = buildReport(true);
		form.getLocalContext().setbPreviewTabPopulated(Boolean.TRUE);
//WDEV-21227		form.lyrAdviceMobility().tabPreview().htmPreview().setHTML("<p align='center'>" + url );
	}

	//WDEV-19375
	private String buildReport(boolean buildAsURL)
	{		
		CareContextRefVo currentCareContext = form.getLocalContext().getCareContext();
		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		String url = "";
			
		obj = domain.getSystemReportAndTemplate(ED_DISCHARGE_IMS_ID);
		client.addSeed(new SeedValue("CareContext_id",  currentCareContext.getID_CareContext(), Integer.class));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return "";
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return "";
		}
				
		try
		{
			if (buildAsURL)
			{	
				url =  client.buildReportAsUrlInlineFrame((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
			}
			else
			{
				url = client.buildReportAndUpload(getMaximsDocumentStorePath(),(String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, (String) form.getGlobalContext().Admin.getSelectedPrinter().getIPrinterName(), 1);
			}

		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return "";
		}
				
		if (url != null)
		{
			return url;
		}
		return "";
	}
	
	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.PDF_STORE_PATH.getValue();	
		
		if(!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";
				
		return storePath;
	}
	private void populateInstanceControls(DischargeServicesAndAdviceForDischargePlanningVo record)
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Check parameter
		if (record == null)
			return;
		

		// Populate patient mobility
		if (record.getPatientMobilityIsNotNull())
		{
			for (int i = 0; i < record.getPatientMobility().size(); i++)
			{
				ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabMobilityAndEquipmentContainer.grdMobilityRow row = form.lyrAdviceMobility().tabMobilityAndEquipment().grdMobility().getRowByValue(record.getPatientMobility().get(i));
				
				if (row != null) row.setColSelect(true);
			}
		}
		
		// Populate Transport details
		form.lyrAdviceMobility().tabMobilityAndEquipment().cmbTransportType().setValue(record.getTransportArrangedType());
		form.lyrAdviceMobility().tabMobilityAndEquipment().dtimTransport().setValue(record.getTransportDateTime());
		form.lyrAdviceMobility().tabMobilityAndEquipment().txtBookingNo().setValue(record.getBookingNo());
		
		// Populate Equipment type
		if (record.getEquipmentIsNotNull())
		{
			for (int i = 0; i < record.getEquipment().size(); i++)
			{
				ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabMobilityAndEquipmentContainer.grdEquipmentRow row = form.lyrAdviceMobility().tabMobilityAndEquipment().grdEquipment().getRowByValue(record.getEquipment().get(i));
				
				if (row != null) row.setColSelect(true);
			}
		}
		
		// Populate Comments
		//WDEV-19375
		form.lyrAdviceMobility().tabDischargeLetter().richTextActionsCommentsAdvice().setValue(record.getComments());
		form.lyrAdviceMobility().tabDischargeLetter().richTextAttSummary().setValue(form.getLocalContext().getCurrentEmergencyAttendance().getAttendanceDischargeComment());
		form.lyrAdviceMobility().tabDischargeLetter().richTextSupplementary().setValue(form.getLocalContext().getCurrentEmergencyAttendance().getAttendanceSupplementaryComment());
		form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().setValue(form.getLocalContext().getCurrentEmergencyAttendance().getIsDischargeLetterRequired());
	}

	private void populateAdviceLeaflets(AdviceLeafletConfigDisplayVoCollection adviceLeaflets)
	{
		// Clear advice leaflet grid
		form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().clear();
		
		// Check advice collection parameter
		if (adviceLeaflets == null)
			return;
		
		adviceLeaflets.sort(new AdviceLeafletComparator(SortOrder.ASCENDING)); //WDEV-20437
		
		for (AdviceLeafletConfigDisplayVo advice : adviceLeaflets)
		{
			ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabAdviceContainer.grdAdviceLefletRow row = form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().newRow();
			
			row.setColAdvice(advice.getTemplate()!=null ? advice.getTemplate().getName() : advice.getAdviceLeafletName()); //WDEV-20437
			row.setCellColAdviceTooltip(advice.getTemplate()!=null ? advice.getTemplate().getName() : advice.getAdviceLeafletName()); //WDEV-20437
			
			row.setColSelect(false);
			
			//WDEV-20437
			if (advice.getTemplate()!=null)
			{
				row.setColumnGiven(isAdiceLeafletsPrinted(advice,form.getLocalContext().getRecord(),row));
				row.setColumnGivenReadOnly(true);
			}
			else
			{
				boolean isPrePrintedGiven = isPrePrintedAdviceLeafletGiven(advice,form.getLocalContext().getRecord(),row);
				row.setColumnGiven(isPrePrintedGiven);
				row.setColumnGivenReadOnly(isPrePrintedGiven);
			}
			
			if (advice.getTemplate()==null) //WDEV-20437
			{
				row.setCellColSelectTooltip("This is Pre-Printed Advice Leaflet and cannot be printed. ");
				row.setColSelectReadOnly(true);
			}
			
			row.setValue(advice);
		}
	}
	//wdev-17075
	private boolean isAdiceLeafletsPrinted(AdviceLeafletConfigDisplayVo advice, DischargeServicesAndAdviceForDischargePlanningVo record,ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabAdviceContainer.grdAdviceLefletRow row)
	{
		if( advice == null  )
			return false;
		if( record == null || !record.getAdviceLeafletsPrintedIsNotNull() || record.getAdviceLeafletsPrinted().size() == 0)
			return false;
		
		for( int i = 0 ; i < record.getAdviceLeafletsPrinted().size();i++)
		{
			if( advice.getTemplateIsNotNull() && record.getAdviceLeafletsPrinted().get(i).getTemplateIsNotNull())
			{
				if( advice.getTemplate().getID_TemplateBo().equals(record.getAdviceLeafletsPrinted().get(i).getTemplate().getID_TemplateBo()))
				{
					row.setCellColumnGivenTooltip("Given Date: " + record.getAdviceLeafletsPrinted().get(i).getDateGiven().toString()+ ", Authoring HCP: "+ record.getAdviceLeafletsPrinted().get(i).getAuthoringHCP().getName().toString());
					return true;
				}
			}
		}
		
		return false;
		
	}
	
	//WDEV-20437
	private boolean isPrePrintedAdviceLeafletGiven(AdviceLeafletConfigDisplayVo advice, DischargeServicesAndAdviceForDischargePlanningVo record,ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabAdviceContainer.grdAdviceLefletRow row)
	{
		if( advice == null  )
			return false;
		if( record == null || record.getPrePrintedAdviceLeafletsGiven()==null || record.getPrePrintedAdviceLeafletsGiven().size() == 0)
			return false;
		
		for( int i = 0 ; i < record.getPrePrintedAdviceLeafletsGiven().size();i++)
		{
			if( advice.getAdviceLeafletNameIsNotNull()&& record.getPrePrintedAdviceLeafletsGiven().get(i).getAdviceLeafletNameIsNotNull())
			{
				if( advice.getAdviceLeafletName().equals(record.getPrePrintedAdviceLeafletsGiven().get(i).getAdviceLeafletName()))
				{
					if (row!=null)
					{
						row.setCellColumnGivenTooltip("Given Date: " + record.getPrePrintedAdviceLeafletsGiven().get(i).getDateGiven().toString()+ ", Authoring HCP: "+ record.getPrePrintedAdviceLeafletsGiven().get(i).getAuthoringHCP().getName().toString());
					}
					return true;
				}
			}
		}
		
		return false;
		
	}
	
	//----------
	public void setReadOnly(Boolean readOnly)
	{
		form.getLocalContext().setReadOnly(readOnly);
		
		updateControlsState();
	}
	private boolean isAdviceSelected()
	{
		for (int i = 0; i < form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().size(); i++)
		{
			if( form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getColSelect() == true)
				return true;
		}

		return false;
	}

	public void updateControlsState()
	{
		if( FormMode.VIEW.equals(form.getMode()))
		{
	   		form.btnNew().setVisible(true);
    		form.btnNew().setEnabled(!Boolean.TRUE.equals(form.getLocalContext().getReadOnly()) 
    				&& (form.getLocalContext().getRecord() == null ||  (form.getLocalContext().getRecordIsNotNull() && !isFormPopulated())) );  //wdev-17350
    		
     		form.btnEdit().setVisible((form.getLocalContext().getRecordIsNotNull() && isFormPopulated()));
    		form.btnEdit().setEnabled(!Boolean.TRUE.equals(form.getLocalContext().getReadOnly()));
    		
    		form.btnPreview().setVisible((form.getLocalContext().getRecordIsNotNull() && isFormPopulated()));
    		form.btnPrint().setVisible((form.getLocalContext().getRecordIsNotNull() && isFormPopulated()));
    		
    		boolean adviceSelected = isAdviceSelected();

    		form.lyrAdviceMobility().tabAdvice().btnPrintAdvice().setVisible(true);
    		form.lyrAdviceMobility().tabAdvice().btnPrintAdvice().setEnabled(!Boolean.TRUE.equals(form.getLocalContext().getReadOnly()) && adviceSelected);
    		
    		form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().setReadOnly(Boolean.TRUE.equals(form.getLocalContext().getReadOnly())); //wdev-16751
    		
    		// Also the context menu print option
    		form.getContextMenus().Emergency.getDischargeAdviceLeafletPreviewItem().setVisible(form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getValue() != null && form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getValue().getTemplate()!= null); //WDEV-20437
    		form.getContextMenus().Emergency.getDischargeAdviceLeafletPreviewItem().setEnabled(form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getValue() != null && form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getValue().getTemplate()!= null); //WDEV-20437
		}
		
		//WDEV-19375
		form.lyrAdviceMobility().tabDischargeLetter().richTextActionsCommentsAdvice().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().getValue());
		form.lyrAdviceMobility().tabDischargeLetter().richTextAttSummary().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().getValue());
		form.lyrAdviceMobility().tabDischargeLetter().richTextSupplementary().setEnabled(FormMode.EDIT.equals(form.getMode()) && DischargeLetterStatus.GENERATED.equals(form.getLocalContext().getCurrentEmergencyAttendance().getDischargeLetterStatus())); //WDEV-19441
		
		form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().setVisible(ConfigFlag.UI.ED_SHOW_DISCHARGE_LETTER_REQUIRED_INDICATOR.getValue()); //WDEV-19401
		form.lyrAdviceMobility().tabDischargeLetter().chkDischargeLetterRequired().setEnabled(FormMode.EDIT.equals(form.getMode()));
//		form./*lyrAdviceMobility().Preview().*/btnPrint().setVisible(Boolean.TRUE.equals(form.getLocalContext().getbPreviewTabPopulated())); 
//		form./*lyrAdviceMobility().tabPreview().*/btnPrint().setEnabled(FormMode.VIEW.equals(form.getMode()) && Boolean.TRUE.equals(form.getLocalContext().getbPreviewTabPopulated()));
		//----------------end WDEV-19401
		
		//WDEV-20437
		form.lyrAdviceMobility().tabAdvice().btnPrintAdvice().setVisible(FormMode.VIEW.equals(form.getMode()) && isAdviceSelected());
		form.lyrAdviceMobility().tabAdvice().btnMarkAsGivenPrePrintedLeaflets().setVisible(FormMode.VIEW.equals(form.getMode()) && isPrePrintedAdviceLeafletSelectedToBeGiven());
	}

	//WDEV-20437
	private boolean isPrePrintedAdviceLeafletSelectedToBeGiven()
	{
		for (int i = 0; i < form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().size(); i++)
		{
			if(form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getValue().getTemplate()==null && form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getColumnGiven() == true && !isPrePrintedAdviceLeafletGiven(form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getValue(),form.getLocalContext().getRecord(),null))
				return true;
		}

		return false;
	}

	private boolean isFormPopulated() 
	{
		if (form.getLocalContext().getRecord() == null)
			return false;

		if (form.getLocalContext().getRecord().getPatientMobilityIsNotNull()
			&& form.getLocalContext().getRecord().getPatientMobility().size() >0)
			return true;
		
		//WDEV-19398
		if (form.getLocalContext().getRecord().getTransportArrangedTypeIsNotNull()
			|| (form.getLocalContext().getRecord().getCommentsIsNotNull() && form.getLocalContext().getRecord().getComments()!="")
			|| form.getLocalContext().getRecord().getTransportDateTimeIsNotNull()
			|| form.getLocalContext().getRecord().getBookingNoIsNotNull()
			|| (form.getLocalContext().getCurrentEmergencyAttendanceIsNotNull() && form.getLocalContext().getCurrentEmergencyAttendance().getAttendanceDischargeCommentIsNotNull() && form.getLocalContext().getCurrentEmergencyAttendance().getAttendanceDischargeComment()!="")
			|| (form.getLocalContext().getCurrentEmergencyAttendanceIsNotNull() && form.getLocalContext().getCurrentEmergencyAttendance().getAttendanceSupplementaryCommentIsNotNull() && form.getLocalContext().getCurrentEmergencyAttendance().getAttendanceSupplementaryComment()!="")
			)
		{
			return true;
		}
		
		if (form.getLocalContext().getRecord().getEquipmentIsNotNull()
			&& form.getLocalContext().getRecord().getEquipment().size() > 0)
			return true;

		return false;
	}

	public ims.emergency.vo.enums.DischargeDetails_CustomEvents getCustomEvent()
	{
		return form.getLocalContext().getCustomEvent();//WDEV-17337
	}

	public void clearCustomEvent()
	{
		form.getLocalContext().setCustomEvent(null);
	}
	/**
	 * Function used to bind Patient Mobility lookup to grid
	 */
	private void bindPatientMobilityGrid()
	{
		// Clear grid
		form.lyrAdviceMobility().tabMobilityAndEquipment().grdMobility().getRows().clear();
		
		// Get PatientMobility values
		PatientMobilityCollection values = LookupHelper.getPatientMobility(domain.getLookupService());
		
		// Add each Patient Mobility to grid
		if (values != null)
		{
			for (int i = 0; i < values.size(); i++)
			{
				PatientMobility mobility = values.get(i);
				
				grdMobilityRow row = form.lyrAdviceMobility().tabMobilityAndEquipment().grdMobility().getRows().newRow();
				
				row.setColMobility(mobility.getText());
				row.setColMobilityReadOnly(false);
				
				row.setValue(mobility);
			}
		}
	}


	/**
	 * Function used to bind Equipment Provided lookup to grid
	 */
	private void bindEquipmentProvided()
	{
		// Clear grid
		form.lyrAdviceMobility().tabMobilityAndEquipment().grdEquipment().getRows().clear();
		
		// Get Equipment values
		DischargequipmentCollection values = ims.emergency.vo.lookups.LookupHelper.getDischargequipment(domain.getLookupService());

		// Add each Equipment to grid
		if (values != null)
		{
			for (int i = 0; i < values.size(); i++)
			{
				Dischargequipment equipment = values.get(i);
				
				grdEquipmentRow row = form.lyrAdviceMobility().tabMobilityAndEquipment().grdEquipment().getRows().newRow();
				
				row.setColEquipment(equipment.getText());
				row.setColEquipmentReadOnly(false);
				
				row.setValue(equipment);
			}
		}
	}

	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
	}

	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV-19401 - redisplaying PDF preview
//WDEV-21227		if (form.getForms().Admin.SelectPrinterDialog.equals(formName) && form.lyrAdviceMobility().tabPreview().isVisible())
//		{
//			populatePreviewTab();
//			form.lyrAdviceMobility().tabPreview().htmPreview().setVisible(Boolean.TRUE);
//		}
		// Check if printing is necessary
		if (form.getForms().Admin.SelectPrinterDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			//WDEV-19401
			if (Boolean.TRUE.equals(form.getLocalContext().getIsPrintingDischargeSummary()))
			{
				printDischargeSummaryAndSavePatientDocument();
				form.getLocalContext().setCurrentEmergencyAttendance(domain.getEmergencyAttendance(form.getLocalContext().getCareContext())); //WDEV-19441
				form.getLocalContext().setIsPrintingDischargeSummary(null);	
				return;
				
			}
			form.getLocalContext().setIsPrintingOk(Boolean.FALSE);		//wdev-17075
			form.getLocalContext().setPrintedAdviceLeaflets(null);		//wdev-17075
			printSelectedAdviceLeaflets();
			//wdev-17075
			if( Boolean.TRUE.equals(form.getLocalContext().getIsPrintingOk()))
			{
				if( saveAdviceLeafletPrinted(form.getLocalContext().getRecord()))
				{
					open();
					form.lyrAdviceMobility().showtabAdvice();
				}
				
				
			}
			//------------
		}
		
		//WDEV-17337
		if (DialogResult.OK.equals(result))
		{
			form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.SAVE);
			form.fireCustomControlValueChanged();
		}
		else
		{
			form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.CANCEL);
			form.fireCustomControlValueChanged();
		}
		
	}
	private void printDischargeSummaryAndSavePatientDocument()
	{
		//WDEV-19401
		String serverDocument = buildReport(false);
		if (serverDocument.length() == 0)
		{	
			engine.showMessage("The generated server document size is zero.");
			return;
		}	
		PatientDocumentVo patDoc = populatePatientDocument(serverDocument);
		
		//WDEV-19441
		EmergencyAttendanceForDischargeLetterVo emergencyAttendanceToSave=form.getLocalContext().getCurrentEmergencyAttendance();
		emergencyAttendanceToSave.setDischargeLetterStatus(DischargeLetterStatus.GENERATED); 
		
		if (patDoc.validate(emergencyAttendanceToSave.validate()) != null)
		{
			engine.showErrors(patDoc.validate(emergencyAttendanceToSave.validate()));
			return;
		}	
		
		try
		{
			domain.savePatientDocument(patDoc,emergencyAttendanceToSave); //WDEV-19441
		}
		
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			StringBuilder path = new StringBuilder();
			
			path.append(getMaximsDocumentStorePath());
			
			path.append(patDoc.getServerDocument().getFileName());
			
			// Attempt to delete uploaded document if stale occurs
			File file = new File(path.toString());
			
			if (file.exists() && file.canWrite())
				file.delete();
			
			return;			
		}
		
	}
	//WDEV-19401
	private PatientDocumentVo populatePatientDocument(String serverDocument)
	{
		if (serverDocument == null || serverDocument.length() == 0)
			return null;
		
		MemberOfStaffRefVo mosRef = (MemberOfStaffRefVo) domain.getMosUser();
		
		PatientDocumentVo patDoc = new PatientDocumentVo();
		
		patDoc.setName("ED Discharge Summary Report - " + form.getGlobalContext().Core.getPatientShort().getName().toProperCase());
		patDoc.setRecordingDateTime(new DateTime());
		patDoc.setRecordingUser(mosRef);
		patDoc.setAuthoringDateTime(new DateTime());
		patDoc.setAuthoringHCP((HcpRefVo) domain.getHcpLiteUser());
		patDoc.setCareContext(form.getLocalContext().getCareContext());
		patDoc.setEpisodeofCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patDoc.setSpecialty(form.getGlobalContext().Core.getEpisodeofCareShort() != null ? form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty() : null);
		
		patDoc.setPatient(form.getGlobalContext().Core.getPatientShort());
		patDoc.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		
		PatientDocumentStatusVo patDocStatus = new PatientDocumentStatusVo();
		
		patDocStatus.setCorrespondenceStatus(DocumentStatus.COMPLETED);
		patDocStatus.setRecordingDateTime(new DateTime());
		patDocStatus.setRecordingUser(mosRef);
		patDoc.setCurrentDocumentStatus(patDocStatus);
		
		ServerDocumentVo serverDocVo = new ServerDocumentVo();
		
		serverDocVo.setFileName(serverDocument);
		serverDocVo.setFileType(FileType.PDF);
		patDoc.setServerDocument(serverDocVo);
		
		patDoc.setCategory(DocumentCategory.DISCHARGE_SUMMARY);
		
		
		return patDoc;
	}

	//wdev-17075
	private InterventionsTreatmentForAdviceLeafletVo populateInterventionTreatment()
	{
		
		InterventionsTreatmentForAdviceLeafletVo interVo = null;
		TreatmentInterventionForAdviceLeafletVo tempVo = domain.getTreatmentIntervention(TaxonomyType.MAXIMS_INTERNAL, "ADVICE_LEAFLET");
		if( tempVo != null)
		{
			interVo = domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext());
			if( interVo == null )
			{
				interVo = new InterventionsTreatmentForAdviceLeafletVo();
				interVo.setPatient(form.getGlobalContext().Core.getPatientShort());
				interVo.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
				interVo.setAttendance(form.getLocalContext().getCareContext());
			}
			
			InterventionTreatmentDetailForAdviceLeafletVoCollection intreatDetCollVo = interVo.getInterventionTreatments();
			if( intreatDetCollVo == null)
				intreatDetCollVo = new InterventionTreatmentDetailForAdviceLeafletVoCollection();
			
			if( false == collectionHasInterventionTreatmentAlready(intreatDetCollVo, tempVo ))  //wdev-17439
			{
			
				InterventionTreatmentDetailForAdviceLeafletVo intTreatDetVo = new InterventionTreatmentDetailForAdviceLeafletVo();
				
				AuthoringInformationVo temAuthVo = new AuthoringInformationVo();
				
				HcpLiteVo hcp = null;
				if( domain.getHcpLiteUser() instanceof HcpLiteVo )
				{
					hcp = (HcpLiteVo) domain.getHcpLiteUser();
				}
				temAuthVo.setAuthoringHcp(hcp);
				temAuthVo.setAuthoringDateTime(new DateTime());
				intTreatDetVo.setAuthoringInformation(temAuthVo);
				intTreatDetVo.setTreatmentInterventionDescription(tempVo.getTreatmentInterventionName());
				intTreatDetVo.setTreatmentIntervention(tempVo);
				
				intreatDetCollVo.add(intTreatDetVo);
				interVo.setInterventionTreatments(intreatDetCollVo);
			
			}
			
			return interVo;
		}
		
		return null;

	}
	//wdev-17439
	private boolean collectionHasInterventionTreatmentAlready(InterventionTreatmentDetailForAdviceLeafletVoCollection intreatDetCollVo, TreatmentInterventionForAdviceLeafletVo tempVo )
	{
		if( intreatDetCollVo != null && intreatDetCollVo.size() > 0 && tempVo != null )
		{
			for( int i = 0; i < intreatDetCollVo.size();i++ )
			{
				InterventionTreatmentDetailForAdviceLeafletVo intreatVo = intreatDetCollVo.get(i); 
				if( intreatVo != null && intreatVo.getTreatmentInterventionIsNotNull())
				{
					if( intreatVo.getTreatmentIntervention().getID_TreatmentInterventionIsNotNull() && intreatVo.getTreatmentIntervention().getID_TreatmentIntervention().equals(tempVo.getID_TreatmentIntervention()))
						return true;
				}
			}
		}
		
		return false;
	}
	
	//wdev-17075
	private AdviceLeafletConfigDisplayVo getTemplate()
	{
		for(int i = 0;i < form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().size();i++)
		{
			if( form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getColSelect() == true )
				return form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i).getValue();
			
		}
		return null;
	}
	
	
	private AdviceLeafletsForSelectAndPrinterVoCollection addAdviceLeafletsForSelectedAndPrinter(AdviceLeafletConfigDisplayVoCollection tenpColl, AdviceLeafletsForSelectAndPrinterVoCollection tempRecSelected)
	{
		if( tenpColl == null || tenpColl.size() == 0 )
			return null;
		
		if( tempRecSelected == null )
			tempRecSelected = new AdviceLeafletsForSelectAndPrinterVoCollection();
		
		for(int i = 0; i < tenpColl.size();i++)
		{
			AdviceLeafletsForSelectAndPrinterVo tempVo = new AdviceLeafletsForSelectAndPrinterVo();
			AdviceLeafletConfigDisplayVo advTemplVo  = tenpColl.get(i);
			tempVo.setTemplate(advTemplVo != null ? advTemplVo.getTemplate():null);
			tempVo.setAdviceLeafletName(advTemplVo.getAdviceLeafletName()); //WDEV-20437
			tempVo.setDateGiven(new Date());
			tempVo.setCareContext(form.getLocalContext().getCareContext());
			
			HcpLiteVo hcpVo = null;
			if( domain.getHcpLiteUser() instanceof HcpLiteVo)
			{
				hcpVo = (HcpLiteVo) domain.getHcpLiteUser();
			}
			tempVo.setAuthoringHCP(hcpVo);
			tempVo.setAuthoringDateTime(new DateTime());
			tempRecSelected.add(tempVo);
		}
		
		return tempRecSelected;
	}
	private boolean saveAdviceLeafletPrinted( DischargeServicesAndAdviceForDischargePlanningVo record)
	{
		if (record == null)
		{
			record = new DischargeServicesAndAdviceForDischargePlanningVo();
			
			record.setPatient(form.getGlobalContext().Core.getPatientShort());
			record.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			record.setAttendance(form.getLocalContext().getCareContext());
		}
		
		EmergencyAttendanceForDischargeLetterVo emergencyAttendanceToSave=populateEmergencyAttendanceDataFromScreen(form.getLocalContext().getCurrentEmergencyAttendance()); //WDEV-19375
		
		AdviceLeafletsForSelectAndPrinterVoCollection tempColl = record.getAdviceLeafletsPrinted();
		//if( tempColl == null)
		//	tempColl = new AdviceLeafletsForSelectAndPrinterVoCollection();
		
		if( form.getLocalContext().getPrintedAdviceLeafletsIsNotNull() && form.getLocalContext().getPrintedAdviceLeaflets().size() > 0)
		{
			tempColl = addAdviceLeafletsForSelectedAndPrinter(form.getLocalContext().getPrintedAdviceLeaflets(),tempColl);
			record.setAdviceLeafletsPrinted(tempColl);
		}
		
				
		InterventionsTreatmentForAdviceLeafletVo intervTreatmVo =  populateInterventionTreatment();
		
		String[] errorstreatment = null;
		
		if( intervTreatmVo != null)
			errorstreatment = intervTreatmVo.validate();	
		
		String[] errors = record.validate(errorstreatment);

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
						
		try
		{
			// Attempt to save data to database
			form.getLocalContext().setRecord(domain.save(record,intervTreatmVo,emergencyAttendanceToSave));//WDEV-19375

			return true;
		}
		// Treat any errors that might arise
		catch (StaleObjectException e)
		{
			e.printStackTrace();

			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialize();
			open();
			form.lyrAdviceMobility().showtabAdvice();
			return false;
		}
		
		
		
	}
	
	private void printSelectedAdviceLeaflets()
	{
		String templateName = null;  								//wdev-17075
		form.getLocalContext().setIsPrintingOk(Boolean.FALSE);		//wdev-17075
		try
		{
			// Get selected advice leaflets
			AdviceLeafletConfigDisplayVoCollection selectedAdviceLeaflets = new AdviceLeafletConfigDisplayVoCollection();

			for (int i = 0; i < form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().size(); i++)
			{
				ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabAdviceContainer.grdAdviceLefletRow adviceRow = form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i);

				if (adviceRow.getColSelect())	selectedAdviceLeaflets.add(adviceRow.getValue());
			}
			
			
			// For each selected advice leaflet
			for (AdviceLeafletConfigDisplayVo adviceLeaflet : selectedAdviceLeaflets)
			{
				// Get Report and Template from database
				String report[] = domain.getReportAndTemplate(adviceLeaflet.getTemplate());
				//wdev-17075
				if( adviceLeaflet != null && adviceLeaflet.getTemplateIsNotNull())
					templateName = adviceLeaflet.getTemplate().getName();
				//-----------	
				// Check for valid report and template
				if (report == null)
				{
					engine.showMessage("No report found for selected advice leaflet");
					form.getLocalContext().setIsPrintingOk(Boolean.FALSE);		//wdev-17075
					return;
				}

				// Create a query builder client instance
				QueryBuilderClient client = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());

				// Attempt to build report and print it to printer
				String printerName = form.getGlobalContext().Admin.getSelectedPrinter() != null ? form.getGlobalContext().Admin.getSelectedPrinter().getIPrinterName() : null;
				client.buildReport(report[0], report[1], ConfigFlag.GEN.REPORT_SERVER_URL.getValue(), "PDF", printerName, 1);
				
				//wdev-17075
				AdviceLeafletConfigDisplayVoCollection printColl = form.getLocalContext().getPrintedAdviceLeaflets();
				if( printColl == null)
					printColl = new AdviceLeafletConfigDisplayVoCollection();
				printColl.add(adviceLeaflet);
				form.getLocalContext().setPrintedAdviceLeaflets(printColl);
				form.getLocalContext().setIsPrintingOk(Boolean.TRUE);
				//---------------------
			}
			
			
		}
		catch (QueryBuilderClientException exception)
		{
			
			engine.showMessage("Advice Leaflet: " + (templateName != null ? templateName:"") + " cannot be printed");		//wdev-17075	
			exception.printStackTrace();
		}
	}

	
	protected void onGrdAdviceLefletSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}

	//WDEV-19375
	protected void onlyrAdviceMobilityTabChanged(LayerBridge tab)
	{
//WDEV-21227		if (tab.equals(form.lyrAdviceMobility().tabPreview()))
//		{
//			populatePreviewTab();
//			if (!form.lyrAdviceMobility().tabPreview().htmPreview().isVisible()) //WDEV-19401
//				form.lyrAdviceMobility().tabPreview().htmPreview().setVisible(Boolean.TRUE);
//		}
	}

	//WDEV-19375
	@Override
	protected void onChkDischargeLetterRequiredValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	//WDEV-19375
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	//WDEV-19401
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		form.getLocalContext().setIsPrintingDischargeSummary(Boolean.TRUE);
//WDEV-21227		form.lyrAdviceMobility().tabPreview().htmPreview().setVisible(Boolean.FALSE);
		selectPrinter();
		
	}
	
	//WDEV-20437
	public class AdviceLeafletComparator implements Comparator
	{
		private int direction = 1;
		
		public AdviceLeafletComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public AdviceLeafletComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String name1 = null;
			String name2 = null;
			if(ob1 instanceof AdviceLeafletConfigDisplayVo )
			{
				AdviceLeafletConfigDisplayVo advLeaflet1 = (AdviceLeafletConfigDisplayVo)ob1;
				if (advLeaflet1.getTemplateIsNotNull())
					name1=advLeaflet1.getTemplate().getName();
				else
					name1 = advLeaflet1.getAdviceLeafletName();
			}
			if(ob2 instanceof AdviceLeafletConfigDisplayVo)
			{
				AdviceLeafletConfigDisplayVo advLeaflet2 = (AdviceLeafletConfigDisplayVo)ob2;
				
				if (advLeaflet2.getTemplateIsNotNull())
					name2=advLeaflet2.getTemplate().getName();
				else
					name2 = advLeaflet2.getAdviceLeafletName();
			}
			if(name1 != null )
				return  name1.compareTo(name2)*direction;
			if(name2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	//WDEV-20437
	@Override
	protected void onBtnMarkAsGivenPrePrintedLeafletsClick() throws PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		if( markPrePrintedAdviceLeafletAsGiven(form.getLocalContext().getRecord()))
			{
				open();
				form.lyrAdviceMobility().showtabAdvice();
			}
	
	}

	//WDEV-20437
	private boolean markPrePrintedAdviceLeafletAsGiven(DischargeServicesAndAdviceForDischargePlanningVo record)
	{
		if (record == null)
		{
			record = new DischargeServicesAndAdviceForDischargePlanningVo();
			
			record.setPatient(form.getGlobalContext().Core.getPatientShort());
			record.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			record.setAttendance(form.getLocalContext().getCareContext());
		}
		
		
		AdviceLeafletsForSelectAndPrinterVoCollection collPrePrintedAdvLeafletGiven = record.getPrePrintedAdviceLeafletsGiven();
		
		AdviceLeafletConfigDisplayVoCollection collSelectedPrePrintedLeaflets=getPrePrintedAdvLeafletsMarkedAsGiven();
		
		if( collSelectedPrePrintedLeaflets!=null  && collSelectedPrePrintedLeaflets.size() > 0)
		{
			collPrePrintedAdvLeafletGiven = addAdviceLeafletsForSelectedAndPrinter(collSelectedPrePrintedLeaflets,collPrePrintedAdvLeafletGiven);
			record.setPrePrintedAdviceLeafletsGiven(collPrePrintedAdvLeafletGiven);
		}
		
		String[] errors = record.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
						
		try
		{
			// Attempt to save data to database
			form.getLocalContext().setRecord(domain.save(record,null,null));//WDEV-19375

			return true;
		}
		// Treat any errors that might arise
		catch (StaleObjectException e)
		{
			e.printStackTrace();

			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialize();
			open();
			form.lyrAdviceMobility().showtabAdvice();
			return false;
		}
	}

	////WDEV-20437
	private AdviceLeafletConfigDisplayVoCollection getPrePrintedAdvLeafletsMarkedAsGiven()
	{
		// Get selected PrePrintedAdviceLeaflets
		AdviceLeafletConfigDisplayVoCollection selectedAdviceLeaflets = new AdviceLeafletConfigDisplayVoCollection();

		for (int i = 0; i < form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().size(); i++)
		{
			ims.emergency.forms.dischargeplanning_advicemobilityequipment.GenForm.lyrAdviceMobilityLayer.tabAdviceContainer.grdAdviceLefletRow adviceRow = form.lyrAdviceMobility().tabAdvice().grdAdviceLeflet().getRows().get(i);

			if (adviceRow.getColumnGiven())	
				selectedAdviceLeaflets.add(adviceRow.getValue());
		}
		
		return selectedAdviceLeaflets;
	}

	protected void OnBtnPreviewClick() throws PresentationLogicException
	{
		String url = buildReport(true);
		form.getGlobalContext().Core.setPatientDocumentToPrint(new PatientDocumentVo());
		engine.open(form.getForms().Core.DocumentPreview,new Object[]{url,Boolean.TRUE});
	}
	
}
