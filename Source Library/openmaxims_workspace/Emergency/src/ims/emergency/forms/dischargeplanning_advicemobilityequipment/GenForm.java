//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.dischargeplanning_advicemobilityequipment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAdviceMobilityLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabAdviceContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdAdviceLefletRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAdviceLefletRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColAdviceReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColAdviceReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColAdviceOpened()
				{
					super.row.showOpened(0);
				}
				public String getColAdvice()
				{
					return (String)super.row.get(0);
				}
				public void setColAdvice(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColAdviceTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColumnGivenReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColumnGivenReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColumnGivenOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColumnGiven()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColumnGiven(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColumnGivenTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.emergency.vo.AdviceLeafletConfigDisplayVo getValue()
				{
					return (ims.emergency.vo.AdviceLeafletConfigDisplayVo)super.row.getValue();
				}
				public void setValue(ims.emergency.vo.AdviceLeafletConfigDisplayVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAdviceLefletRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAdviceLefletRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAdviceLefletRow get(int index)
				{
					return new grdAdviceLefletRow(super.collection.get(index));
				}
				public grdAdviceLefletRow newRow()
				{
					return new grdAdviceLefletRow(super.collection.newRow());
				}
				public grdAdviceLefletRow newRow(boolean autoSelect)
				{
					return new grdAdviceLefletRow(super.collection.newRow(autoSelect));
				}
				public grdAdviceLefletRow newRowAt(int index)
				{
					return new grdAdviceLefletRow(super.collection.newRowAt(index));
				}
				public grdAdviceLefletRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAdviceLefletRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAdviceLefletGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection getValues()
				{
					ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection listOfValues = new ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.emergency.vo.AdviceLeafletConfigDisplayVo getValue()
				{
					return (ims.emergency.vo.AdviceLeafletConfigDisplayVo)super.grid.getValue();
				}
				public void setValue(ims.emergency.vo.AdviceLeafletConfigDisplayVo value)
				{
					super.grid.setValue(value);
				}
				public grdAdviceLefletRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAdviceLefletRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAdviceLefletRowCollection getRows()
				{
					return new grdAdviceLefletRowCollection(super.grid.getRows());
				}
				public grdAdviceLefletRow getRowByValue(ims.emergency.vo.AdviceLeafletConfigDisplayVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAdviceLefletRow(row);
				}
				public void setColAdviceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColAdviceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColumnGivenHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColumnGivenHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 360, 440, 280, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Mark As Given Selected Pre-Printed Advice Leaflets", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 464, 440, 176, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print Selected Advice Leaflets", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 632, 416, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdAdviceLefletTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuDischargeAdviceLeaflet, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAdviceLefletTemp);
				grdAdviceLefletGrid grdAdviceLeflet = (grdAdviceLefletGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAdviceLefletGrid.class, m_grdAdviceLefletTemp);
				grdAdviceLeflet.addStringColumn("Advice Leaflet", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAdviceLeflet.addBoolColumn("For Print", 1, 1, 150, false, true, 0, true);
				grdAdviceLeflet.addBoolColumn("Given", 1, 1, -1, false, true, 0, true);
				super.addGrid(grdAdviceLeflet);
			}

			public Button btnMarkAsGivenPrePrintedLeaflets()
			{
				return (Button)super.getControl(0);
			}
			public Button btnPrintAdvice()
			{
				return (Button)super.getControl(1);
			}
			public grdAdviceLefletGrid grdAdviceLeflet()
			{
				return (grdAdviceLefletGrid)super.getGrid(0);
			}
		}
		public static class tabMobilityAndEquipmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTransportTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ApptTransportType getValue()
				{
					return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdEquipmentRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdEquipmentRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColEquipmentReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColEquipmentReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColEquipmentOpened()
				{
					super.row.showOpened(0);
				}
				public String getColEquipment()
				{
					return (String)super.row.get(0);
				}
				public void setColEquipment(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColEquipmentTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.emergency.vo.lookups.Dischargequipment getValue()
				{
					return (ims.emergency.vo.lookups.Dischargequipment)super.row.getValue();
				}
				public void setValue(ims.emergency.vo.lookups.Dischargequipment value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdEquipmentRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdEquipmentRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdEquipmentRow get(int index)
				{
					return new grdEquipmentRow(super.collection.get(index));
				}
				public grdEquipmentRow newRow()
				{
					return new grdEquipmentRow(super.collection.newRow());
				}
				public grdEquipmentRow newRow(boolean autoSelect)
				{
					return new grdEquipmentRow(super.collection.newRow(autoSelect));
				}
				public grdEquipmentRow newRowAt(int index)
				{
					return new grdEquipmentRow(super.collection.newRowAt(index));
				}
				public grdEquipmentRow newRowAt(int index, boolean autoSelect)
				{
					return new grdEquipmentRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdEquipmentGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.emergency.vo.lookups.Dischargequipment[] getValues()
				{
					ims.emergency.vo.lookups.Dischargequipment[] listOfValues = new ims.emergency.vo.lookups.Dischargequipment[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.emergency.vo.lookups.Dischargequipment getValue()
				{
					return (ims.emergency.vo.lookups.Dischargequipment)super.grid.getValue();
				}
				public void setValue(ims.emergency.vo.lookups.Dischargequipment value)
				{
					super.grid.setValue(value);
				}
				public grdEquipmentRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdEquipmentRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdEquipmentRowCollection getRows()
				{
					return new grdEquipmentRowCollection(super.grid.getRows());
				}
				public grdEquipmentRow getRowByValue(ims.emergency.vo.lookups.Dischargequipment value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdEquipmentRow(row);
				}
				public void setColEquipmentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColEquipmentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdMobilityRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdMobilityRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColMobilityReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColMobilityReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColMobilityOpened()
				{
					super.row.showOpened(0);
				}
				public String getColMobility()
				{
					return (String)super.row.get(0);
				}
				public void setColMobility(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColMobilityTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.lookups.PatientMobility getValue()
				{
					return (ims.core.vo.lookups.PatientMobility)super.row.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientMobility value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdMobilityRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdMobilityRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdMobilityRow get(int index)
				{
					return new grdMobilityRow(super.collection.get(index));
				}
				public grdMobilityRow newRow()
				{
					return new grdMobilityRow(super.collection.newRow());
				}
				public grdMobilityRow newRow(boolean autoSelect)
				{
					return new grdMobilityRow(super.collection.newRow(autoSelect));
				}
				public grdMobilityRow newRowAt(int index)
				{
					return new grdMobilityRow(super.collection.newRowAt(index));
				}
				public grdMobilityRow newRowAt(int index, boolean autoSelect)
				{
					return new grdMobilityRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdMobilityGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.lookups.PatientMobility[] getValues()
				{
					ims.core.vo.lookups.PatientMobility[] listOfValues = new ims.core.vo.lookups.PatientMobility[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.lookups.PatientMobility getValue()
				{
					return (ims.core.vo.lookups.PatientMobility)super.grid.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientMobility value)
				{
					super.grid.setValue(value);
				}
				public grdMobilityRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdMobilityRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdMobilityRowCollection getRows()
				{
					return new grdMobilityRowCollection(super.grid.getRows());
				}
				public grdMobilityRow getRowByValue(ims.core.vo.lookups.PatientMobility value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdMobilityRow(row);
				}
				public void setColMobilityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColMobilityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 292, 632, 172, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Equipment Provided", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 632, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Patient Mobility", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 176, 632, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Transport", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 258, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Booking No:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 230, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 202, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 152, 256, 472, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(25), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 152, 228, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 152, 200, 472, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTransportTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTransportTypeTemp);
				cmbTransportTypeComboBox cmbTransportType = (cmbTransportTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportTypeComboBox.class, m_cmbTransportTypeTemp);
				super.addComboBox(cmbTransportType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 327, 616, 135, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdEquipmentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdEquipmentTemp);
				grdEquipmentGrid grdEquipment = (grdEquipmentGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEquipmentGrid.class, m_grdEquipmentTemp);
				grdEquipment.addStringColumn("Equipment", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEquipment.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdEquipment);
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 616, 119, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdMobilityTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdMobilityTemp);
				grdMobilityGrid grdMobility = (grdMobilityGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMobilityGrid.class, m_grdMobilityTemp);
				grdMobility.addStringColumn("Mobility", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMobility.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdMobility);
			}

			public TextBox txtBookingNo()
			{
				return (TextBox)super.getControl(6);
			}
			public DateTimeControl dtimTransport()
			{
				return (DateTimeControl)super.getControl(7);
			}
			public cmbTransportTypeComboBox cmbTransportType()
			{
				return (cmbTransportTypeComboBox)super.getComboBox(0);
			}
			public grdEquipmentGrid grdEquipment()
			{
				return (grdEquipmentGrid)super.getGrid(0);
			}
			public grdMobilityGrid grdMobility()
			{
				return (grdMobilityGrid)super.getGrid(1);
			}
		}
		public static class tabDischargeLetterContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 11, 312, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Supplementary", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 11, 157, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Attendance Summary", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 11, 8, 219, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Actions, comments and advice for GP:", new Integer(1), null, new Integer(0)}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 472, 5, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Discharge Letter Required", Boolean.TRUE, null}));
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 329, 632, 128, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 176, 632, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 632, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
			}

			public CheckBox chkDischargeLetterRequired()
			{
				return (CheckBox)super.getControl(3);
			}
			public RichTextControl richTextSupplementary()
			{
				return (RichTextControl)super.getControl(4);
			}
			public RichTextControl richTextAttSummary()
			{
				return (RichTextControl)super.getControl(5);
			}
			public RichTextControl richTextActionsCommentsAdvice()
			{
				return (RichTextControl)super.getControl(6);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 656, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAdvice = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Advice", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAdviceContainer m_tabAdviceContainer = (tabAdviceContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAdviceContainer.class, m_tabAdvice, factory);
			super.addContainer(m_tabAdvice, m_tabAdviceContainer);
			ims.framework.utils.SizeInfo m_tabAdviceDesignSize = new ims.framework.utils.SizeInfo(656, 496);
			ims.framework.utils.SizeInfo m_tabAdviceRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabAdviceContainer.setContext(form, appForm, m_tabAdvice, loader, contextMenus, startControlID, m_tabAdviceDesignSize, m_tabAdviceRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 656, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabMobilityAndEquipment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Mobility and Equipment", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabMobilityAndEquipmentContainer m_tabMobilityAndEquipmentContainer = (tabMobilityAndEquipmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMobilityAndEquipmentContainer.class, m_tabMobilityAndEquipment, factory);
			super.addContainer(m_tabMobilityAndEquipment, m_tabMobilityAndEquipmentContainer);
			ims.framework.utils.SizeInfo m_tabMobilityAndEquipmentDesignSize = new ims.framework.utils.SizeInfo(656, 496);
			ims.framework.utils.SizeInfo m_tabMobilityAndEquipmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
			m_tabMobilityAndEquipmentContainer.setContext(form, appForm, m_tabMobilityAndEquipment, loader, contextMenus, startControlID, m_tabMobilityAndEquipmentDesignSize, m_tabMobilityAndEquipmentRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 656, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDischargeLetter = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Letter", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDischargeLetterContainer m_tabDischargeLetterContainer = (tabDischargeLetterContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeLetterContainer.class, m_tabDischargeLetter, factory);
			super.addContainer(m_tabDischargeLetter, m_tabDischargeLetterContainer);
			ims.framework.utils.SizeInfo m_tabDischargeLetterDesignSize = new ims.framework.utils.SizeInfo(656, 496);
			ims.framework.utils.SizeInfo m_tabDischargeLetterRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
			m_tabDischargeLetterContainer.setContext(form, appForm, m_tabDischargeLetter, loader, contextMenus, startControlID, m_tabDischargeLetterDesignSize, m_tabDischargeLetterRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabAdvice().setVisible(false);
			tabMobilityAndEquipment().setVisible(false);
			tabDischargeLetter().setVisible(false);
		}
		public void settabAdviceEnabled(boolean value)
		{
			tabAdvice().setEnabled(value);
		}
		public void settabMobilityAndEquipmentEnabled(boolean value)
		{
			tabMobilityAndEquipment().setEnabled(value);
		}
		public void settabDischargeLetterEnabled(boolean value)
		{
			tabDischargeLetter().setEnabled(value);
		}
		public void showtabAdvice()
		{
			tabMobilityAndEquipment().setVisible(false);
			tabDischargeLetter().setVisible(false);
			tabAdvice().setVisible(true);
		}
		public void showtabMobilityAndEquipment()
		{
			tabAdvice().setVisible(false);
			tabDischargeLetter().setVisible(false);
			tabMobilityAndEquipment().setVisible(true);
		}
		public void showtabDischargeLetter()
		{
			tabAdvice().setVisible(false);
			tabMobilityAndEquipment().setVisible(false);
			tabDischargeLetter().setVisible(true);
		}

		public tabAdviceContainer tabAdvice()
		{
			return (tabAdviceContainer)super.layers.get(0);
		}
		public tabMobilityAndEquipmentContainer tabMobilityAndEquipment()
		{
			return (tabMobilityAndEquipmentContainer)super.layers.get(1);
		}
		public tabDischargeLetterContainer tabDischargeLetter()
		{
			return (tabDischargeLetterContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(672, 542);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuDischargeAdviceLeaflet = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuDischargeAdviceLeafletPreviewItem = factory.createMenuItem(startControlID.intValue() + 1, "Preview", true, false, new Integer(102298), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5060001)))
			contextMenus.Emergency.contextMenuDischargeAdviceLeaflet.add(contextMenus.Emergency.contextMenuDischargeAdviceLeafletPreviewItem);
		form.registerMenu(contextMenus.Emergency.contextMenuDischargeAdviceLeaflet);


		// Layer Clasess
		lyrAdviceMobilityLayer m_lyrAdviceMobilityLayer = (lyrAdviceMobilityLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAdviceMobilityLayer.class, this, factory);
		super.addLayer(m_lyrAdviceMobilityLayer);
		m_lyrAdviceMobilityLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 174, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Preview", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 589, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 512, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 91, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 257, 512, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyrAdviceMobilityLayer lyrAdviceMobility()
	{
		return (lyrAdviceMobilityLayer)super.getLayer(0);
	}
	public Button btnPreview()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(6);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(7);
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(8);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			Core = new CoreForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				SelectPrinterDialog = new LocalFormName(103241);
			}
			public final FormName SelectPrinterDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				DocumentPreview = new LocalFormName(102367);
				ViewReport = new LocalFormName(102157);
			}
			public final FormName DocumentPreview;
			public final FormName ViewReport;
		}

		public AdminForms Admin;
		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CareContext = new ims.framework.ContextVariable("CareContext", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CareContext_" + componentIdentifier + "");
			cxl_MainProblem = new ims.framework.ContextVariable("MainProblem", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__MainProblem_" + componentIdentifier + "");
			cxl_Record = new ims.framework.ContextVariable("Record", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier + "");
			cxl_ReadOnly = new ims.framework.ContextVariable("ReadOnly", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__ReadOnly_" + componentIdentifier + "");
			cxl_CustomEvent = new ims.framework.ContextVariable("CustomEvent", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CustomEvent_" + componentIdentifier + "");
			cxl_IsPrintingOk = new ims.framework.ContextVariable("IsPrintingOk", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__IsPrintingOk_" + componentIdentifier + "");
			cxl_PrintedAdviceLeaflets = new ims.framework.ContextVariable("PrintedAdviceLeaflets", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__PrintedAdviceLeaflets_" + componentIdentifier + "");
			cxl_CurrentEmergencyAttendance = new ims.framework.ContextVariable("CurrentEmergencyAttendance", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CurrentEmergencyAttendance_" + componentIdentifier + "");
			cxl_IsPrintingDischargeSummary = new ims.framework.ContextVariable("IsPrintingDischargeSummary", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__IsPrintingDischargeSummary_" + componentIdentifier + "");
			cxl_EDDischargeReportAndTemplate = new ims.framework.ContextVariable("EDDischargeReportAndTemplate", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__EDDischargeReportAndTemplate_" + componentIdentifier + "");
			cxl_bPreviewTabPopulated = new ims.framework.ContextVariable("bPreviewTabPopulated", prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__bPreviewTabPopulated_" + componentIdentifier + "");
		}
		
		public boolean getCareContextIsNotNull()
		{
			return !cxl_CareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContext.getValue(context);
		}
		public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContext' RefVo context variable.");
			if(value == null)
				cxl_CareContext.setValue(context, null);
			else
				cxl_CareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContext = null;
		public boolean getMainProblemIsNotNull()
		{
			return !cxl_MainProblem.getValueIsNull(context);
		}
		public ims.clinical.configuration.vo.ClinicalProblemRefVo getMainProblem()
		{
			return (ims.clinical.configuration.vo.ClinicalProblemRefVo)cxl_MainProblem.getValue(context);
		}
		public void setMainProblem(ims.clinical.configuration.vo.ClinicalProblemRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'MainProblem' RefVo context variable.");
			if(value == null)
				cxl_MainProblem.setValue(context, null);
			else
				cxl_MainProblem.setValue(context, new ims.clinical.configuration.vo.ClinicalProblemRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_MainProblem = null;
		public boolean getRecordIsNotNull()
		{
			return !cxl_Record.getValueIsNull(context);
		}
		public ims.emergency.vo.DischargeServicesAndAdviceForDischargePlanningVo getRecord()
		{
			return (ims.emergency.vo.DischargeServicesAndAdviceForDischargePlanningVo)cxl_Record.getValue(context);
		}
		public void setRecord(ims.emergency.vo.DischargeServicesAndAdviceForDischargePlanningVo value)
		{
			cxl_Record.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Record = null;
		public boolean getReadOnlyIsNotNull()
		{
			return !cxl_ReadOnly.getValueIsNull(context);
		}
		public Boolean getReadOnly()
		{
			return (Boolean)cxl_ReadOnly.getValue(context);
		}
		public void setReadOnly(Boolean value)
		{
			cxl_ReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReadOnly = null;
		public boolean getCustomEventIsNotNull()
		{
			return !cxl_CustomEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.DischargeDetails_CustomEvents getCustomEvent()
		{
			return (ims.emergency.vo.enums.DischargeDetails_CustomEvents)cxl_CustomEvent.getValue(context);
		}
		public void setCustomEvent(ims.emergency.vo.enums.DischargeDetails_CustomEvents value)
		{
			cxl_CustomEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CustomEvent = null;
		public boolean getIsPrintingOkIsNotNull()
		{
			return !cxl_IsPrintingOk.getValueIsNull(context);
		}
		public Boolean getIsPrintingOk()
		{
			return (Boolean)cxl_IsPrintingOk.getValue(context);
		}
		public void setIsPrintingOk(Boolean value)
		{
			cxl_IsPrintingOk.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsPrintingOk = null;
		public boolean getPrintedAdviceLeafletsIsNotNull()
		{
			return !cxl_PrintedAdviceLeaflets.getValueIsNull(context);
		}
		public ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection getPrintedAdviceLeaflets()
		{
			return (ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection)cxl_PrintedAdviceLeaflets.getValue(context);
		}
		public void setPrintedAdviceLeaflets(ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection value)
		{
			cxl_PrintedAdviceLeaflets.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrintedAdviceLeaflets = null;
		public boolean getCurrentEmergencyAttendanceIsNotNull()
		{
			return !cxl_CurrentEmergencyAttendance.getValueIsNull(context);
		}
		public ims.emergency.vo.EmergencyAttendanceForDischargeLetterVo getCurrentEmergencyAttendance()
		{
			return (ims.emergency.vo.EmergencyAttendanceForDischargeLetterVo)cxl_CurrentEmergencyAttendance.getValue(context);
		}
		public void setCurrentEmergencyAttendance(ims.emergency.vo.EmergencyAttendanceForDischargeLetterVo value)
		{
			cxl_CurrentEmergencyAttendance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentEmergencyAttendance = null;
		public boolean getIsPrintingDischargeSummaryIsNotNull()
		{
			return !cxl_IsPrintingDischargeSummary.getValueIsNull(context);
		}
		public Boolean getIsPrintingDischargeSummary()
		{
			return (Boolean)cxl_IsPrintingDischargeSummary.getValue(context);
		}
		public void setIsPrintingDischargeSummary(Boolean value)
		{
			cxl_IsPrintingDischargeSummary.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsPrintingDischargeSummary = null;
		public boolean getEDDischargeReportAndTemplateIsNotNull()
		{
			return !cxl_EDDischargeReportAndTemplate.getValueIsNull(context);
		}
		public java.lang.String[] getEDDischargeReportAndTemplate()
		{
			return (java.lang.String[])cxl_EDDischargeReportAndTemplate.getValue(context);
		}
		public void setEDDischargeReportAndTemplate(java.lang.String[] value)
		{
			cxl_EDDischargeReportAndTemplate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EDDischargeReportAndTemplate = null;
		public boolean getbPreviewTabPopulatedIsNotNull()
		{
			return !cxl_bPreviewTabPopulated.getValueIsNull(context);
		}
		public Boolean getbPreviewTabPopulated()
		{
			return (Boolean)cxl_bPreviewTabPopulated.getValue(context);
		}
		public void setbPreviewTabPopulated(Boolean value)
		{
			cxl_bPreviewTabPopulated.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bPreviewTabPopulated = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class DischargeAdviceLeaflet implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Preview = 1;
			}
			public void disableAllDischargeAdviceLeafletMenuItems()
			{
				this.contextMenuDischargeAdviceLeafletPreviewItem.setEnabled(false);
			}
			public void hideAllDischargeAdviceLeafletMenuItems()
			{
				this.contextMenuDischargeAdviceLeafletPreviewItem.setVisible(false);
			}
			private Menu contextMenuDischargeAdviceLeaflet;
			public ReadOnlyMenuItem getDischargeAdviceLeafletPreviewItem()
			{
				return this.contextMenuDischargeAdviceLeafletPreviewItem;
			}
			private MenuItem contextMenuDischargeAdviceLeafletPreviewItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[188];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-ID", "ID_PatientDocument");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-EPISODEOFCARE", "EpisodeofCare");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-CARECONTEXT", "CareContext");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-CLINICALCONTACT", "ClinicalContact");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-REFERRAL", "Referral");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-NAME", "Name");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-CREATIONTYPE", "CreationType");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-CATEGORY", "Category");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-STATUS", "Status");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-RECORDINGUSER", "RecordingUser");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-RECORDINGDATETIME", "RecordingDateTime");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-AUTHORINGHCP", "AuthoringHCP");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-SPECIALTY", "Specialty");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-CORRESPONDENCESTATUS", "CorrespondenceStatus");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-CLINIC", "Clinic");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-ISLOCKEDFOREDITING", "IsLockedForEditing");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-LOCKEDBYUSER", "LockedByUser");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-LOCKEDONDATETIME", "LockedOnDateTime");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-HISTORICALFILENAME", "HistoricalFileName");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-HISTORICDOCID", "HistoricDocId");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocumentToPrint", "BO-1068100001-HASENCLOSURE", "HasEnclosure");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__MainProblem_" + componentIdentifier, "BO-1073100005-ID", "ID_ClinicalProblem");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-ID", "ID_DischargeServicesAndAdvice");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-PATIENT", "Patient");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-EPISODE", "Episode");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-ATTENDANCE", "Attendance");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-TRANSPORTARRANGEDTYPE", "TransportArrangedType");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-TRANSPORTDATETIME", "TransportDateTime");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-COMMENTS", "Comments");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__Record_" + componentIdentifier, "BO-1086100026-BOOKINGNO", "BookingNo");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CurrentEmergencyAttendance_" + componentIdentifier, "BO-1004100025-ID", "ID_EmergencyAttendance");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CurrentEmergencyAttendance_" + componentIdentifier, "BO-1004100025-ATTENDANCEDISCHARGECOMMENT", "AttendanceDischargeComment");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CurrentEmergencyAttendance_" + componentIdentifier, "BO-1004100025-ATTENDANCESUPPLEMENTARYCOMMENT", "AttendanceSupplementaryComment");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CurrentEmergencyAttendance_" + componentIdentifier, "BO-1004100025-ISDISCHARGELETTERREQUIRED", "IsDischargeLetterRequired");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.DischargePlanning_AdviceMobilityEquipment.__internal_x_context__CurrentEmergencyAttendance_" + componentIdentifier, "BO-1004100025-DISCHARGELETTERSTATUS", "DischargeLetterStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
