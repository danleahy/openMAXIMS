//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edwhiteboardconfiguration;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.edwhiteboardconfiguration.GenForm.grdAssessmentsRow;
import ims.emergency.forms.edwhiteboardconfiguration.GenForm.grdOtherActionsRow;
import ims.emergency.vo.TrackingAreaLiteVoCollection;
import ims.emergency.vo.WhiteBoardAssessmentConfigVo;
import ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection;
import ims.emergency.vo.WhiteBoardConfigVo;
import ims.emergency.vo.WhiteBoardConfigVoCollection;
import ims.emergency.vo.WhiteBoardOtherActionsVo;
import ims.emergency.vo.WhiteBoardOtherActionsVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Image;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		WhiteBoardConfigVo whiteboarConfig =form.cmbEDLocation().getValue()!=null &&  form.cmbArea().getValue() != null ? domain.getEDWhiteBoardConfigByLocation(form.cmbEDLocation().getValue(),form.cmbArea().getValue()) : null;
		
		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && form.cmbArea().getValue() != null && whiteboarConfig == null);
		form.btnNew().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.cmbArea().getValue() != null && whiteboarConfig == null);

		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && !form.btnNew().isVisible() && form.cmbArea().getValue() != null);
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && !form.btnNew().isVisible() && form.cmbArea().getValue() != null);
	
		form.chkComments().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.cmbArea().getValue() != null);
		form.intRefreshInterval().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.cmbArea().getValue() != null);
		
		form.getContextMenus().Emergency.hideAllEDWhiteboardConfig_AssessmentsGridMenuMenuItems();
		form.getContextMenus().Emergency.getEDWhiteboardConfig_AssessmentsGridMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdAssessments().getRows().size()<5);
		form.getContextMenus().Emergency.getEDWhiteboardConfig_AssessmentsGridMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdAssessments().getValue()!=null);
		form.getContextMenus().Emergency.getEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdAssessments().getValue()!=null);
		form.getContextMenus().Emergency.getEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdAssessments().getValue()!=null && form.grdAssessments().canMoveCurrentDown());
		form.getContextMenus().Emergency.getEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdAssessments().getValue()!=null && form.grdAssessments().canMoveCurrentUp());
		
		form.getContextMenus().Emergency.hideAllWhiteboardOtherActionsGridMenuMenuItems();
		form.getContextMenus().Emergency.getWhiteboardOtherActionsGridMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdOtherActions().getRows().size()<5);
		form.getContextMenus().Emergency.getWhiteboardOtherActionsGridMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdOtherActions().getValue()!=null);
		form.getContextMenus().Emergency.getWhiteboardOtherActionsGridMenuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdOtherActions().getValue()!=null);
		
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateLocationCombo();
		
		ILocation currentLoc = engine.getCurrentLocation();
		
		if (currentLoc instanceof LocationLiteVo)
		{
			form.cmbEDLocation().setValue((LocationLiteVo) currentLoc);
			populateAreaCombo(domain.getAreasByLocation(form.cmbEDLocation().getValue()));
		}
		
		form.getLocalContext().setselectedWhiteBoardConfig(form.cmbEDLocation().getValue()!=null && form.cmbArea().getValue()!=null ? domain.getEDWhiteBoardConfigByLocation(form.cmbEDLocation().getValue(),form.cmbArea().getValue()) : null);
		
		open();
	}
		
	private void open()
	{	
		populateInstanceFromData(form.getLocalContext().getselectedWhiteBoardConfig());
		form.setMode(FormMode.VIEW);
	}
	
	private void populateLocationCombo()
	{
		LocationLiteVoCollection collLocations = domain.listEDLocations();
		if (collLocations == null)
			return;

		for (int i = 0; i < collLocations.size(); i++)
		{
			form.cmbEDLocation().newRow(collLocations.get(i), collLocations.get(i).getName());
		}

	}
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().Emergency.AddEditAssessmentsToWhiteboard.equals(formName) && DialogResult.OK.equals(result) && FormMode.EDIT.equals(form.getMode())) 
		{
			if (form.grdAssessments().getValue() != null)
			{
				updateRowToAssessmentsGrid(form.getGlobalContext().Emergency.getWhiteBoardAssessmentConfig());
			}
			else
			{
				addRowToAssessmentsGrid(form.getGlobalContext().Emergency.getWhiteBoardAssessmentConfig());
				form.grdAssessments().setValue(form.getGlobalContext().Emergency.getWhiteBoardAssessmentConfig());
			}
			
		}
		if (form.getForms().Emergency.EDWhiteboardOtherActions.equals(formName) && DialogResult.OK.equals(result) && FormMode.EDIT.equals(form.getMode())) 
		{
			if (form.grdOtherActions().getValue() != null)
			{
				updateRowToOtherActionsGrid(form.getGlobalContext().Emergency.getWhiteboardOtherAction());
			}
			else
			{
				addRowToOtherActionsGrid(form.getGlobalContext().Emergency.getWhiteboardOtherAction());
				form.grdOtherActions().setValue(form.getGlobalContext().Emergency.getWhiteboardOtherAction());
			}
			
		}
		else if (form.getForms().Emergency. ImportWhiteboardConfig.equals(formName) && DialogResult.OK.equals(result)) 
		{
			populateInstanceFromData(form.getGlobalContext().Emergency.getWhiteBoardConfig());
			
		}
		
		updateControlsState();
	}
	private void addRowToOtherActionsGrid(WhiteBoardOtherActionsVo whiteboardOtherAction)
	{
		if (whiteboardOtherAction==null)
			return;
		
		grdOtherActionsRow row = form.grdOtherActions().getRows().newRow();
		
		row.setcolType(whiteboardOtherAction.getOtherActionType()!=null ? whiteboardOtherAction.getOtherActionType().getText() : null);
		row.setTooltipForcolType(whiteboardOtherAction.getOtherActionType()!=null ? whiteboardOtherAction.getOtherActionType().getText() : null);
		row.setcolTooltip(whiteboardOtherAction.getOtherActionTooltip());
		row.setTooltipForcolTooltip(whiteboardOtherAction.getOtherActionTooltip());
		
		row.setcolActionIcon(whiteboardOtherAction.getActionIcon()!=null ? engine.getRegisteredImage(whiteboardOtherAction.getActionIcon().getID_AppImage()) : null);
		row.setcolRequiredIcon(whiteboardOtherAction.getRequiredIcon()!=null ? engine.getRegisteredImage(whiteboardOtherAction.getRequiredIcon().getID_AppImage()) : null);
		row.setcolComplete(whiteboardOtherAction.getCompleteIcon()!=null ? engine.getRegisteredImage(whiteboardOtherAction.getCompleteIcon().getID_AppImage()) : null);
		
		row.setValue(whiteboardOtherAction);
	}
	private void updateRowToOtherActionsGrid(WhiteBoardOtherActionsVo whiteboardOtherAction)
	{
		grdOtherActionsRow row = form.grdOtherActions().getSelectedRow();
		
		row.setcolType(whiteboardOtherAction.getOtherActionType()!=null ? whiteboardOtherAction.getOtherActionType().getText() : null);
		row.setTooltipForcolType(whiteboardOtherAction.getOtherActionType()!=null ? whiteboardOtherAction.getOtherActionType().getText() : null);
		row.setcolTooltip(whiteboardOtherAction.getOtherActionTooltip());
		row.setTooltipForcolTooltip(whiteboardOtherAction.getOtherActionTooltip());
		
		row.setcolActionIcon(whiteboardOtherAction.getActionIcon()!=null ? engine.getRegisteredImage(whiteboardOtherAction.getActionIcon().getID_AppImage()) : null);
		row.setcolRequiredIcon(whiteboardOtherAction.getRequiredIcon()!=null ? engine.getRegisteredImage(whiteboardOtherAction.getRequiredIcon().getID_AppImage()) : null);
		row.setcolComplete(whiteboardOtherAction.getCompleteIcon()!=null ? engine.getRegisteredImage(whiteboardOtherAction.getCompleteIcon().getID_AppImage()) : null);
		
		row.setValue(whiteboardOtherAction);
	}
	
	private void addRowToAssessmentsGrid(WhiteBoardAssessmentConfigVo whiteBoardAssessmentConfig)
	{
		if (whiteBoardAssessmentConfig==null)
			return;
		
		grdAssessmentsRow row = form.grdAssessments().getRows().newRow();
		
		row.setcolName(whiteBoardAssessmentConfig.getName());
		row.setcolIcon(whiteBoardAssessmentConfig.getIcon()!=null ? engine.getRegisteredImage(whiteBoardAssessmentConfig.getIcon().getID_AppImage()) : null);
		
		row.setValue(whiteBoardAssessmentConfig);
	}
	
	private void updateRowToAssessmentsGrid(WhiteBoardAssessmentConfigVo whiteBoardAssessmentConfig)
	{
		grdAssessmentsRow row = form.grdAssessments().getSelectedRow();
		
		row.setcolName(whiteBoardAssessmentConfig.getName());
		row.setcolIcon((Image) whiteBoardAssessmentConfig.getIcon());
		
		row.setValue(whiteBoardAssessmentConfig);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	private boolean save()
	{
		WhiteBoardConfigVo whiteBoardConfigToSave=populateDataFromScreen(form.getLocalContext().getselectedWhiteBoardConfig());
		WhiteBoardConfigVo whiteBoardConfigExistent = domain.getEDWhiteBoardConfigByLocation(form.cmbEDLocation().getValue(),form.cmbArea().getValue());
		
		String[] errors = whiteBoardConfigToSave.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		// Condition to create only one WhiteBoardConfiguration Per Area
		if (whiteBoardConfigExistent != null && whiteBoardConfigToSave.getID_WhiteBoardConfig()==null)
		{
			engine.showMessage("A WhiteBoard Configuration for the selected Area already exist. The screen will be refreshed");
			form.getLocalContext().setselectedWhiteBoardConfig(whiteBoardConfigExistent);
			open();
			return false;
		}
		
		try
		{
			form.getLocalContext().setselectedWhiteBoardConfig(domain.save(whiteBoardConfigToSave));
		}
		catch (StaleObjectException e)
		{
			
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setselectedWhiteBoardConfig(domain.getEDWhiteBoardConfigByLocation(form.cmbEDLocation().getValue(),form.cmbArea().getValue()));
			open();
			return false;
		}
		
		return true;
	}

	private WhiteBoardConfigVo populateDataFromScreen(WhiteBoardConfigVo whiteBoardConfigToSave)
	{
		if (whiteBoardConfigToSave==null)
			whiteBoardConfigToSave=new WhiteBoardConfigVo();
		else
			whiteBoardConfigToSave=(WhiteBoardConfigVo) whiteBoardConfigToSave.clone();
		
		whiteBoardConfigToSave.setEDLocation(form.cmbEDLocation().getValue());
		whiteBoardConfigToSave.setCurrentArea(form.cmbArea().getValue());
		whiteBoardConfigToSave.setAssessments(form.grdAssessments().getValues());

		whiteBoardConfigToSave.setComments(form.chkComments().getValue());
		whiteBoardConfigToSave.setIsActive(true);
		whiteBoardConfigToSave.setSelectedActions(form.grdOtherActions().getValues());
		whiteBoardConfigToSave.setRefreshInterval(form.intRefreshInterval().getValue());
		return whiteBoardConfigToSave;
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		WhiteBoardConfigVoCollection allWhiteboardConfig = domain.getAllWhiteboardConfigurations();
		if (allWhiteboardConfig!=null && allWhiteboardConfig.size()>0)
		{
			engine.open(form.getForms().Emergency.ImportWhiteboardConfig);
		}
	}
	@Override
	protected void onCmbEDLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		populateAreaCombo(form.cmbEDLocation().getValue()!=null ? domain.getAreasByLocation(form.cmbEDLocation().getValue()) : null );
		updateControlsState();
	}
	
	@Override
	protected void onCmbAreaValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setselectedWhiteBoardConfig(form.cmbEDLocation().getValue()!=null && form.cmbArea().getValue()!=null ? domain.getEDWhiteBoardConfigByLocation(form.cmbEDLocation().getValue(),form.cmbArea().getValue()) : null);
		populateInstanceFromData(form.getLocalContext().getselectedWhiteBoardConfig());
		updateControlsState();
	}
	
	private void populateAreaCombo(TrackingAreaLiteVoCollection areaColl)
	{
		form.cmbArea().clear();
		if (areaColl==null || areaColl.size()==0)
			return;
		
		for (int i=0;i<areaColl.size();i++)
		{
			form.cmbArea().newRow(areaColl.get(i), areaColl.get(i).getAreaDisplayName());
		}
	}
	
	private void populateInstanceFromData(WhiteBoardConfigVo whiteBoardConfig)
	{
		clearInstanceControls();
		
		if (whiteBoardConfig==null)
			return;
		
		populateAssessmentsGrid(whiteBoardConfig.getAssessments());
		populateOtherActionsGrid(whiteBoardConfig.getSelectedActions());
		
		form.chkComments().setValue(whiteBoardConfig.getComments());
		form.intRefreshInterval().setValue(whiteBoardConfig.getRefreshInterval());
		
	}
	
	private void populateOtherActionsGrid(WhiteBoardOtherActionsVoCollection otherQuestions)
	{
		if (otherQuestions==null || otherQuestions.size()==0)
			return;
		
		for (int i=0;i<otherQuestions.size();i++)
		{
			addRowToOtherActionsGrid(otherQuestions.get(i));
		}	
	}

	private void clearInstanceControls()
	{
		form.grdAssessments().getRows().clear();
		form.grdOtherActions().getRows().clear();
		form.chkComments().setValue(null);
		form.intRefreshInterval().setValue(null);
		
	}
	
	private void populateAssessmentsGrid(WhiteBoardAssessmentConfigVoCollection assessments)
	{
		if (assessments==null || assessments.size()==0)
			return;
		
		for (int i=0;i<assessments.size();i++)
		{
			addRowToAssessmentsGrid(assessments.get(i));
		}
		
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.EDWhiteboardConfig_AssessmentsGridMenu.ADD:
				form.grdAssessments().setValue(null);
				form.getGlobalContext().Emergency.setWhiteBoardAssessmentConfig(null);	
				engine.open(form.getForms().Emergency.AddEditAssessmentsToWhiteboard);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.EDWhiteboardConfig_AssessmentsGridMenu.EDIT:
				form.getGlobalContext().Emergency.setWhiteBoardAssessmentConfig(form.grdAssessments().getValue());
				engine.open(form.getForms().Emergency.AddEditAssessmentsToWhiteboard);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.EDWhiteboardConfig_AssessmentsGridMenu.REMOVE:
				form.grdAssessments().removeSelectedRow();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.EDWhiteboardConfig_AssessmentsGridMenu.MOVE_UP:
				form.grdAssessments().moveUp();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.EDWhiteboardConfig_AssessmentsGridMenu.MOVE_DOWN:
				form.grdAssessments().moveDown();
			break;
		
			case GenForm.ContextMenus.EmergencyNamespace.WhiteboardOtherActionsGridMenu.ADD:
				form.grdOtherActions().setValue(null);
				form.getGlobalContext().Emergency.setWhiteboardOtherAction(null);
				engine.open(form.getForms().Emergency.EDWhiteboardOtherActions);
			break;
			case GenForm.ContextMenus.EmergencyNamespace.WhiteboardOtherActionsGridMenu.EDIT:
				form.getGlobalContext().Emergency.setWhiteboardOtherAction(form.grdOtherActions().getValue());
				engine.open(form.getForms().Emergency.EDWhiteboardOtherActions);
			break;
			case GenForm.ContextMenus.EmergencyNamespace.WhiteboardOtherActionsGridMenu.REMOVE:
				if (domain.isActionUsed(form.grdOtherActions().getValue()))
				{
					engine.showMessage("Could not delete this action because it is used! ");
				}
				else
				{
					form.grdOtherActions().removeSelectedRow();
				}
				
			break;
			
		}
		
		updateControlsState();
			
	}
	
	@Override
	protected void onGrdAssessmentsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
	
	@Override
	protected void onGrdOtherActionsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
	
}
