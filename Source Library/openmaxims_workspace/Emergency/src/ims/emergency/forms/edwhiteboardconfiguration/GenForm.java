//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.edwhiteboardconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAreaComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.emergency.vo.TrackingAreaLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.emergency.vo.TrackingAreaLiteVo getValue()
		{
			return (ims.emergency.vo.TrackingAreaLiteVo)super.control.getValue();
		}
		public void setValue(ims.emergency.vo.TrackingAreaLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbEDLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdOtherActionsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdOtherActionsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTypeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolType(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolType()
		{
			return (String)super.row.get(0);
		}
		public void setcolType(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolTooltipReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolTooltipReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolTooltipOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolTooltip()
		{
			return (String)super.row.get(1);
		}
		public void setcolTooltip(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolTooltipTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolActionIconReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolActionIconReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolActionIconOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolActionIcon(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getcolActionIcon()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setcolActionIcon(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellcolActionIconTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolRequiredIconReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolRequiredIconReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolRequiredIconOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolRequiredIcon(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.framework.utils.Image getcolRequiredIcon()
		{
			return (ims.framework.utils.Image)super.row.get(3);
		}
		public void setcolRequiredIcon(ims.framework.utils.Image value)
		{
			super.row.set(3, value);
		}
		public void setCellcolRequiredIconTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolCompleteReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolCompleteReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolCompleteOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolComplete(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.framework.utils.Image getcolComplete()
		{
			return (ims.framework.utils.Image)super.row.get(4);
		}
		public void setcolComplete(ims.framework.utils.Image value)
		{
			super.row.set(4, value);
		}
		public void setCellcolCompleteTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.emergency.vo.WhiteBoardOtherActionsVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardOtherActionsVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardOtherActionsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdOtherActionsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdOtherActionsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdOtherActionsRow get(int index)
		{
			return new grdOtherActionsRow(super.collection.get(index));
		}
		public grdOtherActionsRow newRow()
		{
			return new grdOtherActionsRow(super.collection.newRow());
		}
		public grdOtherActionsRow newRow(boolean autoSelect)
		{
			return new grdOtherActionsRow(super.collection.newRow(autoSelect));
		}
		public grdOtherActionsRow newRowAt(int index)
		{
			return new grdOtherActionsRow(super.collection.newRowAt(index));
		}
		public grdOtherActionsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdOtherActionsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdOtherActionsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.emergency.vo.WhiteBoardOtherActionsVoCollection getValues()
		{
			ims.emergency.vo.WhiteBoardOtherActionsVoCollection listOfValues = new ims.emergency.vo.WhiteBoardOtherActionsVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.WhiteBoardOtherActionsVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardOtherActionsVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardOtherActionsVo value)
		{
			super.grid.setValue(value);
		}
		public grdOtherActionsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdOtherActionsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdOtherActionsRowCollection getRows()
		{
			return new grdOtherActionsRowCollection(super.grid.getRows());
		}
		public grdOtherActionsRow getRowByValue(ims.emergency.vo.WhiteBoardOtherActionsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdOtherActionsRow(row);
		}
		public void setcolTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolTooltipHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolTooltipHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolActionIconHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolActionIconHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolRequiredIconHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolRequiredIconHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolCompleteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolCompleteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdAssessmentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAssessmentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolName(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolName()
		{
			return (String)super.row.get(0);
		}
		public void setcolName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolIconReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolIconReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolIconOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolIcon(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.Image getcolIcon()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setcolIcon(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellcolIconTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.emergency.vo.WhiteBoardAssessmentConfigVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardAssessmentConfigVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardAssessmentConfigVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAssessmentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAssessmentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAssessmentsRow get(int index)
		{
			return new grdAssessmentsRow(super.collection.get(index));
		}
		public grdAssessmentsRow newRow()
		{
			return new grdAssessmentsRow(super.collection.newRow());
		}
		public grdAssessmentsRow newRow(boolean autoSelect)
		{
			return new grdAssessmentsRow(super.collection.newRow(autoSelect));
		}
		public grdAssessmentsRow newRowAt(int index)
		{
			return new grdAssessmentsRow(super.collection.newRowAt(index));
		}
		public grdAssessmentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAssessmentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAssessmentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection getValues()
		{
			ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection listOfValues = new ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.WhiteBoardAssessmentConfigVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardAssessmentConfigVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardAssessmentConfigVo value)
		{
			super.grid.setValue(value);
		}
		public grdAssessmentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAssessmentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAssessmentsRowCollection getRows()
		{
			return new grdAssessmentsRowCollection(super.grid.getRows());
		}
		public grdAssessmentsRow getRowByValue(ims.emergency.vo.WhiteBoardAssessmentConfigVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAssessmentsRow(row);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolIconHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolIconHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5740001)))
			contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenu.add(contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenuADDItem);
		contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5740002)))
			contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenu.add(contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenuEDITItem);
		contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenu.add(contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenuREMOVEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenu);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300001)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300002)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300005)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 7, "Move Up", true, false, new Integer(102197), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300003)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Down", true, false, new Integer(102198), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300004)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem);
		form.registerMenu(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 3, 26, 840, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 160, 576, 143, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Refresh Interval (min.) :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 563, 8, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Area:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 576, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 304, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Actions:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 143, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Emergency Department:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 764, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 684, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 600, 6, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAreaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAreaTemp);
		cmbAreaComboBox cmbArea = (cmbAreaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAreaComboBox.class, m_cmbAreaTemp);
		super.addComboBox(cmbArea);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 152, 6, 405, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbEDLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbEDLocationTemp);
		cmbEDLocationComboBox cmbEDLocation = (cmbEDLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEDLocationComboBox.class, m_cmbEDLocationTemp);
		super.addComboBox(cmbEDLocation);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 88, 576, 24, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 320, 832, 248, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdOtherActionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuWhiteboardOtherActionsGridMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdOtherActionsTemp);
		grdOtherActionsGrid grdOtherActions = (grdOtherActionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOtherActionsGrid.class, m_grdOtherActionsTemp);
		grdOtherActions.addStringColumn("Type", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOtherActions.addStringColumn("Tooltip", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOtherActions.addImageColumn("Action Icon", 1, 1, 80, true, 0);
		grdOtherActions.addImageColumn("Required Icon", 1, 1, 100, true, 0);
		grdOtherActions.addImageColumn("Complete Icon", 1, 1, -1, true, 0);
		super.addGrid(grdOtherActions);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 832, 232, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdAssessmentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAssessmentsTemp);
		grdAssessmentsGrid grdAssessments = (grdAssessmentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssessmentsGrid.class, m_grdAssessmentsTemp);
		grdAssessments.addStringColumn("Name", 0, 0, 750, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAssessments.addImageColumn("Icon", 1, 1, -1, true, 0);
		super.addGrid(grdAssessments);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 299, 574, 72, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblOtherActions()
	{
		return (Label)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(9);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}
	public cmbAreaComboBox cmbArea()
	{
		return (cmbAreaComboBox)super.getComboBox(0);
	}
	public cmbEDLocationComboBox cmbEDLocation()
	{
		return (cmbEDLocationComboBox)super.getComboBox(1);
	}
	public CheckBox chkComments()
	{
		return (CheckBox)super.getControl(13);
	}
	public grdOtherActionsGrid grdOtherActions()
	{
		return (grdOtherActionsGrid)super.getGrid(0);
	}
	public grdAssessmentsGrid grdAssessments()
	{
		return (grdAssessmentsGrid)super.getGrid(1);
	}
	public IntBox intRefreshInterval()
	{
		return (IntBox)super.getControl(16);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Emergency = new EmergencyForms();
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				AddEditAssessmentsToWhiteboard = new LocalFormName(129209);
				ImportWhiteboardConfig = new LocalFormName(129211);
				EDWhiteboardOtherActions = new LocalFormName(129233);
			}
			public final FormName AddEditAssessmentsToWhiteboard;
			public final FormName ImportWhiteboardConfig;
			public final FormName EDWhiteboardOtherActions;
		}

		public EmergencyForms Emergency;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
			Emergency = new EmergencyImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Allergies18 = new ImageHelper(102518, "Images/Core/allergies_18.png", new Integer(18), new Integer(18));
				Allergies48 = new ImageHelper(102542, "Images/Core/infirmary_48_new.png", new Integer(48), new Integer(48));
				NoPatientImage = new ImageHelper(102554, "Images/Core/silhouette_blue.png", new Integer(177), new Integer(177));
			}
			public final ims.framework.utils.Image Allergies18;
			public final ims.framework.utils.Image Allergies48;
			public final ims.framework.utils.Image NoPatientImage;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Pathology48 = new ImageHelper(116149, "Images/OCRR/pathology_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Pathology48;
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				Male = new ImageHelper(129137, "Images/Emergency/male.png", new Integer(48), new Integer(48));
				EvenHistoryEnabled16 = new ImageHelper(129101, "Images/Emergency/clock.gif", new Integer(16), new Integer(16));
				Triage_Priority_P1 = new ImageHelper(129125, "Images/Emergency/P1.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Male;
			public final ims.framework.utils.Image EvenHistoryEnabled16;
			public final ims.framework.utils.Image Triage_Priority_P1;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final EmergencyImages Emergency;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_selectedWhiteBoardConfig = new ims.framework.ContextVariable("selectedWhiteBoardConfig", prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier + "");
		}
		
		public boolean getselectedWhiteBoardConfigIsNotNull()
		{
			return !cxl_selectedWhiteBoardConfig.getValueIsNull(context);
		}
		public ims.emergency.vo.WhiteBoardConfigVo getselectedWhiteBoardConfig()
		{
			return (ims.emergency.vo.WhiteBoardConfigVo)cxl_selectedWhiteBoardConfig.getValue(context);
		}
		public void setselectedWhiteBoardConfig(ims.emergency.vo.WhiteBoardConfigVo value)
		{
			cxl_selectedWhiteBoardConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedWhiteBoardConfig = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class WhiteboardOtherActionsGridMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int REMOVE = 3;
			}
			public void disableAllWhiteboardOtherActionsGridMenuMenuItems()
			{
				this.contextMenuWhiteboardOtherActionsGridMenuADDItem.setEnabled(false);
				this.contextMenuWhiteboardOtherActionsGridMenuEDITItem.setEnabled(false);
				this.contextMenuWhiteboardOtherActionsGridMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllWhiteboardOtherActionsGridMenuMenuItems()
			{
				this.contextMenuWhiteboardOtherActionsGridMenuADDItem.setVisible(false);
				this.contextMenuWhiteboardOtherActionsGridMenuEDITItem.setVisible(false);
				this.contextMenuWhiteboardOtherActionsGridMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuWhiteboardOtherActionsGridMenu;
			public ReadOnlyMenuItem getWhiteboardOtherActionsGridMenuADDItem()
			{
				return this.contextMenuWhiteboardOtherActionsGridMenuADDItem;
			}
			private MenuItem contextMenuWhiteboardOtherActionsGridMenuADDItem;
			public ReadOnlyMenuItem getWhiteboardOtherActionsGridMenuEDITItem()
			{
				return this.contextMenuWhiteboardOtherActionsGridMenuEDITItem;
			}
			private MenuItem contextMenuWhiteboardOtherActionsGridMenuEDITItem;
			public ReadOnlyMenuItem getWhiteboardOtherActionsGridMenuREMOVEItem()
			{
				return this.contextMenuWhiteboardOtherActionsGridMenuREMOVEItem;
			}
			private MenuItem contextMenuWhiteboardOtherActionsGridMenuREMOVEItem;
			public final class EDWhiteboardConfig_AssessmentsGridMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 4;
				public static final int EDIT = 5;
				public static final int REMOVE = 6;
				public static final int MOVE_UP = 7;
				public static final int MOVE_DOWN = 8;
			}
			public void disableAllEDWhiteboardConfig_AssessmentsGridMenuMenuItems()
			{
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem.setEnabled(false);
			}
			public void hideAllEDWhiteboardConfig_AssessmentsGridMenuMenuItems()
			{
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem.setVisible(false);
			}
			private Menu contextMenuEDWhiteboardConfig_AssessmentsGridMenu;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuADDItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuEDITItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[169];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardAssessmentConfig", "BO-1087100019-ID", "ID_WhiteBoardAssessmentConfig");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardAssessmentConfig", "BO-1087100019-NAME", "Name");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardAssessmentConfig", "BO-1087100019-ICON", "Icon");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-ID", "ID_WhiteBoardQuestionConfig");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-QUESTIONTEXT", "QuestionText");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-COLUMNHEADERTEXT", "ColumnHeaderText");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-ANSWERTYPE", "AnswerType");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-COLUMNWIDTH", "ColumnWidth");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-GENDERSPECIFIC", "GenderSpecific");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-AGERANGEMIN", "AgeRangeMin");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-AGERANGEMAX", "AgeRangeMax");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-ID", "ID_WhiteBoardConfig");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-ISACTIVE", "IsActive");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-COMMENTS", "Comments");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-REFRESHINTERVAL", "RefreshInterval");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteboardOtherAction", "BO-1087100024-ID", "ID_WhiteBoardOtherActions");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteboardOtherAction", "BO-1087100024-OTHERACTIONTYPE", "OtherActionType");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteboardOtherAction", "BO-1087100024-OTHERACTIONTOOLTIP", "OtherActionTooltip");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteboardOtherAction", "BO-1087100024-ACTIONICON", "ActionIcon");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteboardOtherAction", "BO-1087100024-REQUIREDICON", "RequiredIcon");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteboardOtherAction", "BO-1087100024-COMPLETEICON", "CompleteIcon");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-ID", "ID_WhiteBoardConfig");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-ISACTIVE", "IsActive");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-COMMENTS", "Comments");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-REFRESHINTERVAL", "RefreshInterval");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
