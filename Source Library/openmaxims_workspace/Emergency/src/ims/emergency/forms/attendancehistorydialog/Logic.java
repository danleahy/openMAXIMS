//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.55 build 2722.20556)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.emergency.forms.attendancehistorydialog;

import ims.emergency.forms.attendancehistorydialog.GenForm.grdDisplayRow;
import ims.emergency.vo.AttendanceHistoryDialogParamsVo;
import ims.emergency.vo.EmergencyAttendanceLiteVo;
import ims.emergency.vo.EmergencyAttendanceLiteVoCollection;
import ims.emergency.vo.EmergencyEpisodeShortVo;
import ims.emergency.vo.EmergencyEpisodeShortVoCollection;
import ims.emergency.vo.EpisodeDetailsVo;
import ims.emergency.vo.enums.AttendanceHistoryDialog;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Emergency.getAttendanceHistoryDialogIsNotNull() &&
				form.getGlobalContext().Emergency.getAttendanceHistoryDialogParamsIsNotNull())
		{		
			AttendanceHistoryDialogParamsVo voSetting = form.getGlobalContext().Emergency.getAttendanceHistoryDialogParams();
			EmergencyEpisodeShortVoCollection voCollEpisodeDetails = null;
			if (form.getGlobalContext().Emergency.getAttendanceHistoryDialog().equals(AttendanceHistoryDialog.SCHEDULED))
			{
				voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(
						voSetting.getPatientRefVo(), 
							0, 
								AttendanceHistoryDialog.SCHEDULED,
									voSetting.getScheduledDate(),
										null);
			}
			
			if (form.getGlobalContext().Emergency.getAttendanceHistoryDialog().equals(AttendanceHistoryDialog.UNSCHEDULED))
			{
				voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(
						voSetting.getPatientRefVo(), 
							0, 
								AttendanceHistoryDialog.UNSCHEDULED,
									voSetting.getScheduledDate(),
										voSetting.getScheduledDate());
			}

			if (form.getGlobalContext().Emergency.getAttendanceHistoryDialog().equals(AttendanceHistoryDialog.HISTORY))
			{
				voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(
						voSetting.getPatientRefVo(), 
							0, 
								null,
									null,
										null);
			}
			
			populateGrdDisplay(voCollEpisodeDetails);
				
		}
	}
	
	private void populateGrdDisplay(EmergencyEpisodeShortVoCollection emergencyHistory)
	{
		if (emergencyHistory == null)
			return;

		grdDisplayRow  episodeDetailsRow;
		
		for (EmergencyEpisodeShortVo emergencyEpisode : emergencyHistory)
		{	
			episodeDetailsRow = form.grdDisplay().getRows().newRow(); 		
			episodeDetailsRow.setcolDateTime(emergencyEpisode.getInjuryDateTime());
			episodeDetailsRow.setcolPatCategory(emergencyEpisode.getCategory().getText());
			episodeDetailsRow.setcolEpisodeNo(emergencyEpisode.getID_EmergencyEpisode().toString());
			
			episodeDetailsRow.setCollapsedImage(form.getImages().Core.CareSpell);
			episodeDetailsRow.setExpandedImage(form.getImages().Core.CareSpell);
			
			episodeDetailsRow.setBackColor(Color.Bisque);
			episodeDetailsRow.setBold(true);
			episodeDetailsRow.setValue(emergencyEpisode);
		}	
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onGrdDisplaySelectionChanged() throws PresentationLogicException
	{
		if (form.grdDisplay().getSelectedRow().getValue() != null &&
				form.grdDisplay().getSelectedRow().getValue() instanceof EpisodeDetailsVo)
		{
			EmergencyAttendanceLiteVoCollection voCollAttendanceDetails = domain.listAttendanceByEpisodeDetails((EpisodeDetailsVo) form.grdDisplay().getSelectedRow().getValue());
	 
			if (voCollAttendanceDetails != null)
			{
				form.grdDisplay().getSelectedRow().setExpanded(true);
				
				for (EmergencyAttendanceLiteVo voEmergencyAttendances : voCollAttendanceDetails)
				{
					grdDisplayRow episodeDetailsRow = form.grdDisplay().getSelectedRow().getRows().newRow();	
					
					episodeDetailsRow.setcolDateTime(voEmergencyAttendances.getArrivalDateTime());
					episodeDetailsRow.setcolPatCategory(voEmergencyAttendances.getOutcome() != null ? voEmergencyAttendances.getOutcome().getText() :  null);
					episodeDetailsRow.setcolEpisodeNo(voEmergencyAttendances.getID_EmergencyAttendance().toString());
				}
			}
		}
		
	}
}
