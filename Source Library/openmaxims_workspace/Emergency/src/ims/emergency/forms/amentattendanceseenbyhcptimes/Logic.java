//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.amentattendanceseenbyhcptimes;

import java.util.ArrayList;
import java.util.List;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.ReferralToSpecialtyTeamForEventHistoryVo;
import ims.emergency.vo.SeenByHcpForEventHistoryVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String SEEN_BY_LABEL = "Seen By:";
	private static final String REFERRAL_TO_SPECIALTY_LABEL = "Referral:";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void initialise()
	{
		if(form.getGlobalContext().Emergency.getAmendAttendanceSeenByTimes() != null)
		{
			form.lblSeenByReferralToSpecialty().setValue(SEEN_BY_LABEL);
		}
		else if(form.getGlobalContext().Emergency.getAmendAttendanceReferralToSpecialtyTimes() != null)
		{
			form.lblSeenByReferralToSpecialty().setValue(REFERRAL_TO_SPECIALTY_LABEL);
		}
	}

	private void open()
	{
		if(form.getGlobalContext().Emergency.getAmendAttendanceSeenByTimes() != null)
		{
			form.getLocalContext().setSeenByCurrentRecord(domain.getSeenBy(form.getGlobalContext().Emergency.getAmendAttendanceSeenByTimes()));
		}
		else if(form.getGlobalContext().Emergency.getAmendAttendanceReferralToSpecialtyTimes() != null)
		{
			form.getLocalContext().setReferralToSpecialtyCurrentRecord(domain.getReferralToSpecialty(form.getGlobalContext().Emergency.getAmendAttendanceReferralToSpecialtyTimes()));
		}
		
		if(form.getLocalContext().getSeenByCurrentRecord() == null && form.getLocalContext().getReferralToSpecialtyCurrentRecord() == null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
		}
		
		populateScreenFromData(form.getLocalContext().getSeenByCurrentRecord(), form.getLocalContext().getReferralToSpecialtyCurrentRecord());
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.dtimAllocatedOn().setEnabled(form.dtimAllocatedOn().getValue() != null);
		form.dtimCompletedTime().setEnabled(form.dtimCompletedTime().getValue() != null);
		form.dtimSeenTime().setEnabled(form.dtimSeenTime().getValue() != null);
	}

	private void populateScreenFromData(SeenByHcpForEventHistoryVo seenByCurrentRecord, ReferralToSpecialtyTeamForEventHistoryVo referralToSpecialtyCurrentRecord)
	{
		clearScreen();
		
		if(seenByCurrentRecord == null && referralToSpecialtyCurrentRecord == null)
			return;
		
		if(seenByCurrentRecord != null)
		{
			form.txtSeenBy().setValue(getHCPName(seenByCurrentRecord));
			form.dtimAllocatedOn().setValue(seenByCurrentRecord.getAllocatedDateTime());
			form.dtimSeenTime().setValue(seenByCurrentRecord.getSeenDateTime());
			form.dtimCompletedTime().setValue(seenByCurrentRecord.getCompletedDateTime());
		}
		else if(referralToSpecialtyCurrentRecord != null)
		{
			form.txtSeenBy().setValue(getReferralToSpecialty(referralToSpecialtyCurrentRecord));
			form.dtimAllocatedOn().setValue(referralToSpecialtyCurrentRecord.getReferredDateTime());
			form.dtimSeenTime().setValue(referralToSpecialtyCurrentRecord.getSeenDateTime());
			form.dtimCompletedTime().setValue(referralToSpecialtyCurrentRecord.getCompletionDateTime());
		}
	}

	private String getReferralToSpecialty(ReferralToSpecialtyTeamForEventHistoryVo referralToSpecialtyCurrentRecord)
	{
		if (referralToSpecialtyCurrentRecord.getTeamConsultant() != null)
			return referralToSpecialtyCurrentRecord.getTeamConsultant().getText()+ ", " + referralToSpecialtyCurrentRecord.getSpecialty().getText();
		
		return referralToSpecialtyCurrentRecord.getSpecialty().getText();
	}

	private String getHCPName(SeenByHcpForEventHistoryVo currentRecord)
	{
		if(currentRecord == null)
			return null;
		
		if (currentRecord.getAllocatedMedic()!=null && currentRecord.getAllocatedMedic().getMos()!=null && currentRecord.getAllocatedMedic().getMos().getName()!=null)
		{
			return currentRecord.getAllocatedMedic().getMos().getName().toString();
		}
		else if (currentRecord.getAllocatedNurse()!=null && currentRecord.getAllocatedNurse().getMos()!=null && currentRecord.getAllocatedNurse().getMos().getName()!=null)
		{
			return currentRecord.getAllocatedNurse().getMos().getName().toString();
		}
		
		return null;
	}

	private void clearScreen()
	{
		form.txtSeenBy().setValue(null);
		form.dtimAllocatedOn().setValue(null);
		form.dtimSeenTime().setValue(null);
		form.dtimCompletedTime().setValue(null);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}
	
	private boolean save()
	{
		SeenByHcpForEventHistoryVo seenBy = null;
		ReferralToSpecialtyTeamForEventHistoryVo referralToSpecialty = null;
		
		if(form.getLocalContext().getSeenByCurrentRecord() != null)
		{
			seenBy = populateSeenByDataFromScreen(form.getLocalContext().getSeenByCurrentRecord());
		}
		else if(form.getLocalContext().getReferralToSpecialtyCurrentRecord() != null)
		{
			referralToSpecialty = populateReferralToSpecialtyDataFromScreen(form.getLocalContext().getReferralToSpecialtyCurrentRecord());
		}
		
		String[] errors = validateUIRules();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if(seenBy != null)
		{
    		errors = seenBy.validate();
    		if(errors != null && errors.length > 0)
    		{
    			engine.showErrors(errors);
    			return false;
    		}
		}
		
		if(referralToSpecialty != null)
		{
			errors = referralToSpecialty.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
		}
		
		try
		{
			domain.save(seenBy, referralToSpecialty);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		
		return true;
	}

	private ReferralToSpecialtyTeamForEventHistoryVo populateReferralToSpecialtyDataFromScreen(ReferralToSpecialtyTeamForEventHistoryVo currentRecord)
	{
		if(currentRecord == null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
		}
		
		currentRecord.setReferredDateTime(form.dtimAllocatedOn().getValue());
		currentRecord.setSeenDateTime(form.dtimSeenTime().getValue());
		currentRecord.setCompletionDateTime(form.dtimCompletedTime().getValue());
		
		return currentRecord;
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		DateTime registrationDateTime = form.getGlobalContext().Emergency.getEmergencyAttendanceForTimeAmendments().getRegistrationDateTime();
		DateTime dischargeDatetime = form.getGlobalContext().Emergency.getEmergencyAttendanceForTimeAmendments().getDischargeDateTime();
		
		if(form.dtimAllocatedOn().isEnabled() && form.dtimAllocatedOn().getValue() == null)
		{
			uiErrors.add("Allocated On is mandatory.");
		}
		
		if(form.dtimCompletedTime().isEnabled() && form.dtimCompletedTime().getValue() == null)
		{
			uiErrors.add("Completed Time is mandatory.");
		}
		
		if(form.dtimSeenTime().isEnabled() && form.dtimSeenTime().getValue() == null)
		{
			uiErrors.add("Seen Time is mandatory.");
		}
		
		if (form.dtimAllocatedOn().getValue() != null && form.dtimAllocatedOn().getValue().isGreaterThan(new DateTime()))
		{
			uiErrors.add("Allocated On cannot be set in the future.");
		}
		
		if (form.dtimSeenTime().getValue() != null && form.dtimSeenTime().getValue().isGreaterThan(new DateTime()))
		{
			uiErrors.add("Seen Time cannot be set in the future.");
		}
		
		if (form.dtimCompletedTime().getValue() != null && form.dtimCompletedTime().getValue().isGreaterThan(new DateTime()))
		{
			uiErrors.add("Completed Time cannot be set in the future.");
		}
		
		if (form.dtimAllocatedOn().getValue() != null && registrationDateTime != null && form.dtimAllocatedOn().getValue().isLessThan(registrationDateTime))
		{
			uiErrors.add("Allocated On cannot be less than Registration Start Time.");
		}
		
		if (form.dtimCompletedTime().getValue() != null && registrationDateTime != null && form.dtimCompletedTime().getValue().isLessThan(registrationDateTime))
		{
			uiErrors.add("Completed Time cannot be less than Registration Start Time.");
		}
		
		if (form.dtimSeenTime().getValue() != null && registrationDateTime != null && form.dtimSeenTime().getValue().isLessThan(registrationDateTime))
		{
			uiErrors.add("Seen Time cannot be less than Registration Start Time.");
		}
		
		if (form.dtimCompletedTime().getValue() != null && form.dtimSeenTime().getValue() != null)
		{
			if (form.dtimSeenTime().getValue().getDate().isGreaterThan(form.dtimCompletedTime().getValue().getDate()) || (form.dtimSeenTime().getValue().getDate().equals(form.dtimCompletedTime().getValue().getDate()) && form.dtimSeenTime().getValue().getTime().isGreaterThan(form.dtimCompletedTime().getValue().getTime())))
			{
				uiErrors.add("Seen Time cannot be greater than Completed Time.");
			}
		}
		if(form.dtimAllocatedOn().getValue() != null && dischargeDatetime != null && form.dtimAllocatedOn().getValue().isGreaterThan(dischargeDatetime))
		{
			uiErrors.add("Allocated On cannot be greater than Departed Date/Time.");
		}
		if(form.dtimCompletedTime().getValue() != null && dischargeDatetime != null && form.dtimCompletedTime().getValue().isGreaterThan(dischargeDatetime))
		{
			uiErrors.add("Completed Time cannot be greater than Departed Date/Time.");
		}
		if(form.dtimSeenTime().getValue() != null && dischargeDatetime != null && form.dtimSeenTime().getValue().isGreaterThan(dischargeDatetime))
		{
			uiErrors.add("Seen Time cannot be greater than Departed Date/Time.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private SeenByHcpForEventHistoryVo populateSeenByDataFromScreen(SeenByHcpForEventHistoryVo currentRecord)
	{
		if(currentRecord == null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
		}
		
		currentRecord.setAllocatedDateTime(form.dtimAllocatedOn().getValue());
		currentRecord.setSeenDateTime(form.dtimSeenTime().getValue());
		currentRecord.setCompletedDateTime(form.dtimCompletedTime().getValue());
		
		return currentRecord;
	}
}
