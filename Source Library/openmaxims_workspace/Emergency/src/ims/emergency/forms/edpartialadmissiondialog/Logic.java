//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4892.20548)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edpartialadmissiondialog;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.EDPartialAdmissionVo;
import ims.emergency.vo.ReferralToSpecialtyTeamVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForEDPartialAdmissionVo;
import ims.emergency.vo.TrackingForReferalToSpecialtyVo;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.lookups.AllocationStatus;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.ccConsultant().isRequired(FormMode.EDIT.equals(form.getMode()));
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentEDPartialAdmission()!=null);
		form.btnClose().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.btnCreatedInError().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentEDPartialAdmission()!=null);
		
		AllocationStatus allocatedStatus = form.getLocalContext().getCurrentEDPartialAdmissionIsNotNull() && form.getLocalContext().getCurrentEDPartialAdmission().getAllocatedStatusIsNotNull() ? form.getLocalContext().getCurrentEDPartialAdmission().getAllocatedStatus() : null;
		
		form.btnCancelledNoBed().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentEDPartialAdmission()!=null && AllocationStatus.ACTIVE.equals(allocatedStatus)); //WDEV-19272 
		boolean isDTAPartial = FormMode.EDIT.equals(form.getMode()) && "PARTIAL".equals(ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue());
		form.dtimBedAllocated().setEnabled(isDTAPartial);//WDEV-23267
		form.cmbBedAllocatedWard().setEnabled(isDTAPartial);//WDEV-23267
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null && args.length == 1 && args[0] != null && args[0] instanceof TrackingRefVo)
		{
			form.getLocalContext().setCurrentTrackingForEdPartialAdmission(domain.getTrackingForEdPartialAdmission((TrackingRefVo) args[0]));
			
			initializeControls();
			open();
			
			if(form.getLocalContext().getCurrentTrackingForEdPartialAdmissionIsNotNull() && form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentPartialAdmission()==null)
			{
				newInstance();
			}
		}
		else if(args != null && args.length == 2 && args[0] != null && args[1] != null && args[0] instanceof TrackingRefVo && args[1] instanceof ReferralToSpecialtyTeamVo)	//wdev-19307
		{
			
			form.getLocalContext().setCurrentTrackingForEdPartialAdmission(domain.getTrackingForEdPartialAdmission((TrackingRefVo) args[0]));
			form.getLocalContext().setCurrentReferral((ReferralToSpecialtyTeamVo) args[1]);
			
			initializeControls();
			open();
			
			if(form.getLocalContext().getCurrentTrackingForEdPartialAdmissionIsNotNull() && form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentPartialAdmission()==null)
			{
				newInstance();
			}
			
		}
	}
	private void populateWardCombo()//WDEV-23273
	{
		form.cmbBedAllocatedWard().clear();
		LocationLiteVoCollection temColl = domain.getWards((LocationRefVo)engine.getCurrentLocation());
		if( temColl != null && temColl.size() > 0 )
		{
			for(int i = 0; i < temColl.size();i++)
			{
				form.cmbBedAllocatedWard().newRow(temColl.get(i),temColl.get(i).getName());
			}
			
			if( temColl.size() == 1 )
			{
				form.cmbBedAllocatedWard().setValue(temColl.get(0));
			}
		}
	}
	private void newInstance()
	{
		clearControls();
		
		form.cmbAdmissionStatus().setValue(AllocationStatus.ACTIVE);
		form.getLocalContext().setCurrentEDPartialAdmission(null);
		form.dtimDecisionToAdmit().setValue(new DateTime());
		
		TrackingForEDPartialAdmissionVo currentTracking = form.getLocalContext().getCurrentTrackingForEdPartialAdmission();
		form.cmbSpecialty().setValue(currentTracking!=null && currentTracking.getCurrentReferralIsNotNull() ? currentTracking.getCurrentReferral().getSpecialty() : null);	
		form.cmbPatientStatus().setValue(currentTracking!=null && currentTracking.getAttendanceIsNotNull() ? currentTracking.getAttendance().getPatientAttendanceStatus() : null);
		form.cmbAccomodationTypeRequested().setValue(currentTracking!=null && currentTracking.getAttendanceIsNotNull() ? currentTracking.getAttendance().getAccomodationRequestedType() : null);
		form.ccAuthoringInfo().initializeComponent();
		
		Object hcp = domain.getHcpUser();

		if (hcp instanceof HcpLiteVo)
		{
			form.ccConsultant().setValue((HcpLiteVo) hcp);
		}
		
		form.setMode(FormMode.EDIT);
	}
	
	private void clearControls()
	{
		form.dtimDecisionToAdmit().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.dtimBedAllocated().setValue(null);
		form.cmbBedAllocatedWard().setValue(null); //WDEV-19336 //WDEV-23267
		form.cmbAdmissionStatus().setValue(null);
		form.cmbPatientStatus().setValue(null);
		form.cmbAccomodationTypeRequested().setValue(null);
		form.ccAuthoringInfo().setValue(null);
		form.ccConsultant().setValue(null);
		
	}
	
	private void open()
	{
		//form.getLocalContext().setCurrentTrackingForEdPartialAdmission(domain.getTrackingForEdPartialAdmission(form.getLocalContext().getCurrentTrackingForEdPartialAdmission()));
		form.getLocalContext().setCurrentEDPartialAdmission(form.getLocalContext().getCurrentTrackingForEdPartialAdmission()!=null ? form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentPartialAdmission() : null);
		populateScreenFromData(form.getLocalContext().getCurrentEDPartialAdmission());
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromData(EDPartialAdmissionVo edPartialAdmissionVo)
	{
		if (edPartialAdmissionVo==null)
			return;
		
		
		form.dtimDecisionToAdmit().setValue(edPartialAdmissionVo.getDecisionToAdmitDateTime());
		form.ccConsultant().setValue(edPartialAdmissionVo.getAdmittingConsultant());
		form.cmbSpecialty().setValue(edPartialAdmissionVo.getSpecialty());
		
		form.dtimBedAllocated().setValue(edPartialAdmissionVo.getAllocatedDateTime());
		if (edPartialAdmissionVo.getAllocatedWard() != null) //WDEV-19336
		{	
			form.cmbBedAllocatedWard().newRow(edPartialAdmissionVo.getAllocatedWard(), edPartialAdmissionVo.getAllocatedWard().getName() != null ? edPartialAdmissionVo.getAllocatedWard().getName() : "");
			form.cmbBedAllocatedWard().setValue(edPartialAdmissionVo.getAllocatedWard());
		}
		form.cmbAdmissionStatus().setValue(edPartialAdmissionVo.getAllocatedStatus());
		form.ccAuthoringInfo().setValue(edPartialAdmissionVo.getAuthoringInfo());
		
		TrackingForEDPartialAdmissionVo currentTracking = form.getLocalContext().getCurrentTrackingForEdPartialAdmission();
		form.cmbPatientStatus().setValue(currentTracking!=null && currentTracking.getAttendanceIsNotNull() ? currentTracking.getAttendance().getPatientAttendanceStatus() : null);
		form.cmbAccomodationTypeRequested().setValue(edPartialAdmissionVo.getAccomodationRequestedType());
	}
	
	private void initializeControls()
	{
		populateWardCombo();//WDEV-23273
		form.ccConsultant().initializeResponsibleHcp(MosType.HCP, true);
		TrackingForEDPartialAdmissionVo currentTracking = form.getLocalContext().getCurrentTrackingForEdPartialAdmission();
		form.cmbPatientStatus().setValue(currentTracking!=null && currentTracking.getAttendanceIsNotNull() ? currentTracking.getAttendance().getPatientAttendanceStatus() : null);
				
	}
	
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}
	
	private boolean save()
	{
		EDPartialAdmissionVo edPartialAdmissionToSave = populateDataFromScreen(form.getLocalContext().getCurrentEDPartialAdmission());

		String[] errors = edPartialAdmissionToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		TrackingForEDPartialAdmissionVo trackingToSave = form.getLocalContext().getCurrentTrackingForEdPartialAdmission();
		trackingToSave.getAttendance().setPatientAttendanceStatus(form.cmbPatientStatus().getValue());
		trackingToSave.setCurrentPartialAdmission(edPartialAdmissionToSave);
		
		// for a new EDPartialAdmissionVo set the current EdPartialAdmission in tracking and if conclusionDateTime from attendance is not recorded, set it to Cueewnt Date time (Do NOT UPDATE)
		if (edPartialAdmissionToSave.getID_EDPartialAdmission()==null)
		{
			TrackingAttendanceStatusVo trackingStatusToSave = populateTrackingAttendanceStatus(TrackingStatus.DECISION_TO_ADMIT);
			trackingToSave.setCurrentStatus(trackingStatusToSave);
			
			
			if (trackingToSave.getAttendance().getConclusionDateTime()==null)
			{
				trackingToSave.getAttendance().setConclusionDateTime(new DateTime());
			}
		}
			
		try
		{
			if (trackingToSave != null )
			{
				String[] errors1 = trackingToSave.validate();

				if (errors1 != null && errors1.length > 0)
				{
					engine.showErrors(errors1);
					return false;
				}
				if( form.getLocalContext().getCurrentReferralIsNotNull() && trackingToSave.getCurrentReferralIsNotNull() && !trackingToSave.getCurrentReferral().getCompletionDateTimeIsNotNull()) //wdev-19307
					form.getLocalContext().setCurrentEDPartialAdmission(domain.save(trackingToSave,null,form.getLocalContext().getCurrentReferral()));
				else
					form.getLocalContext().setCurrentEDPartialAdmission(domain.save(trackingToSave,null,null));
				
				form.getLocalContext().setCurrentTrackingForEdPartialAdmission(domain.getTrackingForEdPartialAdmission(trackingToSave));
			}
			
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());

			return false;
		}
		return true;

	}
	
	private TrackingAttendanceStatusVo populateTrackingAttendanceStatus(TrackingStatus status)
	{
		TrackingAttendanceStatusVo trackingAttStatus = new TrackingAttendanceStatusVo();

		trackingAttStatus.setPatient(form.getGlobalContext().Core.getPatientShort());
		trackingAttStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		trackingAttStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		trackingAttStatus.setTrackingArea(form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentArea());
		trackingAttStatus.setPrevTrackingArea(form.getLocalContext().getCurrentTrackingForEdPartialAdmission() != null && form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentStatus() != null ? form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentStatus().getPrevTrackingArea() : null);
		
		trackingAttStatus.setStatusDatetime(new DateTime());

		Object mos = domain.getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			trackingAttStatus.setCreatedBy((MemberOfStaffLiteVo) mos);
		}

		trackingAttStatus.setStatus(status);
		trackingAttStatus.setPrevStatus((form.getLocalContext().getCurrentTrackingForEdPartialAdmission()!=null && form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentStatus()!=null  ) ? form.getLocalContext().getCurrentTrackingForEdPartialAdmission().getCurrentStatus().getStatus() : null);
		
		return trackingAttStatus;
	}
	
	private EDPartialAdmissionVo populateDataFromScreen(EDPartialAdmissionVo currentEDPartialAdmission)
	{
		if (currentEDPartialAdmission == null)
		{
			currentEDPartialAdmission = new EDPartialAdmissionVo();
		}
		else
			currentEDPartialAdmission=(EDPartialAdmissionVo) currentEDPartialAdmission.clone();

		currentEDPartialAdmission.setDecisionToAdmitDateTime(form.dtimDecisionToAdmit().getValue());
		currentEDPartialAdmission.setAdmittingConsultant((HcpLiteVo) form.ccConsultant().getValue());
		currentEDPartialAdmission.setSpecialty(form.cmbSpecialty().getValue());
		currentEDPartialAdmission.setAllocatedDateTime(form.dtimBedAllocated().getValue());
		currentEDPartialAdmission.setAllocatedWard(form.cmbBedAllocatedWard().getValue());
		currentEDPartialAdmission.setAllocatedStatus(form.cmbAdmissionStatus().getValue());
		currentEDPartialAdmission.setAuthoringInfo(form.ccAuthoringInfo().getValue());
		currentEDPartialAdmission.setAccomodationRequestedType(form.cmbAccomodationTypeRequested().getValue());
		
		return currentEDPartialAdmission;
	}
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.dtimDecisionToAdmit().getValue()!=null && form.dtimDecisionToAdmit().getValue().isGreaterThan(new DateTime()))//WDEV-19579
		{
			errors.add("'Decision to Admit Date/Time' cannot be in the future.");
		}
			
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	@Override
	protected void onBtnCreatedInErrorClick() throws PresentationLogicException
	{
		if (createdInError(AllocationStatus.CREATED_IN_ERROR))
		{
			engine.close(DialogResult.CANCEL);
		}
		
	}
	private boolean createdInError(AllocationStatus allocationStatus)
	{
		EDPartialAdmissionVo edPartialAdmissionToCancel = form.getLocalContext().getCurrentEDPartialAdmission();

		
		edPartialAdmissionToCancel.setAllocatedStatus(allocationStatus);
		
		String[] errors = edPartialAdmissionToCancel.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		TrackingForEDPartialAdmissionVo trackingToSave = form.getLocalContext().getCurrentTrackingForEdPartialAdmission();
		TrackingAttendanceStatusVo trackingStatusToSave = populateTrackingAttendanceStatus(trackingToSave.getCurrentStatus().getPrevStatus());
		trackingToSave.setCurrentStatus(trackingStatusToSave);
		trackingToSave.setCurrentPartialAdmission(null);
		trackingToSave.getAttendance().setPatientAttendanceStatus(null);
		
		String[] errors1 = trackingToSave.validate();

		if (errors1 != null && errors1.length > 0)
		{
			engine.showErrors(errors1);
			return false;
		}
		
		try
		{
			form.getLocalContext().setCurrentEDPartialAdmission(domain.save(trackingToSave,edPartialAdmissionToCancel,null));	
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());

			return false;
		}
		
		return true;
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	//WDEV-19272 
	@Override
	protected void onBtnCancelledNoBedClick() throws PresentationLogicException
	{
		if (createdInError(AllocationStatus.CANCELLED_NO_BED))
		{
			engine.close(DialogResult.CANCEL);
		}
		
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.ABORT);
	}
}
