//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.eddecisiontoadmitdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventForPendingEmergencyAdmissionShortVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.AdmissionType;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.BedAvailabilityForTrackVo;
import ims.emergency.vo.PendingEmergencyAdmissionShortVo;
import ims.emergency.vo.ReferralToSpecialtyTeamVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForReferalToSpecialtyVo;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.TrackingforDecisionToAdmitDialogVo;
import ims.emergency.vo.enums.EDPendingDecisionToAdmitEvent;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		//WDEV-20388
		if (engine.getPreviosFormName().getID() == form.getForms().Core.BedManagerView.getID()
				|| engine.getPreviosFormName().getID() == form.getForms().Core.BedInfoDialog.getID()
				|| engine.getPreviosFormName().getID() == form.getForms().Core.WardViewPatientList.getID())
		{
			form.getLocalContext().setFormNotOpenedFromED(true);
		}
		
		if (args != null && args.length == 1 && args[0] != null && args[0] instanceof TrackingRefVo)
		{
			TrackingforDecisionToAdmitDialogVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo((TrackingRefVo) args[0]);

			form.getLocalContext().setTrackingForClinicianWorklistAndTriageVo(tempVo);

			if (tempVo != null)
			{
				form.getLocalContext().setPendingEmergencyAdmission(tempVo.getAssociatedPendingEmergencyAdmission());
				form.getLocalContext().setBedAvailabilityForTrackVo(tempVo.getBedAvailability());
			}

			open();
		}
		// WDEV-16777, WDEV-16987
		else if (args != null && args.length >= 1 && args[0] != null && args[0] instanceof TrackingRefVo)
		{
			TrackingforDecisionToAdmitDialogVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo((TrackingRefVo) args[0]);

			if (args[0] instanceof TrackingForReferalToSpecialtyVo)
			{
				if (args.length == 2 && args[1] != null && args[1] instanceof ReferralToSpecialtyTeamVo)
				{
					form.getLocalContext().setreferralToSpecialtyToBeSaved((ReferralToSpecialtyTeamVo) args[1]);
				}
			}
			else if (args.length >= 2 && args[1] != null && args[1] instanceof EDPendingDecisionToAdmitEvent)
			{
				form.getLocalContext().setPendingDTAEventType((EDPendingDecisionToAdmitEvent) args[1]);				
			}

			form.getLocalContext().setTrackingForClinicianWorklistAndTriageVo(tempVo);
			if (tempVo != null)
			{	
				form.getLocalContext().setPendingEmergencyAdmission(tempVo.getAssociatedPendingEmergencyAdmission());
				form.getLocalContext().setBedAvailabilityForTrackVo(tempVo.getBedAvailability());
			}
			open();
		}
		else
		{
			throw new FormOpenException("Error: The Dialog is not opened properly");
		}
	}
	
	private void initialize()
	{
		form.ccRequestedBy().isRequired(true);
		//WDEV-19242 //WDEV-19338 
		form.lblDecisionToAdmit().setValue(ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING") ? "Bed Request Date:" : "Decision to Admit Date:");
		engine.setCaption(ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING") ? "Bed Request" : "ED Decision to Admit");
		if (!ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
			showBedReadyControls(false);
		populateHospitalsCombo();//WDEV-20388
		//populateServicesCombo(); //WDEV-20722, WDEV-21201

	}

	private void showBedReadyControls(boolean bShow)
	{
		form.pnlBedReady().setVisible(bShow);
		form.btnBedReady().setVisible(bShow);
		form.lblBedReadyWard().setVisible(bShow);
		form.cmbBedReadyWard().setVisible(bShow);
		form.dtimAvailableBedTime().setVisible(bShow);
		form.lblDateTimeBedReady().setVisible(bShow);
	}

	//WDEV-20388
	private void populateHospitalsCombo() 
	{
		form.cmbHospital().clear();
		
		LocationLiteVoCollection hospitals = domain.listActiveHospitals();
		if (hospitals!=null)
		{
			for (LocationLiteVo item: hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());
			}
		}
	}
	
	//WDEV-20722
	
	/*
	private void populateServicesCombo()
	{
		form.qmbService().clear();
		
		ServiceLiteVoCollection services = domain.listActiveClinicalServices(null);
		
		if (services == null || services.size() == 0)
			return;
		
		for (ServiceLiteVo service : services)
			form.qmbService().newRow(service, service.getServiceName());
	}
	*/
	
	//WDEV-20722 ends here
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Emergency.TrackingStatusDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if (removeBed(form.getGlobalContext().Emergency.getTrackingAttendanceStatus()))
				engine.close(DialogResult.OK);
		}
	}

	private void open()
	{
		populateScreenFromData(form.getLocalContext().getPendingEmergencyAdmission(), form.getLocalContext().getBedAvailabilityForTrackVo());

		// If no MoS was populated into control default in logged in MoS user, if any
		if (form.ccRequestedBy().getValue() == null)
		{
			Object mos = domain.getMosUser();

			if (mos instanceof MemberOfStaffLiteVo)
			{
				form.ccRequestedBy().setValue((MemberOfStaffLiteVo) mos);
			}
		}
		
		if (form.dtimDecisionToAdmitDate().getValue() == null)
		{
//			if (form.getLocalContext().getConclusionDateTime() != null)
//				form.dtimDecisionToAdmitDate().setValue(form.getLocalContext().getConclusionDateTime());
//			else
				form.dtimDecisionToAdmitDate().setValue(new DateTime());
		}
		//WDEV-20304
		boolean isBedReadySaved = form.getLocalContext().getBedAvailabilityForTrackVo() != null && form.getLocalContext().getBedAvailabilityForTrackVo().getID_BedAvailabilityIsNotNull() && form.getLocalContext().getBedAvailabilityForTrackVo().getAvailableDateTimeIsNotNull();
		if (!isBedReadySaved && (Boolean.TRUE.equals(form.getLocalContext().getWasBedReadyPressed()) || EDPendingDecisionToAdmitEvent.BED_READY.equals(form.getLocalContext().getPendingDTAEventType())))
		{	
			setBedReadyDefaults();
		}
		
		//WDEV-20722
		if(form.cmbHospital().getValue() == null)
		{
			LocationLiteVo tempVo = getCurrentLocation();
			if( tempVo != null )
			{
				LocationLiteVo currentHospital = domain.getCurrentHospital(tempVo);
				form.cmbHospital().setValue(currentHospital);
				//populateWardsCombo(currentHospital, null); //WDEV-21201
			}
		}
		//WDEV-20722 - ends here
		
		form.setMode(FormMode.EDIT);
	}
	private void updateControlsState()
	{
		//WDEV-20388
		boolean isEditMode = FormMode.EDIT.equals(form.getMode());
		boolean isBedReadySaved = form.getLocalContext().getBedAvailabilityForTrackVo() != null && form.getLocalContext().getBedAvailabilityForTrackVo().getID_BedAvailabilityIsNotNull() && (form.getLocalContext().getBedAvailabilityForTrackVo().getAvailableDateTimeIsNotNull() || form.getLocalContext().getBedAvailabilityForTrackVo().getWardIsNotNull());
		boolean formNotOpenedFromED = Boolean.TRUE.equals(form.getLocalContext().getFormNotOpenedFromED());
		boolean wasBedReadyPressed = Boolean.TRUE.equals(form.getLocalContext().getWasBedReadyPressed());
		boolean isBedReadyMode = EDPendingDecisionToAdmitEvent.BED_READY.equals(form.getLocalContext().getPendingDTAEventType());
		
		// //WDEV-20722 
//		if(FormMode.EDIT.equals(form.getMode()))
//		{
//			//form.btnSave().setEnabled(form.cmbDTABedType().getValue() != null);
//		}
		
		form.btnRemoveBedRequest().setVisible(!formNotOpenedFromED && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() //WDEV-20388
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getID_Tracking() != null
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailabilityIsNotNull()
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailability().getID_BedAvailability() != null); //wdev-17254
		
		form.btnRemoveBedRequest().setEnabled(!formNotOpenedFromED && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() //WDEV-20388
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getID_Tracking() != null
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailabilityIsNotNull()
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailability().getID_BedAvailability() != null); //wdev-17254
		
		//WDEV-20388
		
		form.ccRequestedBy().setEnabled(!isBedReadyMode && isEditMode && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED)));
		form.dtimDecisionToAdmitDate().setEnabled(!isBedReadyMode && isEditMode && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED)));
		form.cmbDTABedType().setEnabled(!isBedReadyMode && isEditMode && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED)));
		form.qmbService().setEnabled(!isBedReadyMode && isEditMode && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED))); //WDEV-20722
		//form.cmbSpecialty().setEnabled(!isBedReadyMode && isEditMode && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED))); //WDEV-20722
		form.cmbSpecialty().setEnabled(false); //WDEV-20722
		form.cmbHospital().setEnabled(!isBedReadyMode && isEditMode && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED)));
		form.qmbWard().setEnabled(!isBedReadyMode && isEditMode && form.cmbHospital().getValue()!=null && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED)));
		form.txtComments().setEnabled(!isBedReadyMode && isEditMode && (!isBedReadySaved || (isBedReadySaved && formNotOpenedFromED)));
				
		//WDEV-20304
		showBedReadyControls(ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING") && (formNotOpenedFromED || isBedReadySaved));
		form.btnBedReady().setEnabled(isEditMode && formNotOpenedFromED && !wasBedReadyPressed && !isBedReadySaved && !isBedReadyMode);
		form.dtimAvailableBedTime().setEnabled(isEditMode && formNotOpenedFromED && (wasBedReadyPressed || isBedReadyMode || isBedReadySaved));
		form.cmbBedReadyWard().setEnabled(isEditMode && formNotOpenedFromED && (wasBedReadyPressed || isBedReadyMode || isBedReadySaved));
		form.cmbBedReadyWard().setRequired(isEditMode && formNotOpenedFromED && (wasBedReadyPressed || isBedReadyMode));
		form.dtimAvailableBedTime().setRequired(isEditMode && formNotOpenedFromED && (wasBedReadyPressed || isBedReadyMode));
		if (isEditMode)
			form.btnSave().setEnabled((isBedReadySaved && formNotOpenedFromED) || !isBedReadySaved);
		
		
	}
	private void clearControls()
	{
		form.dtimDecisionToAdmitDate().setValue(null);
		form.cmbDTABedType().setValue(null);
		
		//WDEV-20388
		form.cmbSpecialty().setValue(null);
		form.cmbHospital().setValue(null);
		form.qmbWard().setValue(null);
		form.txtComments().setValue(null);
		
		//WDEV-20304  
		form.cmbBedReadyWard().setValue(null);
		form.dtimAvailableBedTime().setValue(null);
	}
	private void populateScreenFromData(PendingEmergencyAdmissionShortVo pendrec, BedAvailabilityForTrackVo bedAvailability)
	{
		clearControls();

		if (pendrec == null)
			return;
		
		if (!EmergencyAdmissionStatus.CANCELLED.equals(pendrec.getAdmissionStatus()))  //wdev-17254
		{
			if (bedAvailability != null)
				form.ccRequestedBy().setValue(bedAvailability.getRequestedBy());
			
			form.dtimDecisionToAdmitDate().setValue(pendrec.getDTADateTime());
			form.cmbDTABedType().setValue(pendrec.getBedTypeRequested());
			
			//WDEV-20722
			if(pendrec.getService() != null)
			{
				if (form.qmbService().getValues() != null && form.qmbService().getValues().contains(pendrec.getService()))
				{
					form.qmbService().setValue(pendrec.getService());
				}
				else
				{
					form.qmbService().newRow(pendrec.getService(), pendrec.getService().getServiceName() != null ? pendrec.getService().getServiceName() : "");
					form.qmbService().setValue(pendrec.getService());
				}
				
				if (pendrec.getService().getSpecialty() != null)
				{
					if (form.cmbSpecialty().getValues() != null && form.cmbSpecialty().getValues().contains(pendrec.getService().getSpecialty()))
						{
							form.cmbSpecialty().setValue(pendrec.getService().getSpecialty());
						}
					else
					{
							form.cmbSpecialty().newRow(pendrec.getService().getSpecialty(), pendrec.getService().getSpecialty().getText() != null ? pendrec.getService().getSpecialty().getText() : "");
							form.cmbSpecialty().setValue(pendrec.getService().getSpecialty());
					}
				}
			}
			//WDEV-20722 ends here
			
			//WDEV-20388
			//form.cmbSpecialty().setValue(pendrec.getPasEvent().getSpecialty());
			
			if (pendrec.getHospital() != null) //WDEV-20388
			{	
				if (form.cmbHospital().getValues()!=null && form.cmbHospital().getValues().contains(pendrec.getHospital()))
				{
					form.cmbHospital().setValue(pendrec.getHospital());
				}
				else
				{
					form.cmbHospital().newRow(pendrec.getHospital(), pendrec.getHospital().getName() != null ? pendrec.getHospital().getName() : "");
					form.cmbHospital().setValue(pendrec.getHospital());
				}
			}
			
			if (pendrec.getAllocatedWard() != null) //WDEV-19336
			{	
				//populateWardsCombo(pendrec.getHospital(), null);
				form.qmbWard().newRow(pendrec.getAllocatedWard(), pendrec.getAllocatedWard().getName() != null ? pendrec.getAllocatedWard().getName() : "");
				form.qmbWard().setValue(pendrec.getAllocatedWard());
				
			}

			form.txtComments().setValue(pendrec.getComments());

			if (bedAvailability != null)
			{	
				form.dtimAvailableBedTime().setValue(bedAvailability.getAvailableDateTime());
				//WDEV-22427
				if (pendrec.getHospital() != null)
				{	
					populateBedReadyWard(domain.listActiveWardsForHospital(pendrec.getHospital(), null));
				}
				//  WDEV-20304 
				LocationLiteVo ward = bedAvailability.getWardIsNotNull() ? bedAvailability.getWard() : (EDPendingDecisionToAdmitEvent.BED_READY.equals(form.getLocalContext().getPendingDTAEventType()) && pendrec.getAllocatedWard() != null ?  pendrec.getAllocatedWard() : null);
									
				if (ward != null && !form.cmbBedReadyWard().getValues().contains(ward))
					form.cmbBedReadyWard().newRow(ward, ward.getName());
				form.cmbBedReadyWard().setValue(ward);				
				//WDEV-22427
			}	
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = getUiErrors();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		//WDEV-20988
		boolean allocatedWardChanged = form.qmbWard().getValue() != null && (form.getLocalContext().getPendingEmergencyAdmission() == null || !form.qmbWard().getValue().equals(form.getLocalContext().getPendingEmergencyAdmission().getAllocatedWard()));
		PendingEmergencyAdmissionShortVo record = populateDataFromScreen(form.getLocalContext().getPendingEmergencyAdmission());
		BedAvailabilityForTrackVo bedAvailable = populateBedAvailabilityFromScreen(form.getLocalContext().getBedAvailabilityForTrackVo());
		TrackingforDecisionToAdmitDialogVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo());

		if (record != null && !record.getID_PendingEmergencyAdmissionIsNotNull())
		{
			if (tempVo != null && tempVo.getAssociatedPendingEmergencyAdmissionIsNotNull())
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.ABORT);// WDEV-16777
				return;
			}
		}
		
		// Create new current status (Decision To Admit) for tracking
		TrackingAttendanceStatusVo newStatus = new TrackingAttendanceStatusVo();

		newStatus.setPatient(tempVo.getPatient());
		newStatus.setEpisode(tempVo.getEpisode().getEpisodeOfCare());
		newStatus.setAttendance(tempVo.getAttendance().getCareContext());
		newStatus.setTrackingArea(tempVo.getCurrentArea());
		newStatus.setStatusDatetime(new DateTime());
		newStatus.setCreatedBy((MemberOfStaffRefVo) domain.getMosUser());
		newStatus.setStatus(TrackingStatus.DECISION_TO_ADMIT);
		
		newStatus.setPrevStatus((tempVo != null && tempVo.getCurrentStatus() != null) ? tempVo.getCurrentStatus().getStatus() : null);
		newStatus.setPrevTrackingArea((tempVo != null && tempVo.getCurrentStatus() != null) ? tempVo.getCurrentStatus().getTrackingArea() : null);
		form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setCurrentStatus(newStatus);
		
		if (form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getConclusionDateTime() == null)
		{
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setConclusionDateTime(form.dtimDecisionToAdmitDate().getValue());
		}
		
		form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setBedTypeRequested(form.cmbDTABedType().getValue());
		
		errors = record.validate(bedAvailable.validate(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().validate(validateBedReadyControls())));				
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		//WDEV-20988
		boolean hasWardChanged = (record.getID_PendingEmergencyAdmissionIsNotNull() && (Boolean.TRUE.equals(form.getLocalContext().getFormNotOpenedFromED()) && bedAvailable != null && bedAvailable.getWardIsNotNull() && !bedAvailable.getWard().equals(record.getAllocatedWard())) || allocatedWardChanged);
		
		try 
		{
			domain.save(record, bedAvailable, form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo(), form.getLocalContext().getreferralToSpecialtyToBeSaved(), hasWardChanged);//WDEV-16777
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			//WDEV-16777
			engine.close(DialogResult.ABORT);
			return;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		engine.close(DialogResult.OK);
	}
	private String[] validateBedReadyControls()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		if (!ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING") || !Boolean.TRUE.equals(form.getLocalContext().getFormNotOpenedFromED()))
			return null;
		if (form.dtimAvailableBedTime().getValue() != null && form.dtimDecisionToAdmitDate().getValue() != null && form.dtimAvailableBedTime().getValue().isLessThan(form.dtimDecisionToAdmitDate().getValue()))
		  uiErrors.add("Date/Time the Bed is Available cannot be earlier than Bed Request Date.");
		
		  return uiErrors.size() > 0 ? uiErrors.toArray(new String[uiErrors.size()]) : null;
	}
	private BedAvailabilityForTrackVo populateBedAvailabilityFromScreen(BedAvailabilityForTrackVo bedAvailability)
	{
		if (bedAvailability == null)
		{	
			bedAvailability = new BedAvailabilityForTrackVo();
			bedAvailability.setPatient(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getPatient());
			bedAvailability.setEpisode(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCare());
			bedAvailability.setAttendance(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContext());
			bedAvailability.setTrackingArea(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getCurrentArea());
			bedAvailability.setAwaitingDateTime(form.dtimDecisionToAdmitDate().getValue());		
			bedAvailability.setRequestedBy((MemberOfStaffLiteVo) form.ccRequestedBy().getValue());
			bedAvailability.setAvailableDateTime(form.dtimAvailableBedTime().getValue());
			bedAvailability.setWard(form.cmbBedReadyWard().getValue());
		}
		else
		{
			bedAvailability.setAvailableDateTime(form.dtimAvailableBedTime().getValue());
			bedAvailability.setWard(form.cmbBedReadyWard().getValue());
		}		

		return bedAvailability;
	}

	private PendingEmergencyAdmissionShortVo populateDataFromScreen(PendingEmergencyAdmissionShortVo record)
	{
		if( record == null)
			record = new PendingEmergencyAdmissionShortVo();
		
		record.setAdmissionStatus(EmergencyAdmissionStatus.DTA);
		record.setDTADateTime(form.dtimDecisionToAdmitDate().getValue());
		record.setAdmissionType(AdmissionType.PLANNED);
		
		LocationLiteVo tempVo = getCurrentLocation();	//wdev-17488
		if( tempVo != null )//WDEV-17615
		{
			//WDEV-17615
			LocationLiteVo currentHospital = domain.getCurrentHospital(tempVo);
			record.setCurrentLocation(currentHospital);
		}
		record.setBedTypeRequested(form.cmbDTABedType().getValue());
		
		//WDEV-20388
		record.setHospital(form.cmbHospital().getValue());
		record.setAllocatedWard(form.qmbWard().getValue());
		record.setComments(form.txtComments().getValue());
		
		record.setService(form.qmbService().getValue()); //WDEV-20722
		record.setSpecialty(form.cmbSpecialty().getValue()); //WDEV-20722
		
		if( !record.getPasEventIsNotNull())
		{
			PasEventForPendingEmergencyAdmissionShortVo pasVo = new PasEventForPendingEmergencyAdmissionShortVo();
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendanceIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getRegistrationDateTimeIsNotNull() )
				pasVo.setEventDateTime(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getRegistrationDateTime());
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull())
			{
				pasVo.setPatient(domain.getPatientShort( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getPatient()));
							
			}
//			pasVo.setPasEventId(new DateTime().toString()); //wdev-17231
			pasVo.setPasEventId(new DateTime().toString(DateTimeFormat.MILLI)); //WDEV-20999
			LocationLiteVo templocVo = getCurrentLocation();	//wdev-17488
			if( templocVo != null )//WDEV-17615
			{
				//WDEV-17615
				LocationLiteVo currentHospital = domain.getCurrentHospital(templocVo);
				pasVo.setLocation(currentHospital);
			}
			pasVo.setService(form.qmbService().getValue());
			pasVo.setSpecialty(form.cmbSpecialty().getValue());//WDEV-20388
			record.setPasEvent(pasVo);	
		}
		if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() && !form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailabilityIsNotNull())
		{
			BedAvailabilityForTrackVo bedTrackVo = new BedAvailabilityForTrackVo();
			bedTrackVo.setPatient( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getPatient());
			bedTrackVo.setEpisode( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCare());
			bedTrackVo.setAttendance(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContext());
			bedTrackVo.setTrackingArea(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getCurrentArea());
			Object user = domain.getMosUser();
			if( user instanceof MemberOfStaffLiteVo)
			{
				bedTrackVo.setRequestedBy((MemberOfStaffLiteVo)user);
			}
			
			bedTrackVo.setAwaitingDateTime(new DateTime());
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setBedAvailability(bedTrackVo);
		}
		
		return record;
	}
	//wdev-17488
	private LocationLiteVo getCurrentLocation()
	{
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();

		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if (locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(), locsite.getVersion_Location());
				loc = domain.getLocationLiteVo(loc);
				
			}
		}
		return loc;
	}
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		//WDEV-20722
		
		if( form.ccRequestedBy().getValue() == null)
		{
			errors.add("Requested By is mandatory.");
		}
		//WDEV-20722
	
		if( form.dtimDecisionToAdmitDate().getValue() == null )
		{
			//WDEV-19242 
			if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
				errors.add("Bed Request Date is mandatory.");
			else		
				errors.add("Decision to Admit Date is mandatory.");
		}
		else
		{
			if( form.dtimDecisionToAdmitDate().getValue().isGreaterThan(new DateTime()))
			{
				//WDEV-19242
				if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
					errors.add("Bed Request Date cannot be in the future.");
				else
					errors.add("Decision to Admit Date cannot be in the future.");
			}
		}
		if( form.cmbDTABedType().getValue() == null)
		{
			errors.add("Bed Type is mandatory."); //WDEV-20722
		}
		

		//WDEV-20722
		if (form.qmbService().getValue() == null)
		{
			errors.add("Service is mandatory.");
		}
		
//		if (form.cmbSpecialty().getValue() == null)
//		{
//			errors.add("Specialty is mandatory.");
//		}
		
		if (form.cmbHospital().getValue() == null)
		{
			errors.add("Hospital is mandatory.");
		}
		else
		{
			if (form.qmbWard().getValue() == null)
			{
				errors.add("Ward is mandatory.");
			}
		}		
		if (Boolean.TRUE.equals(form.getLocalContext().getWasBedReadyPressed()) || EDPendingDecisionToAdmitEvent.BED_READY.equals(form.getLocalContext().getPendingDTAEventType()))
		{
			if (form.dtimAvailableBedTime().getValue() == null)
			{
				errors.add("Date/Time the Bed Is Available is mandatory.");
			}
			if (form.cmbBedReadyWard().getValue() == null)
			{
				errors.add("Ward is mandatory.");
			}
		}
	
		//WDEV-20722 ends here
		
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Attendance Record", searchErrors);
			
			return searchErrors;
		}
		return null;
	}

	
	protected void onDtimDecisionToAdmitDateValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//updateControlsState();
	}
	
	protected void onCmbDTABedTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
		if( form.dtimDecisionToAdmitDate().getValue() == null)
			engine.showMessage("Decision to Admit Date is mandatory.");
	}
	
	//wdev-17254
	protected void onBtnRemoveBedRequestClick()	throws PresentationLogicException 
	{
		//wdev-17380
		if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() )
		{
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisodeIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCareIsNotNull())
				form.getGlobalContext().Core.setEpisodeofCareShort(domain.getEpisodeOfCare(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCare()));
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendanceIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContextIsNotNull())
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContext()));
		}
		//----------
		engine.open(form.getForms().Emergency.TrackingStatusDialog);
	}

	//wdev-17254
	private boolean removeBed(TrackingAttendanceStatusVo newStatus)
	{
		if (form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull())
		{
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setCurrentStatus(newStatus);
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setConclusionDateTime(null);
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setBedTypeRequested(null);
			
			PendingEmergencyAdmissionShortVo temppend = null;
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAssociatedPendingEmergencyAdmissionIsNotNull() )
			{
				temppend = form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAssociatedPendingEmergencyAdmission(); 
				temppend.setAdmissionStatus(EmergencyAdmissionStatus.CANCELLED);
				temppend.setAllocatedWard(null);
			}
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setBedAvailability(null);
			
			String[] errors = form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			try 
			{
				domain.saveRemoveBed(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo(),temppend);
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return true;
			} 
			catch (UniqueKeyViolationException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			
			return true;
			
		}
		return false;
	}

	//WDEV-20388
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	//WDEV-20388
	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		//populateWardsCombo(form.cmbHospital().getValue(), null);
		form.qmbWard().clear();
		updateControlsState();
	}
	
	private void populateWardsCombo(LocationLiteVo parentHospital, String value)
	{
		form.qmbWard().clear();

		if (parentHospital==null)
			return;

		LocShortVoCollection wards = domain.listActiveWardsForHospital(parentHospital, value);
		if (wards!=null)
		{
			//WDEV-20722
			if (wards.size() == 1)
			{
				form.qmbWard().newRow(wards.get(0), wards.get(0).getName());
				form.qmbWard().setValue(wards.get(0));
			}
			else if (wards.size() > 1)
			{
				for (LocationLiteVo item : wards) 
				{
					form.qmbWard().newRow(item, item.getName());
				}
			}
		}

		if (form.cmbBedReadyWard().getVisible())
			populateBedReadyWard(wards);

	}

	private void populateBedReadyWard(LocShortVoCollection wards)
	{
		form.cmbBedReadyWard().clear();
		
		if (wards != null)
		{
			for (int i=0; i<wards.size();i++) 
			{
				form.cmbBedReadyWard().newRow(wards.get(i), wards.get(i).getName());
			}			
		}
	}

	@Override
	protected void onBtnBedReadyClick() throws PresentationLogicException
	{
		form.getLocalContext().setWasBedReadyPressed(true);
		setBedReadyDefaults();
		updateControlsState();		
	}

	private void setBedReadyDefaults()
	{
		form.dtimAvailableBedTime().setValue(new DateTime());
		//WDEV-20988
		if (form.getLocalContext().getPendingEmergencyAdmissionIsNotNull() && form.cmbBedReadyWard().getValues().size() > 0 && form.getLocalContext().getPendingEmergencyAdmission().getAllocatedWardIsNotNull() && form.cmbBedReadyWard().getValues().contains(form.getLocalContext().getPendingEmergencyAdmission().getAllocatedWard()))
		{
			form.cmbBedReadyWard().setValue(form.getLocalContext().getPendingEmergencyAdmission().getAllocatedWard());
		}		
	}

	//WDEV-20722
	/*
	@Override
	protected void onCmbServiceValueChanged() throws PresentationLogicException 
	{
		form.cmbSpecialty().clear();
		
		if (form.cmbService().getValue() != null)
		{
			Specialty specialty = form.cmbService().getValue().getSpecialty(); 
			
			if(specialty != null)
			{
				form.cmbSpecialty().newRow(specialty, specialty.getText());
				form.cmbSpecialty().setValue(specialty);
			}
		}
	}
	*/
	//WDEV-20722 ends here

	//WDEV-21201
	@Override
	protected void onQmbWardTextSubmited(String value) throws PresentationLogicException 
	{		
		populateWardsCombo(form.cmbHospital().getValue(), value);
		form.qmbWard().showOpened();
	}
	
	//WDEV-21201
	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException 
	{
		form.cmbSpecialty().clear();
		
		if (form.qmbService().getValue() != null)
		{
			Specialty specialty = form.qmbService().getValue().getSpecialty(); 
			
			if(specialty != null)
			{
				form.cmbSpecialty().newRow(specialty, specialty.getText());
				form.cmbSpecialty().setValue(specialty);
			}
		}
	}

	//WDEV-21201
	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbService().clear();
		
		ServiceLiteVoCollection services = domain.listActiveClinicalServices(value);
		
		if (services == null || services.size() == 0)
			return;
		
		for (ServiceLiteVo service : services)
			form.qmbService().newRow(service, service.getServiceName());
		
		form.qmbService().showOpened();
	}
}
