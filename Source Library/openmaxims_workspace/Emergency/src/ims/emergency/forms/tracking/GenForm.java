//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.tracking;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdTrackingCountRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTrackingCountRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColAreaReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColAreaReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColAreaOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColArea(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColArea()
		{
			return (String)super.row.get(0);
		}
		public void setColArea(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColAreaTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColNumberOfPatientsReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColNumberOfPatientsReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColNumberOfPatientsOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColNumberOfPatients(String value)
		{
			super.row.setTooltip(1, value);
		}
		public Integer getColNumberOfPatients()
		{
			return (Integer)super.row.get(1);
		}
		public void setColNumberOfPatients(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellColNumberOfPatientsTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
		public grdTrackingCountRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdTrackingCountRow(super.row.getParent());
		}
		public grdTrackingCountRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdTrackingCountRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdTrackingCountRowCollection collection;
	}
	public static class grdTrackingCountRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTrackingCountRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTrackingCountRow get(int index)
		{
			return new grdTrackingCountRow(super.collection.get(index));
		}
		public grdTrackingCountRow newRow()
		{
			return new grdTrackingCountRow(super.collection.newRow());
		}
		public grdTrackingCountRow newRow(boolean autoSelect)
		{
			return new grdTrackingCountRow(super.collection.newRow(autoSelect));
		}
		public grdTrackingCountRow newRowAt(int index)
		{
			return new grdTrackingCountRow(super.collection.newRowAt(index));
		}
		public grdTrackingCountRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTrackingCountRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTrackingCountGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdTrackingCountRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdTrackingCountRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdTrackingCountRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdTrackingCountRow[] result = new GenForm.grdTrackingCountRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdTrackingCountRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdTrackingCountRow[] getAllRows(GenForm.grdTrackingCountRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdTrackingCountRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdTrackingCountRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdTrackingCountRow[] result = new GenForm.grdTrackingCountRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdTrackingCountRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdTrackingCountRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdTrackingCountRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdTrackingCountRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		public void setColAreaCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdTrackingCountRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTrackingCountRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTrackingCountRowCollection getRows()
		{
			return new grdTrackingCountRowCollection(super.grid.getRows());
		}
		public grdTrackingCountRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTrackingCountRow(row);
		}
		public void setColAreaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColAreaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColNumberOfPatientsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColNumberOfPatientsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}

	public static class GroupDisplayRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 672, 45, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Current and Departed", startTabIndex.intValue() + 9);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 528, 45, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Departed", startTabIndex.intValue() + 8);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 384, 45, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Currently in Dept", startTabIndex.intValue() + 7);
		}
		public void setText(GroupDisplayEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupDisplayEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupDisplayEnumeration.None;
				case 0: return GroupDisplayEnumeration.rdoCurrentAndDeparted;
				case 1: return GroupDisplayEnumeration.rdoDeparted;
				case 2: return GroupDisplayEnumeration.rdoCurrentlyInDept;
			}
			return null;
		}
		public void setValue(GroupDisplayEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupDisplayEnumeration.None.id);
		}
		public boolean isEnabled(GroupDisplayEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupDisplayEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupDisplayEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupDisplayEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupDisplayEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupDisplayEnumeration None = new GroupDisplayEnumeration(-1);
		public static GroupDisplayEnumeration rdoCurrentAndDeparted = new GroupDisplayEnumeration(0);
		public static GroupDisplayEnumeration rdoDeparted = new GroupDisplayEnumeration(1);
		public static GroupDisplayEnumeration rdoCurrentlyInDept = new GroupDisplayEnumeration(2);
		private GroupDisplayEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupDisplayEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupViewRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 672, 26, 107, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(0, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "View Unallocated", startTabIndex.intValue() + 6);
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 528, 26, 113, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(1, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "View 'My patients'", startTabIndex.intValue() + 5);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 384, 26, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(2, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "View All", startTabIndex.intValue() + 4);
		}
		public void setText(GroupViewEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupViewEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupViewEnumeration.None;
				case 0: return GroupViewEnumeration.rdoViewUnallocated;
				case 1: return GroupViewEnumeration.rdoViewMyAllocated;
				case 2: return GroupViewEnumeration.rdoViewAll;
			}
			return null;
		}
		public void setValue(GroupViewEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupViewEnumeration.None.id);
		}
		public boolean isEnabled(GroupViewEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupViewEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupViewEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupViewEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupViewEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupViewEnumeration None = new GroupViewEnumeration(-1);
		public static GroupViewEnumeration rdoViewUnallocated = new GroupViewEnumeration(0);
		public static GroupViewEnumeration rdoViewMyAllocated = new GroupViewEnumeration(1);
		public static GroupViewEnumeration rdoViewAll = new GroupViewEnumeration(2);
		private GroupViewEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupViewEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'Emergency.TrackingPublicArea' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.emergency.vo.TrackingSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.emergency.vo.TrackingSearchCriteriaVo' of the global context variable 'Emergency.TrackingSearchCriteria' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.AreaCountRefrresh = factory.createTimer(0, 60, false);
		form.addTimer(timers.AreaCountRefrresh);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuTrackingTriageMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuTrackingTriageMenuWHITE_BOARDItem = factory.createMenuItem(startControlID.intValue() + 1, "White Board", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040016)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuWHITE_BOARDItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuASSESSMENT_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 2, "Assessment Details", true, false, new Integer(129144), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040017)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuASSESSMENT_DETAILSItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Move", true, false, new Integer(129151), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040006)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuMOVEItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuALLOCATE_CUBICLEItem = factory.createMenuItem(startControlID.intValue() + 4, "Allocate Cubicle", true, false, new Integer(129143), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040009)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuALLOCATE_CUBICLEItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuTRANSFERItem = factory.createMenuItem(startControlID.intValue() + 5, "Transfer", true, false, new Integer(129104), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040003)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuTRANSFERItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuEVENT_HISTORYItem = factory.createMenuItem(startControlID.intValue() + 6, "Event History", true, false, new Integer(129150), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040001)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuEVENT_HISTORYItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuVIEW_HISTORYItem = factory.createMenuItem(startControlID.intValue() + 7, "View History", true, false, new Integer(129158), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040002)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuVIEW_HISTORYItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuPAT_STATUSItem = factory.createMenuItem(startControlID.intValue() + 8, "Pat Status", true, false, new Integer(129153), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040010)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuPAT_STATUSItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuREFER_TOItem = factory.createMenuItem(startControlID.intValue() + 9, "Refer To", true, false, new Integer(129154), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040007)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuREFER_TOItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuSEEN_COMPLETE_NURSEItem = factory.createMenuItem(startControlID.intValue() + 10, "Seen By Nurse", true, false, new Integer(102637), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040022)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuSEEN_COMPLETE_NURSEItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuSEEN_COMPLETE_HCPItem = factory.createMenuItem(startControlID.intValue() + 11, "Seen By Clinician", true, false, new Integer(129157), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040008)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuSEEN_COMPLETE_HCPItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuDTAItem = factory.createMenuItem(startControlID.intValue() + 12, "DTA", true, false, new Integer(129149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040018)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuDTAItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuBED_REQUESTItem = factory.createMenuItem(startControlID.intValue() + 13, "Bed Request", true, false, new Integer(129149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040020)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuBED_REQUESTItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuXRAYItem = factory.createMenuItem(startControlID.intValue() + 14, "X-Ray", true, false, new Integer(129159), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040004)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuXRAYItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuORDERItem = factory.createMenuItem(startControlID.intValue() + 15, "Order", true, false, new Integer(129152), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040011)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuORDERItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuRESULTItem = factory.createMenuItem(startControlID.intValue() + 16, "Result", true, false, new Integer(129156), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040012)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuRESULTItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuREFRESHItem = factory.createMenuItem(startControlID.intValue() + 17, "Refresh", true, false, new Integer(129155), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040013)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuREFRESHItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuDNW_ADDItem = factory.createMenuItem(startControlID.intValue() + 18, "DNW +", true, false, new Integer(129148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040014)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuDNW_ADDItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuDNW_MINUSItem = factory.createMenuItem(startControlID.intValue() + 19, "DNW -", true, false, new Integer(129147), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040015)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuDNW_MINUSItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuTriageItem = factory.createMenuItem(startControlID.intValue() + 20, "Start Triage", true, false, null, true, true);
		contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuTriageItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuEDITTRIAGEItem = factory.createMenuItem(startControlID.intValue() + 21, "Edit Triage", true, false, null, true, false);
		contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuEDITTRIAGEItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuVIEW_TRIAGEItem = factory.createMenuItem(startControlID.intValue() + 22, "View Triage Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040019)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuVIEW_TRIAGEItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuBED_STATUSItem = factory.createMenuItem(startControlID.intValue() + 23, "Bed Status", true, false, new Integer(129145), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040005)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuBED_STATUSItem);
		contextMenus.Emergency.contextMenuTrackingTriageMenuCOMMENTSItem = factory.createMenuItem(startControlID.intValue() + 24, "Comments", true, false, new Integer(102625), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5040021)))
			contextMenus.Emergency.contextMenuTrackingTriageMenu.add(contextMenus.Emergency.contextMenuTrackingTriageMenuCOMMENTSItem);
		form.registerMenu(contextMenus.Emergency.contextMenuTrackingTriageMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 216, 0, 624, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Patients currently in XYZ Area", new Integer(1), ""}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 200, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Tracking Count", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 648, 505, 8, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ":", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 232, 45, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Display patients who are:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 328, 505, 8, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ":", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 408, 505, 8, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ":", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 488, 505, 8, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ":", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 568, 505, 8, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ":", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 245, 505, 8, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ":", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 504, 136, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "ED Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 576, 136, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Bed Management", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 466, 552, 125, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Seen By Nurse", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 208, 600, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Comments", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 136, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Public Area", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 466, 600, 125, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " DTA", Boolean.FALSE, "Decision To Admit", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 466, 576, 125, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Seen By Clinician", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 136, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Assessment Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 208, 552, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Allocate Cubicle", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 724, 528, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Refresh", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 528, 136, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "White Board", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 208, 528, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Move", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 466, 528, 125, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Refer To", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 600, 528, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " X-Ray", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 724, 552, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " DNW +", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 337, 552, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " View History", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 337, 528, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Event History", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 337, 576, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Pat Status", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 208, 576, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 600, 576, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Result", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 600, 552, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Order", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 724, 576, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " DNW -", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"View all EDs", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 200, 433, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdTrackingCountTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTrackingCountTemp);
		grdTrackingCountGrid grdTrackingCount = (grdTrackingCountGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTrackingCountGrid.class, m_grdTrackingCountTemp);
		grdTrackingCount.addTreeColumn("Area", 0, 150, false, true);
		grdTrackingCount.addIntColumn("No.", 0, 0, -1, true, true, null, false, 0, true, 0);
		super.addGrid(grdTrackingCount);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 216, 64, 624, 433, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Emergency.contextMenuTrackingTriageMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 808, 8, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Maximize, this.getImages().Core.Maximize, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupDisplay = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
		super.addControl(tmpGroupDisplay);
		GroupDisplayRadioButton GroupDisplay = (GroupDisplayRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupDisplayRadioButton.class, tmpGroupDisplay);
		GroupDisplay.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupDisplay);
		RadioButton tmpGroupView = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
		super.addControl(tmpGroupView);
		GroupViewRadioButton GroupView = (GroupViewRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupViewRadioButton.class, tmpGroupView);
		GroupView.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupView);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 232, 42, 584, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(1)}));

		// Picture Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 616, 501, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 536, 501, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 456, 501, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 376, 501, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 296, 501, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 216, 501, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlTrackPatients()
	{
		return (Panel)super.getControl(0);
	}
	public Label lblST()
	{
		return (Label)super.getControl(2);
	}
	public Label lblDisplayPatientWhoAre()
	{
		return (Label)super.getControl(3);
	}
	public Label lblP2()
	{
		return (Label)super.getControl(4);
	}
	public Label lblP3()
	{
		return (Label)super.getControl(5);
	}
	public Label lblP4()
	{
		return (Label)super.getControl(6);
	}
	public Label lblP5()
	{
		return (Label)super.getControl(7);
	}
	public Label lblP1()
	{
		return (Label)super.getControl(8);
	}
	public Button btnEdDashboard()
	{
		return (Button)super.getControl(9);
	}
	public Button btnBedManagementDashboard()
	{
		return (Button)super.getControl(10);
	}
	public Button btnSeenCompleteNurse()
	{
		return (Button)super.getControl(11);
	}
	public Button btnComments()
	{
		return (Button)super.getControl(12);
	}
	public Button btnPublicPrivateArea()
	{
		return (Button)super.getControl(13);
	}
	public Button btnDTA()
	{
		return (Button)super.getControl(14);
	}
	public Button btnSeenCompleteHCP()
	{
		return (Button)super.getControl(15);
	}
	public Button btnAssessmentDetails()
	{
		return (Button)super.getControl(16);
	}
	public Button btnAllocatedCubicle()
	{
		return (Button)super.getControl(17);
	}
	public Button btnRefresh()
	{
		return (Button)super.getControl(18);
	}
	public Button btnWhiteBoard()
	{
		return (Button)super.getControl(19);
	}
	public Button btnMove()
	{
		return (Button)super.getControl(20);
	}
	public Button btnRefer()
	{
		return (Button)super.getControl(21);
	}
	public Button btnXray()
	{
		return (Button)super.getControl(22);
	}
	public Button btnDNWAdd()
	{
		return (Button)super.getControl(23);
	}
	public Button btnViewHistory()
	{
		return (Button)super.getControl(24);
	}
	public Button btnEventHistory()
	{
		return (Button)super.getControl(25);
	}
	public Button btnPatStatus()
	{
		return (Button)super.getControl(26);
	}
	public Button btnTransfer()
	{
		return (Button)super.getControl(27);
	}
	public Button btnResult()
	{
		return (Button)super.getControl(28);
	}
	public Button btnOrder()
	{
		return (Button)super.getControl(29);
	}
	public Button btnDNWMinus()
	{
		return (Button)super.getControl(30);
	}
	public CheckBox chkAllSites()
	{
		return (CheckBox)super.getControl(31);
	}
	public grdTrackingCountGrid grdTrackingCount()
	{
		return (grdTrackingCountGrid)super.getGrid(0);
	}
	public DynamicGrid dyngrdTrack()
	{
		return (DynamicGrid)super.getControl(33);
	}
	public ImageButton imbFormLayout()
	{
		return (ImageButton)super.getControl(34);
	}
	public GroupDisplayRadioButton GroupDisplay()
	{
		return (GroupDisplayRadioButton)super.getRadioButton(0);
	}
	public GroupViewRadioButton GroupView()
	{
		return (GroupViewRadioButton)super.getRadioButton(1);
	}
	public HorizontalLine hzlGroupDisplay()
	{
		return (HorizontalLine)super.getControl(37);
	}
	public Picture imgST()
	{
		return (Picture)super.getControl(38);
	}
	public Picture imgP5()
	{
		return (Picture)super.getControl(39);
	}
	public Picture imgP4()
	{
		return (Picture)super.getControl(40);
	}
	public Picture imgP3()
	{
		return (Picture)super.getControl(41);
	}
	public Picture imgP2()
	{
		return (Picture)super.getControl(42);
	}
	public Picture imgP1()
	{
		return (Picture)super.getControl(43);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			Emergency = new EmergencyForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectAndOrderDialog = new LocalFormName(116131);
			}
			public final FormName SelectAndOrderDialog;
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				AllocateCubicle = new LocalFormName(129132);
				SendToXRay = new LocalFormName(129140);
				TrackingStatusDialog = new LocalFormName(129153);
				SendToAreaDialog = new LocalFormName(129121);
				BedAwaitingBedAvailable = new LocalFormName(129154);
				AttendanceHistory = new LocalFormName(129167);
				EventHistoryDialog = new LocalFormName(129164);
				AttendanceResultListDialog = new LocalFormName(129166);
				Triage = new LocalFormName(129103);
				TrackingSummary = new LocalFormName(129101);
				EDAssessmentComponent = new LocalFormName(129183);
				EDAssessmentDialog = new LocalFormName(129184);
				Tracking = new LocalFormName(129100);
				EDReferralToSpecialtyDialog = new LocalFormName(129188);
				EDSeenByAndCompleteDialog = new LocalFormName(129191);
				EDDecisionToAdmitDialog = new LocalFormName(129193);
				EDWhiteBoardDialog = new LocalFormName(129203);
				TransferDialog = new LocalFormName(129204);
				EDPartialAdmissionDialog = new LocalFormName(129205);
				EDWhiteBoardNewDialog = new LocalFormName(129216);
				EDAttendanceCommentsDialog = new LocalFormName(129238);
				EDSeenByNurseAndCompleteDialog = new LocalFormName(129239);
				PatientWhiteBoardEditAll = new LocalFormName(129235);
			}
			public final FormName AllocateCubicle;
			public final FormName SendToXRay;
			public final FormName TrackingStatusDialog;
			public final FormName SendToAreaDialog;
			public final FormName BedAwaitingBedAvailable;
			public final FormName AttendanceHistory;
			public final FormName EventHistoryDialog;
			public final FormName AttendanceResultListDialog;
			public final FormName Triage;
			public final FormName TrackingSummary;
			public final FormName EDAssessmentComponent;
			public final FormName EDAssessmentDialog;
			public final FormName Tracking;
			public final FormName EDReferralToSpecialtyDialog;
			public final FormName EDSeenByAndCompleteDialog;
			public final FormName EDDecisionToAdmitDialog;
			public final FormName EDWhiteBoardDialog;
			public final FormName TransferDialog;
			public final FormName EDPartialAdmissionDialog;
			public final FormName EDWhiteBoardNewDialog;
			public final FormName EDAttendanceCommentsDialog;
			public final FormName EDSeenByNurseAndCompleteDialog;
			public final FormName PatientWhiteBoardEditAll;
		}

		public OCRRForms OCRR;
		public EmergencyForms Emergency;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Emergency = new EmergencyImages();
			OCRR = new OCRRImages();
			Core = new CoreImages();
			Admin = new AdminImages();
			Clinical = new ClinicalImages();
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				DoctorEnabled16 = new ImageHelper(129102, "Images/Emergency/Doctor 1 Green.gif", new Integer(16), new Integer(16));
				EvenHistoryEnabled16 = new ImageHelper(129101, "Images/Emergency/clock.gif", new Integer(16), new Integer(16));
				MoveEnabled16 = new ImageHelper(129107, "Images/Emergency/NavForward.gif", new Integer(16), new Integer(16));
				NurseEnabled16 = new ImageHelper(129103, "Images/Emergency/Nurse 1.gif", new Integer(16), new Integer(16));
				PatientStatusEnabled16 = new ImageHelper(129105, "Images/Emergency/infoBubble.gif", new Integer(16), new Integer(16));
				TransferEnabled16 = new ImageHelper(129104, "Images/Emergency/TurnAhead.gif", new Integer(16), new Integer(16));
				ViewHistoryEnabled16 = new ImageHelper(129100, "Images/Emergency/book_open.gif", new Integer(16), new Integer(16));
				WhiteBoardEnabled16 = new ImageHelper(129106, "Images/Emergency/Medical Chart.gif", new Integer(16), new Integer(16));
				BedAvailableEnabled16 = new ImageHelper(129108, "Images/Emergency/Hospital Bed.gif", new Integer(16), new Integer(16));
				XRayEnabled16 = new ImageHelper(129109, "Images/Emergency/burn_16x16.png", new Integer(16), new Integer(16));
				AllSitesEnabled16 = new ImageHelper(129114, "Images/Emergency/web_16x16.png", new Integer(16), new Integer(16));
				DnaAddEnabled16 = new ImageHelper(129112, "Images/Emergency/add+_16x16.png", new Integer(16), new Integer(16));
				DnaMinusEnabled16 = new ImageHelper(129113, "Images/Emergency/remove_16x16.png", new Integer(16), new Integer(16));
				SummaryEnabled16 = new ImageHelper(129115, "Images/Emergency/chart_16x16.png", new Integer(16), new Integer(16));
				ReferToEnabled16 = new ImageHelper(129111, "Images/Emergency/phone-button-red_16x16.png", new Integer(16), new Integer(16));
				RefreshEnabled16 = new ImageHelper(129110, "Images/Emergency/sinc_16x16.png", new Integer(16), new Integer(16));
				Bed = new ImageHelper(129132, "Images/Emergency/Bed_16.png", new Integer(16), new Integer(16));
				Bed_Refresh = new ImageHelper(129131, "Images/Emergency/hospital_bed_refresh_16.png", new Integer(16), new Integer(16));
				DNW1 = new ImageHelper(129133, "Images/Emergency/dnw1.png", new Integer(16), new Integer(16));
				DNW2 = new ImageHelper(129134, "Images/Emergency/dnw2.png", new Integer(16), new Integer(16));
				DNW3 = new ImageHelper(129135, "Images/Emergency/dnw3.png", new Integer(16), new Integer(16));
				Triage_Priority_P1 = new ImageHelper(129125, "Images/Emergency/P1.png", new Integer(24), new Integer(24));
				Triage_Priority_P2 = new ImageHelper(129126, "Images/Emergency/P2.png", new Integer(24), new Integer(24));
				Triage_Priority_P3 = new ImageHelper(129127, "Images/Emergency/P3.png", new Integer(24), new Integer(24));
				Triage_Priority_P4 = new ImageHelper(129128, "Images/Emergency/P4.png", new Integer(24), new Integer(24));
				Triage_Priority_P5 = new ImageHelper(129129, "Images/Emergency/P5.png", new Integer(24), new Integer(24));
				Triage_Priority_SkippedTriage = new ImageHelper(129140, "Images/Emergency/ST.png", new Integer(24), new Integer(24));
				Bed_Available = new ImageHelper(129141, "Images/Emergency/bed_available.png", new Integer(16), new Integer(16));
				Bed_Awaiting = new ImageHelper(129142, "Images/Emergency/bed_awaiting.png", new Integer(16), new Integer(16));
				EVENTHISTORY16 = new ImageHelper(129150, "Images/Emergency/EventHistory.png", new Integer(16), new Integer(16));
				VIEWHISTORY16 = new ImageHelper(129158, "Images/Emergency/ViewHistory.png", new Integer(16), new Integer(16));
				DTA16 = new ImageHelper(129149, "Images/Emergency/DTA16.png", new Integer(16), new Integer(16));
				XRAY16 = new ImageHelper(129159, "Images/Emergency/XRay.png", new Integer(16), new Integer(16));
				BEDSTATUS16 = new ImageHelper(129145, "Images/Emergency/BedStatus16.png", new Integer(16), new Integer(16));
				MOVE16 = new ImageHelper(129151, "Images/Emergency/Move16.png", new Integer(16), new Integer(16));
				REFERTO16 = new ImageHelper(129154, "Images/Emergency/ReferTo.png", new Integer(16), new Integer(16));
				SEENCOMPLETE16 = new ImageHelper(129157, "Images/Emergency/SeenComplete16.png", new Integer(16), new Integer(16));
				ALLOCATECUBICLE16 = new ImageHelper(129143, "Images/Emergency/AllocateCubicle16.png", new Integer(16), new Integer(16));
				PATIENTSTATUS16 = new ImageHelper(129153, "Images/Emergency/PatientStatus.png", new Integer(16), new Integer(16));
				ORDER16 = new ImageHelper(129152, "Images/Emergency/Order.png", new Integer(16), new Integer(16));
				RESULTS16 = new ImageHelper(129156, "Images/Emergency/Results16.png", new Integer(16), new Integer(16));
				REFRESH16 = new ImageHelper(129155, "Images/Emergency/Refresh.png", new Integer(16), new Integer(16));
				DNWPLUS16 = new ImageHelper(129148, "Images/Emergency/DNWPLUS16.png", new Integer(16), new Integer(16));
				DNWMINUS16 = new ImageHelper(129147, "Images/Emergency/DNWMINUS16.png", new Integer(16), new Integer(16));
				ASSESSMNTDETAILS16 = new ImageHelper(129144, "Images/Emergency/AssessmentDetails16.png", new Integer(16), new Integer(16));
				Ambulance16 = new ImageHelper(129160, "Images/Emergency/Ambulance.png", new Integer(16), new Integer(16));
				Ambulance24 = new ImageHelper(129161, "Images/Emergency/Ambulance24.png", new Integer(20), new Integer(20));
				Ambulance20 = new ImageHelper(129162, "Images/Emergency/Ambulance20.png", new Integer(20), new Integer(20));
				Bed_Ok = new ImageHelper(129130, "Images/Emergency/hospital_bed_ok_16.png", new Integer(16), new Integer(16));
				CommentNotes16x16 = new ImageHelper(129186, "Images/Emergency/comment_16.png", new Integer(16), new Integer(16));
				PenRequired16 = new ImageHelper(129217, "Images/Emergency/PenRequired16.png", new Integer(16), new Integer(16));
				PenRequired20 = new ImageHelper(129218, "Images/Emergency/PenRequired20.png", new Integer(20), new Integer(20));
				PenRequired24 = new ImageHelper(129219, "Images/Emergency/PenRequired24.png", new Integer(24), new Integer(24));
				PenYes16 = new ImageHelper(129222, "Images/Emergency/PenYes16.png", new Integer(16), new Integer(16));
				PenYes20 = new ImageHelper(129223, "Images/Emergency/PenYes20.png", new Integer(20), new Integer(20));
				PenYes24 = new ImageHelper(129224, "Images/Emergency/PenYes24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image DoctorEnabled16;
			public final ims.framework.utils.Image EvenHistoryEnabled16;
			public final ims.framework.utils.Image MoveEnabled16;
			public final ims.framework.utils.Image NurseEnabled16;
			public final ims.framework.utils.Image PatientStatusEnabled16;
			public final ims.framework.utils.Image TransferEnabled16;
			public final ims.framework.utils.Image ViewHistoryEnabled16;
			public final ims.framework.utils.Image WhiteBoardEnabled16;
			public final ims.framework.utils.Image BedAvailableEnabled16;
			public final ims.framework.utils.Image XRayEnabled16;
			public final ims.framework.utils.Image AllSitesEnabled16;
			public final ims.framework.utils.Image DnaAddEnabled16;
			public final ims.framework.utils.Image DnaMinusEnabled16;
			public final ims.framework.utils.Image SummaryEnabled16;
			public final ims.framework.utils.Image ReferToEnabled16;
			public final ims.framework.utils.Image RefreshEnabled16;
			public final ims.framework.utils.Image Bed;
			public final ims.framework.utils.Image Bed_Refresh;
			public final ims.framework.utils.Image DNW1;
			public final ims.framework.utils.Image DNW2;
			public final ims.framework.utils.Image DNW3;
			public final ims.framework.utils.Image Triage_Priority_P1;
			public final ims.framework.utils.Image Triage_Priority_P2;
			public final ims.framework.utils.Image Triage_Priority_P3;
			public final ims.framework.utils.Image Triage_Priority_P4;
			public final ims.framework.utils.Image Triage_Priority_P5;
			public final ims.framework.utils.Image Triage_Priority_SkippedTriage;
			public final ims.framework.utils.Image Bed_Available;
			public final ims.framework.utils.Image Bed_Awaiting;
			public final ims.framework.utils.Image EVENTHISTORY16;
			public final ims.framework.utils.Image VIEWHISTORY16;
			public final ims.framework.utils.Image DTA16;
			public final ims.framework.utils.Image XRAY16;
			public final ims.framework.utils.Image BEDSTATUS16;
			public final ims.framework.utils.Image MOVE16;
			public final ims.framework.utils.Image REFERTO16;
			public final ims.framework.utils.Image SEENCOMPLETE16;
			public final ims.framework.utils.Image ALLOCATECUBICLE16;
			public final ims.framework.utils.Image PATIENTSTATUS16;
			public final ims.framework.utils.Image ORDER16;
			public final ims.framework.utils.Image RESULTS16;
			public final ims.framework.utils.Image REFRESH16;
			public final ims.framework.utils.Image DNWPLUS16;
			public final ims.framework.utils.Image DNWMINUS16;
			public final ims.framework.utils.Image ASSESSMNTDETAILS16;
			public final ims.framework.utils.Image Ambulance16;
			public final ims.framework.utils.Image Ambulance24;
			public final ims.framework.utils.Image Ambulance20;
			public final ims.framework.utils.Image Bed_Ok;
			public final ims.framework.utils.Image CommentNotes16x16;
			public final ims.framework.utils.Image PenRequired16;
			public final ims.framework.utils.Image PenRequired20;
			public final ims.framework.utils.Image PenRequired24;
			public final ims.framework.utils.Image PenYes16;
			public final ims.framework.utils.Image PenYes20;
			public final ims.framework.utils.Image PenYes24;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				TestTube = new ImageHelper(116118, "Images/OCRR/itesttube.gif", new Integer(19), new Integer(19));
				NewResult = new ImageHelper(116130, "Images/OCRR/NewResult.gif", new Integer(16), new Integer(16));
				OrderSet = new ImageHelper(116104, "Images/OCRR/OrderSet.gif", new Integer(16), new Integer(16));
				Pathology24 = new ImageHelper(116181, "Images/OCRR/pathology_24.png", new Integer(24), new Integer(24));
				Seen = new ImageHelper(116135, "Images/OCRR/Seen.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image TestTube;
			public final ims.framework.utils.Image NewResult;
			public final ims.framework.utils.Image OrderSet;
			public final ims.framework.utils.Image Pathology24;
			public final ims.framework.utils.Image Seen;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				Maximize = new ImageHelper(102311, "Images/Core/undo_16x16.png", new Integer(16), new Integer(16));
				Minimize = new ImageHelper(102312, "Images/Core/redo_16x16.png", new Integer(16), new Integer(16));
				Patient_restrict = new ImageHelper(102318, "Images/Core/Patient Boy 1 Blue Restrict.bmp", new Integer(16), new Integer(16));
				Alert_RedTriangle2 = new ImageHelper(102142, "Images/Core/alarm-red-triangle-2.gif", new Integer(16), new Integer(16));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(16), new Integer(16));
				BedLayoutList16 = new ImageHelper(102568, "Images/Core/bed_layout_list_16.PNG", new Integer(16), new Integer(16));
				InfoEnabled16 = new ImageHelper(102532, "Images/Core/info_enabled_16.png", new Integer(16), new Integer(16));
				Critical = new ImageHelper(102249, "Images/Core/Critical.gif", new Integer(16), new Integer(16));
				Comment16 = new ImageHelper(102625, "Images/Core/Comment16.png", new Integer(16), new Integer(16));
				FirstAidKit16 = new ImageHelper(102637, "Images/Core/first_aid_kit_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image Maximize;
			public final ims.framework.utils.Image Minimize;
			public final ims.framework.utils.Image Patient_restrict;
			public final ims.framework.utils.Image Alert_RedTriangle2;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image BedLayoutList16;
			public final ims.framework.utils.Image InfoEnabled16;
			public final ims.framework.utils.Image Critical;
			public final ims.framework.utils.Image Comment16;
			public final ims.framework.utils.Image FirstAidKit16;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Primary = new ImageHelper(103156, "Images/Admin/Primary.gif", new Integer(16), new Integer(16));
				ConsultantAddEnabled16 = new ImageHelper(103413, "Images/Admin/consultant_add_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Primary;
			public final ims.framework.utils.Image ConsultantAddEnabled16;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				PatientVisitComplete16 = new ImageHelper(123166, "Images/Clinical/visit_complete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image PatientVisitComplete16;
		}
		public final EmergencyImages Emergency;
		public final OCRRImages OCRR;
		public final CoreImages Core;
		public final AdminImages Admin;
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedTrackingArea = new ims.framework.ContextVariable("SelectedTrackingArea", prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier + "");
			cxl_SelectedTrackingPatient = new ims.framework.ContextVariable("SelectedTrackingPatient", prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingPatient_" + componentIdentifier + "");
			cxl_LoggedHcpRef = new ims.framework.ContextVariable("LoggedHcpRef", prefix + "_lv_Emergency.Tracking.__internal_x_context__LoggedHcpRef_" + componentIdentifier + "");
			cxl_LoggedMosRef = new ims.framework.ContextVariable("LoggedMosRef", prefix + "_lv_Emergency.Tracking.__internal_x_context__LoggedMosRef_" + componentIdentifier + "");
			cxl_AttendanceKPIConfig = new ims.framework.ContextVariable("AttendanceKPIConfig", prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier + "");
			cxl_TrackingPatients = new ims.framework.ContextVariable("TrackingPatients", prefix + "_lv_Emergency.Tracking.__internal_x_context__TrackingPatients_" + componentIdentifier + "");
			cxl_SortOrder = new ims.framework.ContextVariable("SortOrder", prefix + "_lv_Emergency.Tracking.__internal_x_context__SortOrder_" + componentIdentifier + "");
			cxl_NoPatientsPriority1 = new ims.framework.ContextVariable("NoPatientsPriority1", prefix + "_lv_Emergency.Tracking.__internal_x_context__NoPatientsPriority1_" + componentIdentifier + "");
			cxl_NoPatientsPriority2 = new ims.framework.ContextVariable("NoPatientsPriority2", prefix + "_lv_Emergency.Tracking.__internal_x_context__NoPatientsPriority2_" + componentIdentifier + "");
			cxl_NoPatientsPriority3 = new ims.framework.ContextVariable("NoPatientsPriority3", prefix + "_lv_Emergency.Tracking.__internal_x_context__NoPatientsPriority3_" + componentIdentifier + "");
			cxl_NoPatientsPriority4 = new ims.framework.ContextVariable("NoPatientsPriority4", prefix + "_lv_Emergency.Tracking.__internal_x_context__NoPatientsPriority4_" + componentIdentifier + "");
			cxl_NoPatientsPriority5 = new ims.framework.ContextVariable("NoPatientsPriority5", prefix + "_lv_Emergency.Tracking.__internal_x_context__NoPatientsPriority5_" + componentIdentifier + "");
			cxl_CurentAreaOfPatient = new ims.framework.ContextVariable("CurentAreaOfPatient", prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier + "");
			cxl_NoPatientsSkippedTriage = new ims.framework.ContextVariable("NoPatientsSkippedTriage", prefix + "_lv_Emergency.Tracking.__internal_x_context__NoPatientsSkippedTriage_" + componentIdentifier + "");
			cxl_DTAWithTransferMessageId = new ims.framework.ContextVariable("DTAWithTransferMessageId", prefix + "_lv_Emergency.Tracking.__internal_x_context__DTAWithTransferMessageId_" + componentIdentifier + "");
			cxl_PartialAdmissionForTrackingVo = new ims.framework.ContextVariable("PartialAdmissionForTrackingVo", prefix + "_lv_Emergency.Tracking.__internal_x_context__PartialAdmissionForTrackingVo_" + componentIdentifier + "");
			cxl_SECSConfig = new ims.framework.ContextVariable("SECSConfig", prefix + "_lv_Emergency.Tracking.__internal_x_context__SECSConfig_" + componentIdentifier + "");
			cxl_MessageBoxIdOnMove = new ims.framework.ContextVariable("MessageBoxIdOnMove", prefix + "_lv_Emergency.Tracking.__internal_x_context__MessageBoxIdOnMove_" + componentIdentifier + "");
			cxl_ED_USE_CUSTOM_ATTENDANCE_ID = new ims.framework.ContextVariable("ED_USE_CUSTOM_ATTENDANCE_ID", prefix + "_lv_Emergency.Tracking.__internal_x_context__ED_USE_CUSTOM_ATTENDANCE_ID_" + componentIdentifier + "");
			cxl_ED_DTA_ADMISSION_FUNCTIONALITY = new ims.framework.ContextVariable("ED_DTA_ADMISSION_FUNCTIONALITY", prefix + "_lv_Emergency.Tracking.__internal_x_context__ED_DTA_ADMISSION_FUNCTIONALITY_" + componentIdentifier + "");
			cxl_ED_ALLOW_ORDERING = new ims.framework.ContextVariable("ED_ALLOW_ORDERING", prefix + "_lv_Emergency.Tracking.__internal_x_context__ED_ALLOW_ORDERING_" + componentIdentifier + "");
			cxl_DISPLAY_PATID_TYPE = new ims.framework.ContextVariable("DISPLAY_PATID_TYPE", prefix + "_lv_Emergency.Tracking.__internal_x_context__DISPLAY_PATID_TYPE_" + componentIdentifier + "");
			cxl_WHITEBOARD_FUNCTIONALITY = new ims.framework.ContextVariable("WHITEBOARD_FUNCTIONALITY", prefix + "_lv_Emergency.Tracking.__internal_x_context__WHITEBOARD_FUNCTIONALITY_" + componentIdentifier + "");
			cxl_AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER = new ims.framework.ContextVariable("AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER", prefix + "_lv_Emergency.Tracking.__internal_x_context__AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER_" + componentIdentifier + "");
			cxl_STALE_OBJECT_MESSAGE = new ims.framework.ContextVariable("STALE_OBJECT_MESSAGE", prefix + "_lv_Emergency.Tracking.__internal_x_context__STALE_OBJECT_MESSAGE_" + componentIdentifier + "");
			cxl_VALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE = new ims.framework.ContextVariable("VALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE", prefix + "_lv_Emergency.Tracking.__internal_x_context__VALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE_" + componentIdentifier + "");
			cxl_BED_MANAGEMENT_DASHBOARD_URL = new ims.framework.ContextVariable("BED_MANAGEMENT_DASHBOARD_URL", prefix + "_lv_Emergency.Tracking.__internal_x_context__BED_MANAGEMENT_DASHBOARD_URL_" + componentIdentifier + "");
			cxl_DTAPlusDischargeMessageBox = new ims.framework.ContextVariable("DTAPlusDischargeMessageBox", prefix + "_lv_Emergency.Tracking.__internal_x_context__DTAPlusDischargeMessageBox_" + componentIdentifier + "");
			cxl_PrimaryIDFromPASProviderSystem = new ims.framework.ContextVariable("PrimaryIDFromPASProviderSystem", prefix + "_lv_Emergency.Tracking.__internal_x_context__PrimaryIDFromPASProviderSystem_" + componentIdentifier + "");
		}
		
		public boolean getSelectedTrackingAreaIsNotNull()
		{
			return !cxl_SelectedTrackingArea.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingAreaForTrackingVo getSelectedTrackingArea()
		{
			return (ims.emergency.vo.TrackingAreaForTrackingVo)cxl_SelectedTrackingArea.getValue(context);
		}
		public void setSelectedTrackingArea(ims.emergency.vo.TrackingAreaForTrackingVo value)
		{
			cxl_SelectedTrackingArea.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTrackingArea = null;
		public boolean getSelectedTrackingPatientIsNotNull()
		{
			return !cxl_SelectedTrackingPatient.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingVo getSelectedTrackingPatient()
		{
			return (ims.emergency.vo.TrackingVo)cxl_SelectedTrackingPatient.getValue(context);
		}
		public void setSelectedTrackingPatient(ims.emergency.vo.TrackingVo value)
		{
			cxl_SelectedTrackingPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTrackingPatient = null;
		public boolean getLoggedHcpRefIsNotNull()
		{
			return !cxl_LoggedHcpRef.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.HcpRefVo getLoggedHcpRef()
		{
			return (ims.core.resource.people.vo.HcpRefVo)cxl_LoggedHcpRef.getValue(context);
		}
		public void setLoggedHcpRef(ims.core.resource.people.vo.HcpRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LoggedHcpRef' RefVo context variable.");
			if(value == null)
				cxl_LoggedHcpRef.setValue(context, null);
			else
				cxl_LoggedHcpRef.setValue(context, new ims.core.resource.people.vo.HcpRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LoggedHcpRef = null;
		public boolean getLoggedMosRefIsNotNull()
		{
			return !cxl_LoggedMosRef.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.MemberOfStaffRefVo getLoggedMosRef()
		{
			return (ims.core.resource.people.vo.MemberOfStaffRefVo)cxl_LoggedMosRef.getValue(context);
		}
		public void setLoggedMosRef(ims.core.resource.people.vo.MemberOfStaffRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LoggedMosRef' RefVo context variable.");
			if(value == null)
				cxl_LoggedMosRef.setValue(context, null);
			else
				cxl_LoggedMosRef.setValue(context, new ims.core.resource.people.vo.MemberOfStaffRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LoggedMosRef = null;
		public boolean getAttendanceKPIConfigIsNotNull()
		{
			return !cxl_AttendanceKPIConfig.getValueIsNull(context);
		}
		public ims.emergency.vo.AttendanceKPIConfigVo getAttendanceKPIConfig()
		{
			return (ims.emergency.vo.AttendanceKPIConfigVo)cxl_AttendanceKPIConfig.getValue(context);
		}
		public void setAttendanceKPIConfig(ims.emergency.vo.AttendanceKPIConfigVo value)
		{
			cxl_AttendanceKPIConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AttendanceKPIConfig = null;
		public boolean getTrackingPatientsIsNotNull()
		{
			return !cxl_TrackingPatients.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingVoCollection getTrackingPatients()
		{
			return (ims.emergency.vo.TrackingVoCollection)cxl_TrackingPatients.getValue(context);
		}
		public void setTrackingPatients(ims.emergency.vo.TrackingVoCollection value)
		{
			cxl_TrackingPatients.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TrackingPatients = null;
		public boolean getSortOrderIsNotNull()
		{
			return !cxl_SortOrder.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingColumnsSortOrderVo getSortOrder()
		{
			return (ims.emergency.vo.TrackingColumnsSortOrderVo)cxl_SortOrder.getValue(context);
		}
		public void setSortOrder(ims.emergency.vo.TrackingColumnsSortOrderVo value)
		{
			cxl_SortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrder = null;
		public boolean getNoPatientsPriority1IsNotNull()
		{
			return !cxl_NoPatientsPriority1.getValueIsNull(context);
		}
		public Integer getNoPatientsPriority1()
		{
			return (Integer)cxl_NoPatientsPriority1.getValue(context);
		}
		public void setNoPatientsPriority1(Integer value)
		{
			cxl_NoPatientsPriority1.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoPatientsPriority1 = null;
		public boolean getNoPatientsPriority2IsNotNull()
		{
			return !cxl_NoPatientsPriority2.getValueIsNull(context);
		}
		public Integer getNoPatientsPriority2()
		{
			return (Integer)cxl_NoPatientsPriority2.getValue(context);
		}
		public void setNoPatientsPriority2(Integer value)
		{
			cxl_NoPatientsPriority2.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoPatientsPriority2 = null;
		public boolean getNoPatientsPriority3IsNotNull()
		{
			return !cxl_NoPatientsPriority3.getValueIsNull(context);
		}
		public Integer getNoPatientsPriority3()
		{
			return (Integer)cxl_NoPatientsPriority3.getValue(context);
		}
		public void setNoPatientsPriority3(Integer value)
		{
			cxl_NoPatientsPriority3.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoPatientsPriority3 = null;
		public boolean getNoPatientsPriority4IsNotNull()
		{
			return !cxl_NoPatientsPriority4.getValueIsNull(context);
		}
		public Integer getNoPatientsPriority4()
		{
			return (Integer)cxl_NoPatientsPriority4.getValue(context);
		}
		public void setNoPatientsPriority4(Integer value)
		{
			cxl_NoPatientsPriority4.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoPatientsPriority4 = null;
		public boolean getNoPatientsPriority5IsNotNull()
		{
			return !cxl_NoPatientsPriority5.getValueIsNull(context);
		}
		public Integer getNoPatientsPriority5()
		{
			return (Integer)cxl_NoPatientsPriority5.getValue(context);
		}
		public void setNoPatientsPriority5(Integer value)
		{
			cxl_NoPatientsPriority5.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoPatientsPriority5 = null;
		public boolean getCurentAreaOfPatientIsNotNull()
		{
			return !cxl_CurentAreaOfPatient.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingAreaForTrackingVo getCurentAreaOfPatient()
		{
			return (ims.emergency.vo.TrackingAreaForTrackingVo)cxl_CurentAreaOfPatient.getValue(context);
		}
		public void setCurentAreaOfPatient(ims.emergency.vo.TrackingAreaForTrackingVo value)
		{
			cxl_CurentAreaOfPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurentAreaOfPatient = null;
		public boolean getNoPatientsSkippedTriageIsNotNull()
		{
			return !cxl_NoPatientsSkippedTriage.getValueIsNull(context);
		}
		public Integer getNoPatientsSkippedTriage()
		{
			return (Integer)cxl_NoPatientsSkippedTriage.getValue(context);
		}
		public void setNoPatientsSkippedTriage(Integer value)
		{
			cxl_NoPatientsSkippedTriage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoPatientsSkippedTriage = null;
		public boolean getDTAWithTransferMessageIdIsNotNull()
		{
			return !cxl_DTAWithTransferMessageId.getValueIsNull(context);
		}
		public Integer getDTAWithTransferMessageId()
		{
			return (Integer)cxl_DTAWithTransferMessageId.getValue(context);
		}
		public void setDTAWithTransferMessageId(Integer value)
		{
			cxl_DTAWithTransferMessageId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DTAWithTransferMessageId = null;
		public boolean getPartialAdmissionForTrackingVoIsNotNull()
		{
			return !cxl_PartialAdmissionForTrackingVo.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingWithPartialAdmissionVo getPartialAdmissionForTrackingVo()
		{
			return (ims.emergency.vo.TrackingWithPartialAdmissionVo)cxl_PartialAdmissionForTrackingVo.getValue(context);
		}
		public void setPartialAdmissionForTrackingVo(ims.emergency.vo.TrackingWithPartialAdmissionVo value)
		{
			cxl_PartialAdmissionForTrackingVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PartialAdmissionForTrackingVo = null;
		public boolean getSECSConfigIsNotNull()
		{
			return !cxl_SECSConfig.getValueIsNull(context);
		}
		public ims.clinical.vo.SECSVo getSECSConfig()
		{
			return (ims.clinical.vo.SECSVo)cxl_SECSConfig.getValue(context);
		}
		public void setSECSConfig(ims.clinical.vo.SECSVo value)
		{
			cxl_SECSConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SECSConfig = null;
		public boolean getMessageBoxIdOnMoveIsNotNull()
		{
			return !cxl_MessageBoxIdOnMove.getValueIsNull(context);
		}
		public Integer getMessageBoxIdOnMove()
		{
			return (Integer)cxl_MessageBoxIdOnMove.getValue(context);
		}
		public void setMessageBoxIdOnMove(Integer value)
		{
			cxl_MessageBoxIdOnMove.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxIdOnMove = null;
		public boolean getED_USE_CUSTOM_ATTENDANCE_IDIsNotNull()
		{
			return !cxl_ED_USE_CUSTOM_ATTENDANCE_ID.getValueIsNull(context);
		}
		public Boolean getED_USE_CUSTOM_ATTENDANCE_ID()
		{
			return (Boolean)cxl_ED_USE_CUSTOM_ATTENDANCE_ID.getValue(context);
		}
		public void setED_USE_CUSTOM_ATTENDANCE_ID(Boolean value)
		{
			cxl_ED_USE_CUSTOM_ATTENDANCE_ID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ED_USE_CUSTOM_ATTENDANCE_ID = null;
		public boolean getED_DTA_ADMISSION_FUNCTIONALITYIsNotNull()
		{
			return !cxl_ED_DTA_ADMISSION_FUNCTIONALITY.getValueIsNull(context);
		}
		public String getED_DTA_ADMISSION_FUNCTIONALITY()
		{
			return (String)cxl_ED_DTA_ADMISSION_FUNCTIONALITY.getValue(context);
		}
		public void setED_DTA_ADMISSION_FUNCTIONALITY(String value)
		{
			cxl_ED_DTA_ADMISSION_FUNCTIONALITY.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ED_DTA_ADMISSION_FUNCTIONALITY = null;
		public boolean getED_ALLOW_ORDERINGIsNotNull()
		{
			return !cxl_ED_ALLOW_ORDERING.getValueIsNull(context);
		}
		public Boolean getED_ALLOW_ORDERING()
		{
			return (Boolean)cxl_ED_ALLOW_ORDERING.getValue(context);
		}
		public void setED_ALLOW_ORDERING(Boolean value)
		{
			cxl_ED_ALLOW_ORDERING.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ED_ALLOW_ORDERING = null;
		public boolean getDISPLAY_PATID_TYPEIsNotNull()
		{
			return !cxl_DISPLAY_PATID_TYPE.getValueIsNull(context);
		}
		public String getDISPLAY_PATID_TYPE()
		{
			return (String)cxl_DISPLAY_PATID_TYPE.getValue(context);
		}
		public void setDISPLAY_PATID_TYPE(String value)
		{
			cxl_DISPLAY_PATID_TYPE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DISPLAY_PATID_TYPE = null;
		public boolean getWHITEBOARD_FUNCTIONALITYIsNotNull()
		{
			return !cxl_WHITEBOARD_FUNCTIONALITY.getValueIsNull(context);
		}
		public Boolean getWHITEBOARD_FUNCTIONALITY()
		{
			return (Boolean)cxl_WHITEBOARD_FUNCTIONALITY.getValue(context);
		}
		public void setWHITEBOARD_FUNCTIONALITY(Boolean value)
		{
			cxl_WHITEBOARD_FUNCTIONALITY.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WHITEBOARD_FUNCTIONALITY = null;
		public boolean getAUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBERIsNotNull()
		{
			return !cxl_AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER.getValueIsNull(context);
		}
		public Integer getAUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER()
		{
			return (Integer)cxl_AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER.getValue(context);
		}
		public void setAUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER(Integer value)
		{
			cxl_AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER = null;
		public boolean getSTALE_OBJECT_MESSAGEIsNotNull()
		{
			return !cxl_STALE_OBJECT_MESSAGE.getValueIsNull(context);
		}
		public String getSTALE_OBJECT_MESSAGE()
		{
			return (String)cxl_STALE_OBJECT_MESSAGE.getValue(context);
		}
		public void setSTALE_OBJECT_MESSAGE(String value)
		{
			cxl_STALE_OBJECT_MESSAGE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_STALE_OBJECT_MESSAGE = null;
		public boolean getVALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGEIsNotNull()
		{
			return !cxl_VALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE.getValueIsNull(context);
		}
		public Boolean getVALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE()
		{
			return (Boolean)cxl_VALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE.getValue(context);
		}
		public void setVALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE(Boolean value)
		{
			cxl_VALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VALIDATE_TRIAGE_AND_DISPLAY_PAIN_SCALE_MANDATORY_MESSAGE = null;
		public boolean getBED_MANAGEMENT_DASHBOARD_URLIsNotNull()
		{
			return !cxl_BED_MANAGEMENT_DASHBOARD_URL.getValueIsNull(context);
		}
		public String getBED_MANAGEMENT_DASHBOARD_URL()
		{
			return (String)cxl_BED_MANAGEMENT_DASHBOARD_URL.getValue(context);
		}
		public void setBED_MANAGEMENT_DASHBOARD_URL(String value)
		{
			cxl_BED_MANAGEMENT_DASHBOARD_URL.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BED_MANAGEMENT_DASHBOARD_URL = null;
		public boolean getDTAPlusDischargeMessageBoxIsNotNull()
		{
			return !cxl_DTAPlusDischargeMessageBox.getValueIsNull(context);
		}
		public Integer getDTAPlusDischargeMessageBox()
		{
			return (Integer)cxl_DTAPlusDischargeMessageBox.getValue(context);
		}
		public void setDTAPlusDischargeMessageBox(Integer value)
		{
			cxl_DTAPlusDischargeMessageBox.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DTAPlusDischargeMessageBox = null;
		public boolean getPrimaryIDFromPASProviderSystemIsNotNull()
		{
			return !cxl_PrimaryIDFromPASProviderSystem.getValueIsNull(context);
		}
		public ims.core.vo.lookups.PatIdType getPrimaryIDFromPASProviderSystem()
		{
			return (ims.core.vo.lookups.PatIdType)cxl_PrimaryIDFromPASProviderSystem.getValue(context);
		}
		public void setPrimaryIDFromPASProviderSystem(ims.core.vo.lookups.PatIdType value)
		{
			cxl_PrimaryIDFromPASProviderSystem.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrimaryIDFromPASProviderSystem = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TrackingTriageMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int WHITE_BOARD = 1;
				public static final int ASSESSMENT_DETAILS = 2;
				public static final int MOVE = 3;
				public static final int ALLOCATE_CUBICLE = 4;
				public static final int TRANSFER = 5;
				public static final int EVENT_HISTORY = 6;
				public static final int VIEW_HISTORY = 7;
				public static final int PAT_STATUS = 8;
				public static final int REFER_TO = 9;
				public static final int SEEN_COMPLETE_NURSE = 10;
				public static final int SEEN_COMPLETE_HCP = 11;
				public static final int DTA = 12;
				public static final int BED_REQUEST = 13;
				public static final int XRAY = 14;
				public static final int ORDER = 15;
				public static final int RESULT = 16;
				public static final int REFRESH = 17;
				public static final int DNW_ADD = 18;
				public static final int DNW_MINUS = 19;
				public static final int Triage = 20;
				public static final int EDITTRIAGE = 21;
				public static final int VIEW_TRIAGE = 22;
				public static final int BED_STATUS = 23;
				public static final int COMMENTS = 24;
			}
			public void disableAllTrackingTriageMenuMenuItems()
			{
				this.contextMenuTrackingTriageMenuWHITE_BOARDItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuASSESSMENT_DETAILSItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuMOVEItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuALLOCATE_CUBICLEItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuTRANSFERItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuEVENT_HISTORYItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuVIEW_HISTORYItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuPAT_STATUSItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuREFER_TOItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuSEEN_COMPLETE_NURSEItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuSEEN_COMPLETE_HCPItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuDTAItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuBED_REQUESTItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuXRAYItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuORDERItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuRESULTItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuREFRESHItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuDNW_ADDItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuDNW_MINUSItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuTriageItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuEDITTRIAGEItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuVIEW_TRIAGEItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuBED_STATUSItem.setEnabled(false);
				this.contextMenuTrackingTriageMenuCOMMENTSItem.setEnabled(false);
			}
			public void hideAllTrackingTriageMenuMenuItems()
			{
				this.contextMenuTrackingTriageMenuWHITE_BOARDItem.setVisible(false);
				this.contextMenuTrackingTriageMenuASSESSMENT_DETAILSItem.setVisible(false);
				this.contextMenuTrackingTriageMenuMOVEItem.setVisible(false);
				this.contextMenuTrackingTriageMenuALLOCATE_CUBICLEItem.setVisible(false);
				this.contextMenuTrackingTriageMenuTRANSFERItem.setVisible(false);
				this.contextMenuTrackingTriageMenuEVENT_HISTORYItem.setVisible(false);
				this.contextMenuTrackingTriageMenuVIEW_HISTORYItem.setVisible(false);
				this.contextMenuTrackingTriageMenuPAT_STATUSItem.setVisible(false);
				this.contextMenuTrackingTriageMenuREFER_TOItem.setVisible(false);
				this.contextMenuTrackingTriageMenuSEEN_COMPLETE_NURSEItem.setVisible(false);
				this.contextMenuTrackingTriageMenuSEEN_COMPLETE_HCPItem.setVisible(false);
				this.contextMenuTrackingTriageMenuDTAItem.setVisible(false);
				this.contextMenuTrackingTriageMenuBED_REQUESTItem.setVisible(false);
				this.contextMenuTrackingTriageMenuXRAYItem.setVisible(false);
				this.contextMenuTrackingTriageMenuORDERItem.setVisible(false);
				this.contextMenuTrackingTriageMenuRESULTItem.setVisible(false);
				this.contextMenuTrackingTriageMenuREFRESHItem.setVisible(false);
				this.contextMenuTrackingTriageMenuDNW_ADDItem.setVisible(false);
				this.contextMenuTrackingTriageMenuDNW_MINUSItem.setVisible(false);
				this.contextMenuTrackingTriageMenuTriageItem.setVisible(false);
				this.contextMenuTrackingTriageMenuEDITTRIAGEItem.setVisible(false);
				this.contextMenuTrackingTriageMenuVIEW_TRIAGEItem.setVisible(false);
				this.contextMenuTrackingTriageMenuBED_STATUSItem.setVisible(false);
				this.contextMenuTrackingTriageMenuCOMMENTSItem.setVisible(false);
			}
			private Menu contextMenuTrackingTriageMenu;
			public ReadOnlyMenuItem getTrackingTriageMenuWHITE_BOARDItem()
			{
				return this.contextMenuTrackingTriageMenuWHITE_BOARDItem;
			}
			private MenuItem contextMenuTrackingTriageMenuWHITE_BOARDItem;
			public ReadOnlyMenuItem getTrackingTriageMenuASSESSMENT_DETAILSItem()
			{
				return this.contextMenuTrackingTriageMenuASSESSMENT_DETAILSItem;
			}
			private MenuItem contextMenuTrackingTriageMenuASSESSMENT_DETAILSItem;
			public ReadOnlyMenuItem getTrackingTriageMenuMOVEItem()
			{
				return this.contextMenuTrackingTriageMenuMOVEItem;
			}
			private MenuItem contextMenuTrackingTriageMenuMOVEItem;
			public ReadOnlyMenuItem getTrackingTriageMenuALLOCATE_CUBICLEItem()
			{
				return this.contextMenuTrackingTriageMenuALLOCATE_CUBICLEItem;
			}
			private MenuItem contextMenuTrackingTriageMenuALLOCATE_CUBICLEItem;
			public ReadOnlyMenuItem getTrackingTriageMenuTRANSFERItem()
			{
				return this.contextMenuTrackingTriageMenuTRANSFERItem;
			}
			private MenuItem contextMenuTrackingTriageMenuTRANSFERItem;
			public ReadOnlyMenuItem getTrackingTriageMenuEVENT_HISTORYItem()
			{
				return this.contextMenuTrackingTriageMenuEVENT_HISTORYItem;
			}
			private MenuItem contextMenuTrackingTriageMenuEVENT_HISTORYItem;
			public ReadOnlyMenuItem getTrackingTriageMenuVIEW_HISTORYItem()
			{
				return this.contextMenuTrackingTriageMenuVIEW_HISTORYItem;
			}
			private MenuItem contextMenuTrackingTriageMenuVIEW_HISTORYItem;
			public ReadOnlyMenuItem getTrackingTriageMenuPAT_STATUSItem()
			{
				return this.contextMenuTrackingTriageMenuPAT_STATUSItem;
			}
			private MenuItem contextMenuTrackingTriageMenuPAT_STATUSItem;
			public ReadOnlyMenuItem getTrackingTriageMenuREFER_TOItem()
			{
				return this.contextMenuTrackingTriageMenuREFER_TOItem;
			}
			private MenuItem contextMenuTrackingTriageMenuREFER_TOItem;
			public ReadOnlyMenuItem getTrackingTriageMenuSEEN_COMPLETE_NURSEItem()
			{
				return this.contextMenuTrackingTriageMenuSEEN_COMPLETE_NURSEItem;
			}
			private MenuItem contextMenuTrackingTriageMenuSEEN_COMPLETE_NURSEItem;
			public ReadOnlyMenuItem getTrackingTriageMenuSEEN_COMPLETE_HCPItem()
			{
				return this.contextMenuTrackingTriageMenuSEEN_COMPLETE_HCPItem;
			}
			private MenuItem contextMenuTrackingTriageMenuSEEN_COMPLETE_HCPItem;
			public ReadOnlyMenuItem getTrackingTriageMenuDTAItem()
			{
				return this.contextMenuTrackingTriageMenuDTAItem;
			}
			private MenuItem contextMenuTrackingTriageMenuDTAItem;
			public ReadOnlyMenuItem getTrackingTriageMenuBED_REQUESTItem()
			{
				return this.contextMenuTrackingTriageMenuBED_REQUESTItem;
			}
			private MenuItem contextMenuTrackingTriageMenuBED_REQUESTItem;
			public ReadOnlyMenuItem getTrackingTriageMenuXRAYItem()
			{
				return this.contextMenuTrackingTriageMenuXRAYItem;
			}
			private MenuItem contextMenuTrackingTriageMenuXRAYItem;
			public ReadOnlyMenuItem getTrackingTriageMenuORDERItem()
			{
				return this.contextMenuTrackingTriageMenuORDERItem;
			}
			private MenuItem contextMenuTrackingTriageMenuORDERItem;
			public ReadOnlyMenuItem getTrackingTriageMenuRESULTItem()
			{
				return this.contextMenuTrackingTriageMenuRESULTItem;
			}
			private MenuItem contextMenuTrackingTriageMenuRESULTItem;
			public ReadOnlyMenuItem getTrackingTriageMenuREFRESHItem()
			{
				return this.contextMenuTrackingTriageMenuREFRESHItem;
			}
			private MenuItem contextMenuTrackingTriageMenuREFRESHItem;
			public ReadOnlyMenuItem getTrackingTriageMenuDNW_ADDItem()
			{
				return this.contextMenuTrackingTriageMenuDNW_ADDItem;
			}
			private MenuItem contextMenuTrackingTriageMenuDNW_ADDItem;
			public ReadOnlyMenuItem getTrackingTriageMenuDNW_MINUSItem()
			{
				return this.contextMenuTrackingTriageMenuDNW_MINUSItem;
			}
			private MenuItem contextMenuTrackingTriageMenuDNW_MINUSItem;
			public ReadOnlyMenuItem getTrackingTriageMenuTriageItem()
			{
				return this.contextMenuTrackingTriageMenuTriageItem;
			}
			private MenuItem contextMenuTrackingTriageMenuTriageItem;
			public ReadOnlyMenuItem getTrackingTriageMenuEDITTRIAGEItem()
			{
				return this.contextMenuTrackingTriageMenuEDITTRIAGEItem;
			}
			private MenuItem contextMenuTrackingTriageMenuEDITTRIAGEItem;
			public ReadOnlyMenuItem getTrackingTriageMenuVIEW_TRIAGEItem()
			{
				return this.contextMenuTrackingTriageMenuVIEW_TRIAGEItem;
			}
			private MenuItem contextMenuTrackingTriageMenuVIEW_TRIAGEItem;
			public ReadOnlyMenuItem getTrackingTriageMenuBED_STATUSItem()
			{
				return this.contextMenuTrackingTriageMenuBED_STATUSItem;
			}
			private MenuItem contextMenuTrackingTriageMenuBED_STATUSItem;
			public ReadOnlyMenuItem getTrackingTriageMenuCOMMENTSItem()
			{
				return this.contextMenuTrackingTriageMenuCOMMENTSItem;
			}
			private MenuItem contextMenuTrackingTriageMenuCOMMENTSItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer AreaCountRefrresh;
		public Timer getAreaCountRefrresh()
		{
			return AreaCountRefrresh;
		}
		public void enableAll()
		{
			AreaCountRefrresh.setEnabled(true);
		}
		public void disableAll()
		{
			AreaCountRefrresh.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[217];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-ID", "ID_EDTransfer");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-REFERREDDATETIME", "ReferredDateTime");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-ACCEPTEDDATETIME", "AcceptedDateTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-TOHOSPITAL", "ToHospital");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-OTHERHOSPITAL", "OtherHospital");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-TRANSFERMODE", "TransferMode");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-TRANSFERESCORT", "TransferEscort");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-COMMENT", "Comment");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-NOTACCEPTED", "NotAccepted");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-PATIENT", "Patient");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-EPISODE", "Episode");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDTransferVo", "BO-1086100042-ATTENDANCE", "Attendance");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Emergency.Tracking", "BO-1086100005-ID", "ID_Tracking");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-ID", "ID_TrackingArea");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-EDLOCATION", "EDLocation");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-AREANAMEDESCRIPTION", "AreaNameDescription");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-AREADISPLAYNAME", "AreaDisplayName");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-STATUS", "Status");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-ISOVERALLVIEW", "IsOverallView");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-ISREGISTRATIONAREA", "IsRegistrationArea");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingArea_" + componentIdentifier, "BO-1087100001-PATIENTREFRESHRATE", "PatientRefreshRate");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingPatient_" + componentIdentifier, "BO-1086100005-ID", "ID_Tracking");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingPatient_" + componentIdentifier, "BO-1086100005-LASTMOVEMENTDATETIME", "LastMovementDateTime");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingPatient_" + componentIdentifier, "BO-1086100005-ISDISCHARGED", "IsDischarged");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SelectedTrackingPatient_" + componentIdentifier, "BO-1086100005-REQUIRINGDISCHARGEDOCUMENTATIONREVIEW", "RequiringDischargeDocumentationReview");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__LoggedHcpRef_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__LoggedMosRef_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-ID", "ID_AttendanceKPIConfig");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-EDLOCATION", "EDLocation");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPI", "AwaitingTriageBreachWarningKPI");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHEDKPI", "AwaitingTriageBreachedKPI");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPI", "AwaitingClinicianBreachWarningKPI");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHEDKPI", "AwaitingClinicianBreachedKPI");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPI", "LosBreachWarningKPI");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPI", "LosBreachedKPI");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPITEXTCOLOUR", "AwaitingTriageBreachWarningKPITextColour");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPIFLASHINGTEXT", "AwaitingTriageBreachWarningKPIFlashingText");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPIFLASHINGTEXTCOLOUR", "AwaitingTriageBreachWarningKPIFlashingTextColour");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPIBACKGROUNDCOLOUR", "AwaitingTriageBreachWarningKPIBackgroundColour");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPITEXTCOLOUR", "AwaitingTriageBreachKPITextColour");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPIFLASHINGTEXT", "AwaitingTriageBreachKPIFlashingText");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPIFLASHINGTEXTCOLOUR", "AwaitingTriageBreachKPIFlashingTextColour");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPIBACKGROUNDCOLOUR", "AwaitingTriageBreachKPIBackgroundColour");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPITEXTCOLOUR", "AwaitingClinicianBreachWarningKPITextColour");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPIFLASHINGTEXT", "AwaitingClinicianBreachWarningKPIFlashingText");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPIFLASHINGTEXTCOLOUR", "AwaitingClinicianBreachWarningKPIFlashingTextColour");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPIBACKGROUNDCOLOUR", "AwaitingClinicianBreachWarningKPIBackgroundColour");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPITEXTCOLOUR", "AwaitingClinicianBreachKPITextColour");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPIFLASHINGTEXT", "AwaitingClinicianBreachKPIFlashingText");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPIFLASHINGTEXTCOLOUR", "AwaitingClinicianBreachKPIFlashingTextColour");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPIBACKGROUNDCOLOUR", "AwaitingClinicianBreachKPIBackgroundColour");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPITEXTCOLOUR", "LosBreachWarningKPITextColour");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIFLASHINGTEXT", "LosBreachWarningKPIFlashingText");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIFLASHINGTEXTCOLOUR", "LosBreachWarningKPIFlashingTextColour");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIBACKGROUNDCOLOUR", "LosBreachWarningKPIBackgroundColour");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHKPITEXTCOLOUR", "LosBreachKPITextColour");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIFLASHINGTEXT", "LosBreachedKPIFlashingText");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIFLASHINGTEXTCOLOUR", "LosBreachedKPIFlashingTextColour");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIBACKGROUNDCOLOUR", "LosBreachedKPIBackgroundColour");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-ID", "ID_TrackingArea");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-EDLOCATION", "EDLocation");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-AREANAMEDESCRIPTION", "AreaNameDescription");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-AREADISPLAYNAME", "AreaDisplayName");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-STATUS", "Status");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-ISOVERALLVIEW", "IsOverallView");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-ISREGISTRATIONAREA", "IsRegistrationArea");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__CurentAreaOfPatient_" + componentIdentifier, "BO-1087100001-PATIENTREFRESHRATE", "PatientRefreshRate");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__PartialAdmissionForTrackingVo_" + componentIdentifier, "BO-1086100005-ID", "ID_Tracking");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__PartialAdmissionForTrackingVo_" + componentIdentifier, "BO-1086100005-ATTENDANCE", "Attendance");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__PartialAdmissionForTrackingVo_" + componentIdentifier, "BO-1086100005-BEDAVAILABILITY", "BedAvailability");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SECSConfig_" + componentIdentifier, "BO-1028100042-ID", "ID_SECS");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SECSConfig_" + componentIdentifier, "BO-1028100042-EWSTRIGGERSCORE", "EWSTriggerScore");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.Tracking.__internal_x_context__SECSConfig_" + componentIdentifier, "BO-1028100042-OBSPROTOCOLTYPE", "OBSProtocolType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
