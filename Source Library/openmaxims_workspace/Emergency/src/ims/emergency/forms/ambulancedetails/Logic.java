//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.ambulancedetails;

import java.util.ArrayList;

import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.AmbulanceDetailsVo;
import ims.emergency.vo.EmergencyAttendanceForTriageLiteVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null && args.length > 0)
		{
			if (args[0] instanceof FormMode)
				form.setMode((FormMode) args[0]);
		}
		
		//WDEV-19284
		if (args != null && args.length > 1 && args[1]!=null && args[1] instanceof EmergencyAttendanceForTriageLiteVo)
		{
			form.getGlobalContext().Emergency.setAmbulanceDetails(domain.getEmergencyAttendanceAmbDet((EmergencyAttendanceForTriageLiteVo)args[1]));
			form.getLocalContext().setsaveOnDialog(true);
		}
		
		open(form.getGlobalContext().Emergency.getAmbulanceDetails());
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
			form.btnCancel().setText("Close");
		else if (FormMode.EDIT.equals(form.getMode()))
			form.btnCancel().setText("Cancel");
		
		form.btnOK().setText(Boolean.TRUE.equals(form.getLocalContext().getsaveOnDialog()) ? "Save": "OK" ); //WDEV-19284 
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}


	private void open(AmbulanceDetailsVo ambulanceDetails)
	{
		populateInstanceControls(ambulanceDetails);
	}

	
	private boolean save()
	{
		AmbulanceDetailsVo ambulanceDetails = populateDataFromInstanceControls(form.getGlobalContext().Emergency.getAmbulanceDetails());

		//WDEV-19284  //WDEV-20549
		if (Boolean.TRUE.equals(form.getLocalContext().getsaveOnDialog()))
		{
			String[] errors = ambulanceDetails.validate(validateUIRules());
			
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			
			try
			{
				domain.save(ambulanceDetails);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.ABORT);
				return false;
			}
		}
		else
		{
			String[] errors = validateUIRules();
			
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			form.getGlobalContext().Emergency.setAmbulanceDetails(ambulanceDetails);
		}

		return true;
	}
	

	private void clearInstanceControls()
	{
		form.dtimArrivalTime().setValue(null);
		form.txtJobNo().setValue(null);
		form.dtimHandoverTime().setValue(null);
		form.cmbDelayReason().setValue(null);
		form.txtAmbulanceDelayReasonComment().setValue(null); //WDEV-19284
	}

	private void populateInstanceControls(AmbulanceDetailsVo ambulanceDetails)
	{
		clearInstanceControls();
		
		if (ambulanceDetails == null)
			return;
		
		form.dtimArrivalTime().setValue(ambulanceDetails.getAmbulanceArrivalDateTime());
		form.txtJobNo().setValue(ambulanceDetails.getAmbulanceJobNo());
		form.dtimHandoverTime().setValue(ambulanceDetails.getAmbulanceHandoverDateTime());
		form.cmbDelayReason().setValue(ambulanceDetails.getAmbulanceDelayReason());
		form.txtAmbulanceDelayReasonComment().setValue(ambulanceDetails.getAmbulanceDelayReasonComment()); //WDEV-19284
	}

	private AmbulanceDetailsVo populateDataFromInstanceControls(AmbulanceDetailsVo ambulanceDetails)
	{
		if (ambulanceDetails == null)
			ambulanceDetails = new AmbulanceDetailsVo();
		
		ambulanceDetails.setAmbulanceArrivalDateTime(form.dtimArrivalTime().getValue());
		ambulanceDetails.setAmbulanceJobNo(form.txtJobNo().getValue());
		ambulanceDetails.setAmbulanceHandoverDateTime(form.dtimHandoverTime().getValue());
		ambulanceDetails.setAmbulanceDelayReason(form.cmbDelayReason().getValue());
		ambulanceDetails.setAmbulanceDelayReasonComment(form.txtAmbulanceDelayReasonComment().getValue());//WDEV-19284
		
		return ambulanceDetails;
	}

	private String[] validateUIRules() //WDEV-20549
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		
		if (form.dtimArrivalTime().getValue() != null && form.dtimArrivalTime().getValue().isGreaterThan(new DateTime()))
		{
			listOfErrors.add("Ambulance Arrival Time cannot be set in the future.");
		}
		
		if (form.dtimArrivalTime().getValue() != null)
		{
			AmbulanceDetailsVo attendVo = form.getGlobalContext().Emergency.getAmbulanceDetails();
			if (attendVo != null  && attendVo.getArrivalDateTimeIsNotNull() && form.dtimArrivalTime().getValue().isGreaterThan(attendVo.getArrivalDateTime()))
			{
				listOfErrors.add("Ambulance Arrival Time cannot be set after Attendance Arrival Time ( " + attendVo.getArrivalDateTime() +" )!");
			}
			
			if (attendVo != null  && attendVo.getRegistrationDateTimeIsNotNull() && form.dtimArrivalTime().getValue().isGreaterThan(attendVo.getRegistrationDateTime()))
			{
				listOfErrors.add("Ambulance Arrival Time cannot be set after Attendance Registration Time ( " + attendVo.getRegistrationDateTime() +"  )!");
			}
			
		}
		
		if (form.dtimHandoverTime().getValue() != null && form.dtimHandoverTime().getValue().isGreaterThan(new DateTime()))
		{
			listOfErrors.add("Ambulance Handover Time cannot be set in the future.");
		}
		
		if (form.dtimHandoverTime().getValue() != null && form.dtimArrivalTime().getValue() != null)
		{
			if (form.dtimHandoverTime().getValue().isLessThan(form.dtimArrivalTime().getValue()))
				listOfErrors.add("Ambulance Handover Time cannot be set before Ambulance Arrival Time.");
		}

		return listOfErrors.toArray(new String[listOfErrors.size()]);
	}
}
