//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4892.20548)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.transferdialog;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.EDPartialAdmissionVo;
import ims.emergency.vo.EDTransferVo;
import ims.emergency.vo.EDTransferVoCollection;

import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForTransferVo;

import ims.emergency.vo.enums.EDTransferTotherHospitalEvent;
import ims.emergency.vo.lookups.AllocationStatus;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.TransferToHospital;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if( args != null && args.length == 1 && args[0] != null && args[0] instanceof EDPartialAdmissionVo)
		{
			form.getLocalContext().setEDPartialAdmissionForTrackingVo((EDPartialAdmissionVo) args[0]);
		}
		else
			form.getLocalContext().setEDPartialAdmissionForTrackingVo(null);
		
		initialize();
		open();
		if(form.getLocalContext().getlcCurrentTrackingRecord() == null || 
				   (form.getLocalContext().getlcCurrentTrackingRecordIsNotNull() && form.getLocalContext().getlcCurrentTrackingRecord().getCurrentTransferRecord() == null) ||
				   (form.getLocalContext().getlcCurrentTrackingRecordIsNotNull() && form.getLocalContext().getlcCurrentTrackingRecord().getCurrentTransferRecordIsNotNull() &&	(form.getLocalContext().getlcCurrentTrackingRecord().getCurrentTransferRecord().getAcceptedDateTime() != null || Boolean.TRUE.equals(form.getLocalContext().getlcCurrentTrackingRecord().getCurrentTransferRecord().getNotAccepted()))))
		{
			newInstance();
		}		
	}
	
	private void initialize()
	{
		form.ccRefferedBy().initialize(MosType.HCP);
	//	form.getLocalContext().setlcSelectedEDTransferRecord(domain.getCurrentTransferRecord(form.getGlobalContext().Core.getCurrentCareContext() != null ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext() : null));
	}

	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private boolean save()
	{
		String[] errors1 = validateUIRules(); 
		
		if(errors1 != null && errors1.length > 0)
		{
			engine.showErrors(errors1);
			return false;
		}
		
		EDTransferVo tempVo = populateDataFromScreen(form.getLocalContext().getlcSelectedEDTransferRecord());
		
		TrackingForTransferVo trackingToSave = null;

		// new transfer
		if (tempVo.getID_EDTransfer() == null && form.getLocalContext().getlcCurrentTrackingRecord().getCurrentAreaIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getlcCurrentTrackingRecord().getIsDischarged()))
		{
			trackingToSave = form.getLocalContext().getlcCurrentTrackingRecord();
			
			TrackingAttendanceStatusVo 	trackingStatusToSave = populateTrackingAttendanceStatus(TrackingStatus.DECISION_TO_TRANSFER);
			trackingToSave.setCurrentStatus(trackingStatusToSave);
			trackingToSave.setCurrentTransferRecord(tempVo);
			
			if (trackingToSave.getAttendance()!=null && trackingToSave.getAttendance().getConclusionDateTime()==null)
			{
				trackingToSave.getAttendance().setConclusionDateTime(form.dtimReferredDateTime().getValue());
			}
		}
				
		//If is NotAccepted status to previous status
		if (tempVo.getID_EDTransfer()!=null && form.getLocalContext().getlcCurrentTrackingRecord().getCurrentAreaIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getlcCurrentTrackingRecord().getIsDischarged()) && EDTransferTotherHospitalEvent.NOT_ACCEPTED.equals(form.getLocalContext().getlcSelectedEvent()))
		{
			trackingToSave = form.getLocalContext().getlcCurrentTrackingRecord();
			TrackingAttendanceStatusVo trackingStatusToSave = populateTrackingAttendanceStatus(form.getLocalContext().getlcCurrentTrackingRecord().getCurrentStatus().getPrevStatus());
			trackingToSave.setCurrentStatus(trackingStatusToSave);		
			
			tempVo.setNotAccepted(true);
			trackingToSave.setCurrentTransferRecord(tempVo);
		}
		
		//If Transfer Is Accepted set status to Transfer Accepted
		if (tempVo.getID_EDTransfer()!=null && form.getLocalContext().getlcCurrentTrackingRecord().getCurrentAreaIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getlcCurrentTrackingRecord().getIsDischarged()) && EDTransferTotherHospitalEvent.ACCEPTED.equals(form.getLocalContext().getlcSelectedEvent()))
		{
			trackingToSave = form.getLocalContext().getlcCurrentTrackingRecord();
			
			TrackingAttendanceStatusVo 	trackingStatusToSave = populateTrackingAttendanceStatus(TrackingStatus.TRANSFERRED);
			trackingToSave.setCurrentStatus(trackingStatusToSave);		
			
			tempVo.setAcceptedDateTime(form.dtimAcceptedDateTime().getValue());
			trackingToSave.setCurrentTransferRecord(tempVo);
		}
		
		String[] errors = tempVo.validate(validateUIRules()); 
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if (trackingToSave != null)
		{
			String[] errors2 = trackingToSave.validate();

			if (errors2 != null && errors2.length > 0)
			{
				engine.showErrors(errors2);
				return false;
			}		
		}
		
		try
		{	
			EDTransferVo previousRecordNotCompleted = domain.getUncompletedTransferByCareContext(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext());
			
			if (tempVo.getID_EDTransfer() != null && !EDTransferTotherHospitalEvent.ACCEPTED.equals(form.getLocalContext().getlcSelectedEvent()) && !EDTransferTotherHospitalEvent.NOT_ACCEPTED.equals(form.getLocalContext().getlcSelectedEvent()))
				form.getLocalContext().setlcSelectedEDTransferRecord(domain.saveEDTransfer(tempVo, trackingToSave, null, null));
			else	
			{
				if (!tempVo.getID_EDTransferIsNotNull() && previousRecordNotCompleted != null)
				{
					form.getLocalContext().setlcSelectedEDTransferRecord(domain.saveEDTransfer(null, trackingToSave, previousRecordNotCompleted, form.getGlobalContext().Emergency.getReferralToSpecialtyTeam()));
				}
				else
					form.getLocalContext().setlcSelectedEDTransferRecord(domain.saveEDTransfer(null, trackingToSave, null, form.getGlobalContext().Emergency.getReferralToSpecialtyTeam()));
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			if (form.getLocalContext().getlcSelectedEDTransferRecord() != null)
				form.getLocalContext().setlcSelectedEDTransferRecord(domain.getEDTransferVo(form.getLocalContext().getlcSelectedEDTransferRecord()));
			//else
			//	form.getLocalContext().setlcSelectedEDTransferRecord(domain.getCurrentTransferRecord(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext() : null));
			open();
			return false;
			
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
		}

		Boolean wasReferralToSpeacialtySaved = false;
		if (form.getGlobalContext().Emergency.getReferralToSpecialtyTeam() != null)
		{
			wasReferralToSpeacialtySaved = domain.wasReferralToSpecialtyTeamSaved(form.getGlobalContext().Emergency.getReferralToSpecialtyTeam());
			if (wasReferralToSpeacialtySaved)
				form.getGlobalContext().Emergency.setReferralToSpecialtyTeam(null);
		}
		
		return true;
	}
	
	private TrackingAttendanceStatusVo populateTrackingAttendanceStatus(TrackingStatus prevStatus) 
	{
		TrackingAttendanceStatusVo trackingAttStatus = new TrackingAttendanceStatusVo();

		trackingAttStatus.setPatient(form.getGlobalContext().Core.getPatientShort());
		trackingAttStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		trackingAttStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		trackingAttStatus.setTrackingArea(form.getLocalContext().getlcCurrentTrackingRecord().getCurrentArea());

		trackingAttStatus.setStatusDatetime(new DateTime());

		Object mos = domain.getMosUser();
		if (mos != null && mos instanceof MemberOfStaffLiteVo)
		{
			trackingAttStatus.setCreatedBy((MemberOfStaffLiteVo) mos);
		}

		trackingAttStatus.setStatus(prevStatus);
		trackingAttStatus.setPrevStatus((form.getLocalContext().getlcCurrentTrackingRecord()!=null && form.getLocalContext().getlcCurrentTrackingRecord().getCurrentStatus()!=null  ) ? form.getLocalContext().getlcCurrentTrackingRecord().getCurrentStatus().getStatus() : null);
		
		return trackingAttStatus;
	}

	private String[] validateUIRules()
	{
		
		ArrayList<String> errorList = new ArrayList<String>();
		
		if( form.dtimReferredDateTime().getValue() == null )
		{
			errorList.add("Referred Date/Time is mandatory");
		}
		else if( form.dtimReferredDateTime().getValue() != null && form.dtimReferredDateTime().getValue().isGreaterThan(new DateTime()))
		{
			errorList.add("Referred Date/Time cannot be in the future");
		}
		if( form.dtimAcceptedDateTime().getValue() != null && form.dtimAcceptedDateTime().getValue().isGreaterThan(new DateTime() ))
		{
			errorList.add("Accepted Date/Time cannot be in the future");
		}
		if( form.dtimAcceptedDateTime().getValue() != null &&  form.dtimReferredDateTime().getValue() != null && (form.dtimReferredDateTime().getValue().getDate().isGreaterThan(form.dtimAcceptedDateTime().getValue().getDate()) || (form.dtimReferredDateTime().getValue().getDate().equals(form.dtimAcceptedDateTime().getValue().getDate()) && form.dtimReferredDateTime().getValue().getTime().isGreaterThan(form.dtimAcceptedDateTime().getValue().getTime()))))
		{
			errorList.add("Referred Date/Time cannot be earlier than Accepted Date/Time");
		}
		if( form.cmbHospital().getValue() == null )
		{
			errorList.add("Hospital is mandatory");
		}
		else if( form.cmbHospital().getValue() != null && form.cmbHospital().getValue().equals(TransferToHospital.OTHER) )
		{
			if( form.txtOtherHospital().getValue() == null)
			{
				errorList.add("Other Hospital is mandatory");
			}
		}
		
		if( form.ccRefferedBy().getValue() == null )
		{
			errorList.add("Referred by is mandatory");
		}

		return errorList.toArray(new String[errorList.size()]);
	}

	private EDTransferVo populateDataFromScreen( EDTransferVo tempVo)
	{
		if( tempVo == null)
			tempVo = new EDTransferVo();
		
		tempVo.setPatient(form.getGlobalContext().Core.getPatientShort());
		tempVo.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		tempVo.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		tempVo.setReferredDateTime(form.dtimReferredDateTime().getValue());
		tempVo.setToHospital(form.cmbHospital().getValue());
		tempVo.setOtherHospital(form.txtOtherHospital().getValue());
		tempVo.setTransferMode(form.cmbTransferMode().getValue());
		tempVo.setTransferEscort(form.cmbTransferEscort().getValue());
		tempVo.setComment(form.txtComment().getValue());
		tempVo.setReferredBy((HcpLiteVo) form.ccRefferedBy().getValue());
		tempVo.setAcceptedDateTime(form.dtimAcceptedDateTime().getValue());
		
		if (tempVo.getNotAccepted()==null)
			tempVo.setNotAccepted(EDTransferTotherHospitalEvent.NOT_ACCEPTED.equals(form.getLocalContext().getlcSelectedEvent()) ? true : null);
		
		return tempVo;
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			open();	
		}
	}
	
	private void open()
	{
		clearScreen();
		form.getLocalContext().setlcCurrentTrackingRecord(domain.getCurrentTrackingRecord(form.getGlobalContext().Emergency.getTracking()));
			
		if( form.getGlobalContext().Emergency.getEDTransferVoIsNotNull() )
			form.getGlobalContext().Emergency.setEDTransferVo(domain.getEDTransferVo(form.getGlobalContext().Emergency.getEDTransferVo()));
		
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromData()
	{	
		populateRecordBrowser();
		populateInstanceControls(form.getLocalContext().getlcSelectedEDTransferRecord());		
	}
	
	private void populateInstanceControls(EDTransferVo edTrVo)
	{
		if(edTrVo == null)
		{
			clearScreen();
			return;
		}			
		form.dtimReferredDateTime().setValue(edTrVo.getReferredDateTime());
		form.dtimAcceptedDateTime().setValue(edTrVo.getAcceptedDateTime());
		form.cmbHospital().setValue(edTrVo.getToHospital());
		form.cmbTransferEscort().setValue(edTrVo.getTransferEscort());
		form.cmbTransferMode().setValue(edTrVo.getTransferMode());
		form.txtComment().setValue(edTrVo.getComment());
		form.txtOtherHospital().setValue(edTrVo.getOtherHospital());
		form.ccRefferedBy().setValue(edTrVo.getReferredBy());		
	}

	private void populateRecordBrowser() 
	{
		form.recbrTransfers().clear();
		EDTransferVoCollection allTransfersForAttendanceCollection = domain.getAllTransfersForTheSelectedAttendance(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext());
		
		if (allTransfersForAttendanceCollection == null || allTransfersForAttendanceCollection.size() == 0)
		{
			return;
		}

		for (int i = 0; i < allTransfersForAttendanceCollection.size(); i++)
		{
			 EDTransferVo transfer = allTransfersForAttendanceCollection.get(i);

			if (transfer == null)
				return;

			String text = getTextDisplay(transfer);
			
			if (i==0)
			{
				form.recbrTransfers().newRow(i, transfer, text, Color.Green);
			}
			else 
			{
				form.recbrTransfers().newRow(i, transfer, text);
			}
			
			form.recbrTransfers().setValue(transfer);
		}

		if (allTransfersForAttendanceCollection.size() > 0 && form.getLocalContext().getlcSelectedEDTransferRecord() == null)
		{
			form.getLocalContext().setlcSelectedEDTransferRecord(allTransfersForAttendanceCollection.get(0));
		}

		form.recbrTransfers().setValue(form.getLocalContext().getlcSelectedEDTransferRecord());
		
	}
	//WDEV-22868
	private String getTextDisplay(EDTransferVo transfer)
	{
		if (transfer == null)
			return null;
		
		StringBuffer text = new StringBuffer();

		if (transfer.getReferredDateTimeIsNotNull())
		{
			text.append("Date/Time Referred: " + transfer.getReferredDateTime().toString());
		}

		if (transfer.getReferredBy() != null && transfer.getReferredBy().getName()!=null)
		{
			text.append(" - ");
			text.append(transfer.getReferredBy().getName());
		}		
		if (transfer.getToHospitalIsNotNull() && !TransferToHospital.OTHER.equals(transfer.getToHospital()))
		{
			text.append(" - ");
			text.append(transfer.getToHospital().getText());
		}
		else if ((transfer.getToHospitalIsNotNull() && TransferToHospital.OTHER.equals(transfer.getToHospital())))
		{
			text.append(" - ");
			text.append(transfer.getOtherHospital());
		}
		return text.length() > 0 ? text.toString() : null;
	}

	private void clearScreen()
	{
		form.recbrTransfers().clear();
		form.dtimAcceptedDateTime().setValue(null);
		form.dtimReferredDateTime().setValue(null);
		form.cmbHospital().setValue(null);
		form.cmbTransferEscort().setValue(null);
		form.cmbTransferMode().setValue(null);
		form.txtComment().setValue(null);
		form.txtOtherHospital().setValue(null);
		form.ccRefferedBy().setValue(null);
	}
	
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		updateControlsState();	
		form.txtOtherHospital().setValue(null);
	}
	
	private void updateControlsState()
	{
		form.btnNewTransfer().clearBackgroundColor();
		form.btnAccepted().clearBackgroundColor();
		form.btnNotAccepted().clearBackgroundColor();
		
		form.txtOtherHospital().setRequired(FormMode.EDIT.equals(form.getMode()) && TransferToHospital.OTHER.equals(form.cmbHospital().getValue()));
		form.txtOtherHospital().setEnabled(FormMode.EDIT.equals(form.getMode()) && TransferToHospital.OTHER.equals(form.cmbHospital().getValue()));
		
		form.dtimAcceptedDateTime().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.dtimAcceptedDateTime().getValue() != null);
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(form.recbrTransfers().getValue() != null);
		}
		
		form.ccRefferedBy().isRequired(FormMode.EDIT.equals(form.getMode()));
		form.btnAccepted().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.recbrTransfers().getValue() != null && !form.recbrTransfers().getValue().getAcceptedDateTimeIsNotNull() && !Boolean.TRUE.equals(form.recbrTransfers().getValue().getNotAccepted()));
		form.btnNotAccepted().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.recbrTransfers().getValue() != null && !form.recbrTransfers().getValue().getAcceptedDateTimeIsNotNull() && !Boolean.TRUE.equals(form.recbrTransfers().getValue().getNotAccepted()));
		form.btnNewTransfer().setVisible(FormMode.VIEW.equals(form.getMode()));
		
		if (form.btnAccepted().isEnabled())
			form.btnAccepted().setBackgroundColor(Color.LightYellow);
		if (form.btnNotAccepted().isEnabled())
			form.btnNotAccepted().setBackgroundColor(Color.NavajoWhite);
		if (form.btnNewTransfer().isVisible())
			form.btnNewTransfer().setBackgroundColor(Color.LightGreen);
					
	}

	@Override
	protected void onBtnNotAcceptedClick() throws PresentationLogicException 
	{
		form.getLocalContext().setlcSelectedEvent(EDTransferTotherHospitalEvent.NOT_ACCEPTED);
		if (save())
		{
			engine.close(DialogResult.OK);
		}	
	}

	@Override
	protected void onBtnAcceptedClick() throws PresentationLogicException 
	{
		acceptTransfer();		
	}

	private void acceptTransfer()
	{
		form.dtimAcceptedDateTime().setValue(new DateTime());
		form.getLocalContext().setlcSelectedEvent(EDTransferTotherHospitalEvent.ACCEPTED);
		
		if(save())
			engine.close(DialogResult.OK);
		else
			open();		
	}

	@Override
	protected void onBtnNewTransferClick() throws PresentationLogicException 
	{
		EDPartialAdmissionVo currentPartialAdm = domain.getTrackingWithEDPartialAdmission(form.getGlobalContext().Emergency.getTracking());
			
		if( currentPartialAdm != null && AllocationStatus.ACTIVE.equals(currentPartialAdm.getAllocatedStatus()))
		{
			form.getLocalContext().setlcCurrentPartialAdmission(currentPartialAdm);
			form.getLocalContext().setlcDTAWithTransferMessageId(engine.showMessage("A decision to admit record exists for this patient. If you proceed to Transfer the patient, the record will be cancelled on the ED system and the PAS system. Are you sure you want to continue?","Confirm Transfer" ,MessageButtons.YESNO, MessageIcon.QUESTION));
			return;
		}
			
		newInstance();	
	}

	private void newInstance() 
	{
		clearScreen();
		
		form.getLocalContext().setlcSelectedEDTransferRecord(null);
		
		Object mos = domain.getHcpLiteUser();

		if (mos instanceof HcpLiteVo)
		{
			form.ccRefferedBy().setValue((HcpLiteVo) mos);
		}

		form.dtimReferredDateTime().setValue(new DateTime());

		form.setMode(FormMode.EDIT);	
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);		
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();	
	}

	@Override
	protected void onRecbrTransfersValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setlcSelectedEDTransferRecord(domain.getEDTransferVo(form.recbrTransfers().getValue()));
		populateInstanceControls(form.getLocalContext().getlcSelectedEDTransferRecord());
		updateControlsState();		
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if( form.getLocalContext().getlcDTAWithTransferMessageId() != null && messageBoxId == form.getLocalContext().getlcDTAWithTransferMessageId())
		{
			if( DialogResult.YES.equals(result))
			{		 
				try
				{	TrackingForTransferVo trackingRec = null;
					if (form.getLocalContext().getlcCurrentTrackingRecordIsNotNull())
					{
						trackingRec = (TrackingForTransferVo) form.getLocalContext().getlcCurrentTrackingRecord().clone();
						
						if (trackingRec.getCurrentStatusIsNotNull() && TrackingStatus.DECISION_TO_ADMIT.equals(trackingRec.getCurrentStatus().getStatus()))
							trackingRec.setCurrentStatus(populateTrackingAttendanceStatus(trackingRec.getCurrentStatus().getPrevStatus()));
						
						String[] errors = trackingRec.validate();
						if(errors != null && errors.length > 0)
						{
							engine.showErrors(errors);
							return;
						}
					}
							
					form.getLocalContext().setlcCurrentPartialAdmission(domain.cancelCurrentPartialAdmission(form.getLocalContext().getlcCurrentPartialAdmission(), trackingRec));					
					newInstance();
				} 
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					open();
				}
				form.getLocalContext().setlcCurrentTrackingRecord(domain.getCurrentTrackingRecord(form.getLocalContext().getlcCurrentTrackingRecord()));
			}
			else
				open();
		}
		
	}
}
