//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Mara Iroaie using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.trackingworkflowstatusconfig;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.forms.trackingworkflowstatusconfig.GenForm.grpAttendanceDepartureEnumeration;
import ims.emergency.forms.trackingworkflowstatusconfig.GenForm.grpContinueDisplayEnumeration;
import ims.emergency.forms.trackingworkflowstatusconfig.GenForm.grpNewContextEnumeration;
import ims.emergency.forms.trackingworkflowstatusconfig.GenForm.grpRecordsConclusionEnumeration;
import ims.emergency.forms.trackingworkflowstatusconfig.GenForm.grpTrigersPreAdmissionEnumeration;
import ims.emergency.vo.TrackingStatusWorkflowVo;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int ATTENDANCE_DEPARTURE_YES	= 1;
	private static final int ATTENDANCE_DEPARTURE_NO	= 0;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void initialize()
	{
		// TODO Auto-generated method stub		
	}
	
	private void open()
	{
		clearInstanceDetails();
		TrackingStatusWorkflowVo trackingWorkflowStatusRecord = domain.getTrackingWorkflowStatusRecord(form.cmbTrackingStatus().getValue());

		form.getLocalContext().setlcSelectedRecord(trackingWorkflowStatusRecord);
			
		if (trackingWorkflowStatusRecord != null)
		{
			populateScreemFromData(trackingWorkflowStatusRecord);
		}
		form.setMode(FormMode.VIEW);	
	}

	private void populateScreemFromData(TrackingStatusWorkflowVo trackingWorkflowStatusRecord)
	{
		form.grpAttendanceDeparture().setValue(setAttendanceDeparture(trackingWorkflowStatusRecord.getRecordsEdAttendanceDeparture()));
		form.grpRecordsConclusion().setValue(setConclusionDateTime(trackingWorkflowStatusRecord.getRecordsConclusionDateTime()));
		form.grpTrigersPreAdmission().setValue(setPreAdmissionToPas(trackingWorkflowStatusRecord.getTriggersPreAdmissionPas()));
		
		if (ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture())
		{
			form.grpContinueDisplay().setValue(setContinueDisplay(trackingWorkflowStatusRecord.getContinueDisplayInTracking()));
			form.grpNewContext().setValue(setNewContext(trackingWorkflowStatusRecord.getCreateNewCareContext()));
			form.cmbOutcome().setValue(trackingWorkflowStatusRecord.getDischargeOutcome());
		}
	}

	private grpNewContextEnumeration setNewContext(Boolean createNewCareContext)
	{
		if(Boolean.TRUE.equals(createNewCareContext))
			return grpNewContextEnumeration.rdoNewContextYes;
		return grpNewContextEnumeration.rdoNewContextNo;
	}

	private grpContinueDisplayEnumeration setContinueDisplay(Boolean continueDisplayInTracking)
	{
		if(Boolean.TRUE.equals(continueDisplayInTracking))
			return grpContinueDisplayEnumeration.rdoContinueDisplayYes;
		return grpContinueDisplayEnumeration.rdoContinueDisplayNo;
	}

	private grpTrigersPreAdmissionEnumeration setPreAdmissionToPas(Boolean triggersPreAdmissionPas)
	{
		if(Boolean.TRUE.equals(triggersPreAdmissionPas))
			return grpTrigersPreAdmissionEnumeration.rdoTrigersPreAdmissionYes;
		return grpTrigersPreAdmissionEnumeration.rdoTrigersPreAdmissionNo;
	}

	private grpRecordsConclusionEnumeration setConclusionDateTime(Boolean recordsConclusionDateTime)
	{
		if(Boolean.TRUE.equals(recordsConclusionDateTime))
			return grpRecordsConclusionEnumeration.rdoRecordsConclusionYes;
		return grpRecordsConclusionEnumeration.rdoRecordsConclusionNo;
	}

	private grpAttendanceDepartureEnumeration setAttendanceDeparture(Boolean recordsEdAttendanceDeparture)
	{
		if(Boolean.TRUE.equals(recordsEdAttendanceDeparture))
			return grpAttendanceDepartureEnumeration.rdoAttendanceDepartureYes;
		return grpAttendanceDepartureEnumeration.rdoAttendanceDepartureNo;
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlSate();
	}
	
	private void updateControlSate()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(form.cmbTrackingStatus().getValue() != null && form.getLocalContext().getlcSelectedRecord() != null);
			form.btnNew().setVisible(form.cmbTrackingStatus().getValue() != null && form.getLocalContext().getlcSelectedRecord() == null);
		}			
		
		form.lblContinueDisplay().setVisible(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.grpContinueDisplay().setVisible(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.lblNewContext().setVisible(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.grpNewContext().setVisible(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.lblOutcome().setVisible(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.cmbOutcome().setVisible(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		
		form.pnlAttendanceDeparture().setVisible(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		
		form.lblContinueDisplay().setEnabled(FormMode.EDIT.equals(form.getMode()) && ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.grpContinueDisplay().setEnabled(FormMode.EDIT.equals(form.getMode()) && ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.lblNewContext().setEnabled(FormMode.EDIT.equals(form.getMode()) && ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.grpNewContext().setEnabled(FormMode.EDIT.equals(form.getMode()) && ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.lblOutcome().setEnabled(FormMode.EDIT.equals(form.getMode()) && ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());
		form.cmbOutcome().setEnabled(FormMode.EDIT.equals(form.getMode()) && ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture());	
	}

	private Integer getAttendanceDeparture()
	{
		grpAttendanceDepartureEnumeration attendanceDeparture = form.grpAttendanceDeparture().getValue();
		
		if (grpAttendanceDepartureEnumeration.rdoAttendanceDepartureYes.equals(attendanceDeparture))
			return ATTENDANCE_DEPARTURE_YES;
		return ATTENDANCE_DEPARTURE_NO;
	}

	@Override
	protected void onRadioButtongrpAttendanceDepartureValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlSate();
	}
	@Override
	protected void onCmbTrackingStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();		
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if( save())
			open();
	}

	private boolean save()
	{
		TrackingStatusWorkflowVo recordToSave = populateDataFromScreen((TrackingStatusWorkflowVo) form.getLocalContext().getlcSelectedRecord().clone());
		
		String[] err = recordToSave.validate();
		if (err != null && err.length > 0)
		{
			engine.showErrors(err);
			return false;
		}
		
		try 
		{
			
			recordToSave = domain.saveTrackingWorkflowStatus(recordToSave);
		}
		
		catch (StaleObjectException e) 
		{
			engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
			open();
			return false;
			
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showErrors(new String[] { "A Tracking Workflow Status Configuration already exists for this Tracking Status. The screen will be refreshed." });
			open();
			return false;
		}
		
		return true;
	}

	private TrackingStatusWorkflowVo populateDataFromScreen(TrackingStatusWorkflowVo record)
	{
		if(record == null)
			return null;
		
		record.setTrackingStatus(form.cmbTrackingStatus().getValue());
		record.setRecordsConclusionDateTime(getRecordsConclusionDateTime());
		record.setTriggersPreAdmissionPas(getPreAdmissionPas());
		record.setRecordsEdAttendanceDeparture(ATTENDANCE_DEPARTURE_YES == getAttendanceDeparture() ? true : false);
		
		record.setContinueDisplayInTracking(getContinueDisplay());
		record.setCreateNewCareContext(getNewContext());
		record.setDischargeOutcome(form.cmbOutcome().getVisible() ? form.cmbOutcome().getValue() : null);
		
		return record;
	}

	private Boolean getNewContext()
	{
		grpNewContextEnumeration newContext = form.grpNewContext().getValue();
		Boolean isVisible = form.pnlAttendanceDeparture().isVisible();
		if (isVisible && grpNewContextEnumeration.rdoNewContextYes.equals(newContext))
			return true;
		return false;
	}

	private Boolean getContinueDisplay()
	{
		grpContinueDisplayEnumeration continueDisplay = form.grpContinueDisplay().getValue();
		Boolean isVisible = form.pnlAttendanceDeparture().isVisible();					;
		
		if (isVisible && grpContinueDisplayEnumeration.rdoContinueDisplayYes.equals(continueDisplay))
			return true;
		return false;
	}

	private Boolean getPreAdmissionPas()
	{
		grpTrigersPreAdmissionEnumeration triggersPreAdmissionPas = form.grpTrigersPreAdmission().getValue();
		
		if (grpTrigersPreAdmissionEnumeration.rdoTrigersPreAdmissionYes.equals(triggersPreAdmissionPas))
			return true;
		return false;
	}

	private Boolean getRecordsConclusionDateTime()
	{
		grpRecordsConclusionEnumeration recordsConclusion = form.grpRecordsConclusion().getValue();

		if (grpRecordsConclusionEnumeration.rdoRecordsConclusionYes.equals(recordsConclusion))
			return true;
		return false;
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);		
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();		
	}

	private void newInstance()
	{
		form.getLocalContext().setlcSelectedRecord(new TrackingStatusWorkflowVo());
		form.setMode(FormMode.EDIT);
		clearInstanceDetails();
		updateControlSate();		
	}

	private void clearInstanceDetails()
	{
		form.grpRecordsConclusion().setValue(null);
		form.grpTrigersPreAdmission().setValue(null);
		form.grpAttendanceDeparture().setValue(null);
		form.grpContinueDisplay().setValue(null);
		form.grpNewContext().setValue(null);
		form.cmbOutcome().setValue(null);		
	}
}
