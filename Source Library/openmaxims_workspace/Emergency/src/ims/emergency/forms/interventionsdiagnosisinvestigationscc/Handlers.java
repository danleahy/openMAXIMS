//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.interventionsdiagnosisinvestigationscc;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddTreatmentNoteClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewTreatmentNotesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddInvestigationNoteClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewInvestigationNotesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoDiagnosesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkDiagnosesNotRecordedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdInterventionsTreatmentsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdInterventionsTreatmentsGridCheckBoxClicked(int column, GenForm.grdInterventionsTreatmentsRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoneInterventionsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdInvestigationsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoneInvestigationsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbViewNoKnownTreatmentsDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbViewNoKnownInvestigationsDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoKnownInterventionsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoKnownInvestigationsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDiagnosisSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnAddTreatmentNote().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddTreatmentNoteClick();
			}
		});
		this.form.btnViewTreatmentNotes().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewTreatmentNotesClick();
			}
		});
		this.form.btnAddInvestigationNote().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddInvestigationNoteClick();
			}
		});
		this.form.btnViewInvestigationNotes().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewInvestigationNotesClick();
			}
		});
		this.form.chkNoDiagnoses().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoDiagnosesValueChanged();
			}
		});
		this.form.chkDiagnosesNotRecorded().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkDiagnosesNotRecordedValueChanged();
			}
		});
		this.form.grdInterventionsTreatments().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdInterventionsTreatmentsSelectionChanged();
			}
		});
		this.form.grdInterventionsTreatments().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdInterventionsTreatmentsGridCheckBoxClicked(column, new GenForm.grdInterventionsTreatmentsRow(row), isChecked);
			}
		});
		this.form.chkNoneInterventions().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoneInterventionsValueChanged();
			}
		});
		this.form.grdInvestigations().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdInvestigationsSelectionChanged();
			}
		});
		this.form.chkNoneInvestigations().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoneInvestigationsValueChanged();
			}
		});
		this.form.imbViewNoKnownTreatmentsDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbViewNoKnownTreatmentsDetailsClick();
			}
		});
		this.form.imbViewNoKnownInvestigationsDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbViewNoKnownInvestigationsDetailsClick();
			}
		});
		this.form.chkNoKnownInterventions().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoKnownInterventionsValueChanged();
			}
		});
		this.form.chkNoKnownInvestigations().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoKnownInvestigationsValueChanged();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.grdDiagnosis().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiagnosisSelectionChanged();
			}
		});
		this.form.getContextMenus().Emergency.getInterventionsTreatmentsMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInterventionsTreatmentsMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInterventionsTreatmentsMenuMOVE_UPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.MOVE_UP, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInterventionsTreatmentsMenuMOVE_DOWNItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.MOVE_DOWN, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.ADD_TREATMENT_NOTE, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.VIEW_TREATMENT_NOTES, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuMOVE_UPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.MOVE_UP, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuMOVE_DOWNItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.MOVE_DOWN, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.ADD_INVESTIGATION_NOTE, sender);
			}
		});
		this.form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.VIEW_INVESTIGATION_NOTES, sender);
			}
		});
		this.form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuMOVE_UPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.MOVE_UP, sender);
			}
		});
		this.form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuMOVE_DOWNItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.MOVE_DOWN, sender);
			}
		});
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIComponentEngine engine;
	protected GenForm form;
}
