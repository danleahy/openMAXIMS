//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.interventionsdiagnosisinvestigationscc;

import ims.clinical.vo.lookups.TreatmentInterventionType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CSPrimaryDiagnosisShortVo;
import ims.core.vo.CodedDiagnosesForAttendanceVo;
import ims.core.vo.CodedDiagnosesForAttendanceVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientDiagnosisAtConsultationVo;
import ims.core.vo.PatientDiagnosisAtConsultationVoCollection;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInterventionsTreatmentsRow;
import ims.emergency.vo.AttendDiagInvTreatStatusVo;
import ims.emergency.vo.EmergencyAttendanceInvestigationCodingSequenceItemVo;
import ims.emergency.vo.EmergencyAttendanceInvestigationCodingSequenceItemVoCollection;
import ims.emergency.vo.EmergencyAttendanceInvestigationCodingVo;
import ims.emergency.vo.InterventionTreatmentDetailVo;
import ims.emergency.vo.InterventionTreatmentDetailVoCollection;
import ims.emergency.vo.InterventionsTreatmentsForAttendenceVo;
import ims.emergency.vo.InvestigationAttendenceDetailVo;
import ims.emergency.vo.InvestigationAttendenceDetailVoCollection;
import ims.emergency.vo.InvestigationsForAttendVo;
import ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVo;
import ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVoCollection;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.emergency.vo.enums.NoKnownSelectedEvent;
import ims.emergency.vo.lookups.AttendanceClinicalNoteType;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.vo.ValueObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.EDIT:
				
				//WDEV-17648
				if (form.getLocalContext().getInterventionSequenceChanged())
				{
					saveInterventionSequence();
					form.getLocalContext().setInterventionSequenceChanged(false);
				}
				
				editTreatmentIntervention();
			break;
		
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.REMOVE:
				removeInterventionTreatment();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.MOVE_UP:
				moveInterventionUp();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.MOVE_DOWN:
				moveInterventionDown();
			break;

			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.ADD_TREATMENT_NOTE: //WDEV-19058
				form.getGlobalContext().Emergency.setAttendanceClinicalNotes(null);
				engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.TREATMENT});
			break;
			
			
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.ADD:
				saveDiagnosisOrder();
				addDiagnose();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.EDIT:
				saveDiagnosisOrder();
				editDiagnose();
			break;
				
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.REMOVE:
				
				//WDEV-17648 if the sort order was changed, save the order, re-populate the grid and remove Diagnosis (doRie)
				if (form.getLocalContext().getDiagnosisSequenceChanged())
				{
					//PatientDiagnosisAtConsultationVo temoraryDiagnosis = form.grdDiagnosis().getValue();
					ValueObject temoraryDiagnosis = form.grdDiagnosis().getValue(); //WDEV-19239
		
					saveDiagnosisSequence();
					populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
		
					form.grdDiagnosis().setValue(temoraryDiagnosis);
					form.getLocalContext().setDiagnosisSequenceChanged(false);
				}
				
				removeDiagnose();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.MOVE_UP:
				moveDiagnosisForAttendancUp();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.MOVE_DOWN:
				moveDiagnosisForAttendancDown();
			break;

			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.ADD:
				saveInvestigationsOrder();
				addInvestigation();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.EDIT:
				saveInvestigationsOrder();
				editInvestigation();
			break;
				
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.REMOVE:
				saveInvestigationsOrder();
				removeInvestigation();
			break;
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.MOVE_UP:
				moveInvestigationsForAttendanceUp();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.MOVE_DOWN:
				moveInvestigationsForAttendanceDown();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.ADD_INVESTIGATION_NOTE: //WDEV-19057
				form.getGlobalContext().Emergency.setAttendanceClinicalNotes(null);
				engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.INVESTIGATION});
			break;
			
			//WDEV-19918 - MAXIMS 10.1.2
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.VIEW_INVESTIGATION_NOTES: //WDEV-19057
				engine.open(form.getForms().Emergency.ViewInvestigationInterventionNotesDialog, new Object[] {AttendanceClinicalNoteType.INVESTIGATION,form.getLocalContext().getPatient(),form.getLocalContext().getCareContext()}, "View Investigation Notes");
			break;
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.VIEW_TREATMENT_NOTES: //WDEV-19057
				engine.open(form.getForms().Emergency.ViewInvestigationInterventionNotesDialog, new Object[] {AttendanceClinicalNoteType.TREATMENT,form.getLocalContext().getPatient(),form.getLocalContext().getCareContext()}, "View Treatment Notes");
			break;
		}
	}

	//WDEV-17648
	private void saveDiagnosisOrder()
	{
		if (form.getLocalContext().getDiagnosisSequenceChanged())
		{
			saveDiagnosisSequence();
			form.getLocalContext().setDiagnosisSequenceChanged(false);
		}
	}

	//WDEV-17648
	private void saveInvestigationsOrder()
	{
		if (form.getLocalContext().getInvestigationsSequenceChanged())
		{
			saveInvestigationSequence();
			form.getLocalContext().setInvestigationsSequenceChanged(false);
		}
	}
	
	private void moveDiagnosisForAttendancDown() 
	{
		form.grdDiagnosis().moveDown();
		form.getLocalContext().setDiagnosisSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveDiagnosisForAttendancUp() 
	{
		form.grdDiagnosis().moveUp();
		form.getLocalContext().setDiagnosisSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInvestigationsForAttendanceDown() 
	{
		form.grdInvestigations().moveDown();
		form.getLocalContext().setInvestigationsSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInvestigationsForAttendanceUp() 
	{
		form.grdInvestigations().moveUp();
		form.getLocalContext().setInvestigationsSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInterventionDown() 
	{
		form.grdInterventionsTreatments().moveDown();
		form.getLocalContext().setInterventionSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInterventionUp() 
	{
		form.grdInterventionsTreatments().moveUp();
		form.getLocalContext().setInterventionSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void editTreatmentIntervention() 
	{
		if(form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence() == null)
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(createInterventionsTreatmentsForAttendence());
		}
		
		if(form.getLocalContext().getHcpUser() == null && Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			engine.open(form.getForms().Emergency.InterventionsTreatments, new Object[] {Boolean.TRUE});
		}
		else
		{
			engine.open(form.getForms().Emergency.InterventionsTreatments);
		}
	}
	
	private InterventionsTreatmentsForAttendenceVo createInterventionsTreatmentsForAttendence() 
	{
		InterventionsTreatmentsForAttendenceVo record = new InterventionsTreatmentsForAttendenceVo();
		
		record.setPatient(form.getLocalContext().getPatient());
		record.setEpisode(form.getLocalContext().getEpisodeOfCare());
		record.setAttendance(form.getLocalContext().getCareContext());
		
		return record;
	}
	
	private void removeInterventionTreatment() 
	{
		form.getLocalContext().setRemoveInterventionTreatmentMessageBoxId(engine.showMessage("Do you really want to delete the selected Intervention / Treatment?", "Confirm Intervention / Treatment Delete", MessageButtons.YESNO, MessageIcon.QUESTION));
	}
	
	private void removeDiagnose() 
	{
		if(form.grdDiagnosis().getValue() == null)
			return;
		
		form.getLocalContext().setRIERecord(form.grdDiagnosis().getValue());
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}
	
	private void editDiagnose()  //WDEV-19239
	{
		if(form.grdDiagnosis().getValue() != null && form.grdDiagnosis().getValue() instanceof PatientDiagnosisAtConsultationVo)
		{
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(domain.getPatientDiagnosis((PatientDiagnosisAtConsultationVo)form.grdDiagnosis().getValue()));
			
			if(form.getGlobalContext().Core.getPatientDiagnosisAtConsultation() == null)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
				populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
				resetPIDBarText();//WDEV-17334
				updateControlsState();//WDEV-17334
				return;
			}
			
			engine.open(form.getForms().Clinical.DiagnosisDialog, new Object[] {null,Boolean.FALSE}); //WDEV-21039
		}
		else if(form.grdDiagnosis().getValue() != null && form.grdDiagnosis().getValue() instanceof CodedDiagnosesForAttendanceVo)
		{
			form.getGlobalContext().Core.setCodedDiagnosesForAttendance(domain.getCodedDiagForAttendance((CodedDiagnosesForAttendanceVo)form.grdDiagnosis().getValue()));
			
			if(form.getGlobalContext().Core.getCodedDiagnosesForAttendance() == null)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(domain.listCodedDiagnosesForAttendance(form.getLocalContext().getCareContext(),false));
				populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
				resetPIDBarText();//WDEV-17334
				updateControlsState();//WDEV-17334
				return;
			}
			
			engine.open(form.getForms().Clinical.CodedDiagnosisForAttendanceDialog, new Object[] {null,Boolean.FALSE}); //WDEV-21039
		}
	}
	
	private void addDiagnose()  //WDEV-19239
	{
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(null);
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			if (form.getLocalContext().getHcpUserIsNotNull())
			{
				form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
				form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(null);
				engine.open(form.getForms().Clinical.DiagnosisDialog, new Object[] {Boolean.TRUE,Boolean.FALSE}); //WDEV-21039
			}
			else
			{
				form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(domain.listCodedDiagnosesForAttendance(form.getLocalContext().getCareContext(),false));
				form.getGlobalContext().Core.setCodedDiagnosesForAttendance(null);
				engine.open(form.getForms().Clinical.CodedDiagnosisForAttendanceDialog, new Object[] {Boolean.TRUE,Boolean.FALSE}); //WDEV-21039
			}
		}
		else
		{
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(null);
			engine.open(form.getForms().Clinical.DiagnosisDialog, new Object[] {null,Boolean.FALSE}); //WDEV-21039
		}
	}
	
	private void removeInvestigation() 
	{
		form.getLocalContext().setRemoveInvestigationMessageBoxId(engine.showMessage("Do you really want to delete the selected Investigation?", "Confirm Investigation Delete", MessageButtons.YESNO, MessageIcon.QUESTION));
	}
	
	private void editInvestigation() 
	{
		if(form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo)
		{
			form.getGlobalContext().Emergency.setInvestigationAttendenceDetail((InvestigationAttendenceDetailVo) form.grdInvestigations().getValue());
		
			engine.open(form.getForms().Emergency.InvestigationAttendenceDetailDialog);
		}
	}
	
	private void addInvestigation() 
	{
		InvestigationsForAttendVo invForAttend = form.getLocalContext().getSelectedInvestigationsForAttend();
		
		if(invForAttend == null)
		{
			invForAttend = new InvestigationsForAttendVo();
			invForAttend.setPatient(form.getLocalContext().getPatient());
			invForAttend.setEpisode(form.getLocalContext().getEpisodeOfCare());
			invForAttend.setAttendance(form.getLocalContext().getCareContext());
		}
		
		form.getGlobalContext().Emergency.setInvestigationsForAttend(invForAttend);
		
		InvestigationAttendenceDetailVo newInv = new InvestigationAttendenceDetailVo();
		
		if (form.getLocalContext().getHcpUser() == null)
			newInv.setAddedDuringCoding(form.getLocalContext().getAddedDuringCoding());
		
		form.getGlobalContext().Emergency.setInvestigationAttendenceDetail(newInv);
		
		engine.open(form.getForms().Emergency.InvestigationAttendenceDetailDialog);
	}

	public void initialize(ims.core.patient.vo.PatientRefVo patient, ims.core.admin.vo.EpisodeOfCareRefVo episode, ims.core.admin.vo.CareContextRefVo careContext, Boolean addedDuringCoding)
	{
		form.getLocalContext().setEmergencyInvestigationSequence(null);
		form.getLocalContext().setPatient(patient);
		form.getLocalContext().setEpisodeOfCare(episode);
		form.getLocalContext().setCareContext(careContext);
		form.getLocalContext().setIsEnabled(true);
		form.getLocalContext().setAddedDuringCoding(addedDuringCoding);
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486
		
		Object user = domain.getHcpLiteUser();
		if(user instanceof HcpLiteVo)
		{
			form.getLocalContext().setHcpUser((HcpLiteVo) user);
		}
		
		refresh();
	}

	private void updateControlsState() 
	{
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled())); //wdev-17637

		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuREMOVEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInterventionsTreatments().getValue() != null);
		
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuMOVE_DOWNItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInterventionsTreatments().getValue() != null 
				&& form.grdInterventionsTreatments().canMoveCurrentDown()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuMOVE_UPItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInterventionsTreatments().getValue() != null 
				&& form.grdInterventionsTreatments().canMoveCurrentUp()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		
		//WDEV-19239
		HcpLiteVo hcpUser = form.getLocalContext().getHcpUser();
		boolean showAddDiagnosisMenu = ((hcpUser!=null) || (hcpUser==null && Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding())));
		boolean showEditRemoveDiagnosisMenu =form.grdDiagnosis().getValue() != null && ((hcpUser!=null && form.grdDiagnosis().getValue() instanceof PatientDiagnosisAtConsultationVo) || (hcpUser==null && form.grdDiagnosis().getValue() instanceof CodedDiagnosesForAttendanceVo));
		
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuADDItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && showAddDiagnosisMenu);
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && showEditRemoveDiagnosisMenu);
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuREMOVEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && engine.hasRight(AppRight.ED_ATTENDENCE_NOTES_CAN_RIE_DIAGNOSIS) && showEditRemoveDiagnosisMenu); 

		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuMOVE_DOWNItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdDiagnosis().getValue() != null 
				&& form.grdDiagnosis().canMoveCurrentDown()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuMOVE_UPItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdDiagnosis().getValue() != null 
				&& form.grdDiagnosis().canMoveCurrentUp()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));

		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuADDItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo && ((InvestigationAttendenceDetailVo) form.grdInvestigations().getValue()).getOCSInvestigation() == null);
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuREMOVEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo && canInvestigationBeRemoved((InvestigationAttendenceDetailVo) form.grdInvestigations().getValue()));

		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuMOVE_DOWNItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() != null 
				&& form.grdInvestigations().canMoveCurrentDown()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuMOVE_UPItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() != null 
				&& form.grdInvestigations().canMoveCurrentUp()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		
		boolean bShowSaveCancel = false;
		if (Boolean.TRUE.equals(form.getLocalContext().getInterventionSequenceChanged()) //WDEV-18335
				|| Boolean.TRUE.equals(form.getLocalContext().getInvestigationsSequenceChanged())
				|| Boolean.TRUE.equals(form.getLocalContext().getDiagnosisSequenceChanged()))
			bShowSaveCancel = true;
			form.btnSave().setVisible(bShowSaveCancel);
			form.btnCancel().setVisible(bShowSaveCancel);
			form.btnSave().setEnabled(bShowSaveCancel);
			form.btnCancel().setEnabled(bShowSaveCancel);
		
		//WDEV-22814
		boolean enableCheckboxes = !ConfigFlag.UI.ED_DISABLE_INTERVENTIONS_DIAGNOSIS_INVESTIGATIONS_CHECKBOXES.getValue();
		
		//WDEV-19057
		form.chkNoKnownInvestigations().setEnabled(enableCheckboxes && form.grdInvestigations().getRows().size()==0 && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding())); 
		form.chkNoneInvestigations().setEnabled(enableCheckboxes && form.grdInvestigations().getRows().size()==0 && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));//WDEV-19918
		form.btnAddInvestigationNote().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));//WDEV-19918
		form.imbViewNoKnownInvestigationsDetails().setVisible(form.getLocalContext().getAttendDiagInvTreatStatus() != null && Boolean.TRUE.equals(form.getLocalContext().getAttendDiagInvTreatStatus().getInvestigationNotRecorded()) && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		
		//WDEV-19058
		form.chkNoKnownInterventions().setEnabled(enableCheckboxes && form.grdInterventionsTreatments().getRows().size()==0 && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding())); //WDEV-19058
		form.chkNoneInterventions().setEnabled(enableCheckboxes && form.grdInterventionsTreatments().getRows().size()==0 && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));//WDEV-19918
		form.btnAddTreatmentNote().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));//WDEV-19918
		form.imbViewNoKnownTreatmentsDetails().setVisible(form.getLocalContext().getAttendDiagInvTreatStatus() != null && Boolean.TRUE.equals(form.getLocalContext().getAttendDiagInvTreatStatus().getTreatmentsNotRecorded()) && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		
		form.chkDiagnosesNotRecorded().setEnabled(enableCheckboxes && form.grdDiagnosis().getRows().size() == 0 && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.chkNoDiagnoses().setEnabled(enableCheckboxes && form.grdDiagnosis().getRows().size() == 0 && !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		
		form.grdInterventionsTreatments().setReadOnly(false);
		
		//WDEV-19918 MAXIMS 10.1.2
		Boolean existInvestigationNotes =Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()) && form.getLocalContext().getPatient()!=null && form.getLocalContext().getCareContext()!=null ? domain.existAttendanceNotes(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext(), AttendanceClinicalNoteType.INVESTIGATION) : false;
		Boolean existTreatmentNotes =Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()) && form.getLocalContext().getPatient()!=null && form.getLocalContext().getCareContext()!=null ?  domain.existAttendanceNotes(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext(), AttendanceClinicalNoteType.TREATMENT) : false;
		
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem().setVisible(existInvestigationNotes && Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.btnViewInvestigationNotes().setVisible(existInvestigationNotes && Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem().setVisible(existTreatmentNotes && Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.btnViewTreatmentNotes().setVisible(existTreatmentNotes && Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
	}

	private boolean canInvestigationBeRemoved(InvestigationAttendenceDetailVo value)
	{
		if(value == null)
			return true;
		
		if(value.getOCSInvestigation() == null)
			return true;
		
		if(value.getOCSInvestigation().getOrdInvCurrentStatus() != null && OrderInvStatus.CANCELLED.equals(value.getOCSInvestigation().getOrdInvCurrentStatus().getOrdInvStatus()))
			return true;
		
		return false;
	}

	private void populateInterventionsTreatmentsGrid() 
	{
		form.chkNoneInterventions().setValue(form.getLocalContext().getAttendDiagInvTreatStatus() != null && Boolean.TRUE.equals(form.getLocalContext().getAttendDiagInvTreatStatus().getNoTreatments()));
		form.chkNoKnownInterventions().setValue(form.getLocalContext().getAttendDiagInvTreatStatus() != null && Boolean.TRUE.equals(form.getLocalContext().getAttendDiagInvTreatStatus().getTreatmentsNotRecorded())); 
		form.lblNoKnownInterventions().setTooltip(getNoKnownInterventionsTreatmentsDetails(form.getLocalContext().getAttendDiagInvTreatStatus()));
		
		form.grdInterventionsTreatments().getRows().clear();
		
		InterventionTreatmentDetailVoCollection coll = null;
		
		if(form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence() != null)
			coll = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence().getInterventionTreatments();
		
		if(coll == null || coll.size() == 0)
			return;
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
			coll.sort();

		for(InterventionTreatmentDetailVo intTreat : coll)
		{
			if(intTreat == null)
				continue;
			
			if(Boolean.FALSE.equals(form.getLocalContext().getAddedDuringCoding()) && Boolean.TRUE.equals(intTreat.getAddedDuringCoding()))
				continue;
			
			grdInterventionsTreatmentsRow row = null;
			if(Boolean.FALSE.equals(form.getLocalContext().getAddedDuringCoding()))
			{
				row = getSelectedParentRow(intTreat);
				if(row == null)
					return;
			}
			grdInterventionsTreatmentsRow childRow = null;

			if (row == null)
				childRow = form.grdInterventionsTreatments().getRows().newRow();
			else
				childRow = row.getRows().newRow();

			childRow.setColIntervention(intTreat.getTreatmentInterventionDescription());
			childRow.setColComplete(YesNo.YES.equals(intTreat.getInterventionTreatmentComplete()) ? true : false); //WDEV-19058
			childRow.setValue(intTreat);
		}
	}
	
	//WDEV-19058
	private String getNoKnownInterventionsTreatmentsDetails(AttendDiagInvTreatStatusVo attendDiagInvTreatStatus)
	{
		if (attendDiagInvTreatStatus == null || (attendDiagInvTreatStatus.getTreatmentReason() == null && attendDiagInvTreatStatus.getTreatmentReasonText() == null))
			return null;
		
		return "<b>Reason: </b>" + (attendDiagInvTreatStatus.getTreatmentReason() != null ? attendDiagInvTreatStatus.getTreatmentReason().getText()  : "" ) + "<br> <b>Comments: </b> " + attendDiagInvTreatStatus.getTreatmentReasonText();
	}

	private grdInterventionsTreatmentsRow getSelectedParentRow(InterventionTreatmentDetailVo intTreat) 
	{
		if(intTreat == null || intTreat.getTreatmentIntervention() == null)
			return null;
		
		for(int i=0; i<form.grdInterventionsTreatments().getRows().size(); i++)
		{
			grdInterventionsTreatmentsRow row = form.grdInterventionsTreatments().getRows().get(i);
			
			if(row.getValue() instanceof TreatmentInterventionType 
					&& row.getValue().equals(intTreat.getTreatmentIntervention().getTreatmentInterventionType()))
			{
				return row;
			}
		}
		
		grdInterventionsTreatmentsRow row = form.grdInterventionsTreatments().getRows().newRow();
		
		row.setColIntervention(intTreat.getTreatmentIntervention().getTreatmentInterventionType().getText());
		row.setColComplete(YesNo.YES.equals(intTreat.getInterventionTreatmentComplete()) ? true : false); //WDEV-19058
		row.setBold(true);
		row.setValue(intTreat.getTreatmentIntervention().getTreatmentInterventionType());
		row.setSelectable(false);
		row.setExpanded(true);
		
		return row;
	}
	
	private void populatePatientDiagnosisGrid(PatientDiagnosisAtConsultationVoCollection patientDiagnosisAtConsultationVoCollection) 
	{
		form.chkNoDiagnoses().setValue(form.getLocalContext().getAttendDiagInvTreatStatus() != null && Boolean.TRUE.equals(form.getLocalContext().getAttendDiagInvTreatStatus().getNoDiagnoses()));
		form.chkDiagnosesNotRecorded().setValue(form.getLocalContext().getAttendDiagInvTreatStatus() != null && Boolean.TRUE.equals(form.getLocalContext().getAttendDiagInvTreatStatus().getDiagnosesNotRecorded()));
		
		form.grdDiagnosis().getRows().clear();
		
		//WDEV-19239

		CodedDiagnosesForAttendanceVoCollection collCoddedDiag = Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()) ? domain.listCodedDiagnosesForAttendance(form.getLocalContext().getCareContext(), false) : null;
		form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(collCoddedDiag);
		
		if(patientDiagnosisAtConsultationVoCollection == null && collCoddedDiag ==null)
			return;
		
		ArrayList<Object> listAllDiag = new ArrayList<Object>();
		
		for(int i=0;patientDiagnosisAtConsultationVoCollection!=null && i<patientDiagnosisAtConsultationVoCollection.size();i++)
		{
			PatientDiagnosisAtConsultationVo diagnose = patientDiagnosisAtConsultationVoCollection.get(i);
			listAllDiag.add(diagnose);	
		}
		
		for(int i=0;collCoddedDiag!=null && i<collCoddedDiag.size();i++)
		{
			CodedDiagnosesForAttendanceVo codedDiag = collCoddedDiag.get(i);
			listAllDiag.add(codedDiag);
		}
		
		Collections.sort(listAllDiag, new CodingSequenceComparator(SortOrder.ASCENDING));
		
		for (int i=0;i<listAllDiag.size();i++)
		{
			if (listAllDiag.get(i)!=null && listAllDiag.get(i) instanceof PatientDiagnosisAtConsultationVo)
			{
				addPatientDiagRow((PatientDiagnosisAtConsultationVo)listAllDiag.get(i));
			}
			else if (listAllDiag.get(i)!=null && listAllDiag.get(i) instanceof CodedDiagnosesForAttendanceVo)
			{
				addCodedDiagRow((CodedDiagnosesForAttendanceVo)listAllDiag.get(i));
			}
		}

		//if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
			//patientDiagnosisAtConsultationVoCollection.sort();

		/*
		for(PatientDiagnosisAtConsultationVo diagnose : patientDiagnosisAtConsultationVoCollection)
		{
			addPatientDiagRow(diagnose);
		}
		
		for(CodedDiagnosesForAttendanceVo codedDiag : collCoddedDiag)
		{
			addCodedDiagRow(codedDiag);
		}	
		*/
	}
	
	//WDEV-19239
	private void addPatientDiagRow(PatientDiagnosisAtConsultationVo diagnose)
	{
		if(diagnose == null)
			return;
		
		String status = diagnose.getCurrentStatusIsNotNull()  ? diagnose.getCurrentStatus().getStatus().getText()+", " : "" ;//WDEV-22906
		ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
		row.setColDiagnose(status + diagnose.getDiagnosisDescription());
		
		boolean isPrimary = isPrimary(diagnose);
		row.setBold(isPrimary);
		
		row.setTooltipForColDiagnose(getTooltipForPatientDiagnose(diagnose,isPrimary)); //WDEV-21881
		
		if(isPrimary)
		{
			row.setColImage(form.getImages().Core.Pin);
			row.setTooltipForColImage("Main Diagnosis");
			form.getLocalContext().setPrimaryDiagnosis(diagnose);//WDEV-17320
		}
		
		row.setValue(diagnose);
	}

	//WDEV-21881
	private String getTooltipForPatientDiagnose(PatientDiagnosisAtConsultationVo diagnose, boolean isPrimary)
	{
		if (diagnose==null)
			return "";
		
		StringBuffer tooltip= new StringBuffer();
		
		tooltip.append(diagnose.getDiagnosisDescriptionIsNotNull() ? "<b>Description: </b>" +  diagnose.getDiagnosisDescription() : "");
		
		if (diagnose.getAuthoringInfoIsNotNull())
		{
			tooltip.append(diagnose.getAuthoringInfo().getAuthoringHcpIsNotNull() && diagnose.getAuthoringInfo().getAuthoringHcp().getMosIsNotNull() ? "<br><b>Authoring HCP: </b>" +  diagnose.getAuthoringInfo().getAuthoringHcp().getMos().getName() : "");
			tooltip.append(diagnose.getAuthoringInfo().getAuthoringHcpIsNotNull() && diagnose.getAuthoringInfo().getAuthoringDateTimeIsNotNull() ? "<br><b>Authoring Date/Time: </b>" +  diagnose.getAuthoringInfo().getAuthoringDateTime() : "");
		}
		
		tooltip.append(diagnose.getDiagLateralityIsNotNull() ? "<br><b>Laterality: </b>" +  diagnose.getDiagLaterality().getText() : "");
		tooltip.append(diagnose.getCurrentStatusIsNotNull() && diagnose.getCurrentStatus().getStatusIsNotNull() ? "<br><b>Status: </b>" +  diagnose.getCurrentStatus().getStatus().getText() : "");
		
		tooltip.append(isPrimary  ? "<br><b>Main Diagnosis </b>" : "");
		
		return tooltip!=null ? tooltip.toString() : null;
	}

	//WDEV-19239
	private void addCodedDiagRow(CodedDiagnosesForAttendanceVo codedDiag)
	{
		if(codedDiag == null)
			return;
		String status =codedDiag.getCurrentStatusIsNotNull()  ? codedDiag.getCurrentStatus().getStatus().getText()+ ", " : "";//WDEV-22906
		ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
		row.setColDiagnose(status + codedDiag.getDiagnosisDescription());
		row.setTooltipForColDiagnose(getTooltipForCodedDiagnose(codedDiag)); //WDEV-21881
		
		if(Boolean.TRUE.equals(codedDiag.getIsMain()))
		{
			row.setColImage(form.getImages().Core.Pin);
			row.setTooltipForColImage("Main Diagnosis");
			//form.getLocalContext().setPrimaryDiagnosis(diagnose);//WDEV-17320
			row.setBold(true);
		}
		
		row.setValue(codedDiag);
	}

	//WDEV-21881
	private String getTooltipForCodedDiagnose(CodedDiagnosesForAttendanceVo codedDiag)
	{
		if (codedDiag==null)
			return "";
		
		StringBuffer tooltip= new StringBuffer();
		
		tooltip.append(codedDiag.getDiagnosisDescriptionIsNotNull() ? "<b>Description: </b>" +  codedDiag.getDiagnosisDescription() : "");
		
		if (codedDiag.getRecordingInfoIsNotNull())
		{
			tooltip.append(codedDiag.getRecordingInfo().getRecordingUserIsNotNull()&& codedDiag.getRecordingInfo().getRecordingUser().getNameIsNotNull() ? "<br><b>Recording User: </b>" +  codedDiag.getRecordingInfo().getRecordingUser().getName() : "");
			tooltip.append(codedDiag.getRecordingInfo().getRecordingDateTimeIsNotNull() ? "<br><b>Recording Date/Time: </b>" +  codedDiag.getRecordingInfo().getRecordingDateTime() : "");
		}
		
		tooltip.append(codedDiag.getDiagLateralityIsNotNull() ? "<br><b>Laterality: </b>" +  codedDiag.getDiagLaterality().getText() : "");
		tooltip.append(codedDiag.getCurrentStatusIsNotNull() && codedDiag.getCurrentStatus().getStatusIsNotNull() ? "<br><b>Status: </b>" +  codedDiag.getCurrentStatus().getStatus().getText() : "");
		
		tooltip.append(Boolean.TRUE.equals(codedDiag.getIsMain())  ? "<br><b>Main Diagnosis </b>" : "");
		
		return tooltip!=null ? tooltip.toString() : null;
	}

	private boolean isPrimary(PatientDiagnosisAtConsultationVo diagnose) 
	{
		if(diagnose == null || diagnose.getPrimaryForCareSpells() == null || diagnose.getPrimaryForCareSpells().size() == 0)
			return false;
		
		for(CSPrimaryDiagnosisShortVo primary : diagnose.getPrimaryForCareSpells())
		{
			if(primary == null || primary.getCareContext() == null)
				continue;
			
			if(primary.getCareContext().equals(form.getLocalContext().getCareContext()) && Boolean.TRUE.equals(primary.getIsActive()))//WDEV-17356
				return true;
		}
		
		return false;
	}

	private void listAndPopulateInvestigationsGrid(PatientRefVo patient, CareContextRefVo careContext) 
	{
		form.lblNoKnownInvestigation().setTooltip(getInvestigationsNotRecordedDetails(form.getLocalContext().getAttendDiagInvTreatStatus())); 
		form.chkNoKnownInvestigations().setValue(form.getLocalContext().getAttendDiagInvTreatStatus() != null ? form.getLocalContext().getAttendDiagInvTreatStatus().getInvestigationNotRecorded() : null);
		form.chkNoneInvestigations().setValue(form.getLocalContext().getAttendDiagInvTreatStatus() != null ? form.getLocalContext().getAttendDiagInvTreatStatus().getNoInvestigations() : null);
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			EmergencyAttendanceInvestigationCodingVo investigationSequenceVo = domain.getInvestigationSequence(form.getLocalContext().getCareContext());
			if (investigationSequenceVo != null 
				&& investigationSequenceVo.getInvestigationSequenceCodingItemsIsNotNull())
			{
				form.getLocalContext().setEmergencyInvestigationSequence(investigationSequenceVo);
				showOrderedInvestigations(patient, careContext, investigationSequenceVo);
				return;
			}
		}
		
		String orderInvestigationIDSAlreadyAdded = populateInvestigationsGrid();
		
		OrderInvestigationForAttendenceNotesCcVoCollection orderInvestigations = domain.listOrderInvestigations(patient, careContext, orderInvestigationIDSAlreadyAdded);
		if(createAndSaveInvestigationsAttendenceDetail(orderInvestigations))
		{
			refresh();
		}
		
		if(form.grdInvestigations().getRows().size() > 0 && (form.chkNoKnownInvestigations().getValue() || form.chkNoneInvestigations().getValue()))//workaround when OrderInvestigations are created outside Emergency module
		{
			saveAttendDiagInvTreatStatus(false, false, null, null, null, null);
			refresh();
			return;
		}
	}

	private String populateInvestigationsGrid()
	{
		form.grdInvestigations().getRows().clear();
		
		String orderInvestigationIDSAlreadyAdded = "";
		
		InvestigationsForAttendVo investigationsForAttend = domain.getInvestigationsForAttend(form.getLocalContext().getCareContext());
		
		form.getLocalContext().setSelectedInvestigationsForAttend(investigationsForAttend);
		
		if(investigationsForAttend != null && investigationsForAttend.getInvestigations() != null)
		{
			for(InvestigationAttendenceDetailVo inv : investigationsForAttend.getInvestigations())
			{
				if(inv == null)
					continue;
				
				if(inv.getOCSInvestigation() != null)
				{
					orderInvestigationIDSAlreadyAdded += (orderInvestigationIDSAlreadyAdded.length() > 0 ? "," : "") + inv.getOCSInvestigation().getID_OrderInvestigation();
				}
				
				if(Boolean.FALSE.equals(form.getLocalContext().getAddedDuringCoding()) && Boolean.TRUE.equals(inv.getAddedDuringCoding()))
					continue;
				
				if(!Boolean.TRUE.equals(inv.getActive()))
					continue;
				
				ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = form.grdInvestigations().getRows().newRow();
				row.setColInvestigation(getInvestigationText(inv));
				row.setValue(inv);
			}
		}
		
		return orderInvestigationIDSAlreadyAdded.length() > 0 ? orderInvestigationIDSAlreadyAdded : null;
	}

	private String getInvestigationText(InvestigationAttendenceDetailVo inv)
	{
		if(inv == null)
			return null;
		
		if(inv.getOCSInvestigation() != null)
			return inv.getOCSInvestigation().getInvestigation().getInvestigationIndex().getName();
		
		return inv.getAttendenceInvestigation() != null ? inv.getAttendenceInvestigation().getText() : null;
	}

	private boolean createAndSaveInvestigationsAttendenceDetail(OrderInvestigationForAttendenceNotesCcVoCollection orderInvestigations)
	{
		if(orderInvestigations == null || orderInvestigations.size() == 0)
			return false;
		
		InvestigationsForAttendVo invForAtt = form.getLocalContext().getSelectedInvestigationsForAttend();
		if(invForAtt == null)
		{
			invForAtt = new InvestigationsForAttendVo();
			invForAtt.setPatient(form.getLocalContext().getPatient());
			invForAtt.setEpisode(form.getLocalContext().getEpisodeOfCare());
			invForAtt.setAttendance(form.getLocalContext().getCareContext());
		}
		
		if(invForAtt.getInvestigations() == null)
		{
			invForAtt.setInvestigations(new InvestigationAttendenceDetailVoCollection());
		}
		
		for(OrderInvestigationForAttendenceNotesCcVo inv : orderInvestigations)
		{
			invForAtt.getInvestigations().add(createInvestigationAttendanceDetails(inv));
		}
		
		String[] errors = invForAtt.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedInvestigationsForAttend(domain.save(invForAtt));
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			refresh();
			return false;
		}
		
		return true;
	}

	private InvestigationAttendenceDetailVo createInvestigationAttendanceDetails(OrderInvestigationForAttendenceNotesCcVo inv)
	{
		InvestigationAttendenceDetailVo newInvAtt = new InvestigationAttendenceDetailVo();
		newInvAtt.setActive(true);
		
		AuthoringInformationVo auth = new AuthoringInformationVo();
		auth.setAuthoringHcp(form.getLocalContext().getHcpUser());
		auth.setAuthoringDateTime(new DateTime());
		
		newInvAtt.setAuthoringInformation(auth);
		
		if (form.getLocalContext().getHcpUser() == null)
			newInvAtt.setAddedDuringCoding(form.getLocalContext().getAddedDuringCoding());
		
		newInvAtt.setOCSInvestigation(inv);
		
		return newInvAtt;
	}

	//WDEV-19057
	private String getInvestigationsNotRecordedDetails(AttendDiagInvTreatStatusVo attendDiagInvTreatStatus)
	{
		if (attendDiagInvTreatStatus==null || (attendDiagInvTreatStatus.getInvestigationReason() == null && attendDiagInvTreatStatus.getInvestigationReasonText() == null))
			return null;
		
		return "<b>Reason: </b>" + (attendDiagInvTreatStatus.getInvestigationReason() != null ? attendDiagInvTreatStatus.getInvestigationReason().getText()  : "" ) + "<br> <b>Comments: </b> " + attendDiagInvTreatStatus.getInvestigationReasonText();
	}
	
	private void showOrderedInvestigations(PatientRefVo patient, CareContextRefVo careContext, EmergencyAttendanceInvestigationCodingVo investigationSequenceVo)
	{
		String orderInvestigationIDSAlreadyAdded = populateOrderedInvestigationsGrid(investigationSequenceVo);
		
		/*OrderInvestigationForAttendenceNotesCcVoCollection orderInvestigations = domain.listOrderInvestigations(patient, careContext, orderInvestigationIDSAlreadyAdded);
		if(createAndSaveInvestigationsAttendenceDetail(orderInvestigations))
		{
			populateOrderedInvestigationsGrid(investigationSequenceVo);
		}
		
		if(form.grdInvestigations().getRows().size() > 0 && (form.chkNoKnownInvestigations().getValue() || form.chkNoneInvestigations().getValue()))//workaround when OrderInvestigations are created outside Emergency module
		{
			saveAttendDiagInvTreatStatus(false, false, null, null, null, null);
			refresh();
			return;
		}
		*/
	}

	private String populateOrderedInvestigationsGrid(EmergencyAttendanceInvestigationCodingVo investigationSequenceVo)
	{
		form.grdInvestigations().getRows().clear();
		
		String orderInvestigationIDSAlreadyAdded = "";
		
		InvestigationsForAttendVo investigationsForAttend = domain.getInvestigationsForAttend(form.getLocalContext().getCareContext());
		form.getLocalContext().setSelectedInvestigationsForAttend(investigationsForAttend);
		
		if (investigationSequenceVo != null && investigationSequenceVo.getInvestigationSequenceCodingItemsIsNotNull())
		{
			investigationSequenceVo.getInvestigationSequenceCodingItems().sort();
			
			for (int i = 0 ; i < investigationSequenceVo.getInvestigationSequenceCodingItems().size(); i++)
			{
				ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = null;
				//Look in emergencyInvColl and see if the record for investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getEmergencyInvestigation()
				if (investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getEmergencyInvestigationIsNotNull())
				{
					if(investigationsForAttend != null && investigationsForAttend.getInvestigations() != null)
					for(InvestigationAttendenceDetailVo inv : investigationsForAttend.getInvestigations())
					{
						if(inv == null)
							continue;
						
						if (investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getEmergencyInvestigation().equals(inv))
						{
							if(Boolean.TRUE.equals(inv.getActive()))
							{
								row = form.grdInvestigations().getRows().newRow();
								row.setColInvestigation(getInvestigationText(inv));
								row.setValue(inv);
							}
							
							if(inv.getOCSInvestigation() != null)
							{
								orderInvestigationIDSAlreadyAdded += (orderInvestigationIDSAlreadyAdded.length() > 0 ? "," : "") + inv.getOCSInvestigation().getID_OrderInvestigation();
							}
						}
					}
				}
			}
		}
		
		if(investigationsForAttend != null && investigationsForAttend.getInvestigations() != null)
		{
			for(InvestigationAttendenceDetailVo inv : investigationsForAttend.getInvestigations())
			{
				if(inv == null)
					continue;

				boolean bFound = false;
				for (int findInv = 0 ; findInv < form.grdInvestigations().getRows().size() ; findInv++ )
				{
					if (form.grdInvestigations().getRows().get(findInv).getValue() instanceof InvestigationAttendenceDetailVo
						&& form.grdInvestigations().getRows().get(findInv).getValue().equals(inv) )
						bFound = true;
				}
				if (!bFound)
				{
					if(Boolean.TRUE.equals(inv.getActive()))
					{
						ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = form.grdInvestigations().getRows().newRowAt(0);
						row.setColInvestigation(getInvestigationText(inv));
						row.setValue(inv);
					}
					
					if(inv.getOCSInvestigation() != null)
					{
						orderInvestigationIDSAlreadyAdded += (orderInvestigationIDSAlreadyAdded.length() > 0 ? "," : "") + inv.getOCSInvestigation().getID_OrderInvestigation();
					}
				}
			}
		}
		
		return orderInvestigationIDSAlreadyAdded;
	}

	public void setEnabled(Boolean value)
	{
		form.getLocalContext().setIsEnabled(value);
		updateControlsState();
	}

	public void clear()
	{
		form.getLocalContext().setPatient(null);
		form.getLocalContext().setEpisodeOfCare(null);
		form.getLocalContext().setCareContext(null);
		form.getLocalContext().setRIERecord(null);
		form.grdInterventionsTreatments().getRows().clear();
		form.grdDiagnosis().getRows().clear();
		form.grdInvestigations().getRows().clear();
		form.chkNoKnownInvestigations().setValue(null);//WDEV-19057
		form.chkNoneInvestigations().setValue(null);
		
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
			refresh();
		}
		
		if(formName.equals(form.getForms().Emergency.InterventionsTreatments))
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
			refresh();
			
			if (form.getLocalContext().getAddedDuringCoding()
				&& ! form.getLocalContext().getInvestigationsSequenceChanged()
				&& ! form.getLocalContext().getDiagnosisSequenceChanged()
				&& ! form.getLocalContext().getInterventionSequenceChanged())
			{
				form.getLocalContext().setInterventionSequenceChanged(true);//wdev-17486
				saveOrder();
			}
		}
		
		if(formName.equals(form.getForms().Clinical.DiagnosisDialog) && result.equals(DialogResult.OK))
		{
			if(saveDiagnosis())
			{
				refresh();
				
				if (form.getLocalContext().getAddedDuringCoding()
					&& ! form.getLocalContext().getInvestigationsSequenceChanged()
					&& ! form.getLocalContext().getDiagnosisSequenceChanged()
					&& ! form.getLocalContext().getInterventionSequenceChanged())
				{
					form.getLocalContext().setDiagnosisSequenceChanged(true);//wdev-17486
					saveOrder();
				}
			}
		}
		
		//WDEV-19239
		if(formName.equals(form.getForms().Clinical.CodedDiagnosisForAttendanceDialog) && result.equals(DialogResult.OK))
		{
			if(saveCodedDiagnosis())
			{
				refresh();
				
				if (form.getLocalContext().getAddedDuringCoding()
					&& ! form.getLocalContext().getInvestigationsSequenceChanged()
					&& ! form.getLocalContext().getDiagnosisSequenceChanged()
					&& ! form.getLocalContext().getInterventionSequenceChanged())
				{
					form.getLocalContext().setDiagnosisSequenceChanged(true);//wdev-17486
					saveOrder();
				}
			}
		}
		
		if(formName.equals(form.getForms().Emergency.InvestigationAttendenceDetailDialog))
		{
			refresh();
			if (form.getLocalContext().getAddedDuringCoding()
				&& ! form.getLocalContext().getInvestigationsSequenceChanged()
				&& ! form.getLocalContext().getDiagnosisSequenceChanged()
				&& ! form.getLocalContext().getInterventionSequenceChanged())
			{
				form.getLocalContext().setInvestigationsSequenceChanged(true);//wdev-17486
				saveOrder();
			}
		}
		
		//WDEV-19057
		if(formName.equals(form.getForms().Emergency.NotKnownDetails))
		{
			refresh();
		}
		
		//WDEV-19058
		if(formName.equals(form.getForms().Emergency.AttendanceClinicalNoteDialog) && DialogResult.OK.equals(result))
		{
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.REFRESH);
			form.fireCustomControlValueChanged();	
		}
		else
		{
			//WDEV-17337
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
			form.fireCustomControlValueChanged();
		}
		
		updateControlsState();
		resetPIDBarText();//WDEV-17320
	}
	
	//WDEV-19239
	private boolean saveCodedDiagnosis()
	{
		CodedDiagnosesForAttendanceVoCollection codedDiagList = form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList();
		
		String[] errors = codedDiagList.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(domain.saveCodedDiagnosis(codedDiagList));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(domain.listCodedDiagnosesForAttendance(form.getLocalContext().getCareContext(), false));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
			return false;
		}
		
		return true;
	}

	//WDEV-17320
	private void resetPIDBarText()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null
			|| (form.getLocalContext().getPrimaryDiagnosis()!=null && (form.getLocalContext().getPrimaryDiagnosis().getPrimaryForCareSpells() == null
					|| (form.getLocalContext().getPrimaryDiagnosis().getPrimaryForCareSpellsIsNotNull()
					&& form.getLocalContext().getPrimaryDiagnosis().getPrimaryForCareSpells().size() == 0) )))
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getLocalContext().getCareContext(), form.getGlobalContext().Core.getEpisodeofCareShort()));
		form.getLocalContext().setPrimaryDiagnosis(null);
	}
	
	private void doRIE() 
	{
		boolean isStale = false;
		
		if(domain.isStaleOnDiagnosis(form.getLocalContext().getRIERecord())) //WDEV-19239
		{
			isStale = true;
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try 
		{
			domain.markAsRie(form.getLocalContext().getRIERecord(), engine.getFormName(), form.getLocalContext().getPatient().getID_Patient(), null, form.getLocalContext().getCareContext().getID_CareContext(), form.getGlobalContext().Core.getRieMessage());
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
	
	private boolean saveDiagnosis() 
	{
		PatientDiagnosisAtConsultationVoCollection diagnosisList = form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList();
		
		String[] errors = diagnosisList.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.saveDiagnosis(diagnosisList, !Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()) ? form.getLocalContext().getCareContext() : null));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
			return false;
		}
		
		return true;
	}
	
	private void saveInterventionSequence() 
	{
		InterventionsTreatmentsForAttendenceVo record = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence();
		
		if(record == null || record.getInterventionTreatments() == null || record.getInterventionTreatments().size() == 0)
			return;
		
		//Need to save the sequence of Interventions
		for (int i = 0 ; i < form.grdInterventionsTreatments().getRows().size() ; i++)
		{
			InterventionTreatmentDetailVo interventionVo = (InterventionTreatmentDetailVo)form.grdInterventionsTreatments().getRows().get(i).getValue();
			
			interventionVo.setCodingSequence(i);
			
			record.getInterventionTreatments().set(record.getInterventionTreatments().indexOf(interventionVo), interventionVo);
		}
		String[] errors = record.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
		}
			
		try 
		{
			domain.save(record, null, form.getLocalContext().getAddedDuringCoding());
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getRemoveInterventionTreatmentMessageBoxId() != null && messageBoxId == form.getLocalContext().getRemoveInterventionTreatmentMessageBoxId())
		{
			if(DialogResult.YES.equals(result))
			{
				if(removeTreatmentIntervention())
					refresh();
			}
		}
		else if(form.getLocalContext().getRemoveInvestigationMessageBoxId() != null && messageBoxId == form.getLocalContext().getRemoveInvestigationMessageBoxId())
		{
			if(DialogResult.YES.equals(result))
			{
				if(doRemoveInvestigation())
					refresh();
			}
		}
	}

	//WDEV-19057
	private boolean saveAttendDiagInvTreatStatus(Boolean noInvestigations, Boolean investigationsNotRecorded, Boolean noDiagnosis, Boolean diagnosisNotRecorded, Boolean noInterventions, Boolean interventionsNotRecorded)
	{
		AttendDiagInvTreatStatusVo attendDiaginvTreat = populateAttendDiagInvTreatStatus(noInvestigations, investigationsNotRecorded, noDiagnosis, diagnosisNotRecorded, noInterventions, interventionsNotRecorded);
		
		String[] errros = attendDiaginvTreat.validate();
		
		if(errros != null && errros.length > 0)
		{
			engine.showErrors(errros);
			return false;
		}
		
		try 
		{
			domain.saveAttendDiagInvTreatStatus(attendDiaginvTreat);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			refresh();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		
		return true;
	}

	private AttendDiagInvTreatStatusVo populateAttendDiagInvTreatStatus(Boolean noInvestigations, Boolean investigationsNotRecorded, Boolean noDiagnosis, Boolean diagnosisNotRecorded, Boolean noInterventions, Boolean interventionsNotRecorded)
	{
		AttendDiagInvTreatStatusVo attendDiaginvTreat = form.getLocalContext().getAttendDiagInvTreatStatus();
		
		boolean checkboxesEnabled = !ConfigFlag.UI.ED_DISABLE_INTERVENTIONS_DIAGNOSIS_INVESTIGATIONS_CHECKBOXES.getValue();
		
		if(attendDiaginvTreat == null)
		{
			attendDiaginvTreat = new AttendDiagInvTreatStatusVo();
			attendDiaginvTreat.setPatient(form.getLocalContext().getPatient());
			attendDiaginvTreat.setEpisode(form.getLocalContext().getEpisodeOfCare());
			attendDiaginvTreat.setAttendance(form.getLocalContext().getCareContext());
		}
		
		if(noInvestigations != null || investigationsNotRecorded != null)
		{
			attendDiaginvTreat.setInvestigationReason(null);
			attendDiaginvTreat.setInvestigationReasonText(null);
			
			if (checkboxesEnabled)
			{
				attendDiaginvTreat.setInvestigationNotRecorded(investigationsNotRecorded);
				attendDiaginvTreat.setNoInvestigations(noInvestigations);
			}
		}
		
		if(checkboxesEnabled && (noDiagnosis != null || diagnosisNotRecorded != null))
		{
			attendDiaginvTreat.setNoDiagnoses(noDiagnosis);
			attendDiaginvTreat.setDiagnosesNotRecorded(diagnosisNotRecorded);
		}
		
		if(noInterventions != null || interventionsNotRecorded != null)
		{
			attendDiaginvTreat.setTreatmentReason(null);
			attendDiaginvTreat.setTreatmentReasonText(null);
			
			if (checkboxesEnabled)
			{
				attendDiaginvTreat.setTreatmentsNotRecorded(interventionsNotRecorded);
				attendDiaginvTreat.setNoTreatments(noInterventions);
			}
		}
		
		return attendDiaginvTreat;
	}
	
	private boolean removeTreatmentIntervention() 
	{
		InterventionsTreatmentsForAttendenceVo record = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence();
		
		if(record == null || record.getInterventionTreatments() == null || record.getInterventionTreatments().size() == 0)
			return false;
		
		if(!(form.grdInterventionsTreatments().getValue() instanceof InterventionTreatmentDetailVo))
			return false;
		
		//WDEV-17648 if the sequence was changed, do an update
		if (form.getLocalContext().getInterventionSequenceChanged())
		{
			for (int x = 0; x < form.grdInterventionsTreatments().getRows().size(); x++)
			{
				InterventionTreatmentDetailVo interventionVo = (InterventionTreatmentDetailVo) form.grdInterventionsTreatments().getRows().get(x).getValue();
				interventionVo.setCodingSequence(x);
				record.getInterventionTreatments().set(record.getInterventionTreatments().indexOf(interventionVo), interventionVo);
			}
			
			form.getLocalContext().setInterventionSequenceChanged(false);
		}
		
		InterventionTreatmentDetailVo treatmenttoRemove = (InterventionTreatmentDetailVo) form.grdInterventionsTreatments().getValue();
		
		record.getInterventionTreatments().remove(treatmenttoRemove);	
		
		String[] errors = record.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.save(record, ((record.getInterventionTreatments() == null || record.getInterventionTreatments().size() == 0) ? populateAttendDiagInvTreatStatus(null, null, null, null, false, true) : null), form.getLocalContext().getAddedDuringCoding()));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
			populateInterventionsTreatmentsGrid();
			return false;
		}
		
		return true;
	}
	
	private boolean doRemoveInvestigation() 
	{
		if(form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo)
		{
			InvestigationAttendenceDetailVo record = (InvestigationAttendenceDetailVo) form.grdInvestigations().getValue();
			record.setActive(false);
			
			String[] errors = record.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			
			try 
			{
				domain.inactivateInvestigationAttendenceDetail(record, (form.grdInvestigations().getRows().size() == 1 ? populateAttendDiagInvTreatStatus(false, true, null, null, null, null) : null));
			} 
			catch (StaleObjectException e) 
			{
				e.printStackTrace();
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return false;
			}
			
			return true;
		}
		
		return false;
	}

	@Override
	protected void onGrdInterventionsTreatmentsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onGrdInvestigationsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onGrdDiagnosisSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	public void refresh() 
	{
		form.getLocalContext().setAttendDiagInvTreatStatus(form.getLocalContext().getCareContext() != null ? domain.getAttendDiagInvTreatStatus(form.getLocalContext().getCareContext()) : null);
		
		if(form.getLocalContext().getCareContext() != null)
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
			populateInterventionsTreatmentsGrid();
		
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
		
			if(form.getLocalContext().getPatient() != null)
			{
				listAndPopulateInvestigationsGrid(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());
			}
		}
		
		resetPIDBarText();//WDEV-17320
		updateControlsState();
	}
	
	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		saveOrder();
	}

	private void saveOrder()
	{
		if (form.getLocalContext().getInvestigationsSequenceChanged())
			saveInvestigationSequence();
		
		if (form.getLocalContext().getDiagnosisSequenceChanged())
			saveDiagnosisSequence();

		if (form.getLocalContext().getInterventionSequenceChanged())
			saveInterventionSequence();
		
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486

		refresh();
	}

	private void saveInvestigationSequence()
	{
		EmergencyAttendanceInvestigationCodingSequenceItemVoCollection invColl = new EmergencyAttendanceInvestigationCodingSequenceItemVoCollection();
		
		EmergencyAttendanceInvestigationCodingVo voEmergencyAttendanceInvestigationCoding = form.getLocalContext().getEmergencyInvestigationSequence();
		if ( voEmergencyAttendanceInvestigationCoding == null)
			voEmergencyAttendanceInvestigationCoding = new EmergencyAttendanceInvestigationCodingVo();
		
		voEmergencyAttendanceInvestigationCoding.setCareContext(form.getLocalContext().getCareContext());
		for (int gridIndex = 0 ; gridIndex < form.grdInvestigations().getRows().size() ; gridIndex++)
		{
			EmergencyAttendanceInvestigationCodingSequenceItemVo voSeq = new EmergencyAttendanceInvestigationCodingSequenceItemVo();
			
			if (form.grdInvestigations().getRows().get(gridIndex).getValue() instanceof InvestigationAttendenceDetailVo)
			{
				voSeq.setEmergencyInvestigation((InvestigationAttendenceDetailVo)form.grdInvestigations().getRows().get(gridIndex).getValue());
				voSeq.setOrderInvestigation(null);
			}
			if (form.grdInvestigations().getRows().get(gridIndex).getValue() instanceof OrderInvestigationForAttendenceNotesCcVo)
			{
				voSeq.setEmergencyInvestigation(null);
				voSeq.setOrderInvestigation(((OrderInvestigationForAttendenceNotesCcVo)form.grdInvestigations().getRows().get(gridIndex).getValue()).getID_OrderInvestigation());
			}
			
			voSeq.setCodingSequence(gridIndex);
				
			invColl.add(voSeq);
		}
		voEmergencyAttendanceInvestigationCoding.setInvestigationSequenceCodingItems(invColl);
		String[] errors = voEmergencyAttendanceInvestigationCoding.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			domain.saveInvestigationSequence(voEmergencyAttendanceInvestigationCoding);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			listAndPopulateInvestigationsGrid(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());
		}
		
	}

	//WDEV-19239
	private void saveDiagnosisSequence() 
	{
		if (form.grdDiagnosis().getRows().size()==0)
			return;
		
		PatientDiagnosisAtConsultationVoCollection diagnosisList=new PatientDiagnosisAtConsultationVoCollection();
		CodedDiagnosesForAttendanceVoCollection codedDiagnosisList=new CodedDiagnosesForAttendanceVoCollection();
		
		
		for (int gridIndex = 0 ; gridIndex < form.grdDiagnosis().getRows().size() ; gridIndex++)
		{
			ValueObject diag = form.grdDiagnosis().getRows().get(gridIndex).getValue();
			
			if (diag!=null && diag instanceof PatientDiagnosisAtConsultationVo)
			{
				PatientDiagnosisAtConsultationVo patDiag = (PatientDiagnosisAtConsultationVo) diag;
				patDiag.setCodingSequence(gridIndex);
				diagnosisList.add(patDiag);
			}
			else if (diag!=null && diag instanceof CodedDiagnosesForAttendanceVo)
			{
				CodedDiagnosesForAttendanceVo codedDiag = (CodedDiagnosesForAttendanceVo) diag;
				codedDiag.setCodingSequence(gridIndex);
				codedDiagnosisList.add(codedDiag);
			}
		}
		
		String[] errors = diagnosisList.validate(codedDiagnosisList.validate());
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.saveDiagnosisSequence(diagnosisList, codedDiagnosisList,form.getLocalContext().getCareContext()));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
		}
		
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486
		refresh();
	}

	//WDEV-19057
	@Override
	protected void onChkNoKnownInvestigationsValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setNoKnownSelectedEvent(NoKnownSelectedEvent.INVESTIGATION);
		if (form.chkNoKnownInvestigations().getValue())
		{
			engine.open(form.getForms().Emergency.NotKnownDetails, new Object[] {form.getLocalContext().getPatient(), form.getLocalContext().getEpisodeOfCare(), form.getLocalContext().getCareContext(),NoKnownSelectedEvent.INVESTIGATION, FormMode.EDIT} , "Investigations Not Recorded");
		}
		else 
		{
			if(saveAttendDiagInvTreatStatus(false, false, null, null, null, null))
				refresh();
		}
	}

	//WDEV-19058
	@Override
	protected void onChkNoKnownInterventionsValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setNoKnownSelectedEvent(NoKnownSelectedEvent.INTERVENTION);
		if (form.chkNoKnownInterventions().getValue())
		{
			engine.open(form.getForms().Emergency.NotKnownDetails, new Object[] {form.getLocalContext().getPatient(), form.getLocalContext().getEpisodeOfCare(), form.getLocalContext().getCareContext(),NoKnownSelectedEvent.INTERVENTION, FormMode.EDIT} , "Interventions/Treatments Not Recorded");
		}
		else 		
		{
			if(saveAttendDiagInvTreatStatus(null, null, null, null, false, false))
				refresh();
		}
	}

	//WDEV-19058
	@Override
	protected void onGrdInterventionsTreatmentsGridCheckBoxClicked(int column, grdInterventionsTreatmentsRow row, boolean isChecked) throws PresentationLogicException
	{
		if (saveTreatmentIntervention(row,isChecked))
			refresh();
	}

	//WDEV-19058
	private boolean saveTreatmentIntervention(grdInterventionsTreatmentsRow row, boolean isChecked) 
	{
		InterventionTreatmentDetailVo interventionTreatToSave = (InterventionTreatmentDetailVo) row.getValue();
		interventionTreatToSave.setInterventionTreatmentComplete(isChecked ? YesNo.YES : YesNo.NO );
		
		String[] errors = interventionTreatToSave.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			domain.saveInterventionTreatmentDetailVo(interventionTreatToSave);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			refresh();
			return false;
		} 
		
		return true;
	}
	
	//WDEV-19058
	@Override
	protected void onBtnAddTreatmentNoteClick() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(null);
		engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.TREATMENT});
	}

	//WDEV-19057
	@Override
	protected void onBtnAddInvestigationNoteClick() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(null);
		engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.INVESTIGATION});
	}

	//WDEV-19058
	@Override
	protected void onImbViewNoKnownTreatmentsDetailsClick() throws PresentationLogicException
	{
		form.getLocalContext().setNoKnownSelectedEvent(NoKnownSelectedEvent.INTERVENTION);
		engine.open(form.getForms().Emergency.NotKnownDetails, new Object[] {form.getLocalContext().getPatient(), form.getLocalContext().getEpisodeOfCare(), form.getLocalContext().getCareContext(),NoKnownSelectedEvent.INTERVENTION, FormMode.VIEW} , "Interventions/Treatments Not Recorded");
	}

	//WDEV-19057
	@Override
	protected void onImbViewNoKnownInvestigationsDetailsClick() throws PresentationLogicException
	{
		form.getLocalContext().setNoKnownSelectedEvent(NoKnownSelectedEvent.INVESTIGATION);
		engine.open(form.getForms().Emergency.NotKnownDetails, new Object[] {form.getLocalContext().getPatient(), form.getLocalContext().getEpisodeOfCare(), form.getLocalContext().getCareContext(),NoKnownSelectedEvent.INVESTIGATION, FormMode.VIEW} , "Investigations Not Recorded");
	}

	@Override
	protected void onChkNoneInterventionsValueChanged() throws PresentationLogicException
	{
		if(saveAttendDiagInvTreatStatus(null, null, null, null, form.chkNoneInterventions().getValue(), false))
			refresh();
	}

	@Override
	protected void onChkNoneInvestigationsValueChanged() throws PresentationLogicException
	{
		if(saveAttendDiagInvTreatStatus(form.chkNoneInvestigations().getValue(), false, null, null, null, null))
			refresh();
	}

	@Override
	protected void onChkNoDiagnosesValueChanged() throws PresentationLogicException
	{
		if(saveAttendDiagInvTreatStatus(null, null, form.chkNoDiagnoses().getValue(), false, null, null))
			refresh();
	}

	@Override
	protected void onChkDiagnosesNotRecordedValueChanged() throws PresentationLogicException
	{
		if(saveAttendDiagInvTreatStatus(null, null, false, form.chkDiagnosesNotRecorded().getValue(), null, null))
			refresh();
	}

	//WDEV-19918
	@Override
	protected void onBtnViewTreatmentNotesClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.ViewInvestigationInterventionNotesDialog, new Object[] {AttendanceClinicalNoteType.TREATMENT,form.getLocalContext().getPatient(),form.getLocalContext().getCareContext()}, "View Treatment Notes");
	}

	//WDEV-19918
	@Override
	protected void onBtnViewInvestigationNotesClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.ViewInvestigationInterventionNotesDialog, new Object[] {AttendanceClinicalNoteType.INVESTIGATION,form.getLocalContext().getPatient(),form.getLocalContext().getCareContext()}, "View Investigation Notes");
	}
	
	//WDEV-19239
	public class CodingSequenceComparator implements Comparator
	{
		private int direction = 1;
		
		public CodingSequenceComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public CodingSequenceComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Integer seq1 = null;
			Integer seq2 = null;
			if(ob1 instanceof PatientDiagnosisAtConsultationVo )
			{
				PatientDiagnosisAtConsultationVo patDiag1 = (PatientDiagnosisAtConsultationVo)ob1;
				seq1 = patDiag1 != null && patDiag1.getCodingSequence()!=null ? patDiag1.getCodingSequence():-1;
			}
			else if(ob1 instanceof CodedDiagnosesForAttendanceVo )
			{
				CodedDiagnosesForAttendanceVo codedDiag1 = (CodedDiagnosesForAttendanceVo)ob1;
				seq1 = codedDiag1 != null && codedDiag1.getCodingSequence()!=null ? codedDiag1.getCodingSequence():-1;
			}
			
			if(ob2 instanceof PatientDiagnosisAtConsultationVo )
			{
				PatientDiagnosisAtConsultationVo patDiag2 = (PatientDiagnosisAtConsultationVo)ob2;
				seq2 = patDiag2 != null && patDiag2.getCodingSequence()!=null ? patDiag2.getCodingSequence() : -1;
			}
			else if(ob2 instanceof CodedDiagnosesForAttendanceVo )
			{
				CodedDiagnosesForAttendanceVo codedDiag2 = (CodedDiagnosesForAttendanceVo)ob2;
				seq2 = codedDiag2 != null && codedDiag2.getCodingSequence()!=null ? codedDiag2.getCodingSequence():-1;
			}
			
			if(seq1 != null )
				return  seq1.compareTo(seq2)*direction;
			if(seq2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

}
