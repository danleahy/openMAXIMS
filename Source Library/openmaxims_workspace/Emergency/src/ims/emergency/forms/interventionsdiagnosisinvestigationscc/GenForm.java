//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.interventionsdiagnosisinvestigationscc;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdInterventionsTreatmentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdInterventionsTreatmentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColInterventionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColInterventionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColInterventionOpened()
		{
			super.row.showOpened(0);
		}
		public String getColIntervention()
		{
			return (String)super.row.get(0);
		}
		public void setColIntervention(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColInterventionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColCompleteReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColCompleteReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColCompleteOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColComplete()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColComplete(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColCompleteTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
		public grdInterventionsTreatmentsRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdInterventionsTreatmentsRow(super.row.getParent());
		}
		public grdInterventionsTreatmentsRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdInterventionsTreatmentsRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdInterventionsTreatmentsRowCollection collection;
	}
	public static class grdInterventionsTreatmentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdInterventionsTreatmentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdInterventionsTreatmentsRow get(int index)
		{
			return new grdInterventionsTreatmentsRow(super.collection.get(index));
		}
		public grdInterventionsTreatmentsRow newRow()
		{
			return new grdInterventionsTreatmentsRow(super.collection.newRow());
		}
		public grdInterventionsTreatmentsRow newRow(boolean autoSelect)
		{
			return new grdInterventionsTreatmentsRow(super.collection.newRow(autoSelect));
		}
		public grdInterventionsTreatmentsRow newRowAt(int index)
		{
			return new grdInterventionsTreatmentsRow(super.collection.newRowAt(index));
		}
		public grdInterventionsTreatmentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdInterventionsTreatmentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdInterventionsTreatmentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdInterventionsTreatmentsRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdInterventionsTreatmentsRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdInterventionsTreatmentsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdInterventionsTreatmentsRow[] result = new GenForm.grdInterventionsTreatmentsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdInterventionsTreatmentsRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdInterventionsTreatmentsRow[] getAllRows(GenForm.grdInterventionsTreatmentsRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdInterventionsTreatmentsRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdInterventionsTreatmentsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdInterventionsTreatmentsRow[] result = new GenForm.grdInterventionsTreatmentsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdInterventionsTreatmentsRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdInterventionsTreatmentsRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdInterventionsTreatmentsRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdInterventionsTreatmentsRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdInterventionsTreatmentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdInterventionsTreatmentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdInterventionsTreatmentsRowCollection getRows()
		{
			return new grdInterventionsTreatmentsRowCollection(super.grid.getRows());
		}
		public grdInterventionsTreatmentsRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdInterventionsTreatmentsRow(row);
		}
		public void setColInterventionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColInterventionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColCompleteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColCompleteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdInvestigationsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdInvestigationsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColInvestigationReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColInvestigationReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColInvestigationOpened()
		{
			super.row.showOpened(0);
		}
		public String getColInvestigation()
		{
			return (String)super.row.get(0);
		}
		public void setColInvestigation(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColInvestigationTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdInvestigationsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdInvestigationsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdInvestigationsRow get(int index)
		{
			return new grdInvestigationsRow(super.collection.get(index));
		}
		public grdInvestigationsRow newRow()
		{
			return new grdInvestigationsRow(super.collection.newRow());
		}
		public grdInvestigationsRow newRow(boolean autoSelect)
		{
			return new grdInvestigationsRow(super.collection.newRow(autoSelect));
		}
		public grdInvestigationsRow newRowAt(int index)
		{
			return new grdInvestigationsRow(super.collection.newRowAt(index));
		}
		public grdInvestigationsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdInvestigationsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdInvestigationsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdInvestigationsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdInvestigationsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdInvestigationsRowCollection getRows()
		{
			return new grdInvestigationsRowCollection(super.grid.getRows());
		}
		public grdInvestigationsRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdInvestigationsRow(row);
		}
		public void setColInvestigationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColInvestigationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdDiagnosisRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosisRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDiagnoseReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDiagnoseReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDiagnoseOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDiagnose(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColDiagnose()
		{
			return (String)super.row.get(0);
		}
		public void setColDiagnose(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDiagnoseTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColImageReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColImageReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColImageOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColImage(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.Image getColImage()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setColImage(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellColImageTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosisRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosisRow get(int index)
		{
			return new grdDiagnosisRow(super.collection.get(index));
		}
		public grdDiagnosisRow newRow()
		{
			return new grdDiagnosisRow(super.collection.newRow());
		}
		public grdDiagnosisRow newRow(boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosisRow newRowAt(int index)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index));
		}
		public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosisGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosisRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosisRowCollection getRows()
		{
			return new grdDiagnosisRowCollection(super.grid.getRows());
		}
		public grdDiagnosisRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosisRow(row);
		}
		public void setColDiagnoseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDiagnoseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(520, 560);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 1, "Add/Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5110001)))
			contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu.add(contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuEDITItem);
		contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5110002)))
			contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu.add(contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuREMOVEItem);
		contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 3, "Move Up", true, false, new Integer(102114), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5110003)))
			contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu.add(contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuMOVE_UPItem);
		contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 4, "Move Down", true, false, new Integer(102108), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5110004)))
			contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu.add(contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuMOVE_DOWNItem);
		contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Treatment Note", true, false, new Integer(102136), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5110005)))
			contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu.add(contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem);
		contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem = factory.createMenuItem(startControlID.intValue() + 6, "View Treatment Notes", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5110006)))
			contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu.add(contextMenus.Emergency.contextMenuInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem);
		form.registerMenu(contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuADDItem = factory.createMenuItem(startControlID.intValue() + 7, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5130001)))
			contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuADDItem);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 8, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5130002)))
			contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuEDITItem);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5130003)))
			contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuREMOVEItem);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Up", true, false, new Integer(102114), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5130004)))
			contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuMOVE_UPItem);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 11, "Move Down", true, false, new Integer(102108), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5130005)))
			contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuMOVE_DOWNItem);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem = factory.createMenuItem(startControlID.intValue() + 12, "Add Investigation Note", true, false, new Integer(102136), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5130006)))
			contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem);
		contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem = factory.createMenuItem(startControlID.intValue() + 13, "View Investigation Notes", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5130007)))
			contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem);
		form.registerMenu(contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu);
		contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuADDItem = factory.createMenuItem(startControlID.intValue() + 14, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5120001)))
			contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuADDItem);
		contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 15, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5120002)))
			contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuEDITItem);
		contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 16, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5120003)))
			contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuREMOVEItem);
		contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 17, "Move Up", true, false, new Integer(102114), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5120004)))
			contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuMOVE_UPItem);
		contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 18, "Move Down", true, false, new Integer(102108), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5120005)))
			contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu.add(contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenuMOVE_DOWNItem);
		form.registerMenu(contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 24, 183, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Diagnoses", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 199, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Not recorded", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 26, 359, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Interventions", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 26, 7, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Investigations", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 26, 376, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Not recorded", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 26, 24, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Not recorded", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 368, 120, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Treatment Note", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 360, 368, 152, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "View Treatment Notes", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 392, 16, 120, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Investigation Note", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 360, 16, 152, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "View Investigation Notes", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 344, 536, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 432, 536, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 183, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 199, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 359, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 7, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 376, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 392, 504, 136, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdInterventionsTreatmentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuInterventionsTreatmentsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdInterventionsTreatmentsTemp);
		grdInterventionsTreatmentsGrid grdInterventionsTreatments = (grdInterventionsTreatmentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInterventionsTreatmentsGrid.class, m_grdInterventionsTreatmentsTemp);
		grdInterventionsTreatments.addTreeColumn(" Interventions / Treatments ", 0, 198, false, true);
		grdInterventionsTreatments.addBoolColumn("Complete", 0, 0, -1, false, true, 0, true);
		super.addGrid(grdInterventionsTreatments);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 504, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdInvestigationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuInvestigationsForAttendanceNotesMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdInvestigationsTemp);
		grdInvestigationsGrid grdInvestigations = (grdInvestigationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInvestigationsGrid.class, m_grdInvestigationsTemp);
		grdInvestigations.addStringColumn("Investigations", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdInvestigations);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 216, 504, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuDiagnosisForAttendanceNotesMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDiagnosisTemp);
		grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
		grdDiagnosis.addStringColumn("Diagnoses", 0, 0, 230, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosis.addImageColumn(" ", 0, 0, 30, true, 0);
		super.addGrid(grdDiagnosis);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 128, 368, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.View, this.getImages().Core.ViewDisabled, "View 'Interventions/Treatments Not Recorded' Details", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 128, 16, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.View, this.getImages().Core.ViewDisabled, "View 'Investigations Not Recorded' Details", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lbl3()
	{
		return (Label)super.getControl(0);
	}
	public Label lbl4()
	{
		return (Label)super.getControl(1);
	}
	public Label lbl2()
	{
		return (Label)super.getControl(2);
	}
	public Label lbl1()
	{
		return (Label)super.getControl(3);
	}
	public Label lblNoKnownInterventions()
	{
		return (Label)super.getControl(4);
	}
	public Label lblNoKnownInvestigation()
	{
		return (Label)super.getControl(5);
	}
	public Button btnAddTreatmentNote()
	{
		return (Button)super.getControl(6);
	}
	public Button btnViewTreatmentNotes()
	{
		return (Button)super.getControl(7);
	}
	public Button btnAddInvestigationNote()
	{
		return (Button)super.getControl(8);
	}
	public Button btnViewInvestigationNotes()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(11);
	}
	public CheckBox chkNoDiagnoses()
	{
		return (CheckBox)super.getControl(12);
	}
	public CheckBox chkDiagnosesNotRecorded()
	{
		return (CheckBox)super.getControl(13);
	}
	public CheckBox chkNoneInterventions()
	{
		return (CheckBox)super.getControl(14);
	}
	public CheckBox chkNoneInvestigations()
	{
		return (CheckBox)super.getControl(15);
	}
	public CheckBox chkNoKnownInterventions()
	{
		return (CheckBox)super.getControl(16);
	}
	public CheckBox chkNoKnownInvestigations()
	{
		return (CheckBox)super.getControl(17);
	}
	public grdInterventionsTreatmentsGrid grdInterventionsTreatments()
	{
		return (grdInterventionsTreatmentsGrid)super.getGrid(0);
	}
	public grdInvestigationsGrid grdInvestigations()
	{
		return (grdInvestigationsGrid)super.getGrid(1);
	}
	public grdDiagnosisGrid grdDiagnosis()
	{
		return (grdDiagnosisGrid)super.getGrid(2);
	}
	public ImageButton imbViewNoKnownTreatmentsDetails()
	{
		return (ImageButton)super.getControl(21);
	}
	public ImageButton imbViewNoKnownInvestigationsDetails()
	{
		return (ImageButton)super.getControl(22);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
			Emergency = new EmergencyForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DiagnosisDialog = new LocalFormName(123146);
				CodedDiagnosisForAttendanceDialog = new LocalFormName(123322);
			}
			public final FormName DiagnosisDialog;
			public final FormName CodedDiagnosisForAttendanceDialog;
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				InterventionsTreatments = new LocalFormName(129194);
				InvestigationAttendenceDetailDialog = new LocalFormName(129195);
				NotKnownDetails = new LocalFormName(129227);
				AttendanceClinicalNoteDialog = new LocalFormName(129190);
				EmergencyAttendanceDetailsCc = new LocalFormName(129177);
				InterventionsDiagnosisInvestigationsCc = new LocalFormName(129196);
				ViewInvestigationInterventionNotesDialog = new LocalFormName(129243);
			}
			public final FormName InterventionsTreatments;
			public final FormName InvestigationAttendenceDetailDialog;
			public final FormName NotKnownDetails;
			public final FormName AttendanceClinicalNoteDialog;
			public final FormName EmergencyAttendanceDetailsCc;
			public final FormName InterventionsDiagnosisInvestigationsCc;
			public final FormName ViewInvestigationInterventionNotesDialog;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
		public EmergencyForms Emergency;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
				View = new ImageHelper(102223, "Images/Core/Slide Show.gif", new Integer(16), new Integer(16));
				ViewDisabled = new ImageHelper(102279, "Images/Core/Slide Show disabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Pin;
			public final ims.framework.utils.Image View;
			public final ims.framework.utils.Image ViewDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Patient = new ims.framework.ContextVariable("Patient", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__Patient_" + componentIdentifier + "");
			cxl_EpisodeOfCare = new ims.framework.ContextVariable("EpisodeOfCare", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__EpisodeOfCare_" + componentIdentifier + "");
			cxl_CareContext = new ims.framework.ContextVariable("CareContext", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__CareContext_" + componentIdentifier + "");
			cxl_IsEnabled = new ims.framework.ContextVariable("IsEnabled", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__IsEnabled_" + componentIdentifier + "");
			cxl_RemoveInterventionTreatmentMessageBoxId = new ims.framework.ContextVariable("RemoveInterventionTreatmentMessageBoxId", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__RemoveInterventionTreatmentMessageBoxId_" + componentIdentifier + "");
			cxl_RemoveInvestigationMessageBoxId = new ims.framework.ContextVariable("RemoveInvestigationMessageBoxId", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__RemoveInvestigationMessageBoxId_" + componentIdentifier + "");
			cxl_RIERecord = new ims.framework.ContextVariable("RIERecord", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__RIERecord_" + componentIdentifier + "");
			cxl_AddedDuringCoding = new ims.framework.ContextVariable("AddedDuringCoding", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AddedDuringCoding_" + componentIdentifier + "");
			cxl_PrimaryDiagnosis = new ims.framework.ContextVariable("PrimaryDiagnosis", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier + "");
			cxl_SelectedEvent = new ims.framework.ContextVariable("SelectedEvent", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__SelectedEvent_" + componentIdentifier + "");
			cxl_InterventionSequenceChanged = new ims.framework.ContextVariable("InterventionSequenceChanged", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__InterventionSequenceChanged_" + componentIdentifier + "");
			cxl_DiagnosisSequenceChanged = new ims.framework.ContextVariable("DiagnosisSequenceChanged", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__DiagnosisSequenceChanged_" + componentIdentifier + "");
			cxl_InvestigationsSequenceChanged = new ims.framework.ContextVariable("InvestigationsSequenceChanged", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__InvestigationsSequenceChanged_" + componentIdentifier + "");
			cxl_EmergencyInvestigationSequence = new ims.framework.ContextVariable("EmergencyInvestigationSequence", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__EmergencyInvestigationSequence_" + componentIdentifier + "");
			cxl_AttendDiagInvTreatStatus = new ims.framework.ContextVariable("AttendDiagInvTreatStatus", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier + "");
			cxl_UncheckNoKnownInvestigationMessageBoxId = new ims.framework.ContextVariable("UncheckNoKnownInvestigationMessageBoxId", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__UncheckNoKnownInvestigationMessageBoxId_" + componentIdentifier + "");
			cxl_UncheckNoKnownInterventionMessageBoxId = new ims.framework.ContextVariable("UncheckNoKnownInterventionMessageBoxId", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__UncheckNoKnownInterventionMessageBoxId_" + componentIdentifier + "");
			cxl_NoKnownSelectedEvent = new ims.framework.ContextVariable("NoKnownSelectedEvent", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__NoKnownSelectedEvent_" + componentIdentifier + "");
			cxl_SelectedInvestigationsForAttend = new ims.framework.ContextVariable("SelectedInvestigationsForAttend", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__SelectedInvestigationsForAttend_" + componentIdentifier + "");
			cxl_HcpUser = new ims.framework.ContextVariable("HcpUser", prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__HcpUser_" + componentIdentifier + "");
		}
		
		public boolean getPatientIsNotNull()
		{
			return !cxl_Patient.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatient()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_Patient.getValue(context);
		}
		public void setPatient(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'Patient' RefVo context variable.");
			if(value == null)
				cxl_Patient.setValue(context, null);
			else
				cxl_Patient.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_Patient = null;
		public boolean getEpisodeOfCareIsNotNull()
		{
			return !cxl_EpisodeOfCare.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getEpisodeOfCare()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_EpisodeOfCare.getValue(context);
		}
		public void setEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'EpisodeOfCare' RefVo context variable.");
			if(value == null)
				cxl_EpisodeOfCare.setValue(context, null);
			else
				cxl_EpisodeOfCare.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_EpisodeOfCare = null;
		public boolean getCareContextIsNotNull()
		{
			return !cxl_CareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContext.getValue(context);
		}
		public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContext' RefVo context variable.");
			if(value == null)
				cxl_CareContext.setValue(context, null);
			else
				cxl_CareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContext = null;
		public boolean getIsEnabledIsNotNull()
		{
			return !cxl_IsEnabled.getValueIsNull(context);
		}
		public Boolean getIsEnabled()
		{
			return (Boolean)cxl_IsEnabled.getValue(context);
		}
		public void setIsEnabled(Boolean value)
		{
			cxl_IsEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsEnabled = null;
		public boolean getRemoveInterventionTreatmentMessageBoxIdIsNotNull()
		{
			return !cxl_RemoveInterventionTreatmentMessageBoxId.getValueIsNull(context);
		}
		public Integer getRemoveInterventionTreatmentMessageBoxId()
		{
			return (Integer)cxl_RemoveInterventionTreatmentMessageBoxId.getValue(context);
		}
		public void setRemoveInterventionTreatmentMessageBoxId(Integer value)
		{
			cxl_RemoveInterventionTreatmentMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RemoveInterventionTreatmentMessageBoxId = null;
		public boolean getRemoveInvestigationMessageBoxIdIsNotNull()
		{
			return !cxl_RemoveInvestigationMessageBoxId.getValueIsNull(context);
		}
		public Integer getRemoveInvestigationMessageBoxId()
		{
			return (Integer)cxl_RemoveInvestigationMessageBoxId.getValue(context);
		}
		public void setRemoveInvestigationMessageBoxId(Integer value)
		{
			cxl_RemoveInvestigationMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RemoveInvestigationMessageBoxId = null;
		public boolean getRIERecordIsNotNull()
		{
			return !cxl_RIERecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getRIERecord()
		{
			return (ims.vo.ValueObject)cxl_RIERecord.getValue(context);
		}
		public void setRIERecord(ims.vo.ValueObject value)
		{
			cxl_RIERecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIERecord = null;
		public boolean getAddedDuringCodingIsNotNull()
		{
			return !cxl_AddedDuringCoding.getValueIsNull(context);
		}
		public Boolean getAddedDuringCoding()
		{
			return (Boolean)cxl_AddedDuringCoding.getValue(context);
		}
		public void setAddedDuringCoding(Boolean value)
		{
			cxl_AddedDuringCoding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AddedDuringCoding = null;
		public boolean getPrimaryDiagnosisIsNotNull()
		{
			return !cxl_PrimaryDiagnosis.getValueIsNull(context);
		}
		public ims.core.vo.PatientDiagnosisAtConsultationVo getPrimaryDiagnosis()
		{
			return (ims.core.vo.PatientDiagnosisAtConsultationVo)cxl_PrimaryDiagnosis.getValue(context);
		}
		public void setPrimaryDiagnosis(ims.core.vo.PatientDiagnosisAtConsultationVo value)
		{
			cxl_PrimaryDiagnosis.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrimaryDiagnosis = null;
		public boolean getSelectedEventIsNotNull()
		{
			return !cxl_SelectedEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.EdAssessment_CustomControlsEvents getSelectedEvent()
		{
			return (ims.emergency.vo.enums.EdAssessment_CustomControlsEvents)cxl_SelectedEvent.getValue(context);
		}
		public void setSelectedEvent(ims.emergency.vo.enums.EdAssessment_CustomControlsEvents value)
		{
			cxl_SelectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEvent = null;
		public boolean getInterventionSequenceChangedIsNotNull()
		{
			return !cxl_InterventionSequenceChanged.getValueIsNull(context);
		}
		public Boolean getInterventionSequenceChanged()
		{
			return (Boolean)cxl_InterventionSequenceChanged.getValue(context);
		}
		public void setInterventionSequenceChanged(Boolean value)
		{
			cxl_InterventionSequenceChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InterventionSequenceChanged = null;
		public boolean getDiagnosisSequenceChangedIsNotNull()
		{
			return !cxl_DiagnosisSequenceChanged.getValueIsNull(context);
		}
		public Boolean getDiagnosisSequenceChanged()
		{
			return (Boolean)cxl_DiagnosisSequenceChanged.getValue(context);
		}
		public void setDiagnosisSequenceChanged(Boolean value)
		{
			cxl_DiagnosisSequenceChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DiagnosisSequenceChanged = null;
		public boolean getInvestigationsSequenceChangedIsNotNull()
		{
			return !cxl_InvestigationsSequenceChanged.getValueIsNull(context);
		}
		public Boolean getInvestigationsSequenceChanged()
		{
			return (Boolean)cxl_InvestigationsSequenceChanged.getValue(context);
		}
		public void setInvestigationsSequenceChanged(Boolean value)
		{
			cxl_InvestigationsSequenceChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InvestigationsSequenceChanged = null;
		public boolean getEmergencyInvestigationSequenceIsNotNull()
		{
			return !cxl_EmergencyInvestigationSequence.getValueIsNull(context);
		}
		public ims.emergency.vo.EmergencyAttendanceInvestigationCodingVo getEmergencyInvestigationSequence()
		{
			return (ims.emergency.vo.EmergencyAttendanceInvestigationCodingVo)cxl_EmergencyInvestigationSequence.getValue(context);
		}
		public void setEmergencyInvestigationSequence(ims.emergency.vo.EmergencyAttendanceInvestigationCodingVo value)
		{
			cxl_EmergencyInvestigationSequence.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EmergencyInvestigationSequence = null;
		public boolean getAttendDiagInvTreatStatusIsNotNull()
		{
			return !cxl_AttendDiagInvTreatStatus.getValueIsNull(context);
		}
		public ims.emergency.vo.AttendDiagInvTreatStatusVo getAttendDiagInvTreatStatus()
		{
			return (ims.emergency.vo.AttendDiagInvTreatStatusVo)cxl_AttendDiagInvTreatStatus.getValue(context);
		}
		public void setAttendDiagInvTreatStatus(ims.emergency.vo.AttendDiagInvTreatStatusVo value)
		{
			cxl_AttendDiagInvTreatStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AttendDiagInvTreatStatus = null;
		public boolean getUncheckNoKnownInvestigationMessageBoxIdIsNotNull()
		{
			return !cxl_UncheckNoKnownInvestigationMessageBoxId.getValueIsNull(context);
		}
		public Integer getUncheckNoKnownInvestigationMessageBoxId()
		{
			return (Integer)cxl_UncheckNoKnownInvestigationMessageBoxId.getValue(context);
		}
		public void setUncheckNoKnownInvestigationMessageBoxId(Integer value)
		{
			cxl_UncheckNoKnownInvestigationMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UncheckNoKnownInvestigationMessageBoxId = null;
		public boolean getUncheckNoKnownInterventionMessageBoxIdIsNotNull()
		{
			return !cxl_UncheckNoKnownInterventionMessageBoxId.getValueIsNull(context);
		}
		public Integer getUncheckNoKnownInterventionMessageBoxId()
		{
			return (Integer)cxl_UncheckNoKnownInterventionMessageBoxId.getValue(context);
		}
		public void setUncheckNoKnownInterventionMessageBoxId(Integer value)
		{
			cxl_UncheckNoKnownInterventionMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UncheckNoKnownInterventionMessageBoxId = null;
		public boolean getNoKnownSelectedEventIsNotNull()
		{
			return !cxl_NoKnownSelectedEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.NoKnownSelectedEvent getNoKnownSelectedEvent()
		{
			return (ims.emergency.vo.enums.NoKnownSelectedEvent)cxl_NoKnownSelectedEvent.getValue(context);
		}
		public void setNoKnownSelectedEvent(ims.emergency.vo.enums.NoKnownSelectedEvent value)
		{
			cxl_NoKnownSelectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoKnownSelectedEvent = null;
		public boolean getSelectedInvestigationsForAttendIsNotNull()
		{
			return !cxl_SelectedInvestigationsForAttend.getValueIsNull(context);
		}
		public ims.emergency.vo.InvestigationsForAttendVo getSelectedInvestigationsForAttend()
		{
			return (ims.emergency.vo.InvestigationsForAttendVo)cxl_SelectedInvestigationsForAttend.getValue(context);
		}
		public void setSelectedInvestigationsForAttend(ims.emergency.vo.InvestigationsForAttendVo value)
		{
			cxl_SelectedInvestigationsForAttend.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInvestigationsForAttend = null;
		public boolean getHcpUserIsNotNull()
		{
			return !cxl_HcpUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getHcpUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_HcpUser.getValue(context);
		}
		public void setHcpUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_HcpUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HcpUser = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class InterventionsTreatmentsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 1;
				public static final int REMOVE = 2;
				public static final int MOVE_UP = 3;
				public static final int MOVE_DOWN = 4;
				public static final int ADD_TREATMENT_NOTE = 5;
				public static final int VIEW_TREATMENT_NOTES = 6;
			}
			public void disableAllInterventionsTreatmentsMenuMenuItems()
			{
				this.contextMenuInterventionsTreatmentsMenuEDITItem.setEnabled(false);
				this.contextMenuInterventionsTreatmentsMenuREMOVEItem.setEnabled(false);
				this.contextMenuInterventionsTreatmentsMenuMOVE_UPItem.setEnabled(false);
				this.contextMenuInterventionsTreatmentsMenuMOVE_DOWNItem.setEnabled(false);
				this.contextMenuInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem.setEnabled(false);
				this.contextMenuInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem.setEnabled(false);
			}
			public void hideAllInterventionsTreatmentsMenuMenuItems()
			{
				this.contextMenuInterventionsTreatmentsMenuEDITItem.setVisible(false);
				this.contextMenuInterventionsTreatmentsMenuREMOVEItem.setVisible(false);
				this.contextMenuInterventionsTreatmentsMenuMOVE_UPItem.setVisible(false);
				this.contextMenuInterventionsTreatmentsMenuMOVE_DOWNItem.setVisible(false);
				this.contextMenuInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem.setVisible(false);
				this.contextMenuInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem.setVisible(false);
			}
			private Menu contextMenuInterventionsTreatmentsMenu;
			public ReadOnlyMenuItem getInterventionsTreatmentsMenuEDITItem()
			{
				return this.contextMenuInterventionsTreatmentsMenuEDITItem;
			}
			private MenuItem contextMenuInterventionsTreatmentsMenuEDITItem;
			public ReadOnlyMenuItem getInterventionsTreatmentsMenuREMOVEItem()
			{
				return this.contextMenuInterventionsTreatmentsMenuREMOVEItem;
			}
			private MenuItem contextMenuInterventionsTreatmentsMenuREMOVEItem;
			public ReadOnlyMenuItem getInterventionsTreatmentsMenuMOVE_UPItem()
			{
				return this.contextMenuInterventionsTreatmentsMenuMOVE_UPItem;
			}
			private MenuItem contextMenuInterventionsTreatmentsMenuMOVE_UPItem;
			public ReadOnlyMenuItem getInterventionsTreatmentsMenuMOVE_DOWNItem()
			{
				return this.contextMenuInterventionsTreatmentsMenuMOVE_DOWNItem;
			}
			private MenuItem contextMenuInterventionsTreatmentsMenuMOVE_DOWNItem;
			public ReadOnlyMenuItem getInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem()
			{
				return this.contextMenuInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem;
			}
			private MenuItem contextMenuInterventionsTreatmentsMenuADD_TREATMENT_NOTEItem;
			public ReadOnlyMenuItem getInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem()
			{
				return this.contextMenuInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem;
			}
			private MenuItem contextMenuInterventionsTreatmentsMenuVIEW_TREATMENT_NOTESItem;
			public final class InvestigationsForAttendanceNotesMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 7;
				public static final int EDIT = 8;
				public static final int REMOVE = 9;
				public static final int MOVE_UP = 10;
				public static final int MOVE_DOWN = 11;
				public static final int ADD_INVESTIGATION_NOTE = 12;
				public static final int VIEW_INVESTIGATION_NOTES = 13;
			}
			public void disableAllInvestigationsForAttendanceNotesMenuMenuItems()
			{
				this.contextMenuInvestigationsForAttendanceNotesMenuADDItem.setEnabled(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuEDITItem.setEnabled(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuREMOVEItem.setEnabled(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuMOVE_UPItem.setEnabled(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuMOVE_DOWNItem.setEnabled(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem.setEnabled(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem.setEnabled(false);
			}
			public void hideAllInvestigationsForAttendanceNotesMenuMenuItems()
			{
				this.contextMenuInvestigationsForAttendanceNotesMenuADDItem.setVisible(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuEDITItem.setVisible(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuREMOVEItem.setVisible(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuMOVE_UPItem.setVisible(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuMOVE_DOWNItem.setVisible(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem.setVisible(false);
				this.contextMenuInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem.setVisible(false);
			}
			private Menu contextMenuInvestigationsForAttendanceNotesMenu;
			public ReadOnlyMenuItem getInvestigationsForAttendanceNotesMenuADDItem()
			{
				return this.contextMenuInvestigationsForAttendanceNotesMenuADDItem;
			}
			private MenuItem contextMenuInvestigationsForAttendanceNotesMenuADDItem;
			public ReadOnlyMenuItem getInvestigationsForAttendanceNotesMenuEDITItem()
			{
				return this.contextMenuInvestigationsForAttendanceNotesMenuEDITItem;
			}
			private MenuItem contextMenuInvestigationsForAttendanceNotesMenuEDITItem;
			public ReadOnlyMenuItem getInvestigationsForAttendanceNotesMenuREMOVEItem()
			{
				return this.contextMenuInvestigationsForAttendanceNotesMenuREMOVEItem;
			}
			private MenuItem contextMenuInvestigationsForAttendanceNotesMenuREMOVEItem;
			public ReadOnlyMenuItem getInvestigationsForAttendanceNotesMenuMOVE_UPItem()
			{
				return this.contextMenuInvestigationsForAttendanceNotesMenuMOVE_UPItem;
			}
			private MenuItem contextMenuInvestigationsForAttendanceNotesMenuMOVE_UPItem;
			public ReadOnlyMenuItem getInvestigationsForAttendanceNotesMenuMOVE_DOWNItem()
			{
				return this.contextMenuInvestigationsForAttendanceNotesMenuMOVE_DOWNItem;
			}
			private MenuItem contextMenuInvestigationsForAttendanceNotesMenuMOVE_DOWNItem;
			public ReadOnlyMenuItem getInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem()
			{
				return this.contextMenuInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem;
			}
			private MenuItem contextMenuInvestigationsForAttendanceNotesMenuADD_INVESTIGATION_NOTEItem;
			public ReadOnlyMenuItem getInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem()
			{
				return this.contextMenuInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem;
			}
			private MenuItem contextMenuInvestigationsForAttendanceNotesMenuVIEW_INVESTIGATION_NOTESItem;
			public final class DiagnosisForAttendanceNotesMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 14;
				public static final int EDIT = 15;
				public static final int REMOVE = 16;
				public static final int MOVE_UP = 17;
				public static final int MOVE_DOWN = 18;
			}
			public void disableAllDiagnosisForAttendanceNotesMenuMenuItems()
			{
				this.contextMenuDiagnosisForAttendanceNotesMenuADDItem.setEnabled(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuEDITItem.setEnabled(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuREMOVEItem.setEnabled(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuMOVE_UPItem.setEnabled(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuMOVE_DOWNItem.setEnabled(false);
			}
			public void hideAllDiagnosisForAttendanceNotesMenuMenuItems()
			{
				this.contextMenuDiagnosisForAttendanceNotesMenuADDItem.setVisible(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuEDITItem.setVisible(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuREMOVEItem.setVisible(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuMOVE_UPItem.setVisible(false);
				this.contextMenuDiagnosisForAttendanceNotesMenuMOVE_DOWNItem.setVisible(false);
			}
			private Menu contextMenuDiagnosisForAttendanceNotesMenu;
			public ReadOnlyMenuItem getDiagnosisForAttendanceNotesMenuADDItem()
			{
				return this.contextMenuDiagnosisForAttendanceNotesMenuADDItem;
			}
			private MenuItem contextMenuDiagnosisForAttendanceNotesMenuADDItem;
			public ReadOnlyMenuItem getDiagnosisForAttendanceNotesMenuEDITItem()
			{
				return this.contextMenuDiagnosisForAttendanceNotesMenuEDITItem;
			}
			private MenuItem contextMenuDiagnosisForAttendanceNotesMenuEDITItem;
			public ReadOnlyMenuItem getDiagnosisForAttendanceNotesMenuREMOVEItem()
			{
				return this.contextMenuDiagnosisForAttendanceNotesMenuREMOVEItem;
			}
			private MenuItem contextMenuDiagnosisForAttendanceNotesMenuREMOVEItem;
			public ReadOnlyMenuItem getDiagnosisForAttendanceNotesMenuMOVE_UPItem()
			{
				return this.contextMenuDiagnosisForAttendanceNotesMenuMOVE_UPItem;
			}
			private MenuItem contextMenuDiagnosisForAttendanceNotesMenuMOVE_UPItem;
			public ReadOnlyMenuItem getDiagnosisForAttendanceNotesMenuMOVE_DOWNItem()
			{
				return this.contextMenuDiagnosisForAttendanceNotesMenuMOVE_DOWNItem;
			}
			private MenuItem contextMenuDiagnosisForAttendanceNotesMenuMOVE_DOWNItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[224];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-SPECIALTY", "Specialty");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-CARECONTEXT", "CareContext");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-ADDEDDURINGCODING", "AddedDuringCoding");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-CODINGSEQUENCE", "CodingSequence");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-DIAGLATERALITY", "DiagLaterality");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-ID", "ID_AttendanceClinicalNotes");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-PATIENT", "Patient");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-EPISODE", "Episode");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-ATTENDANCE", "Attendance");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-CLINICALNOTE", "ClinicalNote");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-NOTETYPE", "NoteType");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-DISCIPLINE", "Discipline");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-SPECIALTY", "Specialty");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-ISCORRECTED", "IsCorrected");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-CORRECTIONCOMMENTS", "CorrectionComments");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-ID", "ID_InterventionsTreatmentsForAttendence");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-PATIENT", "Patient");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-EPISODE", "Episode");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-ATTENDANCE", "Attendance");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationsForAttend", "BO-1086100057-ID", "ID_InvestigationsForAttend");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationsForAttend", "BO-1086100057-PATIENT", "Patient");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationsForAttend", "BO-1086100057-EPISODE", "Episode");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationsForAttend", "BO-1086100057-ATTENDANCE", "Attendance");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-ID", "ID_CodedDiagForAttendance");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-DIAGLATERALITY", "DiagLaterality");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-SOURCEOFINFORMATION", "SourceofInformation");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-DIAGNOSEDDATE", "DiagnosedDate");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-CARECONTEXT", "CareContext");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-EPISODEOFCARE", "EpisodeOfCare");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-CODINGSEQUENCE", "CodingSequence");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Core.CodedDiagnosesForAttendance", "BO-1003100138-ISMAIN", "IsMain");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ID", "ID_InvestigationAttendenceDetail");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ATTENDENCEINVESTIGATION", "AttendenceInvestigation");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ACTIVE", "Active");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ADDEDDURINGCODING", "AddedDuringCoding");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__EpisodeOfCare_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-SPECIALTY", "Specialty");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-CARECONTEXT", "CareContext");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-ADDEDDURINGCODING", "AddedDuringCoding");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-CODINGSEQUENCE", "CodingSequence");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__PrimaryDiagnosis_" + componentIdentifier, "BO-1003100016-DIAGLATERALITY", "DiagLaterality");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__EmergencyInvestigationSequence_" + componentIdentifier, "BO-1086100040-ID", "ID_EmergencyAttendanceInvestigationCoding");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__EmergencyInvestigationSequence_" + componentIdentifier, "BO-1086100040-CARECONTEXT", "CareContext");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-ID", "ID_AttendDiagInvTreatStatus");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-PATIENT", "Patient");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-EPISODE", "Episode");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-ATTENDANCE", "Attendance");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-NOINVESTIGATIONS", "NoInvestigations");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-INVESTIGATIONNOTRECORDED", "InvestigationNotRecorded");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-NOTREATMENTS", "NoTreatments");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-TREATMENTSNOTRECORDED", "TreatmentsNotRecorded");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-NODIAGNOSES", "NoDiagnoses");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-DIAGNOSESNOTRECORDED", "DiagnosesNotRecorded");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-INVESTIGATIONREASONTEXT", "InvestigationReasonText");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-INVESTIGATIONREASON", "InvestigationReason");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-TREATMENTREASONTEXT", "TreatmentReasonText");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__AttendDiagInvTreatStatus_" + componentIdentifier, "BO-1086100056-TREATMENTREASON", "TreatmentReason");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__SelectedInvestigationsForAttend_" + componentIdentifier, "BO-1086100057-ID", "ID_InvestigationsForAttend");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__SelectedInvestigationsForAttend_" + componentIdentifier, "BO-1086100057-PATIENT", "Patient");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__SelectedInvestigationsForAttend_" + componentIdentifier, "BO-1086100057-EPISODE", "Episode");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__SelectedInvestigationsForAttend_" + componentIdentifier, "BO-1086100057-ATTENDANCE", "Attendance");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsDiagnosisInvestigationsCc.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
