//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.62 build 2971.25997)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.emergency.forms.attendancelist;

import java.util.Comparator;

import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.emergency.forms.attendancelist.GenForm.grdDetailsRow;
import ims.emergency.vo.AttendanceListSearchCriteriaVo;
import ims.emergency.vo.EmergencyAttendanceListVo;
import ims.emergency.vo.EmergencyAttendanceListVoCollection;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();		
	}
	
	private AttendanceListSearchCriteriaVo getSearchCriteria()
	{
		AttendanceListSearchCriteriaVo searchCriteria = new AttendanceListSearchCriteriaVo();
		
		searchCriteria.setSurname(form.txtSearchSurname().getValue());
		searchCriteria.setForename(form.txtSearchForename().getValue());
		searchCriteria.setPatientCategory(form.cmbCategory().getValue());
		searchCriteria.setPresentingProblem(form.qmbProblem().getValue());
		searchCriteria.setIncludeDischarged(Boolean.TRUE.equals(form.chk24().getValue()) ? true : false);
		searchCriteria.setIncludeUncoded(Boolean.TRUE.equals(form.chkUnCoded().getValue()) ? true : false);
		searchCriteria.setIncludeRequiresDischargeDocumentationReview(form.chkIncludeRequiresDocumentationReview().getValue());
		
		return searchCriteria;
	}
	
	private void setSearchCriteria(AttendanceListSearchCriteriaVo attendanceListSearchCriteriaVo) 
	{
		if (attendanceListSearchCriteriaVo.getPresentingProblemIsNotNull())
		{
			form.qmbProblem().newRow(attendanceListSearchCriteriaVo.getPresentingProblem(), attendanceListSearchCriteriaVo.getPresentingProblem().getPCName());
			form.qmbProblem().setValue(attendanceListSearchCriteriaVo.getPresentingProblem());
		}
		
		form.cmbCategory().setValue(attendanceListSearchCriteriaVo.getPatientCategory());
		form.txtSearchForename().setValue(attendanceListSearchCriteriaVo.getForename());
		form.txtSearchSurname().setValue(attendanceListSearchCriteriaVo.getSurname());
		form.chk24().setValue(attendanceListSearchCriteriaVo.getIncludeDischarged());
		form.chkUnCoded().setValue(attendanceListSearchCriteriaVo.getIncludeUncoded());	
		form.chkIncludeRequiresDocumentationReview().setValue(attendanceListSearchCriteriaVo.getIncludeRequiresDischargeDocumentationReview());
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtSearchForename().setValue(null);
		form.txtSearchSurname().setValue(null);
		form.cmbCategory().setValue(null);
		form.chk24().setValue(false);
		form.chkUnCoded().setValue(false);//WDEV-17015
		form.chkIncludeRequiresDocumentationReview().setValue(false);
		form.qmbProblem().clear();
		form.getGlobalContext().Emergency.setAttendanceListSearchCriteria(null);//WDEV-19389 
	}
	
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAttendanceListSearchCriteria(getSearchCriteria());//WDEV-19389 
		doSearch(form.getGlobalContext().Emergency.getAttendanceListSearchCriteria());		
	}
	
	
	@Override
	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.grdDetails().getValue()));
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(form.grdDetails().getValue()));
		form.getGlobalContext().Emergency.setCurrentEmergencyAttendance(domain.getEmergencyAttendance(form.grdDetails().getValue()));
		
		engine.open(form.getForms().Emergency.AttendanceDetails);
	}
	
	private void open()
	{
		//WDEV-19389 //WDEV-19304
		boolean existingSearchCriteria = form.getGlobalContext().Emergency.getAttendanceListSearchCriteriaIsNotNull();
		if (existingSearchCriteria)
		{
				setSearchCriteria(form.getGlobalContext().Emergency.getAttendanceListSearchCriteria());						
		}
		
		doSearch(existingSearchCriteria ? form.getGlobalContext().Emergency.getAttendanceListSearchCriteria() : new AttendanceListSearchCriteriaVo());
	}
	
	private void displayData(EmergencyAttendanceListVoCollection list)
	{
		form.grdDetails().getRows().clear();
		
		if(list == null || list.size() == 0)
		{
			engine.showMessage("No records found.");
			return;
		}
		
		for (int i = 0; i < list.size(); i++)
		{
			grdDetailsRow row = form.grdDetails().getRows().newRow();
			
			EmergencyAttendanceListVo item = list.get(i);
			
			row.setColAttDateTime(item.getAttendanceDateIsNotNull() ? item.getAttendanceDate().toString() : null);
			row.setColHospNo(item.getHospitalNo());
			row.setColPatient((item.getSurname() == null ? "" : item.getSurname()) + " " + (item.getForename() == null ? "" : item.getForename()));
			row.setColCategory(item.getPatientCategory());
			row.setColComplaint(item.getPresentingComplaint());
			row.setColRequiresDischargeDocumentationReview(Boolean.TRUE.equals(item.getRequiresDischargeDocumentationReview()) ? form.getImages().Core.Attachment16 : null);
			row.setTooltipForColRequiresDischargeDocumentationReview(Boolean.TRUE.equals(item.getRequiresDischargeDocumentationReview()) ? "Requires Discharge Documentation Review" : null);
			row.setColIncidentTime(item.getInjuryDateIsNotNull() ? item.getInjuryDate().toString() : null); //WDEV-19396
			
			EmergencyAttendanceRefVo ref = new EmergencyAttendanceRefVo();
			ref.setID_EmergencyAttendance(item.getId());
			
			row.setValue(ref);
			
			if(item.getDischargeDateIsNotNull())
				row.setBackColor(Color.LightGreen);
		}
	}
	
	private void doSearch(AttendanceListSearchCriteriaVo searchCriteria)
	{
		EmergencyAttendanceListVoCollection list = domain.listEmergencyAttendance(searchCriteria); //WDEV-19304

		displayData(list);
	}
	
	//WDEV-19282
	@Override
	protected void onQmbProblemTextSubmited(String value) throws PresentationLogicException
	{
		populateProblems(value);
		
	}
	
	private void populateProblems(String value)
	{
		form.qmbProblem().clear();

		if (value == null || value.length() == 0)
			return;

		ClinicalProblemShortVoCollection problems = domain.listProblems(value);

		if (problems == null || problems.size() == 0)
			return;

		for (ClinicalProblemShortVo problem : problems)
		{
			if (problem == null)
				continue;

			form.qmbProblem().newRow(problem, problem.getPCName());
		}

		if (problems.size() == 1)
		{
			form.qmbProblem().setValue(problems.get(0));
		}
		else
		{
			form.qmbProblem().showOpened();
		}
		
	}
	
	private static class DateAttendance implements Comparator<EmergencyAttendanceListVo>
	{
		private int direction;

		public DateAttendance(SortOrder sortOrderAttendanceDate)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAttendanceDate))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(EmergencyAttendanceListVo o1, EmergencyAttendanceListVo o2)
		{
			if (o1.getAttendanceDateIsNotNull() && o2.getAttendanceDateIsNotNull())
			{
				return o1.getAttendanceDate().compareTo(o2.getAttendanceDate()) * direction;
			}
			
			if (o1.getAttendanceDateIsNotNull() && !o2.getAttendanceDateIsNotNull())
			{
				return direction;
			}
			
			if (o2.getAttendanceDateIsNotNull() && !o1.getAttendanceDateIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}
	
	private static class IncidentTime implements Comparator<EmergencyAttendanceListVo>
	{
		private int direction;

		public IncidentTime(SortOrder sortIncidentTime)
		{
			if (SortOrder.ASCENDING.equals(sortIncidentTime))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(EmergencyAttendanceListVo o1, EmergencyAttendanceListVo o2)
		{
			if (o1.getInjuryDateIsNotNull() && o2.getInjuryDateIsNotNull())
			{
				return o1.getInjuryDate().compareTo(o2.getInjuryDate()) * direction;
			}
			
			if (o1.getInjuryDateIsNotNull() && !o2.getInjuryDateIsNotNull())
			{
				return direction;
			}
			
			if (o2.getInjuryDateIsNotNull() && !o1.getInjuryDateIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}
	
	public class ImageComparator implements Comparator<Object>
	{
		private int direction = 1;

		public ImageComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public ImageComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			
			Integer isReqDischDoc1 = 0;
			Integer isReqDischDoc2 = 0;

			if (ob1 instanceof EmergencyAttendanceListVo)
			{
				EmergencyAttendanceListVo o1 = (EmergencyAttendanceListVo) ob1;
				isReqDischDoc1 = (Boolean.TRUE.equals(o1.getRequiresDischargeDocumentationReview()) ? 1 : 0);
			}

			if (ob2 instanceof EmergencyAttendanceListVo)
			{
				EmergencyAttendanceListVo o2 = (EmergencyAttendanceListVo) ob2;
				isReqDischDoc2 = (Boolean.TRUE.equals(o2.getRequiresDischargeDocumentationReview()) ? 1 : 0);
			}

			if (isReqDischDoc1 != 0 && isReqDischDoc2 != 0)
			{
				return isReqDischDoc1.compareTo(isReqDischDoc2) * direction;
			}

			if (isReqDischDoc1 != 0 && isReqDischDoc2 == 0)
			{
				return direction;
			}

			if (isReqDischDoc2 != 0 && isReqDischDoc1 == 0)
			{
				return -1 * direction;
			}	
			
			return 0;
		}
	}

	@Override
	protected void onGrdDetailsGridHeaderClicked(int column) throws PresentationLogicException 
	{
		int gridRowsSize = form.grdDetails().getRows() != null ? form.grdDetails().getRows().size() : 0;
		if (gridRowsSize <= 1)
			return;
		
		if (column == 0)
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortAttendanceDate()))
				form.getLocalContext().setSortAttendanceDate(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortAttendanceDate(SortOrder.ASCENDING);
			
			displayData(sortAttendanceDate());
		}
		
		else if (column == 5)
		{
			if (form.getLocalContext().getSortOrderImage() == null || !form.getLocalContext().getSortOrderImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderImage(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrderImage(SortOrder.DESCENDING);
			
			displayData(sortImage());
			
		}
		
		else if (column == 6)
		{
			if (form.getLocalContext().getSortOrderIncidentTime() == null || !form.getLocalContext().getSortOrderIncidentTime().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderIncidentTime(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrderIncidentTime(SortOrder.DESCENDING);
			
			displayData(sortIncidentTime());
			
		}
		
	}
	
	private EmergencyAttendanceListVoCollection sortAttendanceDate()
	{
		if (form.getGlobalContext().Emergency.getAttendanceListSearchCriteria() == null)
			form.getGlobalContext().Emergency.setAttendanceListSearchCriteria(new AttendanceListSearchCriteriaVo());
		
		EmergencyAttendanceListVoCollection voColl = domain.listEmergencyAttendance(form.getGlobalContext().Emergency.getAttendanceListSearchCriteria());	
		voColl.sort(new DateAttendance(form.getLocalContext().getSortAttendanceDate()));
		
		return voColl;
	}
	
	private EmergencyAttendanceListVoCollection sortImage()
	{	
		if (form.getGlobalContext().Emergency.getAttendanceListSearchCriteria() == null)
			form.getGlobalContext().Emergency.setAttendanceListSearchCriteria(new AttendanceListSearchCriteriaVo());
		
		EmergencyAttendanceListVoCollection voColl = domain.listEmergencyAttendance(form.getGlobalContext().Emergency.getAttendanceListSearchCriteria());	
		voColl.sort(new ImageComparator(form.getLocalContext().getSortOrderImage()));
		
		return voColl;
	}
	
	private EmergencyAttendanceListVoCollection sortIncidentTime()
	{	
		if (form.getGlobalContext().Emergency.getAttendanceListSearchCriteria() == null)
			form.getGlobalContext().Emergency.setAttendanceListSearchCriteria(new AttendanceListSearchCriteriaVo());
		
		EmergencyAttendanceListVoCollection voColl = domain.listEmergencyAttendance(form.getGlobalContext().Emergency.getAttendanceListSearchCriteria());	
		voColl.sort(new IncidentTime(form.getLocalContext().getSortOrderIncidentTime()));
		
		return voColl;
	}
	
}
