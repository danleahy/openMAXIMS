//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5196.25869)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.patientwhiteboardeditall;

import ims.configuration.gen.ConfigFlag;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.ActionWhiteBoardVo;
import ims.emergency.vo.ActionWhiteBoardVoCollection;
import ims.emergency.vo.PatientWhiteboardActionsVo;
import ims.emergency.vo.PatientWhiteboardActionsVoCollection;
import ims.emergency.vo.PatientWhiteboardRecordVo;
import ims.emergency.vo.PatientWhiteboardRecordVoCollection;
import ims.emergency.vo.TrackingAreaShortVo;
import ims.emergency.vo.TrackingAreaShortVoCollection;
import ims.emergency.vo.TrackingForPatientWhiteBoardOtherActionsVo;
import ims.emergency.vo.TrackingForWhiteBoardVo;
import ims.emergency.vo.TrackingForWhiteBoardVoCollection;
import ims.emergency.vo.WhiteBoardOtherActionsVo;
import ims.emergency.vo.WhiteBoardOtherActionsVoCollection;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.WhiteBoardActionStatus;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String	COLUMN_PATIENTID					= "0";
	private static final String	COLUMN_PATIENTNAME					= "1";
	private static final String	COLUMN_PATIENTPRESPROBLEM			= "2";
	private static final String	COLUMN_AREA							= "3";
	private static final String	COLUMN_CURENTSTATUS					= "4";
	private static final String	COLUMN_COMMENTS						= "5";
	
	private static final String	COLUMNA_PATIENTID					= "6";
	private static final String	COLUMNA_PATIENTNAME					= "7";
	private static final String	COLUMNA_PATIENTPRESPROBLEM			= "8";

	
	protected void onFormModeChanged()
	{
	
	}
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);		
		if (args != null && args.length >0 && args[0] != null && args[0] instanceof  TrackingAreaShortVo)
			form.cmbArea().setValue((TrackingAreaShortVo) args[0]);
		if (args != null && args.length >1 && args[1] != null && args[1] instanceof TrackingStatus)
			form.cmbStatus().setValue((TrackingStatus) args[1]);
		
		doSearch();
			
	}
	private void createDynGrdCheckActionsWhiteBoard()
	{
		form.dyngrCheckActions().getRows().clear();
		form.dyngrCheckActions().clear();
		form.dyngrCheckActions().setSelectable(false);
		/*PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		DynamicGridColumn columnName = form.dyngrCheckActions().getColumns().newColumn(dispIdType.getText(), COLUMNA_PATIENTID);
		columnName.setWidth(100);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		
		columnName = form.dyngrCheckActions().getColumns().newColumn("Patient Name", COLUMNA_PATIENTNAME);
		columnName.setWidth(150);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		columnName = form.dyngrCheckActions().getColumns().newColumn("Patient Presenting Problem", COLUMNA_PATIENTPRESPROBLEM);
		columnName.setWidth(180);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);*/
		
		DynamicGridColumn columnName = null;
		
		if( form.getLocalContext().getWhiteBoardConfigVoIsNotNull() && form.getLocalContext().getWhiteBoardConfigVo().getSelectedActionsIsNotNull())
		{
			WhiteBoardOtherActionsVoCollection whiteActionsColl = form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions();
			if( whiteActionsColl != null && whiteActionsColl.size() > 0)
			{
				for(int i = 0; i < whiteActionsColl.size();i++)
				{
					WhiteBoardOtherActionsVo tempVo = whiteActionsColl.get(i); 
					if (tempVo != null && tempVo.getOtherActionType() != null)
					{
    					columnName = form.dyngrCheckActions().getColumns().newColumn(tempVo.getOtherActionType().getText(), tempVo.getOtherActionType());
    					columnName.setWidth(90);
    					columnName.setAlignment(Alignment.CENTER);
    					columnName.setHeaderAlignment(Alignment.CENTER);
    					columnName.setReadOnly(false);
					}
				}
			}
		}
	}
	
	private void createDynGrdWhiteBoard()
	{
		form.dyngrdWhiteBoard().getRows().clear();
		form.dyngrdWhiteBoard().clear();
		form.dyngrdWhiteBoard().setSelectable(false);
		//form.dyngrdWhiteBoard().setHeaderHeight(0);
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		DynamicGridColumn columnName = form.dyngrdWhiteBoard().getColumns().newColumn(dispIdType.getText(), COLUMN_PATIENTID);
		columnName.setWidth(100);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		
		columnName = form.dyngrdWhiteBoard().getColumns().newColumn("Patient Name", COLUMN_PATIENTNAME);
		columnName.setWidth(150);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		columnName = form.dyngrdWhiteBoard().getColumns().newColumn("Patient Presenting Problem", COLUMN_PATIENTPRESPROBLEM);
		columnName.setWidth(170);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		columnName = form.dyngrdWhiteBoard().getColumns().newColumn("Area", COLUMN_AREA);
		columnName.setWidth(100);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		columnName = form.dyngrdWhiteBoard().getColumns().newColumn("Current Status", COLUMN_CURENTSTATUS);
		columnName.setWidth(110);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		columnName = form.dyngrdWhiteBoard().getColumns().newColumn("Comment", COLUMN_COMMENTS);
		columnName.setWidth(75);
		columnName.setAlignment(Alignment.CENTER);
		columnName.setHeaderAlignment(Alignment.CENTER);
		columnName.setReadOnly(false);
		
		if( form.getLocalContext().getWhiteBoardConfigVoIsNotNull() && form.getLocalContext().getWhiteBoardConfigVo().getSelectedActionsIsNotNull())
		{
			WhiteBoardOtherActionsVoCollection whiteActionsColl = form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions();
			if( whiteActionsColl != null && whiteActionsColl.size() > 0)
			{
				for(int i = 0; i < whiteActionsColl.size();i++)
				{
					WhiteBoardOtherActionsVo tempVo = whiteActionsColl.get(i); 
					if (tempVo != null)
					{
    					columnName = form.dyngrdWhiteBoard().getColumns().newColumn((tempVo.getOtherActionType() != null ? tempVo.getOtherActionType().getText() : " "), tempVo.getOtherActionType());
    					columnName.setWidth(90);
    					columnName.setAlignment(Alignment.CENTER);
    					columnName.setHeaderAlignment(Alignment.CENTER);
    					columnName.setReadOnly(false);
					}
				}
			}
		}
	}
	private void doSearch()
	{
		form.dyngrdWhiteBoard().getRows().clear();
		form.dyngrCheckActions().getRows().clear();
		form.getGlobalContext().Emergency.setTracking(null);
		form.getGlobalContext().Core.setPatientShort(null);
		
		if (form.cmbArea().getValue() == null)
			return;
		
		TrackingForWhiteBoardVoCollection tempVoColl = domain.listTrackingPatients(form.cmbArea().getValue(), form.cmbStatus().getValue(),null);
		form.getLocalContext().setWhiteBoardConfigVo(domain.getEDWhiteBoardConfigByArea(form.cmbArea().getValue()));
		if( !form.getLocalContext().getWhiteBoardConfigVoIsNotNull() || !form.getLocalContext().getWhiteBoardConfigVo().getSelectedActionsIsNotNull() || form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().size() == 0 )
		{
			engine.showMessage("A whiteboard was not configured for " + form.cmbArea().getValue().getAreaDisplayName()+ " area. Please configure a whiteboard first and try again.");
		}
		else
		{
    		createDynGrdWhiteBoard();
    		createDynGrdCheckActionsWhiteBoard();
    		
    		if(tempVoColl != null)
    		{
    			populatedyngrdWhiteBoard(tempVoColl);
    			populatedyngrdCheckActions(tempVoColl);
    			
    		}
		}
		updateControlsState();
	}
	private void populatedyngrdCheckActions(TrackingForWhiteBoardVoCollection tempVoColl)
	{
		if( tempVoColl != null && tempVoColl.size() > 0)
		{
			
			TrackingForWhiteBoardVo trackVo = tempVoColl.get(0);
			if( trackVo != null )
			{
				addRowToDyngrdCheckActionsWhiteBoard(trackVo);
			}
			
		}
	}
	private void populatedyngrdWhiteBoard(TrackingForWhiteBoardVoCollection tempVoColl)
	{
		if( tempVoColl != null && tempVoColl.size() > 0)
		{
			for(int i = 0; i < tempVoColl.size();i++ )
			{
				TrackingForWhiteBoardVo trackVo = tempVoColl.get(i);
				if( trackVo != null )
				{
					addRowToDyngrdWhiteBoard(trackVo);
				}
			}
		}
	}
	private void addRowToDyngrdCheckActionsWhiteBoard(TrackingForWhiteBoardVo trackVo)
	{
		if( trackVo != null && form.getLocalContext().getWhiteBoardConfigVoIsNotNull())
		{
			PatientWhiteboardRecordVo patWhiteRecVo = domain.getPatientWhiteBoardRecordByPatientAndCareContext(trackVo.getPatient(), trackVo.getAttendanceIsNotNull() ? trackVo.getAttendance().getCareContext():null);
			
			TrackingForPatientWhiteBoardOtherActionsVo rowVo = new TrackingForPatientWhiteBoardOtherActionsVo();
			rowVo.setTracking(trackVo);
			
			
			rowVo.setPatientWhiteBoard(patWhiteRecVo);
			
			DynamicGridRow row = form.dyngrCheckActions().getRows().newRow();
			row.setValue(rowVo);
			row.setSelectable(false);
			
			if( patWhiteRecVo != null )			//check if the patient has PatientWhiteboardRecord record
			{
				if( patWhiteRecVo.getCurrentActionsIsNotNull() && patWhiteRecVo.getCurrentActions().size() > 0 )   //check if PatientWhiteboardRecord record has actions
				{
    				WhiteBoardOtherActionsVoCollection tempWhiteBoardColl = (WhiteBoardOtherActionsVoCollection) form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().clone();
    				for(int j = 0; j < patWhiteRecVo.getCurrentActions().size();j++)
    				{
    					
    					PatientWhiteboardActionsVo pWhite = patWhiteRecVo.getCurrentActions().get(j);
    					if( pWhite != null )
    					{
            				WhiteBoardOtherActionsVo tempWVo = pWhite.getActionType();
            				WhiteBoardOtherActionsVo forImgVo = null;
            				for(int u = 0;u < tempWhiteBoardColl.size();u++)
            				{
            					WhiteBoardOtherActionsVo tempWTAVo = tempWhiteBoardColl.get(u);
            					if( tempWTAVo.getOtherActionType().equals(tempWVo.getOtherActionType()))
            					{
            						forImgVo = tempWTAVo;
            						tempWhiteBoardColl.remove(tempWTAVo);
            					}
            				}
            				
            				if( form.dyngrCheckActions().getColumns().getByIdentifier(tempWVo.getOtherActionType()) != null)
            				{
            					
                				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrCheckActions().getColumns().getByIdentifier(tempWVo.getOtherActionType()), DynamicCellType.IMAGEBUTTON);
                				cellLabel.setIdentifier(pWhite);
                				
                				if( pWhite.getActionStatusIsNotNull() )
                				{
                					if( pWhite.getActionStatus().equals(WhiteBoardActionStatus.REQUIRED))
                					{
                						cellLabel.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getRequiredIcon().getID_AppImage():null));
                						cellLabel.setTooltip(pWhite.getActionStatus().getIItemText());
                						
                					}
                					else if( pWhite.getActionStatus().equals(WhiteBoardActionStatus.COMPLETED))
                					{
                						cellLabel.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getCompleteIcon().getID_AppImage():null));
                						cellLabel.setTooltip(pWhite.getActionStatus().getIItemText());
                					}
                					else
                					{
                						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
                						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
                						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
                					}
                				}
            				}
    					}
    					
    										
    				}
    				if( tempWhiteBoardColl != null && tempWhiteBoardColl.size() > 0)				//the case when WhiteBoard Configuration has more actions than PatientWhiteboardRecord
    				{
    					for( int m = 0; m < tempWhiteBoardColl.size(); m++)
    					{
    						
    						PatientWhiteboardActionsVoCollection patWhiteBoardActColl = patWhiteRecVo.getCurrentActions();
    						PatientWhiteboardActionsVo actionVo = new PatientWhiteboardActionsVo();
    	    				actionVo.setActionType(tempWhiteBoardColl.get(m));
    	    				actionVo.setActionStatus(WhiteBoardActionStatus.NO_ACTION);
    	    				AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
    						voAuthoring.setAuthoringDateTime(new DateTime());
    						voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
    						actionVo.setAuthoringInformation(voAuthoring);
    	    				actionVo.setAuthoringInformation(voAuthoring);
    	    				patWhiteBoardActColl.add(actionVo);
    	    				patWhiteRecVo.setCurrentActions(patWhiteBoardActColl);
    						
    													
    						
    						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrCheckActions().getColumns().getByIdentifier(tempWhiteBoardColl.get(m).getOtherActionType()), DynamicCellType.IMAGEBUTTON);
    						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
    						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
    						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
    						cellLabel.setIdentifier(actionVo);    						
    					}
    				}
				}
				else	//the case when PatientWhiteboardRecord record doesn't has actions
				{
					for( int z = 0; z < form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().size(); z++)
					{
						PatientWhiteboardActionsVoCollection patWhiteBoardActColl = patWhiteRecVo.getCurrentActions();
						PatientWhiteboardActionsVo actionVo = new PatientWhiteboardActionsVo();
	    				actionVo.setActionType(form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().get(z));
	    				actionVo.setActionStatus(WhiteBoardActionStatus.NO_ACTION);
	    				AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
						voAuthoring.setAuthoringDateTime(new DateTime());
						voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
						actionVo.setAuthoringInformation(voAuthoring);
	    				actionVo.setAuthoringInformation(voAuthoring);
	    				patWhiteBoardActColl.add(actionVo);
	    				patWhiteRecVo.setCurrentActions(patWhiteBoardActColl);
						
													
						
						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrCheckActions().getColumns().getByIdentifier(form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().get(z).getOtherActionType()), DynamicCellType.IMAGEBUTTON);
						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
						cellLabel.setIdentifier(actionVo);
					}
				}
				rowVo.setActions(null);
			}
			else		//the case when the patient doesn't has PatientWhiteboardRecord record
			{
				rowVo.setPatientWhiteBoard(null);
				if( form.getLocalContext().getWhiteBoardConfigVoIsNotNull() && form.getLocalContext().getWhiteBoardConfigVo().getSelectedActionsIsNotNull() && form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().size() > 0)
				{
					for( int k = 0; k < form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().size(); k++)
					{
						
						
						WhiteBoardOtherActionsVo tempWVo = form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().get(k);
						ActionWhiteBoardVo actionWhiteBoard = new ActionWhiteBoardVo();
						actionWhiteBoard.setAction(tempWVo);
						actionWhiteBoard.setStatus(WhiteBoardActionStatus.NO_ACTION);
						actionWhiteBoard.setNrColumn(k);
												
						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrCheckActions().getColumns().getByIdentifier(tempWVo.getOtherActionType()), DynamicCellType.IMAGEBUTTON);
						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
						ActionWhiteBoardVoCollection actionWhiteBcoll = rowVo.getActions();
						if( actionWhiteBcoll == null )
							actionWhiteBcoll = new ActionWhiteBoardVoCollection();
						actionWhiteBcoll.add(actionWhiteBoard);
						rowVo.setActions(actionWhiteBcoll);
						cellLabel.setIdentifier(tempWVo);
					}
				}
				
			}
		}
	}
	private void addRowToDyngrdWhiteBoard(TrackingForWhiteBoardVo trackVo)
	{
		if (trackVo != null  && form.getLocalContext().getWhiteBoardConfigVoIsNotNull())
		{
			PatientWhiteboardRecordVo patWhiteRecVo = domain.getPatientWhiteBoardRecordByPatientAndCareContext(trackVo.getPatient(), trackVo.getAttendanceIsNotNull() ? trackVo.getAttendance().getCareContext():null);
			
			TrackingForPatientWhiteBoardOtherActionsVo rowVo = new TrackingForPatientWhiteBoardOtherActionsVo();
			rowVo.setTracking(trackVo);
			
			rowVo.setPatientWhiteBoard(patWhiteRecVo);
			
			DynamicGridRow row = form.dyngrdWhiteBoard().getRows().newRow();
			row.setValue(rowVo);
			row.setSelectable(false);
			if (trackVo.getPatient().getDisplayId() != null) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(COLUMN_PATIENTID), DynamicCellType.STRING);
				cellLabel.setValue(trackVo.getPatient().getDisplayId().getValue());
				cellLabel.setTooltip(trackVo.getPatient().getDisplayId().getValue());
				cellLabel.setReadOnly(true);
			}
			if (trackVo.getPatient().getName() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(COLUMN_PATIENTNAME), DynamicCellType.STRING);
				cellLabel.setValue(trackVo.getPatient().getName().toString());
				cellLabel.setTooltip(trackVo.getPatient().getName().toString());
				cellLabel.setReadOnly(true);
			}
			if (trackVo.getTriageDetailsIsNotNull() && trackVo.getTriageDetails().getMainPresentingProblemIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(COLUMN_PATIENTPRESPROBLEM), DynamicCellType.STRING);
				cellLabel.setValue(trackVo.getTriageDetails().getMainPresentingProblem().getPatientProblem());
				cellLabel.setTooltip(trackVo.getTriageDetails().getMainPresentingProblem().getPatientProblem());
				cellLabel.setReadOnly(true);
			}
			if (trackVo.getCurrentAreaIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(COLUMN_AREA), DynamicCellType.STRING);
				cellLabel.setValue(trackVo.getCurrentArea().getAreaDisplayName());
				cellLabel.setTooltip(trackVo.getCurrentArea().getAreaDisplayName());
				cellLabel.setReadOnly(true);
			}
			if (trackVo.getCurrentStatusIsNotNull() && trackVo.getCurrentStatus().getStatusIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(COLUMN_CURENTSTATUS), DynamicCellType.STRING);
				cellLabel.setValue(trackVo.getCurrentStatus().getStatus().getIItemText());
				cellLabel.setTooltip(trackVo.getCurrentStatus().getStatus().getIItemText());
				cellLabel.setReadOnly(true);
			}
			if (trackVo.getAttendanceIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(COLUMN_COMMENTS), DynamicCellType.IMAGEBUTTON);
				cellLabel.setValue(trackVo.getAttendance().getCommentsIsNotNull() ? form.getImages().Emergency.AttendanceWComment24 : form.getImages().Emergency.AttendanceNoComment24);
				cellLabel.setTooltip(trackVo.getAttendance().getCommentsIsNotNull() ? ("Attendance Comments:<b> " + trackVo.getAttendance().getComments() + "</b>") : "Add Comment");
				cellLabel.setAutoPostBack(true);
			}
			if( patWhiteRecVo != null )		//check if the patient has PatientWhiteboardRecord record
			{
				if( patWhiteRecVo.getCurrentActionsIsNotNull() &&  patWhiteRecVo.getCurrentActions().size() > 0 )	//check if PatientWhiteboardRecord record has actions
				{
    				WhiteBoardOtherActionsVoCollection tempWhiteBoardColl = (WhiteBoardOtherActionsVoCollection) form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().clone();
    				
    				for(int j = 0; j < patWhiteRecVo.getCurrentActions().size();j++)
    				{
    					
    					PatientWhiteboardActionsVo pWhite = patWhiteRecVo.getCurrentActions().get(j);
    					if( pWhite != null )
    					{
            				WhiteBoardOtherActionsVo tempWVo = pWhite.getActionType();
            				
            				WhiteBoardOtherActionsVo forImgVo = null;
            				for(int u = 0;u < tempWhiteBoardColl.size();u++)
            				{
            					WhiteBoardOtherActionsVo tempWTAVo = tempWhiteBoardColl.get(u);
            					if( tempWTAVo.getOtherActionType().equals(tempWVo.getOtherActionType()))
            					{
            						forImgVo = tempWTAVo;
            						tempWhiteBoardColl.remove(tempWTAVo);
            						
            					}
            				}
            				
            				
            				
            				if( form.dyngrdWhiteBoard().getColumns().getByIdentifier(tempWVo.getOtherActionType()) != null)
            				{
            					
                				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(tempWVo.getOtherActionType()), DynamicCellType.IMAGEBUTTON);
                				cellLabel.setIdentifier(pWhite);
                				
                				if( pWhite.getActionStatusIsNotNull() )
                				{
                					if( pWhite.getActionStatus().equals(WhiteBoardActionStatus.REQUIRED))
                					{
                						cellLabel.setValue(engine.getRegisteredImage(forImgVo.getRequiredIcon().getID_AppImage()));
                						cellLabel.setTooltip(pWhite.getActionStatus().getIItemText());
                						
                					}
                					else if( pWhite.getActionStatus().equals(WhiteBoardActionStatus.COMPLETED))
                					{
                						cellLabel.setValue(engine.getRegisteredImage(forImgVo.getCompleteIcon().getID_AppImage()));
                						cellLabel.setTooltip(pWhite.getActionStatus().getIItemText());
                					}
                					else
                					{
                						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
                						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
                						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
                					}
                				}
            				}
    					}
    					
    					
    					
    					
    				}
    				if( tempWhiteBoardColl != null && tempWhiteBoardColl.size() > 0)		//the case when WhiteBoard Configuration has more actions than PatientWhiteboardRecord
    				{
    					for( int m = 0; m < tempWhiteBoardColl.size(); m++)
    					{
    						
    						PatientWhiteboardActionsVoCollection patWhiteBoardActColl = patWhiteRecVo.getCurrentActions();
    						PatientWhiteboardActionsVo actionVo = new PatientWhiteboardActionsVo();
    	    				actionVo.setActionType(tempWhiteBoardColl.get(m));
    	    				actionVo.setActionStatus(WhiteBoardActionStatus.NO_ACTION);
    	    				AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
    						voAuthoring.setAuthoringDateTime(new DateTime());
    						voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
    						actionVo.setAuthoringInformation(voAuthoring);
    	    				actionVo.setAuthoringInformation(voAuthoring);
    	    				patWhiteBoardActColl.add(actionVo);
    	    				patWhiteRecVo.setCurrentActions(patWhiteBoardActColl);
    						
    													
    						
    						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(tempWhiteBoardColl.get(m).getOtherActionType()), DynamicCellType.IMAGEBUTTON);
    						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
    						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
    						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
    						cellLabel.setIdentifier(actionVo);
    						
    						
    					}
    				}
				}
				else	//the case when PatientWhiteboardRecord record doesn't has actions
				{
					for( int z = 0; z < form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().size(); z++)
					{
						PatientWhiteboardActionsVoCollection patWhiteBoardActColl = patWhiteRecVo.getCurrentActions();
						PatientWhiteboardActionsVo actionVo = new PatientWhiteboardActionsVo();
	    				actionVo.setActionType(form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().get(z));
	    				actionVo.setActionStatus(WhiteBoardActionStatus.NO_ACTION);
	    				AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
						voAuthoring.setAuthoringDateTime(new DateTime());
						voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
						actionVo.setAuthoringInformation(voAuthoring);
	    				actionVo.setAuthoringInformation(voAuthoring);
	    				patWhiteBoardActColl.add(actionVo);
	    				patWhiteRecVo.setCurrentActions(patWhiteBoardActColl);
						
													
						
						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().get(z).getOtherActionType()), DynamicCellType.IMAGEBUTTON);
						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
						cellLabel.setIdentifier(actionVo);
					}
				}
				rowVo.setActions(null);
			}
			else			//the case when the patient doesn't has PatientWhiteboardRecord record
			{
				rowVo.setPatientWhiteBoard(null);
				if( form.getLocalContext().getWhiteBoardConfigVoIsNotNull() && form.getLocalContext().getWhiteBoardConfigVo().getSelectedActionsIsNotNull() && form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().size() > 0)
				{
					for( int k = 0; k < form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().size(); k++)
					{
						
						
						WhiteBoardOtherActionsVo tempWVo = form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().get(k);
						ActionWhiteBoardVo actionWhiteBoard = new ActionWhiteBoardVo();
						actionWhiteBoard.setAction(tempWVo);
						actionWhiteBoard.setStatus(WhiteBoardActionStatus.NO_ACTION);
						actionWhiteBoard.setNrColumn(k);
												
						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdWhiteBoard().getColumns().getByIdentifier(tempWVo.getOtherActionType()), DynamicCellType.IMAGEBUTTON);
						//cellLabel.setValue(form.getImages().Core.TimerStartDisabled24);
						cellLabel.setValue(form.getImages().Emergency.Empty_Button_24);
						cellLabel.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
						ActionWhiteBoardVoCollection actionWhiteBcoll = rowVo.getActions();
						if( actionWhiteBcoll == null )
							actionWhiteBcoll = new ActionWhiteBoardVoCollection();
						actionWhiteBcoll.add(actionWhiteBoard);
						rowVo.setActions(actionWhiteBcoll);
						cellLabel.setIdentifier(tempWVo);
					}
				}
				
			}
		}
	}
	private void initialize(Object[] args)
	{
		if (args != null && args.length >0 && args[0] != null && args[0] instanceof  TrackingAreaShortVo)
		{			
			form.getLocalContext().setSelectedArea((TrackingAreaShortVo) args[0]);
		}	
		populateAreasCombo();
		form.getLocalContext().setWhiteBoardConfigVo(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}
	private void populateAreasCombo()
	{
		form.cmbArea().clear();
		TrackingAreaShortVoCollection tempVoColl = domain.listTrackingAreas(form.getLocalContext().getSelectedAreaIsNotNull() ? form.getLocalContext().getSelectedArea().getEDLocation() : (engine.getCurrentLocation() != null ? new LocationRefVo(engine.getCurrentLocation().getID(), 0) : null));
		TrackingAreaShortVo overral = null; 
		if( tempVoColl != null && tempVoColl.size() > 0 )
		{
						
			for( int i = 0; i < tempVoColl.size();i++ )
			{
				TrackingAreaShortVo  tempTrVo = tempVoColl.get(i);
				if( tempTrVo != null && tempTrVo.getIsOverallViewIsNotNull() && Boolean.TRUE.equals(tempTrVo.getIsOverallView()))
					overral = tempTrVo;
				form.cmbArea().newRow(tempTrVo,tempTrVo.getAreaDisplayName());
			}
			if( overral != null)
				form.cmbArea().setValue(overral);
		}
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().Emergency.EDAttendanceCommentsDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			doSearch();
		}
	}
	
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onDyngrCheckActionsCellButtonClicked(DynamicGridCell cell)
	{

		clickButtonDynGridEvent(cell,Boolean.TRUE);
		
	}
	protected void onDyngrdWhiteBoardCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		clickButtonDynGridEvent(cell,null);
		
	}
	private void changeActions(WhiteBoardActionStatus status , WhiteBoardOtherActionsVo whiteBoard,WhiteBoardOtherActionsVo forImgVo )
	{
		for( int i = 0; i < form.dyngrdWhiteBoard().getRows().size(); i++)
		{
			changeallColumnActions(form.dyngrdWhiteBoard().getRows().get(i),(TrackingForPatientWhiteBoardOtherActionsVo) form.dyngrdWhiteBoard().getRows().get(i).getValue(),status,whiteBoard,forImgVo);
			
		}
	}
	
	private void changeallColumnActions( DynamicGridRow row, TrackingForPatientWhiteBoardOtherActionsVo rowTWVo,WhiteBoardActionStatus status , WhiteBoardOtherActionsVo whiteBoard,WhiteBoardOtherActionsVo forImgVo )
	{
		
			if( rowTWVo != null )
			{
				if( rowTWVo.getPatientWhiteBoardIsNotNull())		//check if the patient has PatientWhiteboardRecord record
				{
					PatientWhiteboardRecordVo patWhiteRecRowVo = rowTWVo.getPatientWhiteBoard();
					if( patWhiteRecRowVo.getCurrentActionsIsNotNull() && patWhiteRecRowVo.getCurrentActions().size() > 0)
					{
						for(int i = 0;i < patWhiteRecRowVo.getCurrentActions().size();i++ )
						{
							if( patWhiteRecRowVo.getCurrentActions().get(i).getActionTypeIsNotNull() && whiteBoard instanceof WhiteBoardOtherActionsVo &&  patWhiteRecRowVo.getCurrentActions().get(i).getActionType().getOtherActionTooltipIsNotNull() &&  patWhiteRecRowVo.getCurrentActions().get(i).getActionType().getOtherActionType().equals(whiteBoard.getOtherActionType()))
							{
								patWhiteRecRowVo.getCurrentActions().get(i).setActionStatus(status);
								DynamicGridCell cell = row.getCells().get(form.dyngrdWhiteBoard().getColumns().getByIdentifier(whiteBoard.getOtherActionType()));
								
								if( status.equals(WhiteBoardActionStatus.COMPLETED))
								{
									cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getCompleteIcon().getID_AppImage():null));
									cell.setTooltip(WhiteBoardActionStatus.COMPLETED.getIItemText());
								}
								else if(status.equals(WhiteBoardActionStatus.REQUIRED))
								{
									cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getRequiredIcon().getID_AppImage():null));
									cell.setTooltip(WhiteBoardActionStatus.REQUIRED.getIItemText());
								}
								else if( status.equals(WhiteBoardActionStatus.NO_ACTION))
								{
									cell.setValue(form.getImages().Emergency.Empty_Button_24);
									cell.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
								}
									//cell.setValue(form.getImages().Core.TimerStartDisabled24);
								
								//adding action to the historycollection 
								PatientWhiteboardActionsVo actionVo = new PatientWhiteboardActionsVo();
	    						actionVo.setActionType(patWhiteRecRowVo.getCurrentActions().get(i).getActionType());
	    						actionVo.setActionStatus(patWhiteRecRowVo.getCurrentActions().get(i).getActionStatus());
	    						actionVo.setAuthoringInformation(patWhiteRecRowVo.getAuthoringInformation());
	    						PatientWhiteboardActionsVoCollection histColl = patWhiteRecRowVo.getActionHistory();
	    						if( histColl == null )
	    							histColl = new PatientWhiteboardActionsVoCollection();
	    						
	    						
	    						for( int g = 0; g < histColl.size();g++)
	    						{
	    							if( !histColl.get(g).getID_PatientWhiteboardActionsIsNotNull() && histColl.get(g).getActionTypeIsNotNull() && histColl.get(g).getActionType().equals(patWhiteRecRowVo.getCurrentActions().get(i).getActionType()))
	    							{
	    								histColl.remove(histColl.get(g));
	    							}
	    						}
	    						
	    						if( !patWhiteRecRowVo.getCurrentActions().get(i).getID_PatientWhiteboardActionsIsNotNull() && actionVo.getActionStatus().equals(WhiteBoardActionStatus.NO_ACTION))
	    						{
	    							;
	    						}
	    						else
	    						{
	    							histColl.add(actionVo);
	    						}
	    						
	    						
	    						patWhiteRecRowVo.setActionHistory(histColl);
							
	    						rowTWVo.setPatientWhiteBoard(patWhiteRecRowVo);
										
									
							}
						}
					}
				}
				else if( rowTWVo.getActionsIsNotNull())
				{
					for(int j = 0; j < rowTWVo.getActions().size() ; j++)
					{
						if( whiteBoard instanceof WhiteBoardOtherActionsVo &&  rowTWVo.getActions().get(j).getActionIsNotNull() &&rowTWVo.getActions().get(j).getAction().getOtherActionTypeIsNotNull() && rowTWVo.getActions().get(j).getAction().getOtherActionType().equals(whiteBoard.getOtherActionType()))
						{
							
							rowTWVo.getActions().get(j).setStatus(status);
							DynamicGridCell cell = row.getCells().get(form.dyngrdWhiteBoard().getColumns().getByIdentifier(whiteBoard.getOtherActionType()));
							if( status.equals(WhiteBoardActionStatus.COMPLETED))
							{
								cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getCompleteIcon().getID_AppImage():null));
								cell.setTooltip(WhiteBoardActionStatus.COMPLETED.getIItemText());
							}
							else if(status.equals(WhiteBoardActionStatus.REQUIRED))
							{
								cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getRequiredIcon().getID_AppImage():null));
								cell.setTooltip(WhiteBoardActionStatus.REQUIRED.getIItemText());
							}
							else if( status.equals(WhiteBoardActionStatus.NO_ACTION))
							{
								cell.setValue(form.getImages().Emergency.Empty_Button_24);
								cell.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
							}
								//cell.setValue(form.getImages().Core.TimerStartDisabled24);
						}
						
					}
				}
				rowTWVo.setIsEditing(Boolean.TRUE);
			}
			
				
		

	}
	private void clickButtonDynGridEvent(ims.framework.controls.DynamicGridCell cell, Boolean checkColumnActions)
	{
		WhiteBoardOtherActionsVo forImgVo = null;
		DynamicGridRow  row = cell.getRow();
		if (row == null)
			return;

		TrackingForPatientWhiteBoardOtherActionsVo rowTWVo = (TrackingForPatientWhiteBoardOtherActionsVo) row.getValue();

		if (rowTWVo == null)
			return;		
		if( rowTWVo.getPatientWhiteBoardIsNotNull())	//check if the patient has already a PatientWhiteBoardRecord Bo 
		{
			PatientWhiteboardActionsVo forimg = null;
			if( cell.getIdentifier() != null && cell.getIdentifier() instanceof PatientWhiteboardActionsVo )
				forimg = (PatientWhiteboardActionsVo) cell.getIdentifier();

			WhiteBoardOtherActionsVoCollection tempWhiteBoardColl = (WhiteBoardOtherActionsVoCollection) form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().clone();
			for(int u = 0;u < tempWhiteBoardColl.size();u++)
			{
				WhiteBoardOtherActionsVo tempWTAVo = tempWhiteBoardColl.get(u);
				if( forimg != null && tempWTAVo != null && tempWTAVo.getOtherActionType().equals(forimg.getActionType().getOtherActionType()))
				{
					forImgVo = tempWTAVo;

				}
			}

			PatientWhiteboardRecordVo patWhiteRecVo = rowTWVo.getPatientWhiteBoard();
			if( patWhiteRecVo.getCurrentActionsIsNotNull() && patWhiteRecVo.getCurrentActions().size() > 0)
			{
				for(int i = 0;i < patWhiteRecVo.getCurrentActions().size();i++ )
				{
					PatientWhiteboardActionsVo patWhiteBoardAcPatientWhiteboardActionsVo = (PatientWhiteboardActionsVo)cell.getIdentifier();
					if( patWhiteRecVo.getCurrentActions().get(i) != null && patWhiteBoardAcPatientWhiteboardActionsVo != null && cell.getIdentifier() instanceof PatientWhiteboardActionsVo && patWhiteBoardAcPatientWhiteboardActionsVo.getActionTypeIsNotNull() && patWhiteRecVo.getCurrentActions().get(i).getActionTypeIsNotNull() && patWhiteRecVo.getCurrentActions().get(i).getActionType().getOtherActionTypeIsNotNull() &&   patWhiteRecVo.getCurrentActions().get(i).getActionType().getOtherActionType().equals(patWhiteBoardAcPatientWhiteboardActionsVo.getActionType().getOtherActionType()))
					{
						if( patWhiteRecVo.getCurrentActions().get(i).getActionStatusIsNotNull() )
						{
							if( patWhiteRecVo.getCurrentActions().get(i).getActionStatus().equals(WhiteBoardActionStatus.REQUIRED ))
							{
								patWhiteRecVo.getCurrentActions().get(i).setActionStatus(WhiteBoardActionStatus.COMPLETED);
								cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getCompleteIcon().getID_AppImage():null));
								cell.setTooltip(WhiteBoardActionStatus.COMPLETED.getIItemText());
								if( Boolean.TRUE.equals(checkColumnActions))
								{
									changeActions(WhiteBoardActionStatus.COMPLETED, patWhiteRecVo.getCurrentActions().get(i).getActionType(),forImgVo);
								}
							}
							else if( patWhiteRecVo.getCurrentActions().get(i).getActionStatus().equals(WhiteBoardActionStatus.COMPLETED))
							{
								patWhiteRecVo.getCurrentActions().get(i).setActionStatus(WhiteBoardActionStatus.NO_ACTION);
								//cell.setValue(form.getImages().Core.TimerStartDisabled24);
								cell.setValue(form.getImages().Emergency.Empty_Button_24);
								cell.setTooltip(WhiteBoardActionStatus.NO_ACTION.getIItemText());
								if( Boolean.TRUE.equals(checkColumnActions))
								{
									changeActions(WhiteBoardActionStatus.NO_ACTION,patWhiteRecVo.getCurrentActions().get(i).getActionType(),forImgVo );
								}
							}
							else 
							{
								patWhiteRecVo.getCurrentActions().get(i).setActionStatus(WhiteBoardActionStatus.REQUIRED);
								cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getRequiredIcon().getID_AppImage():null));
								cell.setTooltip(WhiteBoardActionStatus.REQUIRED.getIItemText());
								if( Boolean.TRUE.equals(checkColumnActions))
								{
									changeActions(WhiteBoardActionStatus.REQUIRED,patWhiteRecVo.getCurrentActions().get(i).getActionType() ,forImgVo);
								}
							}
						}
						else
						{
							patWhiteRecVo.getCurrentActions().get(i).setActionStatus(WhiteBoardActionStatus.REQUIRED);
							cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getRequiredIcon().getID_AppImage():null));
							cell.setTooltip(WhiteBoardActionStatus.REQUIRED.getIItemText());
							if( Boolean.TRUE.equals(checkColumnActions))
							{
								changeActions(WhiteBoardActionStatus.REQUIRED,patWhiteRecVo.getCurrentActions().get(i).getActionType(),forImgVo );
							}

						}
						if( Boolean.FALSE.equals(checkColumnActions))
						{
							//adding action to the historycollection 
							PatientWhiteboardActionsVo actionVo = new PatientWhiteboardActionsVo();
							actionVo.setActionType(patWhiteRecVo.getCurrentActions().get(i).getActionType());
							actionVo.setActionStatus(patWhiteRecVo.getCurrentActions().get(i).getActionStatus());
							actionVo.setAuthoringInformation(patWhiteRecVo.getAuthoringInformation());
							PatientWhiteboardActionsVoCollection histColl = patWhiteRecVo.getActionHistory();
							if( histColl == null )
								histColl = new PatientWhiteboardActionsVoCollection();


							for( int g = 0; g < histColl.size();g++)
							{
								if( !histColl.get(g).getID_PatientWhiteboardActionsIsNotNull() && histColl.get(g).getActionTypeIsNotNull() && histColl.get(g).getActionType().equals(patWhiteRecVo.getCurrentActions().get(i).getActionType()))
								{
									histColl.remove(histColl.get(g));
								}
							}

							if( !patWhiteRecVo.getCurrentActions().get(i).getID_PatientWhiteboardActionsIsNotNull() && actionVo.getActionStatus().equals(WhiteBoardActionStatus.NO_ACTION))
							{
								;
							}
							else
							{
								histColl.add(actionVo);
							}


							patWhiteRecVo.setActionHistory(histColl);
						}
						rowTWVo.setPatientWhiteBoard(patWhiteRecVo);



					}
				}
			}
		}
		else if( rowTWVo.getActionsIsNotNull())								//the case when the patient hasn't PatientWhiteBoardRecord record 
		{

			for(int j = 0; j < rowTWVo.getActions().size() ; j++)
			{
				WhiteBoardOtherActionsVo whiteBoardOtherACtTempVo = (WhiteBoardOtherActionsVo) cell.getIdentifier();
				if( whiteBoardOtherACtTempVo != null && cell.getIdentifier() instanceof WhiteBoardOtherActionsVo && whiteBoardOtherACtTempVo.getOtherActionTooltipIsNotNull() &&  rowTWVo.getActions().get(j).getActionIsNotNull() && rowTWVo.getActions().get(j).getAction().getOtherActionTypeIsNotNull() && rowTWVo.getActions().get(j).getAction().getOtherActionType().equals(whiteBoardOtherACtTempVo.getOtherActionType()))
				{
					WhiteBoardOtherActionsVoCollection tempWhiteBoardColl = (WhiteBoardOtherActionsVoCollection) form.getLocalContext().getWhiteBoardConfigVo().getSelectedActions().clone();
					for(int u = 0;u < tempWhiteBoardColl.size();u++)
					{
						WhiteBoardOtherActionsVo tempWTAVo = tempWhiteBoardColl.get(u);
						if( tempWTAVo.getOtherActionType().equals(rowTWVo.getActions().get(j).getAction().getOtherActionType()))
						{
							forImgVo = tempWTAVo;

						}
					}

					if( rowTWVo.getActions().get(j).getStatusIsNotNull() )
					{
						if( rowTWVo.getActions().get(j).getStatus().equals(WhiteBoardActionStatus.NO_ACTION))
						{
							rowTWVo.getActions().get(j).setStatus(WhiteBoardActionStatus.REQUIRED);
							cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getRequiredIcon().getID_AppImage():null));
							cell.setTooltip(rowTWVo.getActions().get(j).getStatus().getIItemText());
							if( Boolean.TRUE.equals(checkColumnActions))
							{
								changeActions(WhiteBoardActionStatus.REQUIRED, (WhiteBoardOtherActionsVo) cell.getIdentifier() ,forImgVo);
							}
						}
						else if( rowTWVo.getActions().get(j).getStatus().equals(WhiteBoardActionStatus.REQUIRED) )
						{
							rowTWVo.getActions().get(j).setStatus(WhiteBoardActionStatus.COMPLETED);
							cell.setValue(engine.getRegisteredImage(forImgVo != null ? forImgVo.getCompleteIcon().getID_AppImage():null));
							cell.setTooltip(rowTWVo.getActions().get(j).getStatus().getIItemText());
							if( Boolean.TRUE.equals(checkColumnActions))
							{
								changeActions(WhiteBoardActionStatus.COMPLETED, (WhiteBoardOtherActionsVo) cell.getIdentifier(),forImgVo );
							}
						}
						else if( rowTWVo.getActions().get(j).getStatus().equals(WhiteBoardActionStatus.COMPLETED))
						{
							rowTWVo.getActions().get(j).setStatus(WhiteBoardActionStatus.NO_ACTION);
							//cell.setValue(form.getImages().Core.TimerStartDisabled24);
							cell.setValue(form.getImages().Emergency.Empty_Button_24);
							cell.setTooltip(rowTWVo.getActions().get(j).getStatus().getIItemText());
							if( Boolean.TRUE.equals(checkColumnActions))
							{
								changeActions(WhiteBoardActionStatus.NO_ACTION, (WhiteBoardOtherActionsVo) cell.getIdentifier(),forImgVo );
							}
						}
					}
				}						

			}
		}
		if (cell.getColumn().equals(form.dyngrdWhiteBoard().getColumns().getByIdentifier(COLUMN_COMMENTS)))
		{			
			form.getGlobalContext().Emergency.setTracking(rowTWVo.getTracking() != null ? rowTWVo.getTracking().toTrackingRefVo() : null);
			form.getGlobalContext().Core.setPatientShort(rowTWVo.getTracking() != null ? domain.getPatientShort(rowTWVo.getTracking().getPatient()) : null);
			engine.open(form.getForms().Emergency.EDAttendanceCommentsDialog);
		}
		rowTWVo.setIsEditing(Boolean.TRUE);

	}

	
	protected void onDyngrdWhiteBoardCellValueChanged(ims.framework.controls.DynamicGridCell cell)
	{
		
	}
	
	protected void onDyngrdWhiteBoardRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		// TODO Add your code here.
	}
	
	protected void onCmbStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{		
		doSearch();
	}
	
	protected void onCmbAreaValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{		
		doSearch();
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
		{
			//doSearch();
			engine.close(DialogResult.OK);
		}
		
	}
	private boolean save()
	{
		PatientWhiteboardRecordVoCollection recordColl = populateDataFromScreen();
		if( recordColl == null || recordColl.size() == 0)
		{
			engine.showMessage("Please select at least one action.");
			return false;
		}
		
		String[] errors = recordColl.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.save(recordColl);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	private PatientWhiteboardRecordVoCollection populateDataFromScreen()
	{
		PatientWhiteboardRecordVoCollection tempColl = new PatientWhiteboardRecordVoCollection();
		for(int i = 0; i < form.dyngrdWhiteBoard().getRows().size();i++)
		{
			TrackingForPatientWhiteBoardOtherActionsVo tempVo = (TrackingForPatientWhiteBoardOtherActionsVo) form.dyngrdWhiteBoard().getRows().get(i).getValue();
			if( tempVo != null && Boolean.TRUE.equals(tempVo.getIsEditing()))
			{
				
				if( tempVo.getPatientWhiteBoardIsNotNull() )		//check if the patient has already a PatientWhiteBoardRecord record
				{
					if( tempVo.getPatientWhiteBoard().getCurrentActionsIsNotNull() && tempVo.getPatientWhiteBoard().getCurrentActions().size() > 0 )
					{
						for(int h = 0 ; h < tempVo.getPatientWhiteBoard().getCurrentActions().size();h++)
						{
							if( !tempVo.getPatientWhiteBoard().getCurrentActions().get(h).getID_PatientWhiteboardActionsIsNotNull() && tempVo.getPatientWhiteBoard().getCurrentActions().get(h).getActionStatusIsNotNull() && tempVo.getPatientWhiteBoard().getCurrentActions().get(h).getActionStatus().equals(WhiteBoardActionStatus.NO_ACTION))
							{
								tempVo.getPatientWhiteBoard().getCurrentActions().remove(tempVo.getPatientWhiteBoard().getCurrentActions().get(h));
								
							}
						}
					}
					//PatientWhiteboardActionsVoCollection  tempCollN = tempVo.getPatientWhiteBoard().getCurrentActions();
					/*PatientWhiteboardActionsVoCollection  tempCollNew = new PatientWhiteboardActionsVoCollection();
					for(int g =0;g<tempCollN.size();g++)
					{
						tempCollNew.add(tempCollN.get(g));
					}*/
					//tempVo.getPatientWhiteBoard().setCurrentActions(tempCollN);
					
					tempColl.add(tempVo.getPatientWhiteBoard());
				}
				else if( tempVo.getActionsIsNotNull())				//the case when the patient hasn't a PatientWhiteBoardRecord record
				{
					PatientWhiteboardRecordVo tempNewVo = new PatientWhiteboardRecordVo();
					tempNewVo.setPatient(tempVo.getTrackingIsNotNull() ? tempVo.getTracking().getPatient():null);
					tempNewVo.setAttendance(tempVo.getTrackingIsNotNull() && tempVo.getTracking().getAttendanceIsNotNull() ? tempVo.getTracking().getAttendance().getCareContext():null);
					tempNewVo.setEpisode(tempVo.getTrackingIsNotNull() && tempVo.getTracking().getEpisodeIsNotNull() ? tempVo.getTracking().getEpisode().getEpisodeOfCare():null);
					
					AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
					voAuthoring.setAuthoringDateTime(new DateTime());
					voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
					tempNewVo.setAuthoringInformation(voAuthoring);
					PatientWhiteboardActionsVoCollection patWhiteBoardActColl = new PatientWhiteboardActionsVoCollection();
					for( int k = 0; k < tempVo.getActions().size();k++)
					{
						if( !tempVo.getActions().get(k).getStatus().equals(WhiteBoardActionStatus.NO_ACTION))	//take those actions that are not NO_ACTION
						{
    						PatientWhiteboardActionsVo actionVo = new PatientWhiteboardActionsVo();
    						actionVo.setActionType(tempVo.getActions().get(k).getAction());
    						actionVo.setActionStatus(tempVo.getActions().get(k).getStatus());
    						actionVo.setAuthoringInformation(tempNewVo.getAuthoringInformation());
    						patWhiteBoardActColl.add(actionVo);
						}
					}
					tempNewVo.setCurrentActions(patWhiteBoardActColl);
					tempNewVo.setActionHistory(patWhiteBoardActColl);
					tempColl.add(tempNewVo);
					
				}
			}
		}
		return tempColl;
	}
	private void updateControlsState()
	{
		form.btnSave().setEnabled(form.dyngrdWhiteBoard().getRows().size() > 0);
	}

	
	
	
	
}
