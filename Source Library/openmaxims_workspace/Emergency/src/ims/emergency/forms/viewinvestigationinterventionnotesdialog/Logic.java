//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5557.23004)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.viewinvestigationinterventionnotesdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.emergency.forms.viewinvestigationinterventionnotesdialog.GenForm.grdNotesRow;
import ims.emergency.vo.AttendanceClinicalNotesVo;
import ims.emergency.vo.AttendanceClinicalNotesVoCollection;
import ims.emergency.vo.lookups.AttendanceClinicalNoteType;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		AttendanceClinicalNoteType noteType=null;
		CareContextRefVo careContextRef=null;
		PatientRefVo patientRef=null;
		
		if (args!=null && args.length>0 && args[0]!=null &&  args[0] instanceof AttendanceClinicalNoteType)
		{
			noteType = (AttendanceClinicalNoteType)args[0];
		}
		
		if (args!=null && args.length>1 && args[1]!=null && args[1] instanceof PatientRefVo)
		{
			patientRef=(PatientRefVo) args[1];
		}
		
		if (args!=null && args.length>2 && args[2]!=null && args[2] instanceof CareContextRefVo)
		{
			careContextRef=(CareContextRefVo) args[2];
		}
		
		if (noteType==null || patientRef==null || careContextRef==null)
			return;
		
		AttendanceClinicalNotesVoCollection collNotes = domain.listAttendanceNotes(patientRef,careContextRef, noteType);
		populateGrid(collNotes);
		
	}
	private void populateGrid(AttendanceClinicalNotesVoCollection collNotes)
	{
		form.grdNotes().getRows().clear();
		if (collNotes==null || collNotes.size()==0)
			return;
		
		for (int i=0;i<collNotes.size();i++)
		{
			addNoteRow(collNotes.get(i));
		}
	}
	
	private void addNoteRow(AttendanceClinicalNotesVo note) 
	{
		if(note == null)
			return;
		
		grdNotesRow row = form.grdNotes().getRows().newRow();
		
		StringBuffer sb = new StringBuffer();
		
		if(note.getAuthoringInformationIsNotNull())
		{
			sb.append("<b>" + note.getAuthoringInformation().getAuthoringDateTime());
			
			if(note.getAuthoringInformation().getAuthoringHcpIsNotNull())
			{
				if(sb.length() > 0)
					sb.append(" - ");
				
				sb.append(note.getAuthoringInformation().getAuthoringHcp().getIHcpName());
			}
			
			sb.append("</b>");
		}
		
		row.setColAuthoring(Boolean.TRUE.equals(note.getIsCorrected()) ? "<s>" + sb.toString() + "</s>" : sb.toString());
				
		if( note.getNoteTypeIsNotNull())	
		{
			row.setColNoteType(Boolean.TRUE.equals(note.getIsCorrected()) ? "<s>" + note.getNoteType().getIItemText() + "</s>" : note.getNoteType().getIItemText());
			row.setCellColNoteTypeTooltip(note.getNoteType().getIItemText());
		}
			
		if( note.getClinicalNoteIsNotNull() )	
		{
			row.setColNote(Boolean.TRUE.equals(note.getIsCorrected()) ? "<s>" + note.getClinicalNote() + "</s>" : note.getClinicalNote());
			row.setCellColNoteTooltip(note.getClinicalNote());
		}
		
		if( Boolean.TRUE.equals(note.getIsCorrected()) )
		{
			StringBuffer sb1 = new StringBuffer();
			String hcp = "<b>" + "Correcting HCP : " +  "</b>";			
			String datec = "<b>" +  "Correction Date/Time : " + "</b>";
			if(note.getCorrectedAuthoringInformationIsNotNull())
			{
				hcp +=  note.getCorrectedAuthoringInformation().getAuthoringHcp().getName().toString();
				datec += note.getCorrectedAuthoringInformation().getAuthoringDateTime().toString();
			}
			
			sb1.append(hcp);
			sb1.append("<br>");
			sb1.append(datec );
			sb1.append("<br>");
			sb1.append("<b>" + "Correction Comments : "+ "</b>" + (note.getCorrectionComments() != null ? note.getCorrectionComments():""));
			row.setTooltip(sb1.toString());
			
			row.setBackColor(ConfigFlag.UI.CORRECTION_ROW_COLOUR.getValue());
		}
		row.setValue(note);
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
}
