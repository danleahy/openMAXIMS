//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.triageprotocolassessment;

import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientProblemVo;
import ims.core.vo.VSMetrics;
import ims.core.vo.lookups.Sex;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.edassessmentcomponent.Logic.TriagePriorityEnum;
import ims.emergency.forms.triageprotocolassessment.GenForm.grdPrioritiesRow;
import ims.emergency.vo.ManchesterTriageProtocolConfigForTriageProtocolAssessmentVo;
import ims.emergency.vo.ProtocolDiscriminatorLiteVo;
import ims.emergency.vo.TriageForTriageProtocolAssessmentVo;
import ims.emergency.vo.TriageProtocolAssessmentVo;
import ims.emergency.vo.enums.TriageAssessmentAction;
import ims.emergency.vo.lookups.TriagePriority;
import ims.emergency.vo.lookups.TriagePriorityChange;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handler functions
	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize form
		initialize();

		if (args != null && args.length >= 1)
		{
			if (args[0] instanceof TriageAssessmentAction)
				form.getLocalContext().setTriageAssessmentAction((TriageAssessmentAction) args[0]);
		}

		// Present form to screen
		open();

		// Check the parameters that open the dialog
		// Keep this code here as initialize() and open() functions do update the check for main problem
		if (args != null && args.length >= 2 && Boolean.TRUE.equals(args[1]) || TriageAssessmentAction.RETRIAGE.equals(args[0]))
		{
			form.chkMainProblem().setValue(true);
		}

		form.chkMainProblem().setEnabled(false);
	}


	@Override
	protected void onQmbProblemTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		// List clinical problems to query combobox
		form.getLocalContext().setSelectedProtocolDiscriminator(null);

		populateProblems(domain.listProblems(value));
		form.qmbProblem().showOpened();//WDEV-17640
	}

	@Override
	protected void onQmbProblemValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// When a problem is selected then populate the protocol, priority and discriminator
		form.getLocalContext().setSelectedProtocolDiscriminator(null);
		updateProblemSelection();
	}

	@Override
	protected void onQmbAssessmentHCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		// List HCP (discipline Nurse) to query combobox
		populateNurses(domain.listNurses(value));
	}

	@Override
	protected void onGrdPrioritiesSelectionChanged() throws PresentationLogicException
	{
		// Update discriminator selection
		updateDiscriminatorSelectionChanged(form.grdPriorities().getValue(), true);
	}

	@Override
	protected void onGrdPrioritiesGridCheckBoxClicked(int column, grdPrioritiesRow row, boolean isChecked) throws PresentationLogicException
	{
		// Update discriminator selection
		updateDiscriminatorSelectionChanged(row.getValue(), isChecked);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Attempt to save; if save is successful then close dialog with OK as result
		if (save())
		{
			if (isPatientNotWeighedForUnderOneYear())	//WDEV-21082
				form.getLocalContext().setPatientWeighedConfirm(engine.showMessage("All patients under 1 years of age must be weighed.", "Reminder:", MessageButtons.OK, MessageIcon.INFORMATION));
			else
				engine.close(DialogResult.OK);
			//WDEV-18999 
			getValidationMessageForHCGandISAR();	
		}
	}
	
	//WDEV-21082
	private boolean isPatientNotWeighedForUnderOneYear()
	{
		Integer patientAge = form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().calculateAge() : null;
		if(form.getGlobalContext().Core.getPatientShort() != null)
		{
			VSMetrics patientMetrics = domain.getMetricsFromPatient(form.getGlobalContext().Core.getPatientShort());
		
			if(patientAge != null && patientAge < 1 && patientMetrics == null)
				return true;
			else if (patientAge != null && patientAge < 1 && patientMetrics.getWeightValue() == null)
				return true;
		}
		
		return false;		
	}

	private void getValidationMessageForHCGandISAR()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		Boolean HCGMessageWasAdded = false;
		
		Integer patAge = form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().calculateAge() : null;
		
		if (showHCGMessage(patAge))
		{
				errorList.add("Please record an HCG Urine Test for this patient.");
				HCGMessageWasAdded = true;
		}
		
		if (showISARMessage(patAge))
		{
			if (Boolean.TRUE.equals(HCGMessageWasAdded))
				errorList.add("\n\nPlease record an ISAR assessment for this patient.");
			else
				errorList.add("Please record an ISAR assessment for this patient.");
		}
			
		if (errorList != null && errorList.size() > 0)
		{
			String[] validationMassages = errorList.toArray(new String[errorList.size()]);
			String validationMassage = "";
			
			for (int i = 0; i < validationMassages.length; i++ )
				validationMassage = validationMassage + validationMassages[i];
			
			engine.showMessage(validationMassage, "Warning", MessageButtons.OK, MessageIcon.WARNING );
		}		
	}

	private boolean showISARMessage(Integer patAge)
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull() && patAge != null &&
			ConfigFlag.GEN.ISAR_ASSESSMENT_AGE_LIMIT.getValue() <= patAge && 
			( TriageAssessmentAction.ADD.equals(form.getLocalContext().getTriageAssessmentAction()) ||
			  TriageAssessmentAction.RETRIAGE.equals(form.getLocalContext().getTriageAssessmentAction())) )
				return true;
		
		return false;
	}

	private boolean showHCGMessage(Integer patAge)
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull() && patAge != null &&
			ConfigFlag.GEN.HCG_TEST_LOWER_AGE_LIMIT.getValue() <= patAge &&
			ConfigFlag.GEN.HCG_TEST_UPPER_AGE_LIMIT.getValue() >= patAge &&
			Sex.FEMALE.equals(form.getGlobalContext().Core.getPatientShort().getSex()) &&
			( TriageAssessmentAction.ADD.equals(form.getLocalContext().getTriageAssessmentAction()) ||
			  TriageAssessmentAction.RETRIAGE.equals(form.getLocalContext().getTriageAssessmentAction())) &&
			domain.isAbdominalPainProtocol(form.getGlobalContext().Emergency.getTriage()) )
				return true;
		
		return false;
	}


	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Close dialog with CANCEL as result
		engine.close(DialogResult.CANCEL);
	}

	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// -------------------------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialize()
	{
		// Get the triage record
		form.getLocalContext().setTriage(domain.getTriage(form.getGlobalContext().Emergency.getTriage()));
		// Get Triage Protocol Assessment
		form.getLocalContext().setTriageProtocolAssessment(domain.getTriageProtocolAssessment(form.getGlobalContext().Emergency.getTriageProtocolAssessment()));
		// Determine if the patient is still in ED
		form.getLocalContext().setIsPatientInED(domain.getIsPatientInED(form.getLocalContext().getTriage()));
		// Get the emergency episode
		form.getLocalContext().setEmergencyEpisode(domain.getEmergencyEpisode(form.getLocalContext().getTriage().getEpisode()));
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clearInstanceControls();

		// Populate screen with data
		populateOnOpenInstanceControls();
		form.qmbProblem().setFocus();

		// Set form in EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public void clearInstanceControls()
	{
		form.txtPresentingComplain().setValue(null);

		form.qmbProblem().clear();
		
		form.chkMainProblem().setValue(false);

		form.txtProtocolName().setValue(null);

		form.grdPriorities().getRows().clear();

		setTriagePriority(null);//WDEV-19475	
		form.txtDiscriminator().setValue(null);
		form.txtDiscriminatorDescription().setValue(null);

		form.qmbAssessmentHCP().clear();

		form.dtimAsessmentDate().setValue(null);
	}

	protected void populateOnOpenInstanceControls()
	{
		// Set presenting complain
		form.txtPresentingComplain().setValue(form.getLocalContext().getEmergencyEpisode().getPresentingComplaint() != null ? form.getLocalContext().getEmergencyEpisode().getPresentingComplaint().getText() : "");
		
		// If a Triage Protocol Assessment is provided - then it is an edit operation
		// otherwise, if it is a main problem a GC context with a clinical problem will be provided,
		// else, third case - nothing is provided and user will be forced to search for a problem
		if (form.getGlobalContext().Emergency.getTriageProtocolAssessment() != null)
		{
			// Populate instance controls with TriageProtocolAssessment record
			populateInstanceControls(form.getLocalContext().getTriageProtocolAssessment());
			
			// If it is a Re Triage operation default in the Authoring Informatio
			if (TriageAssessmentAction.RETRIAGE.equals(form.getLocalContext().getTriageAssessmentAction()))
			{
				populateDefaultAuthoringControls();
			}
		}
		else if (form.getGlobalContext().Emergency.getMainPresentingProblem() != null)
		{
			form.qmbProblem().newRow(form.getGlobalContext().Emergency.getMainPresentingProblem(), form.getGlobalContext().Emergency.getMainPresentingProblem().getPCName());
			form.qmbProblem().setValue(form.getGlobalContext().Emergency.getMainPresentingProblem());
			
			form.chkMainProblem().setValue(true);
			
			updateProblemSelection();
			// Default in Authoring Information
			populateDefaultAuthoringControls();
		}
		else
		{
			updateProblemSelection();
			// Default in Authoring Information
			populateDefaultAuthoringControls();
		}
	}

	private void populateInstanceControls(TriageProtocolAssessmentVo triageProtocolAssessment)
	{
		// Do not clear the instance controls - or else the control for presenting complaint will be cleared as well
		
		if (triageProtocolAssessment == null)
			return;
		
		// Fill in presenting problem
		form.qmbProblem().newRow(triageProtocolAssessment.getPatientProblem().getProblem(), triageProtocolAssessment.getPatientProblem().getProblem().getPCName());
		form.qmbProblem().setValue(triageProtocolAssessment.getPatientProblem().getProblem());
		
		// Check main problem
		form.chkMainProblem().setValue(Boolean.TRUE.equals(triageProtocolAssessment.getIsMain()));
		
		// Update problem selection
		updateProblemSelection();
		
		// Attempt to select descriptor (if still applies)
		grdPrioritiesRow discriminatorRow = form.grdPriorities().getRowByValue(triageProtocolAssessment.getDiscriminator());
		
		if(discriminatorRow != null)//	WDEV-15137
		{
			discriminatorRow.setColSelect(true);
		}
		
		// Update discriminator selection changed
		updateDiscriminatorSelectionChanged(triageProtocolAssessment.getDiscriminator(), true);
		
		// Update authoring information
		form.qmbAssessmentHCP().newRow(triageProtocolAssessment.getAssessmentNurse(), triageProtocolAssessment.getAssessmentNurse().toString());
		form.qmbAssessmentHCP().setValue(triageProtocolAssessment.getAssessmentNurse());
		form.dtimAsessmentDate().setValue(triageProtocolAssessment.getAssessmentDateTime());
	}

	private void populateDefaultAuthoringControls()
	{
		// Default in Assessment HCP
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		
		if (hcpUser != null)//WDEV-17240
		{
			form.qmbAssessmentHCP().newRow(hcpUser, hcpUser.toString());
			form.qmbAssessmentHCP().setValue(hcpUser);
		}
		
		form.dtimAsessmentDate().setValue(new DateTime());
	}

	protected void populateProblems(ClinicalProblemShortVoCollection problems) //WDEV-17640
	{
		// Clear problem query combo-box
		form.qmbProblem().clear();

		// Check problem collection
		if (problems == null)
		{
			form.qmbProblem().showOpened();
			return;
		}

		for (ClinicalProblemShortVo problem : problems)
		{
			form.qmbProblem().newRow(problem, problem.getPCName());
		}
	}

	protected void updateProblemSelection()
	{
		// Clear controls depending on problem selection
		form.txtProtocolName().setValue(null);
		form.getLocalContext().setSelectedManchesterTriageProtocol(null);

		form.grdPriorities().getRows().clear();

		setTriagePriority(null);//WDEV-19475
		form.txtDiscriminator().setValue(null);
		form.txtDiscriminatorDescription().setValue(null);

		// Check selected value for problem
		if (form.qmbProblem().getValue() == null)
			return;

		// Get triage protocol for selected problem
		ManchesterTriageProtocolConfigForTriageProtocolAssessmentVo triageProtocol = domain.getTriageProtocol(form.qmbProblem().getValue());
		
		if (triageProtocol == null)
			return;
		
		// Display protocol name
		form.txtProtocolName().setValue(triageProtocol.getProtocolName());
		form.getLocalContext().setSelectedManchesterTriageProtocol(triageProtocol);

		// Display discriminators
		if (triageProtocol.getDiscriminatorsIsNotNull())
		{
			for (ProtocolDiscriminatorLiteVo discriminator : triageProtocol.getDiscriminators())
			{
				// Create a new discriminator row
				grdPrioritiesRow discriminatorRow = form.grdPriorities().getRows().newRow();
				discriminatorRow.setBackColor(Color.LightGray);//WDEV-18346
				discriminatorRow.setColPriority("<font color =\""+ discriminator.getPriority().getColor().getName() +"\">" + discriminator.getPriority().getText() + "</font>");
				discriminatorRow.setColDiscriminator(discriminator.getDiscriminator().getDiscriminatorName());
				discriminatorRow.setColSelect(false);
				
				discriminatorRow.setValue(discriminator);
				discriminatorRow.setSelectable(false);
			}
		}
		
		// Display default priority
		setTriagePriority(triageProtocol.getDefaultPriority());	//WDEV-19475
	}

	private void setTriagePriority(TriagePriority defaultPriority)
	{
		if (defaultPriority == null)
		{
			form.imgTriagePriority().setValue(null);
			form.imgTriagePriority().setVisible(false);
			return;
		}
		if (TriagePriority.PRIORITY1.equals(defaultPriority))
			form.imgTriagePriority().setValue(form.getImages().Emergency.Triage_Priority_P1);
		else if (TriagePriority.PRIORITY2.equals(defaultPriority))
			form.imgTriagePriority().setValue(form.getImages().Emergency.Triage_Priority_P2);
		else if (TriagePriority.PRIORITY3.equals(defaultPriority))
			form.imgTriagePriority().setValue(form.getImages().Emergency.Triage_Priority_P3);
		else if (TriagePriority.PRIORITY4.equals(defaultPriority))
			form.imgTriagePriority().setValue(form.getImages().Emergency.Triage_Priority_P4);
		else if (TriagePriority.PRIORITY5.equals(defaultPriority))
			form.imgTriagePriority().setValue(form.getImages().Emergency.Triage_Priority_P5);
		else if (TriagePriority.SKIPPED_TRIAGE.equals(defaultPriority))
			form.imgTriagePriority().setValue(form.getImages().Emergency.Triage_Priority_SkippedTriage);
		form.imgTriagePriority().setVisible(true);;
	}

	private void updateDiscriminatorSelectionChanged(ProtocolDiscriminatorLiteVo discriminator, boolean checked)
	{
		clearDiscriminatorControls();
		
		if (discriminator == null || checked == false)
		{
			form.getLocalContext().setSelectedProtocolDiscriminator(null);
			populateDiscriminatorControls(null);
			return;
		}
		
		form.getLocalContext().setSelectedProtocolDiscriminator(discriminator);
		
		for (int i = 0; i < form.grdPriorities().getRows().size(); i++)
		{
			ProtocolDiscriminatorLiteVo rowValue = form.grdPriorities().getRows().get(i).getValue();
			
			if (!rowValue.equals(discriminator))
			{
				form.grdPriorities().getRows().get(i).setColSelect(false);
			}
		}
		
		populateDiscriminatorControls(discriminator);
	}

	private void populateDiscriminatorControls(ProtocolDiscriminatorLiteVo discriminator)
	{
		clearDiscriminatorControls();
		
		if (discriminator == null)
		{
			ManchesterTriageProtocolConfigForTriageProtocolAssessmentVo selectedManchesterProtocol = form.getLocalContext().getSelectedManchesterTriageProtocol();
			
			// Revert back to Manchester Protocol default priority
			if (selectedManchesterProtocol != null)
			{
				setTriagePriority(selectedManchesterProtocol.getDefaultPriority());//WDEV-19475
			}
			
			return;
		}
		
		setTriagePriority(discriminator.getPriority());//WDEV-19475
		form.txtDiscriminator().setValue(discriminator.getDiscriminator().getDiscriminatorName());
		form.txtDiscriminatorDescription().setValue(discriminator.getDiscriminator().getDiscriminatorDescription());
	}

	private void clearDiscriminatorControls()
	{
		setTriagePriority(null);//WDEV-19475
		form.txtDiscriminator().setValue(null);
		form.txtDiscriminatorDescription().setValue(null);
	}


	private void populateNurses(HcpLiteVoCollection nurses)
	{
		form.qmbAssessmentHCP().clear();

		if (nurses == null)
		{
			form.qmbAssessmentHCP().showOpened();
			return;
		}

		for (HcpLiteVo nurse : nurses)
		{
			form.qmbAssessmentHCP().newRow(nurse, nurse.toString());
		}

		if (nurses.size() == 1)
		{
			form.qmbAssessmentHCP().setValue(nurses.get(0));
		}
		else
		{
			form.qmbAssessmentHCP().showOpened();
		}
	}


	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			if (form.getLocalContext().getTriage() == null)
				throw new CodingRuntimeException("Triage must be selected");
			
			TriageForTriageProtocolAssessmentVo triage = (TriageForTriageProtocolAssessmentVo) form.getLocalContext().getTriage().clone();
			
			// Get on screen values
			TriageProtocolAssessmentVo originalRecord = form.getLocalContext().getTriageProtocolAssessment();
			
			TriageProtocolAssessmentVo protocolAssessment = null;
			if (originalRecord == null || TriageAssessmentAction.RETRIAGE.equals(form.getLocalContext().getTriageAssessmentAction()))
				protocolAssessment = populateDataFromScreen(null);
			else
				protocolAssessment = populateDataFromScreen((TriageProtocolAssessmentVo) originalRecord.clone());
			

			if (TriageAssessmentAction.ADD.equals(form.getLocalContext().getTriageAssessmentAction()))
			{
				return saveTriageAssessment(triage, originalRecord, protocolAssessment);
			}
			else if (TriageAssessmentAction.EDIT.equals(form.getLocalContext().getTriageAssessmentAction()))
			{
				return saveTriageAssessment(triage, originalRecord, protocolAssessment);
			}
			else if (TriageAssessmentAction.RETRIAGE.equals(form.getLocalContext().getTriageAssessmentAction()))
			{
				return saveTriageAssessment(triage, originalRecord, protocolAssessment);
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		return false;
	}


	private boolean saveTriageAssessment(TriageForTriageProtocolAssessmentVo triage, TriageProtocolAssessmentVo originalRecord, TriageProtocolAssessmentVo protocolAssessment) throws StaleObjectException
	{
		// NOTE: original record can be NULL
		
		if (form.chkMainProblem().getValue() == true)
		{
			TriageProtocolAssessmentVo currentTriageProtocol = null;
			
			if (triage.getCurrentTriageAssessment() != null && triage.getCurrentTriageAssessment().equals(originalRecord) && !protocolAssessment.equals(originalRecord))
			{
				currentTriageProtocol = triage.getCurrentTriageAssessment();
//				currentTriageProtocol.setIsMain(false);

				// Triage was changed so check if the initial triage needs to be updated
				if (triage.getInitialTriageAssessment() == null)
				{
					triage.setInitialTriageAssessment(currentTriageProtocol);
				}
			}
			
			if (triage.getInitialTriageAssessment() != null && !triage.getInitialTriageAssessment().equals(protocolAssessment))
				triage.setTriagePriorityChange(getTriagePriorityChange(triage.getInitialTriageAssessment().getTriagePriority(), protocolAssessment.getTriagePriority()));

			triage.setCurrentTriageAssessment(protocolAssessment);
			triage.setCurrentTriagePriority(protocolAssessment.getTriagePriority());
			triage.setMainPresentingProblem(protocolAssessment.getPatientProblem());

			// Validate records to be saved & validate UI rules
			String errors[] = triage.validate(protocolAssessment.validate((validateUIRules())));
			if (currentTriageProtocol != null)
				errors = currentTriageProtocol.validate(errors);
			
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			domain.saveTriageWithAssessment(triage, currentTriageProtocol);
		}
		else
		{
			if (triage.getCurrentTriageAssessment() != null && triage.getCurrentTriageAssessment().equals(protocolAssessment) && Boolean.TRUE.equals(originalRecord.getIsMain()))
			{
				triage.setCurrentTriageAssessment(null);
				triage.setCurrentTriagePriority(null);
//				triage.setMainPresentingProblem(null);
			}

			// Validate records to be saved & validate UI rules
			String errors[] = triage.validate(protocolAssessment.validate((validateUIRules())));

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			domain.saveTriageWithAssessment(triage, protocolAssessment);
		}

		return true;
	}

	private TriagePriorityChange getTriagePriorityChange(TriagePriority initialPriority, TriagePriority currentPriority)
	{
		if (initialPriority == null)
			return null;
		
		Integer initialPriorityOrder = getOrderByPriority(initialPriority);
		Integer currentPriorityOrder = getOrderByPriority(currentPriority);
		
		if (initialPriorityOrder == null || currentPriorityOrder == null)
			return null;
		
		int compare = initialPriorityOrder.compareTo(currentPriorityOrder);

		if (compare < 0)
			return TriagePriorityChange.PRIORITY_DECREASED;
		else if (compare > 0)
			return TriagePriorityChange.PRIORITY_ELEVATED;
		
		return TriagePriorityChange.SAME_PRIORITY;
	}
	
	private Integer getOrderByPriority(TriagePriority priority)
	{
		for(TriagePriorityEnum item : TriagePriorityEnum.values())
		{
			if(item.getIndex().equals(priority))
				return item.getOrder();
		}
		
		return null;
	}



	private String[] validateUIRules()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
			
		if (form.qmbProblem().getValue() == null)
		{
			errorList.add("Presenting Problem is mandatory");
		}

		return errorList.toArray(new String[errorList.size()]);
	}

	private TriageProtocolAssessmentVo populateDataFromScreen(TriageProtocolAssessmentVo instance)
	{
		// Create an instance for Triage Protocol Assessment if needed
		if (instance == null)
		{
			instance = new TriageProtocolAssessmentVo();

			// Set GC values (Patient, Episode of Care, Care Context)
			instance.setPatient(form.getGlobalContext().Core.getPatientShort());
			instance.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			instance.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		if (form.qmbProblem().getValue() != null)
		{
			// Update problem in TriageProtocolAssessment, or create one if needed
			PatientProblemVo problem = instance.getPatientProblem();
			
			if (problem == null)
			{
				problem = new PatientProblemVo();
				problem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				problem.setIsActive(Boolean.TRUE);

				// Set Patient Problem to instance
				instance.setPatientProblem(problem);
			}

			problem.setPatientProblem(form.qmbProblem().getValue().getPCName());
			problem.setProblem(form.qmbProblem().getValue());
		}
		
		// Set instance as main problem
		instance.setIsMain(form.chkMainProblem().getValue());
		
		// If a discriminator is selected - fill in discriminator and discriminator priority
		// Otherwise use default priority from Manchester Protocol
		instance.setDiscriminator(form.getLocalContext().getSelectedProtocolDiscriminator());

		if (form.getLocalContext().getSelectedProtocolDiscriminatorIsNotNull())
		{
			instance.setTriagePriority(form.getLocalContext().getSelectedProtocolDiscriminator().getPriority());
		}
		else
		{
			if (form.getLocalContext().getSelectedManchesterTriageProtocol() != null)
			{
				instance.setTriagePriority(form.getLocalContext().getSelectedManchesterTriageProtocol().getDefaultPriority());
			}
			else
			{
				instance.setTriagePriority(TriagePriority.PRIORITY5);
			}
		}
		
		// Set triage protocol
		instance.setTriageProtocol(form.getLocalContext().getSelectedManchesterTriageProtocol());
		
		// Set authoring information
		instance.setAssessmentNurse(form.qmbAssessmentHCP().getValue());
		instance.setAssessmentDateTime(form.dtimAsessmentDate().getValue());
		
		// Return created instance
		return instance;
	}

	//WDEV-21082
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{	
		if (form.getLocalContext().getPatientWeighedConfirm() != null && messageBoxId == form.getLocalContext().getPatientWeighedConfirm())
		{
			form.getLocalContext().setPatientWeighedConfirm(null);	
			engine.close(DialogResult.OK);
		}
	}
}
