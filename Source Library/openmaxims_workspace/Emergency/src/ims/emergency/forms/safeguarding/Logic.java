//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ovidiu Roibu using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.safeguarding;

import java.util.ArrayList;

import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.SafeguardingVo;
import ims.framework.cn.events.UpdateTheme;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		open();
	}
	
	protected void onFormModeChanged() 
	{
		
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);	
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{

		if(save())
		{
			engine.close(DialogResult.OK);
		}

	}

	
	private void open()
	{
		form.getGlobalContext().Emergency.setSafeguardingDetails(domain.getSafeguardingDetails(form.getGlobalContext().Core.getPatientShort().getID_Patient()));
		populateControlsFromData();
	}
	
	private void populateControlsFromData()
	{
		if(form.getGlobalContext().Emergency.getSafeguardingDetails() == null)
			return;
		
		form.txtNameOtherAdults().setValue(form.getGlobalContext().Emergency.getSafeguardingDetails().getNameOfOtherAdultsInHouse());
		form.txtSocialWorkers().setValue(form.getGlobalContext().Emergency.getSafeguardingDetails().getSocialWorkers());
		form.txtComments().setValue(form.getGlobalContext().Emergency.getSafeguardingDetails().getComments());
		
	}
	
	private SafeguardingVo populateDataFromScreen(SafeguardingVo safeguarding)
	{
		if (safeguarding == null)
			safeguarding = new SafeguardingVo();
		else
			safeguarding = (SafeguardingVo) safeguarding.clone();
		
		safeguarding.setPatient(form.getGlobalContext().Core.getPatientShort());
		safeguarding.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		safeguarding.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		safeguarding.setNameOfOtherAdultsInHouse(form.txtNameOtherAdults().getValue());
		safeguarding.setSocialWorkers(form.txtSocialWorkers().getValue());
		safeguarding.setComments(form.txtComments().getValue());
		

		return safeguarding;
	}
	
	private String[] validateSafeguarding()
	{	
		ArrayList<String> errors = new ArrayList<String>();
	
		if(form.txtNameOtherAdults().getValue() == null && form.txtSocialWorkers().getValue() == null && form.txtComments().getValue() == null)
		{
			errors.add("At least one field is mandatory.");
		}

		if (errors.size()>0)
		{
			return errors.toArray(new String[errors.size()]);

		}
		return null;
	}
	
	private boolean save()
	{
		try
		{	
			SafeguardingVo safeguardingDetails = populateDataFromScreen(form.getGlobalContext().Emergency.getSafeguardingDetails());

			String []errosValidate = safeguardingDetails.validate(validateSafeguarding());

			if(errosValidate != null && errosValidate.length > 0)
			{
				engine.showErrors(errosValidate);
				return false;
			}

			form.getGlobalContext().Emergency.setSafeguardingDetails(domain.saveSafeguardingDetails(safeguardingDetails));

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
	}

}
