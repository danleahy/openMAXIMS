//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edwhiteboardnewdialog;

import ims.admin.vo.AppImageVo;
import ims.configuration.EnvironmentConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AppDBImageVo;
import ims.core.vo.lookups.Sex;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.PatientAssessmentForWhiteboardVo;
import ims.emergency.vo.PatientWhiteboardActionsVo;
import ims.emergency.vo.PatientWhiteboardActionsVoCollection;
import ims.emergency.vo.PatientWhiteboardRecordVo;
import ims.emergency.vo.TrackingAreaForTrackingVo;
import ims.emergency.vo.TrackingAreaShortVo;
import ims.emergency.vo.TrackingAreaShortVoCollection;
import ims.emergency.vo.TrackingForPatientWhiteBoardVo;
import ims.emergency.vo.TrackingForPatientWhiteBoardVoCollection;
import ims.emergency.vo.WhiteBoardAssessmentConfigVo;
import ims.emergency.vo.WhiteBoardConfigVo;
import ims.emergency.vo.WhiteBoardOtherActionsVo;
import ims.emergency.vo.WhiteBoardOtherActionsVoCollection;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.TriagePriority;
import ims.emergency.vo.lookups.WhiteBoardActionStatus;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellTable;
import ims.framework.controls.DynamicGridCellTable.TableCell;
import ims.framework.controls.DynamicGridCellTable.TableCellOptions;
import ims.framework.controls.DynamicGridCellTable.TableCellType;
import ims.framework.controls.DynamicGridCellTable.TableRow;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.Align;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FontFamily;
import ims.framework.enumerations.FontStyle;
import ims.framework.enumerations.FontWeight;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Base64;
import ims.framework.utils.Color;
import ims.framework.utils.Image;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final Integer COLUMN0			= 0;
	private static final Integer	COLUMN1			= 1;
	private static final Integer	COLUMN2			= 2;
	private static final Integer	COLUMN3			= 3;
	
	private static final char MASKED_NAME_TEXT  	= '*';
	
	private static final String 	BUTTON_CELL_EDIT		= "EDIT";

	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args!=null && args.length>0 && args[0]!=null && args[0] instanceof TrackingAreaForTrackingVo )
		{
			form.getLocalContext().setSelectedArea(domain.getTrackingArea((TrackingAreaForTrackingVo)args[0]));
		}
		
		initialize();
		doSearch();
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.btnClose().setVisible(engine.isDialog());
		updatePublicPrivateButtonText();
	}

	private void initialize()
	{	
		populateAreasCombo();
		initializeDynamicGrid();
		form.getLocalContext().setPublicArea(form.getGlobalContext().Emergency.getTrackingPublicArea());
		if (form.getLocalContext().getPublicArea()==null)
		{
			form.getLocalContext().setPublicArea(false);
		}
		
		form.getGlobalContext().Emergency.setWhiteBoardConfig(domain.getEDWhiteBoardConfigByArea(form.cmbArea().getValue()));
		
		initializeTimers();
	}
	
	private void initializeTimers() 
	{
		if (form.cmbArea().getValue()!=null )
		{
			form.getTimers().gettimerRefresh().setEnabled(true);
	
    		int refreshTime = form.getGlobalContext().Emergency.getWhiteBoardConfigIsNotNull() && form.getGlobalContext().Emergency.getWhiteBoardConfig().getRefreshIntervalIsNotNull() ? form.getGlobalContext().Emergency.getWhiteBoardConfig().getRefreshInterval() : 0 ;
    		
    		form.getTimers().gettimerRefresh().setInterval(refreshTime *60);
		}
	}
	
	private void populateAreasCombo()
	{
		form.cmbArea().clear();
		TrackingAreaShortVoCollection tempVoColl = domain.listTrackingAreas(engine.getCurrentLocation());
		TrackingAreaShortVo overral = null; 
		if( tempVoColl != null && tempVoColl.size() > 0 )
		{
						
			for( int i = 0; i < tempVoColl.size();i++ )
			{
				TrackingAreaShortVo  tempTrVo = tempVoColl.get(i);
				if( tempTrVo != null && tempTrVo.getIsOverallViewIsNotNull() && Boolean.TRUE.equals(tempTrVo.getIsOverallView()))
					overral = tempTrVo;
				form.cmbArea().newRow(tempTrVo,tempTrVo.getAreaDisplayName());
			}
			
			if (form.getLocalContext().getSelectedAreaIsNotNull())
			{
				form.cmbArea().setValue(form.getLocalContext().getSelectedArea());
			}
			else if( overral != null)
			{
				form.cmbArea().setValue(overral);
			}
		}
	}
	
	private void initializeDynamicGrid()
	{
		form.dyngrdWhiteBoard().clear();
		form.dyngrdWhiteBoard().setHeaderHeight(0);
		form.dyngrdWhiteBoard().setSelectable(false);

		DynamicGridColumn column = form.dyngrdWhiteBoard().getColumns().newColumn("",COLUMN0);
		column.setWidth(460);
	//	column.setAlignment(Alignment.CENTER);
//		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
		column.setReadOnly(true);
		
		column = form.dyngrdWhiteBoard().getColumns().newColumn("",COLUMN1);
		column.setWidth(460);
//		column.setAlignment(Alignment.RIGHT);
//		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
	
		column = form.dyngrdWhiteBoard().getColumns().newColumn("",COLUMN2);
		column.setWidth(460);
//		column.setAlignment(Alignment.RIGHT);
//		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
//		column.setCaptionImage(form.getImages().Assessment.Assessment24);
		
		column = form.dyngrdWhiteBoard().getColumns().newColumn("",COLUMN3);
		column.setWidth(460);
	//	column.setAlignment(Alignment.RIGHT);
//		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
//		column.setCaptionImage(form.getImages().Nursing.WaterlowView24);	
	}

	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		doSearch();
	}

	protected void onCmbAreaValueChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setWhiteBoardConfig(domain.getEDWhiteBoardConfigByArea(form.cmbArea().getValue()));
		initializeTimers();
		doSearch();
	}
	
	private void doSearch()
	{	
		if (form.getGlobalContext().Emergency.getWhiteBoardConfig()==null)
		{
			engine.showMessage("WhiteBoard is not configured for selected area!");
			form.dyngrdWhiteBoard().getRows().clear();
			return;
		}
		
		long startTime = System.currentTimeMillis();
		
		TrackingForPatientWhiteBoardVoCollection trackingPatients = domain.listTrackingPatients(form.cmbArea().getValue(),form.cmbStatus().getValue() , null);
		
		long endTime = System.currentTimeMillis();
		long miliseconds = endTime - startTime;
		System.out.println("Time to list TrackingPatiens: " + miliseconds);
		
		startTime = System.currentTimeMillis();
		
		populateDynGrid(trackingPatients);
		
		endTime = System.currentTimeMillis();
		miliseconds = endTime - startTime;
		System.out.println("Time to populate DynGrid: " + miliseconds);
		
	}

	private void populateDynGrid(TrackingForPatientWhiteBoardVoCollection trackingPatiens)
	{
		deletePatientImages();
		form.dyngrdWhiteBoard().getRows().clear();
		
		if( trackingPatiens == null || trackingPatiens.size() < 1)
			return;
		
		DynamicGridRow row  = form.dyngrdWhiteBoard().getRows().newRow();
		
		for(int i = 0; i < trackingPatiens.size();i++)
		{
			TrackingForPatientWhiteBoardVo tempVo = trackingPatiens.get(i);
	
			if (i!=0 && i % 4 ==0)
			{
				row  = form.dyngrdWhiteBoard().getRows().newRow();
			}
			
			if( tempVo != null)
			{
				addPatientCell(tempVo,row,i%4);
			}
			
		}
	}

	private void deletePatientImages() 
	{
		List<String> importedFiles = form.getLocalContext().getPatientImagesList();
		
		if (importedFiles != null && importedFiles.size() > 0)
		{
			for (Iterator<String> iterator = importedFiles.iterator(); iterator.hasNext();) 
			{
				String file = ((String) iterator.next()).replace("/", "\\");
				File f = new File(file);
				f.delete();											
			}
		}
	}

	private void addPatientCell(TrackingForPatientWhiteBoardVo tempVo, DynamicGridRow row, int column)
	{
		if( tempVo == null)
			return ;
		
		DynamicGridCell cellLabel = row.getCells().newCell(getColumn(column), DynamicCellType.TABLE);
		
		DynamicGridCellTable helper = new DynamicGridCellTable(cellLabel);		
		helper.setBorder(3);	
		
		long startTime = System.currentTimeMillis();
		
		addPatientAndTrackingDetailsToTableCell(tempVo, helper);

		long endTime = System.currentTimeMillis();
		long miliseconds = endTime - startTime;
		System.out.println("Time to addPatientAndTrackingDetailsToTableCell: " + miliseconds);
		
		
		startTime = System.currentTimeMillis();
		
		addActionButtonsToTableCell(tempVo, helper);
		//addActionButtonsToTableCell1(tempVo, helper);
		
		endTime = System.currentTimeMillis();
		miliseconds = endTime - startTime;
		System.out.println("Time to addActionButtonsToTableCell: " + miliseconds);
		
		startTime = System.currentTimeMillis();
		
		addAssessmentButtonsToTableCell(tempVo, helper);
		
		endTime = System.currentTimeMillis();
		miliseconds = endTime - startTime;
		System.out.println("Time to addAssessmentButtonsToTableCell: " + miliseconds);
		
		cellLabel.setValue(helper);
		cellLabel.setReadOnly(true);
		cellLabel.setIdentifier(tempVo);
	
	}

	private TableRow addPatientAndTrackingDetailsToTableCell(TrackingForPatientWhiteBoardVo tempVo, DynamicGridCellTable helper)
	{
		AppImageVo patientImage = null;
		
		try 
		{
			patientImage = getPatientImage(tempVo);
			
			if(tempVo != null && tempVo.getPatient() != null && tempVo.getPatient().getPhoto() != null)
			{
				addPatientToLocalCollection(patientImage);
			}
		}
		catch (IOException e) 
		{
			
		}
		
		//-----------------------ROW 1 -------------------------
		TableRow  tableRow = helper.getRows().newRow();
		
		//Patient			
		TableCell tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		TableCellOptions cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(270);		
		tableCell.setColSpan(5);			
		if (tempVo.getPatientIsNotNull() && tempVo.getPatient().getNameIsNotNull())
		{
			String strSurname = tempVo.getPatient().getName().getSurname();
			if( strSurname == null )
				strSurname = "                 ";
			
			if (Boolean.TRUE.equals(form.getLocalContext().getPublicArea()))
			{
				tableCell.setValue(getMaskText(strSurname));
				tableCell.setTooltip(null);
			}
			else
			{
				tableCell.setValue(strSurname.toUpperCase());
				tableCell.setTooltip("Surname: " + strSurname.toUpperCase());
			}
		}
		
		//Edit Button
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.BUTTON);
		tableCell.setColSpan(3);
		tableCell.setTooltip("EDIT");
		//tableCell.setRowSpan(0);
		cellOptions = new TableCellOptions();		
    		cellOptions.setAutopostback(true);
    		cellOptions.setButtonImage(form.getImages().Core.Edit);
    		//cellOptions.setButtonImageText("Edit");
    		cellOptions.setAlign(Align.RIGHT);
    		cellOptions.setButtonHeight(40);
    		cellOptions.setButtonWidth(40);
    		tableCell.setIdentifier(BUTTON_CELL_EDIT);
    	tableCell.setOptions(cellOptions);
    	
		//-----------------------ROW 2 -------------------------
		tableRow = helper.getRows().newRow(); 
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(270);		
		tableCell.setColSpan(5);
		if (tempVo.getPatientIsNotNull() && tempVo.getPatient().getNameIsNotNull())  
		{	
			
			String strForename = tempVo.getPatient().getName().getForename();
			if( strForename == null)
				strForename = "                 ";
			
			if (Boolean.TRUE.equals(form.getLocalContext().getPublicArea()))
			{
				tableCell.setValue(getMaskText(strForename));
				tableCell.setTooltip(null);
			}
			else
			{
    			tableCell.setValue(strForename.toUpperCase());
    			tableCell.setTooltip("Forename: " + strForename);
			}
		}		
		
		//-----------------------ROW 3 -------------------------
		
		tableRow = helper.getRows().newRow();
		
		//Patient image
    	tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);		
		tableCell.setRowSpan(3);
		tableCell.setValue(patientImage);
		tableCell.setWidth(50);
    				
		//Gender
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(19);
		if (tempVo.getPatientIsNotNull() && tempVo.getPatient().getSex() != null)
		{
			
			if(tempVo.getPatient().getSex().equals(Sex.MALE))
			{
				tableCell.setValue(form.getImages().Emergency.Male);
			}
			else if(tempVo.getPatient().getSex().equals(Sex.FEMALE))
			{
				tableCell.setValue(form.getImages().Emergency.Female);
			}			
		}
		else
		{
			tableCell.setValue(form.getImages().Emergency.Male);
		}
		
		//DOB : dd/mm/yyy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(12);					
						 cellOptions.setAlign(Align.LEFT);
		
		//tableCell.setColSpan();
		if (tempVo.getPatientIsNotNull() && tempVo.getPatient().getDobIsNotNull())
		{
			cellOptions.setTextColor(Color.Black);
			tableCell.setValue(tempVo.getPatient().getDob().toString() + (tempVo.getAttendance() != null && tempVo.getAttendance().getAgeAtAttendance() != null ? " (" + tempVo.getAttendance().getAgeAtAttendance() + ")" : ""));
			tableCell.setTooltip(tempVo.getPatient().getDob().toString() + (tempVo.getAttendance() != null && tempVo.getAttendance().getAgeAtAttendance() != null ? " (" + tempVo.getAttendance().getAgeAtAttendance() + ")" : ""));
		}
		else
		{
			tableCell.setValue("mm/dd/zzzz (aa)");
			cellOptions.setTextColor(Color.White);
		}
		
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(160);
		//Hospital
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		tableCell.setWidth(80);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(12);
						 cellOptions.setAlign(Align.RIGHT);
		tableCell.setOptions(cellOptions);
		//tableCell.setColSpan(2);
		if (tempVo.getPatientIsNotNull() && tempVo.getPatient().getHospnum() != null)
		{
			tableCell.setValue(tempVo.getPatient().getHospnum().getIdValue());
			tableCell.setTooltip(tempVo.getPatient().getHospnum().getIdValue());
		}		
		
		
		//Temporary patient Image 
		
		if( Boolean.TRUE.equals(tempVo.getPatient().getIsQuickRegistrationPatient()))
		{
			tableCell = tableRow.getCells().newCell();
			tableCell.setType(TableCellType.IMAGE);
			tableCell.setWidth(17);
			tableCell.setValue(tempVo.getPatient() != null && Boolean.TRUE.equals(tempVo.getPatient().getIsQuickRegistrationPatient()) ? form.getImages().Emergency.EvenHistoryEnabled16 : null);
			tableCell.setTooltip("Temporary Patient");	
			tableCell.setColSpan(2);
		}
		
		//-----------------------ROW 4 -------------------------
		tableRow = helper.getRows().newRow();  
		
		//Triage priority
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setValue(getPriorityImage(tempVo));
		tableCell.setWidth(18);	
	
		//tableCell.setColSpan();
		
		//Presenting problem
		tableCell = tableRow.getCells().newCell();
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(12);
						 cellOptions.setFontStyle(FontStyle.ITALIC);
						 cellOptions.setFontWeight(FontWeight.BOLD);
						 //setProblemCellOptionColor(cellOptions, tracking, LOS);
						 cellOptions.setAlign(Align.LEFT);					 
		tableCell.setType(TableCellType.STRING);
		tableCell.setOptions(cellOptions);
		
		if(tempVo.getTriageDetails() != null && tempVo.getTriageDetails().getMainPresentingProblem() != null)
		{
			String patProbl = tempVo.getTriageDetails().getMainPresentingProblem().getPatientProblem();
			tableCell.setValue(patProbl.length()<=30 ? patProbl : patProbl.substring(0,30));
			tableCell.setTooltip(tempVo.getTriageDetails().getMainPresentingProblem().getPatientProblem());
		}
		tableCell.setWidth(140);
		tableCell.setColSpan(4);
		
		//Allergy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(20);
		//tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAllergies()) ? form.getImages().Core.Allergies48 : null);
		tableCell.setValue(form.getImages().Core.Allergies48 );
		tableCell.setTooltip(tempVo.getPatient() != null && Boolean.TRUE.equals(tempVo.getPatient().getHasAllergies())? "The patient has allergies.":null);//WDEV-17924
		
		//Alert
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(20);
		//tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAlerts()) ? form.getImages().Core.Allergies18 : null);//WDEV-17924
		tableCell.setValue(form.getImages().Core.Allergies18);
		tableCell.setTooltip(tempVo.getPatient() != null && Boolean.TRUE.equals(tempVo.getPatient().getHasAlerts()) ? "The patient has alerts." : null);//WDEV-17924
		
		
		//Path Image
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(20);
		if (Boolean.TRUE.equals(tempVo.getPatient().hasPatientNotification()))
		{
		tableCell.setValue(form.getImages().OCRR.Pathology24);
		}	
		
		//-----------------------ROW 5 -------------------------
		tableRow = helper.getRows().newRow();  
		
		// - Status
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(10);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(200);		
		tableCell.setColSpan(4);
		if( tempVo.getCurrentStatusIsNotNull() && tempVo.getCurrentStatus().getStatusIsNotNull() ) 
		{	
			if (TrackingStatus.REFERRED_TO_OTHER_SPECIALITY.equals(tempVo.getCurrentStatus().getStatus()) )
			{
				tableCell.setValue("Referred to:" + ((tempVo.getCurrentReferral()!=null && tempVo.getCurrentReferral().getSpecialty()!=null ) ? tempVo.getCurrentReferral().getSpecialty().getText():""));
			}
			else 
			{
				tableCell.setValue(tempVo.getCurrentStatus().getStatus().getIItemText());
			}
			
			tableCell.setTooltip("Status: " + tempVo.getCurrentStatus().getStatus().getIItemText() + (TrackingStatus.REFERRED_TO_OTHER_SPECIALITY.equals(tempVo.getCurrentStatus().getStatus()) && tempVo.getCurrentReferral()!=null && tempVo.getCurrentReferral().getSpecialty()!=null  ? "<br>Specialty: " +tempVo.getCurrentReferral().getSpecialty().getText() : "")); //WDEV-17638
		}
		
		//Current Area
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(10);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.CENTER);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(150);		
		tableCell.setColSpan(4);
		if( tempVo.getCurrentAreaIsNotNull() ) 
		{	
			tableCell.setValue(tempVo.getCurrentArea().getAreaDisplayName());
			tableCell.setTooltip("Current Area: " + tempVo.getCurrentArea().getAreaDisplayName());
		}
		return tableRow;
	}

	private void addAssessmentButtonsToTableCell(TrackingForPatientWhiteBoardVo tempVo, DynamicGridCellTable helper)
	{
		
		TableCellOptions cellOptions;
		WhiteBoardConfigVo whiteBoardConfig = form.getGlobalContext().Emergency.getWhiteBoardConfig();
		if (whiteBoardConfig!=null && whiteBoardConfig.getAssessmentsIsNotNull() && whiteBoardConfig.getAssessments().size()>0)
 		{
 			TableRow tableRowAssess1 = helper.getRows().newRow(); 
     	    
 	 		TableRow tableRowAssess2 = helper.getRows().newRow();
 	 		
 			
     		for (int i=0;i<whiteBoardConfig.getAssessments().size();i++)
     		{
     			WhiteBoardAssessmentConfigVo whiteBoardAseess = whiteBoardConfig.getAssessments().get(i);
     			PatientAssessmentForWhiteboardVo patientAssessment=domain.getPatientAssessment(tempVo.getAttendance().getCareContext(), whiteBoardAseess.getAssociatedAssessment());
     			
     			String tooltip="<b>" + whiteBoardAseess.getName() + "</b><br>" 
     						   +(patientAssessment!=null &&  patientAssessment.getCompletedHCPIsNotNull() && patientAssessment.getCompletedHCP().getName()!=null  ? "<b>Completing HCP: </b>" + patientAssessment.getCompletedHCP().getName()+ "<br>" : "" ) 
     			               + (patientAssessment!=null &&  patientAssessment.getCompletedDateTimeIsNotNull() ? "<b>Completed Date/Time: </b>" + patientAssessment.getCompletedDateTime().toString() : "") ;
     			
        	    TableCell tableCellAssess1 = tableRowAssess1.getCells().newCell();
     			tableCellAssess1.setTooltip(tooltip);
     			cellOptions = new TableCellOptions();		
         						 cellOptions.setFontFamily(FontFamily.CALIBRI);
         						 cellOptions.setFontSize(12);
         						 cellOptions.setFontStyle(FontStyle.ITALIC);
         						 cellOptions.setFontWeight(FontWeight.BOLD);
         						 cellOptions.setAlign(Align.CENTER);					 
         		tableCellAssess1.setType(TableCellType.STRING);
         		tableCellAssess1.setValue(whiteBoardAseess.getName());
         		tableCellAssess1.setOptions(cellOptions);
         	     	
    	     	
     	     	
     	     	TableCell tableCellAssess2 = tableRowAssess2.getCells().newCell();
     			cellOptions = new TableCellOptions();		
     							 cellOptions.setFontFamily(FontFamily.CALIBRI);
     							 cellOptions.setFontSize(12);
     							 cellOptions.setFontStyle(FontStyle.ITALIC);
     							 cellOptions.setFontWeight(FontWeight.BOLD);
     							 cellOptions.setAlign(Align.CENTER);					 
     			tableCellAssess2.setType(TableCellType.STRING);
     			tableCellAssess2.setValue(patientAssessment!=null && patientAssessment.getScoreIsNotNull() ? patientAssessment.getScore().toString(): "-");
     			tableCellAssess2.setOptions(cellOptions);
     	     	
     		}
 		}
	}

	private String getMaskText(String value)
	{
		if(value == null)
			return null;
		
		if(value.length() > 1)
		{
			char[] mask = value.toCharArray();
			Arrays.fill(mask, 1, value.length(), MASKED_NAME_TEXT);
			return new String(mask);
		}
		
		return value;
	}
	
	private void addActionButtonsToTableCell(TrackingForPatientWhiteBoardVo tempVo, DynamicGridCellTable helper)
	{
		TableCellOptions cellOptions;
		
		PatientWhiteboardRecordVo currentPatientWhiteBoard = domain.getPatientWhiteBoard(tempVo.getAttendance().getCareContext(), tempVo.getPatient());
		
		WhiteBoardOtherActionsVoCollection collActionsConfigured = form.getGlobalContext().Emergency.getWhiteBoardConfig()!=null ? form.getGlobalContext().Emergency.getWhiteBoardConfig().getSelectedActions() : null;
		
		if (collActionsConfigured!=null && collActionsConfigured.size()>0 && currentPatientWhiteBoard!=null && currentPatientWhiteBoard.getCurrentActionsIsNotNull() && currentPatientWhiteBoard.getCurrentActions().size()>0)
 		{
 			TableRow tableRowActions1 = helper.getRows().newRow(); 
 	 		
 	 		TableRow tableRowActions2 = helper.getRows().newRow();
 	 
     		for (int i=0;i<collActionsConfigured.size();i++)
     		{
     			PatientWhiteboardActionsVo action=getCurrentActionsByConfigAction(collActionsConfigured.get(i),currentPatientWhiteBoard.getCurrentActions());
     			if (action!=null)		
     			{
                	TableCell tableCellAction1 = tableRowActions1.getCells().newCell();
                	tableCellAction1.setTooltip(collActionsConfigured.get(i).getOtherActionTooltip());
             		cellOptions = new TableCellOptions();		
                 						 cellOptions.setFontFamily(FontFamily.CALIBRI);
                 						 cellOptions.setFontSize(12);
                 						 cellOptions.setFontStyle(FontStyle.ITALIC);
                 						 cellOptions.setFontWeight(FontWeight.BOLD);
                 						 cellOptions.setAlign(Align.CENTER);					 
                 	tableCellAction1.setType(TableCellType.STRING);
                 	tableCellAction1.setValue(collActionsConfigured.get(i).getOtherActionTooltip());
                 	tableCellAction1.setOptions(cellOptions);
                 	     	
                 	
         	     	TableCell tableCellAction2 = tableRowActions2.getCells().newCell();
         	     	tableCellAction2.setType(TableCellType.BUTTON);
         	     	tableCellAction2.setTooltip(action.getActionStatus().getText());
         	     	tableCellAction2.setWidth(80);
         	 		cellOptions = new TableCellOptions();		
         	     		cellOptions.setAutopostback(true);
         	     		cellOptions.setButtonImage(getActionImageByStatus(action.getActionStatus(),collActionsConfigured.get(i)));
         	     		cellOptions.setAlign(Align.CENTER);
         	     		cellOptions.setButtonHeight(40);
         	     		cellOptions.setButtonWidth(40);
         	     		tableCellAction2.setOptions(cellOptions);
         	     		tableCellAction2.setIdentifier(action);	
         	     		tableCellAction2.setValue(currentPatientWhiteBoard);
     			}	
     		}
 		}
		
	}
	
	private Image getActionImageByStatus(WhiteBoardActionStatus actionStatus, WhiteBoardOtherActionsVo whiteBoardOtherActionsVo)
	{
		if (WhiteBoardActionStatus.COMPLETED.equals(actionStatus))
		{
			return engine.getRegisteredImage(whiteBoardOtherActionsVo.getCompleteIcon().getID_AppImage());
		}
		else if (WhiteBoardActionStatus.REQUIRED.equals(actionStatus))
		{
			return engine.getRegisteredImage(whiteBoardOtherActionsVo.getRequiredIcon().getID_AppImage());
		}
		else 
		{
			return null ;//form.getImages().Emergency.Empty_Button_24;
		}
	}
	
	private PatientWhiteboardActionsVo getCurrentActionsByConfigAction(WhiteBoardOtherActionsVo whiteBoardOtherActionsVo, PatientWhiteboardActionsVoCollection patientWhiteboardActionsVoCollection)
	{
		for (int j=0;j<patientWhiteboardActionsVoCollection.size();j++)
		{
			if (patientWhiteboardActionsVoCollection.get(j).getActionType().getOtherActionType().equals(whiteBoardOtherActionsVo.getOtherActionType()))
				return patientWhiteboardActionsVoCollection.get(j);
		}
		
		return null;
	}

	private Image getPriorityImage(TrackingForPatientWhiteBoardVo tempVo)  //WDEV-18001
	{
		if(tempVo == null || tempVo.getTriageDetails() == null)
			return null;
		
		if(TriagePriority.PRIORITY1.equals(tempVo.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P1;
		else if(TriagePriority.PRIORITY2.equals(tempVo.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P2;
		else if(TriagePriority.PRIORITY3.equals(tempVo.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P3;
		else if(TriagePriority.PRIORITY4.equals(tempVo.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P4;
		else if(TriagePriority.PRIORITY5.equals(tempVo.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P5;
		else if( TriagePriority.SKIPPED_TRIAGE.equals(tempVo.getTriageDetails().getCurrentTriagePriority()))
				 return form.getImages().Emergency.Triage_Priority_SkippedTriage;
		return null;
	}
	
	private void addPatientToLocalCollection(AppImageVo patientImage) 
	{
		if(patientImage == null)
			return;
		
		List<String> imagesColl = form.getLocalContext().getPatientImagesList();
		
		if (imagesColl == null)
			imagesColl = new ArrayList<String>();
		
		if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
		{
			imagesColl.add(EnvironmentConfig.getFileUploadMountpoint() + patientImage.getImagePath());
		}
		else
		{
			imagesColl.add(EnvironmentConfig.getBaseUri() + patientImage.getImagePath());
		}
		
		form.getLocalContext().setPatientImagesList(imagesColl);
	}
	
	private AppImageVo getPatientImage(TrackingForPatientWhiteBoardVo tempVo) throws IOException
	{
		if (tempVo == null || tempVo.getPatient() == null)
			return null;
		
		String sessionID = engine.getSessionId();
		
		AppDBImageVo dbImageVo =  tempVo.getPatient().getPhoto();
		
		//Existing Patient with no image
		if (dbImageVo == null)
		{
			// NoPatientImage	
			AppImageVo imageVo = new AppImageVo();
			imageVo.setImagePath(form.getImages().Core.NoPatientImage.getImagePath());
			
			return imageVo;
		}
		
		String encodedImage = dbImageVo.getImageData();
		String type = dbImageVo.getImageType().getText();	  		  		  	
  	
		return decodeFromBase64(encodedImage, sessionID, type);
	}
	
	private AppImageVo decodeFromBase64(String content, String sessionID, String imageType) throws IOException
	{
		byte[] decBytes = Base64.decode(content);

		if (decBytes == null || (decBytes != null && decBytes.length == 0)) 
		{
			engine.showMessage("Base64 image size is zero");
			return null;
		}
		 
	    String str = generateName();
	    String image = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "." + imageType.toLowerCase();		
		
		try
		{		
			FileOutputStream fos = new FileOutputStream(image);				
			fos.write(decBytes);
			fos.close();	
			
			AppImageVo imageVo = new AppImageVo();
			imageVo.setImagePath(((ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "." + imageType.toLowerCase()).replace("\\", "/")));
			return imageVo;
		}		
		catch(FileNotFoundException exception) {			
			System.out.println("FileNotFoundException : " + exception);
		}		
		catch(IOException ioexception) {						
			System.out.println("IOException : " + ioexception);
		}
						
		return null;	
	}
	
	private String generateName() 
	{
		String str = "";

		try
		{
			//Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			//Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			//Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
	
	private DynamicGridColumn getColumn(int column) 
	{
		return form.dyngrdWhiteBoard().getColumns().getByIdentifier(column);
	}

	@Override
	protected void onDyngrdWhiteBoardCellButtonClicked(DynamicGridCell cell)
	{
		if(cell.getValue() != null && cell.getValue() instanceof DynamicGridCellTable)
	       {
	              DynamicGridCellTable helper = (DynamicGridCellTable)cell.getValue();
	              if(helper.getFiredCell() != null && helper.getFiredCell().getIdentifier() != null)
	              {
	            	  	if (helper.getFiredCell().getIdentifier() instanceof String )
	                     {
	            	  		String  identifier = (String )helper.getFiredCell().getIdentifier();
	            	  		
	            	  		if (identifier.equals(BUTTON_CELL_EDIT))
	            	  		{
	            	  			setGlobalContexts((TrackingForPatientWhiteBoardVo)cell.getIdentifier());
	            	  			engine.open(form.getForms().Emergency.EDWhiteBoardEditDialog);
	            	  		}
	                     }
	            	  	else if (helper.getFiredCell().getIdentifier() instanceof PatientWhiteboardActionsVo )
	                     {
	                    	 PatientWhiteboardActionsVo  action = (PatientWhiteboardActionsVo )helper.getFiredCell().getIdentifier();
	                    	 PatientWhiteboardRecordVo patientWhiteBoardRecord = (PatientWhiteboardRecordVo)helper.getFiredCell().getValue();
	                         if (updateAndSaveStatusAction(action,patientWhiteBoardRecord))
	                         {
	                        	updatePatientCell(cell);
	                        	 
	                         }
	                       
	                     }
	                    
	              }
	       }

	}
	
	private void updatePatientCell(DynamicGridCell cell)
	{
		long startTime = System.currentTimeMillis();
		
		
		
		TrackingForPatientWhiteBoardVo trackingPatient = (TrackingForPatientWhiteBoardVo)cell.getIdentifier();
		
		DynamicGridCellTable helper = new DynamicGridCellTable(cell);		
		helper.setBorder(3);	
		
		addPatientAndTrackingDetailsToTableCell(trackingPatient, helper);
		
		addActionButtonsToTableCell(trackingPatient, helper);
     	
		addAssessmentButtonsToTableCell(trackingPatient, helper);
		
		long endTime = System.currentTimeMillis();
		long miliseconds = endTime - startTime;
		System.out.println("Time to Update patient Cell: " + miliseconds);
		
		cell.setValue(helper);
		cell.setReadOnly(true);
		cell.setIdentifier(trackingPatient);
	
	}
	
	private boolean updateAndSaveStatusAction(PatientWhiteboardActionsVo action, PatientWhiteboardRecordVo patientWhiteBoardRecord)
	{
		PatientWhiteboardRecordVo patientWhiteBoardToSave=populateDataFromScreen(patientWhiteBoardRecord,action);
		
		String[] errors = patientWhiteBoardToSave.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setCurrentPatientWhiteboard(domain.savePatientWhiteBoard(patientWhiteBoardToSave));
		}
		catch (StaleObjectException e)
		{
			
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			doSearch();
			return false;
		}
		
		return true;
	}

	private PatientWhiteboardRecordVo populateDataFromScreen(PatientWhiteboardRecordVo patientWhiteboard, PatientWhiteboardActionsVo action)
	{
		PatientWhiteboardActionsVoCollection collCurrentActions = patientWhiteboard.getCurrentActions();
		
		collCurrentActions.remove(action);
		
		PatientWhiteboardActionsVo updatedAction = updateStatusAction(action);
		collCurrentActions.add(updatedAction);
		
		patientWhiteboard.setCurrentActions(collCurrentActions);
		patientWhiteboard.getActionHistory().add(updatedAction);
		
		return patientWhiteboard;
	}

	private PatientWhiteboardActionsVo updateStatusAction(PatientWhiteboardActionsVo action)
	{
		action=(PatientWhiteboardActionsVo) action.clone();
		action.setID_PatientWhiteboardActions(null);
		action.setActionStatus(getNewActionStatus(action.getActionStatus()));
		
		return action;
		
	}

	private WhiteBoardActionStatus  getNewActionStatus(WhiteBoardActionStatus  actionStatus)
	{
		if (WhiteBoardActionStatus.NO_ACTION.equals(actionStatus))
		{
			return WhiteBoardActionStatus.REQUIRED;
		}
		else if (WhiteBoardActionStatus.REQUIRED.equals(actionStatus))
		{
			return WhiteBoardActionStatus.COMPLETED;
		}
		else 
		{
			return WhiteBoardActionStatus.NO_ACTION;
		}
		
	}

	@Override
	protected void onDyngrdWhiteBoardRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		System.out.println("Row Selection");
		setGlobalContexts((TrackingForPatientWhiteBoardVo)form.dyngrdWhiteBoard().getValue());
		engine.open(form.getForms().Emergency.EDWhiteBoardEditDialog, new Object[] {form.cmbArea().getValue(),form.cmbStatus().getValue()});
	}

	@Override
	protected void onDyngrdWhiteBoardCellValueChanged(DynamicGridCell cell)
	{
		System.out.println("Cell value changed");
		form.dyngrdWhiteBoard().setValue(cell.getRow().getValue());
		setGlobalContexts((TrackingForPatientWhiteBoardVo)form.dyngrdWhiteBoard().getValue());
	}

	private void setGlobalContexts(TrackingForPatientWhiteBoardVo trackingForPatientWhiteBoardVo)
	{
		if (trackingForPatientWhiteBoardVo==null)
			return;
		
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(trackingForPatientWhiteBoardVo.getPatient()));
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(trackingForPatientWhiteBoardVo.getAttendance().getCareContext()));
		form.getGlobalContext().Emergency.setTracking(trackingForPatientWhiteBoardVo);
	
	}

	@Override
	protected void onBtnPublicPrivateAreaClick() throws PresentationLogicException
	{
		form.getLocalContext().setPublicArea(!form.getLocalContext().getPublicArea());
		doSearch();
		updatePublicPrivateButtonText();
	}

	private void updatePublicPrivateButtonText()
	{
		form.btnPublicPrivateArea().setText(Boolean.FALSE.equals(form.getLocalContext().getPublicArea()) ? "Public Area" : "Private Area" );
	}
	@Override
	protected void onBtnEditAllClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.PatientWhiteBoardEditAll , new Object[] {form.cmbArea().getValue(), form.cmbStatus().getValue()});
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		if(form.getGlobalContext().Emergency.getWhiteBoardConfig()!=null && form.getGlobalContext().Emergency.getWhiteBoardConfig().getRefreshIntervalIsNotNull() && timer.equals(form.getGlobalContext().Emergency.getWhiteBoardConfig().getRefreshInterval()*60))
		{
			doSearch();
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		clearGlobalContexts();
		if (DialogResult.OK.equals(result))
		{
			doSearch();
		}
	}

	private void clearGlobalContexts()
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Emergency.setTracking(null);
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
