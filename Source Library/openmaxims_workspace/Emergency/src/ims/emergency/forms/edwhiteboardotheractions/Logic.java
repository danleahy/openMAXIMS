//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5176.19432)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edwhiteboardotheractions;

import java.util.ArrayList;

import ims.core.configuration.vo.AppImageRefVo;
import ims.emergency.vo.WhiteBoardOtherActionsVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Image;
import ims.framework.utils.ImagePath;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData(form.getGlobalContext().Emergency.getWhiteboardOtherAction());
		updateControlState();
	}
	private void populateScreenFromData(WhiteBoardOtherActionsVo whiteBoardOtherActionsVo)
	{
		clearScreen();
		if (whiteBoardOtherActionsVo==null)
			return;
		
		form.cmbType().setValue(whiteBoardOtherActionsVo.getOtherActionType());
		form.txtTooltip().setValue(whiteBoardOtherActionsVo.getOtherActionTooltip());
		
		if (whiteBoardOtherActionsVo.getActionIcon() != null)
		{
			Image img =engine.getRegisteredImage(whiteBoardOtherActionsVo.getActionIcon().getID_AppImage());
			form.qmbActionIcon().newRow(img, img.getImagePath());
			form.qmbActionIcon().setValue(img);
			form.imgActionIcon().setValue(img);
		}
		
		if (whiteBoardOtherActionsVo.getRequiredIcon() != null)
		{
			Image img =engine.getRegisteredImage(whiteBoardOtherActionsVo.getRequiredIcon().getID_AppImage());
			form.qmbRequiredIcon().newRow(img, img.getImagePath());
			form.qmbRequiredIcon().setValue(img);
			form.imgRequiredIcon().setValue(img);
		}
		
		if (whiteBoardOtherActionsVo.getCompleteIcon() != null)
		{
			Image img =engine.getRegisteredImage(whiteBoardOtherActionsVo.getCompleteIcon().getID_AppImage());
			form.qmbCompleteIcon().newRow(img, img.getImagePath());
			form.qmbCompleteIcon().setValue(img);
			form.imgCompleteIcon().setValue(img);
		}
	}
	private void clearScreen()
	{
		form.cmbType().setValue(null);
		form.txtTooltip().setValue(null);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOKClick() throws PresentationLogicException
	{
		WhiteBoardOtherActionsVo otherActionToSave=populateDataFromScreen(form.getGlobalContext().Emergency.getWhiteboardOtherAction());
		
		String[] errors = otherActionToSave.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}
		
		form.getGlobalContext().Emergency.setWhiteboardOtherAction(otherActionToSave);
		engine.close(DialogResult.OK);
		
	}
	
	private WhiteBoardOtherActionsVo populateDataFromScreen(WhiteBoardOtherActionsVo whiteboardOtherAction)
	{
		if (whiteboardOtherAction==null)
			whiteboardOtherAction= new WhiteBoardOtherActionsVo();
		else
			whiteboardOtherAction=(WhiteBoardOtherActionsVo) whiteboardOtherAction.clone();
		
		whiteboardOtherAction.setOtherActionType(form.cmbType().getValue());
		whiteboardOtherAction.setOtherActionTooltip(form.txtTooltip().getValue());
		whiteboardOtherAction.setActionIcon((AppImageRefVo) form.qmbActionIcon().getValue());
		whiteboardOtherAction.setRequiredIcon((AppImageRefVo) form.qmbRequiredIcon().getValue());
		whiteboardOtherAction.setCompleteIcon((AppImageRefVo) form.qmbCompleteIcon().getValue());
		
		return whiteboardOtherAction;
	}
	@Override
	protected void onQmbCompleteIconValueChanged() throws PresentationLogicException
	{
		Image img = form.qmbCompleteIcon().getValue();
		if (img != null)
		{
			form.imgCompleteIcon().setValue(img);
		}
		
		updateControlState();
	}
	
	private void updateControlState()
	{
		form.imgActionIcon().setVisible(form.qmbActionIcon().getValue()!=null);
		form.imgRequiredIcon().setVisible(form.qmbRequiredIcon().getValue()!=null);
		form.imgCompleteIcon().setVisible(form.qmbCompleteIcon().getValue()!=null);
	}
	
	@Override
	protected void onQmbCompleteIconTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbCompleteIcon().clear();
		Image[] images = engine.getRegisteredImages();
		
		Image img = null;
		for (int i = 0; i < images.length; i++)
		{
			img = images[i];
			
			if (img instanceof ImagePath)
				continue;
			
			if (img.getImagePath().toLowerCase().indexOf(value.toLowerCase()) != -1
				&& img.isActive())
			{
				form.qmbCompleteIcon().newRow(img, img.getImagePath());
			}
		}
		int size = form.qmbCompleteIcon().getValues().size();
		if (size == 1)
		{
			form.qmbCompleteIcon().setValue((Image) form.qmbCompleteIcon().getValues().get(0));
			form.imgCompleteIcon().setValue((Image) form.qmbCompleteIcon().getValues().get(0));
		}
		else if (size > 1)
		{
			form.qmbCompleteIcon().showOpened();
		}
	}
	@Override
	protected void onQmbRequiredIconValueChanged() throws PresentationLogicException
	{
		Image img = form.qmbRequiredIcon().getValue();
		if (img != null)
		{
			form.imgRequiredIcon().setValue(img);
		}
		
		updateControlState();
	}
	@Override
	protected void onQmbRequiredIconTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbRequiredIcon().clear();
		Image[] images = engine.getRegisteredImages();
		
		Image img = null;
		for (int i = 0; i < images.length; i++)
		{
			img = images[i];
			
			if (img instanceof ImagePath)
				continue;
			
			if (img.getImagePath().toLowerCase().indexOf(value.toLowerCase()) != -1
				&& img.isActive())
			{
				form.qmbRequiredIcon().newRow(img, img.getImagePath());
			}
		}
		int size = form.qmbRequiredIcon().getValues().size();
		if (size == 1)
		{
			form.qmbRequiredIcon().setValue((Image) form.qmbRequiredIcon().getValues().get(0));
			form.imgRequiredIcon().setValue((Image) form.qmbRequiredIcon().getValues().get(0));
		}
		else if (size > 1)
		{
			form.qmbRequiredIcon().showOpened();
		}
	}
	@Override
	protected void onQmbActionIconValueChanged() throws PresentationLogicException
	{
		Image img = form.qmbActionIcon().getValue();
		if (img != null)
		{
			form.imgActionIcon().setValue(img);
		}
		
		updateControlState();
	}
	@Override
	protected void onQmbActionIconTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbActionIcon().clear();
		Image[] images = engine.getRegisteredImages();
		
		Image img = null;
		for (int i = 0; i < images.length; i++)
		{
			img = images[i];
			
			if (img instanceof ImagePath)
				continue;
			
			if (img.getImagePath().toLowerCase().indexOf(value.toLowerCase()) != -1
				&& img.isActive())
			{
				form.qmbActionIcon().newRow(img, img.getImagePath());
			}
		}
		int size = form.qmbActionIcon().getValues().size();
		if (size == 1)
		{
			form.qmbActionIcon().setValue((Image) form.qmbActionIcon().getValues().get(0));
			form.imgActionIcon().setValue((Image) form.qmbActionIcon().getValues().get(0));
		}
		else if (size > 1)
		{
			form.qmbActionIcon().showOpened();
		}
	}
	
}
