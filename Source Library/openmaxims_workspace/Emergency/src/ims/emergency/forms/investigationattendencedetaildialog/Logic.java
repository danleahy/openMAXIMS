//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.investigationattendencedetaildialog;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.InvestigationAttendenceDetailVo;
import ims.emergency.vo.InvestigationsForAttendVo;
import ims.framework.enumerations.DialogResult;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void initialize() 
	{
		form.ccAuthoring().initializeComponent();
		form.ccAuthoring().setIsRequiredPropertyToControls(true);
	}

	private void open() 
	{
		populateScreeenFromData();
	}

	private void populateScreeenFromData() 
	{
		if(form.getGlobalContext().Emergency.getInvestigationAttendenceDetail() == null || form.getGlobalContext().Emergency.getInvestigationAttendenceDetail().getID_InvestigationAttendenceDetail() == null)
			return;
		
		clear();
		
		form.cmbInvestigationAttendence().setValue(form.getGlobalContext().Emergency.getInvestigationAttendenceDetail().getAttendenceInvestigation());
		form.ccAuthoring().setValue(form.getGlobalContext().Emergency.getInvestigationAttendenceDetail().getAuthoringInformation());
	}

	private void clear() 
	{
		form.cmbInvestigationAttendence().setValue(null);
		form.ccAuthoring().setValue(null);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}

	private boolean save() 
	{
		InvestigationAttendenceDetailVo record = populateDataFromScreen(form.getGlobalContext().Emergency.getInvestigationAttendenceDetail());
		
		InvestigationsForAttendVo investigationsForAttend = form.getGlobalContext().Emergency.getInvestigationsForAttend();
		if(investigationsForAttend == null)
		{
			investigationsForAttend = new InvestigationsForAttendVo();
			investigationsForAttend.setPatient(form.getGlobalContext().Core.getPatientShort());
			investigationsForAttend.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			investigationsForAttend.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		String[] errors = record.validate(investigationsForAttend.validate(validateUIRules()));
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Emergency.setInvestigationAttendenceDetail(domain.save(record, investigationsForAttend));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return false;
		}
		
		return true;
	}

	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.cmbInvestigationAttendence().getValue() == null)
		{
			errors.add("Attendance Investigation is mandatory.");
		}
		
		return errors.toArray(new String[errors.size()]);
	}

	private InvestigationAttendenceDetailVo populateDataFromScreen(InvestigationAttendenceDetailVo record)
	{
		if(record == null)
		{
			record = new InvestigationAttendenceDetailVo();
		}
		
		record.setActive(true);
		record.setAttendenceInvestigation(form.cmbInvestigationAttendence().getValue());
		record.setAuthoringInformation(form.ccAuthoring().getValue());
		
		return record;
	}
}
