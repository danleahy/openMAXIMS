//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edclinicdetails;

import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.emergency.vo.EDClinicDetailsVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args!=null && args.length>0 && args[0] instanceof FormMode)
		{
			form.setMode((FormMode)args[0]);
		}
		
		form.ccAuthoringInfo().initializeComponent();
//		form.cmbService().setEnabled(true); // WDEV-19734
		populateServiceCombo();
		
		populateScreenFromData(form.getGlobalContext().Emergency.getEDClinicDetails());
	}
	
	private void populateScreenFromData(EDClinicDetailsVo edClinicDetails)
	{
		if (edClinicDetails==null)
			return;
		
		form.ccAuthoringInfo().setValue(edClinicDetails.getAuthoringInformation());
		form.txtComment().setValue(edClinicDetails.getComment());
		form.txtReasonForReferral().setValue(edClinicDetails.getReasonForReferral());
		form.cmbService().setValue(edClinicDetails.getSpecialty());
		form.chkPhysicalDocuments().setValue(edClinicDetails.getPhysicalDocumentsToBeSent());
	}
	
	private void populateServiceCombo()
	{
		ServiceShortVoCollection collService = domain.listServices();
		
		for (int i = 0; i < collService.size(); i++)
		{
			form.cmbService().newRow(collService.get(i), getTextForServiceCombo(collService.get(i)));
		}
	}
	private String getTextForServiceCombo(ServiceShortVo service)
	{
		String strService = "";
		
		if (service==null)
			return strService;
		
		if (service.getServiceNameIsNotNull())
			strService+=service.getServiceName();
		
		if (service.getSpecialtyIsNotNull())
			strService+=" - " +service.getSpecialty().getText();
		
		return strService;
	}
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
		
	}
	private boolean save()
	{
		EDClinicDetailsVo edClinicToSave=populateDataFromScreen(form.getGlobalContext().Emergency.getEDClinicDetails());
		
		String[] errors = edClinicToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		form.getGlobalContext().Emergency.setEDClinicDetails(edClinicToSave);
		return true;
	}
	
	private EDClinicDetailsVo populateDataFromScreen(EDClinicDetailsVo edClinicDetails)
	{
		if (edClinicDetails==null)
			edClinicDetails= new EDClinicDetailsVo();
		else
			edClinicDetails = (EDClinicDetailsVo) edClinicDetails.clone();
		
		edClinicDetails.setPatient(form.getGlobalContext().Core.getPatientShort());
		edClinicDetails.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		edClinicDetails.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		edClinicDetails.setAuthoringInformation(form.ccAuthoringInfo().getValue());
		edClinicDetails.setComment(form.txtComment().getValue());
		edClinicDetails.setPhysicalDocumentsToBeSent(form.chkPhysicalDocuments().getValue());
		edClinicDetails.setSpecialty(form.cmbService().getValue());
		edClinicDetails.setReasonForReferral(form.txtReasonForReferral().getValue());
		
		return edClinicDetails;
	}

	@Override
	protected void onFormModeChanged()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
