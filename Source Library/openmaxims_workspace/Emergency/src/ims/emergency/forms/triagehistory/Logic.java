//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.triagehistory;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.triagehistory.GenForm.grdTriagesRow;
import ims.emergency.vo.TriageProtocolAssessmentShortVo;
import ims.emergency.vo.TriageProtocolAssessmentShortVoCollection;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}

	@Override
	protected void onGrdTriagesSelectionChanged()
	{
		updateControlState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// RIE confirmation dialog
		if (form.getForms().Core.RieConfirmationDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if (markAsRIE())
			{
				open();
			}
		}		
	}

	@Override
	protected void onBtnRIEClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}


	private void open()
	{
		// List Triages for care context
		TriageProtocolAssessmentShortVoCollection protocols = domain.listTriageProtocols(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext());
		
		// Populate protocols to grid
		populateTriagesProtocolGrid(protocols);
		
		updateControlState();
	}

	private boolean markAsRIE()
	{
		try
		{
			if (form.grdTriages().getSelectedRow() == null)
				throw new CodingRuntimeException("A record has to be selected.");

			if (domain.isStale(form.grdTriages().getSelectedRow().getValue()))
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return false;
			}

			domain.markTriageAsRIE(form.grdTriages().getSelectedRow().getValue(), engine.getFormName(), form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getRieMessage());

			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException ex)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
	}

	private void populateTriagesProtocolGrid(TriageProtocolAssessmentShortVoCollection protocols)
	{
		form.grdTriages().getRows().clear();
		
		if (protocols == null)
			return;
		
		for (TriageProtocolAssessmentShortVo protocol : protocols)
		{
			grdTriagesRow protocolRow = form.grdTriages().getRows().newRow();
			protocolRow.setBackColor(Color.LightGray);
			
			protocolRow.setColPriority("<font color =\""+ protocol.getTriagePriority().getColor().getName() +"\">" + protocol.getTriagePriority().getText() + "</font>");
			protocolRow.setColProblem(protocol.getPatientProblem().getPatientProblem());
			
			if (protocol.getTriageProtocol() != null)
				protocolRow.setColProtocol(protocol.getTriageProtocol().getProtocolName());
			
			if (protocol.getDiscriminator() != null)
				protocolRow.setColDiscriminator(protocol.getDiscriminator().getDiscriminator().getDiscriminatorName());

			protocolRow.setColDateTime(protocol.getAssessmentDateTime().toString());
			protocolRow.setColHcp(protocol.getAssessmentNurse().toString());
			
			protocolRow.setValue(protocol);
		}
	}

	private void updateControlState()
	{
		form.btnRIE().setEnabled(true);
		form.btnRIE().setVisible(form.grdTriages().getSelectedRow() != null && engine.isRIEMode() == false);
	}
}
