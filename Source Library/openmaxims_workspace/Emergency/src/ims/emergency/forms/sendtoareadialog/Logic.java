//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.sendtoareadialog;


import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.sendtoareadialog.GenForm.grdSendToAreaRow;
import ims.emergency.vo.AmbulanceDetailsVo;
import ims.emergency.vo.CubicleAllocationVo;
import ims.emergency.vo.CurrentPartialAdmissionForSendToAreaVo;
import ims.emergency.vo.TrackingAreaCubiclesVo;
import ims.emergency.vo.TrackingAreaLiteVo;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingAreaVoCollection;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingLiteVo;
import ims.emergency.vo.TrackingMovementTimesVo;
import ims.emergency.vo.TrackingStatusWorkflowVo;
import ims.emergency.vo.lookups.AllocationStatus;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors1 = validateUIRules(); 
		
		if(errors1 != null && errors1.length > 0)
		{
			engine.showErrors(errors1);
			return;
		}
				
		//WDEV-19031
		clearContextsForWokflow();
		if(form.getLocalContext().getTracking() != null && hasAssociatedTrackingWorkflowStatus(getTrackingAreaWithCubicle()))
		{
			if (isAssociatedTrackingWorkflowStatusMandatory(getTrackingAreaWithCubicle()))
			{
				form.getLocalContext().setTracking(applyAssociatedTrackingWorkflow(getTrackingAreaWithCubicle()));
			}
			else
			{
				String messageToDisplay = createWorkflowConfirmationMessage();
				engine.showMessage(messageToDisplay, "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION);
				return;
			}
		}
		
		if (save())
		{
			if (Boolean.TRUE.equals(form.getLocalContext().getlcTriggePreAdmissionToPAS()) && ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PARTIAL"))
			{
				engine.open(form.getForms().Emergency.EDPartialAdmissionDialog, new Object[] {form.getLocalContext().getTracking()});
			}
			else if (Boolean.TRUE.equals(form.getLocalContext().getlcTriggePreAdmissionToPAS()) && ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
			{
				engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {form.getLocalContext().getTracking()});
			}
			else
				engine.close(DialogResult.OK);
		}
	}

	private String createWorkflowConfirmationMessage()
	{
		TrackingAreaVo trackingArea = getTrackingAreaWithCubicle();
		String trackingStatus = trackingArea.getWorkflowConfig().getTrackingStatus().getText();
		String trackingAreaName = trackingArea.getAreaDisplayName();
		
		String confirmationMessage = "Do you wish to apply the '" + trackingStatus + "' workflow for this patient on move to '" + trackingAreaName + "'?";
		
		return confirmationMessage;
	}

	private void clearContextsForWokflow()
	{
		form.getLocalContext().setlcCurrentCareContext(null);
		form.getLocalContext().setlcCurrentEpisodeOfCare(null);
		form.getLocalContext().setlcCurrentPartialAdmission(null);
		form.getLocalContext().setlcTriggePreAdmissionToPAS(false);		
	}

	private boolean save()
	{
		if(	form.getLocalContext().getAttendaceDetailsOrOtherIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getAttendaceDetailsOrOther()))  //wdev-14567
		{
			TrackingLiteVo trackLiteVo = form.getLocalContext().getTracking();
			
			TrackingAreaVo selectedTrackingArea = getTrackingAreaWithCubicle();
			
			if(	trackLiteVo != null)
			{
				trackLiteVo.setLastMovementDateTime(new DateTime());
				
				if (trackLiteVo.getCurrentAreaIsNotNull())//WDEV-19031 - in case the patient got discharged, do not set the Current area
					trackLiteVo.setCurrentArea(selectedTrackingArea);
				
				if (form.cmbCubicleRoom().getValue() != null)
				{
					CubicleAllocationVo record = new CubicleAllocationVo();
					
					record.setAllocatedBy((MemberOfStaffLiteVo) domain.getMosUser());
					
					record.setAllocatedCubicleDateTime(new DateTime());
					record.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
					record.setCubicleRoomBed(form.cmbCubicleRoom().getValue());
					record.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
					record.setPatient(form.getGlobalContext().Core.getPatientShort());
					record.setTrackingArea(domain.getTrackingAreaLite(selectedTrackingArea));
					
					trackLiteVo.setCurrentCubicle(record);
				}
				else
					trackLiteVo.setCurrentCubicle(null);
			}
			
			TrackingMovementTimesVo trackMovVo = new TrackingMovementTimesVo();
			trackMovVo.setPatient(form.getGlobalContext().Core.getPatientShort());
			trackMovVo.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			trackMovVo.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
			trackMovVo.setAreaMovedTo(selectedTrackingArea);
			trackMovVo.setMovedDateTime(new DateTime());
			trackMovVo.setMovedBy((MemberOfStaffLiteVo) domain.getMosUser());
			
			CareContextVo newCareContext = form.getLocalContext().getlcCurrentCareContext();
			if (newCareContext != null)
			{
				String[] errors = newCareContext.validate();

				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}
			}
			
			try 
			{
				domain.saveTrackingAndTrackingMovementTimes(trackLiteVo, trackMovVo, form.getLocalContext().getlcCurrentPartialAdmission(), form.getLocalContext().getlcTriggePreAdmissionToPAS(), form.getLocalContext().getlcCurrentEpisodeOfCare(), newCareContext);
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.CANCEL); //WDEV-19188
				return false;
			}
			
		}
		else
			form.getGlobalContext().Emergency.setTrackingAreaForSendToAreaVo(getTrackingAreaWithCubicle());
		
		if (Boolean.TRUE.equals(form.dtimEndTriage().isVisible()))
				form.getGlobalContext().Emergency.setTriageCompletedDateTime(form.dtimEndTriage().getValue());
		
		return true;
	}

	// WDEV-19031
	private TrackingLiteVo applyAssociatedTrackingWorkflow(TrackingAreaVo trackingArea)
	{
		TrackingLiteVo trackingRecord = (TrackingLiteVo) form.getLocalContext().getTracking().clone();
		
		if (trackingRecord == null)
			return null;
		
		TrackingStatusWorkflowVo trackingWorkflowStatusConfiguration = domain.getTrackingWorkflowConfig(trackingArea.getWorkflowConfig());
		
		trackingRecord.setCurrentStatus(createTrackingStatus(trackingWorkflowStatusConfiguration.getTrackingStatus(), trackingRecord!=null && trackingRecord.getCurrentStatus()!=null ? trackingRecord.getCurrentStatus().getStatus() : null));
		
		if (trackingWorkflowStatusConfiguration != null && Boolean.TRUE.equals(trackingWorkflowStatusConfiguration.getRecordsConclusionDateTime()) && trackingRecord != null && trackingRecord.getAttendance() != null && trackingRecord.getAttendance().getConclusionDateTime() == null)
		{
			trackingRecord.getAttendance().setConclusionDateTime(new DateTime());
		}
		
		if (trackingWorkflowStatusConfiguration != null && Boolean.TRUE.equals(trackingWorkflowStatusConfiguration.getTriggersPreAdmissionPas()))
		{
			form.getLocalContext().setlcTriggePreAdmissionToPAS(true);
			CurrentPartialAdmissionForSendToAreaVo partialAdmission = null;
			
			// cancel the previous partial admission and set Tracking.CurrentPartialAdmission to null
			if (trackingRecord != null && trackingRecord.getCurrentPartialAdmissionIsNotNull() && AllocationStatus.ACTIVE.equals(trackingRecord.getCurrentPartialAdmission().getAllocatedStatus()))
			{
				partialAdmission = (CurrentPartialAdmissionForSendToAreaVo) trackingRecord.getCurrentPartialAdmission().clone();
				partialAdmission.setAllocatedStatus(AllocationStatus.CANCELLED_ADMISSION);
				form.getLocalContext().setlcCurrentPartialAdmission(partialAdmission);
				
				trackingRecord.setCurrentPartialAdmission(null);
			}
		}
		
		if (trackingWorkflowStatusConfiguration != null && Boolean.TRUE.equals(trackingWorkflowStatusConfiguration.getRecordsEdAttendanceDeparture()) && trackingRecord != null && trackingRecord.getAttendance() != null)
		{
			Boolean continueDisplay = trackingWorkflowStatusConfiguration.getContinueDisplayInTracking();
			
			trackingRecord = dischargePatient(trackingRecord, trackingWorkflowStatusConfiguration, continueDisplay);
			
			if(Boolean.TRUE.equals(trackingWorkflowStatusConfiguration.getCreateNewCareContext()))
			{
				createNewCareContext(trackingRecord);
			}
		}
		
		return trackingRecord;
	}

	private void createNewCareContext(TrackingLiteVo trackingRecord)
	{
		EpisodeofCareVo episodeOfCare = domain.getEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort().getID_EpisodeOfCare());
		form.getLocalContext().setlcCurrentEpisodeOfCare(episodeOfCare);
		
		CareContextVo voCareContext = new CareContextVo();
		voCareContext.setContext(trackingRecord.getAttendance().getCareContext().getContext());
		voCareContext.setStartDateTime(new DateTime());
		voCareContext.setEpisodeOfCare(episodeOfCare);
		form.getLocalContext().setlcCurrentCareContext(voCareContext);
	}
	
	private TrackingLiteVo dischargePatient(TrackingLiteVo trackingRecord, TrackingStatusWorkflowVo trackingWorkflowStatusConfiguration, Boolean continueDisplay)
	{
		if(trackingRecord != null)
		{
			if(trackingRecord.getAttendance() != null)
			{
				trackingRecord.getAttendance().setDischargeDateTime(new DateTime());		
				trackingRecord.getAttendance().setOutcome(trackingWorkflowStatusConfiguration.getDischargeOutcome());
				
				if(trackingRecord.getAttendance().getCareContext() != null)
				{
					trackingRecord.getAttendance().getCareContext().setEndDateTime(new DateTime());
				}
			}

			trackingRecord.setIsDischarged(true);
			trackingRecord.setDisplayInED(continueDisplay);
			trackingRecord.setCurrentStatus(createTrackingStatus(TrackingStatus.DISCHARGED, trackingWorkflowStatusConfiguration.getTrackingStatus()));
			trackingRecord.setCurrentArea(null);
		}
		
		return trackingRecord;
	}

	private TrackingAttendanceStatusVo createTrackingStatus(TrackingStatus status, TrackingStatus prevTrackingStatus)
	{
		TrackingAttendanceStatusVo dischargeStatus = new TrackingAttendanceStatusVo();
		
		dischargeStatus.setPatient(form.getGlobalContext().Core.getPatientShort());
		dischargeStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		dischargeStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());			
		dischargeStatus.setTrackingArea(TrackingStatus.DISCHARGED.equals(status) ? null : getTrackingAreaWithCubicle());	
		dischargeStatus.setStatusDatetime(new DateTime());
		
		Object mos = domain.getMosUser();		
		dischargeStatus.setCreatedBy(mos != null && mos instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mos : null);

		dischargeStatus.setStatus(status);
		dischargeStatus.setPrevStatus(prevTrackingStatus);
		dischargeStatus.setPrevTrackingArea(!TrackingStatus.DISCHARGED.equals(status) && form.getLocalContext().getTracking() != null ?  form.getLocalContext().getTracking().getCurrentArea() : getTrackingAreaWithCubicle());
		
		return dischargeStatus;
	}

	//WDEV-19031
	private boolean isAssociatedTrackingWorkflowStatusMandatory(TrackingAreaVo trackingArea)
	{
		if (trackingArea != null && Boolean.TRUE.equals(trackingArea.getAssociatedWorkflowMandatory()))
			return true;
		
		return false;
	}

	//WDEV-19031
	private boolean hasAssociatedTrackingWorkflowStatus(TrackingAreaVo trackingArea)
	{
		if (trackingArea != null && trackingArea.getWorkflowConfigIsNotNull())
			return true;
		
		return false;
	}

	private String[] validateUIRules()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		if (form.grdSendToArea().getValue() == null)
		{
			errorList.add("Please select an Area.");
		}
		
		if(form.dtimEndTriage().isVisible() == true && form.dtimEndTriage().getValue() == null)
		{
			errorList.add("Triage End Date/Time is mandatory.");
		}
		
		if(form.dtimEndTriage().isVisible() == true && form.dtimEndTriage().getValue() != null && form.dtimEndTriage().getValue().isGreaterThan(new DateTime()))
		{
			errorList.add("'Triage End Date/Time' cannot be set in the future.");
		}
		
		if(form.dtimEndTriage().isVisible() == true && form.dtimEndTriage().getValue() != null && form.dtimEndTriage().getValue().isLessThan(form.getGlobalContext().Emergency.getStartTriageDateTime()))
		{
			errorList.add("'Triage End Date/Time' cannot be less than 'Triage Start Time'.");
		}

		return errorList.toArray(new String[errorList.size()]);
	}
	
	//WDEV-19186
	private void populateCubicleRooms()
	{
		form.cmbCubicleRoom().clear();
		
		if (form.grdSendToArea().getSelectedRow() != null)
		{	
			TrackingAreaCubiclesVo cubicle = domain.getTrackingAreaCubicle(form.grdSendToArea().getSelectedRow().getValue());
			
			if( cubicle != null && cubicle.getCubiclesRoomsBeds() != null && cubicle.getCubiclesRoomsBeds().size() > 0 )
			{
				for(int i = 0; i < cubicle.getCubiclesRoomsBeds().size();i++)
				{
					form.cmbCubicleRoom().newRow(cubicle.getCubiclesRoomsBeds().get(i), cubicle.getCubiclesRoomsBeds().get(i).getCubicleRoomBedName());
				}
			}
		}
	}

	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		if(args != null )
		{
			if(	args.length == 1 && args[0] != null && args[0] instanceof Boolean )
			{
				form.getLocalContext().setAttendaceDetailsOrOther((Boolean)args[0]);
			}
			else
				form.getLocalContext().setAttendaceDetailsOrOther(null);
		}
		else
			form.getLocalContext().setAttendaceDetailsOrOther(null);
		
		initialise();
		open();	
	}
	
	private void initialise()
	{
		boolean displayTriageEndTime = Boolean.TRUE.equals(form.getGlobalContext().Emergency.getDisplayTriageEndTime());
		
		if (displayTriageEndTime)
			form.dtimEndTriage().setValue(form.getGlobalContext().Emergency.getTriageCompletedDateTime() != null ? form.getGlobalContext().Emergency.getTriageCompletedDateTime() : new DateTime());
		
	}

	private void updateControlState()
	{
		boolean displayTriageEndTime = Boolean.TRUE.equals(form.getGlobalContext().Emergency.getDisplayTriageEndTime());
		
		form.dtimEndTriage().setVisible(displayTriageEndTime);
		form.lblTriageEnd().setVisible(displayTriageEndTime);
		form.dtimEndTriage().setRequired(displayTriageEndTime);
		
		boolean openedFromTriage = form.getForms().Emergency.EDAssessmentDialog.equals(engine.getParentDialogFormName())
										|| form.getForms().Emergency.EDTriageWorklistToAssessmentForm.equals(engine.getPreviousNonDialogFormName())
										|| form.getForms().Emergency.EDClinicianWorklistToAssessmentForm.equals(engine.getPreviousNonDialogFormName())
										|| form.getForms().Emergency.EDWorklistToAssessmentForm.equals(engine.getPreviousNonDialogFormName());
		
		form.btnAmbulanceDetails().setEnabled(true);
		form.btnAmbulanceDetails().setVisible(openedFromTriage && domain.isAmbulanceArrival(form.getLocalContext().getTracking().getAttendance().getModeOfArrival()) && ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"));
		
		form.lblSendToAreaVal().setVisible(form.grdSendToArea().getValue() != null);
	}

	private void open()
	{
		
		clearControls();
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		TrackingAreaVoCollection tempCollVo = null;
		
		if(domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();
			
		}
		else if(domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if(locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(),locsite.getVersion_Location());
				
			}
		}
		
		if(loc != null)
		{
			if(	form.getLocalContext().getAttendaceDetailsOrOtherIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getAttendaceDetailsOrOther()))  //wdev-14567
			{
				if(	form.getGlobalContext().Emergency.getTrackingIsNotNull())
				{
					TrackingLiteVo trackLiteVo = domain.getTrackingLiteVo(form.getGlobalContext().Emergency.getTracking());
					if(	trackLiteVo != null)
					{
						tempCollVo = domain.listTrackingAreas(loc,trackLiteVo.getCurrentArea());
						form.getLocalContext().setTracking(trackLiteVo);
					}
				}
			}
			//WDEV-17140
			else if(form.getLocalContext().getAttendaceDetailsOrOtherIsNotNull() && Boolean.FALSE.equals(form.getLocalContext().getAttendaceDetailsOrOther()))  //wdev-14567
			{
				TrackingAreaLiteVo registrationArea = domain.getRegistrationAreaByLocation(loc);
				
				tempCollVo = domain.listTrackingAreas(loc,registrationArea);
			}
			else
			{
				tempCollVo = domain.listTrackingAreas(loc,null);
			}
			populateSendToAreaGrid(tempCollVo);
		}
				
		updateControlState();
	}
	
	private void clearControls()
	{
		form.grdSendToArea().getRows().clear();
	}
	
	private void populateSendToAreaGrid(TrackingAreaVoCollection tempCollVo)
	{		
		form.grdSendToArea().getRows().clear();
		
		if(tempCollVo == null)
			return;
		
		for(int i = 0; i < tempCollVo.size(); i++)
		{
			TrackingAreaVo tempVo = tempCollVo.get(i);
			
			//WDEV-15815 //WDEV-17249 //WDEV-22811
			if(tempVo != null && ((tempVo.getAreaType() == null) || form.getGlobalContext().Core.getPatientShort() == null || (form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().calculateAge() == null) || ( tempVo.getAreaTypeIsNotNull() && (isAdultPatient() && tempVo.getAreaType().equals(ims.emergency.vo.lookups.AreaType.ADULT_ONLY)) || 
																										( ( ! isAdultPatient()) && tempVo.getAreaType().equals(ims.emergency.vo.lookups.AreaType.PAEDIATRIC_ONLY)))))
			{
				grdSendToAreaRow row = form.grdSendToArea().getRows().newRow();
				row.setColumnArea(tempVo.getAreaDisplayName());
				row.setValue(tempVo);
				
				if (tempCollVo.size() == 1) //WDEV-16557
				{
					form.grdSendToArea().setValue(tempVo);
					setAreaLabel(tempVo);
					populateCubicleRooms(); //WDEV-20005
				}
				else
					form.grdSendToArea().setValue(null);
				
				
			}
		}
	}
	
	//WDEV-15815
	private boolean isAdultPatient()
	{	
		if (form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().calculateAge() > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
		{
			return true;
		}
		
		return false;
	}
	
	private TrackingAreaVo getTrackingAreaWithCubicle()
	{		
		TrackingAreaVo selectedArea  = null;
		grdSendToAreaRow selectedRow = form.grdSendToArea().getSelectedRow();
		if (selectedRow != null)
		{	
			selectedArea  =  selectedRow.getValue();
			selectedArea.setAllocatedCubicle(form.cmbCubicleRoom().getValue());
		}
		return selectedArea;		
	}

	//WDEV-19031
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(DialogResult.YES.equals(result))
		{
			form.getLocalContext().setTracking(applyAssociatedTrackingWorkflow(getTrackingAreaWithCubicle()));
			
			if (save())
			{
				if (Boolean.TRUE.equals(form.getLocalContext().getlcTriggePreAdmissionToPAS()) && ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PARTIAL"))
				{
					engine.open(form.getForms().Emergency.EDPartialAdmissionDialog, new Object[] {form.getLocalContext().getTracking()});
				}
				else if (Boolean.TRUE.equals(form.getLocalContext().getlcTriggePreAdmissionToPAS()) && ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
				{
					engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {form.getLocalContext().getTracking()});
				}
				else
					engine.close(DialogResult.OK);
			}
		}
		if(DialogResult.NO.equals(result))
		{
			if (save())
				engine.close(DialogResult.OK);
		}		
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Emergency.AmbulanceDetails.equals(formName) && DialogResult.OK.equals(result))
		{
			// Update record with Ambulance Details
			AmbulanceDetailsVo ambulanceDetails = form.getGlobalContext().Emergency.getAmbulanceDetails();
			
			form.getLocalContext().getTracking().getAttendance().setAmbulanceArrivalDateTime(ambulanceDetails.getAmbulanceArrivalDateTime());
			form.getLocalContext().getTracking().getAttendance().setAmbulanceJobNo(ambulanceDetails.getAmbulanceJobNo());
			form.getLocalContext().getTracking().getAttendance().setAmbulanceHandoverDateTime(ambulanceDetails.getAmbulanceHandoverDateTime());
			form.getLocalContext().getTracking().getAttendance().setAmbulanceDelayReason(ambulanceDetails.getAmbulanceDelayReason());
		}
		
		if (form.getForms().Emergency.EDPartialAdmissionDialog.equals(formName) || form.getForms().Emergency.EDDecisionToAdmitDialog.equals(formName))
		{
			engine.close(DialogResult.OK);
		}
	}

	protected void onBtnAmbulanceDetailsClick() throws PresentationLogicException
	{
		// Get values to be saved
		AmbulanceDetailsVo ambulanceDetails = new AmbulanceDetailsVo();
		
		TrackingLiteVo tracking = form.getLocalContext().getTracking();
		
		ambulanceDetails.setAmbulanceArrivalDateTime(tracking.getAttendance().getAmbulanceArrivalDateTime());
		ambulanceDetails.setAmbulanceJobNo(tracking.getAttendance().getAmbulanceJobNo());
		ambulanceDetails.setAmbulanceHandoverDateTime(tracking.getAttendance().getAmbulanceHandoverDateTime());
		ambulanceDetails.setAmbulanceDelayReason(tracking.getAttendance().getAmbulanceDelayReason());
		
		form.getGlobalContext().Emergency.setAmbulanceDetails(ambulanceDetails);
		
		engine.open(form.getForms().Emergency.AmbulanceDetails);
	}
	//WDEV-22811
	@Override
	protected void onGrdSendToAreaSelectionChanged() throws PresentationLogicException
	{
		setAreaSelection(form.grdSendToArea().getValue());
	}

	private void setAreaSelection(TrackingAreaVo area)
	{
		setAreaLabel(area);
		populateCubicleRooms();
		updateControlState();
	}

	private void setAreaLabel(TrackingAreaVo area)
	{		
		form.lblSendToAreaVal().setValue(area != null ? area.getAreaDisplayName() : null);
	}

	@Override
	protected void onGrdSendToAreaSelectionCleared() throws PresentationLogicException
	{
		setAreaSelection(null);		
	}
	//WDEV-22811   - ends here
}
