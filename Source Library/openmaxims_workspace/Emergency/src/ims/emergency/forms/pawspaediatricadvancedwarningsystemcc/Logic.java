//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.pawspaediatricadvancedwarningsystemcc;

import ims.core.admin.vo.CareContextRefVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.TriageForPAWSVo;
import ims.emergency.vo.TriageRefVo;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void setEnabled(Boolean value)
	{
		form.getLocalContext().setisEnabled(value);
		updateControlsState();
	}

	private void clearInstance()
	{
		form.intPAWS().setValue(null);
	}
	private void updateControlsState()
	{
		form.btnEdit().setEnabled(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectRelevantPAWSIsNotNull());
		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectRelevantPAWSIsNotNull());
	}

	public ims.emergency.vo.enums.EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
		form.fireCustomControlValueChanged();
		
		open();
	}

	private boolean save()
	{
		
		TriageForPAWSVo voPaws = form.getLocalContext().getSelectRelevantPAWS();
		
		voPaws.setPAWSScore(form.intPAWS().getValue());
		
		String[] errors = null;
		errors = voPaws.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors("Error", errors);
			return false;
		}

		try
		{
			form.getLocalContext().setSelectRelevantPAWS(domain.savePAWSScore(voPaws));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		return true;
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
		form.fireCustomControlValueChanged();
		
		if (save())
		{
			open();
			form.setMode(FormMode.VIEW);
		}
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
	}

	public void open()
	{
		clearInstance();
		
		TriageForPAWSVo voPAWS;
		if (form.getLocalContext().getCurrentTriageIsNotNull())
			voPAWS = domain.getPAWSScore(form.getLocalContext().getCurrentTriage());
		else
			voPAWS = domain.getPAWSScore(form.getLocalContext().getCurrentCareContext());
			
		if (voPAWS == null)//NO triage record
		{
			form.setMode(FormMode.VIEW);
			form.btnEdit().setEnabled(false);
			return;
		}
		form.getLocalContext().setSelectRelevantPAWS(voPAWS);

		form.intPAWS().setValue(voPAWS.getPAWSScore());
		
		form.setMode(FormMode.VIEW);
		updateControlsState();
	}

	@Override
	public void initialize(CareContextRefVo attendanceRefVo, TriageRefVo triageRefVo) 
	{
		form.getLocalContext().setCurrentTriage(triageRefVo);
		form.getLocalContext().setCurrentCareContext(attendanceRefVo);
		open();
	}


}
