//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.66 build 3237.35521)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.naes.domain.impl;

import ims.admin.domain.MosSearch;
import ims.admin.domain.impl.MosSearchImpl;
import ims.core.vo.ActionPlanVo;
import ims.core.vo.MemberOfStaffLiteVoCollection;
import ims.core.vo.domain.ActionPlanVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.utils.Date;
import ims.naes.domain.base.impl.BaseActionSearchImpl;
import ims.naes.domain.objects.ActionDetail;
import ims.naes.domain.objects.ActionPlan;
import ims.naes.vo.ActionSearchResultVo;
import ims.naes.vo.ActionSearchResultVoCollection;
import ims.naes.vo.domain.ActionDetailVoAssembler;
import ims.naes.vo.lookups.Action;
import ims.naes.vo.lookups.NaesActionStatus;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class ActionSearchImpl extends BaseActionSearchImpl
{

	private static final long	serialVersionUID	= 1L;

	public ActionSearchResultVoCollection search(ims.framework.utils.Date startDate, ims.framework.utils.Date endDate, Integer noDaysElapsed, Boolean before, Action action, NaesActionStatus status, Integer responsibleTech_id, String OrderNo)
	{

		DomainFactory factory = getDomainFactory();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		String andStr = "";
		
		StringBuffer hql = new StringBuffer("Select ap, ad FROM ActionPlan as ap join ap.actions AS ad left join ap.nAESReferral as naesRef "); //WDEV-14412
		StringBuffer criteria = new StringBuffer();

		//WDEV-14412
		criteria.append(andStr + "(naesRef.isRIE = :isRie or naesRef.isRIE is null)");
		markers.add("isRie");
		values.add(Boolean.FALSE);
		andStr = " AND ";	
		
		if (startDate != null && endDate == null)
		{
			criteria.append(andStr + "ad.startDate = :sDate");
			markers.add("sDate");
			values.add(startDate.getDate());
			andStr = " AND ";
		}

		if (startDate != null && endDate != null)
		{
			criteria.append(andStr + "ad.startDate  between :fromDate and :toDate");
			markers.add("fromDate");
			values.add(startDate.getDate());
			markers.add("toDate");
			values.add(endDate.getDate());
			andStr = " AND ";
		}

		if (action != null)
		{
			criteria.append(andStr + "ad.action.id = :actionVal");
			markers.add("actionVal");
			values.add(action.getID());
			andStr = " AND ";
		}

		if (status != null)
		{
			criteria.append(andStr + "ad.currentStatus.status.id = :statusVal");
			markers.add("statusVal");
			values.add(status.getID());
			andStr = " AND ";

		}

		if (responsibleTech_id != null)
		{
			criteria.append(andStr + "ad.responsibleTechnician.id = :ResponsibleTech_id");
			markers.add("ResponsibleTech_id");
			values.add(responsibleTech_id);
			andStr = " AND ";
		}
		if (OrderNo != null)
		{
			criteria.append(andStr + "ap.orderNumber = :OrderNumber");
			markers.add("OrderNumber");
			values.add(OrderNo);
			andStr = " AND ";
		}
		
		if (noDaysElapsed != null)
		{
			Date startDateToPass = new Date().addDay(-1 * noDaysElapsed);
			
			criteria.append(andStr).append("ad.startDate = :startedDATE and ad.startDate is not null");
			markers.add("startedDATE");
			values.add(startDateToPass.getDate());
			andStr = " AND ";
		}
		
		if(andStr == " AND ")
			hql.append(" where ");
		
		hql.append(criteria.toString());	
		
		List list = factory.find(hql.toString(), markers, values);
		
		ActionSearchResultVoCollection results = new ActionSearchResultVoCollection();
		
		for (int i = 0; i < list.size(); i++)
		{
			ActionSearchResultVo result = new ActionSearchResultVo();
			
			Object[] listItem = (Object[]) list.get(i);
			
			// Get ActionPlan record
			result.setActionPlan(ActionPlanVoAssembler.create((ActionPlan) listItem[0]));
			// Get ActionPlanDetail record
			result.setActionDetail(ActionDetailVoAssembler.create((ActionDetail) listItem[1]));
			
			if (result.getActionPlanIsNotNull() && result.getActionDetailIsNotNull())
				results.add(result);
		}
		
		return results;
	}

	public MemberOfStaffLiteVoCollection getResponsibleTechnican(String name)
	{
		MosSearch mosSearch = (MosSearch)getDomainImpl(MosSearchImpl.class);
		return mosSearch.listActiveMosByName(name);
	}

	public void saveActionPlan(ActionPlanVo actionPlan) throws StaleObjectException
	{
		ims.naes.domain.ActionPlan actionplan = (ims.naes.domain.ActionPlan)getDomainImpl(ActionPlanImpl.class);
		actionplan.saveActionPlan(actionPlan);	
	}
}
