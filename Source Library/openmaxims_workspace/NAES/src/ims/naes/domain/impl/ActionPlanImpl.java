//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.66 build 3236.16532)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.naes.domain.impl;

import ims.admin.domain.LookupTree;
import ims.admin.domain.impl.LookupTreeImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.ActionPlanVo;
import ims.core.vo.ActionPlanVoCollection;
import ims.core.vo.domain.ActionPlanVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.naes.domain.base.impl.BaseActionPlanImpl;
import ims.naes.domain.objects.ActionPlan;
import ims.naes.domain.objects.NAESReferralNote;
import ims.naes.vo.ActionPlanRefVo;
import ims.naes.vo.NAESReferralNoteVo;
import ims.naes.vo.NAESReferralNoteVoCollection;
import ims.naes.vo.NAESReferralRefVo;
import ims.naes.vo.domain.NAESReferralNoteVoAssembler;
import ims.scheduling.vo.BookingAppointmentShortVo;
import ims.scheduling.vo.BookingAppointmentShortVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.domain.BookingAppointmentShortVoAssembler;
import ims.vo.LookupInstVo;

import java.util.List;

public class ActionPlanImpl extends BaseActionPlanImpl
{
	private static final String	GENERATEORDERNUM	= "   ";
	private static final long	serialVersionUID	= 1L;
	
	public ActionPlanVo saveActionPlan(ims.core.vo.ActionPlanVo actionPlan) throws ims.domain.exceptions.StaleObjectException
	{
		if (actionPlan == null)
			throw new CodingRuntimeException("actionPlan is null in method saveActionPlan");
		if (!actionPlan.isValidated())
			throw new CodingRuntimeException("actionPlan has not been validated in method saveActionPlan");
			
		DomainFactory factory = getDomainFactory();		
		ActionPlan domActionPlan = ActionPlanVoAssembler.extractActionPlan(factory, actionPlan);
		factory.save(domActionPlan);
		
		//WDEV-9602 WDEV-17853
		if(actionPlan.getOrderNumberIsNotNull() && actionPlan.getOrderNumber() == GENERATEORDERNUM  && domActionPlan.getEyesInOrderNumber() != null && domActionPlan.getEyesInOrderNumber().getId() != null)
		{
			domActionPlan.setOrderNumber(domActionPlan.getEyesInOrderNumber().getId().toString());
			factory.save(domActionPlan);
		}
			
		return ActionPlanVoAssembler.create(domActionPlan);
	}

	public ims.core.vo.ActionPlanVoCollection listActionPlansByReferral(NAESReferralRefVo voReferral)
	{
		if (voReferral == null || voReferral.getID_NAESReferral() == null)
			throw new CodingRuntimeException("voReferral is null or id not provided in method listActionPlansByReferral");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ActionPlan as ap where ap.nAESReferral.id =" + voReferral.getID_NAESReferral() + "order by ap.dateCommenced desc");//WDEV-14206
		List list = factory.find(hql.toString());
		return ActionPlanVoAssembler.createActionPlanVoCollectionFromActionPlan(list);
	}

	public LookupInstVo getMappings(LookupInstVo lookup)
	{
		LookupTree lookupImpl = (LookupTree) getDomainImpl(LookupTreeImpl.class);
		return lookupImpl.getMappings(lookup);
	}

	public BookingAppointmentShortVoCollection listAppointmentsByCareContext(CareContextRefVo careContext)
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method listAppointmentsByCareContext");
		
		//WDEV-9680
		List list = getDomainFactory().find("from Booking_Appointment as app where app.careContext.id = " + careContext.getID_CareContext()+ " order by app.appointmentDate,app.apptStartTime");
		return BookingAppointmentShortVoAssembler.createBookingAppointmentShortVoCollectionFromBooking_Appointment(list);
	}

	public NAESReferralNoteVoCollection getNotes(NAESReferralRefVo referral)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer ("from NAESReferralNote as refNote where refNote.referral.id = "+ referral.getID_NAESReferral());
		List list =factory.find(hql.toString());
		return NAESReferralNoteVoAssembler.createNAESReferralNoteVoCollectionFromNAESReferralNote(list);
	}

	public NAESReferralNoteVoCollection saveNcpNote(NAESReferralNoteVo note) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (!note.isValidated())
			throw new CodingRuntimeException("Referral Note has not been validated");
		DomainFactory factory = getDomainFactory();
		NAESReferralNote domNote = NAESReferralNoteVoAssembler.extractNAESReferralNote(factory, note);
		factory.save(domNote);
		return getNotes(note.getReferral());
	}

	//wdev-10595
	public BookingAppointmentShortVo getAppointmentById(Booking_AppointmentRefVo careContextRef) 
	{
		
		if (careContextRef == null || careContextRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method listAppointmentsByCareContext");
		
		//WDEV-9680
		List list = getDomainFactory().find("from Booking_Appointment as app where app.id = " + careContextRef.getID_Booking_Appointment());
		
		if(list != null && list.size() > 0)
		{
			BookingAppointmentShortVoCollection tempCol = BookingAppointmentShortVoAssembler.createBookingAppointmentShortVoCollectionFromBooking_Appointment(list);
			if(tempCol != null && tempCol.size() > 0)
				return tempCol.get(0);
		}
		return null;
	}

	//wdev-10576
	public ActionPlanVo getActionPlan(ActionPlanRefVo actionlanRef) 
	{
				
		if (actionlanRef == null)
			throw new CodingRuntimeException("ActionPlan is null ");
		
		
		List list = getDomainFactory().find("from ActionPlan as a1_1	where a1_1.id = " + actionlanRef.getID_ActionPlan());
		
		if(list != null && list.size() > 0)
		{
			ActionPlanVoCollection tempCol = ActionPlanVoAssembler.createActionPlanVoCollectionFromActionPlan(list);
					
			if(tempCol != null && tempCol.size() > 0)
				return tempCol.get(0);
		}
		return null;
		
		
	}
	
	
}
