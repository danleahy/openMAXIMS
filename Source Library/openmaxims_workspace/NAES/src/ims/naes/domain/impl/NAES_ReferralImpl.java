//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.66 build 3253.22551)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.naes.domain.impl;

import java.util.List;

import ims.core.admin.domain.objects.CareSpell;
import ims.core.admin.vo.CareSpellRefVo;
import ims.core.domain.CareSpellDialog;
import ims.core.domain.impl.CareSpellDialogImpl;
import ims.core.vo.ActionPlanVo;
import ims.core.vo.ActionPlanVoCollection;
import ims.core.vo.CareSpellVo;
import ims.core.vo.domain.ActionPlanVoAssembler;
import ims.core.vo.domain.CareSpellVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.naes.domain.base.impl.BaseNAES_ReferralImpl;
import ims.naes.domain.objects.NAESReferral;
import ims.naes.vo.NAESReferralRefVo;
import ims.naes.vo.NAESReferralVo;
import ims.naes.vo.NAESReferralVoCollection;
import ims.naes.vo.domain.NAESReferralVoAssembler;

public class NAES_ReferralImpl extends BaseNAES_ReferralImpl
{
	private static final long	serialVersionUID	= 1L;

	public ims.naes.vo.NAESReferralVoCollection getReferral(ims.core.patient.vo.PatientRefVo patientRef)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("FROM NAESReferral AS ref");
		
		hql.append(" WHERE ref.patient.id = ").append(patientRef.getID_Patient()).append(" ORDER BY ref.dateReferralReceived DESC");
		
		return NAESReferralVoAssembler.createNAESReferralVoCollectionFromNAESReferral(factory.find(hql.toString()));
	}

	public NAESReferralVo save(ims.naes.vo.NAESReferralVo naesReferralVo) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (!naesReferralVo.isValidated())
			throw new CodingRuntimeException("Referral has not been validated");

		DomainFactory factory = getDomainFactory();
		NAESReferral naesReferral = NAESReferralVoAssembler.extractNAESReferral(factory, naesReferralVo);
		factory.save(naesReferral);
		return NAESReferralVoAssembler.create(naesReferral);

	}

	public CareSpellVo saveCareSpell(CareSpellVo careSpellvo) throws StaleObjectException
	{
		CareSpellDialog careSpell = (CareSpellDialog) getDomainImpl(CareSpellDialogImpl.class);
		CareSpellVo doCareSpell = careSpell.saveCareSpell(careSpellvo);	
		return doCareSpell;
	}

	public CareSpellVo getCareSpell(CareSpellRefVo careSpellRef)
	{
	
		DomainFactory factory = getDomainFactory();
		DomainObject doCareSpell = factory.getDomainObject(careSpellRef);
		if(doCareSpell instanceof CareSpell)
		return CareSpellVoAssembler.create((CareSpell) doCareSpell);
		
		return null;

	
	}

	public Boolean isOpenPeriodOver(NAESReferralRefVo refVoNAESReferral) {
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ActionPlan as ap where ap.nAESReferral.id =" + refVoNAESReferral.getID_NAESReferral());
		List list = factory.find(hql.toString());
		ActionPlanVoCollection coll = ActionPlanVoAssembler.createActionPlanVoCollectionFromActionPlan(list);
		for (int i = 0; i < coll.size(); i++)
		{
			ActionPlanVo actionPlanVo = coll.get(i);
			if(actionPlanVo.getSixMonthOpenPeriodIsNotNull() 
					&& actionPlanVo.getSixMonthOpenPeriod().isGreaterOrEqualThan(new Date()))
				return false;
			else if(actionPlanVo.getSixMonthOpenPeriodIsNotNull() 
					&& actionPlanVo.getSixMonthOpenPeriod().isLessThan(new Date()))
				return true;
		}
		
		return false;
	}

	//wdev-10596
	public NAESReferralVo getReferralVo(NAESReferralRefVo naesReferralRef) 
	{
		if(naesReferralRef == null)
			throw new DomainRuntimeException("Invalid NAESReferralRefVo");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql =new StringBuffer("from NAESReferral as ref");
		
		hql.append(" where ref.id ="+ naesReferralRef.getID_NAESReferral());
		
		List list = factory.find(hql.toString());
		if(list != null && list.size() > 0)
		{ 
			NAESReferralVoCollection voColl = NAESReferralVoAssembler.createNAESReferralVoCollectionFromNAESReferral(list);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		return null;
	}
	//----------------

}
