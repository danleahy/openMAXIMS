//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.65 build 3225.30788)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.naes.forms.actionplanadmin;

import ims.core.vo.ActionPlanTemplateVo;
import ims.core.vo.ActionPlanTemplateVoCollection;

import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.naes.vo.TemplateActionVo;
import ims.naes.vo.TemplateActionVoCollection;
import ims.naes.vo.lookups.Action;
import ims.naes.vo.lookups.ActionCollection;

public class Logic extends BaseLogic
{

	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{

		form.cmbStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);

		open();

	}

	private void open()
	{

		init();
		form.getContextMenus().Admin.hideAllActionPlanAdminMenuItems();
		populateGrid();
		populateScreenFromData(null);

	}

	private void populateScreenFromData(PreActiveActiveInactiveStatus preActiveActiveInactiveStatus)
	{
		form.dyngrdActionPlans().getRows().clear();
		ActionPlanTemplateVoCollection data = getTemplates(preActiveActiveInactiveStatus);

		for (int i = 0; i < data.size(); i++)
		{
			if (data.get(i).getActiveStatus().equals(form.cmbStatus().getValue()))
			{
				populateGrid(data.get(i));
			}
		}
	}

	private ActionPlanTemplateVoCollection getTemplates(PreActiveActiveInactiveStatus preActiveActiveInactiveStatus)
	{
		form.getLocalContext().setActionPlanTemplates(null);
		ActionPlanTemplateVoCollection data = domain.getActionPlanTemplateVoColl(preActiveActiveInactiveStatus);
		form.getLocalContext().setActionPlanTemplates(data);
		return data;
	}

	private void populateGrid(ActionPlanTemplateVo actionPlanTemplateVo)
	{

		DynamicGridRow row = form.dyngrdActionPlans().getRows().newRow();

		row.setValue(actionPlanTemplateVo);
		DynamicGridCell actionCell = row.getCells().newCell(form.dyngrdActionPlans().getColumns().get(0), DynamicCellType.STRING);
		
		
		actionCell.setReadOnly(false);

		actionCell.setValue(actionPlanTemplateVo.getActionPlanName());
		
		actionCell.setStringMaxLength(125);

		DynamicGridCell DescriptionCell = row.getCells().newCell(form.dyngrdActionPlans().getColumns().get(1), DynamicCellType.STRING);
		DescriptionCell.setValue(actionPlanTemplateVo.getDescription());
		DescriptionCell.setStringMaxLength(500);
		

		DescriptionCell.setReadOnly(false);
		DynamicGridCell statusCell = row.getCells().newCell(form.dyngrdActionPlans().getColumns().get(2), DynamicCellType.ENUMERATION);
		populateStatusCell(statusCell);
		statusCell.setValue(actionPlanTemplateVo.getActiveStatus());
		row.setExpanded(true);

		for (int i = 0; i < actionPlanTemplateVo.getActions().size(); i++)
		{
			DynamicGridRow childRow = row.getRows().newRow();
			childRow.setValue(actionPlanTemplateVo.getActions().get(i));
			childRow.setCollapsedImage(form.getImages().Core.GreenSquare);
			DynamicGridCell cell = childRow.getCells().newCell(form.dyngrdActionPlans().getColumns().get(0), DynamicCellType.ENUMERATION);
			populateActionCell(cell);
			cell.setValue(actionPlanTemplateVo.getActions().get(i).getActions());

		}
		if (form.cmbStatus().getValue() != null)
		{
			if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.INACTIVE))
			{
				row.setReadOnly(true);
				row.setSelectable(false);
				for (int i = 0; i < row.getRows().size(); i++)
				{
					DynamicGridRow childRow = row.getRows().get(i);
					childRow.setReadOnly(true);
					childRow.setSelectable(false);
				}
				form.getContextMenus().Admin.getActionPlanAdminADDACTIONItem().setVisible(false);
				form.getContextMenus().Admin.getActionPlanAdminREMOVEACTIONItem().setVisible(false);
				form.getContextMenus().Admin.getActionPlanAdminREMOVEPLANItem().setVisible(false);

			}
		}

	}

	private void populateGrid()
	{
		form.dyngrdActionPlans().clear();
		createGrid();
	}

	private void init()
	{

		form.dyngrdActionPlans().clear();
	}

	private void createGrid()
	{
		form.dyngrdActionPlans().setHeaderHeight(20);
		DynamicGridColumn ActionCol = form.dyngrdActionPlans().getColumns().newColumn("Action Plans");
		
		
		
		DynamicGridColumn DescriptionCol = form.dyngrdActionPlans().getColumns().newColumn("Description");
		
		DynamicGridColumn StatusCol = form.dyngrdActionPlans().getColumns().newColumn("Status");
		ActionCol.setWidth(200);
		
		
		DescriptionCol.setWidth(200);
		StatusCol.setWidth(100);
	}

	@Override
	protected void onBtnCancel() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnSave() throws ims.framework.exceptions.PresentationLogicException
	{

		if (save())
		{
			open();
		
			return;
		}
		resetLocalContext();
		
		form.setMode(FormMode.EDIT);

	}

	private void resetLocalContext()
	{
		ActionPlanTemplateVoCollection templateColl = form.getLocalContext().getActionPlanTemplates();
		ActionPlanTemplateVoCollection refreshedTemplateColl = new ActionPlanTemplateVoCollection(); 
				
		for (ActionPlanTemplateVo actionPlanTemplateVo : templateColl)
		{
			if(actionPlanTemplateVo.getActionPlanNameIsNotNull() ||actionPlanTemplateVo.getActiveStatusIsNotNull()|| actionPlanTemplateVo.getActionPlanNameIsNotNull() && actionPlanTemplateVo.getActiveStatusIsNotNull())
				refreshedTemplateColl.add(actionPlanTemplateVo);
			
		}
			
		form.getLocalContext().setActionPlanTemplates((ActionPlanTemplateVoCollection) refreshedTemplateColl.clone());
		
	}

	private boolean save()
	{
		
		ActionPlanTemplateVoCollection data = populateDataFromScreen();;
		String[] errors1 = null; 
		if( templateHasAction(data) == false)
			errors1 = new String[]{"Add an Action to Template."};

		String[] errors = data.validate(errors1);

		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			domain.save(data);
			form.getLocalContext().setActionPlanTemplates(data);
			
			form.setMode(FormMode.VIEW);
			return true;
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			return false;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			return false;
		}

	}
	private boolean templateHasAction(ActionPlanTemplateVoCollection data)
	{
		for(ActionPlanTemplateVo temp:data)
		{
			if(temp.getActions() == null ||temp.getActions().size() == 0)
				return false;
		}
		return true;
	}
	private ActionPlanTemplateVoCollection populateDataFromScreen()
	{
		ActionPlanTemplateVoCollection actionPlanTemplateVoColl = null;
		if (form.getLocalContext().getActionPlanTemplates() == null)
		{
			actionPlanTemplateVoColl = new ActionPlanTemplateVoCollection();
		}
		else
		{
			actionPlanTemplateVoColl = (ActionPlanTemplateVoCollection) form.getLocalContext().getActionPlanTemplates().clone();
		}
		DynamicGridRowCollection gridRows = form.dyngrdActionPlans().getRows();
		for (int i = 0; i < gridRows.size(); i++)
		{
			ActionPlanTemplateVo actionPlanTemplateVo = null;
			if ((form.getLocalContext().getActionPlanTemplates().contains((ActionPlanTemplateVo) gridRows.get(i).getValue())))
			{
				actionPlanTemplateVo = (ActionPlanTemplateVo)gridRows.get(i).getValue();
			}
			else
			{
				actionPlanTemplateVo = new ActionPlanTemplateVo();
			}
			DynamicGridRow row = gridRows.get(i);
			if (row.getParent() == null)
			{
				DynamicGridCell actionPlanNameCell = row.getCells().get(form.dyngrdActionPlans().getColumns().get(0));
				
				if (actionPlanNameCell.getValue() != null)
					actionPlanTemplateVo.setActionPlanName((String)(actionPlanNameCell.getValue().toString()));
				else
					actionPlanTemplateVo.setActionPlanName(null);

				DynamicGridCell actionPlanDescriptionCell = row.getCells().get(form.dyngrdActionPlans().getColumns().get(1));
				if (actionPlanDescriptionCell.getValue() != null)
					actionPlanTemplateVo.setDescription( (String)(actionPlanDescriptionCell.getValue().toString()));
				else
					actionPlanTemplateVo.setDescription(null);
				
				
				DynamicGridCell actionPlanStatusCell = row.getCells().get(form.dyngrdActionPlans().getColumns().get(2));
						actionPlanTemplateVo.setActiveStatus((PreActiveActiveInactiveStatus) actionPlanStatusCell.getValue());
				
				DynamicGridRowCollection children = row.getRows();
				TemplateActionVoCollection actionColl = new TemplateActionVoCollection();
								
				for (int j = 0; j < children.size(); j++)
				{
					if (children.get(j).getCells().get(form.dyngrdActionPlans().getColumns().get(0)).getValue() instanceof Action)
					{
						Action action = (Action) children.get(j).getCells().get(form.dyngrdActionPlans().getColumns().get(0)).getValue();
						TemplateActionVo voTemplateAction = new TemplateActionVo();
						voTemplateAction.setActions(action);
						actionColl.add(voTemplateAction);
				
					}
				}
				actionPlanTemplateVo.setActions(actionColl);
			}
			actionPlanTemplateVoColl.remove(actionPlanTemplateVo);
			actionPlanTemplateVoColl.add(actionPlanTemplateVo);
			actionPlanTemplateVoColl.size();
		}

		return actionPlanTemplateVoColl;
	}

	@Override
	protected void onBtnEdit() throws ims.framework.exceptions.PresentationLogicException
	{
		
		if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.PREACTIVE))
			form.getContextMenus().Admin.getActionPlanAdminNEWPLANItem().setVisible(true);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{

		if (row.getParent() != null)
		{
			form.getContextMenus().Admin.getActionPlanAdminADDACTIONItem().setVisible(false);
			form.getContextMenus().Admin.getActionPlanAdminREMOVEPLANItem().setVisible(false);
			form.getContextMenus().Admin.getActionPlanAdminREMOVEACTIONItem().setVisible(true);

		}
		if (row.getParent() == null)
		{
			form.getContextMenus().Admin.getActionPlanAdminADDACTIONItem().setVisible(true);
			form.getContextMenus().Admin.getActionPlanAdminREMOVEACTIONItem().setVisible(false);
			form.getContextMenus().Admin.getActionPlanAdminREMOVEPLANItem().setVisible(false);
		}

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case ims.naes.forms.actionplanadmin.GenForm.ContextMenus.AdminNamespace.ActionPlanAdmin.ADDACTION :
				newAction();
			break;
			case ims.naes.forms.actionplanadmin.GenForm.ContextMenus.AdminNamespace.ActionPlanAdmin.NEWPLAN :
				newActionPlan();
			break;
			case ims.naes.forms.actionplanadmin.GenForm.ContextMenus.AdminNamespace.ActionPlanAdmin.REMOVEACTION :
				removeAction();
			break;
			case ims.naes.forms.actionplanadmin.GenForm.ContextMenus.AdminNamespace.ActionPlanAdmin.REMOVEPLAN :
				// removeActionPlan();
			break;
		}
	}

	private void removeActionPlan()
	{

		form.getLocalContext().getActionPlanTemplates().remove((ActionPlanTemplateVo) form.dyngrdActionPlans().getSelectedRow().getValue());
		form.dyngrdActionPlans().getRows().remove(form.dyngrdActionPlans().getSelectedRow());
		form.getContextMenus().Admin.hideAllActionPlanAdminMenuItems();
	}

	private void removeAction()
	{
		form.dyngrdActionPlans().getRows().remove(form.dyngrdActionPlans().getSelectedRow());
		form.getContextMenus().Admin.getActionPlanAdminREMOVEACTIONItem().setVisible(false);
		if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.PREACTIVE))
			form.getContextMenus().Admin.getActionPlanAdminNEWPLANItem().setVisible(true);
		if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.ACTIVE))
			form.getContextMenus().Admin.getActionPlanAdminNEWPLANItem().setVisible(false);
	}

	private void newActionPlan()
	{
		DynamicGridRow row = form.dyngrdActionPlans().getRows().newRow();

		DynamicGridCell actionCell = row.getCells().newCell(form.dyngrdActionPlans().getColumns().get(0), DynamicCellType.STRING);
		actionCell.setStringMaxLength(125);

		actionCell.setReadOnly(false);
		DynamicGridCell DescriptionCell = row.getCells().newCell(form.dyngrdActionPlans().getColumns().get(1), DynamicCellType.STRING);
		DescriptionCell.setStringMaxLength(500);
		DescriptionCell.setReadOnly(false);
		DynamicGridCell statusCell = row.getCells().newCell(form.dyngrdActionPlans().getColumns().get(2), DynamicCellType.ENUMERATION);
		populateStatusCell(statusCell);
		row.setExpanded(true);
		row.setValue(new ActionPlanTemplateVo());

	}

	private void newAction()
	{
		form.dyngrdActionPlans().getSelectedRow().setExpanded(true);
		DynamicGridRow childRow = form.dyngrdActionPlans().getSelectedRow().getRows().newRow();
		childRow.setCollapsedImage(form.getImages().Core.GreenSquare);
		DynamicGridCell cell = childRow.getCells().newCell(form.dyngrdActionPlans().getColumns().get(0), DynamicCellType.ENUMERATION);
		populateActionCell(cell);
	}

	private void populateStatusCell(DynamicGridCell statusCell)
	{
		statusCell.getItems().clear();
		PreActiveActiveInactiveStatusCollection statusColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());

		if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.PREACTIVE))
		{
			statusColl.remove(PreActiveActiveInactiveStatus.INACTIVE);
		}
		if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.ACTIVE))
		{
			statusColl.remove(PreActiveActiveInactiveStatus.PREACTIVE);
		}

		for (int i = 0; i < statusColl.size(); i++)
		{
			DynamicGridCellItem item = statusCell.getItems().newItem(statusColl.get(i));
			item.setIdentifier(statusColl.get(i).getIItemText());
			item.setValue(statusColl.get(i));
		}
	}

	private void populateActionCell(DynamicGridCell cell)
	{
		cell.getItems().clear();
		ActionCollection action = ims.naes.vo.lookups.LookupHelper.getAction(domain.getLookupService());
		for (int i = 0; i < action.size(); i++)
		{
			DynamicGridCellItem item = cell.getItems().newItem(action.get(i));
			item.setIdentifier(action.get(i).getIItemText());
			item.setValue(action.get(i));
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		form.getContextMenus().Admin.getActionPlanAdminREMOVEPLANItem().setVisible(false);

		if (form.getMode().equals(FormMode.VIEW))
		{
			
			form.btnEdit().setEnabled(true);
			form.btnEdit().setVisible(true);
			form.getContextMenus().Admin.hideAllActionPlanAdminMenuItems();
			form.getContextMenus().Admin.getActionPlanAdminNEWPLANItem().setVisible(false);
		}
		else
		{
			form.btnEdit().setEnabled(false);
			form.btnEdit().setVisible(false);
		}
	}

	@Override
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{

		form.dyngrdActionPlans().getRows().clear();

		if (form.dyngrdActionPlans().getSelectedRow() == null)
		{
			form.getContextMenus().Admin.getActionPlanAdminADDACTIONItem().setVisible(false);
		}

		ActionPlanTemplateVoCollection data = form.getLocalContext().getActionPlanTemplates();

		for (int i = 0; i < data.size(); i++)
		{
			if (data.get(i).getActiveStatus().equals(form.cmbStatus().getValue()))
			{
				populateGrid(data.get(i));
			
			}
		}

		if (form.cmbStatus().getValue() != null)
		{
			form.btnEdit().setEnabled(true);
			if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.PREACTIVE) && form.getMode().equals(FormMode.EDIT))
			{
				form.getContextMenus().Admin.getActionPlanAdminNEWPLANItem().setVisible(true);
				return;
			}
			else
				form.getContextMenus().Admin.getActionPlanAdminNEWPLANItem().setVisible(false);

		}
		else
		{
			form.btnEdit().setEnabled(false);
		}
		
		form.getContextMenus().Admin.getActionPlanAdminNEWPLANItem().setVisible(false);
		
		if (form.getMode().equals(FormMode.VIEW)){
			if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.INACTIVE))
				form.btnEdit().setVisible(false);
			else
				form.btnEdit().setVisible(true);
		}
		
	}

}
