//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.65 build 3218.18820)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.naes.forms.actionplan;

import ims.configuration.AppRight;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.ActionPlanTemplateVo;
import ims.core.vo.ActionPlanVo;
import ims.core.vo.ActionPlanVoCollection;
import ims.core.vo.EyesInOrderNumberVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.naes.forms.actionplan.GenForm.lyr1Layer.tabDetailsContainer.RecallGroupEnumeration;
import ims.naes.forms.actionplan.GenForm.lyr1Layer.tabDetailsContainer.grdAppointmentsRow;
import ims.naes.forms.actionplan.GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow;
import ims.naes.forms.actionplan.GenForm.lyr1Layer.tabNotesContainer.grdNotesRow;
import ims.naes.vo.ActionDetailVo;
import ims.naes.vo.ActionDetailVoCollection;
import ims.naes.vo.ActionPlanQuarterVo;
import ims.naes.vo.ActionPlanQuarterVoCollection;
import ims.naes.vo.NAESReferralNoteVo;
import ims.naes.vo.NAESReferralNoteVoCollection;
import ims.naes.vo.lookups.Action;
import ims.naes.vo.lookups.NaesActionStatus;
import ims.scheduling.vo.BookingAppointmentShortVo;
import ims.scheduling.vo.BookingAppointmentShortVoCollection;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialiseForm();
		//wdev-10745
		if (args != null && args.length > 0 && args[0] instanceof Boolean && args[0].equals(Boolean.TRUE))
			form.getLocalContext().setViewActionPlan(Boolean.TRUE);
			
		//---------------
		open();
	}

	private void open()
	{
		clearContextVaribles();
		populateRecordBrowser();
		if( form.getLocalContext().getActionPlanIsNotNull())		//wdev-10576
		{
			form.getLocalContext().setActionPlan(domain.getActionPlan(form.getLocalContext().getActionPlan()));
			form.getLocalContext().setCurrentQuarterYear(form.getLocalContext().getActionPlan()!=null ? form.getLocalContext().getActionPlan().getQuarterYear() : null);//WDEV-19464 
			
			if(form.getLocalContext().getActionPlanIsNotNull())
				form.lyr1().tabDetails().recbrActionPlan().setValue(form.getLocalContext().getActionPlan());	
		}
		
		//wdev-10745
		if(form.getLocalContext().getViewActionPlanIsNotNull() && form.getLocalContext().getViewActionPlan().equals(Boolean.TRUE))
		{
			if(form.getGlobalContext().getActionPlanIsNotNull() && form.lyr1().tabDetails().recbrActionPlan().getValues().contains(form.getGlobalContext().getActionPlan()))
				form.lyr1().tabDetails().recbrActionPlan().setValue(form.getGlobalContext().getActionPlan());
			form.getLocalContext().setViewActionPlan(null);
		}
		//----
	
		populateScreenFromData(form.lyr1().tabDetails().recbrActionPlan().getValue());

		form.setMode(FormMode.VIEW);
	}

	private void populateRecordBrowser()
	{
		form.lyr1().tabDetails().recbrActionPlan().clear();

		ActionPlanVoCollection actionPlans = domain.listActionPlansByReferral(form.getGlobalContext().Naes.getReferral());
		
		if (actionPlans != null)
		{
			//actionPlans.sort(new StringComparator(SortOrder.DESCENDING)); ////WDEV-14206 
			
			for (int i = 0; i < actionPlans.size(); i++)
			{
				String endDate = " ";
				if (actionPlans.get(i).getDateCompleted() != null)
				{
					endDate = "End date: " + actionPlans.get(i).getDateCompleted().toString();
				}
				
				form.lyr1().tabDetails().recbrActionPlan().newRow(actionPlans.get(i), "Start date: " + actionPlans.get(i).getDateCommenced().toString() + " " + endDate + " Order No. " + actionPlans.get(i).getOrderNumber());
			}
		}

	}

	private void initialiseForm()
	{
		form.getContextMenus().Core.getActionsADDItem().setText("Add Action");
		form.getContextMenus().Core.getActionsMULTIADDItem().setText("Add Template");
		form.getContextMenus().Core.hideAllActionsMenuItems();
		form.lyr1().tabDetails().RecallGroup().setValue(RecallGroupEnumeration.rdoNo);
		form.lyr1().tabDetails().intPeriodValue().setVisible(false);
		form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
		form.lyr1().tabDetails().lbl8().setVisible(false);
		form.lyr1().tabDetails().pnlRecallDetails().setVisible(false);
		form.lyr1().tabDetails().lbl5().setVisible(false);
		form.lyr1().tabDetails().RecallGroup().setVisible(false);
		form.lyr1().tabNotes().btnNewNote().setEnabled(false);
		form.btnEdit().setVisible(true);
		form.btnNew().setVisible(true);
		form.btnEdit().setEnabled(false);
		form.btnNew().setEnabled(engine.hasRight(AppRight.ALLOW_NEW_NAES_ACTION_PLAN));//WDEV-18965

		if (form.getGlobalContext().Naes.getReferralIsNotNull() && form.getGlobalContext().Naes.getReferral().getCareContextIsNotNull())
		{
			BookingAppointmentShortVoCollection appointments = domain.listAppointmentsByCareContext(form.getGlobalContext().Naes.getReferral().getCareContext());
			populateAppointmentsGrid(appointments);

			NAESReferralNoteVoCollection notes = domain.getNotes(form.getGlobalContext().Naes.getReferral());
			if (notes != null)
				populateNotesGrid(notes);
		}
		//wdev-10745
		form.getLocalContext().setViewActionPlan(null);
		//
		
		form.getLocalContext().setActionPlan(null); //wdev-10576
		form.getLocalContext().setCurrentQuarterYear(null); //WDEV-19464
		
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().NAES.ActionPlanDialog))
		{
			if (result == DialogResult.OK)
			{
				if (form.getGlobalContext().Naes.getActionPlanTemplatesIsNotNull())
				{
					ActionPlanVo actionPlanvo = form.getGlobalContext().Naes.getActionPlanTemplates();
					populateScreenFromData(actionPlanvo);
					form.getLocalContext().setFinalCureCompletedActionAdded(actionPlanvo.isLabCompletionActionCompleted());//WDEV-19437
				}

				if (form.getGlobalContext().Naes.getActionPlanTemplates().isLabCompletionActionCompleted())
				{
					form.lyr1().tabDetails().intQuarter().setValue(form.getGlobalContext().Naes.getActionPlanTemplates().calculateYearQuater());
					form.getLocalContext().setFinalCureCompletedActionAdded(true);//WDEV-19437
				}
				
				generateAndDisplayBatchNumber();
			}
			updateContextMenu();
		}
		else if (formName.equals(form.getForms().NAES.ActionDialog))
		{
			if (result == DialogResult.OK)
			{
				if (form.getGlobalContext().Naes.getActionDetailsIsNotNull())
				{
					//the row here needs to be the current or if the current is a header row it needs to be a new childrow
					ims.naes.forms.actionplan.GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow row = null;
					if(form.lyr1().tabDetails().grdPlanDetails().getSelectedRow() != null)
					{
						if(form.lyr1().tabDetails().grdPlanDetails().getSelectedRow().getValue() instanceof ActionPlanTemplateVo)
							row = form.lyr1().tabDetails().grdPlanDetails().getSelectedRow().getRows().newRow();
						else
							row = form.lyr1().tabDetails().grdPlanDetails().getSelectedRow();
					}
					
					createAction(form.getGlobalContext().Naes.getActionDetails(), row);
				}
				else if (form.getGlobalContext().Naes.getActionDetails() == null)
				{
					ActionDetailVo voActionDetail = form.getGlobalContext().Naes.getActionDetails();
					if (voActionDetail.getActionTemplateIsNotNull())
					{
						for (int i = 0; i < form.lyr1().tabDetails().grdPlanDetails().getRows().size(); i++)
						{
							grdPlanDetailsRow row = form.lyr1().tabDetails().grdPlanDetails().getRows().get(i);
							if (row.getValue() instanceof ActionPlanTemplateVo)
							{
								if (row.getValue().equals(voActionDetail.getActionTemplate()))
								{
									grdPlanDetailsRow childRow = row.getRows().newRow();
									createAction(voActionDetail, childRow);
								}
							}
						}
					}
					else
					{
						grdPlanDetailsRow row = form.lyr1().tabDetails().grdPlanDetails().getRows().newRow();
						createAction(voActionDetail, row);
					}
				}

				if (form.getGlobalContext().getActionPlanIsNotNull())
				{
					ActionDetailVo actionDetailVo = form.getGlobalContext().Naes.getActionDetails();
					if (actionDetailVo.getAction().equals(Action.SCLERACODEVERIFIED))
					{
						form.lyr1().tabDetails().txtSclera().setValue(form.getGlobalContext().getActionPlan().getSclera());
					}
					else if (actionDetailVo.getAction().equals(Action.LABCOMP))
					{
						form.lyr1().tabDetails().txtFinalCure().setValue(form.getGlobalContext().getActionPlan().getFinalCure());
						if (actionDetailVo.getCurrentStatusIsNotNull() && actionDetailVo.getCurrentStatus().getStatusIsNotNull() && actionDetailVo.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
						{
							form.getLocalContext().setFinalCureCompletedActionAdded(true);//WDEV-19437
							form.lyr1().tabDetails().intQuarter().setValue(form.getGlobalContext().getActionPlan().calculateYearQuater());
						}
					}
					
					//WDEV-19437
					/*
					if (form.getGlobalContext().getActionPlan().isLabCompletionActionCompleted())
					{
						form.lyr1().tabDetails().intQuarter().setValue(form.getGlobalContext().getActionPlan().calculateYearQuater());
					}
					*/
				}		
				generateAndDisplayBatchNumber();
			}
			updateContextMenu();
		}
		else if (formName.equals(form.getForms().NAES.NCPComment))
		{
			if (result == DialogResult.OK)
			{
				form.btnNCP().setTooltip(form.getGlobalContext().Naes.getNCPComment());
				createNcpNote(form.getGlobalContext().Naes.getNCPComment());
				updateContextMenu();		//wdev-12427
			}
		}
		else if (formName.equals(form.getForms().NAES.NAESReferralNotesDialog))
		{
			refreshReferralNotes();
		}
		else if (formName.equals(form.getForms().Scheduling.AppointmentHistoryDialog))		//wdev-10595		
		{
			refreshGridAppt();
		}
	}

	//wdev-10595
	private void refreshGridAppt()
	{
		if (form.getGlobalContext().Naes.getReferralIsNotNull() && form.getGlobalContext().Naes.getReferral().getCareContextIsNotNull())
		{
			BookingAppointmentShortVoCollection appointments = domain.listAppointmentsByCareContext(form.getGlobalContext().Naes.getReferral().getCareContext());
			populateAppointmentsGrid(appointments);
		}
	}
	
	private void generateAndDisplayBatchNumber()
	{
		if(form.lyr1().tabDetails().intQuarter().getValue() != null && form.lyr1().tabDetails().txtFinalCure().getValue() != null && form.lyr1().tabDetails().txtSclera().getValue() != null)
			form.lyr1().tabDetails().txtBatchNumber().setValue(form.lyr1().tabDetails().txtSclera().getValue() + form.lyr1().tabDetails().intQuarter().getValue().toString() + form.lyr1().tabDetails().txtFinalCure().getValue());
	}

	private void createNcpNote(String string)
	{
		if (string != null)
		{
			NAESReferralNoteVo ncpNote = null;
			ncpNote = new NAESReferralNoteVo();
			ncpNote.setNote("NCP comment : " + string);
			ncpNote.setRecordingDateTime(new DateTime());
			ncpNote.setReferral(form.getGlobalContext().Naes.getReferral());
			ncpNote.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());

			String[] error = ncpNote.validate();

			if (error != null)
			{
				engine.showErrors(error);
				open();
				return;

			}

			try
			{
				NAESReferralNoteVoCollection Notes = domain.saveNcpNote(ncpNote);
				populateNotesGrid(Notes);

			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;

			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;

			}
		}

	}

	private void refreshReferralNotes()
	{
		form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem().setVisible(false);
		form.lyr1().tabNotes().btnEditNote().setVisible(false);
		NAESReferralNoteVoCollection notes = domain.getNotes(form.getGlobalContext().Naes.getReferral().toNAESReferralRefVo());
		populateNotesGrid(notes);
	}

	private void populateScreenFromData(ActionPlanVo voActionPlan)
	{
		clear();
		form.getLocalContext().setActionPlan(voActionPlan);
		
		if (voActionPlan != null)
		{
			//lab completions
			form.getLocalContext().setNumberOfCompletedLabActions(voActionPlan.countCurrentLabCompletions(true));
			
			populateActionDetailsGrid(voActionPlan.getActions());
			form.lyr1().tabDetails().dteDateComm().setValue(voActionPlan.getDateCommenced());
			if (voActionPlan.getOrderNumberIsNotNull())
			{
				if (voActionPlan.getOrderNumber().equals("   ") && voActionPlan.getEyesInOrderNumber() != null)
					form.lyr1().tabDetails().txtOrderNo().setValue(calculateOrderNum(voActionPlan.getActions(), voActionPlan.getEyesInOrderNumber().getID_EyesInOrderNumber()));
				else
					form.lyr1().tabDetails().txtOrderNo().setValue(voActionPlan.getOrderNumber());
			}

			if (voActionPlan.getScleraIsNotNull())
				form.lyr1().tabDetails().txtSclera().setValue(voActionPlan.getSclera());

			if (voActionPlan.getFinalCureIsNotNull())
				form.lyr1().tabDetails().txtFinalCure().setValue(voActionPlan.getFinalCure());

			if (voActionPlan.getQuarterYearIsNotNull())
				form.lyr1().tabDetails().intQuarter().setValue(voActionPlan.getQuarterYear());

			if (voActionPlan.getBatchNumberIsNotNull())
				form.lyr1().tabDetails().txtBatchNumber().setValue(voActionPlan.getBatchNumber());

			if (voActionPlan.getNcpCommentIsNotNull())
			{
				form.getGlobalContext().Naes.setNCPComment(voActionPlan.getNcpComment());
				form.btnNCP().setTooltip(voActionPlan.getNcpComment());
			}
			else
				form.getGlobalContext().Naes.setNCPComment(null);

			if (voActionPlan.getDateCompletedIsNotNull())
			{
				form.lyr1().tabDetails().dteCompleted().setValue(voActionPlan.getDateCompleted());
				form.lyr1().tabDetails().pnlRecallDetails().setVisible(true);
				form.lyr1().tabDetails().RecallGroup().setVisible(true);
				if (voActionPlan.getRecall().equals(YesNo.YES))
				{
					form.lyr1().tabDetails().RecallGroup().setValue(RecallGroupEnumeration.rdoYes);
					form.lyr1().tabDetails().cmbPeriodUnit().setVisible(true);
					form.lyr1().tabDetails().cmbPeriodUnit().setValue(voActionPlan.getRecallPeriod());
					form.lyr1().tabDetails().intPeriodValue().setValue(voActionPlan.getRecallIn());
					form.lyr1().tabDetails().intPeriodValue().setVisible(true);
					
					//wdev-12498
					form.lyr1().tabDetails().intPeriodValue().setRequired(true);
					form.lyr1().tabDetails().cmbPeriodUnit().setRequired(true);
					//------------------
				}
				else
				{
					form.lyr1().tabDetails().RecallGroup().setValue(RecallGroupEnumeration.rdoNo);
					form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
					form.lyr1().tabDetails().intPeriodValue().setVisible(false);
				}
			}
			else
			{
				form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
				form.lyr1().tabDetails().intPeriodValue().setVisible(false);
			}	
			
			form.btnEdit().setEnabled(true);//WDEV-19474 Remove 6 Month Clock Functionality
		}
		else
		{
			form.btnEdit().setEnabled(false);			//wdev-10576
		}
		
	}

	private String calculateOrderNum(ActionDetailVoCollection actions, Integer eyesInOrderId)
	{
		if (actions == null)
			return "   ";

		for (int i = 0; i < actions.size(); i++)
		{
			Action action = actions.get(i).getAction();

			if (action != null)
			{
				if (action.equals(Action.EYESIN))
				{

					if (actions.get(i).getCurrentStatus().getStatusIsNotNull())
					{

						if (actions.get(i).getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
						{
							return eyesInOrderId != null ? String.valueOf(eyesInOrderId) : "   "; //WDEV-19314
						}

					}
				}
			}
		}

		return "   ";
	}

	private void populateActionDetailsGrid(ActionDetailVoCollection actionDetailVoCollection)
	{
		form.lyr1().tabDetails().grdPlanDetails().getRows().clear();

		if (actionDetailVoCollection != null)
		{
			for (int i = 0; i < actionDetailVoCollection.size(); i++)
			{
				ActionDetailVo voActionDetail = actionDetailVoCollection.get(i);

				if (voActionDetail.getActionTemplateIsNotNull())
					addTemplateActions(voActionDetail.getActionTemplate(), actionDetailVoCollection);
				else
				{
					grdPlanDetailsRow row = form.lyr1().tabDetails().grdPlanDetails().getRows().newRow();
					createAction((ActionDetailVo) actionDetailVoCollection.get(i).clone(), row);
				}
			}
		}
	}

	private void addTemplateActions(ActionPlanTemplateVo actionTemplate, ActionDetailVoCollection actionDetailVoCollection)
	{
		if (templateAdded(actionTemplate))
			return;
		
		grdPlanDetailsRow row = form.lyr1().tabDetails().grdPlanDetails().getRows().newRow();
		
		row.setAction(actionTemplate.getActionPlanName());
		row.setValue(actionTemplate);

		ActionDetailVoCollection voCollActionDetail = new ActionDetailVoCollection();
		for (int i = 0; i < actionDetailVoCollection.size(); i++)
		{
			ActionDetailVo actionDetailVo = actionDetailVoCollection.get(i);
			if (actionDetailVo.getActionTemplateIsNotNull() && actionDetailVo.getActionTemplate().equals(actionTemplate))
				voCollActionDetail.add((ActionDetailVo) actionDetailVo.clone());
		}

		for(ActionDetailVo voAction : voCollActionDetail)
		{
			grdPlanDetailsRow childRow = row.getRows().newRow();
			createAction(voAction, childRow);
		}

	}

	private boolean templateAdded(ActionPlanTemplateVo actionTemplate)
	{
		for (int i = 0; i < form.lyr1().tabDetails().grdPlanDetails().getRows().size(); i++)
		{
			if (form.lyr1().tabDetails().grdPlanDetails().getRows().get(i).getValue().equals(actionTemplate))
			{
				return true;
			}
		}
		return false;
	}

	private void createAction(ActionDetailVo actionDetailVo, ims.naes.forms.actionplan.GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow row)
	{
		if (actionDetailVo != null)
		{
			if (actionDetailVo.getAction() != null)
				row.setAction(actionDetailVo.getAction().getText());
			else
				row.setAction("");

			if (actionDetailVo.getCurrentStatus().getStatus() != null)
				row.setStatus(actionDetailVo.getCurrentStatus().getStatus().getText());
			else
				row.setStatus("");

			if (actionDetailVo.getStartDate() != null)
				row.setStartDate(actionDetailVo.getStartDate());
			else
				row.setStartDate(null);

			if (actionDetailVo.getResponsibleTechnicianIsNotNull())
				row.setTechnician(actionDetailVo.getResponsibleTechnician().getIItemText());
			else
				row.setTechnician("");

			if (row.getStartDate() != null)
				row.setElapsedDays(getElapsedDays(row.getStartDate()));
			else
				row.setElapsedDays("");

			if (actionDetailVo.getCommentIsNotNull())
				row.setComment(actionDetailVo.getComment());
			else
				row.setComment("");

			row.setValue(actionDetailVo);

		}
	}

	private String getElapsedDays(Date startDate)
	{
		Date now = new Date();

		long days = now.daysBetween(startDate, now);
		String Elapsed = Long.toString(days);
		return Elapsed;
	}

	@Override
	protected void onFormModeChanged()
	{
		
		if (form.getMode().equals(FormMode.VIEW))
		{

			form.getContextMenus().NAES.hideAllNAES_REFERRAL_NOTES_MENUMenuItems();
			form.lnkBack().setVisible(engine.getPreviousNonDialogFormName().equals(form.getForms().NAES.ActionSearch));
			form.lyr1().tabNotes().btnNewNote().setEnabled(false);
			form.btnNCP().setEnabled(false);
			form.getContextMenus().Core.hideAllActionsMenuItems();
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(engine.hasRight(AppRight.ALLOW_NEW_NAES_ACTION_PLAN));//WDEV-18965
			form.btnEdit().setVisible(true);

			if (form.lyr1().tabDetails().dteCompleted().getValue() == null)
			{
				form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
				form.lyr1().tabDetails().RecallGroup().setVisible(false);
				form.lyr1().tabDetails().intPeriodValue().setVisible(false);
				form.lyr1().tabNotes().btnEditNote().setVisible(false);
				form.lyr1().tabNotes().btnNewNote().setEnabled(false);
			}

			form.lyr1().tabDetails().cmbPeriodUnit().setEnabled(false);
			form.lyr1().tabDetails().RecallGroup().setEnabled(false);
			form.lyr1().tabDetails().intPeriodValue().setEnabled(false);
			updateContextMenu();											//wdev-12427
			return;

		}
		if (form.lyr1().tabDetails().dteCompleted().getValue() != null)
		{
			form.lyr1().tabDetails().cmbPeriodUnit().setEnabled(true);
			form.lyr1().tabDetails().RecallGroup().setEnabled(true);
			form.lyr1().tabDetails().intPeriodValue().setEnabled(true);
		}

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.lyr1().tabNotes().btnNewNote().setEnabled(true);
			form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUADD_NOTEItem().setVisible(true);
			form.lnkBack().setVisible(false);
			form.btnEdit().setVisible(false);
			form.btnNew().setVisible(false);

			form.btnCancel().setVisible(true);
			form.btnSave().setVisible(true);
		}

		if (form.lyr1().tabDetails().recbrActionPlan().getValue() == null)
		{

			form.btnEdit().setEnabled(false);

		}
		updateContextMenu();											//wdev-12427

	}

	@Override
	protected void onBtnNewClicked() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		clearContextVaribles();
		form.setMode(FormMode.EDIT);
		form.btnNCP().setEnabled(engine.hasRight(AppRight.CAN_RECORD_NCP_COMMENT));

		form.lyr1().tabDetails().recbrActionPlan().clear();
		updateContextMenu();
		form.getLocalContext().setActionPlan(new ActionPlanVo());
		form.getLocalContext().setCurrentQuarterYear(null); //WDEV-19464
		
		refreshGridAppt();		//wdev-10595
	}

	private void clearContextVaribles()
	{
		//form.getLocalContext().setActionPlan(null);
		form.getLocalContext().setActionDetail(null);
		form.getLocalContext().setNumberOfCompletedLabActions(null);
		form.getGlobalContext().Naes.setNCPComment(null);
		form.getGlobalContext().Naes.setActionDetails(null);
		//form.getGlobalContext().setActionPlan(null);
		form.getGlobalContext().Naes.setActionPlanTemplates(null);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case ims.naes.forms.actionplan.GenForm.ContextMenus.CoreNamespace.Actions.ADD :
				addAction();
			break;

			case ims.naes.forms.actionplan.GenForm.ContextMenus.CoreNamespace.Actions.REMOVE :
				removeAction();
			break;

			case ims.naes.forms.actionplan.GenForm.ContextMenus.CoreNamespace.Actions.EDIT :
				updateAction();
			break;

			case ims.naes.forms.actionplan.GenForm.ContextMenus.CoreNamespace.Actions.MULTIADD :
				createMultipleActions();
			break;

			case ims.naes.forms.actionplan.GenForm.ContextMenus.NAESNamespace.NAES_REFERRAL_NOTES_MENU.ADD_NOTE :
				newNote();
			break;

			case ims.naes.forms.actionplan.GenForm.ContextMenus.NAESNamespace.NAES_REFERRAL_NOTES_MENU.EDIT_NOTE :
				editNote();
			break;
		}
	}

	private void createMultipleActions()
	{
		boolean completedSceleraExists = checkForCompletedSclera();
		boolean completedLabExists = checkForCompletedLab();

		form.getGlobalContext().Naes.setActionPlanTemplates(populateDataFromScreen());
		engine.open(form.getForms().NAES.ActionPlanDialog, new Object[]{completedSceleraExists, completedLabExists});
	}

	private void updateAction()
	{
		boolean completedSceleraExists = checkForCompletedSclera();
		boolean completedLabExists = checkForCompletedLab();

		form.getGlobalContext().Naes.setActionDetails((ActionDetailVo) form.lyr1().tabDetails().grdPlanDetails().getSelectedRow().getValue());
		if (form.getLocalContext().getActionDetailIsNotNull())
		{
			form.getLocalContext().getActionPlan().setSclera(form.lyr1().tabDetails().txtSclera().getValue());
			form.getLocalContext().getActionPlan().setFinalCure(form.lyr1().tabDetails().txtFinalCure().getValue());
		}
		form.getGlobalContext().setActionPlan(form.getLocalContext().getActionPlan());
		engine.open(form.getForms().NAES.ActionDialog, new Object[]{null, completedSceleraExists, completedLabExists});
	}

	private void removeAction() //WDEV-19464
	{
		ActionDetailVo actionFinalCureRemoved=null;
		
		if ((form.lyr1().tabDetails().grdPlanDetails().getValue() instanceof ActionDetailVo ) && (( ActionDetailVo)form.lyr1().tabDetails().grdPlanDetails().getValue()).getAction().equals(Action.LABCOMP))
		{
			actionFinalCureRemoved=( ActionDetailVo)form.lyr1().tabDetails().grdPlanDetails().getValue();
		}
			
		form.lyr1().tabDetails().grdPlanDetails().removeSelectedRow();
		
		if (actionFinalCureRemoved!=null)
		{
			ActionDetailVoCollection actions = new ActionDetailVoCollection();
			
			actions = populateActionsDataFromScreen(actions);
			
			if (!isLabCompletionActionCompleted(actions))
			{
				form.lyr1().tabDetails().intQuarter().setValue(form.getLocalContext().getCurrentQuarterYear());
			}
		}
		
		updateContextMenu();
	}

	//WDEV-19464
	public boolean isLabCompletionActionCompleted(ActionDetailVoCollection actions)
	{
		if (actions == null)
			return false;
	
		int countlabcompletions = 0;
		
		for (ims.naes.vo.ActionDetailVo voAction : actions)
		{
			if (voAction.getActionIsNotNull() 
				&& voAction.getID_ActionDetail() == null
				&& voAction.getAction().equals(ims.naes.vo.lookups.Action.LABCOMP) 
				&& voAction.getCurrentStatusIsNotNull() 
				&& voAction.getCurrentStatus().getStatusIsNotNull() 
				&& voAction.getCurrentStatus().getStatus().equals(ims.naes.vo.lookups.NaesActionStatus.COMPLETED))
				countlabcompletions++;
		}
	
		return countlabcompletions > 0;
	}
	
	
	private void addAction()
	{
		Boolean completedSceleraExists = checkForCompletedSclera();
		Boolean completedLabExists = checkForCompletedLab();

		form.getGlobalContext().Naes.setActionDetails(null);
		form.getLocalContext().setActionDetail(null);
		if (form.getLocalContext().getActionDetailIsNotNull())
		{
			form.getLocalContext().getActionPlan().setSclera(form.lyr1().tabDetails().txtSclera().getValue());
			form.getLocalContext().getActionPlan().setFinalCure(form.lyr1().tabDetails().txtFinalCure().getValue());
		}

		form.getGlobalContext().setActionPlan(form.getLocalContext().getActionPlan());
		if (form.lyr1().tabDetails().grdPlanDetails().getSelectedRow() != null && form.lyr1().tabDetails().grdPlanDetails().getValue() instanceof ActionPlanTemplateVo)
		{

			engine.open(form.getForms().NAES.ActionDialog, new Object[]{form.lyr1().tabDetails().grdPlanDetails().getValue(), completedSceleraExists, completedLabExists});
		}
		else
			engine.open(form.getForms().NAES.ActionDialog, new Object[]{null, completedSceleraExists, completedLabExists});
	}

	private boolean checkForCompletedSclera()
	{
		for (int i = 0; i < form.lyr1().tabDetails().grdPlanDetails().getRows().size(); i++)
		{
			grdPlanDetailsRow row = form.lyr1().tabDetails().grdPlanDetails().getRows().get(i);
			if (row.getValue() instanceof ActionPlanTemplateVo)
			{
				for (int j = 0; j < row.getRows().size(); j++)
				{
					grdPlanDetailsRow childRow = row.getRows().get(j);
					if (childRow.getValue() instanceof ActionDetailVo)
					{
						ActionDetailVo voActionDetail = (ActionDetailVo) childRow.getValue();
						if (voActionDetail.getAction().equals(Action.SCLERACODEVERIFIED) && voActionDetail.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
							return true;
					}
				}
			}
			else if (row.getValue() instanceof ActionDetailVo)
			{
				ActionDetailVo voActionDetail = (ActionDetailVo) row.getValue();
				if (voActionDetail.getAction().equals(Action.SCLERACODEVERIFIED) && voActionDetail.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
					return true;
			}
		}
		return false;
	}

	private boolean checkForCompletedLab()
	{
		for (int i = 0; i < form.lyr1().tabDetails().grdPlanDetails().getRows().size(); i++)
		{
			grdPlanDetailsRow row = form.lyr1().tabDetails().grdPlanDetails().getRows().get(i);
			if (row.getValue() instanceof ActionPlanTemplateVo)
			{
				for (int j = 0; j < row.getRows().size(); j++)
				{
					grdPlanDetailsRow childRow = row.getRows().get(j);
					if (childRow.getValue() instanceof ActionDetailVo)
					{
						ActionDetailVo voActionDetail = (ActionDetailVo) childRow.getValue();
						if (voActionDetail.getAction().equals(Action.LABCOMP) && voActionDetail.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
							return true;
					}
				}
			}
			else if (row.getValue() instanceof ActionDetailVo)
			{
				ActionDetailVo voActionDetail = (ActionDetailVo) row.getValue();
				if (voActionDetail.getAction().equals(Action.LABCOMP) && voActionDetail.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
					return true;
			}
		}
		return false;
	}

	@Override
	protected void onbntEditClicked() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.btnNCP().setEnabled(engine.hasRight(AppRight.CAN_RECORD_NCP_COMMENT));
		form.getLocalContext().setActionPlan(form.lyr1().tabDetails().recbrActionPlan().getValue());
		form.getLocalContext().setCurrentQuarterYear(form.getLocalContext().getActionPlan()!=null ? form.getLocalContext().getActionPlan().getQuarterYear() : null); //WDEV-19464
		
		updateContextMenu();
		refreshGridAppt();			//wdev-10595
	}

	@Override
	protected void onActionGridSelectionChanged() throws PresentationLogicException
	{
		if (form.lyr1().tabDetails().grdPlanDetails().getSelectedRow().getValue() instanceof ActionDetailVo)
			form.getLocalContext().setActionDetail((ActionDetailVo) form.lyr1().tabDetails().grdPlanDetails().getSelectedRow().getValue());
		
		updateContextMenu();
	}

	private void updateContextMenu()
	{
		form.getContextMenus().Core.hideAllActionsMenuItems();
		
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().Core.getActionsMULTIADDItem().setVisible(true);
			if (form.lyr1().tabDetails().grdPlanDetails().getValue() != null && form.lyr1().tabDetails().grdPlanDetails().getValue() instanceof ActionPlanTemplateVo)
			{
				form.getContextMenus().Core.getActionsADDItem().setVisible(true);
			}
			else if (form.lyr1().tabDetails().grdPlanDetails().getValue() != null && form.lyr1().tabDetails().grdPlanDetails().getValue() instanceof ActionDetailVo)
			{
				ActionDetailVo voTemp = (ActionDetailVo) form.lyr1().tabDetails().grdPlanDetails().getValue();	//wdev-11734
				if(voTemp.getCurrentStatusIsNotNull() && voTemp.getCurrentStatus().getStatusIsNotNull() && !voTemp.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED)) //wdev-11734
					form.getContextMenus().Core.getActionsEDITItem().setVisible(true);
				form.getContextMenus().Core.getActionsREMOVEItem().setVisible(true);
			}
			
			if (form.lyr1().tabNotes().grdNotes().getSelectedRow() != null)									//wdev-12427
				form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem().setVisible(true);
			else
				form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem().setVisible(false);
			
		}
		else
			form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem().setVisible(form.lyr1().tabNotes().grdNotes().getSelectedRow() != null);	//wdev-12474
	}

	@Override
	protected void onBtnSaveClicked() throws PresentationLogicException
	{
		ActionPlanVo voActionPlan = populateDataFromScreen();

		//lab completions and quarter history
		int totalCompletions = voActionPlan.countCurrentLabCompletions(false);
		int currentCompletions = form.getLocalContext().getNumberOfCompletedLabActionsIsNotNull() ? form.getLocalContext().getNumberOfCompletedLabActions() : 0;
		
		if(totalCompletions > 0 && voActionPlan.getQuarterYear() == null)
			voActionPlan.setQuarterYear(voActionPlan.calculateYearQuater());
		
		// if this is the second or subsequent time a lab completion has been done update the quarter year and history
		//if(totalCompletions > 1 && totalCompletions > currentCompletions && currentCompletions > 0) //WDEV-19437
		if(Boolean.TRUE.equals(form.getLocalContext().getFinalCureCompletedActionAdded()) && quarterWasChanged() && voActionPlan.isLabCompletionActionCompleted()) //WDEV-19437 //WDEV-19464
		{
			if (voActionPlan.getQuarterHistory() == null)
				voActionPlan.setQuarterHistory(new ActionPlanQuarterVoCollection());

			ActionPlanQuarterVo voQuarter = new ActionPlanQuarterVo();
			voQuarter.setDateTime(new DateTime());
			voQuarter.setResponsibleMos((MemberOfStaffRefVo) domain.getMosUser());
			if(voActionPlan.getQuarterYear() == null)
				throw new CodingRuntimeException("Quarter Year is null in method isLabCompletionActionCompleted");
			
			voQuarter.setQuarter(form.getLocalContext().getCurrentQuarterYear()); //WDEV-9193
			voActionPlan.getQuarterHistory().add(voQuarter);

			voActionPlan.setQuarterYear(form.lyr1().tabDetails().intQuarter().getValue());//WDEV-19464
		}
	
		voActionPlan.setBatchNumber(populateBatchNumber(voActionPlan));// 	WDEV-15381
		
		String[] errors = voActionPlan.validate(validateUI(voActionPlan));
		if (errors != null)	
		{
			engine.showErrors(errors);
			return;
		}

		ActionPlanVo savedActionPlanVo = null;
		try
		{
			savedActionPlanVo = domain.saveActionPlan(voActionPlan);
			form.getLocalContext().setActionPlan(savedActionPlanVo);	//wdev-10567
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
																		
		}
				
		open();					//wdev-10567
		refreshGridAppt();		//wdev-10595
		refreshReferralNotes();	//wdev-10576
		
		form.setMode(FormMode.VIEW);
	}

	//WDEV-19464
	private boolean quarterWasChanged() 
	{
		if (form.getLocalContext().getActionPlan().getQuarterYear()==null && form.lyr1().tabDetails().intQuarter().getValue()!=null)
			return true;
		else if (form.getLocalContext().getActionPlan().getQuarterYear()!=null && form.lyr1().tabDetails().intQuarter().getValue()==null)
			return true;
		else if (form.getLocalContext().getActionPlan().getQuarterYear()!=null && form.lyr1().tabDetails().intQuarter().getValue()!=null && form.getLocalContext().getActionPlan().getQuarterYear()!=form.lyr1().tabDetails().intQuarter().getValue().intValue())
			return true;
		
		return false;
	}

	// 	WDEV-15381
	private String populateBatchNumber(ActionPlanVo voActionPlan) 
	{
		if(voActionPlan == null)
			return null;
		
		if(voActionPlan.getQuarterYear() != null && voActionPlan.getFinalCure() != null && voActionPlan.getSclera() != null)
			return voActionPlan.getSclera() + voActionPlan.getQuarterYear() + voActionPlan.getFinalCure();
		
		return null;
	}

	private String[] validateUI(ActionPlanVo actionPlanvo)  //WDEV-19316
	{
		List<String> error = new ArrayList<String>();

		String[] validationErrors = new String[]{};
		if (actionPlanvo.getDateCompletedIsNotNull())
		{
			if (actionPlanvo.getDateCommencedIsNotNull())
			{
				if (actionPlanvo.getDateCommenced().isGreaterThan(actionPlanvo.getDateCompleted()))
					error.add("The Dispatch date can not be before the Commencement date");
			}

			if (checkActionsForActionType(Action.LABCOMP, actionPlanvo.getActions()))
				error.add("Final Cure action needs to be completed before proceeding");

			if (checkActionsForActionType(Action.EYESIN, actionPlanvo.getActions()))
				error.add("Eyes In action must be completed before proceeding");

			if (checkActionsForActionType(Action.SCLERACODEVERIFIED, actionPlanvo.getActions()))
				error.add("Sclera Code Verified action needs to be completed before proceeding");

			if (checkActionsForActionType(Action.EYESOUT, actionPlanvo.getActions()))
				error.add("Eyes Out action must be completed before proceeding");

			if (checkdates(actionPlanvo.getActions()))
				error.add("At Least one action must have a start date");
		}

		if (actionPlanvo.getScleraIsNotNull())
		{
			Pattern pattern = Pattern.compile("[a-zA-Z]");
			Matcher matcher = pattern.matcher(actionPlanvo.getSclera());
			boolean matchFound = matcher.find();
			if (matchFound == false)
			{
				error.add("Sclera Code must be a letter");
			}
		}

		if (actionPlanvo.getFinalCureIsNotNull())
		{
			Pattern pattern = Pattern.compile("[a-zA-Z]");
			Matcher matcher = pattern.matcher(actionPlanvo.getFinalCure());
			boolean matchFound = matcher.find();
			if (matchFound == false)
			{
				error.add("Final Cure Code must be a letter");
			}
		}
				
		//wdev-12498
		
		if (actionPlanvo.getRecall().equals(YesNo.YES))
		{
			if(actionPlanvo.getRecallPeriod() == null)
				error.add("Recall Period is mandatory.");
			if(actionPlanvo.getRecallIn() == null)
				error.add("Recall in is mandatory.");
		}
		//------------

		return error.toArray(validationErrors);

	}

	private boolean checkdates(ActionDetailVoCollection actions)
	{
		int count = 0;
		for (ActionDetailVo actionDetailVo : actions)
		{
			Date date = actionDetailVo.getStartDate();

			if (date != null)
			{
				count++;
			}

		}

		if (count == 0)
			return true;

		return false;
	}

	private boolean checkActionsForActionType(Action labcomp, ActionDetailVoCollection actions)
	{
		for (ActionDetailVo actionDetailVo : actions)
		{
			if (actionDetailVo.getAction().equals(labcomp) && actionDetailVo.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
				return false;
		}
		return true;
	}

	private boolean allActionsAreComplete(ActionDetailVoCollection actions)
	{

		int count = 0;

		for (int i = 0; i < actions.size(); i++)
		{
			if (actions.get(i).getCurrentStatus().getStatus().equals(NaesActionStatus.OUTSTANDING))
				count++;

		}

		if (count > 0)
			return false;

		return true;
	}

	private boolean allActionsContainsStartDate(ActionDetailVoCollection actions)
	{
		int count = 0;
		for (int i = 0; i < actions.size(); i++)
		{
			if (actions.get(i).getStartDate() == null)
				count++;
		}

		if (count > 0)
			return false;

		return true;
	}

	private boolean actionsContainsStartDate(ActionDetailVoCollection actions)
	{
		if (actions.size() == 0)
			return true;

		int count = 0;
		for (int i = 0; i < actions.size(); i++)
		{
			if (!actions.get(i).getStartDateIsNotNull())
				count++;
		}

		if (count == actions.size())
			return false;

		return true;
	}

	private void valueChanged(ActionPlanVo actionPlanvo)
	{
		populateRecordBrowser();
		populateScreenFromData(actionPlanvo);

	}

	private ActionPlanVo populateDataFromScreen() //WDEV-19474 Remove 6 Month Clock Functionality
	{
		ActionPlanVo actionPlanVo = null;
		ActionDetailVoCollection actions = null;
	
		boolean bEyesOutAlreadyExists = checkForExistingCompletedEyesOut();
		actionPlanVo = (ActionPlanVo) form.getLocalContext().getActionPlan().clone();
		
		//actions
		actions = actionPlanVo.getActions();
		if(actions == null)
			actions = new ActionDetailVoCollection();
		else
			actions.clear();

		actions = populateActionsDataFromScreen(actions);
		
		if (actions.size() == 0)
		{
			form.lyr1().tabDetails().txtFinalCure().setValue("");
			form.lyr1().tabDetails().txtSclera().setValue("");
		}
		actionPlanVo.setActions(actions);

		//wdev-12498
		if( form.lyr1().tabDetails().dteCompleted().getValue() == null )
		{
			form.lyr1().tabDetails().RecallGroup().setValue(RecallGroupEnumeration.rdoNo);
			form.lyr1().tabDetails().pnlRecallDetails().setVisible(false);
			form.lyr1().tabDetails().lbl5().setVisible(false);
			form.lyr1().tabDetails().RecallGroup().setVisible(false);
			form.lyr1().tabDetails().lbl8().setVisible(false);
			form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
			form.lyr1().tabDetails().intPeriodValue().setVisible(false);
			
		}
			
		//-----------
		actionPlanVo.setDateCompleted(form.lyr1().tabDetails().dteCompleted().getValue());
		actionPlanVo.setDateCommenced(form.lyr1().tabDetails().dteDateComm().getValue());

		String sclera = "";
		String finalCure = "";

		if (form.lyr1().tabDetails().txtSclera().getValue() != null)
			sclera = form.lyr1().tabDetails().txtSclera().getValue();

		if (form.lyr1().tabDetails().txtFinalCure().getValue() != null)
			finalCure = form.lyr1().tabDetails().txtFinalCure().getValue();

		if (form.lyr1().tabDetails().intQuarter().getValue() != null)
			actionPlanVo.setBatchNumber(sclera + form.lyr1().tabDetails().intQuarter().getValue().toString() + finalCure);

		actionPlanVo.setQuarterYear(form.lyr1().tabDetails().intQuarter().getValue());

		actionPlanVo.setFinalCure(form.lyr1().tabDetails().txtFinalCure().getValue());

		actionPlanVo.setSclera(form.lyr1().tabDetails().txtSclera().getValue());

		actionPlanVo.setNcpComment(form.getGlobalContext().Naes.getNCPComment());

		actionPlanVo.setNAESReferral(form.getGlobalContext().Naes.getReferral());

		if (form.lyr1().tabDetails().RecallGroup().getValue().equals(RecallGroupEnumeration.rdoYes))
		{
			actionPlanVo.setRecall(YesNo.YES);
			actionPlanVo.setRecallIn(form.lyr1().tabDetails().intPeriodValue().getValue());
			actionPlanVo.setRecallPeriod(form.lyr1().tabDetails().cmbPeriodUnit().getValue());
		}
		else
			actionPlanVo.setRecall(YesNo.NO);

		//order number
		actionPlanVo.setOrderNumber(" ");
		for (int i = 0; i < actions.size(); i++)
		{
			Action action = actions.get(i).getAction();

			if (action != null)
			{
				if (action.equals(Action.EYESIN))
				{
					if (actions.get(i).getCurrentStatus().getStatusIsNotNull())
					{
						//WDEV-17853
						if (actions.get(i).getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
						{
							if (actionPlanVo.getEyesInOrderNumber() != null)
							{
								if (actionPlanVo.getEyesInOrderNumber().getID_EyesInOrderNumber() != null)
								{
									actionPlanVo.setOrderNumber(actionPlanVo.getEyesInOrderNumber().getID_EyesInOrderNumber().toString());
								}
								else
								{
									actionPlanVo.setOrderNumber("   ");
								}

								break;
							}
							//for old records, do not modify the order number.
							else if (form.getLocalContext().getActionPlan().getOrderNumber() != null && !form.getLocalContext().getActionPlan().getOrderNumber().trim().equals(""))
							{
								actionPlanVo.setOrderNumber(form.getLocalContext().getActionPlan().getOrderNumber());
								break;
							}
							else
							{
								EyesInOrderNumberVo newOrderNumber = new EyesInOrderNumberVo();
								newOrderNumber.setNAESReferral(actionPlanVo.getNAESReferral());
								actionPlanVo.setEyesInOrderNumber(newOrderNumber);
								actionPlanVo.setOrderNumber("   ");
								break;
							}
						}
					}
				}
				else
					actionPlanVo.setOrderNumber(" ");
			}
		}
		if (actions.size() == 0)
		{
			actionPlanVo.setOrderNumber(" ");
		}

		return actionPlanVo;
	}

	private boolean checkForExistingCompletedEyesOut()
	{
		ActionPlanVoCollection collActions = null;

		List items = form.lyr1().tabDetails().recbrActionPlan().getValues();
		if (items != null && items.size() > 0)
		{
			collActions = new ActionPlanVoCollection();
			for (int i = 0; i < items.size(); i++)
			{
				collActions.add((ActionPlanVo) items.get(i));
			}
		}

		if (collActions != null)
		{
			for (int i = 0; i < collActions.size(); i++)
			{
				ActionPlanVo actionPlanVo = collActions.get(i);
				for (int j = 0; j < actionPlanVo.getActions().size(); j++)
				{
					ActionDetailVo action = actionPlanVo.getActions().get(j);
					if (action.getAction().equals(Action.EYESOUT) && action.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
						return true;
				}
			}
		}

		return false;
	}

	private ActionDetailVoCollection populateActionsDataFromScreen(ActionDetailVoCollection voCollActions )
	{
		if (voCollActions == null)
			throw new CodingRuntimeException("voCollActions is null in method getActionsFromGrid");
		
		for (int i = 0; i < form.lyr1().tabDetails().grdPlanDetails().getRows().size(); i++)
		{
			grdPlanDetailsRow row = form.lyr1().tabDetails().grdPlanDetails().getRows().get(i);
			if (row.getValue() instanceof ActionDetailVo)
				voCollActions.add((ActionDetailVo) row.getValue());
			else
			{
				for (int j = 0; j < row.getRows().size(); j++)
				{
					grdPlanDetailsRow childRow = row.getRows().get(j);
					if (childRow.getValue() instanceof ActionDetailVo)
						voCollActions.add((ActionDetailVo) childRow.getValue());
				}
			}
		}
		return voCollActions;
	}

	private boolean actionsOnlyContainsEyesout(ActionDetailVoCollection actions)
	{
		//WDEV-6677
		if(actions == null)
			return false;
		
		boolean actionOnly = false;
		for (ActionDetailVo actionDetailVo : actions)
		{
			if (actionDetailVo.getAction().equals(Action.EYESOUT))
			{
				actionOnly = true;
			}
			else
			{
				actionOnly = false;
				break;
			}
		}

		return actionOnly;
	}

	private boolean actionIsTheFirstEyesOut(ActionDetailVo action, ActionDetailVoCollection actions)
	{
		Boolean x = true;
		for (ActionDetailVo actionDetailVo : actions)
		{
			NaesActionStatus status = actionDetailVo.getCurrentStatus().getStatus();
			if (actionDetailVo.getAction().equals(Action.EYESOUT) && status.equals(NaesActionStatus.COMPLETED))
			{
				if (actionDetailVo.getSysinfo() != null && action.getSysinfo() != null)
					x = actionDetailVo.getSysinfo().getCreationDateTime().isGreaterOrEqualThan(action.getSysinfo().getCreationDateTime());
				else
					x = true;
			}
		}
		return x;
	}

	@Override
	protected void onbtnCanceledClicked() throws PresentationLogicException
	{
		form.btnEdit().setVisible(true);
		form.btnNew().setVisible(true);
		refresh();
		refreshGridAppt();				//wdev-10595

	}

	private void refresh()
	{
		clearContextVaribles();
		clear();
		open();
	}

	private void clear()
	{
		form.btnNCP().setTooltip("");
		form.lyr1().tabDetails().dteCompleted().setValue(null);
		form.lyr1().tabDetails().dteDateComm().setValue(null);
		form.lyr1().tabDetails().grdPlanDetails().getRows().clear();
		form.lyr1().tabDetails().txtOrderNo().setValue("");
		form.lyr1().tabDetails().intQuarter().setValue(null);

		form.lyr1().tabDetails().txtFinalCure().setValue("");
		form.lyr1().tabDetails().txtSclera().setValue("");

		form.lyr1().tabDetails().txtBatchNumber().setValue("");

		form.lyr1().tabDetails().intPeriodValue().setValue(null);
		form.lyr1().tabDetails().cmbPeriodUnit().setValue(null);

		form.lyr1().tabDetails().pnlRecallDetails().setVisible(false);
		form.lyr1().tabDetails().lbl5().setVisible(false);
		//wdev-12498
		form.lyr1().tabDetails().RecallGroup().setValue(RecallGroupEnumeration.rdoNo);
		//
		form.lyr1().tabDetails().RecallGroup().setVisible(false);	

		form.lyr1().tabDetails().lbl8().setVisible(false);
		form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
		form.lyr1().tabDetails().intPeriodValue().setVisible(false);
		
	}

	@Override
	protected void onRadioButtonRecallGroupValueChanged() throws PresentationLogicException
	{
		if (form.lyr1().tabDetails().RecallGroup().getValue().equals(RecallGroupEnumeration.rdoYes))
		{
			form.lyr1().tabDetails().intPeriodValue().setVisible(true);
			form.lyr1().tabDetails().cmbPeriodUnit().setVisible(true);
			form.lyr1().tabDetails().intPeriodValue().setEnabled(true);
			form.lyr1().tabDetails().cmbPeriodUnit().setEnabled(true);
			form.lyr1().tabDetails().lbl8().setVisible(true);
			
						
			//wdev-12498
			form.lyr1().tabDetails().intPeriodValue().setRequired(true);
			form.lyr1().tabDetails().cmbPeriodUnit().setRequired(true);
			//------------------
		}
		else if (form.lyr1().tabDetails().RecallGroup().getValue().equals(RecallGroupEnumeration.rdoNo))
		{
			form.lyr1().tabDetails().cmbPeriodUnit().setValue(null);		//wdev-14792
			form.lyr1().tabDetails().intPeriodValue().setValue(null);		//wdev-14792
			
			form.lyr1().tabDetails().intPeriodValue().setVisible(false);
			form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
			form.lyr1().tabDetails().lbl8().setVisible(false);
			
			
		}

	}

	@Override
	protected void onrecbActionPlanvalueChanged() throws PresentationLogicException
	{
		clear();
		
		/////////////////
		//WDEV-9193
		if (form.lyr1().tabDetails().recbrActionPlan().getValue() != null)
		{
			form.getLocalContext().setActionPlan((ActionPlanVo) form.lyr1().tabDetails().recbrActionPlan().getValue().clone());
			form.getLocalContext().setCurrentQuarterYear(form.getLocalContext().getActionPlan().getQuarterYear()); 
		}
		else
		{
			form.getLocalContext().setActionPlan(null);
			form.getLocalContext().setCurrentQuarterYear(null);
		}
		/////////////////
		
		if (form.lyr1().tabDetails().recbrActionPlan().getValue() != null)
		{
			clear();
			populateScreenFromData(form.lyr1().tabDetails().recbrActionPlan().getValue());
			form.btnNew().setEnabled(engine.hasRight(AppRight.ALLOW_NEW_NAES_ACTION_PLAN));//WDEV-18965
			form.btnNCP().setTooltip(form.lyr1().tabDetails().recbrActionPlan().getValue().getNcpComment());

		}
		else
		{
			clear();
			form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
			form.lyr1().tabDetails().RecallGroup().setVisible(false);
			form.lyr1().tabDetails().intPeriodValue().setVisible(false);
			form.btnEdit().setEnabled(false);
			form.btnNew().setEnabled(engine.hasRight(AppRight.ALLOW_NEW_NAES_ACTION_PLAN));//WDEV-18965

		}

	}

	@Override
	protected void ondteCompletedValueChanged() throws PresentationLogicException
	{

		if (form.lyr1().tabDetails().dteCompleted().getValue() != null)
		{
			form.lyr1().tabDetails().pnlRecallDetails().setVisible(true);
			form.lyr1().tabDetails().RecallGroup().setValue(RecallGroupEnumeration.rdoNo);
			
			//wdev-14792
			form.lyr1().tabDetails().lbl8().setVisible(false);
			form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
			form.lyr1().tabDetails().intPeriodValue().setVisible(false);
			
			form.lyr1().tabDetails().cmbPeriodUnit().setValue(null);
			form.lyr1().tabDetails().intPeriodValue().setValue(null);
			//-----------------------------------
			
			form.lyr1().tabDetails().lbl5().setVisible(true);
			form.lyr1().tabDetails().RecallGroup().setVisible(true);
			form.lyr1().tabDetails().RecallGroup().setEnabled(true);
			
			
			return;
		}
		form.lyr1().tabDetails().pnlRecallDetails().setVisible(false);
		form.lyr1().tabDetails().lbl5().setVisible(false);
		form.lyr1().tabDetails().RecallGroup().setVisible(false);
		if (form.lyr1().tabDetails().lbl8().isVisible() || form.lyr1().tabDetails().dteCompleted().getValue() == null)
		{
			form.lyr1().tabDetails().lbl8().setVisible(false);
			form.lyr1().tabDetails().cmbPeriodUnit().setVisible(false);
			form.lyr1().tabDetails().intPeriodValue().setVisible(false);
		}
	}

	@Override
	protected void onBtnNcpClicked() throws PresentationLogicException
	{
		engine.open(form.getForms().NAES.NCPComment);
	}

	@Override
	protected void onlnkBackClicked() throws PresentationLogicException
	{
		form.getGlobalContext().setActionPlan(null);
		form.getGlobalContext().Naes.setReferral(null);
		engine.open(form.getForms().NAES.ActionSearch);
	}

	@Override
	protected void onBtnEditNoteClicked() throws PresentationLogicException
	{
		editNote();

	}

	private void editNote()
	{
		engine.open(form.getForms().NAES.NAESReferralNotesDialog);
		form.getGlobalContext().Naes.setReferralNote(form.lyr1().tabNotes().grdNotes().getSelectedRow().getValue());

	}

	@Override
	protected void onBtnNewNoteClicked() throws PresentationLogicException
	{
		newNote();

	}

	private void newNote()
	{
		engine.open(form.getForms().NAES.NAESReferralNotesDialog);
		form.getGlobalContext().Naes.setReferralNote(new NAESReferralNoteVo());
	}

	@Override
	protected void onGrdNotesValueChanged() throws PresentationLogicException
	{
		if (form.lyr1().tabNotes().grdNotes().getSelectedRow().getValue() != null)
		{
			form.lyr1().tabNotes().btnEditNote().setVisible(true);
			form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem().setVisible(true);
		}

	}

	@Override
	protected void onlyr1TabChanged(LayerBridge tab)
	{

		if (tab.equals(form.lyr1().tabNotes()))
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.btnNCP().setEnabled(false);
				form.btnCancel().setEnabled(false);
				form.btnSave().setEnabled(false);
			}
			form.btnEdit().setEnabled(false);
			form.btnNew().setEnabled(false);
			form.lyr1().tabNotes().btnNewNote().setEnabled(true);
			if (form.lyr1().tabNotes().grdNotes().getSelectedRow() != null)
				form.lyr1().tabNotes().btnEditNote().setVisible(true);
			else
			{
				form.lyr1().tabNotes().btnEditNote().setVisible(false);									//wdev-12408
				//form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem().setVisible(false);
			}

			form.getContextMenus().NAES.getNAES_REFERRAL_NOTES_MENUADD_NOTEItem().setVisible(true);
			return;

		}
		if (tab.equals(form.lyr1().tabDetails()))
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.btnEdit().setEnabled(false);
				form.btnNCP().setEnabled(engine.hasRight(AppRight.CAN_RECORD_NCP_COMMENT));
				form.btnNew().setEnabled(false);
				form.btnCancel().setEnabled(true);
				form.btnSave().setEnabled(true);
				return;
			}

		}

		if (form.lyr1().tabDetails().recbrActionPlan().getValue() != null)
		{
			form.btnEdit().setEnabled(true);
		}
		else
		{
			form.btnEdit().setEnabled(false);//WDEV-19474 Remove 6 Month Clock Functionality
		}

		form.btnNew().setEnabled(engine.hasRight(AppRight.ALLOW_NEW_NAES_ACTION_PLAN));//WDEV-18965
	}

	@Override
	protected void onGrdAppointmentsGridButtonClicked(int column, grdAppointmentsRow row) throws PresentationLogicException
	{
		BookingAppointmentShortVo appointment = domain.getAppointmentById(row.getValue());		//wdev-10595
		engine.open(form.getForms().Scheduling.AppointmentHistoryDialog, new Object[]{appointment.getApptStatusHistory()});
	}

	private void populateNotesGrid(NAESReferralNoteVoCollection notes)
	{
		form.lyr1().tabNotes().grdNotes().getRows().clear();
		if (notes != null && notes.size() != 0)
		{
			for (int i = 0; i < notes.size(); i++)
			{
				grdNotesRow row = form.lyr1().tabNotes().grdNotes().getRows().newRow();
				row.setColDateTime(notes.get(i).getRecordingDateTime().toString());
				row.setColRecUser(notes.get(i).getRecordingUser().getIItemText());
				row.setColNote(notes.get(i).getNote());
				row.setValue(notes.get(i));
				row.setTooltip(notes.get(i).getNote());
			}
		}
	}

	private void populateAppointmentsGrid(BookingAppointmentShortVoCollection appointment)
	{
		form.lyr1().tabDetails().grdAppointments().getRows().clear();
		
		for (int i = 0; i < appointment.size(); i++)
		{
			ims.naes.forms.actionplan.GenForm.lyr1Layer.tabDetailsContainer.grdAppointmentsRow row = form.lyr1().tabDetails().grdAppointments().getRows().newRow();

			row.setClinic(appointment.get(i).getSession().getName());
			row.setStatus(appointment.get(i).getApptStatus().getText());
			row.setDateTime(appointment.get(i).getAppointmentDate().toString() + " " + appointment.get(i).getApptStartTime().toString());

			//WDEV-11568
			String tooltip = "";
			if(appointment.get(i).getActivityIsNotNull())
				tooltip += appointment.get(i).getActivity().getName();
				
			if (appointment.get(i).getCommentsIsNotNull())
				tooltip += " - " + appointment.get(i).getComments();
				
			if(!tooltip.equals(""))
				row.setTooltip(tooltip);

			if (appointment.get(i).getOutcome() != null)
				row.setOutcome(appointment.get(i).getOutcome().getText());

			row.setValue(appointment.get(i));
		}
	}

	protected void onIntPeriodValueValueChanged() throws PresentationLogicException 
	{
		
	}
	
	//WDEV-14206 
	public class StringComparator implements Comparator
	{
		private int direction = 1;

		public StringComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public StringComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;

		}

		public int compare(Object ob1, Object ob2)
		{
			Integer name1 = null;
			Integer name2 = null;
			if (ob1 instanceof ActionPlanVo)
			{
				ActionPlanVo ps1 = (ActionPlanVo) ob1;
				if (ps1.getOrderNumber().equals(" "))
				{
					name1 = 0;
				}
				else
				{
					name1 = ps1 != null ? Integer.parseInt(ps1.getOrderNumber()) : null;
				}
			}
			if (ob2 instanceof ActionPlanVo)
			{
				ActionPlanVo ps2 = (ActionPlanVo) ob2;

				if (ps2.getOrderNumber().equals(" "))
				{
					name2 = 0;
				}
				else
				{
					name2 = ps2 != null ? Integer.parseInt(ps2.getOrderNumber()) : null;
				}

			}
			if (name1 != null)
				return name1.compareTo(name2) * direction;
			if (name2 != null)
				return (-1) * direction;

			return 0;
		}
	
	}
}
