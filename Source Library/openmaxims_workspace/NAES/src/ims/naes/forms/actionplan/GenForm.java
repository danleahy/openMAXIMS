//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.naes.forms.actionplan;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPeriodUnitComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TimeWeeksMonthsYears value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TimeWeeksMonthsYears value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TimeWeeksMonthsYears value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TimeWeeksMonthsYears value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TimeWeeksMonthsYears value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TimeWeeksMonthsYears getValue()
				{
					return (ims.core.vo.lookups.TimeWeeksMonthsYears)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TimeWeeksMonthsYears value)
				{
					super.control.setValue(value);
				}
			}
			public static class recbrActionPlanRecordBrowser extends RecordBrowserBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ActionPlanVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ActionPlanVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ActionPlanVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ActionPlanVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public void newRow(int index, ims.core.vo.ActionPlanVo value, String text)
				{
					super.control.newRow(index, value, text);
				}
				public void newRow(int index, ims.core.vo.ActionPlanVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(index, value, text, image);
				}
				public void newRow(int index, ims.core.vo.ActionPlanVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, textColor);
				}
				public void newRow(int index, ims.core.vo.ActionPlanVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, image, textColor);
				}
				public ims.core.vo.ActionPlanVo getValue()
				{
					return (ims.core.vo.ActionPlanVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ActionPlanVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdAppointmentsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAppointmentsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public String getDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setClinicReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isClinicReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showClinicOpened()
				{
					super.row.showOpened(1);
				}
				public String getClinic()
				{
					return (String)super.row.get(1);
				}
				public void setClinic(String value)
				{
					super.row.set(1, value);
				}
				public void setCellClinicTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isStatusReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showStatusOpened()
				{
					super.row.showOpened(2);
				}
				public String getStatus()
				{
					return (String)super.row.get(2);
				}
				public void setStatus(String value)
				{
					super.row.set(2, value);
				}
				public void setCellStatusTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setOutcomeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isOutcomeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showOutcomeOpened()
				{
					super.row.showOpened(3);
				}
				public String getOutcome()
				{
					return (String)super.row.get(3);
				}
				public void setOutcome(String value)
				{
					super.row.set(3, value);
				}
				public void setCellOutcomeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColApptHistoryReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColApptHistoryReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColApptHistoryOpened()
				{
					super.row.showOpened(4);
				}
				public ims.framework.utils.Image getColApptHistory()
				{
					return (ims.framework.utils.Image)super.row.get(4);
				}
				public void setColApptHistory(ims.framework.utils.Image value)
				{
					super.row.set(4, value);
				}
				public void setCellColApptHistoryTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.scheduling.vo.BookingAppointmentShortVo getValue()
				{
					return (ims.scheduling.vo.BookingAppointmentShortVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.BookingAppointmentShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAppointmentsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAppointmentsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAppointmentsRow get(int index)
				{
					return new grdAppointmentsRow(super.collection.get(index));
				}
				public grdAppointmentsRow newRow()
				{
					return new grdAppointmentsRow(super.collection.newRow());
				}
				public grdAppointmentsRow newRow(boolean autoSelect)
				{
					return new grdAppointmentsRow(super.collection.newRow(autoSelect));
				}
				public grdAppointmentsRow newRowAt(int index)
				{
					return new grdAppointmentsRow(super.collection.newRowAt(index));
				}
				public grdAppointmentsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAppointmentsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAppointmentsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addButtonColumn(String caption, int captionAlignment, int alignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addButtonColumn(caption, captionAlignment, alignment, width, bold, canGrow);
				}
				public ims.scheduling.vo.BookingAppointmentShortVoCollection getValues()
				{
					ims.scheduling.vo.BookingAppointmentShortVoCollection listOfValues = new ims.scheduling.vo.BookingAppointmentShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.BookingAppointmentShortVo getValue()
				{
					return (ims.scheduling.vo.BookingAppointmentShortVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.BookingAppointmentShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdAppointmentsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAppointmentsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAppointmentsRowCollection getRows()
				{
					return new grdAppointmentsRowCollection(super.grid.getRows());
				}
				public grdAppointmentsRow getRowByValue(ims.scheduling.vo.BookingAppointmentShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAppointmentsRow(row);
				}
				public void setDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setClinicHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getClinicHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setOutcomeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getOutcomeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColApptHistoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColApptHistoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public static class grdPlanDetailsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPlanDetailsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setActionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isActionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showActionOpened()
				{
					super.row.showOpened(0);
				}
				public String getAction()
				{
					return (String)super.row.get(0);
				}
				public void setAction(String value)
				{
					super.row.set(0, value);
				}
				public void setCellActionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showStatusOpened()
				{
					super.row.showOpened(1);
				}
				public String getStatus()
				{
					return (String)super.row.get(1);
				}
				public void setStatus(String value)
				{
					super.row.set(1, value);
				}
				public void setCellStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setStartDateReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isStartDateReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showStartDateOpened()
				{
					super.row.showOpened(2);
				}
				public ims.framework.utils.Date getStartDate()
				{
					return (ims.framework.utils.Date)super.row.get(2);
				}
				public void setStartDate(ims.framework.utils.Date value)
				{
					super.row.set(2, value);
				}
				public void setCellStartDateTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setElapsedDaysReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isElapsedDaysReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showElapsedDaysOpened()
				{
					super.row.showOpened(3);
				}
				public String getElapsedDays()
				{
					return (String)super.row.get(3);
				}
				public void setElapsedDays(String value)
				{
					super.row.set(3, value);
				}
				public void setCellElapsedDaysTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setTechnicianReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isTechnicianReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showTechnicianOpened()
				{
					super.row.showOpened(4);
				}
				public String getTechnician()
				{
					return (String)super.row.get(4);
				}
				public void setTechnician(String value)
				{
					super.row.set(4, value);
				}
				public void setCellTechnicianTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setCommentReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isCommentReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showCommentOpened()
				{
					super.row.showOpened(5);
				}
				public String getComment()
				{
					return (String)super.row.get(5);
				}
				public void setComment(String value)
				{
					super.row.set(5, value);
				}
				public void setCellCommentTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.row.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.row.setValue(value);
				}
				public grdPlanDetailsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdPlanDetailsRow(super.row.getParent());
				}
				public grdPlanDetailsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdPlanDetailsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdPlanDetailsRowCollection collection;
			}
			public static class grdPlanDetailsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPlanDetailsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPlanDetailsRow get(int index)
				{
					return new grdPlanDetailsRow(super.collection.get(index));
				}
				public grdPlanDetailsRow newRow()
				{
					return new grdPlanDetailsRow(super.collection.newRow());
				}
				public grdPlanDetailsRow newRow(boolean autoSelect)
				{
					return new grdPlanDetailsRow(super.collection.newRow(autoSelect));
				}
				public grdPlanDetailsRow newRowAt(int index)
				{
					return new grdPlanDetailsRow(super.collection.newRowAt(index));
				}
				public grdPlanDetailsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPlanDetailsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPlanDetailsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[] result = new GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[] getAllRows(GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[] result = new GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyr1Layer.tabDetailsContainer.grdPlanDetailsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.vo.ValueObject[] getValues()
				{
					ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.grid.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.grid.setValue(value);
				}
				public grdPlanDetailsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPlanDetailsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPlanDetailsRowCollection getRows()
				{
					return new grdPlanDetailsRowCollection(super.grid.getRows());
				}
				public grdPlanDetailsRow getRowByValue(ims.vo.ValueObject value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPlanDetailsRow(row);
				}
				public void setActionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getActionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setStartDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getStartDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setElapsedDaysHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getElapsedDaysHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setTechnicianHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getTechnicianHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setCommentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getCommentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
		
			public static class RecallGroupRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 111, 118, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 10);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 63, 118, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 9);
				}
				public void setText(RecallGroupEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public RecallGroupEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return RecallGroupEnumeration.None;
						case 0: return RecallGroupEnumeration.rdoNo;
						case 1: return RecallGroupEnumeration.rdoYes;
					}
					return null;
				}
				public void setValue(RecallGroupEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(RecallGroupEnumeration.None.id);
				}
				public boolean isEnabled(RecallGroupEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(RecallGroupEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(RecallGroupEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(RecallGroupEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class RecallGroupEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static RecallGroupEnumeration None = new RecallGroupEnumeration(-1);
				public static RecallGroupEnumeration rdoNo = new RecallGroupEnumeration(0);
				public static RecallGroupEnumeration rdoYes = new RecallGroupEnumeration(1);
				private RecallGroupEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((RecallGroupEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 384, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Recall Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Commenced:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 440, 112, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Order Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 440, 40, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Dispatch Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 118, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recall:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 159, 118, 19, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "in:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 72, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Sclera code:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 576, 72, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Quarter:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 680, 72, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Final cure code:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 72, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Batch Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 160, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 360, 115, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Action Plan Details:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 552, 112, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 528, 72, 32, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(1), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.UPPER, ims.framework.enumerations.TextTrimming.NONE, "#", "Code is not the correct format"}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 776, 72, 32, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(1), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.UPPER, ims.framework.enumerations.TextTrimming.NONE, "#", "Code is not the correct format"}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 120, 72, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 272, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 552, 40, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 223, 116, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPeriodUnitTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPeriodUnitTemp);
				cmbPeriodUnitComboBox cmbPeriodUnit = (cmbPeriodUnitComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeriodUnitComboBox.class, m_cmbPeriodUnitTemp);
				super.addComboBox(cmbPeriodUnit);
		
				// RecordBrowser Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 792, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				RecordBrowser m_recbrActionPlanTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
				addControl(m_recbrActionPlanTemp);
				recbrActionPlanRecordBrowser recbrActionPlan = (recbrActionPlanRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrActionPlanRecordBrowser.class, m_recbrActionPlanTemp);
				super.addRecordBrowser(recbrActionPlan);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 120, 160, 688, 192, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdAppointmentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAppointmentsTemp);
				grdAppointmentsGrid grdAppointments = (grdAppointmentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAppointmentsGrid.class, m_grdAppointmentsTemp);
				grdAppointments.addStringColumn("Date/Time", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointments.addStringColumn("Clinic", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointments.addStringColumn("Status", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointments.addStringColumn("OutCome", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointments.addButtonColumn(" ", 0, 0, -1, false, true);
				super.addGrid(grdAppointments);
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 808, 136, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPlanDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuActions, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPlanDetailsTemp);
				grdPlanDetailsGrid grdPlanDetails = (grdPlanDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPlanDetailsGrid.class, m_grdPlanDetailsTemp);
				grdPlanDetails.addTreeColumn("Action", 0, 150, false, true);
				grdPlanDetails.addStringColumn("Status", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPlanDetails.addDateColumn("Start Date", 0, 0, 100, true, true, null, false, 0, true);
				grdPlanDetails.addStringColumn("Elapsed Days", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPlanDetails.addStringColumn("Responsible MOS", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPlanDetails.addStringColumn("Comment", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPlanDetails);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 183, 116, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 632, 72, 32, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpRecallGroup = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpRecallGroup);
				RecallGroupRadioButton RecallGroup = (RecallGroupRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(RecallGroupRadioButton.class, tmpRecallGroup);
				RecallGroup.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(RecallGroup);
			}

			public Panel pnlRecallDetails()
			{
				return (Panel)super.getControl(0);
			}
			public Label lbl5()
			{
				return (Label)super.getControl(4);
			}
			public Label lbl8()
			{
				return (Label)super.getControl(5);
			}
			public TextBox txtOrderNo()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txtSclera()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtFinalCure()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtBatchNumber()
			{
				return (TextBox)super.getControl(15);
			}
			public DateControl dteDateComm()
			{
				return (DateControl)super.getControl(16);
			}
			public DateControl dteCompleted()
			{
				return (DateControl)super.getControl(17);
			}
			public cmbPeriodUnitComboBox cmbPeriodUnit()
			{
				return (cmbPeriodUnitComboBox)super.getComboBox(0);
			}
			public recbrActionPlanRecordBrowser recbrActionPlan()
			{
				return (recbrActionPlanRecordBrowser)super.getRecordBrowser(0);
			}
			public grdAppointmentsGrid grdAppointments()
			{
				return (grdAppointmentsGrid)super.getGrid(0);
			}
			public grdPlanDetailsGrid grdPlanDetails()
			{
				return (grdPlanDetailsGrid)super.getGrid(1);
			}
			public IntBox intPeriodValue()
			{
				return (IntBox)super.getControl(22);
			}
			public IntBox intQuarter()
			{
				return (IntBox)super.getControl(23);
			}
			public RecallGroupRadioButton RecallGroup()
			{
				return (RecallGroupRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdNotesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdNotesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setColDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColRecUserReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColRecUserReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColRecUserOpened()
				{
					super.row.showOpened(1);
				}
				public String getColRecUser()
				{
					return (String)super.row.get(1);
				}
				public void setColRecUser(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColRecUserTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColNoteReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColNoteReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColNoteOpened()
				{
					super.row.showOpened(2);
				}
				public String getColNote()
				{
					return (String)super.row.get(2);
				}
				public void setColNote(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColNoteTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.naes.vo.NAESReferralNoteVo getValue()
				{
					return (ims.naes.vo.NAESReferralNoteVo)super.row.getValue();
				}
				public void setValue(ims.naes.vo.NAESReferralNoteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdNotesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdNotesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdNotesRow get(int index)
				{
					return new grdNotesRow(super.collection.get(index));
				}
				public grdNotesRow newRow()
				{
					return new grdNotesRow(super.collection.newRow());
				}
				public grdNotesRow newRow(boolean autoSelect)
				{
					return new grdNotesRow(super.collection.newRow(autoSelect));
				}
				public grdNotesRow newRowAt(int index)
				{
					return new grdNotesRow(super.collection.newRowAt(index));
				}
				public grdNotesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdNotesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdNotesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.naes.vo.NAESReferralNoteVoCollection getValues()
				{
					ims.naes.vo.NAESReferralNoteVoCollection listOfValues = new ims.naes.vo.NAESReferralNoteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.naes.vo.NAESReferralNoteVo getValue()
				{
					return (ims.naes.vo.NAESReferralNoteVo)super.grid.getValue();
				}
				public void setValue(ims.naes.vo.NAESReferralNoteVo value)
				{
					super.grid.setValue(value);
				}
				public grdNotesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdNotesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdNotesRowCollection getRows()
				{
					return new grdNotesRowCollection(super.grid.getRows());
				}
				public grdNotesRow getRowByValue(ims.naes.vo.NAESReferralNoteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdNotesRow(row);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColRecUserHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColRecUserHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColNoteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColNoteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 120, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Note", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 24, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New Note", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 792, 432, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdNotesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENU, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdNotesTemp);
				grdNotesGrid grdNotes = (grdNotesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNotesGrid.class, m_grdNotesTemp);
				grdNotes.addStringColumn("Date/Time", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdNotes.addStringColumn("Recording User", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdNotes.addStringColumn("Notes", 0, 0, -1, true, false, 0, 3500, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdNotes);
			}

			public Button btnEditNote()
			{
				return (Button)super.getControl(0);
			}
			public Button btnNewNote()
			{
				return (Button)super.getControl(1);
			}
			public grdNotesGrid grdNotes()
			{
				return (grdNotesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 552);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper30.getWidth(), anchoringHelper30.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Notes", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNotesContainer m_tabNotesContainer = (tabNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNotesContainer.class, m_tabNotes, factory);
			super.addContainer(m_tabNotes, m_tabNotesContainer);
			ims.framework.utils.SizeInfo m_tabNotesDesignSize = new ims.framework.utils.SizeInfo(832, 552);
			ims.framework.utils.SizeInfo m_tabNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper31.getWidth(), anchoringHelper31.getHeight());
			m_tabNotesContainer.setContext(form, appForm, m_tabNotes, loader, contextMenus, startControlID, m_tabNotesDesignSize, m_tabNotesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabDetails().setVisible(false);
			tabNotes().setVisible(false);
		}
		public void settabDetailsEnabled(boolean value)
		{
			tabDetails().setEnabled(value);
		}
		public void settabNotesEnabled(boolean value)
		{
			tabNotes().setEnabled(value);
		}
		public void showtabDetails()
		{
			tabNotes().setVisible(false);
			tabDetails().setVisible(true);
		}
		public void showtabNotes()
		{
			tabDetails().setVisible(false);
			tabNotes().setVisible(true);
		}

		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(0);
		}
		public tabNotesContainer tabNotes()
		{
			return (tabNotesContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.naes.vo.filterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.naes.vo.filterVo' of the global context variable 'Naes.searchFilter' is not supported.");
		if(!context.isValidContextType(ims.naes.vo.NAESReferralVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.naes.vo.NAESReferralVo' of the global context variable 'Naes.Referral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Naes.Referral", "_cvp_Naes.Referral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Naes.Referral' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getActionPlan();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENU = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENUADD_NOTEItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Note", true, false, new Integer(102179), true, false);
		contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENU.add(contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENUADD_NOTEItem);
		contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Note", true, false, new Integer(102150), true, false);
		contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENU.add(contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem);
		form.registerMenu(contextMenus.NAES.contextMenuNAES_REFERRAL_NOTES_MENU);
		contextMenus.Core.contextMenuActions = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Core.contextMenuActionsADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2610001)))
			contextMenus.Core.contextMenuActions.add(contextMenus.Core.contextMenuActionsADDItem);
		contextMenus.Core.contextMenuActionsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2610002)))
			contextMenus.Core.contextMenuActions.add(contextMenus.Core.contextMenuActionsREMOVEItem);
		contextMenus.Core.contextMenuActionsEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2610003)))
			contextMenus.Core.contextMenuActions.add(contextMenus.Core.contextMenuActionsEDITItem);
		contextMenus.Core.contextMenuActionsMULTIADDItem = factory.createMenuItem(startControlID.intValue() + 6, "Add Multiple", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2610004)))
			contextMenus.Core.contextMenuActions.add(contextMenus.Core.contextMenuActionsMULTIADDItem);
		form.registerMenu(contextMenus.Core.contextMenuActions);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 176, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "NCP", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 664, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Link Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 688, 8, 136, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to Action Search", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnNCP()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(5);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public Link lnkBack()
	{
		return (Link)super.getControl(7);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			NAES = new NAESForms();
			Scheduling = new SchedulingForms();
		}
		public final class NAESForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NAESForms()
			{
				ActionDialog = new LocalFormName(102282);
				ActionPlanDialog = new LocalFormName(102284);
				NCPComment = new LocalFormName(135100);
				ActionSearch = new LocalFormName(102283);
				NAESReferralNotesDialog = new LocalFormName(135102);
			}
			public final FormName ActionDialog;
			public final FormName ActionPlanDialog;
			public final FormName NCPComment;
			public final FormName ActionSearch;
			public final FormName NAESReferralNotesDialog;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				AppointmentHistoryDialog = new LocalFormName(135103);
			}
			public final FormName AppointmentHistoryDialog;
		}

		public NAESForms NAES;
		public SchedulingForms Scheduling;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ActionDetail = new ims.framework.ContextVariable("ActionDetail", prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionDetail_" + componentIdentifier + "");
			cxl_ActionPlan = new ims.framework.ContextVariable("ActionPlan", prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier + "");
			cxl_NumberOfCompletedLabActions = new ims.framework.ContextVariable("NumberOfCompletedLabActions", prefix + "_lv_NAES.ActionPlan.__internal_x_context__NumberOfCompletedLabActions_" + componentIdentifier + "");
			cxl_CurrentQuarterYear = new ims.framework.ContextVariable("CurrentQuarterYear", prefix + "_lv_NAES.ActionPlan.__internal_x_context__CurrentQuarterYear_" + componentIdentifier + "");
			cxl_ViewActionPlan = new ims.framework.ContextVariable("ViewActionPlan", prefix + "_lv_NAES.ActionPlan.__internal_x_context__ViewActionPlan_" + componentIdentifier + "");
			cxl_FinalCureCompletedActionAdded = new ims.framework.ContextVariable("FinalCureCompletedActionAdded", prefix + "_lv_NAES.ActionPlan.__internal_x_context__FinalCureCompletedActionAdded_" + componentIdentifier + "");
		}
		
		public boolean getActionDetailIsNotNull()
		{
			return !cxl_ActionDetail.getValueIsNull(context);
		}
		public ims.naes.vo.ActionDetailVo getActionDetail()
		{
			return (ims.naes.vo.ActionDetailVo)cxl_ActionDetail.getValue(context);
		}
		public void setActionDetail(ims.naes.vo.ActionDetailVo value)
		{
			cxl_ActionDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActionDetail = null;
		public boolean getActionPlanIsNotNull()
		{
			return !cxl_ActionPlan.getValueIsNull(context);
		}
		public ims.core.vo.ActionPlanVo getActionPlan()
		{
			return (ims.core.vo.ActionPlanVo)cxl_ActionPlan.getValue(context);
		}
		public void setActionPlan(ims.core.vo.ActionPlanVo value)
		{
			cxl_ActionPlan.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActionPlan = null;
		public boolean getNumberOfCompletedLabActionsIsNotNull()
		{
			return !cxl_NumberOfCompletedLabActions.getValueIsNull(context);
		}
		public Integer getNumberOfCompletedLabActions()
		{
			return (Integer)cxl_NumberOfCompletedLabActions.getValue(context);
		}
		public void setNumberOfCompletedLabActions(Integer value)
		{
			cxl_NumberOfCompletedLabActions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NumberOfCompletedLabActions = null;
		public boolean getCurrentQuarterYearIsNotNull()
		{
			return !cxl_CurrentQuarterYear.getValueIsNull(context);
		}
		public Integer getCurrentQuarterYear()
		{
			return (Integer)cxl_CurrentQuarterYear.getValue(context);
		}
		public void setCurrentQuarterYear(Integer value)
		{
			cxl_CurrentQuarterYear.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentQuarterYear = null;
		public boolean getViewActionPlanIsNotNull()
		{
			return !cxl_ViewActionPlan.getValueIsNull(context);
		}
		public Boolean getViewActionPlan()
		{
			return (Boolean)cxl_ViewActionPlan.getValue(context);
		}
		public void setViewActionPlan(Boolean value)
		{
			cxl_ViewActionPlan.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ViewActionPlan = null;
		public boolean getFinalCureCompletedActionAddedIsNotNull()
		{
			return !cxl_FinalCureCompletedActionAdded.getValueIsNull(context);
		}
		public Boolean getFinalCureCompletedActionAdded()
		{
			return (Boolean)cxl_FinalCureCompletedActionAdded.getValue(context);
		}
		public void setFinalCureCompletedActionAdded(Boolean value)
		{
			cxl_FinalCureCompletedActionAdded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FinalCureCompletedActionAdded = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public NAESNamespace NAES = new NAESNamespace();
		public CoreNamespace Core = new CoreNamespace();
		public final class NAESNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class NAES_REFERRAL_NOTES_MENU implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_NOTE = 1;
				public static final int EDIT_NOTE = 2;
			}
			public void disableAllNAES_REFERRAL_NOTES_MENUMenuItems()
			{
				this.contextMenuNAES_REFERRAL_NOTES_MENUADD_NOTEItem.setEnabled(false);
				this.contextMenuNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem.setEnabled(false);
			}
			public void hideAllNAES_REFERRAL_NOTES_MENUMenuItems()
			{
				this.contextMenuNAES_REFERRAL_NOTES_MENUADD_NOTEItem.setVisible(false);
				this.contextMenuNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem.setVisible(false);
			}
			private Menu contextMenuNAES_REFERRAL_NOTES_MENU;
			public ReadOnlyMenuItem getNAES_REFERRAL_NOTES_MENUADD_NOTEItem()
			{
				return this.contextMenuNAES_REFERRAL_NOTES_MENUADD_NOTEItem;
			}
			private MenuItem contextMenuNAES_REFERRAL_NOTES_MENUADD_NOTEItem;
			public ReadOnlyMenuItem getNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem()
			{
				return this.contextMenuNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem;
			}
			private MenuItem contextMenuNAES_REFERRAL_NOTES_MENUEDIT_NOTEItem;
		}
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class Actions implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 3;
				public static final int REMOVE = 4;
				public static final int EDIT = 5;
				public static final int MULTIADD = 6;
			}
			public void disableAllActionsMenuItems()
			{
				this.contextMenuActionsADDItem.setEnabled(false);
				this.contextMenuActionsREMOVEItem.setEnabled(false);
				this.contextMenuActionsEDITItem.setEnabled(false);
				this.contextMenuActionsMULTIADDItem.setEnabled(false);
			}
			public void hideAllActionsMenuItems()
			{
				this.contextMenuActionsADDItem.setVisible(false);
				this.contextMenuActionsREMOVEItem.setVisible(false);
				this.contextMenuActionsEDITItem.setVisible(false);
				this.contextMenuActionsMULTIADDItem.setVisible(false);
			}
			private Menu contextMenuActions;
			public MenuItem getActionsADDItem()
			{
				return this.contextMenuActionsADDItem;
			}
			private MenuItem contextMenuActionsADDItem;
			public MenuItem getActionsREMOVEItem()
			{
				return this.contextMenuActionsREMOVEItem;
			}
			private MenuItem contextMenuActionsREMOVEItem;
			public MenuItem getActionsEDITItem()
			{
				return this.contextMenuActionsEDITItem;
			}
			private MenuItem contextMenuActionsEDITItem;
			public MenuItem getActionsMULTIADDItem()
			{
				return this.contextMenuActionsMULTIADDItem;
			}
			private MenuItem contextMenuActionsMULTIADDItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[203];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-ID", "ID_ActionPlan");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-DATECOMMENCED", "DateCommenced");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-ORDERNUMBER", "OrderNumber");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-DATECOMPLETED", "DateCompleted");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-COMMENT", "Comment");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-RECALL", "Recall");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-RECALLIN", "RecallIn");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-RECALLPERIOD", "RecallPeriod");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-NCPCOMMENT", "NcpComment");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-SCLERA", "Sclera");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-QUARTERYEAR", "QuarterYear");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-FINALCURE", "FinalCure");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-BATCHNUMBER", "BatchNumber");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-_6MONTHOPENPERIOD", "SixMonthOpenPeriod");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionPlanTemplates", "BO-1097100001-ACTIONSADDEDWITHIN6MONTHPERIOD", "ActionsAddedWithin6MonthPeriod");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionDetails", "BO-1097100002-ID", "ID_ActionDetail");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionDetails", "BO-1097100002-ACTION", "Action");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionDetails", "BO-1097100002-STARTDATE", "StartDate");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionDetails", "BO-1097100002-TIMEELAPSED", "TimeElapsed");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Naes.ActionDetails", "BO-1097100002-COMMENT", "Comment");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-ID", "ID_ActionPlan");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-DATECOMMENCED", "DateCommenced");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-ORDERNUMBER", "OrderNumber");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-DATECOMPLETED", "DateCompleted");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-COMMENT", "Comment");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-RECALL", "Recall");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-RECALLIN", "RecallIn");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-RECALLPERIOD", "RecallPeriod");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-NCPCOMMENT", "NcpComment");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-SCLERA", "Sclera");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-QUARTERYEAR", "QuarterYear");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-FINALCURE", "FinalCure");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-BATCHNUMBER", "BatchNumber");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-_6MONTHOPENPERIOD", "SixMonthOpenPeriod");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_ActionPlan", "BO-1097100001-ACTIONSADDEDWITHIN6MONTHPERIOD", "ActionsAddedWithin6MonthPeriod");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Naes.ReferralNote", "BO-1097100005-ID", "ID_NAESReferralNote");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Naes.ReferralNote", "BO-1097100005-REFERRAL", "Referral");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Naes.ReferralNote", "BO-1097100005-RECORDINGDATETIME", "RecordingDateTime");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Naes.ReferralNote", "BO-1097100005-NOTE", "Note");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionDetail_" + componentIdentifier, "BO-1097100002-ID", "ID_ActionDetail");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionDetail_" + componentIdentifier, "BO-1097100002-ACTION", "Action");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionDetail_" + componentIdentifier, "BO-1097100002-STARTDATE", "StartDate");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionDetail_" + componentIdentifier, "BO-1097100002-TIMEELAPSED", "TimeElapsed");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionDetail_" + componentIdentifier, "BO-1097100002-COMMENT", "Comment");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-ID", "ID_ActionPlan");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-DATECOMMENCED", "DateCommenced");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-ORDERNUMBER", "OrderNumber");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-DATECOMPLETED", "DateCompleted");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-COMMENT", "Comment");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-RECALL", "Recall");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-RECALLIN", "RecallIn");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-RECALLPERIOD", "RecallPeriod");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-NCPCOMMENT", "NcpComment");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-SCLERA", "Sclera");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-QUARTERYEAR", "QuarterYear");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-FINALCURE", "FinalCure");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-BATCHNUMBER", "BatchNumber");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-_6MONTHOPENPERIOD", "SixMonthOpenPeriod");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_NAES.ActionPlan.__internal_x_context__ActionPlan_" + componentIdentifier, "BO-1097100001-ACTIONSADDEDWITHIN6MONTHPERIOD", "ActionsAddedWithin6MonthPeriod");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
