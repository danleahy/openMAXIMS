//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.65 build 3225.30788)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.naes.forms.actiondialog;

import ims.core.vo.ActionPlanTemplateVo;
import ims.core.vo.ActionPlanVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffLiteVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.naes.vo.ActionDetailStatusVo;
import ims.naes.vo.ActionDetailStatusVoCollection;
import ims.naes.vo.ActionDetailVo;
import ims.naes.vo.ActionDetailVoCollection;
import ims.naes.vo.TemplateActionVo;
import ims.naes.vo.lookups.Action;
import ims.naes.vo.lookups.ActionCollection;
import ims.naes.vo.lookups.LookupHelper;
import ims.naes.vo.lookups.NaesActionStatus;
import ims.naes.vo.lookups.NaesActionStatusCollection;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final String	DUMMYORDNUM	= "   ";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null && args.length == 3)
		{
			form.cmbAction().setEnabled(args[0] != null); //WDEV-14751
			
			if(args[0] instanceof ActionPlanTemplateVo )
				form.getLocalContext().setActionPlanTemplateVo((ActionPlanTemplateVo)args[0]);
			else if (args[0] instanceof Boolean )
				form.getLocalContext().setCompleteAndClose((Boolean) args[0]);
			if(args[1] instanceof Boolean )
				form.getLocalContext().setCompletedSceleraExists((Boolean) args[1]);
			if(args[2] instanceof Boolean )
				form.getLocalContext().setCompletedLabExists((Boolean) args[2]);
		}
			
		if (form.getGlobalContext().Naes.getActionDetailsIsNotNull())
			form.getLocalContext().setactionDetails((ActionDetailVo) form.getGlobalContext().Naes.getActionDetails().clone());
		else
			form.getLocalContext().setactionDetails(new ActionDetailVo());

		init();
		
		populateScreenFromData(form.getLocalContext().getactionDetails());
		
		//WDEV-9397
		if(form.getLocalContext().getCompleteAndCloseIsNotNull() && form.getLocalContext().getCompleteAndClose())
			save();
	}

	private void populateScreenFromData(ActionDetailVo actionDetailVo)
	{
		if (actionDetailVo != null)
		{
			if (actionDetailVo.getActionIsNotNull())
				form.cmbAction().setValue(actionDetailVo.getAction());

			if (actionDetailVo.getCurrentStatusIsNotNull())
				form.cmbStatus().setValue(actionDetailVo.getCurrentStatus().getStatus());
			
			if (form.getGlobalContext().getActionPlanIsNotNull()){
				ActionPlanVo voActionPlanVo = form.getGlobalContext().getActionPlan();
			
				
				if(actionDetailVo.getActionIsNotNull() && actionDetailVo.getAction().equals(Action.SCLERACODEVERIFIED)){
					form.txtCode().setEnabled(true);
					form.lblCode().setValue("Sclera code:");
					if(voActionPlanVo.getScleraIsNotNull()){
						form.txtCode().setValue(voActionPlanVo.getSclera());
					}
				}
				else if(actionDetailVo.getActionIsNotNull() && actionDetailVo.getAction().equals(Action.LABCOMP)){
					form.txtCode().setEnabled(true);
					form.lblCode().setValue("Final Cure code:");
					if(voActionPlanVo.getFinalCureIsNotNull()){
						form.txtCode().setValue(voActionPlanVo.getFinalCure());
					}
				}
			}

			if (actionDetailVo.getStartDateIsNotNull())
			{
				form.dteStart().setValue(actionDetailVo.getStartDate());
				form.txtTimeElapsed().setValue(calculateDaysElapsed(form.dteStart().getValue()));
			}
			else
			{
				form.dteStart().setValue(new Date());
				form.txtTimeElapsed().setValue(calculateDaysElapsed(form.dteStart().getValue()));
			}
			if (actionDetailVo.getResponsibleTechnicianIsNotNull())
			{
				form.qmbTech().newRow(actionDetailVo.getResponsibleTechnician(), actionDetailVo.getResponsibleTechnician().getIMosName());
				form.qmbTech().setValue(actionDetailVo.getResponsibleTechnician());
			}
			else
			{
				//WDEV-11695
				MemberOfStaffLiteVo responsibleTechnician = (MemberOfStaffLiteVo) domain.getMosUser();
				if(responsibleTechnician != null)
				{
					form.qmbTech().newRow(responsibleTechnician,responsibleTechnician.getIMosName());
					form.qmbTech().setValue(responsibleTechnician);
				}
			}

			if (actionDetailVo.getCommentIsNotNull())
				form.txtComment().setValue(actionDetailVo.getComment());
		}
	}

	private String calculateDaysElapsed(Date date)
	{
		if (date != null)
		{
			Date now = new Date();
			long days = now.daysBetween(date, now);
			String Elapsed = Long.toString(days);

			return Elapsed;
		}

		return "";
	}

	private void init()
	{
		form.setMode(FormMode.EDIT);
		ActionCollection actionsColl = LookupHelper.getAction(domain.getLookupService());
		for (int i = 0; i < actionsColl.size(); i++)
		{
			form.cmbAction().newRow(actionsColl.get(i), actionsColl.get(i).getText());
		}
		NaesActionStatusCollection statusColl = LookupHelper.getNaesActionStatus(domain.getLookupService());
		for (int i = 0; i < statusColl.size(); i++)
		{
			form.cmbStatus().newRow(statusColl.get(i), statusColl.get(i).getText());
		}
		
		//WDEV-8978
		if(form.getLocalContext().getactionDetailsIsNotNull() && form.getLocalContext().getactionDetails().getActionIsNotNull())
		{
			if(form.getLocalContext().getactionDetails().getAction().equals(Action.EYESIN))
			{
				if(form.getLocalContext().getactionDetails().getCurrentStatusIsNotNull() && form.getLocalContext().getactionDetails().getCurrentStatus().getStatusIsNotNull() && form.getLocalContext().getactionDetails().getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
				{
					if(form.getGlobalContext().getActionPlanIsNotNull())
					{
						if(form.getGlobalContext().getActionPlan().getOrderNumberIsNotNull() && !form.getGlobalContext().getActionPlan().getOrderNumber().equals(DUMMYORDNUM))
						{
							form.cmbStatus().removeRow(NaesActionStatus.OUTSTANDING);
						}
					}
				}
			}
		}
		
		form.txtCode().setEnabled(false);
		
		if(form.getLocalContext().getactionDetailsIsNotNull()){
			ActionDetailVo voActionDetail = form.getLocalContext().getactionDetails();
			if(voActionDetail.getActionIsNotNull() && voActionDetail.getAction().equals(Action.SCLERACODEVERIFIED) && voActionDetail.getAction().equals(Action.LABCOMP))
				form.txtCode().setEnabled(true);
		}
	}

	@Override
	protected void onBtnCanelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onbtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save();
	}

	private void save()
	{
		ActionDetailVo voActionDetail = populateDataFromScreen();
		String[] errors = voActionDetail.validate(validateActionDetails(voActionDetail));
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().NAES.ActionSearch))
		{
			if (form.getGlobalContext().getActionPlanIsNotNull())
			{
				ActionPlanVo plan = form.getGlobalContext().getActionPlan();

				if (voActionDetail.getActionIsNotNull())
				{
					if (voActionDetail.getAction().equals(Action.EYESIN) && voActionDetail.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
						plan.setOrderNumber(plan.getID_ActionPlan().toString());
					
					errors = plan.validate(validateActionPlan(plan));
					if (errors != null)
					{
						engine.showErrors(errors);
						return;
					}
				}
			}
		}
		
		if (voActionDetail != null)
		{
			form.getGlobalContext().Naes.setActionDetails(voActionDetail);			
			engine.close(DialogResult.OK);
			return;
		}
	}

	private String[] validateActionDetails(ActionDetailVo data) {
		List<String> error = new ArrayList<String>();

		String[] validationErrors = new String[]{};
		if(form.cmbAction().getValue()!=null && form.cmbAction().getValue().equals(Action.SCLERACODEVERIFIED)){
			if((form.txtCode().getValue()==null && form.cmbStatus().getValue() != null 
					&& form.cmbStatus().getValue().equals(NaesActionStatus.COMPLETED)) 
					|| (form.getLocalContext().getCompletedSceleraExists() && form.txtCode().getValue()==null)){
				
				error.add("Sclera Code is mandatory when completed Sclera action exists");
			}
		}
		else if(form.cmbAction().getValue()!=null && form.cmbAction().getValue().equals(Action.LABCOMP)){
			if((form.txtCode().getValue()==null && form.cmbStatus().getValue() != null 
					&& form.cmbStatus().getValue().equals(NaesActionStatus.COMPLETED))
					|| (form.getLocalContext().getCompletedLabExists() && form.txtCode().getValue()==null)){
				
				error.add("Final Cure Code is mandatory when completed Final Cure action exists");	//wdev-12578
			}
		}

		return error.toArray(validationErrors);
	}

	private String[] validateActionPlan(ActionPlanVo actionPlanvo)
	{
		List<String> error = new ArrayList<String>();

		String[] validationErrors = new String[]{};
		if (actionPlanvo.getDateCompletedIsNotNull())
		{
			if (checkActionsForActionType(Action.LABCOMP, actionPlanvo.getActions()))
				error.add("This action plan is complete and Lab Completion action needs to be completed before proceeding");

			if (checkActionsForActionType(Action.EYESIN, actionPlanvo.getActions()))
				error.add("This action plan is complete and Eyes In action must be complete before proceeding");

			if (checkActionsForActionType(Action.SCLERACODEVERIFIED, actionPlanvo.getActions()))
				error.add("This action plan is complete and Sclera code Verifcation action needs to be completed before proceeding");

			if (actionPlanvo.getBatchNumber().length() != 4)
				error.add("This action plan is complete and Batch code is incomplete");

			if (checkActionsForActionType(Action.EYESOUT, actionPlanvo.getActions()))
				error.add("This action plan is complete and Eyes Out action must be complete before proceeding");

			if (checkdates(actionPlanvo.getActions()))
				error.add("This action plan is complete and at Least one action must have a start date");
		}

		if (actionPlanvo.getScleraIsNotNull())
		{
			Pattern pattern = Pattern.compile("[a-zA-Z]");
			Matcher matcher = pattern.matcher(actionPlanvo.getSclera());
			boolean matchFound = matcher.find();
			if (matchFound == false)
			{
				error.add("Sclera Code must be a letter");
			}
		}

		if (actionPlanvo.getFinalCureIsNotNull())
		{
			Pattern pattern = Pattern.compile("[a-zA-Z]");
			Matcher matcher = pattern.matcher(actionPlanvo.getFinalCure());
			boolean matchFound = matcher.find();
			if (matchFound == false)
			{
				error.add("Final Cure Code must be a letter");
			}
		}
		
		return error.toArray(validationErrors);

	}

	private boolean checkdates(ActionDetailVoCollection actions)
	{
		int count = 0;
		for (ActionDetailVo actionDetailVo : actions)
		{
			Date date = actionDetailVo.getStartDate();

			if (date != null)
			{
				count++;
			}

		}

		if (count == 0)
			return true;

		return false;
	}

	private boolean checkActionsForActionType(Action labcomp, ActionDetailVoCollection actions)
	{
		for (ActionDetailVo actionDetailVo : actions)
		{
			if(actionDetailVo.getActionIsNotNull())
			if (actionDetailVo.getAction().equals(labcomp) && actionDetailVo.getCurrentStatus().getStatus().equals(NaesActionStatus.COMPLETED))
				return false;
		}
		return true;
	}

	private ActionDetailVo populateDataFromScreen()
	{
		ActionDetailVo action = form.getLocalContext().getactionDetails();
		if(action == null)
			throw new CodingRuntimeException("action cannot be null in method populateDataFromScreen");
		
		if(action.getStatusHistory() == null)
			action.setStatusHistory(new ActionDetailStatusVoCollection());
		if(action.getCurrentStatus() == null)
			action.setCurrentStatus(new ActionDetailStatusVo());
				
		action.getCurrentStatus().setStatus(form.cmbStatus().getValue());
		action.getCurrentStatus().setStatusDateTime(new DateTime());
		action.getCurrentStatus().setTechnician(form.qmbTech().getValue());
		action.getStatusHistory().add(action.getCurrentStatus());
		
	
		action.setAction(form.cmbAction().getValue());
		action.setComment(form.txtComment().getValue());
		action.setStartDate(form.dteStart().getValue());
		action.setResponsibleTechnician(form.qmbTech().getValue());
		
		if(action.getActionTemplate()==null)
			action.setActionTemplate(form.getLocalContext().getActionPlanTemplateVo());
		
		if(form.getLocalContext().getActionPlanTemplateVoIsNotNull() && action.getID_ActionDetail()==null)
		{
			TemplateActionVo voTemplateAction = new TemplateActionVo();
			voTemplateAction.setActions(form.cmbAction().getValue());
			form.getLocalContext().getActionPlanTemplateVo().getActions().add(voTemplateAction);
		}
		
		if(action.getActionIsNotNull() && action.getAction().equals(Action.SCLERACODEVERIFIED)){
			if(form.getGlobalContext().getActionPlanIsNotNull())
				form.getGlobalContext().getActionPlan().setSclera(form.txtCode().getValue());
		}
		else if(action.getActionIsNotNull() && action.getAction().equals(Action.LABCOMP)){
			if(form.getGlobalContext().getActionPlanIsNotNull())
				form.getGlobalContext().getActionPlan().setFinalCure(form.txtCode().getValue());
		}

		return action;
	}

	@Override
	protected void onStartDateValueChanged() throws PresentationLogicException
	{
		if (form.dteStart().getValue() != null)
		{
			form.txtTimeElapsed().setValue(calculateDaysElapsed(form.dteStart().getValue()));
			return;
		}
		form.txtTimeElapsed().setValue("");
	}

	@Override
	protected void onqmbTechTextSubmitted(String value) throws PresentationLogicException
	{
		MemberOfStaffLiteVoCollection searchResult = domain.getMembersOfStaff(value);
		populateTechQmb(searchResult);

	}

	private void populateTechQmb(MemberOfStaffLiteVoCollection searchResult)
	{
		//wdev-11680
		form.qmbTech().clear();
		//-------
		for (int i = 0; i < searchResult.size(); i++)
		{

			form.qmbTech().newRow(searchResult.get(i), searchResult.get(i).getIMosName());

		}

		form.qmbTech().showOpened();
	}

	@Override
	protected void onCmbActionValueChanged() throws PresentationLogicException {
		form.txtCode().setEnabled(false);
		
		if(form.cmbAction().getValue()!=null 
				&& form.cmbAction().getValue().equals(Action.SCLERACODEVERIFIED)){
			form.txtCode().setEnabled(true);
			form.lblCode().setValue("Sclera code:");
			if(form.getGlobalContext().getActionPlanIsNotNull())
				form.txtCode().setValue(form.getGlobalContext().getActionPlan().getSclera());
		}
		else if(form.cmbAction().getValue()!=null 
				&& form.cmbAction().getValue().equals(Action.LABCOMP)){
			form.txtCode().setEnabled(true);
			form.lblCode().setValue("Final Cure code:");
			if(form.getGlobalContext().getActionPlanIsNotNull())
				form.txtCode().setValue(form.getGlobalContext().getActionPlan().getFinalCure());
		}
		
	}

}
