//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.naes.forms.naes_referral;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.naes.domain.NAES_Referral.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.naes.domain.NAES_Referral domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbReferredByValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbReferredBy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.naes.vo.lookups.NAESReferredBy existingInstance = (ims.naes.vo.lookups.NAESReferredBy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReferredByLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.naes.vo.lookups.NAESReferredBy)
		{
			ims.naes.vo.lookups.NAESReferredBy instance = (ims.naes.vo.lookups.NAESReferredBy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReferredByLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.naes.vo.lookups.NAESReferredBy existingInstance = (ims.naes.vo.lookups.NAESReferredBy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbReferredBy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReferredByLookup()
	{
		this.form.cmbReferredBy().clear();
		ims.naes.vo.lookups.NAESReferredByCollection lookupCollection = ims.naes.vo.lookups.LookupHelper.getNAESReferredBy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbReferredBy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReferredByLookupValue(int id)
	{
		ims.naes.vo.lookups.NAESReferredBy instance = ims.naes.vo.lookups.LookupHelper.getNAESReferredByInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbReferredBy().setValue(instance);
	}
	protected final void defaultcmbReferredByLookupValue()
	{
		this.form.cmbReferredBy().setValue((ims.naes.vo.lookups.NAESReferredBy)domain.getLookupService().getDefaultInstance(ims.naes.vo.lookups.NAESReferredBy.class, engine.getFormName().getID(), ims.naes.vo.lookups.NAESReferredBy.TYPE_ID));
	}
	protected final void oncmbAffectedEyeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAffectedEye().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAffectedEyeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAffectedEyeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAffectedEye().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAffectedEyeLookup()
	{
		this.form.cmbAffectedEye().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAffectedEye().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAffectedEyeLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAffectedEye().setValue(instance);
	}
	protected final void defaultcmbAffectedEyeLookupValue()
	{
		this.form.cmbAffectedEye().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbReferralReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbReferralReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForReferral existingInstance = (ims.core.vo.lookups.ReasonForReferral)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReferralReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ReasonForReferral)
		{
			ims.core.vo.lookups.ReasonForReferral instance = (ims.core.vo.lookups.ReasonForReferral)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReferralReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForReferral existingInstance = (ims.core.vo.lookups.ReasonForReferral)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbReferralReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReferralReasonLookup()
	{
		this.form.cmbReferralReason().clear();
		ims.core.vo.lookups.ReasonForReferralCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getReasonForReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbReferralReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReferralReasonLookupValue(int id)
	{
		ims.core.vo.lookups.ReasonForReferral instance = ims.core.vo.lookups.LookupHelper.getReasonForReferralInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbReferralReason().setValue(instance);
	}
	protected final void defaultcmbReferralReasonLookupValue()
	{
		this.form.cmbReferralReason().setValue((ims.core.vo.lookups.ReasonForReferral)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ReasonForReferral.class, engine.getFormName().getID(), ims.core.vo.lookups.ReasonForReferral.TYPE_ID));
	}
	protected final void oncmbImplantTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbImplantType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.naes.vo.lookups.ImplantType existingInstance = (ims.naes.vo.lookups.ImplantType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbImplantTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.naes.vo.lookups.ImplantType)
		{
			ims.naes.vo.lookups.ImplantType instance = (ims.naes.vo.lookups.ImplantType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbImplantTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.naes.vo.lookups.ImplantType existingInstance = (ims.naes.vo.lookups.ImplantType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbImplantType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbImplantTypeLookup()
	{
		this.form.cmbImplantType().clear();
		ims.naes.vo.lookups.ImplantTypeCollection lookupCollection = ims.naes.vo.lookups.LookupHelper.getImplantType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbImplantType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbImplantTypeLookupValue(int id)
	{
		ims.naes.vo.lookups.ImplantType instance = ims.naes.vo.lookups.LookupHelper.getImplantTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbImplantType().setValue(instance);
	}
	protected final void defaultcmbImplantTypeLookupValue()
	{
		this.form.cmbImplantType().setValue((ims.naes.vo.lookups.ImplantType)domain.getLookupService().getDefaultInstance(ims.naes.vo.lookups.ImplantType.class, engine.getFormName().getID(), ims.naes.vo.lookups.ImplantType.TYPE_ID));
	}
	protected final void oncmbUnderLyingReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbUnderLyingReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.naes.vo.lookups.UnderlyingReason existingInstance = (ims.naes.vo.lookups.UnderlyingReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUnderLyingReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.naes.vo.lookups.UnderlyingReason)
		{
			ims.naes.vo.lookups.UnderlyingReason instance = (ims.naes.vo.lookups.UnderlyingReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUnderLyingReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.naes.vo.lookups.UnderlyingReason existingInstance = (ims.naes.vo.lookups.UnderlyingReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbUnderLyingReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUnderLyingReasonLookup()
	{
		this.form.cmbUnderLyingReason().clear();
		ims.naes.vo.lookups.UnderlyingReasonCollection lookupCollection = ims.naes.vo.lookups.LookupHelper.getUnderlyingReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbUnderLyingReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUnderLyingReasonLookupValue(int id)
	{
		ims.naes.vo.lookups.UnderlyingReason instance = ims.naes.vo.lookups.LookupHelper.getUnderlyingReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbUnderLyingReason().setValue(instance);
	}
	protected final void defaultcmbUnderLyingReasonLookupValue()
	{
		this.form.cmbUnderLyingReason().setValue((ims.naes.vo.lookups.UnderlyingReason)domain.getLookupService().getDefaultInstance(ims.naes.vo.lookups.UnderlyingReason.class, engine.getFormName().getID(), ims.naes.vo.lookups.UnderlyingReason.TYPE_ID));
	}
	protected final void oncmbImplantValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbImplant().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbImplantLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbImplantLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbImplant().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbImplantLookup()
	{
		this.form.cmbImplant().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbImplant().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbImplantLookupValue(int id)
	{
		ims.core.vo.lookups.YesNoUnknown instance = ims.core.vo.lookups.LookupHelper.getYesNoUnknownInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbImplant().setValue(instance);
	}
	protected final void defaultcmbImplantLookupValue()
	{
		this.form.cmbImplant().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbSurgeryRequiredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSurgeryRequired().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSurgeryRequiredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSurgeryRequiredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSurgeryRequired().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSurgeryRequiredLookup()
	{
		this.form.cmbSurgeryRequired().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSurgeryRequired().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSurgeryRequiredLookupValue(int id)
	{
		ims.core.vo.lookups.YesNoUnknown instance = ims.core.vo.lookups.LookupHelper.getYesNoUnknownInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSurgeryRequired().setValue(instance);
	}
	protected final void defaultcmbSurgeryRequiredLookupValue()
	{
		this.form.cmbSurgeryRequired().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbLanguageValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbLanguage().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLanguageLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Language)
		{
			ims.core.vo.lookups.Language instance = (ims.core.vo.lookups.Language)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLanguageLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbLanguage().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLanguageLookup()
	{
		this.form.cmbLanguage().clear();
		ims.core.vo.lookups.LanguageCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLanguage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbLanguage().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLanguageLookupValue(int id)
	{
		ims.core.vo.lookups.Language instance = ims.core.vo.lookups.LookupHelper.getLanguageInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbLanguage().setValue(instance);
	}
	protected final void defaultcmbLanguageLookupValue()
	{
		this.form.cmbLanguage().setValue((ims.core.vo.lookups.Language)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Language.class, engine.getFormName().getID(), ims.core.vo.lookups.Language.TYPE_ID));
	}
	protected final void oncmbInterpreterRequiredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbInterpreterRequired().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInterpreterRequiredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInterpreterRequiredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbInterpreterRequired().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInterpreterRequiredLookup()
	{
		this.form.cmbInterpreterRequired().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbInterpreterRequired().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInterpreterRequiredLookupValue(int id)
	{
		ims.core.vo.lookups.YesNoUnknown instance = ims.core.vo.lookups.LookupHelper.getYesNoUnknownInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbInterpreterRequired().setValue(instance);
	}
	protected final void defaultcmbInterpreterRequiredLookupValue()
	{
		this.form.cmbInterpreterRequired().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.naes.domain.NAES_Referral domain;
}
