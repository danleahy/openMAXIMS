//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseHL7PathwayIfImpl extends DomainImpl implements ims.pathways.domain.HL7PathwayIf, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validategetEventByExternalMappings(ims.pathways.configuration.vo.ExternalEventMappingRefVo externalEvent)
	{
		if(externalEvent == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'externalEvent' of type 'ims.pathways.configuration.vo.ExternalEventMappingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetEventByRttValues(ims.pathways.configuration.vo.RTTEventRefVo rttEvent)
	{
		if(rttEvent == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'rttEvent' of type 'ims.pathways.configuration.vo.RTTEventRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientJourney(ims.core.vo.ReferralLiteVo referral)
	{
	}

	@SuppressWarnings("unused")
	public void validatecreatePatientJourney(ims.pathways.vo.PatientJourneyVo patientJourney, ims.core.vo.ReferralLiteVo referral, ims.core.vo.lookups.Specialty specialty, ims.core.resource.people.vo.HcpRefVo consultant, Boolean non18weekPathway)
	{
		if(patientJourney == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientJourney' of type 'ims.pathways.vo.PatientJourneyVo' cannot be null.");
		if(referral == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'referral' of type 'ims.core.vo.ReferralLiteVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validateinstantiatePatientEvent(ims.pathways.vo.PatientEventVo patientEvent)
	{
		if(patientEvent == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientEvent' of type 'ims.pathways.vo.PatientEventVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetExternalEventMappings(ims.pathways.vo.ExternalEventMappingVo extMap)
	{
		if(extMap == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'extMap' of type 'ims.pathways.vo.ExternalEventMappingVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetRttMapping(ims.pathways.vo.RTTEventVo rttMap)
	{
		if(rttMap == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'rttMap' of type 'ims.pathways.vo.RTTEventVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validateendPatientJourney(ims.pathways.vo.PatientPathwayJourneyRefVo journey)
	{
		if(journey == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'journey' of type 'ims.pathways.vo.PatientPathwayJourneyRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validateupdatePatientEvent(ims.core.patient.vo.PatientRefVo patient, String clinicCode, ims.framework.utils.DateTime scheduledDateTime, ims.pathways.vo.lookups.EventStatus status)
	{
	}

	@SuppressWarnings("unused")
	public void validatefindDefaultPathway(ims.core.vo.lookups.Specialty specialty)
	{
	}

	@SuppressWarnings("unused")
	public void validatefindPseudoPathway(ims.core.vo.lookups.Specialty specialty)
	{
	}

	@SuppressWarnings("unused")
	public void validateupdatePatientJourney(ims.pathways.vo.PatientJourneyVo patientJourney, ims.pathways.vo.PathwayLiteVo pathway)
	{
	}

	@SuppressWarnings("unused")
	public void validategetReferralByPatientAndRKEY(ims.core.patient.vo.PatientRefVo patient, String referralKey)
	{
		if(patient == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patient' of type 'ims.core.patient.vo.PatientRefVo' cannot be null.");
		if(referralKey == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'referralKey' of type 'String' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveReferral(ims.core.vo.HL7ReferralVo referral)
	{
		if(referral == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'referral' of type 'ims.core.vo.HL7ReferralVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetEventByTaxonomyMap(ims.core.vo.lookups.TaxonomyType taxType, String code)
	{
		if(taxType == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'taxType' of type 'ims.core.vo.lookups.TaxonomyType' cannot be null.");
		if(code == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'code' of type 'String' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetTargetByTaxonomyMap(ims.core.vo.lookups.TaxonomyType taxType, String value)
	{
		if(taxType == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'taxType' of type 'ims.core.vo.lookups.TaxonomyType' cannot be null.");
		if(value == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'value' of type 'String' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validateinstantiatePatientEvent(ims.pathways.vo.PatientEventVo patientEvent, String eventTargetPASMappingValue)
	{
	}

	@SuppressWarnings("unused")
	public void validatetakeTargetOutOfScopeWithoutEvent(ims.pathways.configuration.vo.TargetRefVo target, ims.pathways.vo.PatientPathwayJourneyRefVo journey)
	{
		if(target == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'target' of type 'ims.pathways.configuration.vo.TargetRefVo' cannot be null.");
		if(journey == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'journey' of type 'ims.pathways.vo.PatientPathwayJourneyRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validateinstantiatePatientEvent(ims.pathways.vo.PatientEventVo patientEvent, String eventTargetPASMappingValue, Boolean rTTClockImpact)
	{
	}

	@SuppressWarnings("unused")
	public void validateupdateJourneyFromReferralDateChange(ims.pathways.vo.PatientPathwayJourneyRefVo journey, ims.framework.utils.Date originalReferralReceivedDate, ims.framework.utils.Date newReferralReceivedDate)
	{
	}

	@SuppressWarnings("unused")
	public void validatebringTargetIntoScopeWithoutEvent(ims.pathways.configuration.vo.TargetRefVo target, ims.pathways.vo.PatientPathwayJourneyRefVo journey, ims.framework.utils.Date eventDateTime)
	{
		if(target == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'target' of type 'ims.pathways.configuration.vo.TargetRefVo' cannot be null.");
		if(journey == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'journey' of type 'ims.pathways.vo.PatientPathwayJourneyRefVo' cannot be null.");
		if(eventDateTime == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'eventDateTime' of type 'ims.framework.utils.Date' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatebringTargetIntoScopeWithoutEvent(ims.pathways.domain.objects.PatientPathwayJourney journey, ims.pathways.configuration.domain.objects.PathwayTarget pathwayTarget, ims.pathways.configuration.domain.objects.Target target, ims.framework.utils.DateTime eventDateTime, Integer targetPeriod)
	{
	}

	@SuppressWarnings("unused")
	public void validatetakeTargetOutOfScopeWithoutEvent(ims.pathways.vo.PatientJourneyTargetRefVo target, ims.pathways.vo.PatientPathwayJourneyRefVo journey)
	{
	}

	@SuppressWarnings("unused")
	public void validateinstantiatePatientEvent(ims.pathways.vo.PatientEventVo patientEvent, ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
	}
}
