//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.patientpathwaysawaitingvalidationworklist;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		RefMan = new RefManContext(context);
		Pathways = new PathwaysContext(context);
		Core = new CoreContext(context);
	}
	public final class RefManContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private RefManContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getReferralStatusListFilterIsNotNull()
		{
			return !cx_RefManReferralStatusListFilter.getValueIsNull(context);
		}
		public ims.RefMan.vo.CATSReferralFilterVo getReferralStatusListFilter()
		{
			return (ims.RefMan.vo.CATSReferralFilterVo)cx_RefManReferralStatusListFilter.getValue(context);
		}
		public void setReferralStatusListFilter(ims.RefMan.vo.CATSReferralFilterVo value)
		{
			cx_RefManReferralStatusListFilter.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManReferralStatusListFilter = new ims.framework.ContextVariable("RefMan.ReferralStatusListFilter", "_cvp_RefMan.ReferralStatusListFilter");
		public boolean getCatsReferralIsNotNull()
		{
			return !cx_RefManCatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cx_RefManCatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
		{
			cx_RefManCatsReferral.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManCatsReferral = new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral");
		public boolean getReferralServiceSearchListIsNotNull()
		{
			return !cx_RefManReferralServiceSearchList.getValueIsNull(context);
		}
		public ims.core.vo.ServiceShortVoCollection getReferralServiceSearchList()
		{
			return (ims.core.vo.ServiceShortVoCollection)cx_RefManReferralServiceSearchList.getValue(context);
		}
		public void setReferralServiceSearchList(ims.core.vo.ServiceShortVoCollection value)
		{
			cx_RefManReferralServiceSearchList.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManReferralServiceSearchList = new ims.framework.ContextVariable("RefMan.ReferralServiceSearchList", "_cv_RefMan.ReferralServiceSearchList");

		private ims.framework.Context context;
	}
	public final class PathwaysContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private PathwaysContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientPathwaysAwaitingValidationSearchCriteriaIsNotNull()
		{
			return !cx_PathwaysPatientPathwaysAwaitingValidationSearchCriteria.getValueIsNull(context);
		}
		public ims.pathways.vo.PatientPathwaysAwaitingValidationSearchCriteriaVo getPatientPathwaysAwaitingValidationSearchCriteria()
		{
			return (ims.pathways.vo.PatientPathwaysAwaitingValidationSearchCriteriaVo)cx_PathwaysPatientPathwaysAwaitingValidationSearchCriteria.getValue(context);
		}
		public void setPatientPathwaysAwaitingValidationSearchCriteria(ims.pathways.vo.PatientPathwaysAwaitingValidationSearchCriteriaVo value)
		{
			cx_PathwaysPatientPathwaysAwaitingValidationSearchCriteria.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysPatientPathwaysAwaitingValidationSearchCriteria = new ims.framework.ContextVariable("Pathways.PatientPathwaysAwaitingValidationSearchCriteria", "_cvp_Pathways.PatientPathwaysAwaitingValidationSearchCriteria");
		public boolean getSelectedPatientPathwayJourneyIsNotNull()
		{
			return !cx_PathwaysSelectedPatientPathwayJourney.getValueIsNull(context);
		}
		public ims.pathways.vo.PatientPathwayJourneyRefVo getSelectedPatientPathwayJourney()
		{
			return (ims.pathways.vo.PatientPathwayJourneyRefVo)cx_PathwaysSelectedPatientPathwayJourney.getValue(context);
		}
		public void setSelectedPatientPathwayJourney(ims.pathways.vo.PatientPathwayJourneyRefVo value)
		{
			cx_PathwaysSelectedPatientPathwayJourney.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPatientPathwayJourney = new ims.framework.ContextVariable("Pathways.SelectedPatientPathwayJourney", "_cv_Pathways.SelectedPatientPathwayJourney");
		public boolean getSelectedPathwayIsNotNull()
		{
			return !cx_PathwaysSelectedPathway.getValueIsNull(context);
		}
		public ims.pathways.configuration.vo.PathwayRefVo getSelectedPathway()
		{
			return (ims.pathways.configuration.vo.PathwayRefVo)cx_PathwaysSelectedPathway.getValue(context);
		}
		public void setSelectedPathway(ims.pathways.configuration.vo.PathwayRefVo value)
		{
			cx_PathwaysSelectedPathway.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathway = new ims.framework.ContextVariable("Pathways.SelectedPathway", "_cv_Pathways.SelectedPathway");
		public boolean getPatientPathwaysAwaitingValidationWorklistVoIsNotNull()
		{
			return !cx_PathwaysPatientPathwaysAwaitingValidationWorklistVo.getValueIsNull(context);
		}
		public ims.pathways.vo.PatientPathwaysAwaitingValidationWorklistVo getPatientPathwaysAwaitingValidationWorklistVo()
		{
			return (ims.pathways.vo.PatientPathwaysAwaitingValidationWorklistVo)cx_PathwaysPatientPathwaysAwaitingValidationWorklistVo.getValue(context);
		}
		public void setPatientPathwaysAwaitingValidationWorklistVo(ims.pathways.vo.PatientPathwaysAwaitingValidationWorklistVo value)
		{
			cx_PathwaysPatientPathwaysAwaitingValidationWorklistVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysPatientPathwaysAwaitingValidationWorklistVo = new ims.framework.ContextVariable("Pathways.PatientPathwaysAwaitingValidationWorklistVo", "_cv_Pathways.PatientPathwaysAwaitingValidationWorklistVo");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");

		private ims.framework.Context context;
	}

	public RefManContext RefMan;
	public PathwaysContext Pathways;
	public CoreContext Core;
}
