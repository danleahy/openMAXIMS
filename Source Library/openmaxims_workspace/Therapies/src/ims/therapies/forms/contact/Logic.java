//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.therapies.forms.contact;

import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.NurseVo;
import ims.core.vo.TherapistVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.LayerBridge;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppUser;
import ims.framework.utils.DateTime;
import ims.oncology.vo.ContactTypesByDisciplineItemRefVoCollection;
import ims.oncology.vo.ContactTypesByDisciplineItemVo;
import ims.oncology.vo.ContactTypesByDisciplineVo;
import ims.therapies.forms.contact.GenForm.lyrContactLayer.tabContactDetailsContainer.GroupAdditionalHCPsEnumeration;
import ims.therapies.forms.contact.GenForm.lyrContactLayer.tabContactDetailsContainer.GroupFirstOrFollowUpEnumeration;
import ims.therapies.forms.contact.GenForm.lyrContactLayer.tabContactSummaryContainer.grdContactsRow;
import ims.therapies.vo.AdditionalHCPVo;
import ims.therapies.vo.AdditionalHCPVoCollection;
import ims.therapies.vo.ContactSearchCriteriaVo;
import ims.therapies.vo.TherapiesContactVo;
import ims.therapies.vo.TherapiesContactVoCollection;
import ims.therapies.vo.lookups.CaseloadCollection;

import java.util.ArrayList;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void initialise()
	{
		form.lyrContact().tabContactSummary().ccSearchHCP().initialize(MosType.HCP);
		
		form.lyrContact().tabContactDetails().ccHcp().initialize(MosType.HCP);
		form.lyrContact().tabContactDetails().ccHcp().isRequired(Boolean.TRUE);
		
		form.lyrContact().tabContactDetails().ccAdditionalHCP1().initialize(MosType.HCP);
		form.lyrContact().tabContactDetails().ccAdditionalHCP1().isRequired(Boolean.TRUE);
		
		form.lyrContact().tabContactDetails().ccAdditionalHCP2().initialize(MosType.HCP);
		form.lyrContact().tabContactDetails().ccAdditionalHCP2().isRequired(Boolean.TRUE);
		
		form.lyrContact().tabContactDetails().ccAdditionalHCP3().initialize(MosType.HCP);
		form.lyrContact().tabContactDetails().ccAdditionalHCP3().isRequired(Boolean.TRUE);
		
		form.lyrContact().tabContactDetails().ccRespHCP().initialize(MosType.HCP);
		
		loadDisciplines();
		loadCaseloads();
	}
	
	private void loadDisciplines()
	{
		form.lyrContact().tabContactSummary().cmbSearchDisipline().clear();
		form.lyrContact().tabContactDetails().cmbDiscipline().clear();
		
		HcpDisTypeCollection lookupCollection = LookupHelper.getHcpDisType(domain.getLookupService());
		
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).getParent() != null)
			{
				form.lyrContact().tabContactSummary().cmbSearchDisipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
				form.lyrContact().tabContactDetails().cmbDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			}
		}
	}
	
	private void loadCaseloads()
	{
		form.lyrContact().tabContactDetails().cmbCaseload().clear();
		
		CaseloadCollection lookupCollection = ims.therapies.vo.lookups.LookupHelper.getCaseload(domain.getLookupService());
		
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).getParent() == null)
			{
				form.lyrContact().tabContactDetails().cmbCaseload().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			}
		}
		
	}

	private void open()
	{
		populateSearchCriteriaControls();
		doSearch(true);
		form.setMode(FormMode.VIEW);
	}
	

	private void populateSearchCriteriaControls()
	{
		ContactSearchCriteriaVo searchCriteria = form.getGlobalContext().Therapies.getContactSearchCriteriaVo();
		
		if (searchCriteria == null)
			return;
		
		form.lyrContact().tabContactSummary().ccSearchHCP().setValue(searchCriteria.getHcpLite());
		form.lyrContact().tabContactSummary().cmbSearchDisipline().setValue(searchCriteria.getHCPDiscipline());
		form.lyrContact().tabContactSummary().dteSearchFrom().setValue(searchCriteria.getDateFrom());
		form.lyrContact().tabContactSummary().dteSearchTo().setValue(searchCriteria.getDateTo());
		
	}

	private void doSearch(boolean showNoRecordsFoundMessage)
	{
		form.lyrContact().tabContactSummary().grdContacts().getRows().clear();
		clearContactDetails();
		
		if (form.lyrContact().tabContactSummary().dteSearchFrom().getValue() != null && form.lyrContact().tabContactSummary().dteSearchTo().getValue() != null
				&& form.lyrContact().tabContactSummary().dteSearchFrom().getValue().isGreaterThan(form.lyrContact().tabContactSummary().dteSearchTo().getValue()))
		{
			engine.showMessage("From Date is greater than To Date. Please modify and search again.");
			return;
		}
		
		populateContactsGrid(domain.listContacts(populateSearchCriteria()), showNoRecordsFoundMessage);
		
	}

	private void populateContactsGrid(TherapiesContactVoCollection contacts, boolean showNoRecordsFoundMessage)
	{
		form.lyrContact().tabContactSummary().grdContacts().getRows().clear();
		
		if (showNoRecordsFoundMessage && (contacts == null || contacts.size() == 0))
		{
			engine.showMessage("No records found");
			return;
		}
				
		for (int i =0; i < contacts.size();i++)
		{
			grdContactsRow row = form.lyrContact().tabContactSummary().grdContacts().getRows().newRow();
			
			if(contacts.get(i).getContactHCP() != null && contacts.get(i).getContactHCP().getName() !=  null)
				row.setColHCP(contacts.get(i).getContactHCP().getName().toString());
			
			if(contacts.get(i).getHCPDiscipline() != null)
				row.setColDisp(contacts.get(i).getHCPDiscipline().toString());
			
			if(contacts.get(i).getContactDateTime() != null)
				row.setColDate(contacts.get(i).getContactDateTime().toString());
				
			row.setValue(contacts.get(i));	
		}
			
	}

	private ContactSearchCriteriaVo populateSearchCriteria()
	{
		ContactSearchCriteriaVo searchCriteria = new ContactSearchCriteriaVo();
		
		searchCriteria.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		searchCriteria.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		searchCriteria.setHcpLite((HcpLiteVo) form.lyrContact().tabContactSummary().ccSearchHCP().getValue());
		searchCriteria.setHCPDiscipline(form.lyrContact().tabContactSummary().cmbSearchDisipline().getValue());
		searchCriteria.setDateFrom(form.lyrContact().tabContactSummary().dteSearchFrom().getValue());
		searchCriteria.setDateTo(form.lyrContact().tabContactSummary().dteSearchTo().getValue());
		
		form.getGlobalContext().Therapies.setContactSearchCriteriaVo(searchCriteria);
		
		return searchCriteria;
		
	}

	private void clearContactDetails()
	{
		form.lyrContact().tabContactDetails().cmbContactType().setValue(null);
		//form.lyrContact().tabContactDetails().GroupFirstOrFollowUp().setValue(GroupFirstOrFollowUpEnumeration.rdoFirst);//WDEV-20810
		form.lyrContact().tabContactDetails().GroupFirstOrFollowUp().setValue(GroupFirstOrFollowUpEnumeration.None);//WDEV-20823
		form.lyrContact().tabContactDetails().cmbDiscipline().setValue(null);
		form.lyrContact().tabContactDetails().cmbCaseload().setValue(null);
		form.lyrContact().tabContactDetails().cmbReferringProblem().setValue(null);
		form.lyrContact().tabContactDetails().dtimDateTime().setValue(null);
		form.lyrContact().tabContactDetails().chkPatinentConsent().setValue(false);
		form.lyrContact().tabContactDetails().cmbConsentReason().setValue(null);
		form.lyrContact().tabContactDetails().ccHcp().clear();
		form.lyrContact().tabContactDetails().intTimeReq().setValue(null);
		form.lyrContact().tabContactDetails().intTimeSpent().setValue(null);
		form.lyrContact().tabContactDetails().GroupAdditionalHCPs().setValue(GroupAdditionalHCPsEnumeration.rdoNone);
		form.lyrContact().tabContactDetails().ccAdditionalHCP1().clear();
		form.lyrContact().tabContactDetails().intTimeHCP1().setValue(null);
		form.lyrContact().tabContactDetails().ccAdditionalHCP2().clear();
		form.lyrContact().tabContactDetails().intTimeHCP2().setValue(null);
		form.lyrContact().tabContactDetails().ccAdditionalHCP3().clear();
		form.lyrContact().tabContactDetails().intTimeHCP3().setValue(null);
		form.lyrContact().tabContactDetails().ccRespHCP().clear();
		form.lyrContact().tabContactDetails().txtRecordingBy().setValue(null);
		form.lyrContact().tabContactDetails().dtimRecordingDateTime().setValue(null);
		form.lyrContact().tabContactDetails().chkNoActivity().setValue(false);
		form.lyrContact().tabContactDetails().treContactTypes().clear();
		
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean noActivityUndertaken = Boolean.TRUE.equals(form.lyrContact().tabContactDetails().chkNoActivity().getValue());
		
		form.lyrContact().tabContactDetails().ccHcp().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrContact().tabContactDetails().ccAdditionalHCP1().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrContact().tabContactDetails().ccAdditionalHCP2().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrContact().tabContactDetails().ccAdditionalHCP3().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrContact().tabContactDetails().ccRespHCP().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrContact().tabContactDetails().btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getSelectedRecord() != null);
		form.lyrContact().tabContactSummary().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		
		form.lyrContact().tabContactDetails().treContactTypes().setEnabled(FormMode.EDIT.equals(form.getMode()) && !noActivityUndertaken);
		
		showHideAdditionalHCPControls();
		showHideReferringProblemControls();
		showHideConsentControls();
	}

	private void showHideReferringProblemControls()
	{
		boolean showControls = GroupFirstOrFollowUpEnumeration.rdoFirst.equals(form.lyrContact().tabContactDetails().GroupFirstOrFollowUp().getValue());
		
		form.lyrContact().tabContactDetails().lblReferringProblem().setVisible(showControls);
		form.lyrContact().tabContactDetails().cmbReferringProblem().setVisible(showControls);
		form.lyrContact().tabContactDetails().cmbReferringProblem().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
	}

	private void showHideConsentControls()
	{
		boolean showControls = Boolean.TRUE.equals(form.lyrContact().tabContactDetails().chkPatinentConsent().getValue());
		
		form.lyrContact().tabContactDetails().lblConsentReason().setVisible(showControls);
		form.lyrContact().tabContactDetails().cmbConsentReason().setVisible(showControls);
		form.lyrContact().tabContactDetails().cmbConsentReason().setEnabled(FormMode.EDIT.equals(form.getMode()));
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		clearSearchCriteria();
		clearContactDetails();
		form.lyrContact().tabContactSummary().grdContacts().getRows().clear();
		form.getLocalContext().setSelectedRecord(null);
		
	}

	private void clearSearchCriteria()
	{
		form.getGlobalContext().Therapies.setContactSearchCriteriaVo(null);
		
		form.lyrContact().tabContactSummary().ccSearchHCP().clear();
		form.lyrContact().tabContactSummary().cmbSearchDisipline().setValue(null);
		form.lyrContact().tabContactSummary().dteSearchFrom().setValue(null);
		form.lyrContact().tabContactSummary().dteSearchTo().setValue(null);
		
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch(true);
		form.getLocalContext().setSelectedRecord(null);
		
		updateControlsState();
	}

	@Override
	protected void onGrdContactsSelectionChanged()
	{
		form.lyrContact().showtabContactDetails();
		form.getLocalContext().setSelectedRecord(form.lyrContact().tabContactSummary().grdContacts().getValue());
		populateContactDetails(form.getLocalContext().getSelectedRecord());
		
	}

	@Override
	protected void onCmbDisciplineValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		disciplineChanged();
	}

	private void disciplineChanged()
	{
		if (form.lyrContact().tabContactDetails().cmbDiscipline().getValue() == null)
		{
			form.lyrContact().tabContactDetails().treContactTypes().clear();
			return;
		}
		
		populateDisciplineTree(domain.loadDisciplineContacts(form.lyrContact().tabContactDetails().cmbDiscipline().getValue()), null);
		
	}

	private void populateDisciplineTree(ContactTypesByDisciplineVo vo, ContactTypesByDisciplineItemRefVoCollection voColl) 
	{
		form.lyrContact().tabContactDetails().treContactTypes().clear();

		for (int j = 0 ; vo != null && vo.getContactTypes() != null && j < vo.getContactTypes().size() ; j++)
			addChildNode(vo.getContactTypes().get(j), voColl);
		
		if (form.getMode().equals(FormMode.VIEW) && !Boolean.TRUE.equals(form.lyrContact().tabContactDetails().chkNoActivity().getValue())) 
			removeUntickedNodes();

		if (form.getMode().equals(FormMode.EDIT)) 
			removeUnusedParentNodes(vo);
	}
	
	private void removeUnusedParentNodes(ContactTypesByDisciplineVo voDisp) 
	{
		for (int i = 0 ; i < form.lyrContact().tabContactDetails().treContactTypes().getNodes().size() ; i++)
		{
			if(removeUnusedParentNodes(form.lyrContact().tabContactDetails().treContactTypes().getNodes().get(i), voDisp))
				i--;
		}
	}
	
	private boolean removeUnusedParentNodes(TreeNode node, ContactTypesByDisciplineVo voDisp)
	{
		if (node.getNodes().size() > 0 )
		{
			for (int i = 0 ; i < node.getNodes().size() ; i++)
			{
				if(removeUnusedParentNodes(node.getNodes().get(i),voDisp)) // If true decrement counter 
					i--;
			}
		}

		boolean bRemoved = false;
		
		if (!node.isChecked())
		{
			if (node.getNodes().size() == 0)
			{
				boolean bIsAConfiguredParentNode = false;
				
				for (int i = 0 ; i < voDisp.getContactTypes().size() ; i++)
				{
					if (node.getValue() instanceof ContactTypesByDisciplineItemVo
						&& ((ContactTypesByDisciplineItemVo)node.getValue()).equals(voDisp.getContactTypes().get(i).getParent()))
						bIsAConfiguredParentNode = true;
				}
				
				if (bIsAConfiguredParentNode) 
				{
					form.lyrContact().tabContactDetails().treContactTypes().getNodes().remove(node);
					bRemoved = true;
				}
			}
		}
		
		return bRemoved;
	}
	
	private TreeNode addChildNode(ContactTypesByDisciplineItemVo vo, ContactTypesByDisciplineItemRefVoCollection voColl) 
	{
		boolean bTick = false;
		if (voColl != null)
		{
			for (int i = 0 ;i < voColl.size() ; i++)
			{
				if (vo.equals(voColl.get(i)))
					bTick = true;
			}
		}
		
		TreeNode childNode = null;
		TreeNode parentNode = null;
		
		if( vo.getActive()
			|| (vo.getActive().equals(Boolean.FALSE)
					&& bTick))
		{
			if (vo.getParent() != null && form.lyrContact().tabContactDetails().treContactTypes().getNodes().getNodeByValue(vo.getParent()) != null)
			{
				childNode = form.lyrContact().tabContactDetails().treContactTypes().getNodes().getNodeByValue(vo.getParent()).getNodes().add(vo, vo.getContactType());
				parentNode = form.lyrContact().tabContactDetails().treContactTypes().getNodes().getNodeByValue(vo.getParent());
			}
			else
				childNode = form.lyrContact().tabContactDetails().treContactTypes().getNodes().add(vo, vo.getContactType());
				
			childNode.setExpanded(true);
			childNode.setChecked(bTick);
			
			if (parentNode != null)
				parentNode.setCheckBoxVisible(false);
		}

		return childNode;
	}
	
	private void removeUntickedNodes() 
	{
		for (int i = 0 ; i < form.lyrContact().tabContactDetails().treContactTypes().getNodes().size() ; i++)
		{
			if (removeUntickedNodes(form.lyrContact().tabContactDetails().treContactTypes().getNodes().get(i)))
				i--;
		}
	}
	
	private boolean removeUntickedNodes(TreeNode node) 
	{
		if (node.getNodes().size() > 0 )
		{
			for (int j = 0 ; j < node.getNodes().size() ; j++)
			{
				if(removeUntickedNodes(node.getNodes().get(j))) 
					j--;
			}
		}
		if (!node.isChecked())
		{
			if (node.getNodes().size() == 0)
			{
				if (node.getParent() != null) 
				{
					TreeNode parentNode = node.getParent();
					parentNode.getNodes().remove(node);
					
					return true;
				}
				else
				{
					form.lyrContact().tabContactDetails().treContactTypes().getNodes().remove(node);
					
					return true;
				}
			}
		}
		
		return false;
	}
	
	@Override
	protected void onCcHcpValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		ccHCPValueChanged();
	}

	private void ccHCPValueChanged()
	{
		if (form.lyrContact().tabContactDetails().ccHcp().getValue() != null)
		{

			if (form.lyrContact().tabContactDetails().ccHcp().getValue() != null && form.lyrContact().tabContactDetails().ccHcp().getValue() instanceof HcpLiteVo)
			{
				Hcp voHcp = domain.getHCP((HcpRefVo)form.lyrContact().tabContactDetails().ccHcp().getValue());
				
				if (voHcp instanceof MedicVo)
				{
					form.lyrContact().tabContactDetails().cmbDiscipline().setValue(((MedicVo) voHcp).getMedicType());
				}
				else if (voHcp instanceof NurseVo)
				{
					form.lyrContact().tabContactDetails().cmbDiscipline().setValue(((NurseVo) voHcp).getNurseType());
				}
				else if (voHcp instanceof TherapistVo)
				{
					form.lyrContact().tabContactDetails().cmbDiscipline().setValue(((TherapistVo) voHcp).getTherapistType());
				}
				else 
					form.lyrContact().tabContactDetails().cmbDiscipline().setValue(voHcp.getHcpType());
			}
			
			disciplineChanged();
		}
		
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearContactDetails();
		
		form.lyrContact().tabContactSummary().grdContacts().setValue(null);
		form.getLocalContext().setSelectedRecord(null);
		
		if (form.getGlobalContext().Core.getCurrentCareContext() != null)
		{
			form.lyrContact().tabContactDetails().ccRespHCP().setValue(domain.getResponsibleHcpForPasEvent(form.getGlobalContext().Core.getCurrentCareContext().getPasEvent()));
		}
		
		IAppUser user = domain.getLoggedInUser();
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		
		form.lyrContact().tabContactDetails().txtRecordingBy().setValue(user != null ? user.getUsername() : null);
		
		form.setMode(FormMode.EDIT);
		
		if (hcpUser != null)
		{
			form.lyrContact().tabContactDetails().ccHcp().setValue(hcpUser);
			ccHCPValueChanged();
		}
		
		
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		populateContactDetails(form.getLocalContext().getSelectedRecord());
		
		updateControlsState();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearContactDetails();//WDEV-20823
		form.setMode(FormMode.VIEW);
		
		if (form.getLocalContext().getSelectedRecord() != null)
		{
			form.getLocalContext().setSelectedRecord(domain.getContact(form.getLocalContext().getSelectedRecord()));
			doSearch(false);
		}
		
		populateContactDetails(form.getLocalContext().getSelectedRecord());
		
		updateControlsState();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			populateSearchCriteriaControls();
			doSearch(false);
			populateContactDetails(form.getLocalContext().getSelectedRecord());
			form.setMode(FormMode.VIEW);
		}
	}

	private void populateContactDetails(TherapiesContactVo contact)
	{
		clearContactDetails();
		
		if (contact == null)
			return;
		
		form.lyrContact().tabContactDetails().cmbContactType().setValue(contact.getContactType());
		
		if (Boolean.TRUE.equals(contact.getIsFirstContact()))
		{
			form.lyrContact().tabContactDetails().GroupFirstOrFollowUp().setValue(GroupFirstOrFollowUpEnumeration.rdoFirst);
			form.lyrContact().tabContactDetails().cmbReferringProblem().setValue(contact.getReferringProblem());
		}
		else
			form.lyrContact().tabContactDetails().GroupFirstOrFollowUp().setValue(GroupFirstOrFollowUpEnumeration.rdoFollowUp);
		
		form.lyrContact().tabContactDetails().cmbDiscipline().setValue(contact.getHCPDiscipline());
		
		form.lyrContact().tabContactDetails().cmbCaseload().setValue(contact.getCaseload());
		form.lyrContact().tabContactDetails().dtimDateTime().setValue(contact.getContactDateTime());
		form.lyrContact().tabContactDetails().chkPatinentConsent().setValue(contact.getPatientConsentToTreatment());
		
		if (Boolean.TRUE.equals(contact.getPatientConsentToTreatment()))
			form.lyrContact().tabContactDetails().cmbConsentReason().setValue(contact.getConsentReason());
	
		form.lyrContact().tabContactDetails().ccHcp().setValue(contact.getContactHCP());
		form.lyrContact().tabContactDetails().intTimeReq().setValue(contact.getTimeRequired());
		form.lyrContact().tabContactDetails().intTimeSpent().setValue(contact.getTimeSpent());
		
		if (contact.getAdditionalHCPs() != null && contact.getAdditionalHCPs().size() > 0)
		{
			if (contact.getAdditionalHCPs().size() == 3)
			{
				form.lyrContact().tabContactDetails().GroupAdditionalHCPs().setValue(GroupAdditionalHCPsEnumeration.rdo3);
				
				if (contact.getAdditionalHCPs().get(0) != null)
				{
					form.lyrContact().tabContactDetails().ccAdditionalHCP1().setValue(contact.getAdditionalHCPs().get(0).getHCP());
					form.lyrContact().tabContactDetails().intTimeHCP1().setValue(contact.getAdditionalHCPs().get(0).getTimeSpent());
				}
				
				if (contact.getAdditionalHCPs().get(1) != null)
				{
					form.lyrContact().tabContactDetails().ccAdditionalHCP2().setValue(contact.getAdditionalHCPs().get(1).getHCP());
					form.lyrContact().tabContactDetails().intTimeHCP2().setValue(contact.getAdditionalHCPs().get(1).getTimeSpent());
				}
				
				if (contact.getAdditionalHCPs().get(2) != null)
				{
					form.lyrContact().tabContactDetails().ccAdditionalHCP3().setValue(contact.getAdditionalHCPs().get(2).getHCP());
					form.lyrContact().tabContactDetails().intTimeHCP3().setValue(contact.getAdditionalHCPs().get(2).getTimeSpent());
				}
				
			}
			else if (contact.getAdditionalHCPs().size() == 2)
			{
				form.lyrContact().tabContactDetails().GroupAdditionalHCPs().setValue(GroupAdditionalHCPsEnumeration.rdo2);
				
				if (contact.getAdditionalHCPs().get(0) != null)
				{
					form.lyrContact().tabContactDetails().ccAdditionalHCP1().setValue(contact.getAdditionalHCPs().get(0).getHCP());
					form.lyrContact().tabContactDetails().intTimeHCP1().setValue(contact.getAdditionalHCPs().get(0).getTimeSpent());
				}
				
				if (contact.getAdditionalHCPs().get(1) != null)
				{
					form.lyrContact().tabContactDetails().ccAdditionalHCP2().setValue(contact.getAdditionalHCPs().get(1).getHCP());
					form.lyrContact().tabContactDetails().intTimeHCP2().setValue(contact.getAdditionalHCPs().get(1).getTimeSpent());
				}
				
			}
			else if (contact.getAdditionalHCPs().size() == 1)
			{
				form.lyrContact().tabContactDetails().GroupAdditionalHCPs().setValue(GroupAdditionalHCPsEnumeration.rdo1);
				
				if (contact.getAdditionalHCPs().get(0) != null)
				{
					form.lyrContact().tabContactDetails().ccAdditionalHCP1().setValue(contact.getAdditionalHCPs().get(0).getHCP());
					form.lyrContact().tabContactDetails().intTimeHCP1().setValue(contact.getAdditionalHCPs().get(0).getTimeSpent());
				}
				
			}		
		}
		else
			form.lyrContact().tabContactDetails().GroupAdditionalHCPs().setValue(GroupAdditionalHCPsEnumeration.rdoNone);
		
		form.lyrContact().tabContactDetails().ccRespHCP().setValue(contact.getResponsibleHCP());
		form.lyrContact().tabContactDetails().chkNoActivity().setValue(contact.getNoActivityUndertaken());
		
		if (contact.getSystemInformation() != null)
		{
			form.lyrContact().tabContactDetails().txtRecordingBy().setValue(contact.getSystemInformation().getCreationUser());
			form.lyrContact().tabContactDetails().dtimRecordingDateTime().setValue(contact.getSystemInformation().getCreationDateTime());
		}
		
		if (contact.getHCPDiscipline() != null)
			populateDisciplineTree(domain.loadDisciplineContacts(contact.getHCPDiscipline()),contact.getActivities());
		
		updateControlsState();
	}

	private boolean save()
	{
		String[] arrErrors = validateUIRules();
		
		if (arrErrors != null)
		{	
			engine.showErrors(arrErrors);
			return false;
		}
		
		TherapiesContactVo contactToSave = populateDataFromScreen();
		
		arrErrors = contactToSave.validate();
		
		if (arrErrors != null)
		{	
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.saveContact(contactToSave));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedRecord(domain.getContact(contactToSave));
			doSearch(false);
			populateContactDetails(form.getLocalContext().getSelectedRecord());
			form.setMode(FormMode.VIEW);
			return false;
		} 
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		}
		
		return true;
		
	}

	private TherapiesContactVo populateDataFromScreen()
	{
		TherapiesContactVo contact = form.getLocalContext().getSelectedRecord();
		
		if(contact == null)
		{
			contact = new TherapiesContactVo();
			
			contact.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			contact.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		contact.setContactType(form.lyrContact().tabContactDetails().cmbContactType().getValue());
		contact.setIsFirstContact(GroupFirstOrFollowUpEnumeration.rdoFirst.equals(form.lyrContact().tabContactDetails().GroupFirstOrFollowUp().getValue()));
		contact.setHCPDiscipline(form.lyrContact().tabContactDetails().cmbDiscipline().getValue());
		contact.setCaseload(form.lyrContact().tabContactDetails().cmbCaseload().getValue());
		contact.setReferringProblem(form.lyrContact().tabContactDetails().cmbReferringProblem().getValue());
		contact.setContactDateTime(form.lyrContact().tabContactDetails().dtimDateTime().getValue());
		contact.setPatientConsentToTreatment(form.lyrContact().tabContactDetails().chkPatinentConsent().getValue());
		contact.setConsentReason(form.lyrContact().tabContactDetails().cmbConsentReason().getValue());
		contact.setContactHCP((HcpLiteVo) form.lyrContact().tabContactDetails().ccHcp().getValue());
		contact.setTimeRequired(form.lyrContact().tabContactDetails().intTimeReq().getValue());
		contact.setTimeSpent(form.lyrContact().tabContactDetails().intTimeSpent().getValue());
		
		if (GroupAdditionalHCPsEnumeration.rdoNone.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue()))
			contact.setNumOfAdditionalHCPs(0);
		else if (GroupAdditionalHCPsEnumeration.rdo1.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue()))
			contact.setNumOfAdditionalHCPs(1);
		else if (GroupAdditionalHCPsEnumeration.rdo2.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue()))
			contact.setNumOfAdditionalHCPs(2);
		else if (GroupAdditionalHCPsEnumeration.rdo3.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue()))
			contact.setNumOfAdditionalHCPs(3);
		
		if (contact.getNumOfAdditionalHCPs() > 0)
		{
			AdditionalHCPVoCollection additionalHcps = new AdditionalHCPVoCollection();
			
			AdditionalHCPVo additionalHPC1 = new AdditionalHCPVo();
			
			additionalHPC1.setHCP((HcpLiteVo) form.lyrContact().tabContactDetails().ccAdditionalHCP1().getValue());
			additionalHPC1.setTimeSpent(form.lyrContact().tabContactDetails().intTimeHCP1().getValue());
			
			additionalHcps.add(additionalHPC1);
			
			if (contact.getNumOfAdditionalHCPs() > 1)
			{
				AdditionalHCPVo additionalHPC2 = new AdditionalHCPVo();
				
				additionalHPC2.setHCP((HcpLiteVo) form.lyrContact().tabContactDetails().ccAdditionalHCP2().getValue());
				additionalHPC2.setTimeSpent(form.lyrContact().tabContactDetails().intTimeHCP2().getValue());
				
				additionalHcps.add(additionalHPC2);
			}
			
			if (contact.getNumOfAdditionalHCPs() > 2)
			{
				AdditionalHCPVo additionalHPC3 = new AdditionalHCPVo();
				
				additionalHPC3.setHCP((HcpLiteVo) form.lyrContact().tabContactDetails().ccAdditionalHCP3().getValue());
				additionalHPC3.setTimeSpent(form.lyrContact().tabContactDetails().intTimeHCP3().getValue());
				
				additionalHcps.add(additionalHPC3);
			}
			
			contact.setAdditionalHCPs(additionalHcps);
		}
		
		contact.setResponsibleHCP((HcpLiteVo) form.lyrContact().tabContactDetails().ccRespHCP().getValue());
		contact.setNoActivityUndertaken(form.lyrContact().tabContactDetails().chkNoActivity().getValue());
		
		if (Boolean.TRUE.equals(form.lyrContact().tabContactDetails().chkNoActivity().getValue()))
		{
			contact.setActivities(null);
		}
		else
		{
			ContactTypesByDisciplineItemRefVoCollection voColl = new ContactTypesByDisciplineItemRefVoCollection();

			for (int i = 0; i < form.lyrContact().tabContactDetails().treContactTypes().getNodes().size(); i++)
			{
				addChildNodes(voColl, form.lyrContact().tabContactDetails().treContactTypes().getNodes().get(i));
			}

			contact.setActivities(voColl);
		}
		
		return contact;
	}

	private void addChildNodes(ContactTypesByDisciplineItemRefVoCollection voColl, TreeNode node) 
	{
		if (node.isChecked())
			voColl.add((ContactTypesByDisciplineItemVo)node.getValue());
		
		if (node.getNodes().size() > 0 )
		{
			for (int i = 0 ; i < node.getNodes().size() ; i++)
			{
				addChildNodes(voColl, node.getNodes().get(i));
			}
		}
	}
	
	private String[] validateUIRules()
	{
		ArrayList screenErrors = new ArrayList();
		
		if(form.lyrContact().tabContactDetails().cmbDiscipline().getValue() == null)
			screenErrors.add("Discipline is mandatory");
		
		if(form.lyrContact().tabContactDetails().cmbReferringProblem().getVisible() && form.lyrContact().tabContactDetails().cmbReferringProblem().getValue() == null)
			screenErrors.add("Referring Problem is mandatory");
		
		if(form.lyrContact().tabContactDetails().dtimDateTime().getValue() == null)
			screenErrors.add("Date / Time is mandatory");
		
		if(form.lyrContact().tabContactDetails().dtimDateTime().getValue() != null && form.lyrContact().tabContactDetails().dtimDateTime().getValue().isGreaterThan(new DateTime()))
			screenErrors.add("Date / Time cannot be in the future");
		
		if(form.lyrContact().tabContactDetails().cmbConsentReason().getVisible() && form.lyrContact().tabContactDetails().cmbConsentReason().getValue() == null)
			screenErrors.add("Consent Reason is mandatory");
		
		if(form.lyrContact().tabContactDetails().ccHcp().getValue() == null)
			screenErrors.add("HCP is mandatory");
		
		if(form.lyrContact().tabContactDetails().intTimeHCP1().isVisible())
		{
			if (form.lyrContact().tabContactDetails().ccAdditionalHCP1().getValue() == null)
				screenErrors.add("Additional HCP 1 is mandatory");
		}
			
		if(form.lyrContact().tabContactDetails().intTimeHCP2().isVisible())
		{
			if (form.lyrContact().tabContactDetails().ccAdditionalHCP2().getValue() == null)
				screenErrors.add("Additional HCP 2 is mandatory");
		}
		
		if(form.lyrContact().tabContactDetails().intTimeHCP3().isVisible())
		{
			if (form.lyrContact().tabContactDetails().ccAdditionalHCP3().getValue() == null)
				screenErrors.add("Additional HCP 3 is mandatory");
		}
		
		int errorCount = screenErrors.size();
		
		if(errorCount == 0)
		{
			return null;
		}
		
		String[] result = new String[errorCount];
		screenErrors.toArray(result);
		
		return result;
	}

	@Override
	protected void onRadioButtonGroupAdditionalHCPsValueChanged() throws PresentationLogicException
	{
		boolean none = GroupAdditionalHCPsEnumeration.rdoNone.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue());
		boolean one = GroupAdditionalHCPsEnumeration.rdo1.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue());
		boolean two = GroupAdditionalHCPsEnumeration.rdo2.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue());
		
		if (none)
		{
			form.lyrContact().tabContactDetails().ccAdditionalHCP1().clear();
			form.lyrContact().tabContactDetails().intTimeHCP1().setValue(null);
			
			form.lyrContact().tabContactDetails().ccAdditionalHCP2().clear();
			form.lyrContact().tabContactDetails().intTimeHCP2().setValue(null);
			
			form.lyrContact().tabContactDetails().ccAdditionalHCP3().clear();
			form.lyrContact().tabContactDetails().intTimeHCP3().setValue(null);
		}
		else if (one)
		{
			form.lyrContact().tabContactDetails().ccAdditionalHCP2().clear();
			form.lyrContact().tabContactDetails().intTimeHCP2().setValue(null);
			
			form.lyrContact().tabContactDetails().ccAdditionalHCP3().clear();
			form.lyrContact().tabContactDetails().intTimeHCP3().setValue(null);
		}
		else if (two)
		{
			form.lyrContact().tabContactDetails().ccAdditionalHCP3().clear();
			form.lyrContact().tabContactDetails().intTimeHCP3().setValue(null);
		}
		
		updateControlsState();
		
	}

	private void showHideAdditionalHCPControls()
	{
		boolean one = GroupAdditionalHCPsEnumeration.rdo1.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue());
		boolean two = GroupAdditionalHCPsEnumeration.rdo2.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue());
		boolean three = GroupAdditionalHCPsEnumeration.rdo3.equals(form.lyrContact().tabContactDetails().GroupAdditionalHCPs().getValue());
		
		form.lyrContact().tabContactDetails().lblAdditionalHCP1().setVisible(one || two || three);
		form.lyrContact().tabContactDetails().ccAdditionalHCP1().setVisible(one || two || three);
		form.lyrContact().tabContactDetails().lblTimeSpentHCP1().setVisible(one || two || three);
		form.lyrContact().tabContactDetails().intTimeHCP1().setVisible(one || two || three);
		form.lyrContact().tabContactDetails().lblMinsHCP1().setVisible(one || two || three);
		
		form.lyrContact().tabContactDetails().lblAdditionalHCP2().setVisible(two || three);
		form.lyrContact().tabContactDetails().ccAdditionalHCP2().setVisible(two || three);
		form.lyrContact().tabContactDetails().lblTimeSpentHCP2().setVisible(two || three);
		form.lyrContact().tabContactDetails().intTimeHCP2().setVisible(two || three);
		form.lyrContact().tabContactDetails().lblMinsHCP2().setVisible(two || three);
		
		form.lyrContact().tabContactDetails().lblAdditionalHCP3().setVisible(three);
		form.lyrContact().tabContactDetails().ccAdditionalHCP3().setVisible(three);
		form.lyrContact().tabContactDetails().lblTimeSpentHCP3().setVisible(three);
		form.lyrContact().tabContactDetails().intTimeHCP3().setVisible(three);
		form.lyrContact().tabContactDetails().lblMinsHCP3().setVisible(three);
		
		form.lyrContact().tabContactDetails().intTimeHCP1().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrContact().tabContactDetails().intTimeHCP2().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrContact().tabContactDetails().intTimeHCP3().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
	}

	@Override
	protected void onRadioButtonGroupFirstOrFollowUpValueChanged() throws PresentationLogicException
	{
		form.lyrContact().tabContactDetails().cmbReferringProblem().setValue(null);
		updateControlsState();
		
	}

	@Override
	protected void onChkPatinentConsentValueChanged() throws PresentationLogicException
	{
		form.lyrContact().tabContactDetails().cmbConsentReason().setValue(null);
		updateControlsState();
		
	}

	@Override
	protected void onCmbCaseloadValueChanged() throws PresentationLogicException
	{
		loadReferringProblems();
		
	}

	private void loadReferringProblems()
	{
		form.lyrContact().tabContactDetails().cmbReferringProblem().clear();
		
		if (form.lyrContact().tabContactDetails().cmbCaseload().getValue() ==null)
			return;
		
		CaseloadCollection lookupCollection = ims.therapies.vo.lookups.LookupHelper.getCaseload(domain.getLookupService());
		
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).getParent() != null && lookupCollection.get(x).getParent().equals(form.lyrContact().tabContactDetails().cmbCaseload().getValue()))
			{
				form.lyrContact().tabContactDetails().cmbReferringProblem().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			}
		}
		
	}

	@Override
	protected void onChkNoActivityValueChanged() throws PresentationLogicException
	{
		disciplineChanged();
		updateControlsState();
		
	}

	@Override
	protected void onlyrContactTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrContact().tabContactSummary()))
			form.lyrContact().tabContactSummary().grdContacts().setValue(form.getLocalContext().getSelectedRecord());
		
	}
}
