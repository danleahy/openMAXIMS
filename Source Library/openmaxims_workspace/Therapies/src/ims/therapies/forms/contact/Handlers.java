//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.contact;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbSearchDisiplineLookup();
	abstract protected void defaultcmbSearchDisiplineLookupValue();
	abstract protected void bindcmbConsentReasonLookup();
	abstract protected void defaultcmbConsentReasonLookupValue();
	abstract protected void bindcmbReferringProblemLookup();
	abstract protected void defaultcmbReferringProblemLookupValue();
	abstract protected void bindcmbCaseloadLookup();
	abstract protected void defaultcmbCaseloadLookupValue();
	abstract protected void bindcmbContactTypeLookup();
	abstract protected void defaultcmbContactTypeLookupValue();
	abstract protected void bindcmbDisciplineLookup();
	abstract protected void defaultcmbDisciplineLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrContactTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSearchDisiplineValueSet(Object value);
	abstract protected void onGrdContactsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNoActivityValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupAdditionalHCPsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbConsentReasonValueSet(Object value);
	abstract protected void onChkPatinentConsentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbReferringProblemValueSet(Object value);
	abstract protected void oncmbCaseloadValueSet(Object value);
	abstract protected void onCmbCaseloadValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupFirstOrFollowUpValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbContactTypeValueSet(Object value);
	abstract protected void oncmbDisciplineValueSet(Object value);
	abstract protected void onCmbDisciplineValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcHcpValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.lyrContact().tabContactSummary().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrContacttabContactSummaryActivated();
			}
		});
		this.form.lyrContact().tabContactDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrContacttabContactDetailsActivated();
			}
		});
		this.form.lyrContact().tabContactSummary().imbClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearClick();
			}
		});
		this.form.lyrContact().tabContactSummary().imbSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchClick();
			}
		});
		this.form.lyrContact().tabContactSummary().cmbSearchDisipline().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSearchDisiplineValueSet(value);
			}
		});
		this.form.lyrContact().tabContactSummary().grdContacts().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdContactsSelectionChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().chkNoActivity().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNoActivityValueChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().GroupAdditionalHCPs().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupAdditionalHCPsValueChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().cmbConsentReason().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbConsentReasonValueSet(value);
			}
		});
		this.form.lyrContact().tabContactDetails().chkPatinentConsent().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPatinentConsentValueChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().cmbReferringProblem().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReferringProblemValueSet(value);
			}
		});
		this.form.lyrContact().tabContactDetails().cmbCaseload().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCaseloadValueSet(value);
			}
		});
		this.form.lyrContact().tabContactDetails().cmbCaseload().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbCaseloadValueChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().GroupFirstOrFollowUp().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupFirstOrFollowUpValueChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().cmbContactType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbContactTypeValueSet(value);
			}
		});
		this.form.lyrContact().tabContactDetails().cmbDiscipline().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDisciplineValueSet(value);
			}
		});
		this.form.lyrContact().tabContactDetails().cmbDiscipline().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbDisciplineValueChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().setccHcpValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcHcpValueChanged();
			}
		});
		this.form.lyrContact().tabContactDetails().btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.lyrContact().tabContactDetails().btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.lyrContact().tabContactDetails().btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.lyrContact().tabContactDetails().btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbConsentReasonLookup();
		bindcmbContactTypeLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbSearchDisiplineLookup();
		bindcmbConsentReasonLookup();
		bindcmbReferringProblemLookup();
		bindcmbCaseloadLookup();
		bindcmbContactTypeLookup();
		bindcmbDisciplineLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbSearchDisiplineLookupValue();
		defaultcmbConsentReasonLookupValue();
		defaultcmbReferringProblemLookupValue();
		defaultcmbCaseloadLookupValue();
		defaultcmbContactTypeLookupValue();
		defaultcmbDisciplineLookupValue();
	}
	private void onlyrContacttabContactSummaryActivated()
	{
		this.form.lyrContact().showtabContactSummary();
		onlyrContactTabChanged(this.form.lyrContact().tabContactSummary());
	}
	private void onlyrContacttabContactDetailsActivated()
	{
		this.form.lyrContact().showtabContactDetails();
		onlyrContactTabChanged(this.form.lyrContact().tabContactDetails());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
