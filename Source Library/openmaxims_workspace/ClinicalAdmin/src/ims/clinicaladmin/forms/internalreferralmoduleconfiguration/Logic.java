//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.internalreferralmoduleconfiguration;

import ims.clinical.vo.ServiceConfigIntReferralLiteVo;
import ims.clinical.vo.ServiceConfigIntReferralLiteVoCollection;
import ims.clinical.vo.ServiceConfigIntReferralVo;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageInternalReferralSettingsContainer.GroupAllowImportScanEnumeration;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageInternalReferralWorkflowContainer.grdActionsInpatientRow;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageInternalReferralWorkflowContainer.grdActionsOutpatientRow;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageServiceContainer.GroupAcceptedNonHCPEnumeration;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageServiceContainer.GroupAuthorizationHCPEnumeration;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageServiceContainer.GroupSearchClinicalServiceEnumeration;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageServiceContainer.GroupServiceNonHCPSpecificEnumeration;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageServiceContainer.GroupStatusClinicalServiceEnumeration;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageServiceContainer.grdQuestionsRow;
import ims.clinicaladmin.forms.internalreferralmoduleconfiguration.GenForm.lyrMainLayer.tabPageServiceContainer.grdServicesRow;
import ims.clinicaladmin.helper.InternalReferralActionsHelper;
import ims.clinicaladmin.vo.InternalReferralSettingsVo;
import ims.clinicaladmin.vo.WorkflowActionInternalReferalVo;
import ims.clinicaladmin.vo.WorkflowActionInternalReferalVoCollection;
import ims.clinicaladmin.vo.WorkflowInternalReferralsVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AssessmentQuestionServiceVo;
import ims.core.vo.AssessmentQuestionServiceVoCollection;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.InternalReferralStatusAction;
import ims.core.vo.lookups.InternalReferralStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.QuestionType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;



// By Clinical Service we mean - core.clinical.Service where Category = Clinical -



public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int TAB_SERVICE_DETAILS = 0;
	private static final int TAB_INTERNAL_REFERRAL_WORKFLOW = 1;
	private static final int TAB_INTERNAL_REFERRAL_SETTINGS = 2;
	
	
	//------------------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open(TAB_SERVICE_DETAILS);
	}

	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Core.QuestionSelectNew.equals(formName) && DialogResult.OK.equals(result))
		{
			QuestionInformationShortVoCollection questions = form.getGlobalContext().Admin.getSelectedQuestions();
			
			addQuestions(questions);
		}
		
		updateControlsState();
	}


	@Override
	protected void onlyrMainTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrMain().tabPageService()))
			open(TAB_SERVICE_DETAILS);
		else if (tab.equals(form.lyrMain().tabPageInternalReferralWorkflow()))
			open(TAB_INTERNAL_REFERRAL_WORKFLOW);
		else if (tab.equals(form.lyrMain().tabPageInternalReferralSettings()))
			open(TAB_INTERNAL_REFERRAL_SETTINGS);
	}

	
	
		//------------------------------------------------------------------------------------------------------------------------------------
    	//	Form event handlers - Clinic Service Details
    	//------------------------------------------------------------------------------------------------------------------------------------
	
    	@Override
    	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		if (validateSearch(true))
    			searchServiceConfig(form.lyrMain().tabPageService().txtServiceTooltip().getValue());
    		
    		updateControlsState();
    	}
	
	
    	private void searchServiceConfig(String value)
		{
			// Get value for active only
			boolean activeOnly = GroupSearchClinicalServiceEnumeration.rdoSearchActiveOnly.equals(form.lyrMain().tabPageService().GroupSearchClinicalService().getValue());

			ServiceConfigIntReferralLiteVoCollection services = domain.listServicesConfigReferral(form.lyrMain().tabPageService().txtSearchClinicalService().getValue(), activeOnly);

			if (services == null || services.size() == 0)
			{
				engine.showMessage("No results found!");
			}

			populateServices(services);
		}


		private boolean validateSearch(boolean showMessage)
		{
    		if (form.lyrMain().tabPageService().txtSearchClinicalService().getValue() == null
    				|| form.lyrMain().tabPageService().txtSearchClinicalService().getValue().length() == 0)
    		{
    			if (showMessage)
    				engine.showMessage("Service name is mandatory for search");
    			return false;
    		}
    		
			return true;
		}


		@Override
    	protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		clearClinicServiceSearchControls();
    		clearClinicServiceScreen();
    		
    		updateClinicalServiceSelection(null);
    		
    		updateControlsState();
    	}

	
    	@Override
    	protected void onGrdServicesSelectionChanged()
    	{
    		updateClinicalServiceSelection(form.lyrMain().tabPageService().grdServices().getValue());
    		
    		updateControlsState();
    	}

	
    	@Override
    	protected void onBtnNewClinicalServiceClick() throws PresentationLogicException
    	{
    		newClinicalServiceInstance();
    	}

	
    	@Override
    	protected void onBtnEditClinicalServiceClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		updateClinicalServiceInstance();
    	}

	
    	@Override
    	protected void onBtnSaveClinicalServiceClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		if (saveClinicalService())
    			open(TAB_SERVICE_DETAILS);
    	}

	
    	@Override
    	protected void onBtnCancelClinicalServiceClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		open(TAB_SERVICE_DETAILS);
    	}

	
    	@Override
    	protected void onQmbClinicalServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
    	{
    		try
    		{
    			populateClinicalServices(domain.listClinicalServices(value));
    		}
    		catch (DomainInterfaceException e)
    		{
    			engine.showMessage(e.getMessage());
    		}
    		
    		updateControlsState();
    	}
    	
    	
    	@Override
    	protected void onQmbClinicalServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException
    	{
    		ServiceLiteVo service = form.lyrMain().tabPageService().qmbClinicalService().getValue();
			
    		if (service != null && !Boolean.TRUE.equals(service.getIsActive()))
    		{
    			form.lyrMain().tabPageService().GroupStatusClinicalService().setValue(GroupStatusClinicalServiceEnumeration.rdoStatusInactive);
    		}
    		
    		updateControlsState();
    	}

    	
    	@Override
    	protected void onGrdQuestionsSelectionChanged()
    	{
    		updateControlsState();
    	}

    	
    	@Override
    	protected void onImbAddQuestionClick() throws ims.framework.exceptions.PresentationLogicException
    	{
//    		form.getGlobalContext().Core.setQuestionFormMode(null);
    		form.getGlobalContext().Core.setQuestionType(QuestionType.PRIMARY);
//    		form.getGlobalContext().Core.setSelectedAssessmentQuestion(null);
//    		form.getGlobalContext().Core.setUserDefinedAssessmentType(UserDefinedAssessmentType.QUESTIONBASEDASSESSMENT);
//    		form.getGlobalContext().Core.setUserAssessmentAction("A");
    		engine.open(form.getForms().Core.QuestionSelectNew);
    	}
    	
    	
    	@Override
    	protected void onImbRemoveQuestionClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		removeQuestion();
    		
    		updateControlsState();
    	}
	
	
		
    	//------------------------------------------------------------------------------------------------------------------------------------
    	//	Form event handlers - Action
    	//------------------------------------------------------------------------------------------------------------------------------------
    	

		@Override
    	protected void onCmbInternalReferralStatusValueChanged() throws PresentationLogicException
    	{
    		populateInternalReferralWorkflowInstanceControls(form.getLocalContext().getInternalReferralWorkflow(), form.lyrMain().tabPageInternalReferralWorkflow().cmbInternalReferralStatus().getValue());
    		updateControlsState();
    	}

    	
    	@Override
    	protected void onBtnEditActionsClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		// Update record from database
    		form.getLocalContext().setInternalReferralWorkflow(domain.getInternalReferralWorkflow());
    		// Refresh screen
    		populateInternalReferralWorkflowInstanceControls(form.getLocalContext().getInternalReferralWorkflow(), form.lyrMain().tabPageInternalReferralWorkflow().cmbInternalReferralStatus().getValue());

    		form.setMode(FormMode.EDIT);
    	}


    	@Override
    	protected void onBtnSaveActionsClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		if (saveInternalReferralWorkflow())
    			open(TAB_INTERNAL_REFERRAL_WORKFLOW);
    	}

	
		@Override
    	protected void onBtnCancelActionsClick() throws ims.framework.exceptions.PresentationLogicException
    	{
    		open(TAB_INTERNAL_REFERRAL_WORKFLOW);
    	}

		
		
    	//------------------------------------------------------------------------------------------------------------------------------------
    	//	Form event handlers - Settings
    	//------------------------------------------------------------------------------------------------------------------------------------

		@Override
		protected void onBtnEditSettingsClick() throws PresentationLogicException
		{
    		// Update record from database
    		form.getLocalContext().setInternalReferralSettings(domain.getInternalReferralSettings());
    		// Refresh screen
    		populateInternalReferralSettingsInstanceControls(form.getLocalContext().getInternalReferralSettings());
    		
    		if (form.getLocalContext().getInternalReferralSettings() == null)
    			form.lyrMain().tabPageInternalReferralSettings().GroupAllowImportScan().setValue(GroupAllowImportScanEnumeration.rdoYes);

    		form.setMode(FormMode.EDIT);
		}

		
		@Override
		protected void onBtnSaveSettingsClick() throws PresentationLogicException
		{
			if (saveInternalReferralSettings())
				open(TAB_INTERNAL_REFERRAL_SETTINGS);			
		}


		@Override
		protected void onBtnCancelSettingsClick() throws PresentationLogicException
		{
			open(TAB_INTERNAL_REFERRAL_SETTINGS);
		}


        
	//--------------------------------------------------------------------------------------------------------------------------------------
	//	General form presentation functions
	//--------------------------------------------------------------------------------------------------------------------------------------
	
	public void initialize() throws FormOpenException
	{
		form.lyrMain().tabPageService().GroupSearchClinicalService().setValue(GroupSearchClinicalServiceEnumeration.rdoSearchActiveOnly);
		
		initializeOutpatientInpatientGrid();
		
		initializeBackgroundColorsCombobox();
		
		form.getLocalContext().setInternalReferralWorkflow(domain.getInternalReferralWorkflow());
		form.getLocalContext().setInternalReferralSettings(domain.getInternalReferralSettings());
	}
	
	
	private void initializeBackgroundColorsCombobox()
	{
		Color[] allColors = Color.getColors();
		
		for (Color color : allColors)
		{
//			form.lyrMain().tabPageInternalReferralSettings().cmbUrgentBackground().newRow(color, color.getName(), color);
			form.lyrMain().tabPageInternalReferralSettings().cmbUrgentBackground().newRow(color, color.getName(), color.getImage());
		}
	}


	public void open(int tabToOpen)
	{
		switch (tabToOpen)
		{
			case TAB_SERVICE_DETAILS:
				form.lyrMain().showtabPageService();
				clearClinicServiceScreen();
				
				if (validateSearch(false))
				{
    				boolean activeOnly = GroupSearchClinicalServiceEnumeration.rdoSearchActiveOnly.equals(form.lyrMain().tabPageService().GroupSearchClinicalService().getValue());
    				populateServices(domain.listServicesConfigReferral(form.lyrMain().tabPageService().txtSearchClinicalService().getValue(), activeOnly));
				}

				break;
				
			case TAB_INTERNAL_REFERRAL_WORKFLOW:
				
				// Retrieve work flow record
				form.getLocalContext().setInternalReferralWorkflow(domain.getInternalReferralWorkflow());
				
				// Present work flow record on screen
				populateInternalReferralWorkflowInstanceControls(form.getLocalContext().getInternalReferralWorkflow(), form.lyrMain().tabPageInternalReferralWorkflow().cmbInternalReferralStatus().getValue());
				
				break;
				
			case TAB_INTERNAL_REFERRAL_SETTINGS:
				
				// Retrieve internal referral settings
				form.getLocalContext().setInternalReferralSettings(domain.getInternalReferralSettings());
				
				// Present internal referral settings
				populateInternalReferralSettingsInstanceControls(form.getLocalContext().getInternalReferralSettings());
				
				break;
		}
		
		form.setMode(FormMode.VIEW);
	}

	
	public void updateControlsState()
	{
		// Set the state for tab header
		form.lyrMain().tabPageService().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrMain().tabPageInternalReferralWorkflow().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrMain().tabPageInternalReferralSettings().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		

		// Set the state for controls required only for VIEW mode - to avoid unnecessary errors in log
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.lyrMain().tabPageService().btnEditClinicalService().setVisible(true);
			form.lyrMain().tabPageService().btnEditClinicalService().setEnabled(form.lyrMain().tabPageService().grdServices().getSelectedRow() != null);
			
			form.lyrMain().tabPageInternalReferralWorkflow().btnEditActions().setVisible(true);
			form.lyrMain().tabPageInternalReferralWorkflow().btnEditActions().setEnabled(form.lyrMain().tabPageInternalReferralWorkflow().cmbInternalReferralStatus().getValue() != null);
		}
		
		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.lyrMain().tabPageService().qmbClinicalService().setEnabled(form.getLocalContext().getSelectedServiceDetails() == null
																			|| form.getLocalContext().getSelectedServiceDetails().getID_ServiceConfigIntReferral() == null);
			
			form.lyrMain().tabPageService().imbRemoveQuestion().setVisible(true);
			form.lyrMain().tabPageService().imbRemoveQuestion().setEnabled(form.lyrMain().tabPageService().grdQuestions().getSelectedRow() != null);
			
			form.lyrMain().tabPageService().GroupStatusClinicalService().setEnabled(form.lyrMain().tabPageService().qmbClinicalService().getValue() == null || Boolean.TRUE.equals(form.lyrMain().tabPageService().qmbClinicalService().getValue().getIsActive()));
		}

		// TODO: Add you code here.
	}
	
	
    	//--------------------------------------------------------------------------------------------------------------------------------------
    	//	General form presentation functions - Clinic Service Details tab
    	//--------------------------------------------------------------------------------------------------------------------------------------

		private void clearClinicServiceSearchControls()
    	{
    		form.lyrMain().tabPageService().txtSearchClinicalService().setValue(null);
    		form.lyrMain().tabPageService().GroupSearchClinicalService().setValue(GroupSearchClinicalServiceEnumeration.rdoSearchActiveOnly);
    	}
    
    
    	private void clearClinicServiceScreen()
    	{
    		form.lyrMain().tabPageService().grdServices().getRows().clear();
    		
    		clearClinicServiceInstanceControls();
    	}


    	private void clearClinicServiceInstanceControls()
    	{
    		form.lyrMain().tabPageService().qmbClinicalService().clear();
    		form.lyrMain().tabPageService().GroupStatusClinicalService().setValue(null);
    		
    		form.lyrMain().tabPageService().GroupAuthorizationHCP().setValue(null);
    		form.lyrMain().tabPageService().GroupAcceptedNonHCP().setValue(null);
    		form.lyrMain().tabPageService().GroupServiceNonHCPSpecific().setValue(null);
    		
    		form.lyrMain().tabPageService().txtServiceTooltip().setValue(null);
    		form.lyrMain().tabPageService().grdQuestions().getRows().clear();
    	}


    	private void populateServices(ServiceConfigIntReferralLiteVoCollection services)
    	{
    		clearClinicServiceScreen();
    		
    		if (services == null)
    			return;
    		
    		for (ServiceConfigIntReferralLiteVo service : services)
    		{
    			grdServicesRow row = form.lyrMain().tabPageService().grdServices().getRows().newRow();
    			
    			row.setColService(service.getService().getServiceName());
    			row.setColActive(Boolean.TRUE.equals(service.getActive()));
    			
    			row.setValue(service);
    		}
    
    		if (form.getLocalContext().getSelectedServiceDetails() != null)
    		{
    			updateClinicalServiceSelection(form.getLocalContext().getSelectedServiceDetails());
    		}
    	}


    	private void updateClinicalServiceSelection(ServiceConfigIntReferralLiteVo service)
    	{
    		form.lyrMain().tabPageService().grdServices().setValue(service);
    		form.getLocalContext().setSelectedServiceDetails(domain.getServiceConfigReferral(form.lyrMain().tabPageService().grdServices().getValue()));
    		
    		populateClinicalServiceInstanceControls(form.getLocalContext().getSelectedServiceDetails());
    	}


    	private void initializeClinicServiceInstanceControls()
    	{
    		form.lyrMain().tabPageService().GroupStatusClinicalService().setValue(GroupStatusClinicalServiceEnumeration.rdoStatusActive);
    		
    		form.lyrMain().tabPageService().GroupAuthorizationHCP().setValue(GroupAuthorizationHCPEnumeration.rdoAuthorizedHCPYes);
    		form.lyrMain().tabPageService().GroupAcceptedNonHCP().setValue(GroupAcceptedNonHCPEnumeration.rdoAcceptNonHCPYes);
    		form.lyrMain().tabPageService().GroupServiceNonHCPSpecific().setValue(GroupServiceNonHCPSpecificEnumeration.rdoServiceNonHCPYes);
    	}


    	private void populateClinicalServiceInstanceControls(ServiceConfigIntReferralVo service)
    	{
    		clearClinicServiceInstanceControls();
    		
    		if (service == null)
    			return;
    		
    		form.lyrMain().tabPageService().qmbClinicalService().newRow(service.getService(), service.getService().getServiceName());
    		form.lyrMain().tabPageService().qmbClinicalService().setValue(service.getService());
    		
    		if (Boolean.TRUE.equals(service.getActive()))
    			form.lyrMain().tabPageService().GroupStatusClinicalService().setValue(GroupStatusClinicalServiceEnumeration.rdoStatusActive);
    		else
    			form.lyrMain().tabPageService().GroupStatusClinicalService().setValue(GroupStatusClinicalServiceEnumeration.rdoStatusInactive);
    		
    		
    		if (Boolean.TRUE.equals(service.getRequiresHcpAuthorisation()))
    			form.lyrMain().tabPageService().GroupAuthorizationHCP().setValue(GroupAuthorizationHCPEnumeration.rdoAuthorizedHCPYes);
    		else
    			form.lyrMain().tabPageService().GroupAuthorizationHCP().setValue(GroupAuthorizationHCPEnumeration.rdoAuthorizedHCPNo);
    		
    		
    		if (Boolean.TRUE.equals(service.getNonHcpAcceptance()))
    			form.lyrMain().tabPageService().GroupAcceptedNonHCP().setValue(GroupAcceptedNonHCPEnumeration.rdoAcceptNonHCPYes);
    		else
    			form.lyrMain().tabPageService().GroupAcceptedNonHCP().setValue(GroupAcceptedNonHCPEnumeration.rdoAcceptNonHCPNo);
    		
    		
    		if (Boolean.TRUE.equals(service.getNoHCPAllowedForService()))
    			form.lyrMain().tabPageService().GroupServiceNonHCPSpecific().setValue(GroupServiceNonHCPSpecificEnumeration.rdoServiceNonHCPYes);
    		else
    			form.lyrMain().tabPageService().GroupServiceNonHCPSpecific().setValue(GroupServiceNonHCPSpecificEnumeration.rdoServiceNonHCPNo);
    		
    		form.lyrMain().tabPageService().txtServiceTooltip().setValue(service.getTooltipText());
    		
    		populateClincalServiceQuestions(service.getQuestions());
    	}


    	private void populateClincalServiceQuestions(AssessmentQuestionServiceVoCollection questions)
    	{
    		form.lyrMain().tabPageService().grdQuestions().getRows().clear();
    		
    		if (questions == null)
    			return;
    		
    		for (AssessmentQuestionServiceVo question : questions)
    		{
    			grdQuestionsRow row = form.lyrMain().tabPageService().grdQuestions().getRows().newRow();
    			
    			row.setColQuestion(question.getQuestion().getText());
    			if (question.getQuestion().getAnswerTypes() != null)
    				row.setColAnswerType(question.getQuestion().getAnswerTypes().get(0).getAnswerType().getText());
    			row.setColMandatory(question.getIsMandatory());
    			
    			row.setValue(question);
    		}
    	}


    	private void populateClinicalServices(ServiceLiteVoCollection clinicalServices)
    	{
    		form.lyrMain().tabPageService().qmbClinicalService().clear();
    		
    		if (clinicalServices == null)
    		{
    			form.lyrMain().tabPageService().qmbClinicalService().showOpened();
    			return;
    		}
    
    		for (ServiceLiteVo service : clinicalServices)
    		{
    			form.lyrMain().tabPageService().qmbClinicalService().newRow(service, service.getServiceName());
    		}
    		
    		if (clinicalServices.size() == 1)
    		{
    			ServiceLiteVo service = clinicalServices.get(0);
				form.lyrMain().tabPageService().qmbClinicalService().setValue(service);
    			
        		if (service != null && !Boolean.TRUE.equals(service.getIsActive()))
        		{
        			form.lyrMain().tabPageService().GroupStatusClinicalService().setValue(GroupStatusClinicalServiceEnumeration.rdoStatusInactive);
        		}
    		}
    		else
    			form.lyrMain().tabPageService().qmbClinicalService().showOpened();
    	}
    
    
    	private void newClinicalServiceInstance()
    	{
    		form.getLocalContext().setSelectedServiceDetails(null);
    		
    		clearClinicServiceInstanceControls();
    		initializeClinicServiceInstanceControls();
    		
    		form.setMode(FormMode.EDIT);
    	}
    
    
    	private void updateClinicalServiceInstance()
    	{
    		form.setMode(FormMode.EDIT);
    	}
    
    
    	private boolean saveClinicalService() throws PresentationLogicException
    	{
    		try
    		{
    			// Populate data from screen
    			ServiceConfigIntReferralVo serviceDetails = null;
    			if (form.getLocalContext().getSelectedServiceDetails() != null)
    				serviceDetails = (ServiceConfigIntReferralVo) form.getLocalContext().getSelectedServiceDetails().clone();
    
    			serviceDetails = populateDataFromClinicalServiceInstanceControls(serviceDetails);
    			
    			// Validate data to save
    			String[] errors = serviceDetails.validate();
    			if (errors != null && errors.length > 0)
    			{
    				engine.showErrors(errors);
    				return false;
    			}
    
    			// If it is a new record check to see if one was not previously recorded
    			if (Boolean.TRUE.equals(serviceDetails.getActive()))
    			{
    				boolean activeRecordForServiceExists = domain.hasActiveRecordForService(serviceDetails.getService(), serviceDetails);
    				
    				if (activeRecordForServiceExists)
    				{
    					engine.showMessage("An active configuration already exists for selected service");
    					return false;
    				}
    			}
    
    			// Attempt to save data
    			form.getLocalContext().setSelectedServiceDetails(domain.saveServiceConfigReferral(serviceDetails));
    
    			// Success
    			return true;
    		}
    		catch (DomainInterfaceException e)
    		{
    			e.printStackTrace();
    			engine.showMessage(e.getMessage());
    			return false;
    		}
    		catch (StaleObjectException e)
    		{
    			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    			e.printStackTrace();
    			open(TAB_SERVICE_DETAILS);
    			return false;
    		}
    		catch (ForeignKeyViolationException e)
    		{
    			engine.showMessage(e.getMessage());
    			e.printStackTrace();
    			return false;
    		}
    		catch (UniqueKeyViolationException e)
    		{
    			engine.showMessage(e.getMessage());
    			e.printStackTrace();
    			return false;
    		}
    	}


    	private ServiceConfigIntReferralVo populateDataFromClinicalServiceInstanceControls(ServiceConfigIntReferralVo serviceDetails)
    	{
    		if (serviceDetails == null)
    			serviceDetails = new ServiceConfigIntReferralVo();
    		
    		serviceDetails.setService(form.lyrMain().tabPageService().qmbClinicalService().getValue());
    		
    		serviceDetails.setActive(GroupStatusClinicalServiceEnumeration.rdoStatusActive.equals(form.lyrMain().tabPageService().GroupStatusClinicalService().getValue()));
    		
    		serviceDetails.setRequiresHcpAuthorisation(GroupAuthorizationHCPEnumeration.rdoAuthorizedHCPYes.equals(form.lyrMain().tabPageService().GroupAuthorizationHCP().getValue()));
    		serviceDetails.setNonHcpAcceptance(GroupAcceptedNonHCPEnumeration.rdoAcceptNonHCPYes.equals(form.lyrMain().tabPageService().GroupAcceptedNonHCP().getValue()));
    		serviceDetails.setNoHCPAllowedForService(GroupServiceNonHCPSpecificEnumeration.rdoServiceNonHCPYes.equals(form.lyrMain().tabPageService().GroupServiceNonHCPSpecific().getValue()));
    		
    		serviceDetails.setTooltipText(form.lyrMain().tabPageService().txtServiceTooltip().getValue());
    		
    		serviceDetails.setQuestions(new AssessmentQuestionServiceVoCollection());
    		for (int i = 0; i < form.lyrMain().tabPageService().grdQuestions().getRows().size(); i++)
    		{
    			grdQuestionsRow questionRow = form.lyrMain().tabPageService().grdQuestions().getRows().get(i);
    			AssessmentQuestionServiceVo serviceQuestion = questionRow.getValue();
    			serviceQuestion.setIsMandatory(questionRow.getColMandatory());
    			
    			serviceDetails.getQuestions().add(serviceQuestion);
    		}
    
    		return serviceDetails;
    	}


    	private void addQuestions(QuestionInformationShortVoCollection questions)
    	{
    		if (questions == null)
    			return;
    		
    		for (QuestionInformationShortVo question : questions)
    		{
    			grdQuestionsRow questionRow = form.lyrMain().tabPageService().grdQuestions().getRows().newRow();
    			
    			questionRow.setColQuestion(question.getText());
    			if (question.getAnswerTypes() != null)
    				questionRow.setColAnswerType(question.getAnswerTypes().get(0).getAnswerType().getText());
    			
    			questionRow.setColMandatory(false);
    			
    			AssessmentQuestionServiceVo serviceQuestion = new AssessmentQuestionServiceVo();
    			serviceQuestion.setQuestion(question);
    			serviceQuestion.setIsMandatory(Boolean.FALSE);
    			serviceQuestion.setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
    			serviceQuestion.setSequence(form.lyrMain().tabPageService().grdQuestions().getRows().size());
    			questionRow.setValue(serviceQuestion);
    		}
    	}
    
    	
    	private void removeQuestion()
    	{
    		form.lyrMain().tabPageService().grdQuestions().removeSelectedRow();
    		form.lyrMain().tabPageService().grdQuestions().setValue(null);
    	}


	
    	//--------------------------------------------------------------------------------------------------------------------------------------
    	//	General form presentation functions - Internal Referral Workflow tab
    	//--------------------------------------------------------------------------------------------------------------------------------------

        private void clearInternalReferralWorkflosControls()
    	{
        	form.lyrMain().tabPageInternalReferralWorkflow().cmbInternalReferralStatus().setValue(null);
        	form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().clear();
        	form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().clear();
    	}


		private void populateInternalReferralWorkflowInstanceControls(WorkflowInternalReferralsVo internalReferralWorkflow, InternalReferralStatus referralStatus)
    	{
			clearInternalReferralWorkflosControls();
			
			// Populate actions in grid
			initializeOutpatientInpatientGrid();
			
			form.lyrMain().tabPageInternalReferralWorkflow().cmbInternalReferralStatus().setValue(referralStatus);
			
			if (internalReferralWorkflow == null)
				return;
			
			if (referralStatus == null)
				return;

			for (WorkflowActionInternalReferalVo actionInpatient : internalReferralWorkflow.getInpatientActions())
			{
				if (!referralStatus.equals(actionInpatient.getInternalReferralStatus()))
					continue;
				
				grdActionsInpatientRow row = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRowByValue(getActionForReferral(actionInpatient.getMenuAction()));
				row.setColAllow(Boolean.TRUE.equals(actionInpatient.getOptionAvailable()));
			}
			
			for (WorkflowActionInternalReferalVo actionOutpatient : internalReferralWorkflow.getOutpatientActions())
			{
				if (!referralStatus.equals(actionOutpatient.getInternalReferralStatus()))
					continue;
				
				grdActionsOutpatientRow row = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRowByValue(getActionForReferral(actionOutpatient.getMenuAction()));
				row.setColAllow(Boolean.TRUE.equals(actionOutpatient.getOptionAvailable()));
			}
    	}

		
		private boolean saveInternalReferralWorkflow() throws PresentationLogicException
		{
        	try
        	{
        		// In case we record for the first time the referral workflow check for another configuration
        		if (form.getLocalContext().getInternalReferralWorkflow() == null)
        		{
        			WorkflowInternalReferralsVo existingRecord = domain.getInternalReferralWorkflow();

        			if (existingRecord != null)
        			{
        				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        				open(TAB_INTERNAL_REFERRAL_WORKFLOW);
        				return false;
        			}
        		}

        		WorkflowInternalReferralsVo recordToSave = populateInternalReferralWorkflowFromInstanceControls(form.getLocalContext().getInternalReferralWorkflow());

        		String[] errors = recordToSave.validate();
        		if (errors != null && errors.length > 0)
        		{
        			engine.showErrors(errors);
        			return false;
        		}

        		form.getLocalContext().setInternalReferralWorkflow(domain.saveInternalReferralWorkflow(recordToSave));

        		return true;
        	}
        	catch (DomainInterfaceException e)
        	{
        		engine.showMessage(e.getMessage());
        		e.printStackTrace();
        		return false;
        	}
        	catch (StaleObjectException e)
        	{
        		engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        		e.printStackTrace();
        		open(TAB_INTERNAL_REFERRAL_WORKFLOW);
        		return false;
        	}
		}


		

		private WorkflowInternalReferralsVo populateInternalReferralWorkflowFromInstanceControls(WorkflowInternalReferralsVo internalReferralWorkflow)
		{
			if (internalReferralWorkflow == null)
			{
				internalReferralWorkflow = new WorkflowInternalReferralsVo();
				internalReferralWorkflow.setInpatientActions(new WorkflowActionInternalReferalVoCollection());
				internalReferralWorkflow.setOutpatientActions(new WorkflowActionInternalReferalVoCollection());
			}
			
			InternalReferralStatus referralStatus = form.lyrMain().tabPageInternalReferralWorkflow().cmbInternalReferralStatus().getValue();
			
			// Populate Outpatient Actions work flow
			for (int i = 0; i < form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().size(); i++)
			{
				grdActionsOutpatientRow outpatientRow = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().get(i);
				
				if (internalReferralWorkflow.getOutpatientActions() == null)
					internalReferralWorkflow.setOutpatientActions(new WorkflowActionInternalReferalVoCollection());
				
				updateReferralWorkflowActions(internalReferralWorkflow.getOutpatientActions(), referralStatus, outpatientRow.getValue(), outpatientRow.getColAllow());
			}
			
			// Populate Inpatient Actions work flow
			for (int i = 0; i < form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().size(); i++)
			{
				grdActionsInpatientRow inpatientRow = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().get(i);
				
				if (internalReferralWorkflow.getInpatientActions() == null)
					internalReferralWorkflow.setInpatientActions(new WorkflowActionInternalReferalVoCollection());
				
				updateReferralWorkflowActions(internalReferralWorkflow.getInpatientActions(), referralStatus, inpatientRow.getValue(), inpatientRow.getColAllow());
			}
			
			return internalReferralWorkflow;
		}


		private void updateReferralWorkflowActions(WorkflowActionInternalReferalVoCollection workflowActions, InternalReferralStatus referralStatus, InternalReferralStatusAction action, Boolean allow)
		{
			if (workflowActions == null || referralStatus == null)
				throw new CodingRuntimeException("Logical error - records should not be null");
			
			for (WorkflowActionInternalReferalVo workflowAction : workflowActions)
			{
				if (referralStatus.equals(workflowAction.getInternalReferralStatus()) && action.equals(getActionForReferral(workflowAction.getMenuAction())))
				{
					workflowAction.setOptionAvailable(Boolean.TRUE.equals(allow));
					return;
				}
			}
			
			// At this point the option was not ever saved, so create a new one
			WorkflowActionInternalReferalVo workflowAction = new WorkflowActionInternalReferalVo();
			workflowAction.setInternalReferralStatus(referralStatus);
			workflowAction.setMenuAction(getInternalReferralActionCode(action));
			workflowAction.setOptionAvailable(Boolean.TRUE.equals(allow));
			
			workflowActions.add(workflowAction);
		}


		        
    	//--------------------------------------------------------------------------------------------------------------------------------------
    	//	General form presentation functions - Internal Referral Workflow tab
    	//--------------------------------------------------------------------------------------------------------------------------------------

		private void clearInternalReferralSettingsControls()
		{
			form.lyrMain().tabPageInternalReferralSettings().cmbNewConditionBackToGP().setValue(null);
			form.lyrMain().tabPageInternalReferralSettings().txtReferralBackToGPOptional().setValue(null);
			form.lyrMain().tabPageInternalReferralSettings().txtReferralBackToGPMandatory().setValue(null);
			form.lyrMain().tabPageInternalReferralSettings().cmbUrgentBackground().setValue(null);
			
			form.lyrMain().tabPageInternalReferralSettings().GroupAllowImportScan().setValue(null);
			
			form.lyrMain().tabPageInternalReferralSettings().intSearchNumberOfDays().setValue(null);
		}
		

		private void populateInternalReferralSettingsInstanceControls(InternalReferralSettingsVo internalReferralSettings)
		{
			clearInternalReferralSettingsControls();
			
			if (internalReferralSettings == null)
			{
				// Set default value
				form.lyrMain().tabPageInternalReferralSettings().GroupAllowImportScan().setValue(GroupAllowImportScanEnumeration.rdoYes);
				return;
			}
			
			form.lyrMain().tabPageInternalReferralSettings().cmbNewConditionBackToGP().setValue(internalReferralSettings.getNewConditionReferralBackToGP());
			form.lyrMain().tabPageInternalReferralSettings().txtReferralBackToGPOptional().setValue(internalReferralSettings.getReferralBackToGPOptionalMessage());
			form.lyrMain().tabPageInternalReferralSettings().txtReferralBackToGPMandatory().setValue(internalReferralSettings.getReferralBackToGPMandatoryMessage());
			form.lyrMain().tabPageInternalReferralSettings().cmbUrgentBackground().setValue(internalReferralSettings.getUrgentReferralBackgroundColour());
			
			if (Boolean.TRUE.equals(internalReferralSettings.getAllowScanImport()))
				form.lyrMain().tabPageInternalReferralSettings().GroupAllowImportScan().setValue(GroupAllowImportScanEnumeration.rdoYes);
			else
				form.lyrMain().tabPageInternalReferralSettings().GroupAllowImportScan().setValue(GroupAllowImportScanEnumeration.rdoNo);
			
			form.lyrMain().tabPageInternalReferralSettings().intSearchNumberOfDays().setValue(internalReferralSettings.getSearchNumberOfDays());
		}


		private InternalReferralSettingsVo populateInternalReferralSettingsFromInstanceControls(InternalReferralSettingsVo referralSettings)
		{
			if (referralSettings == null)
			{
				referralSettings = new InternalReferralSettingsVo();
			}

			referralSettings.setNewConditionReferralBackToGP(form.lyrMain().tabPageInternalReferralSettings().cmbNewConditionBackToGP().getValue());
			referralSettings.setReferralBackToGPOptionalMessage(form.lyrMain().tabPageInternalReferralSettings().txtReferralBackToGPOptional().getValue());
			referralSettings.setReferralBackToGPMandatoryMessage(form.lyrMain().tabPageInternalReferralSettings().txtReferralBackToGPMandatory().getValue());
			referralSettings.setUrgentReferralBackgroundColour(form.lyrMain().tabPageInternalReferralSettings().cmbUrgentBackground().getValue());
			
			if (GroupAllowImportScanEnumeration.rdoYes.equals(form.lyrMain().tabPageInternalReferralSettings().GroupAllowImportScan().getValue()))
				referralSettings.setAllowScanImport(Boolean.TRUE);
			else if (GroupAllowImportScanEnumeration.rdoNo.equals(form.lyrMain().tabPageInternalReferralSettings().GroupAllowImportScan().getValue()))
				referralSettings.setAllowScanImport(Boolean.FALSE);
			
			referralSettings.setSearchNumberOfDays(form.lyrMain().tabPageInternalReferralSettings().intSearchNumberOfDays().getValue());
			
			return referralSettings;
		}


		private boolean saveInternalReferralSettings()
		{
        	try
        	{
        		// In case we record for the first time the referral settings check for another configuration
        		if (form.getLocalContext().getInternalReferralSettings() == null)
        		{
        			InternalReferralSettingsVo existingRecord = domain.getInternalReferralSettings();

        			if (existingRecord != null)
        			{
        				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        				open(TAB_INTERNAL_REFERRAL_SETTINGS);
        				return false;
        			}
        		}

        		InternalReferralSettingsVo recordToSave = populateInternalReferralSettingsFromInstanceControls(form.getLocalContext().getInternalReferralSettings());

        		String[] errors = recordToSave.validate();
        		if (errors != null && errors.length > 0)
        		{
        			engine.showErrors(errors);
        			return false;
        		}

        		form.getLocalContext().setInternalReferralSettings(domain.saveInternalReferralSettings(recordToSave));

        		return true;
        	}
        	catch (DomainInterfaceException e)
        	{
        		engine.showMessage(e.getMessage());
        		e.printStackTrace();
        		return false;
        	}
        	catch (StaleObjectException e)
        	{
        		engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        		e.printStackTrace();
        		open(TAB_INTERNAL_REFERRAL_SETTINGS);
        		return false;
        	}
		}

		
		
    	//--------------------------------------------------------------------------------------------------------------------------------------
    	//	Auxiliary function - because ims.enumeration isn't an enumeration and can't be placed into BO
    	//--------------------------------------------------------------------------------------------------------------------------------------
		
		
		private Integer getInternalReferralActionCode(InternalReferralStatusAction action)
		{
			if (action == null)
				throw new IllegalArgumentException("Parameter 'action' cannot be null");
			
			if (InternalReferralStatusAction.EDIT.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_EDIT;

			if (InternalReferralStatusAction.ATTACH_REFERRAL_LETTER.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_ATTACH_REFERRAL_LETTER;
				
			if (InternalReferralStatusAction.SIGN_OFF.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_SIGN_OFF;
				
			if (InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_REQUIRES_FURTHER_INFORMATION;
				
			if (InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_RECORD_FURTHER_INFORMATION;
			
			if (InternalReferralStatusAction.ACCEPT.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_ACCEPT;
				
			if (InternalReferralStatusAction.SECOND_OPINION_REQUIRED.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_SECOND_OPINION_REQUIRED;
				
			if (InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_ACCEPT_APPOINTMENT_REQUIRED;
				
			if (InternalReferralStatusAction.APPOINTMENT_BOOKED.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_APPOINTMENT_BOOKED;
			
			if (InternalReferralStatusAction.COMPLETE_ADD_NOTE.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_COMPLETE_ADD_NOTE;
			
			if (InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_COMPLETE_LINK_CORRESPONDENCE;
			
			if (InternalReferralStatusAction.REJECT.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_REJECT;
			
			if (InternalReferralStatusAction.REJECT_ACKNOWLEDGED.equals(action))
				return InternalReferralActionsHelper.MENU_ACTION_REJECTION_ACKNOWLEDGED;
			
			// We should not reach this point - an error in logic occured
			throw new CodingRuntimeException("Logical error - an action should have been found");
		}


		private InternalReferralStatusAction getActionForReferral(Integer menuAction)
		{
			switch (menuAction)
			{
				case InternalReferralActionsHelper.MENU_ACTION_EDIT:
					return InternalReferralStatusAction.EDIT;
					
				case InternalReferralActionsHelper.MENU_ACTION_ATTACH_REFERRAL_LETTER:
					return InternalReferralStatusAction.ATTACH_REFERRAL_LETTER;
					
				case InternalReferralActionsHelper.MENU_ACTION_SIGN_OFF:
					return InternalReferralStatusAction.SIGN_OFF;
					
				case InternalReferralActionsHelper.MENU_ACTION_REQUIRES_FURTHER_INFORMATION:
					return InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION;
					
				case InternalReferralActionsHelper.MENU_ACTION_RECORD_FURTHER_INFORMATION:
					return InternalReferralStatusAction.RECORD_FURTHER_INFORMATION;
					
				case InternalReferralActionsHelper.MENU_ACTION_ACCEPT:
					return InternalReferralStatusAction.ACCEPT;

				case InternalReferralActionsHelper.MENU_ACTION_SECOND_OPINION_REQUIRED:
					return InternalReferralStatusAction.SECOND_OPINION_REQUIRED;
					
				case InternalReferralActionsHelper.MENU_ACTION_ACCEPT_APPOINTMENT_REQUIRED:
					return InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED;
					
				case InternalReferralActionsHelper.MENU_ACTION_APPOINTMENT_BOOKED:
					return InternalReferralStatusAction.APPOINTMENT_BOOKED;
					
				case InternalReferralActionsHelper.MENU_ACTION_COMPLETE_ADD_NOTE:
					return InternalReferralStatusAction.COMPLETE_ADD_NOTE;
					
				case InternalReferralActionsHelper.MENU_ACTION_COMPLETE_LINK_CORRESPONDENCE:
					return InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE;

				case InternalReferralActionsHelper.MENU_ACTION_REJECT:
					return InternalReferralStatusAction.REJECT;

				case InternalReferralActionsHelper.MENU_ACTION_REJECTION_ACKNOWLEDGED:
					return InternalReferralStatusAction.REJECT_ACKNOWLEDGED;
			}
			
			// Execution should not reach this point
			throw new CodingRuntimeException("Logical error - an action should have been found");
		}


		private void initializeOutpatientInpatientGrid()
		{
			form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().clear();
			form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().clear();
			
			grdActionsOutpatientRow rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			grdActionsInpatientRow rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.EDIT.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.EDIT.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.EDIT);
			rowInpatient.setValue(InternalReferralStatusAction.EDIT);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.ATTACH_REFERRAL_LETTER.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.ATTACH_REFERRAL_LETTER);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.SIGN_OFF.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.SIGN_OFF.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.SIGN_OFF);
			rowInpatient.setValue(InternalReferralStatusAction.SIGN_OFF);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION);
			rowInpatient.setValue(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION);
			rowInpatient.setValue(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION);
			
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowInpatient.setColAction(InternalReferralStatusAction.ACCEPT.getText());
			rowInpatient.setValue(InternalReferralStatusAction.ACCEPT);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.SECOND_OPINION_REQUIRED.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.SECOND_OPINION_REQUIRED);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.APPOINTMENT_BOOKED.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.APPOINTMENT_BOOKED);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.COMPLETE_ADD_NOTE.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.COMPLETE_ADD_NOTE.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.COMPLETE_ADD_NOTE);
			rowInpatient.setValue(InternalReferralStatusAction.COMPLETE_ADD_NOTE);

			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE);
			rowInpatient.setValue(InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE);

			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.REJECT.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.REJECT.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.REJECT);
			rowInpatient.setValue(InternalReferralStatusAction.REJECT);
			
			rowOutpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsOutpatient().getRows().newRow();
			rowInpatient = form.lyrMain().tabPageInternalReferralWorkflow().grdActionsInpatient().getRows().newRow();
			rowOutpatient.setColAction(InternalReferralStatusAction.REJECT_ACKNOWLEDGED.getText());
			rowInpatient.setColAction(InternalReferralStatusAction.REJECT_ACKNOWLEDGED.getText());
			rowOutpatient.setValue(InternalReferralStatusAction.REJECT_ACKNOWLEDGED);
			rowInpatient.setValue(InternalReferralStatusAction.REJECT_ACKNOWLEDGED);
		}
}
