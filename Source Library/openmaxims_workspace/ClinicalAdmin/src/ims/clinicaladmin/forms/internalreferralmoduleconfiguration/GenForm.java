//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.internalreferralmoduleconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMainLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageServiceContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class qmbClinicalServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColQuestionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColQuestionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColQuestionOpened()
				{
					super.row.showOpened(0);
				}
				public String getColQuestion()
				{
					return (String)super.row.get(0);
				}
				public void setColQuestion(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColQuestionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColAnswerTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColAnswerTypeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColAnswerTypeOpened()
				{
					super.row.showOpened(1);
				}
				public String getColAnswerType()
				{
					return (String)super.row.get(1);
				}
				public void setColAnswerType(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColAnswerTypeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColMandatoryReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColMandatoryReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColMandatoryOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColMandatory()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColMandatory(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColMandatoryTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.AssessmentQuestionServiceVo getValue()
				{
					return (ims.core.vo.AssessmentQuestionServiceVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.AssessmentQuestionServiceVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdQuestionsRow get(int index)
				{
					return new grdQuestionsRow(super.collection.get(index));
				}
				public grdQuestionsRow newRow()
				{
					return new grdQuestionsRow(super.collection.newRow());
				}
				public grdQuestionsRow newRow(boolean autoSelect)
				{
					return new grdQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdQuestionsRow newRowAt(int index)
				{
					return new grdQuestionsRow(super.collection.newRowAt(index));
				}
				public grdQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.AssessmentQuestionServiceVoCollection getValues()
				{
					ims.core.vo.AssessmentQuestionServiceVoCollection listOfValues = new ims.core.vo.AssessmentQuestionServiceVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.AssessmentQuestionServiceVo getValue()
				{
					return (ims.core.vo.AssessmentQuestionServiceVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.AssessmentQuestionServiceVo value)
				{
					super.grid.setValue(value);
				}
				public grdQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdQuestionsRowCollection getRows()
				{
					return new grdQuestionsRowCollection(super.grid.getRows());
				}
				public grdQuestionsRow getRowByValue(ims.core.vo.AssessmentQuestionServiceVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdQuestionsRow(row);
				}
				public void setColQuestionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColQuestionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColAnswerTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColAnswerTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColMandatoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColMandatoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdServicesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdServicesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColServiceReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColServiceOpened()
				{
					super.row.showOpened(0);
				}
				public String getColService()
				{
					return (String)super.row.get(0);
				}
				public void setColService(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColServiceTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColActiveReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColActiveOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColActive()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColActive(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColActiveTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinical.vo.ServiceConfigIntReferralLiteVo getValue()
				{
					return (ims.clinical.vo.ServiceConfigIntReferralLiteVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.ServiceConfigIntReferralLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdServicesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdServicesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdServicesRow get(int index)
				{
					return new grdServicesRow(super.collection.get(index));
				}
				public grdServicesRow newRow()
				{
					return new grdServicesRow(super.collection.newRow());
				}
				public grdServicesRow newRow(boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRow(autoSelect));
				}
				public grdServicesRow newRowAt(int index)
				{
					return new grdServicesRow(super.collection.newRowAt(index));
				}
				public grdServicesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdServicesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.clinical.vo.ServiceConfigIntReferralLiteVoCollection getValues()
				{
					ims.clinical.vo.ServiceConfigIntReferralLiteVoCollection listOfValues = new ims.clinical.vo.ServiceConfigIntReferralLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.ServiceConfigIntReferralLiteVo getValue()
				{
					return (ims.clinical.vo.ServiceConfigIntReferralLiteVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.ServiceConfigIntReferralLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdServicesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdServicesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdServicesRowCollection getRows()
				{
					return new grdServicesRowCollection(super.grid.getRows());
				}
				public grdServicesRow getRowByValue(ims.clinical.vo.ServiceConfigIntReferralLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdServicesRow(row);
				}
				public void setColServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
		
			public static class GroupServiceNonHCPSpecificRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 736, 216, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 15);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 688, 216, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 14);
				}
				public void setText(GroupServiceNonHCPSpecificEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupServiceNonHCPSpecificEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupServiceNonHCPSpecificEnumeration.None;
						case 0: return GroupServiceNonHCPSpecificEnumeration.rdoServiceNonHCPNo;
						case 1: return GroupServiceNonHCPSpecificEnumeration.rdoServiceNonHCPYes;
					}
					return null;
				}
				public void setValue(GroupServiceNonHCPSpecificEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupServiceNonHCPSpecificEnumeration.None.id);
				}
				public boolean isEnabled(GroupServiceNonHCPSpecificEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupServiceNonHCPSpecificEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupServiceNonHCPSpecificEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupServiceNonHCPSpecificEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupServiceNonHCPSpecificEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupServiceNonHCPSpecificEnumeration None = new GroupServiceNonHCPSpecificEnumeration(-1);
				public static GroupServiceNonHCPSpecificEnumeration rdoServiceNonHCPNo = new GroupServiceNonHCPSpecificEnumeration(0);
				public static GroupServiceNonHCPSpecificEnumeration rdoServiceNonHCPYes = new GroupServiceNonHCPSpecificEnumeration(1);
				private GroupServiceNonHCPSpecificEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupServiceNonHCPSpecificEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupAcceptedNonHCPRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 736, 168, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "No", startTabIndex.intValue() + 13);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 688, 168, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Yes", startTabIndex.intValue() + 12);
				}
				public void setText(GroupAcceptedNonHCPEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAcceptedNonHCPEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAcceptedNonHCPEnumeration.None;
						case 0: return GroupAcceptedNonHCPEnumeration.rdoAcceptNonHCPNo;
						case 1: return GroupAcceptedNonHCPEnumeration.rdoAcceptNonHCPYes;
					}
					return null;
				}
				public void setValue(GroupAcceptedNonHCPEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAcceptedNonHCPEnumeration.None.id);
				}
				public boolean isEnabled(GroupAcceptedNonHCPEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAcceptedNonHCPEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAcceptedNonHCPEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAcceptedNonHCPEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAcceptedNonHCPEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAcceptedNonHCPEnumeration None = new GroupAcceptedNonHCPEnumeration(-1);
				public static GroupAcceptedNonHCPEnumeration rdoAcceptNonHCPNo = new GroupAcceptedNonHCPEnumeration(0);
				public static GroupAcceptedNonHCPEnumeration rdoAcceptNonHCPYes = new GroupAcceptedNonHCPEnumeration(1);
				private GroupAcceptedNonHCPEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAcceptedNonHCPEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupAuthorizationHCPRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 736, 120, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "No", startTabIndex.intValue() + 11);
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 688, 120, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Yes", startTabIndex.intValue() + 10);
				}
				public void setText(GroupAuthorizationHCPEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAuthorizationHCPEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAuthorizationHCPEnumeration.None;
						case 0: return GroupAuthorizationHCPEnumeration.rdoAuthorizedHCPNo;
						case 1: return GroupAuthorizationHCPEnumeration.rdoAuthorizedHCPYes;
					}
					return null;
				}
				public void setValue(GroupAuthorizationHCPEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAuthorizationHCPEnumeration.None.id);
				}
				public boolean isEnabled(GroupAuthorizationHCPEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAuthorizationHCPEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAuthorizationHCPEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAuthorizationHCPEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAuthorizationHCPEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAuthorizationHCPEnumeration None = new GroupAuthorizationHCPEnumeration(-1);
				public static GroupAuthorizationHCPEnumeration rdoAuthorizedHCPNo = new GroupAuthorizationHCPEnumeration(0);
				public static GroupAuthorizationHCPEnumeration rdoAuthorizedHCPYes = new GroupAuthorizationHCPEnumeration(1);
				private GroupAuthorizationHCPEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAuthorizationHCPEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupStatusClinicalServiceRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 496, 56, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Inactive", startTabIndex.intValue() + 9);
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 424, 56, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Active", startTabIndex.intValue() + 8);
				}
				public void setText(GroupStatusClinicalServiceEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupStatusClinicalServiceEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupStatusClinicalServiceEnumeration.None;
						case 0: return GroupStatusClinicalServiceEnumeration.rdoStatusInactive;
						case 1: return GroupStatusClinicalServiceEnumeration.rdoStatusActive;
					}
					return null;
				}
				public void setValue(GroupStatusClinicalServiceEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupStatusClinicalServiceEnumeration.None.id);
				}
				public boolean isEnabled(GroupStatusClinicalServiceEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupStatusClinicalServiceEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupStatusClinicalServiceEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupStatusClinicalServiceEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupStatusClinicalServiceEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupStatusClinicalServiceEnumeration None = new GroupStatusClinicalServiceEnumeration(-1);
				public static GroupStatusClinicalServiceEnumeration rdoStatusInactive = new GroupStatusClinicalServiceEnumeration(0);
				public static GroupStatusClinicalServiceEnumeration rdoStatusActive = new GroupStatusClinicalServiceEnumeration(1);
				private GroupStatusClinicalServiceEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupStatusClinicalServiceEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupSearchClinicalServiceRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 112, 80, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "All", startTabIndex.intValue() + 5);
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Active Only", startTabIndex.intValue() + 4);
				}
				public void setText(GroupSearchClinicalServiceEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupSearchClinicalServiceEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupSearchClinicalServiceEnumeration.None;
						case 0: return GroupSearchClinicalServiceEnumeration.rdoSearchAll;
						case 1: return GroupSearchClinicalServiceEnumeration.rdoSearchActiveOnly;
					}
					return null;
				}
				public void setValue(GroupSearchClinicalServiceEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupSearchClinicalServiceEnumeration.None.id);
				}
				public boolean isEnabled(GroupSearchClinicalServiceEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupSearchClinicalServiceEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupSearchClinicalServiceEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupSearchClinicalServiceEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupSearchClinicalServiceEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupSearchClinicalServiceEnumeration None = new GroupSearchClinicalServiceEnumeration(-1);
				public static GroupSearchClinicalServiceEnumeration rdoSearchAll = new GroupSearchClinicalServiceEnumeration(0);
				public static GroupSearchClinicalServiceEnumeration rdoSearchActiveOnly = new GroupSearchClinicalServiceEnumeration(1);
				private GroupSearchClinicalServiceEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupSearchClinicalServiceEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 320, 80, 464, 168, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Referrals into this service:", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 320, 256, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Tooltip:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 331, 179, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "by a non-HCP user:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 331, 165, 356, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Can be accepted / rejected / marked as requires 2nd Opinion ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 331, 216, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Are for Service only:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 331, 120, 216, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Details require authorisation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 320, 56, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 320, 24, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Service:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 741, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 656, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 104, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 221, 56, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 221, 24, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Search", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 320, 272, 464, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 424, 24, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbClinicalServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbClinicalServiceTemp);
				qmbClinicalServiceComboBox qmbClinicalService = (qmbClinicalServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbClinicalServiceComboBox.class, m_qmbClinicalServiceTemp);
				super.addComboBox(qmbClinicalService);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 320, 376, 464, 176, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdQuestionsTemp);
				grdQuestionsGrid grdQuestions = (grdQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdQuestionsGrid.class, m_grdQuestionsTemp);
				grdQuestions.addStringColumn("Question", 0, 0, 270, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdQuestions.addStringColumn("Answer Type", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdQuestions.addBoolColumn("Mandatory", 0, 0, 65, false, false, 0, true);
				super.addGrid(grdQuestions);
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 280, 448, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdServicesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdServicesTemp);
				grdServicesGrid grdServices = (grdServicesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServicesGrid.class, m_grdServicesTemp);
				grdServices.addStringColumn("Service", 0, 0, 215, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.addBoolColumn("Active", 0, 0, 60, true, false, 0, true);
				super.addGrid(grdServices);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 792, 408, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Minus, form_images_local.Core.MinusDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 792, 376, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Plus, form_images_local.Core.PlusDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupServiceNonHCPSpecific = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupServiceNonHCPSpecific);
				GroupServiceNonHCPSpecificRadioButton GroupServiceNonHCPSpecific = (GroupServiceNonHCPSpecificRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupServiceNonHCPSpecificRadioButton.class, tmpGroupServiceNonHCPSpecific);
				GroupServiceNonHCPSpecific.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupServiceNonHCPSpecific);
				RadioButton tmpGroupAcceptedNonHCP = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupAcceptedNonHCP);
				GroupAcceptedNonHCPRadioButton GroupAcceptedNonHCP = (GroupAcceptedNonHCPRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAcceptedNonHCPRadioButton.class, tmpGroupAcceptedNonHCP);
				GroupAcceptedNonHCP.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAcceptedNonHCP);
				RadioButton tmpGroupAuthorizationHCP = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupAuthorizationHCP);
				GroupAuthorizationHCPRadioButton GroupAuthorizationHCP = (GroupAuthorizationHCPRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAuthorizationHCPRadioButton.class, tmpGroupAuthorizationHCP);
				GroupAuthorizationHCP.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAuthorizationHCP);
				RadioButton tmpGroupStatusClinicalService = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupStatusClinicalService);
				GroupStatusClinicalServiceRadioButton GroupStatusClinicalService = (GroupStatusClinicalServiceRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupStatusClinicalServiceRadioButton.class, tmpGroupStatusClinicalService);
				GroupStatusClinicalService.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupStatusClinicalService);
				RadioButton tmpGroupSearchClinicalService = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupSearchClinicalService);
				GroupSearchClinicalServiceRadioButton GroupSearchClinicalService = (GroupSearchClinicalServiceRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSearchClinicalServiceRadioButton.class, tmpGroupSearchClinicalService);
				GroupSearchClinicalService.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupSearchClinicalService);
			}

			public Button btnCancelClinicalService()
			{
				return (Button)super.getControl(9);
			}
			public Button btnSaveClinicalService()
			{
				return (Button)super.getControl(10);
			}
			public Button btnEditClinicalService()
			{
				return (Button)super.getControl(11);
			}
			public Button btnNewClinicalService()
			{
				return (Button)super.getControl(12);
			}
			public Button btnClear()
			{
				return (Button)super.getControl(13);
			}
			public Button btnSearch()
			{
				return (Button)super.getControl(14);
			}
			public TextBox txtServiceTooltip()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txtSearchClinicalService()
			{
				return (TextBox)super.getControl(16);
			}
			public qmbClinicalServiceComboBox qmbClinicalService()
			{
				return (qmbClinicalServiceComboBox)super.getComboBox(0);
			}
			public grdQuestionsGrid grdQuestions()
			{
				return (grdQuestionsGrid)super.getGrid(0);
			}
			public grdServicesGrid grdServices()
			{
				return (grdServicesGrid)super.getGrid(1);
			}
			public ImageButton imbRemoveQuestion()
			{
				return (ImageButton)super.getControl(20);
			}
			public ImageButton imbAddQuestion()
			{
				return (ImageButton)super.getControl(21);
			}
			public GroupServiceNonHCPSpecificRadioButton GroupServiceNonHCPSpecific()
			{
				return (GroupServiceNonHCPSpecificRadioButton)super.getRadioButton(0);
			}
			public GroupAcceptedNonHCPRadioButton GroupAcceptedNonHCP()
			{
				return (GroupAcceptedNonHCPRadioButton)super.getRadioButton(1);
			}
			public GroupAuthorizationHCPRadioButton GroupAuthorizationHCP()
			{
				return (GroupAuthorizationHCPRadioButton)super.getRadioButton(2);
			}
			public GroupStatusClinicalServiceRadioButton GroupStatusClinicalService()
			{
				return (GroupStatusClinicalServiceRadioButton)super.getRadioButton(3);
			}
			public GroupSearchClinicalServiceRadioButton GroupSearchClinicalService()
			{
				return (GroupSearchClinicalServiceRadioButton)super.getRadioButton(4);
			}
		}
		public static class tabPageInternalReferralWorkflowContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbInternalReferralStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.InternalReferralStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.InternalReferralStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.InternalReferralStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.InternalReferralStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.InternalReferralStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.InternalReferralStatus getValue()
				{
					return (ims.core.vo.lookups.InternalReferralStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.InternalReferralStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdActionsInpatientRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdActionsInpatientRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColActionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColActionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColActionOpened()
				{
					super.row.showOpened(0);
				}
				public String getColAction()
				{
					return (String)super.row.get(0);
				}
				public void setColAction(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColActionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColAllowReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColAllowReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColAllowOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColAllow()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColAllow(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColAllowTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.enums.InternalReferralStatusAction getValue()
				{
					return (ims.core.vo.enums.InternalReferralStatusAction)super.row.getValue();
				}
				public void setValue(ims.core.vo.enums.InternalReferralStatusAction value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdActionsInpatientRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdActionsInpatientRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdActionsInpatientRow get(int index)
				{
					return new grdActionsInpatientRow(super.collection.get(index));
				}
				public grdActionsInpatientRow newRow()
				{
					return new grdActionsInpatientRow(super.collection.newRow());
				}
				public grdActionsInpatientRow newRow(boolean autoSelect)
				{
					return new grdActionsInpatientRow(super.collection.newRow(autoSelect));
				}
				public grdActionsInpatientRow newRowAt(int index)
				{
					return new grdActionsInpatientRow(super.collection.newRowAt(index));
				}
				public grdActionsInpatientRow newRowAt(int index, boolean autoSelect)
				{
					return new grdActionsInpatientRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdActionsInpatientGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.enums.InternalReferralStatusAction[] getValues()
				{
					ims.core.vo.enums.InternalReferralStatusAction[] listOfValues = new ims.core.vo.enums.InternalReferralStatusAction[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.enums.InternalReferralStatusAction getValue()
				{
					return (ims.core.vo.enums.InternalReferralStatusAction)super.grid.getValue();
				}
				public void setValue(ims.core.vo.enums.InternalReferralStatusAction value)
				{
					super.grid.setValue(value);
				}
				public grdActionsInpatientRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdActionsInpatientRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdActionsInpatientRowCollection getRows()
				{
					return new grdActionsInpatientRowCollection(super.grid.getRows());
				}
				public grdActionsInpatientRow getRowByValue(ims.core.vo.enums.InternalReferralStatusAction value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdActionsInpatientRow(row);
				}
				public void setColActionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColActionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColAllowHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColAllowHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdActionsOutpatientRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdActionsOutpatientRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColActionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColActionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColActionOpened()
				{
					super.row.showOpened(0);
				}
				public String getColAction()
				{
					return (String)super.row.get(0);
				}
				public void setColAction(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColActionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColAllowReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColAllowReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColAllowOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColAllow()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColAllow(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColAllowTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.enums.InternalReferralStatusAction getValue()
				{
					return (ims.core.vo.enums.InternalReferralStatusAction)super.row.getValue();
				}
				public void setValue(ims.core.vo.enums.InternalReferralStatusAction value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdActionsOutpatientRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdActionsOutpatientRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdActionsOutpatientRow get(int index)
				{
					return new grdActionsOutpatientRow(super.collection.get(index));
				}
				public grdActionsOutpatientRow newRow()
				{
					return new grdActionsOutpatientRow(super.collection.newRow());
				}
				public grdActionsOutpatientRow newRow(boolean autoSelect)
				{
					return new grdActionsOutpatientRow(super.collection.newRow(autoSelect));
				}
				public grdActionsOutpatientRow newRowAt(int index)
				{
					return new grdActionsOutpatientRow(super.collection.newRowAt(index));
				}
				public grdActionsOutpatientRow newRowAt(int index, boolean autoSelect)
				{
					return new grdActionsOutpatientRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdActionsOutpatientGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.enums.InternalReferralStatusAction[] getValues()
				{
					ims.core.vo.enums.InternalReferralStatusAction[] listOfValues = new ims.core.vo.enums.InternalReferralStatusAction[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.enums.InternalReferralStatusAction getValue()
				{
					return (ims.core.vo.enums.InternalReferralStatusAction)super.grid.getValue();
				}
				public void setValue(ims.core.vo.enums.InternalReferralStatusAction value)
				{
					super.grid.setValue(value);
				}
				public grdActionsOutpatientRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdActionsOutpatientRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdActionsOutpatientRowCollection getRows()
				{
					return new grdActionsOutpatientRowCollection(super.grid.getRows());
				}
				public grdActionsOutpatientRow getRowByValue(ims.core.vo.enums.InternalReferralStatusAction value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdActionsOutpatientRow(row);
				}
				public void setColActionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColActionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColAllowHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColAllowHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 539, 64, 154, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Allowed Action - Inpatient", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 124, 64, 168, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Allowed Actions - Outpatient", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 56, 26, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Internal Referral Status:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 736, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 656, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 696, 23, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Configure", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 208, 24, 472, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbInternalReferralStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbInternalReferralStatusTemp);
				cmbInternalReferralStatusComboBox cmbInternalReferralStatus = (cmbInternalReferralStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInternalReferralStatusComboBox.class, m_cmbInternalReferralStatusTemp);
				super.addComboBox(cmbInternalReferralStatus);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 424, 80, 384, 472, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdActionsInpatientTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdActionsInpatientTemp);
				grdActionsInpatientGrid grdActionsInpatient = (grdActionsInpatientGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActionsInpatientGrid.class, m_grdActionsInpatientTemp);
				grdActionsInpatient.addStringColumn("Action", 0, 0, 280, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdActionsInpatient.addBoolColumn("Allow", 0, 0, 100, false, false, 0, true);
				super.addGrid(grdActionsInpatient);
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 384, 472, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdActionsOutpatientTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdActionsOutpatientTemp);
				grdActionsOutpatientGrid grdActionsOutpatient = (grdActionsOutpatientGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActionsOutpatientGrid.class, m_grdActionsOutpatientTemp);
				grdActionsOutpatient.addStringColumn("Action", 0, 0, 280, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdActionsOutpatient.addBoolColumn("Allow", 0, 0, 100, false, false, 0, true);
				super.addGrid(grdActionsOutpatient);
			}

			public Button btnCancelActions()
			{
				return (Button)super.getControl(3);
			}
			public Button btnSaveActions()
			{
				return (Button)super.getControl(4);
			}
			public Button btnEditActions()
			{
				return (Button)super.getControl(5);
			}
			public cmbInternalReferralStatusComboBox cmbInternalReferralStatus()
			{
				return (cmbInternalReferralStatusComboBox)super.getComboBox(0);
			}
			public grdActionsInpatientGrid grdActionsInpatient()
			{
				return (grdActionsInpatientGrid)super.getGrid(0);
			}
			public grdActionsOutpatientGrid grdActionsOutpatient()
			{
				return (grdActionsOutpatientGrid)super.getGrid(1);
			}
		}
		public static class tabPageInternalReferralSettingsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbUrgentBackgroundComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.utils.Color value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.utils.Color value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.utils.Color getValue()
				{
					return (ims.framework.utils.Color)super.control.getValue();
				}
				public void setValue(ims.framework.utils.Color value)
				{
					// should add value if does not exist
					if(value != null && super.control.getValues() != null)
					{
						boolean exist = false;
						for(int x = 0; x < super.control.getValues().size(); x++)
						{
							ims.framework.utils.Color item = (ims.framework.utils.Color)super.control.getValues().get(x);
							if(item != null && item.equals(value))
							{
								exist = true;
								break;
							}
						}
						if(!exist)
						{
							newRow(value, value.getText(), value.getImage());
						}
					}
					super.control.setValue(value);
				}
			}
			public static class cmbNewConditionBackToGPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP getValue()
				{
					return (ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupAllowImportScanRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 304, 176, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper42.getX(), anchoringHelper42.getY(), anchoringHelper42.getWidth(), "No", startTabIndex.intValue() + 35);
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 248, 176, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper43.getX(), anchoringHelper43.getY(), anchoringHelper43.getWidth(), "Yes", startTabIndex.intValue() + 34);
				}
				public void setText(GroupAllowImportScanEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAllowImportScanEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAllowImportScanEnumeration.None;
						case 0: return GroupAllowImportScanEnumeration.rdoNo;
						case 1: return GroupAllowImportScanEnumeration.rdoYes;
					}
					return null;
				}
				public void setValue(GroupAllowImportScanEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAllowImportScanEnumeration.None.id);
				}
				public boolean isEnabled(GroupAllowImportScanEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAllowImportScanEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAllowImportScanEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAllowImportScanEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAllowImportScanEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAllowImportScanEnumeration None = new GroupAllowImportScanEnumeration(-1);
				public static GroupAllowImportScanEnumeration rdoNo = new GroupAllowImportScanEnumeration(0);
				public static GroupAllowImportScanEnumeration rdoYes = new GroupAllowImportScanEnumeration(1);
				private GroupAllowImportScanEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAllowImportScanEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 16, 210, 235, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default search to last 'number' of days : ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 206, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Allow Scan - Import of documents :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 139, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "for Urgent referrals:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 123, 184, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Background colour to be shown", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 90, 196, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Back To GP (Mandatory):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 58, 184, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Back To GP (Optional):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 208, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "New Condition Referral Back To GP:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 736, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 656, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 560, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Settings", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 248, 88, 560, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 248, 56, 560, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 248, 128, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbUrgentBackgroundTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbUrgentBackgroundTemp);
				cmbUrgentBackgroundComboBox cmbUrgentBackground = (cmbUrgentBackgroundComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgentBackgroundComboBox.class, m_cmbUrgentBackgroundTemp);
				super.addComboBox(cmbUrgentBackground);
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 248, 24, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbNewConditionBackToGPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbNewConditionBackToGPTemp);
				cmbNewConditionBackToGPComboBox cmbNewConditionBackToGP = (cmbNewConditionBackToGPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbNewConditionBackToGPComboBox.class, m_cmbNewConditionBackToGPTemp);
				super.addComboBox(cmbNewConditionBackToGP);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 248, 208, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpGroupAllowImportScan = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupAllowImportScan);
				GroupAllowImportScanRadioButton GroupAllowImportScan = (GroupAllowImportScanRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAllowImportScanRadioButton.class, tmpGroupAllowImportScan);
				GroupAllowImportScan.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAllowImportScan);
			}

			public Button btnCancelSettings()
			{
				return (Button)super.getControl(7);
			}
			public Button btnSaveSettings()
			{
				return (Button)super.getControl(8);
			}
			public Button btnEditSettings()
			{
				return (Button)super.getControl(9);
			}
			public TextBox txtReferralBackToGPMandatory()
			{
				return (TextBox)super.getControl(10);
			}
			public TextBox txtReferralBackToGPOptional()
			{
				return (TextBox)super.getControl(11);
			}
			public cmbUrgentBackgroundComboBox cmbUrgentBackground()
			{
				return (cmbUrgentBackgroundComboBox)super.getComboBox(0);
			}
			public cmbNewConditionBackToGPComboBox cmbNewConditionBackToGP()
			{
				return (cmbNewConditionBackToGPComboBox)super.getComboBox(1);
			}
			public IntBox intSearchNumberOfDays()
			{
				return (IntBox)super.getControl(14);
			}
			public GroupAllowImportScanRadioButton GroupAllowImportScan()
			{
				return (GroupAllowImportScanRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageService = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Service Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageServiceContainer m_tabPageServiceContainer = (tabPageServiceContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageServiceContainer.class, m_tabPageService, factory);
			super.addContainer(m_tabPageService, m_tabPageServiceContainer);
			ims.framework.utils.SizeInfo m_tabPageServiceDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageServiceRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper59.getWidth(), anchoringHelper59.getHeight());
			m_tabPageServiceContainer.setContext(form, appForm, m_tabPageService, loader, form_images_local, startControlID, m_tabPageServiceDesignSize, m_tabPageServiceRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageInternalReferralWorkflow = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Internal Referral Workflow", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageInternalReferralWorkflowContainer m_tabPageInternalReferralWorkflowContainer = (tabPageInternalReferralWorkflowContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageInternalReferralWorkflowContainer.class, m_tabPageInternalReferralWorkflow, factory);
			super.addContainer(m_tabPageInternalReferralWorkflow, m_tabPageInternalReferralWorkflowContainer);
			ims.framework.utils.SizeInfo m_tabPageInternalReferralWorkflowDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageInternalReferralWorkflowRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabPageInternalReferralWorkflowContainer.setContext(form, appForm, m_tabPageInternalReferralWorkflow, loader, form_images_local, startControlID, m_tabPageInternalReferralWorkflowDesignSize, m_tabPageInternalReferralWorkflowRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageInternalReferralSettings = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Internal Referral Settings", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageInternalReferralSettingsContainer m_tabPageInternalReferralSettingsContainer = (tabPageInternalReferralSettingsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageInternalReferralSettingsContainer.class, m_tabPageInternalReferralSettings, factory);
			super.addContainer(m_tabPageInternalReferralSettings, m_tabPageInternalReferralSettingsContainer);
			ims.framework.utils.SizeInfo m_tabPageInternalReferralSettingsDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageInternalReferralSettingsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabPageInternalReferralSettingsContainer.setContext(form, appForm, m_tabPageInternalReferralSettings, loader, form_images_local, startControlID, m_tabPageInternalReferralSettingsDesignSize, m_tabPageInternalReferralSettingsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageService().setVisible(false);
			tabPageInternalReferralWorkflow().setVisible(false);
			tabPageInternalReferralSettings().setVisible(false);
		}
		public void settabPageServiceEnabled(boolean value)
		{
			tabPageService().setEnabled(value);
		}
		public void settabPageInternalReferralWorkflowEnabled(boolean value)
		{
			tabPageInternalReferralWorkflow().setEnabled(value);
		}
		public void settabPageInternalReferralSettingsEnabled(boolean value)
		{
			tabPageInternalReferralSettings().setEnabled(value);
		}
		public void showtabPageService()
		{
			tabPageInternalReferralWorkflow().setVisible(false);
			tabPageInternalReferralSettings().setVisible(false);
			tabPageService().setVisible(true);
		}
		public void showtabPageInternalReferralWorkflow()
		{
			tabPageService().setVisible(false);
			tabPageInternalReferralSettings().setVisible(false);
			tabPageInternalReferralWorkflow().setVisible(true);
		}
		public void showtabPageInternalReferralSettings()
		{
			tabPageService().setVisible(false);
			tabPageInternalReferralWorkflow().setVisible(false);
			tabPageInternalReferralSettings().setVisible(true);
		}

		public tabPageServiceContainer tabPageService()
		{
			return (tabPageServiceContainer)super.layers.get(0);
		}
		public tabPageInternalReferralWorkflowContainer tabPageInternalReferralWorkflow()
		{
			return (tabPageInternalReferralWorkflowContainer)super.layers.get(1);
		}
		public tabPageInternalReferralSettingsContainer tabPageInternalReferralSettings()
		{
			return (tabPageInternalReferralSettingsContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrMainLayer m_lyrMainLayer = (lyrMainLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMainLayer.class, this, factory);
		super.addLayer(m_lyrMainLayer);
		m_lyrMainLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMainLayer lyrMain()
	{
		return (lyrMainLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				QuestionSelectNew = new LocalFormName(102182);
			}
			public final FormName QuestionSelectNew;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Minus = new ImageHelper(102118, "Images/Core/minus.gif", new Integer(16), new Integer(16));
				MinusDisabled = new ImageHelper(102119, "Images/Core/minus_disabled.gif", new Integer(16), new Integer(16));
				Plus = new ImageHelper(102116, "Images/Core/plus.gif", new Integer(16), new Integer(16));
				PlusDisabled = new ImageHelper(102117, "Images/Core/plus_disabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Minus;
			public final ims.framework.utils.Image MinusDisabled;
			public final ims.framework.utils.Image Plus;
			public final ims.framework.utils.Image PlusDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedServiceDetails = new ims.framework.ContextVariable("SelectedServiceDetails", prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__SelectedServiceDetails_" + componentIdentifier + "");
			cxl_InternalReferralWorkflow = new ims.framework.ContextVariable("InternalReferralWorkflow", prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralWorkflow_" + componentIdentifier + "");
			cxl_InternalReferralSettings = new ims.framework.ContextVariable("InternalReferralSettings", prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier + "");
		}
		
		public boolean getSelectedServiceDetailsIsNotNull()
		{
			return !cxl_SelectedServiceDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.ServiceConfigIntReferralVo getSelectedServiceDetails()
		{
			return (ims.clinical.vo.ServiceConfigIntReferralVo)cxl_SelectedServiceDetails.getValue(context);
		}
		public void setSelectedServiceDetails(ims.clinical.vo.ServiceConfigIntReferralVo value)
		{
			cxl_SelectedServiceDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedServiceDetails = null;
		public boolean getInternalReferralWorkflowIsNotNull()
		{
			return !cxl_InternalReferralWorkflow.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.WorkflowInternalReferralsVo getInternalReferralWorkflow()
		{
			return (ims.clinicaladmin.vo.WorkflowInternalReferralsVo)cxl_InternalReferralWorkflow.getValue(context);
		}
		public void setInternalReferralWorkflow(ims.clinicaladmin.vo.WorkflowInternalReferralsVo value)
		{
			cxl_InternalReferralWorkflow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InternalReferralWorkflow = null;
		public boolean getInternalReferralSettingsIsNotNull()
		{
			return !cxl_InternalReferralSettings.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.InternalReferralSettingsVo getInternalReferralSettings()
		{
			return (ims.clinicaladmin.vo.InternalReferralSettingsVo)cxl_InternalReferralSettings.getValue(context);
		}
		public void setInternalReferralSettings(ims.clinicaladmin.vo.InternalReferralSettingsVo value)
		{
			cxl_InternalReferralSettings.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InternalReferralSettings = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[158];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__SelectedServiceDetails_" + componentIdentifier, "BO-1028100078-ID", "ID_ServiceConfigIntReferral");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__SelectedServiceDetails_" + componentIdentifier, "BO-1028100078-ACTIVE", "Active");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__SelectedServiceDetails_" + componentIdentifier, "BO-1028100078-REQUIRESHCPAUTHORISATION", "RequiresHcpAuthorisation");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__SelectedServiceDetails_" + componentIdentifier, "BO-1028100078-NONHCPACCEPTANCE", "NonHcpAcceptance");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__SelectedServiceDetails_" + componentIdentifier, "BO-1028100078-NOHCPALLOWEDFORSERVICE", "NoHCPAllowedForService");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__SelectedServiceDetails_" + componentIdentifier, "BO-1028100078-TOOLTIPTEXT", "TooltipText");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralWorkflow_" + componentIdentifier, "BO-1028100080-ID", "ID_WorkflowInternalReferrals");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier, "BO-1073100036-ID", "ID_InternalReferralSettings");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier, "BO-1073100036-NEWCONDITIONREFERRALBACKTOGP", "NewConditionReferralBackToGP");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier, "BO-1073100036-REFERRALBACKTOGPOPTIONALMESSAGE", "ReferralBackToGPOptionalMessage");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier, "BO-1073100036-REFERRALBACKTOGPMANDATORYMESSAGE", "ReferralBackToGPMandatoryMessage");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier, "BO-1073100036-URGENTREFERRALBACKGROUNDCOLOUR", "UrgentReferralBackgroundColour");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier, "BO-1073100036-ALLOWSCANIMPORT", "AllowScanImport");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.InternalReferralModuleConfiguration.__internal_x_context__InternalReferralSettings_" + componentIdentifier, "BO-1073100036-SEARCHNUMBEROFDAYS", "SearchNumberOfDays");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
