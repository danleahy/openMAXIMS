//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.44 build 2245.22719)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.problemsconfig;

import ims.admin.helper.Keywords;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.clinical.vo.ProblemConfigVo;
import ims.clinicaladmin.forms.problemsconfig.GenForm.grdExtCodesRow;
import ims.clinicaladmin.forms.problemsconfig.GenForm.grdKeywordsRow;
import ims.clinicaladmin.forms.problemsconfig.GenForm.grdProblemRow;
import ims.core.vo.KeywordVo;
import ims.core.vo.KeywordVoCollection;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	public void initialize()
	{
		form.setMode(FormMode.VIEW);
		form.txtProbSearch().setFocus();
		setContextMenuTexts();
	}	

	public void open()
	{
	}

	private void setContextMenuTexts()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Taxonomy");		
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Taxonomy");
		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Taxonomy");
	}

	protected void onBtnCancelClick() 
	{
		clearInstanceControls();
		if (form.grdProblem().getSelectedRow() != null)
		{
			setInstanceDetails(form.grdProblem().getSelectedRow().getValue());
		}
		form.setMode(FormMode.VIEW);
	}

	public void clearInstanceControls()
	{
		form.txtProblemName().setValue(null);
		form.chkIsActive().setValue(false);
		form.grdExtCodes().getRows().clear();
		form.grdKeywords().getRows().clear();
	}

	protected void onBtnSaveClick() 
	{
		save();
	}

	private void setInstanceRowDetails(grdProblemRow row, ClinicalProblemShortVo vo)
	{
		row.setcolProblemName(vo.getPCName());		
		row.setValue(vo);			
		if (vo.getIsActiveIsNotNull() && !vo.getIsActive().booleanValue())
		{
			row.setBold(false);
			row.setTextColor(Color.Gray);
		}
		else
		{
			row.setBold(true);
			row.setTextColor(Color.Default);
		}	
	}

	private grdProblemRow newInstanceRow(ClinicalProblemShortVo vo)
	{
		return newInstanceRow(vo, false);
	}
	
	private grdProblemRow newInstanceRow(ClinicalProblemShortVo vo, boolean autoSelect)
	{
		grdProblemRow row = form.grdProblem().getRows().newRow(autoSelect);
		setInstanceRowDetails(row, vo);		
		return row;
	}
	
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	protected void onBtnNewClick() 
	{
		newInstance();
	}

	protected void onGrdProblemSelectionChanged() 
	{
		setInstanceDetails(form.grdProblem().getValue());
	}

	private void setInstanceDetails(ClinicalProblemShortVo value) 
	{
		clearInstanceControls();		
		if (value == null)
			return;

		ProblemConfigVo probDetails = domain.getProblemConfigVo(value);
		
		form.getLocalContext().setProblemDetails(probDetails);			
		form.txtProblemName().setValue(probDetails.getPCName());
			
		if (probDetails.getIsActive() != null)
			form.chkIsActive().setValue(probDetails.getIsActive().booleanValue());			
			
		TaxonomyMapCollection coll = probDetails.getTaxonomyMap();
		if (coll != null)
		{
			form.grdExtCodes().getRows().clear();
				
			grdExtCodesRow row = null;
			for (int i=0; i < coll.size(); i++)
			{
				row = form.grdExtCodes().getRows().newRow();					
				row.setcolExtCodeType(coll.get(i).getTaxonomyName());					
				row.setcolCode(coll.get(i).getTaxonomyCode());					
				row.setValue(coll.get(i));
			}
		}	
		KeywordVoCollection keys = probDetails.getKeywords();
		if (keys != null)
		{
			form.grdKeywords().getRows().clear();
				
			grdKeywordsRow row = null;
			for (int i=0; i < keys.size(); i++)
			{
				row = form.grdKeywords().getRows().newRow();					
				row.setKeyword(keys.get(i).getKeyword());					
				row.setValue(keys.get(i));
			}
		}		
		updateContextMenu();
	}

	private void updateContextMenu() 
	{
		updateControlsState();
	}

	protected void onBtnSearchClick() 
	{
		if (form.txtProbSearch().getValue() == null || form.txtProbSearch().getValue().length() < 3)
		{
			engine.showMessage("Please specify a search name of at least 3 characters");
			return;				
		}
		listProblems(form.txtProbSearch().getValue());
		updateContextMenu();
	}

	private void listProblems(String szSearchCriteria) 
	{		
		form.grdProblem().getRows().clear();
		clearInstanceControls();
				
		ClinicalProblemShortVoCollection rcColl;
		try
		{
			rcColl = domain.listAllProblems(szSearchCriteria);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}		
		if (rcColl.size() == 0) 
		{
			engine.showMessage("No matching Problems found");
			return;
		}

		for (int i = 0; i< rcColl.size(); i++)
		{
			newInstanceRow(rcColl.get(i));
		}
		if (rcColl.size() == 1)
		{
			form.grdProblem().setValue(rcColl.get(0));
			onGrdProblemSelectionChanged();
		}

	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if ( (formName.equals(form.getForms().Core.TaxonomySearch)) && (result.equals(DialogResult.OK)) )
		{
			if(form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
			{
				TaxonomyMap voTaxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
				grdExtCodesRow row = form.grdExtCodes().getRowByValue(voTaxonomyMap);
				if ((row == null) && (form.grdExtCodes().getSelectedRowIndex() >= 0))
					row = form.grdExtCodes().getRows().get(form.grdExtCodes().getSelectedRowIndex());
				else
				{
					engine.showMessage("Please select an External Code row and try again.");
					return;
				}				
				populateTaxonomy(row, voTaxonomyMap);
					
				//Check if the user wants to change the name of the Procedure
				if(!voTaxonomyMap.getDescription().equals(form.txtProblemName().getValue()))
				{
					form.getGlobalContext().Core.setYesNoDialogMessage("Do you want to call the diagnosis - " + voTaxonomyMap.getDescription() + " ?");
					engine.open(form.getForms().Core.YesNoDialog);
				}
				updateContextMenu();
			}
		}
		
		else if ( (formName.equals(form.getForms().Core.YesNoDialog)) && (result.equals(DialogResult.YES)) )
		{
			//Change the name of the Procedure as the one from the Taxonomy Search
			form.txtProblemName().setValue(form.getGlobalContext().Core.getTaxonomyMap().getDescription());
			updateContextMenu();
		}		

	}

	protected void onGrdExtCodesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateContextMenu();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				addTaxonomy();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateTaxonomy();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeTaxonomy();
				break;
			case GenForm.ContextMenus.KeywordAdmin.Add:
				addKeyword();
				updateControlsState();
				break;
			case GenForm.ContextMenus.KeywordAdmin.Remove:
				form.grdKeywords().removeSelectedRow();
				updateControlsState();
				break;
			case GenForm.ContextMenus.KeywordAdmin.MoveUp:
				form.grdKeywords().moveUp();
				updateControlsState();
				break;
			case GenForm.ContextMenus.KeywordAdmin.MoveDown:
				form.grdKeywords().moveDown();
				updateControlsState();
				break;
			case GenForm.ContextMenus.KeywordAdmin.RemoveAll:
				form.grdKeywords().getRows().clear();
				updateControlsState();
				break;
			case GenForm.ContextMenus.KeywordAdmin.Restore:
				setDefaultKeywords();
				updateControlsState();
				break;				
		}		
		
	}

	private void setDefaultKeywords()
	{
		form.grdKeywords().getRows().clear();
		String[] keys = Keywords.generateKeywords(form.txtProblemName().getValue());
		for (int i = 0; i < keys.length; i++)
		{
			grdKeywordsRow row = form.grdKeywords().getRows().newRow();
			row.setValue(new KeywordVo());
			row.setKeyword(keys[i]);
		}
	}

	private void addKeyword()
	{
		form.grdKeywords().getRows().newRow(true).setValue(new KeywordVo());
		updateContextMenu();
	}

	protected void onFormModeChanged()
	{
		updateContextMenu();
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.txtProblemName().setEnabled(form.getLocalContext().getProblemDetailsIsNotNull() &&		
				form.getLocalContext().getProblemDetails().getID_ClinicalProblem() == null);
		}
		
	}

	private void addTaxonomy() 
	{
		form.grdExtCodes().getRows().newRow(true).setValue(new TaxonomyMap());
		updateContextMenu();
	}

	private void populateTaxonomy(grdExtCodesRow row, TaxonomyMap voTaxonomyMap) 
	{
		if(row != null && voTaxonomyMap != null)
		{
			row.setcolExtCodeType(voTaxonomyMap.getTaxonomyName());
			row.setcolCode(voTaxonomyMap.getTaxonomyCode());
			row.setValue(voTaxonomyMap);
		}		
	}	

	private void updateTaxonomy()
	{
		if (form.grdExtCodes().getSelectedRow() != null)
			taxonomySearch(form.grdExtCodes().getSelectedRow());
	}

	private void removeTaxonomy() 
	{
		form.grdExtCodes().removeSelectedRow();
		updateContextMenu();
	}
	
	protected void onGrdExternalGridButtonClicked(int column, grdExtCodesRow row) 
	{
		if(form.getMode().equals(FormMode.EDIT))
			taxonomySearch(row);
	}
		
	private void taxonomySearch(grdExtCodesRow row) 
	{
		if(row.getcolExtCodeType() == null)
		{
			engine.showMessage("Please select External Code Type");
			return;
		}
		
		form.grdExtCodes().setValue(row.getValue());
		
		form.getGlobalContext().Core.setTaxonomySearchForName(form.txtProblemName().getValue());
		TaxonomyMap voTaxonomyMap = form.grdExtCodes().getValue();
		if(voTaxonomyMap == null)
			voTaxonomyMap = new TaxonomyMap();
		
		voTaxonomyMap.setTaxonomyName(row.getcolExtCodeType());
		voTaxonomyMap.setTaxonomyCode(row.getcolCode());
		
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomyMap);		
		engine.open(form.getForms().Core.TaxonomySearch);		
	}

	protected void onGrdKeywordsSelectionChanged() throws PresentationLogicException
	{
		updateContextMenu();
	}

	public void newInstance()
	{
		String searchString = form.txtProbSearch().getValue();
		form.getLocalContext().setProblemDetails(new ProblemConfigVo());
		form.setMode(FormMode.EDIT);
		clearInstanceControls();
		form.chkIsActive().setValue(true);		
		form.txtProblemName().setValue(searchString);
		if (form.grdProblem().getRows().size() > 0)
			form.txtProblemName().setValue(null);
		form.txtProblemName().setFocus();
		form.grdProblem().setValue(null);		
	}

	public boolean save()
	{
		ProblemConfigVo voProblem = form.getLocalContext().getProblemDetails();
		if (voProblem == null) voProblem = new ProblemConfigVo();

		voProblem.setPCName(form.txtProblemName().getValue());
		voProblem.setIsActive(new Boolean(form.chkIsActive().getValue()));
		
		TaxonomyMapCollection voCollTaxonomyMapCollection = new TaxonomyMapCollection();
		for (int i = 0; i < form.grdExtCodes().getRows().size(); i++)
		{
			grdExtCodesRow row = form.grdExtCodes().getRows().get(i);
			TaxonomyMap voTaxonomyMap = row.getValue() != null?row.getValue():new TaxonomyMap();
			voTaxonomyMap.setTaxonomyCode(row.getcolCode());
			voTaxonomyMap.setTaxonomyName(row.getcolExtCodeType());
			voCollTaxonomyMapCollection.add(voTaxonomyMap);
		}
		//Set Back the TaxonomyMap Collection
		voProblem.setTaxonomyMap(voCollTaxonomyMapCollection);

		KeywordVoCollection coll =  new KeywordVoCollection();
		for (int i = 0; i < form.grdKeywords().getRows().size(); i++)
		{
			grdKeywordsRow row = form.grdKeywords().getRows().get(i);
			KeywordVo vo = row.getValue();
			if (vo == null)
				vo = new KeywordVo();
			if (row.getKeyword() == null || row.getKeyword().equals(""))
				continue;
			
			vo.setKeyword(row.getKeyword());
			coll.add(vo);
		}
		voProblem.setKeywords(coll);
		
		String[] arrErrors = voProblem.validate();
		if(arrErrors != null)
		{
			engine.showErrors("Validation Errors", arrErrors);
			return false;
		}
		
		try
		{
			voProblem = domain.saveProblemConfig(voProblem);
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			onBtnCancelClick();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		} 

		grdProblemRow row = form.grdProblem().getRowByValue(voProblem);		
		if (row == null)
		{
			form.txtProbSearch().setValue(null);
			form.grdProblem().getRows().clear();
			newInstanceRow(voProblem, true);
		}
		else
		{
			setInstanceRowDetails(row, voProblem);
		}
		form.setMode(FormMode.VIEW);
		setInstanceDetails(voProblem);		
		return true;
	}

	public void updateControlsState()
	{
		boolean editMode  = form.getMode().equals(FormMode.EDIT);
		boolean editable  = form.grdExtCodes().getValue() != null && editMode;
		boolean removable = form.grdExtCodes().getSelectedRowIndex()>=0 && editMode;
		
		form.getContextMenus().getGenericGridAddItem().setVisible(editMode);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(editable);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(removable);
		
		boolean keywordSelected = (form.grdKeywords().getSelectedRow() != null);
		form.getContextMenus().getKeywordAdminAddItem().setVisible(editMode);
		form.getContextMenus().getKeywordAdminMoveDownItem().setVisible(editMode && form.grdKeywords().canMoveCurrentDown());
		form.getContextMenus().getKeywordAdminMoveUpItem().setVisible(editMode && form.grdKeywords().canMoveCurrentUp());
		form.getContextMenus().getKeywordAdminRemoveAllItem().setVisible(editMode && form.grdKeywords().getRows().size() > 0);

		form.getContextMenus().getKeywordAdminRestoreItem().setVisible(editMode && form.txtProblemName().getValue() != null);
		if (form.getLocalContext().getProblemDetails() != null && form.getLocalContext().getProblemDetails().getID_ClinicalProblem() != null)
			form.getContextMenus().getKeywordAdminRestoreItem().setText("Restore defaults");
		else
			form.getContextMenus().getKeywordAdminRestoreItem().setText("Set to default");
		
		form.getContextMenus().getKeywordAdminRemoveItem().setVisible(editMode && keywordSelected);

		if(form.getMode().equals(FormMode.VIEW))
		{
			// sets the update button to be enabled if there is a record selected
			form.btnUpdate().setVisible(true);			
			form.btnUpdate().setEnabled(form.grdProblem().getSelectedRow() != null);
		}		
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
}
