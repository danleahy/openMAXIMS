//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.divisionaldiagnosesselectiondialog;

import java.util.ArrayList;

import ims.clinicaladmin.forms.divisionaldiagnosesselectiondialog.GenForm.grdAvailableDiagnosisRow;
import ims.clinicaladmin.forms.divisionaldiagnosesselectiondialog.GenForm.grdSelectedDiagnosisRow;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.DivisionalDiagnosesVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open()
	{
		populateScreen();

	}

	private void populateScreen()
	{
		DivisionalDiagnosesVo record = form.getGlobalContext().ClinicalAdmin.getDivisionalDiagnoses();

		form.lblDivisionName().setValue(record.getDivision() != null ? "Division: " + record.getDivision().getText() : "");

		//populateAvailableDiagnosesGrid(record.getDiagnoses()); //WDEV-19273
		populateSelectedDiagnosesGrid(record.getDiagnoses());

		updateControlsState();

	}

	private void populateAvailableDiagnosesGrid(DiagLiteVoCollection diagosesToExclude)
	{
		form.grdAvailableDiagnosis().getRows().clear();
		DiagLiteVoCollection dignosesList = getAvailableDiagnoses(diagosesToExclude, form.txtDiagName().getValue()); //WDEV-19273 

		if (dignosesList == null || dignosesList.size() == 0)
		{
			engine.showMessage("No records matching your search criteria were found!", "No results",MessageButtons.OK, MessageIcon.INFORMATION);//WDEV-19273 
			return;
		}

		for (int i = 0; i < dignosesList.size(); i++)
		{
			grdAvailableDiagnosisRow newRow = form.grdAvailableDiagnosis().getRows().newRow();
			newRow.setColDiagnosis(dignosesList.get(i).getDiagnosisName());
			newRow.setColSelect(Boolean.FALSE);
			newRow.setValue(dignosesList.get(i));
			newRow.setTooltipForColDiagnosis(dignosesList.get(i).getDiagnosisName());
		}

	}

	private DiagLiteVoCollection getAvailableDiagnoses(DiagLiteVoCollection diagosesToExclude, String name)
	{
		String ids = "";

		for (int i = 0; diagosesToExclude != null && i < diagosesToExclude.size(); i++)
		{
			if (ids == "")
			{
				ids = diagosesToExclude.get(i).getID_Diagnosis().toString();
			}
			else
			{
				ids = ids + ", " + diagosesToExclude.get(i).getID_Diagnosis().toString();
			}
		}

		DiagLiteVoCollection dignosesList = domain.getDiagnoses(ids, name);
		return dignosesList;
	}

	private void populateSelectedDiagnosesGrid(DiagLiteVoCollection diagoses)
	{
		form.grdSelectedDiagnosis().getRows().clear();

		if (diagoses == null || diagoses.size() == 0)
			return;

		for (int i = 0; i < diagoses.size(); i++)
		{
			grdSelectedDiagnosisRow newRow = form.grdSelectedDiagnosis().getRows().newRow();
			newRow.setColDiagnosis(diagoses.get(i).getDiagnosisName());
			newRow.setColSelect(Boolean.FALSE);
			newRow.setValue(diagoses.get(i));
			
			if (!Boolean.TRUE.equals(diagoses.get(i).getIsActive()))
			{
				newRow.setTextColor(Color.Gray);
			}
			
			newRow.setTooltipForColDiagnosis(diagoses.get(i).getDiagnosisName());
		}
	}

	@Override
	protected void onImbRemoveClick() throws ims.framework.exceptions.PresentationLogicException
	{

		DiagLiteVoCollection remainingDiagnoses = new DiagLiteVoCollection();

		for (int i = 0; i < form.grdSelectedDiagnosis().getRows().size(); i++)
		{
			if (Boolean.FALSE.equals(form.grdSelectedDiagnosis().getRows().get(i).getColSelect()))
				remainingDiagnoses.add(form.grdSelectedDiagnosis().getRows().get(i).getValue());
		}

		populateSelectedDiagnosesGrid(remainingDiagnoses);
		if (form.txtDiagName().getValue() != null)
			populateAvailableDiagnosesGrid(form.grdSelectedDiagnosis().getValues()); //WDEV-19273 

		updateControlsState();
	}

	@Override
	protected void onImbAddClick() throws ims.framework.exceptions.PresentationLogicException
	{

		DiagLiteVoCollection diagnosesToBeAdded = new DiagLiteVoCollection();

		for (int i = 0; i < form.grdAvailableDiagnosis().getRows().size(); i++)
		{
			if (Boolean.TRUE.equals(form.grdAvailableDiagnosis().getRows().get(i).getColSelect()))
				diagnosesToBeAdded.add(form.grdAvailableDiagnosis().getRows().get(i).getValue());
		}

		addDignosesToSelectedDiagnosesGrid(diagnosesToBeAdded);
		populateAvailableDiagnosesGrid(form.grdSelectedDiagnosis().getValues());

		updateControlsState();
	}

	private void addDignosesToSelectedDiagnosesGrid(DiagLiteVoCollection diagnosesToBeAdded)
	{
		if (diagnosesToBeAdded == null || diagnosesToBeAdded.size() == 0)
			return;

		for (int i = 0; i < diagnosesToBeAdded.size(); i++)
		{
			grdSelectedDiagnosisRow newRow = form.grdSelectedDiagnosis().getRows().newRow();
			newRow.setColDiagnosis(diagnosesToBeAdded.get(i).getDiagnosisName());
			newRow.setColSelect(Boolean.FALSE);
			newRow.setValue(diagnosesToBeAdded.get(i));
			newRow.setTooltipForColDiagnosis(diagnosesToBeAdded.get(i).getDiagnosisName());
		}

	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().ClinicalAdmin.getDivisionalDiagnoses().setDiagnoses(form.grdSelectedDiagnosis().getValues());
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onGrdSelectedDiagnosisGridCheckBoxClicked(int column, GenForm.grdSelectedDiagnosisRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.imbAdd().setEnabled(atLeastOneValueWasSelectedToAdd());
		form.imbRemove().setEnabled(atLeastOneValueWasSelectedToRemove());
	}

	private boolean atLeastOneValueWasSelectedToAdd()
	{
		for (int i = 0; i < form.grdAvailableDiagnosis().getRows().size(); i++)
		{
			if (Boolean.TRUE.equals(form.grdAvailableDiagnosis().getRows().get(i).getColSelect()))
				return true;
		}

		return false;
	}

	private boolean atLeastOneValueWasSelectedToRemove()
	{
		for (int i = 0; i < form.grdSelectedDiagnosis().getRows().size(); i++)
		{
			if (Boolean.TRUE.equals(form.grdSelectedDiagnosis().getRows().get(i).getColSelect()))
				return true;
		}

		return false;
	}

	@Override
	protected void onGrdAvailableDiagnosisGridCheckBoxClicked(int column, GenForm.grdAvailableDiagnosisRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException 
	{
		form.txtDiagName().setValue(null);
		form.grdAvailableDiagnosis().getRows().clear();		
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException 
	{
		if(isSearchCriteriaValid())
			populateAvailableDiagnosesGrid(form.grdSelectedDiagnosis().getValues());
	}

	private boolean isSearchCriteriaValid() 
	{

		ArrayList<String> errorList = new ArrayList<String>();
		
		if (form.txtDiagName().getValue() == null)
		{
			errorList.add("Diagnosis Search is mandatory");
		}

		
		if (errorList != null && errorList.size() > 0)
		{
			engine.showErrors(errorList.toArray(new String[errorList.size()]));
			form.grdAvailableDiagnosis().getRows().clear();
			return false;
		}
		
		return true;
	}

}
