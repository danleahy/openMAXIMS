//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.domain.impl;

import java.util.ArrayList;

import ims.clinical.configuration.domain.objects.InternalReferralSettings;
import ims.clinical.configuration.domain.objects.ServiceConfigIntReferral;
import ims.clinical.configuration.domain.objects.WorkflowInternalReferrals;
import ims.clinical.configuration.vo.ServiceConfigIntReferralRefVo;
import ims.clinical.vo.ServiceConfigIntReferralLiteVoCollection;
import ims.clinical.vo.ServiceConfigIntReferralVo;
import ims.clinical.vo.domain.ServiceConfigIntReferralLiteVoAssembler;
import ims.clinical.vo.domain.ServiceConfigIntReferralVoAssembler;
import ims.clinicaladmin.domain.base.impl.BaseInternalReferralModuleConfigurationImpl;
import ims.clinicaladmin.vo.InternalReferralSettingsVo;
import ims.clinicaladmin.vo.WorkflowInternalReferralsVo;
import ims.clinicaladmin.vo.domain.InternalReferralSettingsVoAssembler;
import ims.clinicaladmin.vo.domain.WorkflowInternalReferralsVoAssembler;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;

public class InternalReferralModuleConfigurationImpl extends BaseInternalReferralModuleConfigurationImpl
{
	private static final long serialVersionUID = 1L;

	
	public ServiceConfigIntReferralLiteVoCollection listServicesConfigReferral(String serviceName, Boolean activeOnly)
	{
		if (serviceName == null || serviceName.length() == 0)
			throw new CodingRuntimeException("Service name is mandatory for search");
		
		StringBuilder query = new StringBuilder("SELECT servConf FROM ServiceConfigIntReferral AS servConf LEFT JOIN servConf.service AS serv ");
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("WHERE serv.upperName LIKE :SRV_NAME"); //WDEV-20219 UPPER(serv.serviceName)
		paramNames.add("SRV_NAME");
		paramValues.add(serviceName.toUpperCase() + '%');
		
		if (Boolean.TRUE.equals(activeOnly))
		{
    		query.append(" AND servConf.active = 1");
		}
		
		query.append(" ORDER BY serv.upperName"); //WDEV-20219 UPPER(serv.serviceName)
		
		return ServiceConfigIntReferralLiteVoAssembler.createServiceConfigIntReferralLiteVoCollectionFromServiceConfigIntReferral(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	
	public ServiceConfigIntReferralVo getServiceConfigReferral(ServiceConfigIntReferralRefVo service)
	{
		if (service == null || service.getID_ServiceConfigIntReferral() == null)
			return null;
		
		return ServiceConfigIntReferralVoAssembler.create((ServiceConfigIntReferral) getDomainFactory().getDomainObject(ServiceConfigIntReferral.class, service.getID_ServiceConfigIntReferral()));
	}

	
	public ServiceConfigIntReferralVo saveServiceConfigReferral(ServiceConfigIntReferralVo service) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (service == null)
			throw new CodingRuntimeException("Value to save cannot be null.");
		
		if (!service.isValidated())
			throw new CodingRuntimeException("Value to save has to be validate.");
		
		ServiceConfigIntReferral domServiceConfig = ServiceConfigIntReferralVoAssembler.extractServiceConfigIntReferral(getDomainFactory(), service);
		getDomainFactory().save(domServiceConfig);

		return ServiceConfigIntReferralVoAssembler.create(domServiceConfig);
	}

	public ServiceLiteVoCollection listClinicalServices(String serviceName) throws DomainInterfaceException
	{
		if (serviceName == null || serviceName.length() == 0)
			throw new DomainInterfaceException("Service name is mandatory for search.");
		
		StringBuilder query = new StringBuilder("SELECT srv FROM Service AS srv");
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append(" WHERE srv.upperName LIKE :SRV_NAME AND srv.serviceCategory.id = :CLINICAL AND srv.isActive = 1"); //WDEV-20219 UPPER(srv.serviceName)
		paramNames.add("SRV_NAME");
		paramValues.add(serviceName.toUpperCase() + '%');
		paramNames.add("CLINICAL");
		paramValues.add(ServiceCategory.CLINICAL.getID());
		
		query.append(" ORDER BY srv.upperName"); //WDEV-20219 UPPER(srv.serviceName)

		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}


	public WorkflowInternalReferralsVo getInternalReferralWorkflow()
	{
		String query = "SELECT workflow FROM WorkflowInternalReferrals AS workflow";
		return WorkflowInternalReferralsVoAssembler.create((WorkflowInternalReferrals) getDomainFactory().findFirst(query));
	}
	
	
	public InternalReferralSettingsVo getInternalReferralSettings()
	{
		String query = "SELECT settings FROM InternalReferralSettings AS settings";
		return InternalReferralSettingsVoAssembler.create((InternalReferralSettings) getDomainFactory().findFirst(query));
	}
	

	public WorkflowInternalReferralsVo saveInternalReferralWorkflow(WorkflowInternalReferralsVo internalReferralAction) throws DomainInterfaceException, StaleObjectException
	{
		if (internalReferralAction == null)
			throw new CodingRuntimeException("Value to save cannot be null.");
		
		if (!internalReferralAction.isValidated())
			throw new CodingRuntimeException("Value to save has to be validated.");

		WorkflowInternalReferrals workflowInternalReferral = WorkflowInternalReferralsVoAssembler.extractWorkflowInternalReferrals(getDomainFactory(), internalReferralAction);
		getDomainFactory().save(workflowInternalReferral);
		
		return WorkflowInternalReferralsVoAssembler.create(workflowInternalReferral);
	}


	public InternalReferralSettingsVo saveInternalReferralSettings(InternalReferralSettingsVo referralSettings) throws DomainInterfaceException, StaleObjectException
	{
		if (referralSettings == null)
			throw new CodingRuntimeException("Value to save cannot be null.");
		
		if (!referralSettings.isValidated())
			throw new CodingRuntimeException("Value to save has to be validated.");
		
		
		InternalReferralSettings domReferralSettings = InternalReferralSettingsVoAssembler.extractInternalReferralSettings(getDomainFactory(), referralSettings);
		getDomainFactory().save(domReferralSettings);

		return InternalReferralSettingsVoAssembler.create(domReferralSettings);
	}
	

	public Boolean hasActiveRecordForService(ServiceRefVo serviceType, ServiceConfigIntReferralRefVo referralServiceConfig)
	{
		StringBuilder query = new StringBuilder("SELECT COUNT(servConf.id) FROM ServiceConfigIntReferral AS servConf LEFT JOIN servConf.service AS serv ");

		if (referralServiceConfig != null && referralServiceConfig.getID_ServiceConfigIntReferral() != null)
		{
			query.append("WHERE serv.id = :ID_SERV AND servConf.active = 1 AND servConf.id != :ID_CONF_SRV");


			long count = getDomainFactory().countWithHQL(query.toString(), new String[] {"ID_SERV", "ID_CONF_SRV"}, new Object[] {serviceType.getID_Service(), referralServiceConfig.getID_ServiceConfigIntReferral()});

			if (count > 0)
				return Boolean.TRUE;
		}
		else
		{
			query.append("WHERE serv.id = :ID_SERV AND servConf.active = 1");
			long count = getDomainFactory().countWithHQL(query.toString(), new String[] {"ID_SERV"}, new Object[] {serviceType.getID_Service()});
			
			if (count > 0)
				return Boolean.TRUE;
		}
		
		return Boolean.FALSE;
	}
}
