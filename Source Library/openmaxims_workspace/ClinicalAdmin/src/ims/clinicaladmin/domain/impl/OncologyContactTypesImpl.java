//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3847.19721)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.domain.impl;

import ims.clinicaladmin.domain.base.impl.BaseOncologyContactTypesImpl;
import ims.domain.DomainFactory;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.domain.objects.ContactTypesByDiscipline;
import ims.oncology.domain.objects.ContactTypesByDisciplineItem;
import ims.oncology.vo.ContactTypesByDisciplineItemRefVo;
import ims.oncology.vo.ContactTypesByDisciplineItemVo;
import ims.oncology.vo.domain.ContactTypesByDisciplineItemVoAssembler;
import ims.oncology.vo.domain.ContactTypesByDisciplineVoAssembler;

public class OncologyContactTypesImpl extends BaseOncologyContactTypesImpl
{

	private static final long serialVersionUID = 1L;

	public ims.oncology.vo.ContactTypesByDisciplineVo getContactTypeByDiscipline(ims.oncology.vo.ContactTypesByDisciplineRefVo voTypeRef)
	{
		DomainFactory factory = getDomainFactory();
		return ContactTypesByDisciplineVoAssembler.create((ContactTypesByDiscipline)factory.getDomainObject((ContactTypesByDiscipline.class), voTypeRef.getID_ContactTypesByDiscipline()));
	}

	public ims.oncology.vo.ContactTypesByDisciplineVo saveContactTypeByDiscipline(ims.oncology.vo.ContactTypesByDisciplineVo voContact) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException
	{
		if(voContact == null)
			throw new CodingRuntimeException("Cannot save null ContactTypesByDiscipline");
		
		if (!voContact.isValidated())
			throw new CodingRuntimeException("ContactTypesByDiscipline has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		ContactTypesByDiscipline doCC = ContactTypesByDisciplineVoAssembler.extractContactTypesByDiscipline(factory, voContact);
		
		try
		{
			factory.save(doCC);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("A Contact Type with the same code mapping exists.");
		}
		
		return (ContactTypesByDisciplineVoAssembler.create(doCC));		
	}

	public ims.oncology.vo.ContactTypesByDisciplineVoCollection listContactTypesByDiscipline()
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = " from ContactTypesByDiscipline "; 
		return ContactTypesByDisciplineVoAssembler.createContactTypesByDisciplineVoCollectionFromContactTypesByDiscipline(factory.find(hql,3000));
	}

	//WDEV-20381
	@Override
	public ContactTypesByDisciplineItemVo getContactTypesByDisciplineItem(ContactTypesByDisciplineItemRefVo contacTypeRefVo) {
		
		return ContactTypesByDisciplineItemVoAssembler.create((ContactTypesByDisciplineItem)getDomainFactory().getDomainObject((ContactTypesByDisciplineItem.class),contacTypeRefVo.getID_ContactTypesByDisciplineItem()));
	}
}
