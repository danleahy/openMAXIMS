//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.medconcernonadmis;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		SpinalInjuries = new SpinalInjuriesContext(context);
		Core = new CoreContext(context);
	}
	public final class SpinalInjuriesContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private SpinalInjuriesContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientConcernIsNotNull()
		{
			return !cx_SpinalInjuriesPatientConcern.getValueIsNull(context);
		}
		public ims.core.vo.PatientCurrentConcernVo getPatientConcern()
		{
			return (ims.core.vo.PatientCurrentConcernVo)cx_SpinalInjuriesPatientConcern.getValue(context);
		}
		public void setPatientConcern(ims.core.vo.PatientCurrentConcernVo value)
		{
			cx_SpinalInjuriesPatientConcern.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SpinalInjuriesPatientConcern = new ims.framework.ContextVariable("SpinalInjuries.PatientConcern", "_cv_SpinalInjuries.PatientConcern");
		public boolean getViewRecordIsNotNull()
		{
			return !cx_SpinalInjuriesViewRecord.getValueIsNull(context);
		}
		public Boolean getViewRecord()
		{
			return (Boolean)cx_SpinalInjuriesViewRecord.getValue(context);
		}
		public void setViewRecord(Boolean value)
		{
			cx_SpinalInjuriesViewRecord.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SpinalInjuriesViewRecord = new ims.framework.ContextVariable("SpinalInjuries.ViewRecord", "_cv_SpinalInjuries.ViewRecord");
		public boolean getMedConcernOnAdmisSearchCriteriaIsNotNull()
		{
			return !cx_SpinalInjuriesMedConcernOnAdmisSearchCriteria.getValueIsNull(context);
		}
		public ims.spinalinjuries.vo.MedConcernOnAdmisSearchCriteriaVo getMedConcernOnAdmisSearchCriteria()
		{
			return (ims.spinalinjuries.vo.MedConcernOnAdmisSearchCriteriaVo)cx_SpinalInjuriesMedConcernOnAdmisSearchCriteria.getValue(context);
		}
		public void setMedConcernOnAdmisSearchCriteria(ims.spinalinjuries.vo.MedConcernOnAdmisSearchCriteriaVo value)
		{
			cx_SpinalInjuriesMedConcernOnAdmisSearchCriteria.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SpinalInjuriesMedConcernOnAdmisSearchCriteria = new ims.framework.ContextVariable("SpinalInjuries.MedConcernOnAdmisSearchCriteria", "_cvp_SpinalInjuries.MedConcernOnAdmisSearchCriteria");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		private ims.framework.Context context;
	}

	public SpinalInjuriesContext SpinalInjuries;
	public CoreContext Core;
}
