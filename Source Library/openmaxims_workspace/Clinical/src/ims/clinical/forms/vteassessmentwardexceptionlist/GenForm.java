//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.vteassessmentwardexceptionlist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabWardSpecContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSpecialtiesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSpecialtiesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSpecialtyReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSpecialtyOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSpecialty()
				{
					return (String)super.row.get(0);
				}
				public void setColSpecialty(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSpecialtyTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColNotRequiredReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColNotRequiredReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColNotRequiredOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColNotRequired()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColNotRequired(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColNotRequiredTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.row.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSpecialtiesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSpecialtiesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSpecialtiesRow get(int index)
				{
					return new grdSpecialtiesRow(super.collection.get(index));
				}
				public grdSpecialtiesRow newRow()
				{
					return new grdSpecialtiesRow(super.collection.newRow());
				}
				public grdSpecialtiesRow newRow(boolean autoSelect)
				{
					return new grdSpecialtiesRow(super.collection.newRow(autoSelect));
				}
				public grdSpecialtiesRow newRowAt(int index)
				{
					return new grdSpecialtiesRow(super.collection.newRowAt(index));
				}
				public grdSpecialtiesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSpecialtiesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSpecialtiesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.lookups.Specialty[] getValues()
				{
					ims.core.vo.lookups.Specialty[] listOfValues = new ims.core.vo.lookups.Specialty[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.grid.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.grid.setValue(value);
				}
				public grdSpecialtiesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSpecialtiesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSpecialtiesRowCollection getRows()
				{
					return new grdSpecialtiesRowCollection(super.grid.getRows());
				}
				public grdSpecialtiesRow getRowByValue(ims.core.vo.lookups.Specialty value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSpecialtiesRow(row);
				}
				public void setColSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColNotRequiredHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColNotRequiredHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdWardsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdWardsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColWardReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColWardReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColWardOpened()
				{
					super.row.showOpened(0);
				}
				public String getColWard()
				{
					return (String)super.row.get(0);
				}
				public void setColWard(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColWardTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColNotRequiredReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColNotRequiredReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColNotRequiredOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColNotRequired()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColNotRequired(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColNotRequiredTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.LocationForVTEAssessmentVo getValue()
				{
					return (ims.core.vo.LocationForVTEAssessmentVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.LocationForVTEAssessmentVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdWardsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdWardsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdWardsRow get(int index)
				{
					return new grdWardsRow(super.collection.get(index));
				}
				public grdWardsRow newRow()
				{
					return new grdWardsRow(super.collection.newRow());
				}
				public grdWardsRow newRow(boolean autoSelect)
				{
					return new grdWardsRow(super.collection.newRow(autoSelect));
				}
				public grdWardsRow newRowAt(int index)
				{
					return new grdWardsRow(super.collection.newRowAt(index));
				}
				public grdWardsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdWardsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdWardsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.LocationForVTEAssessmentVoCollection getValues()
				{
					ims.core.vo.LocationForVTEAssessmentVoCollection listOfValues = new ims.core.vo.LocationForVTEAssessmentVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.LocationForVTEAssessmentVo getValue()
				{
					return (ims.core.vo.LocationForVTEAssessmentVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.LocationForVTEAssessmentVo value)
				{
					super.grid.setValue(value);
				}
				public grdWardsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdWardsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdWardsRowCollection getRows()
				{
					return new grdWardsRowCollection(super.grid.getRows());
				}
				public grdWardsRow getRowByValue(ims.core.vo.LocationForVTEAssessmentVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdWardsRow(row);
				}
				public void setColWardHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColWardHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColNotRequiredHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColNotRequiredHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 168, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSpecialtiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuVTEConfigSpecialtyCM, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSpecialtiesTemp);
				grdSpecialtiesGrid grdSpecialties = (grdSpecialtiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialtiesGrid.class, m_grdSpecialtiesTemp);
				grdSpecialties.addStringColumn("Specialty", 0, 0, 630, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSpecialties.addBoolColumn("VTE Assessment Not Required", 1, 1, -1, true, false, 0, true);
				super.addGrid(grdSpecialties);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 192, 808, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdWardsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuVTEConfigWardCM, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdWardsTemp);
				grdWardsGrid grdWards = (grdWardsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWardsGrid.class, m_grdWardsTemp);
				grdWards.addStringColumn("Ward", 0, 0, 630, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWards.addBoolColumn("VTE Assessment Not Required", 1, 1, -1, true, false, 0, true);
				super.addGrid(grdWards);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 376, 808, 176, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCM, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
			}

			public grdSpecialtiesGrid grdSpecialties()
			{
				return (grdSpecialtiesGrid)super.getGrid(0);
			}
			public grdWardsGrid grdWards()
			{
				return (grdWardsGrid)super.getGrid(1);
			}
			public DynamicGrid dyngrdWardSpecialty()
			{
				return (DynamicGrid)super.getControl(2);
			}
		}
		public static class tabColourConfigContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 11, 72, 175, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Worklist colour configuration:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 11, 32, 179, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No. of Days eVTE Pre-Op valid:", new Integer(1), null, new Integer(0)}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 184, 72, 632, 232, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Clinical.contextMenuVTEColourConfigCM, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 184, 30, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(3)}));
			}

			public DynamicGrid dyngrdColourConfig()
			{
				return (DynamicGrid)super.getControl(2);
			}
			public IntBox intNoOfDays()
			{
				return (IntBox)super.getControl(3);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabWardSpec = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Wards/Specialties that will not require a VTE Risk Assessment ", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabWardSpecContainer m_tabWardSpecContainer = (tabWardSpecContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabWardSpecContainer.class, m_tabWardSpec, factory);
			super.addContainer(m_tabWardSpec, m_tabWardSpecContainer);
			ims.framework.utils.SizeInfo m_tabWardSpecDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabWardSpecRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabWardSpecContainer.setContext(form, appForm, m_tabWardSpec, loader, form_images_local, contextMenus, startControlID, m_tabWardSpecDesignSize, m_tabWardSpecRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabColourConfig = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Colour Configuration", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabColourConfigContainer m_tabColourConfigContainer = (tabColourConfigContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabColourConfigContainer.class, m_tabColourConfig, factory);
			super.addContainer(m_tabColourConfig, m_tabColourConfigContainer);
			ims.framework.utils.SizeInfo m_tabColourConfigDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabColourConfigRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabColourConfigContainer.setContext(form, appForm, m_tabColourConfig, loader, form_images_local, contextMenus, startControlID, m_tabColourConfigDesignSize, m_tabColourConfigRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabWardSpec().setVisible(false);
			tabColourConfig().setVisible(false);
		}
		public void settabWardSpecEnabled(boolean value)
		{
			tabWardSpec().setEnabled(value);
		}
		public void settabColourConfigEnabled(boolean value)
		{
			tabColourConfig().setEnabled(value);
		}
		public void showtabWardSpec()
		{
			tabColourConfig().setVisible(false);
			tabWardSpec().setVisible(true);
		}
		public void showtabColourConfig()
		{
			tabWardSpec().setVisible(false);
			tabColourConfig().setVisible(true);
		}

		public tabWardSpecContainer tabWardSpec()
		{
			return (tabWardSpecContainer)super.layers.get(0);
		}
		public tabColourConfigContainer tabColourConfig()
		{
			return (tabColourConfigContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCM = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMADD_WARDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Ward", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5830001)))
			contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCM.add(contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMADD_WARDItem);
		contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMADD_SPECIALTYItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Specialty", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5830002)))
			contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCM.add(contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMADD_SPECIALTYItem);
		contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMREMOVE_WARDItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove Ward", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5830003)))
			contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCM.add(contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMREMOVE_WARDItem);
		contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Specialty", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5830004)))
			contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCM.add(contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem);
		form.registerMenu(contextMenus.Clinical.contextMenuVTEConfigWardSpecialtyCM);
		contextMenus.Clinical.contextMenuVTEConfigSpecialtyCM = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuVTEConfigSpecialtyCMADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Specialty", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5820001)))
			contextMenus.Clinical.contextMenuVTEConfigSpecialtyCM.add(contextMenus.Clinical.contextMenuVTEConfigSpecialtyCMADDItem);
		contextMenus.Clinical.contextMenuVTEConfigSpecialtyCMREMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove Specialty", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5820002)))
			contextMenus.Clinical.contextMenuVTEConfigSpecialtyCM.add(contextMenus.Clinical.contextMenuVTEConfigSpecialtyCMREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuVTEConfigSpecialtyCM);
		contextMenus.Clinical.contextMenuVTEConfigWardCM = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Clinical.contextMenuVTEConfigWardCMADDItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Ward", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5810001)))
			contextMenus.Clinical.contextMenuVTEConfigWardCM.add(contextMenus.Clinical.contextMenuVTEConfigWardCMADDItem);
		contextMenus.Clinical.contextMenuVTEConfigWardCMREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove Ward", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5810002)))
			contextMenus.Clinical.contextMenuVTEConfigWardCM.add(contextMenus.Clinical.contextMenuVTEConfigWardCMREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuVTEConfigWardCM);
		contextMenus.Clinical.contextMenuVTEColourConfigCM = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Clinical.contextMenuVTEColourConfigCMADDItem = factory.createMenuItem(startControlID.intValue() + 9, "Add", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5840001)))
			contextMenus.Clinical.contextMenuVTEColourConfigCM.add(contextMenus.Clinical.contextMenuVTEColourConfigCMADDItem);
		contextMenus.Clinical.contextMenuVTEColourConfigCMEDITItem = factory.createMenuItem(startControlID.intValue() + 10, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5840002)))
			contextMenus.Clinical.contextMenuVTEColourConfigCM.add(contextMenus.Clinical.contextMenuVTEColourConfigCMEDITItem);
		contextMenus.Clinical.contextMenuVTEColourConfigCMREMOVEItem = factory.createMenuItem(startControlID.intValue() + 11, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5840003)))
			contextMenus.Clinical.contextMenuVTEColourConfigCM.add(contextMenus.Clinical.contextMenuVTEColourConfigCMREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuVTEColourConfigCM);


		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(2);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(3);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(4);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				WardSelectionForVteConfig = new LocalFormName(123299);
				SpecialtySelectionForVteConfig = new LocalFormName(123300);
				VTEColourConfig = new LocalFormName(123301);
			}
			public final FormName WardSelectionForVteConfig;
			public final FormName SpecialtySelectionForVteConfig;
			public final FormName VTEColourConfig;
		}

		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Specialty01 = new ImageHelper(103163, "Images/Admin/Specialty.jpg", new Integer(16), new Integer(16));
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(23), new Integer(23));
			}
			public final ims.framework.utils.Image Specialty01;
			public final ims.framework.utils.Image Location;
		}
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedConfig = new ims.framework.ContextVariable("SelectedConfig", prefix + "_lv_Clinical.VTEAssessmentWardExceptionList.__internal_x_context__SelectedConfig_" + componentIdentifier + "");
		}
		
		public boolean getSelectedConfigIsNotNull()
		{
			return !cxl_SelectedConfig.getValueIsNull(context);
		}
		public ims.core.vo.VTEAssessmentConfigVo getSelectedConfig()
		{
			return (ims.core.vo.VTEAssessmentConfigVo)cxl_SelectedConfig.getValue(context);
		}
		public void setSelectedConfig(ims.core.vo.VTEAssessmentConfigVo value)
		{
			cxl_SelectedConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedConfig = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class VTEConfigWardSpecialtyCM implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_WARD = 1;
				public static final int ADD_SPECIALTY = 2;
				public static final int REMOVE_WARD = 3;
				public static final int REMOVE_SPECIALTY = 4;
			}
			public void disableAllVTEConfigWardSpecialtyCMMenuItems()
			{
				this.contextMenuVTEConfigWardSpecialtyCMADD_WARDItem.setEnabled(false);
				this.contextMenuVTEConfigWardSpecialtyCMADD_SPECIALTYItem.setEnabled(false);
				this.contextMenuVTEConfigWardSpecialtyCMREMOVE_WARDItem.setEnabled(false);
				this.contextMenuVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem.setEnabled(false);
			}
			public void hideAllVTEConfigWardSpecialtyCMMenuItems()
			{
				this.contextMenuVTEConfigWardSpecialtyCMADD_WARDItem.setVisible(false);
				this.contextMenuVTEConfigWardSpecialtyCMADD_SPECIALTYItem.setVisible(false);
				this.contextMenuVTEConfigWardSpecialtyCMREMOVE_WARDItem.setVisible(false);
				this.contextMenuVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem.setVisible(false);
			}
			private Menu contextMenuVTEConfigWardSpecialtyCM;
			public ReadOnlyMenuItem getVTEConfigWardSpecialtyCMADD_WARDItem()
			{
				return this.contextMenuVTEConfigWardSpecialtyCMADD_WARDItem;
			}
			private MenuItem contextMenuVTEConfigWardSpecialtyCMADD_WARDItem;
			public ReadOnlyMenuItem getVTEConfigWardSpecialtyCMADD_SPECIALTYItem()
			{
				return this.contextMenuVTEConfigWardSpecialtyCMADD_SPECIALTYItem;
			}
			private MenuItem contextMenuVTEConfigWardSpecialtyCMADD_SPECIALTYItem;
			public ReadOnlyMenuItem getVTEConfigWardSpecialtyCMREMOVE_WARDItem()
			{
				return this.contextMenuVTEConfigWardSpecialtyCMREMOVE_WARDItem;
			}
			private MenuItem contextMenuVTEConfigWardSpecialtyCMREMOVE_WARDItem;
			public ReadOnlyMenuItem getVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem()
			{
				return this.contextMenuVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem;
			}
			private MenuItem contextMenuVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem;
			public final class VTEConfigSpecialtyCM implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 5;
				public static final int REMOVE = 6;
			}
			public void disableAllVTEConfigSpecialtyCMMenuItems()
			{
				this.contextMenuVTEConfigSpecialtyCMADDItem.setEnabled(false);
				this.contextMenuVTEConfigSpecialtyCMREMOVEItem.setEnabled(false);
			}
			public void hideAllVTEConfigSpecialtyCMMenuItems()
			{
				this.contextMenuVTEConfigSpecialtyCMADDItem.setVisible(false);
				this.contextMenuVTEConfigSpecialtyCMREMOVEItem.setVisible(false);
			}
			private Menu contextMenuVTEConfigSpecialtyCM;
			public ReadOnlyMenuItem getVTEConfigSpecialtyCMADDItem()
			{
				return this.contextMenuVTEConfigSpecialtyCMADDItem;
			}
			private MenuItem contextMenuVTEConfigSpecialtyCMADDItem;
			public ReadOnlyMenuItem getVTEConfigSpecialtyCMREMOVEItem()
			{
				return this.contextMenuVTEConfigSpecialtyCMREMOVEItem;
			}
			private MenuItem contextMenuVTEConfigSpecialtyCMREMOVEItem;
			public final class VTEConfigWardCM implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 7;
				public static final int REMOVE = 8;
			}
			public void disableAllVTEConfigWardCMMenuItems()
			{
				this.contextMenuVTEConfigWardCMADDItem.setEnabled(false);
				this.contextMenuVTEConfigWardCMREMOVEItem.setEnabled(false);
			}
			public void hideAllVTEConfigWardCMMenuItems()
			{
				this.contextMenuVTEConfigWardCMADDItem.setVisible(false);
				this.contextMenuVTEConfigWardCMREMOVEItem.setVisible(false);
			}
			private Menu contextMenuVTEConfigWardCM;
			public ReadOnlyMenuItem getVTEConfigWardCMADDItem()
			{
				return this.contextMenuVTEConfigWardCMADDItem;
			}
			private MenuItem contextMenuVTEConfigWardCMADDItem;
			public ReadOnlyMenuItem getVTEConfigWardCMREMOVEItem()
			{
				return this.contextMenuVTEConfigWardCMREMOVEItem;
			}
			private MenuItem contextMenuVTEConfigWardCMREMOVEItem;
			public final class VTEColourConfigCM implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 9;
				public static final int EDIT = 10;
				public static final int REMOVE = 11;
			}
			public void disableAllVTEColourConfigCMMenuItems()
			{
				this.contextMenuVTEColourConfigCMADDItem.setEnabled(false);
				this.contextMenuVTEColourConfigCMEDITItem.setEnabled(false);
				this.contextMenuVTEColourConfigCMREMOVEItem.setEnabled(false);
			}
			public void hideAllVTEColourConfigCMMenuItems()
			{
				this.contextMenuVTEColourConfigCMADDItem.setVisible(false);
				this.contextMenuVTEColourConfigCMEDITItem.setVisible(false);
				this.contextMenuVTEColourConfigCMREMOVEItem.setVisible(false);
			}
			private Menu contextMenuVTEColourConfigCM;
			public ReadOnlyMenuItem getVTEColourConfigCMADDItem()
			{
				return this.contextMenuVTEColourConfigCMADDItem;
			}
			private MenuItem contextMenuVTEColourConfigCMADDItem;
			public ReadOnlyMenuItem getVTEColourConfigCMEDITItem()
			{
				return this.contextMenuVTEColourConfigCMEDITItem;
			}
			private MenuItem contextMenuVTEColourConfigCMEDITItem;
			public ReadOnlyMenuItem getVTEColourConfigCMREMOVEItem()
			{
				return this.contextMenuVTEColourConfigCMREMOVEItem;
			}
			private MenuItem contextMenuVTEColourConfigCMREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[150];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Clinical.VTEColourConfig", "BO-1004100070-ID", "ID_VTEAssessmentColourConfig");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Clinical.VTEColourConfig", "BO-1004100070-WORKLISTENTRYCOLOUR", "WorklistEntryColour");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Clinical.VTEColourConfig", "BO-1004100070-FROMHOURS", "FromHours");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Clinical.VTEColourConfig", "BO-1004100070-TOHOURS", "ToHours");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTEAssessmentWardExceptionList.__internal_x_context__SelectedConfig_" + componentIdentifier, "BO-1004100069-ID", "ID_VTEAssessmentConfig");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTEAssessmentWardExceptionList.__internal_x_context__SelectedConfig_" + componentIdentifier, "BO-1004100069-PREOPASSESSMENTVALIDPERIOD", "PreOpAssessmentValidPeriod");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
