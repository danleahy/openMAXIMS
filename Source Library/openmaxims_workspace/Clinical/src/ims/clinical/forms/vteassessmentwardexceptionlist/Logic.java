//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.vteassessmentwardexceptionlist;

import ims.clinical.forms.vteassessmentwardexceptionlist.GenForm.lyrTabsLayer.tabWardSpecContainer.grdSpecialtiesRow;
import ims.clinical.forms.vteassessmentwardexceptionlist.GenForm.lyrTabsLayer.tabWardSpecContainer.grdWardsRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationForVTEAssessmentVo;
import ims.core.vo.LocationForVTEAssessmentVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.VTEAssessmentColourConfigVo;
import ims.core.vo.VTEAssessmentColourConfigVoCollection;
import ims.core.vo.VTEAssessmentConfigVo;
import ims.core.vo.VTEAssessmentExclusionsVo;
import ims.core.vo.VTEAssessmentExclusionsVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static int WARD_SPECIALTY_COLUMN = 1;
	private static int HOSPITAL_COLUMN = 2;
	private static int WARD_SPECIALTY_COLUMN_WIDTH = 250;
	private static int HOSPITAL_COLUMN_WIDTH = 250;
	private static int NO_WARD_SELECTED = -1;
	private static int NO_SPECIALTY_SELECTED = -2;
	private static final String	COLUMN_START		= "0";
	private static final String	COLUMN_END			= "1";
	private static final String	COLUMN_COLOUR		= "2";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().Clinical.hideAllVTEConfigWardCMMenuItems();
		form.getContextMenus().Clinical.hideAllVTEConfigSpecialtyCMMenuItems();
		form.getContextMenus().Clinical.hideAllVTEConfigWardSpecialtyCMMenuItems();
		form.getContextMenus().Clinical.hideAllVTEColourConfigCMMenuItems();

		boolean isRowSelected = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow() != null && form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow().getValue() != null;
		boolean isWardSelected = isRowSelected && (form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getValue() instanceof LocationForVTEAssessmentVo || form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getValue().equals(NO_WARD_SELECTED));
		boolean noWardSelected = isRowSelected && form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getValue().equals(NO_WARD_SELECTED);
		boolean isSpecialtySelected = isRowSelected && form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getValue() instanceof Specialty;
		boolean noSpecialtySelected = isRowSelected && form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getValue().equals(NO_SPECIALTY_SELECTED);
		boolean hasParentWard = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow() != null && form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow().getParent() != null;

		form.getContextMenus().Clinical.getVTEConfigWardCMADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Clinical.getVTEConfigWardCMREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrTabs().tabWardSpec().grdWards().getValue() != null);

		form.getContextMenus().Clinical.getVTEConfigSpecialtyCMADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Clinical.getVTEConfigSpecialtyCMREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrTabs().tabWardSpec().grdSpecialties().getValue() != null);

		form.getContextMenus().Clinical.getVTEConfigWardSpecialtyCMADD_WARDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Clinical.getVTEConfigWardSpecialtyCMREMOVE_WARDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && (isWardSelected || noWardSelected));
		form.getContextMenus().Clinical.getVTEConfigWardSpecialtyCMADD_SPECIALTYItem().setVisible(FormMode.EDIT.equals(form.getMode()) && (isWardSelected || hasParentWard));
		form.getContextMenus().Clinical.getVTEConfigWardSpecialtyCMREMOVE_SPECIALTYItem().setVisible(FormMode.EDIT.equals(form.getMode()) && (isSpecialtySelected || noSpecialtySelected));

		form.getContextMenus().Clinical.getVTEColourConfigCMADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Clinical.getVTEColourConfigCMEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrTabs().tabColourConfig().dyngrdColourConfig().getValue() != null);
		form.getContextMenus().Clinical.getVTEColourConfigCMREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrTabs().tabColourConfig().dyngrdColourConfig().getValue() != null);
		
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()));

	}

	private void open()
	{
		populateScreenFromData();
		
		form.setMode(FormMode.VIEW);
	}


	private void populateScreenFromData()
	{
		clearScreen();
		
		form.getLocalContext().setSelectedConfig(domain.getVTEConfig());
		
		if (form.getLocalContext().getSelectedConfig() == null)
			return;
		
		//populate excluded specialties
		if (form.getLocalContext().getSelectedConfig().getExcludedSpecialties() != null)
		{
			
			for (int i = 0; i < form.getLocalContext().getSelectedConfig().getExcludedSpecialties().size(); i++)
			{
				if (form.getLocalContext().getSelectedConfig().getExcludedSpecialties().get(i) == null || form.getLocalContext().getSelectedConfig().getExcludedSpecialties().get(i).getSpecialty() == null)
					continue;
				
				grdSpecialtiesRow newRow = form.lyrTabs().tabWardSpec().grdSpecialties().getRows().newRow();

				newRow.setColSpecialty(form.getLocalContext().getSelectedConfig().getExcludedSpecialties().get(i).getSpecialty().getText());
				newRow.setColNotRequired(true);

				newRow.setValue(form.getLocalContext().getSelectedConfig().getExcludedSpecialties().get(i).getSpecialty());
			}
		}
		
		//populate excluded wards
		if (form.getLocalContext().getSelectedConfig().getExcludedWards() != null)
		{
			
			for (int i = 0; i < form.getLocalContext().getSelectedConfig().getExcludedWards().size(); i++)
			{
				if (form.getLocalContext().getSelectedConfig().getExcludedWards().get(i) == null || form.getLocalContext().getSelectedConfig().getExcludedWards().get(i).getWard() == null)
					continue;
				
				grdWardsRow newRow = form.lyrTabs().tabWardSpec().grdWards().getRows().newRow();

				newRow.setColWard(form.getLocalContext().getSelectedConfig().getExcludedWards().get(i).getWard().getName());
				newRow.setColNotRequired(true);

				newRow.setValue(form.getLocalContext().getSelectedConfig().getExcludedWards().get(i).getWard());
			}
		}
		
		//populate ward/specialties
		if (form.getLocalContext().getSelectedConfig().getExcludedCombination() != null)
		{
			
			for (int i = 0; i < form.getLocalContext().getSelectedConfig().getExcludedCombination().size(); i++)
			{
				VTEAssessmentExclusionsVo combination = form.getLocalContext().getSelectedConfig().getExcludedCombination().get(i);	
				
				if (!wardAlreadyAdded(combination.getWard()))
					addWard(combination.getHospital(), combination.getWard());
				
				form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().setValue(combination.getWard());
				
				addSpecialty(combination.getSpecialty());
			}
			
			form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().setValue(null);
		}
		
		populateColourConfigurationGrid(form.getLocalContext().getSelectedConfig().getColourConfiguration());
		
		
		form.lyrTabs().tabColourConfig().intNoOfDays().setValue(form.getLocalContext().getSelectedConfig().getPreOpAssessmentValidPeriod());
	}

	private void populateColourConfigurationGrid(VTEAssessmentColourConfigVoCollection colourConfiguration)
	{
		form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().clear();
		
		if (colourConfiguration != null)
		{
			colourConfiguration.sort(SortOrder.ASCENDING);
			
			for (int i = 0; i < colourConfiguration.size(); i++)
			{
				addOrUpdateRowToColourConfigGrid(colourConfiguration.get(i));
			}
		}
		
	}

	private boolean wardAlreadyAdded(LocationForVTEAssessmentVo ward)
	{
		if (form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().size() > 0)
		{
			for (int i = 0; i < form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().size(); i++)
			{
				if ( form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getValue() instanceof LocationForVTEAssessmentVo)
				{
					LocationForVTEAssessmentVo addedWard = (LocationForVTEAssessmentVo)form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getValue();
					
					if (addedWard.equals(ward))
						return true;
				}
			}
		}
		
		return false;
	}

	private void clearScreen()
	{
		form.lyrTabs().tabWardSpec().grdWards().getRows().clear();
		form.lyrTabs().tabWardSpec().grdSpecialties().getRows().clear();
		form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().clear();
		
		form.lyrTabs().tabColourConfig().intNoOfDays().setValue(null);
		form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().clear();
		
	}

	private void initialize()
	{
		
		//ward specialty grid
		form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().setSelectable(true);

		DynamicGridColumn hospCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().newColumn("Hospital", HOSPITAL_COLUMN, false);
		hospCol.setWidth(HOSPITAL_COLUMN_WIDTH);
		hospCol.setCanGrow(false);
		
		DynamicGridColumn mainCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().newColumn("Ward / Specialty", WARD_SPECIALTY_COLUMN, false);
		mainCol.setWidth(WARD_SPECIALTY_COLUMN_WIDTH);
		mainCol.setCanGrow(false);
		
		//colour config grid
		DynamicGridColumn column = form.lyrTabs().tabColourConfig().dyngrdColourConfig().getColumns().newColumn("Start (hours)",COLUMN_START);
		column.setWidth(250);
		column.setHeaderAlignment(Alignment.LEFT);
		column = form.lyrTabs().tabColourConfig().dyngrdColourConfig().getColumns().newColumn("End (hours)",COLUMN_END);
		column.setWidth(250);
		column.setHeaderAlignment(Alignment.LEFT);
		column = form.lyrTabs().tabColourConfig().dyngrdColourConfig().getColumns().newColumn("Colour",COLUMN_COLOUR);
		column.setWidth(100);
		column.setHeaderAlignment(Alignment.LEFT);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save()
	{
		VTEAssessmentConfigVo vteConfig = populateDataFromScreen();

		if (!validateUiRules(vteConfig))
			return false;
		
		String[] errors = vteConfig.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		if (vteConfig.getID_VTEAssessmentConfig() == null && domain.getVTEConfig() != null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			domain.saveConfig(vteConfig);
		}
		catch (StaleObjectException e)
		{			
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		return true;
	}

	private boolean validateUiRules(VTEAssessmentConfigVo vteConfig)
	{
		List<String> uiErrors = new ArrayList<String>();

		for (int i = 0; vteConfig.getColourConfiguration() != null && i < vteConfig.getColourConfiguration().size(); i++)
		{
			if (i < vteConfig.getColourConfiguration().size() - 1 && vteConfig.getColourConfiguration().get(i + 1).getFromHours().intValue() != vteConfig.getColourConfiguration().get(i).getToHours().intValue() + 1)
			{
				uiErrors.add("Worklist colour configuration: Hours intervals are not consecutive.");
				break;
			}

			if (vteConfig.getColourConfiguration().get(i).getFromHours().intValue() >= vteConfig.getColourConfiguration().get(i).getToHours().intValue())
			{
				uiErrors.add("Worklist colour configuration: Hours intervals are not consecutive.");
				break;
			}
		}

		if (vteConfig.getExcludedCombination() != null && vteConfig.getExcludedCombination().size() > 0)
		{
			for (int i = 0; i < vteConfig.getExcludedCombination().size(); i++)
			{
				VTEAssessmentExclusionsVo wardSpecialtyCombination = vteConfig.getExcludedCombination().get(i);

				if (wardSpecialtyCombination.getWard() == null)
				{
					uiErrors.add("Ward is mandatory.");
				}

				if (wardSpecialtyCombination.getSpecialty() == null)
				{
					uiErrors.add("Specialty is mandatory.");
				}

				if (wardSpecialtyCombination.getWard() != null && form.lyrTabs().tabWardSpec().grdWards().getValues().contains(wardSpecialtyCombination.getWard()))
				{
					uiErrors.add("'" + wardSpecialtyCombination.getWard().getName() + "' is already added in the Excluded Wards grid.");
				}

				if (wardSpecialtyCombination.getSpecialty() != null)
				{
					for (int j = 0; j < form.lyrTabs().tabWardSpec().grdSpecialties().getRows().size(); j++)
					{
						if (form.lyrTabs().tabWardSpec().grdSpecialties().getRows().get(j).getValue().equals(wardSpecialtyCombination.getSpecialty()))
						{
							uiErrors.add("'" + wardSpecialtyCombination.getSpecialty().getText() + "' is already added in the Excluded Specialties grid.");
							break;
						}
					}

				}
			}
		}

		if (vteConfig.getPreOpAssessmentValidPeriod() == null)
		{
			uiErrors.add("No. of Days eVTE Pre-Op valid is mandatory.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);

		if (uiResults != null && uiResults.length > 0)
		{
			engine.showErrors(uiResults);
			return false;
		}

		return true;
	}

	private VTEAssessmentConfigVo populateDataFromScreen()
	{
		if (form.getLocalContext().getSelectedConfig() == null)
			form.getLocalContext().setSelectedConfig(new VTEAssessmentConfigVo());
		
		//populate excluded Wards
		if (form.lyrTabs().tabWardSpec().grdWards().getRows().size() > 0)
		{
			
			VTEAssessmentExclusionsVoCollection wardsToBeExcluded = new VTEAssessmentExclusionsVoCollection();
			
			for (int i= 0 ; i < form.lyrTabs().tabWardSpec().grdWards().getRows().size(); i++)
			{
				LocationForVTEAssessmentVo ward = form.lyrTabs().tabWardSpec().grdWards().getRows().get(i).getValue();
				
				VTEAssessmentExclusionsVo excludeWard = new VTEAssessmentExclusionsVo();
				
				excludeWard.setWard(ward);
				wardsToBeExcluded.add(excludeWard);
			}
			
			form.getLocalContext().getSelectedConfig().setExcludedWards(wardsToBeExcluded);
		}
		else
			form.getLocalContext().getSelectedConfig().setExcludedWards(null);
		
		//populate excluded Specialties
		if (form.lyrTabs().tabWardSpec().grdSpecialties().getRows().size() > 0)
		{
			
			VTEAssessmentExclusionsVoCollection specialtiesToBeExcluded = new VTEAssessmentExclusionsVoCollection();
			
			for (int i= 0 ; i < form.lyrTabs().tabWardSpec().grdSpecialties().getRows().size(); i++)
			{
				Specialty specialty = form.lyrTabs().tabWardSpec().grdSpecialties().getRows().get(i).getValue();
				
				VTEAssessmentExclusionsVo excludeSpecialty = new VTEAssessmentExclusionsVo();
				
				excludeSpecialty.setSpecialty(specialty);
				specialtiesToBeExcluded.add(excludeSpecialty);
			}
			
			form.getLocalContext().getSelectedConfig().setExcludedSpecialties(specialtiesToBeExcluded);
		}
		else
			form.getLocalContext().getSelectedConfig().setExcludedSpecialties(null);
		
		//populate excluded Wards/Specialties
		if (form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().size() > 0)
		{

			VTEAssessmentExclusionsVoCollection wardSpecialtiesToBeExcluded = new VTEAssessmentExclusionsVoCollection();

			for (int i = 0; i < form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().size(); i++)
			{

				VTEAssessmentExclusionsVo excludeWardSpecialty = null;

				// check if it has Specialties
				if (form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getRows().size() > 0)
				{
					for (int j = 0; j < form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getRows().size(); j++)
					{
						excludeWardSpecialty = new VTEAssessmentExclusionsVo();
						
						if (form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getValue() instanceof LocationForVTEAssessmentVo)
						{
							excludeWardSpecialty.setWard((LocationForVTEAssessmentVo) form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getValue());
							
							DynamicGridColumn hospitalCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().getByIdentifier(HOSPITAL_COLUMN);
							excludeWardSpecialty.setHospital((LocationLiteVo) form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getCells().get(hospitalCol).getValue());
						}

						if (form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getRows().get(j).getValue() instanceof Specialty)
							excludeWardSpecialty.setSpecialty((Specialty) form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getRows().get(j).getValue());

						wardSpecialtiesToBeExcluded.add(excludeWardSpecialty);
					}
				}
				// if no specialties added, just add the ward
				else if (form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getValue() instanceof LocationForVTEAssessmentVo)
				{
					excludeWardSpecialty = new VTEAssessmentExclusionsVo();
					excludeWardSpecialty.setWard((LocationForVTEAssessmentVo) form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().get(i).getValue());
					wardSpecialtiesToBeExcluded.add(excludeWardSpecialty);
				}
				// a ward row is added but with no value
				else
				{
					excludeWardSpecialty = new VTEAssessmentExclusionsVo();
					excludeWardSpecialty.setWard(null);
					wardSpecialtiesToBeExcluded.add(excludeWardSpecialty);
				}
			}
			
			form.getLocalContext().getSelectedConfig().setExcludedCombination(wardSpecialtiesToBeExcluded);
		}
		else
			form.getLocalContext().getSelectedConfig().setExcludedCombination(null);
		
		//populate worklist colour config
		if (form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().size() > 0)
		{
			VTEAssessmentColourConfigVoCollection coloursConfig = new VTEAssessmentColourConfigVoCollection();

			for (int i = 0; i < form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().size(); i++)
			{

				VTEAssessmentColourConfigVo colourToAdd = (VTEAssessmentColourConfigVo) form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().get(i).getValue();

				coloursConfig.add(colourToAdd);
				form.getLocalContext().getSelectedConfig().setColourConfiguration(coloursConfig);
			}
		}
		else
			form.getLocalContext().getSelectedConfig().setColourConfiguration(null);
		
		form.getLocalContext().getSelectedConfig().setPreOpAssessmentValidPeriod(form.lyrTabs().tabColourConfig().intNoOfDays().getValue());
		
		return form.getLocalContext().getSelectedConfig();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigWardCM.ADD:
				form.getGlobalContext().Core.setSelectedWardsForVTEConfig(populateWardsFromScreen());
				engine.open(form.getForms().Clinical.WardSelectionForVteConfig);
				break;

			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigWardCM.REMOVE:

				form.lyrTabs().tabWardSpec().grdWards().removeSelectedRow();
				updateControlsState();
				break;

			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigSpecialtyCM.ADD:
				form.getGlobalContext().Clinical.setSelectedSpecialtiesForVteConfig(populateSpecialtiesFromScreen());
				engine.open(form.getForms().Clinical.SpecialtySelectionForVteConfig);
				break;

			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigSpecialtyCM.REMOVE:

				form.lyrTabs().tabWardSpec().grdSpecialties().removeSelectedRow();
				updateControlsState();
				break;

			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigWardSpecialtyCM.ADD_WARD:
				addWard(null, null);
				updateControlsState();
				break;

			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigWardSpecialtyCM.REMOVE_WARD:
				form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().remove(form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow());
				updateControlsState();
				break;

			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigWardSpecialtyCM.ADD_SPECIALTY:
				addSpecialty(null);
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.ClinicalNamespace.VTEConfigWardSpecialtyCM.REMOVE_SPECIALTY:
				form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().remove(form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow());
				updateControlsState();
				break;
			
			case GenForm.ContextMenus.ClinicalNamespace.VTEColourConfigCM.ADD:
				form.getGlobalContext().Clinical.setVTEColourConfig(null);
				form.lyrTabs().tabColourConfig().dyngrdColourConfig().setValue(null);
				engine.open(form.getForms().Clinical.VTEColourConfig);
				break;
				
			case GenForm.ContextMenus.ClinicalNamespace.VTEColourConfigCM.EDIT:
				form.getGlobalContext().Clinical.setVTEColourConfig((VTEAssessmentColourConfigVo) form.lyrTabs().tabColourConfig().dyngrdColourConfig().getValue());
				engine.open(form.getForms().Clinical.VTEColourConfig);
				break;
				
			case GenForm.ContextMenus.ClinicalNamespace.VTEColourConfigCM.REMOVE:
				form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().remove(form.lyrTabs().tabColourConfig().dyngrdColourConfig().getSelectedRow());
				updateControlsState();
				break;
		}

	}

	private void addWard(LocationLiteVo hospitalForWard, LocationForVTEAssessmentVo ward)
	{
		DynamicGridColumn hospitalCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().getByIdentifier(HOSPITAL_COLUMN);
		DynamicGridColumn wardSpecialtyCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().getByIdentifier(WARD_SPECIALTY_COLUMN);
		DynamicGridRow newRow = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getRows().newRow();

		newRow.setExpandedImage(form.getImages().Admin.Location);
		newRow.setCollapsedImage(form.getImages().Admin.Location);

		DynamicGridCell hospitalCell = newRow.getCells().newCell(hospitalCol, DynamicCellType.ENUMERATION);
		hospitalCell.setAutoPostBack(true);
		
		LocationLiteVoCollection hospitalsList = domain.listHospitals();
		
		if (hospitalsList != null && hospitalsList.size() > 0)
		{
			for (int i = 0; i < hospitalsList.size(); i++)
			{
				LocationLiteVo hospital = hospitalsList.get(i);
				hospitalCell.getItems().newItem(hospital, hospital.getName());
			}
		}
		
		DynamicGridCell wardSpecialtyCell = newRow.getCells().newCell(wardSpecialtyCol, DynamicCellType.QUERYCOMBOBOX);
		
		wardSpecialtyCell.setAutoPostBack(true);

		if (hospitalForWard != null)
			hospitalCell.setValue(hospitalForWard);
		
		if (ward != null)
		{
			wardSpecialtyCell.getItems().newItem(ward, ward.getName());
			wardSpecialtyCell.setValue(ward);
			newRow.setValue(ward);
		}
		else
			newRow.setValue(NO_WARD_SELECTED);

		wardSpecialtyCell.setAutoPostBack(true);

		form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().setSelectedRow(newRow);
		
	}

	private void addSpecialty(Specialty specialty)
	{
		DynamicGridRow parent = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow();

		if (!((parent.getValue() instanceof LocationForVTEAssessmentVo) || parent.getValue().equals(NO_WARD_SELECTED)))
		{
			parent = parent.getParent();
		}

		DynamicGridColumn wardSpecialtyCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().getByIdentifier(WARD_SPECIALTY_COLUMN);
		DynamicGridRow newRow = parent.getRows().newRow();

		newRow.setExpandedImage(form.getImages().Admin.Specialty01);
		newRow.setCollapsedImage(form.getImages().Admin.Specialty01);

		DynamicGridCell newCell = newRow.getCells().newCell(wardSpecialtyCol, DynamicCellType.ENUMERATION);

		SpecialtyCollection lkpSpecialtyCollection = LookupHelper.getSpecialty(domain.getLookupService());

		if (lkpSpecialtyCollection != null)
		{
			for (int i = 0; i < lkpSpecialtyCollection.size(); i++)
			{
				Specialty specialtyToAdd = lkpSpecialtyCollection.get(i);
				newCell.getItems().newItem(specialtyToAdd, specialtyToAdd.getText());
			}
		}

		if (specialty != null)
		{
			newCell.setValue(specialty);

			if (newCell.getValue() == null)
			{
				newCell.getItems().newItem(specialty, specialty.getText());
				newCell.setValue(specialty);
			}

			newRow.setValue(specialty);
		}
		else
			newRow.setValue(NO_SPECIALTY_SELECTED);

		newCell.setAutoPostBack(true);
		newRow.getParent().setExpanded(true, true);

		form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().setSelectedRow(newRow);

	}

	private LocationForVTEAssessmentVoCollection populateWardsFromScreen()
	{
		LocationForVTEAssessmentVoCollection selectedWards = new LocationForVTEAssessmentVoCollection();

		for (int i = 0; i < form.lyrTabs().tabWardSpec().grdWards().getRows().size(); i++)
		{
			if (form.lyrTabs().tabWardSpec().grdWards().getRows().get(i).getColNotRequired())
			{
				selectedWards.add(form.lyrTabs().tabWardSpec().grdWards().getRows().get(i).getValue());

			}
		}

		return selectedWards;
	}

	private SpecialtyCollection populateSpecialtiesFromScreen()
	{
		SpecialtyCollection selectedSpecialties = new SpecialtyCollection();

		for (int i = 0; i < form.lyrTabs().tabWardSpec().grdSpecialties().getRows().size(); i++)
		{
			if (form.lyrTabs().tabWardSpec().grdSpecialties().getRows().get(i).getColNotRequired())
			{
				selectedSpecialties.add(form.lyrTabs().tabWardSpec().grdSpecialties().getRows().get(i).getValue());

			}
		}

		return selectedSpecialties;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.WardSelectionForVteConfig) && result.equals(DialogResult.OK))
		{
			populateWardGrid(form.getGlobalContext().Core.getSelectedWardsForVTEConfig());
		}
		else if (formName.equals(form.getForms().Clinical.SpecialtySelectionForVteConfig) && result.equals(DialogResult.OK))
		{
			populateSpecialtiesGrid(form.getGlobalContext().Clinical.getSelectedSpecialtiesForVteConfig());
		}
		else if (formName.equals(form.getForms().Clinical.VTEColourConfig) && result.equals(DialogResult.OK))
		{
			addOrUpdateRowToColourConfigGrid(form.getGlobalContext().Clinical.getVTEColourConfig());
			orderColourGridByStartDay();
		}
		
		updateControlsState();

	}

	private void populateWardGrid(LocationForVTEAssessmentVoCollection selectedWards)
	{
		form.lyrTabs().tabWardSpec().grdWards().getRows().clear();

		if (selectedWards == null || selectedWards.size() == 0)
			return;

		for (int i = 0; i < selectedWards.size(); i++)
		{
			grdWardsRow newRow = form.lyrTabs().tabWardSpec().grdWards().getRows().newRow();

			newRow.setColWard(selectedWards.get(i).getName());
			newRow.setColNotRequired(true);

			newRow.setValue(selectedWards.get(i));
		}

	}

	private void populateSpecialtiesGrid(SpecialtyCollection selectedSpecialtiesForVteConfig)
	{
		form.lyrTabs().tabWardSpec().grdSpecialties().getRows().clear();

		if (selectedSpecialtiesForVteConfig == null || selectedSpecialtiesForVteConfig.size() == 0)
			return;

		for (int i = 0; i < selectedSpecialtiesForVteConfig.size(); i++)
		{
			grdSpecialtiesRow newRow = form.lyrTabs().tabWardSpec().grdSpecialties().getRows().newRow();

			newRow.setColSpecialty(selectedSpecialtiesForVteConfig.get(i).getText());
			newRow.setColNotRequired(true);

			newRow.setValue(selectedSpecialtiesForVteConfig.get(i));
		}

	}

	@Override
	protected void onGrdSpecialtiesSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onGrdWardsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdWardSpecialtyCellTextSubmited(DynamicGridCell cell)
	{
		String typedText = cell.getTypedText();

		cell.getItems().clear();
		cell.setTypedText(null);
		
		if (DynamicCellType.QUERYCOMBOBOX.equals(cell.getType()))
			cell.getRow().setValue(NO_WARD_SELECTED);
		
		DynamicGridColumn hospitalCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().getByIdentifier(HOSPITAL_COLUMN);
		LocationLiteVo hospital = (LocationLiteVo) cell.getRow().getCells().get(hospitalCol).getValue();

		if (hospital == null)
		{
			engine.showMessage("Please select a Hospital before searching for a Ward.");
			return;
		}
		
		LocationForVTEAssessmentVoCollection wards = domain.listWardsForHospital(typedText, hospital);

		if (wards == null || wards.size() == 0)
			return;

		for (int i = 0; i < wards.size(); i++)
		{
			cell.getItems().newItem(wards.get(i), wards.get(i).getName());
		}

		if (cell.getItems().size() == 1)
		{
			cell.setValue(cell.getItems().get(0).getValue());
			cell.getRow().setValue(cell.getItems().get(0).getValue());
		}
		else
		{
			cell.showOpened();
		}

		DynamicGridRow selectedRow = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getSelectedRow();

		if (selectedRow != null)
		{
			form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().setSelectedRow(null);
			form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().setSelectedRow(selectedRow);
		}
		
		updateControlsState();
	}

	@Override
	protected void onDyngrdWardSpecialtyRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdWardSpecialtyCellValueChanged(DynamicGridCell cell)
	{

		if (cell.getValue() == null)
		{
			if (DynamicCellType.QUERYCOMBOBOX.equals(cell.getType()))
				cell.getRow().setValue(NO_WARD_SELECTED);
			else if (DynamicCellType.ENUMERATION.equals(cell.getType()))
			{
				//specialty cell
				if (cell.getRow().getParent() != null)
					cell.getRow().setValue(NO_SPECIALTY_SELECTED);
					
			}
		}
		else if (!(DynamicCellType.ENUMERATION.equals(cell.getType()) && cell.getRow().getParent() == null))
			cell.getRow().setValue(cell.getValue());
		
		//Hospital cell selected, clear ward cell
		if ((DynamicCellType.ENUMERATION.equals(cell.getType()) && cell.getRow().getParent() == null))
		{
			DynamicGridColumn wardCol = form.lyrTabs().tabWardSpec().dyngrdWardSpecialty().getColumns().getByIdentifier(WARD_SPECIALTY_COLUMN);
			cell.getRow().getCells().get(wardCol).getItems().clear();
			cell.getRow().setValue(NO_WARD_SELECTED);
			
		}
		
		updateControlsState();
	}
	
	private void addOrUpdateRowToColourConfigGrid(VTEAssessmentColourConfigVo colourConfig)
	{
		if (colourConfig == null)
			return;

		DynamicGridRow newRow = null;
		
		if (form.lyrTabs().tabColourConfig().dyngrdColourConfig().getValue() != null)
		{
			newRow = form.lyrTabs().tabColourConfig().dyngrdColourConfig().getSelectedRow();
		}
		else
			newRow = form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().newRow();
		
		DynamicGridCell cellStart = newRow.getCells().newCell(form.lyrTabs().tabColourConfig().dyngrdColourConfig().getColumns().getByIdentifier(COLUMN_START),DynamicCellType.STRING);
		cellStart.setValue(colourConfig.getFromHours().toString());
		cellStart.getColumn().setAlignment(Alignment.LEFT);
			
		DynamicGridCell cellEnd = newRow.getCells().newCell(form.lyrTabs().tabColourConfig().dyngrdColourConfig().getColumns().getByIdentifier(COLUMN_END),DynamicCellType.STRING);
		cellEnd.setValue(colourConfig.getToHours().toString());
		cellEnd.getColumn().setAlignment(Alignment.LEFT);
		
		DynamicGridCell cellColour = newRow.getCells().newCell(form.lyrTabs().tabColourConfig().dyngrdColourConfig().getColumns().getByIdentifier(COLUMN_COLOUR),DynamicCellType.ENUMERATION);
		
		Color[] ca = Color.getAllColors();
		
		for (int k = 0; k < ca.length; k++)
		{
			cellColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
		}
	
		cellColour.setValue(colourConfig.getWorklistEntryColour());
		cellStart.getColumn().setAlignment(Alignment.LEFT);
		
		newRow.setValue(colourConfig);
		
	}

	private void orderColourGridByStartDay()
	{
		VTEAssessmentColourConfigVoCollection collColourConfig = new VTEAssessmentColourConfigVoCollection();
		
		for (int i = 0; i < form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().size(); i++)
		{
			collColourConfig.add((VTEAssessmentColourConfigVo)form.lyrTabs().tabColourConfig().dyngrdColourConfig().getRows().get(i).getValue());
		}
		
		populateColourConfigurationGrid(collColourConfig);
		
	}

	@Override
	protected void onDyngrdColourConfigRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
		
	}
}
