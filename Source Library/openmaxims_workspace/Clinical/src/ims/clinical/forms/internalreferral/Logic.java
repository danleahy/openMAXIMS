//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.internalreferral;

import ims.assessment.helper.UserAssessmentInstHelper.AnswerCellData;
import ims.assessment.vo.PatientAssessmentAnswerVo;
import ims.assessment.vo.PatientAssessmentAnswerVoCollection;
import ims.assessment.vo.PatientAssessmentQuestionVo;
import ims.assessment.vo.PatientAssessmentQuestionVoCollection;
import ims.assessment.vo.lookups.AnswerStatus;
import ims.clinical.forms.internalreferral.GenForm.GroupConditionEnumeration;
import ims.clinical.forms.internalreferral.GenForm.GroupUrgentEnumeration;
import ims.clinical.forms.internalreferral.GenForm.lyrDetailsLayer.tabClinicalDetailsContainer.GroupAuthorisationEnumeration;
import ims.clinical.forms.internalreferral.GenForm.lyrDetailsLayer.tabNotesContainer.grdNotesRow;
import ims.clinical.vo.ClinicalReferralNotesVo;
import ims.clinical.vo.ClinicalReferralNotesVoCollection;
import ims.clinical.vo.ClinicalReferralStatusVo;
import ims.clinical.vo.ClinicalReferralStatusVoCollection;
import ims.clinical.vo.ClinicalReferralsVo;
import ims.clinical.vo.ServiceConfigIntReferralForReferralVo;
import ims.clinical.vo.ServiceConfigIntReferralForReferralVoCollection;
import ims.clinical.vo.lookups.ClinicalReferralNoteType;
import ims.clinical.vo.lookups.ClinicalReferralType;
import ims.clinical.vo.lookups.InternalReferralConditionalReferralToGP;
import ims.clinical.vo.lookups.InternalReferralStatusChangeReason;
import ims.configuration.gen.ConfigFlag;
import ims.core.documents.vo.PatientDocumentRefVoCollection;
import ims.core.vo.AnswerDetailsVo;
import ims.core.vo.AnswerDetailsVoCollection;
import ims.core.vo.AnswerOptionVo;
import ims.core.vo.AnswerOptionVoCollection;
import ims.core.vo.AssessmentQuestionVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.QuestionAnswerTypeVo;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.InternalReferralStatusAction;
import ims.core.vo.lookups.InternalReferralStatus;
import ims.core.vo.lookups.QuestionAnswerType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.EnhancedItem;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellDecoratorMode;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final Integer IMAGE_COLUMN = -1;
	private static final Integer QUESTION_COLUMN = -2;

	private static final int DEFAULT_IMAGE_COLUMN_WIDTH = 40;
	private static final int DEFAULT_QUESTION_COLUMN_WIDTH = 360;
	private static final int DEFAULT_YESNO_ANSWER_CELL_WIDTH = 25;
	private static final int DEFAULT_TIME_ANSWER_CELL_WIDTH = 80;
	private static final int DEFAULT_TEXT_ANSWER_CELL_WIDTH = 200;
	private static final int DEFAULT_SEPARATOR_ANSWER_CELL_WIDTH = 20;
	private static final int DEFAULT_PICKLIST_ANSWER_CELL_WIDTH = 200;
	private static final int DEFAULT_PARTIALDATE_ANSWER_CELL_WIDTH = 80;
	private static final int DEFAULT_INTEGER_ANSWER_CELL_WIDTH = 80;
	private static final int DEFAULT_DECIMAL_ANSWER_CELL_WIDTH = 80;
	private static final int DEFAULT_DATE_ANSWER_CELL_WIDTH = 100;
	private static final int DEFAULT_MULTISELECT_ANSWER_CELL_WIDTH = 250;
	private static final int DEFAULT_UNKNOWN_ANSWER_CELL_WIDTH = 10;

	private static final Color DEFAULT_SEPARATOR_CELL_TEXT_COLOR = Color.Blue;

	private EnhancedItem optionYes = EnhancedItem.YES;
	private EnhancedItem optionNo = EnhancedItem.NO;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);

		if (args != null && args.length > 0 && args[0] != null && args[0] instanceof FormMode)
		{
			open((FormMode) args[0]);
		}
		else if (engine.getParentDialogFormName() == null) //opened from Top Buttons
		{
			form.getGlobalContext().Clinical.setClinicalReferralRef(null);
			open(FormMode.EDIT);
		}
		else
			open(FormMode.VIEW);
	}
	
	private void initialise(Object[] args)
	{
		
			
		if (args != null && args.length > 1 && args[1] != null && args[1] instanceof List<?>)
		{
			form.getLocalContext().setDeniedActions((List<InternalReferralStatusAction>) args[1]);
		}
			
		if (args != null && args.length > 2 && args[2] != null && args[2] instanceof InternalReferralStatusAction)
		{
			form.getLocalContext().setActionPressed((InternalReferralStatusAction) args[2]);
		}
		
		form.getLocalContext().setInternalReferralHelper(domain.getInternalReferralHelper());
		form.getLocalContext().setPatientIsInpatient(checkInpatient(form.getGlobalContext().Core.getPatientShort()));
		form.getLocalContext().setHcpUser((HcpLiteVo) domain.getHcpLiteUser());
		form.getLocalContext().setReferralSettings(domain.getInternalReferralsSettings());
		form.getLocalContext().setSelectedTab(form.lyrDetails().tabClinicalDetails()); //WDEV-19163 
		
		form.btnStatusHistory().setImage(form.getImages().Emergency.ViewHistoryEnabled16);
		form.btnAddNote().setImage(form.getImages().Core.AddFile16);
		form.lyrDetails().tabClinicalDetails().btnViewReferralLetter().setImage(form.getImages().Clinical.viewOut_16x16);
		form.lyrDetails().tabClinicalDetails().btnAddReferralLetter().setImage(form.getImages().Core.AddFile16);
		form.lyrDetails().tabClinicalDetails().btnLink().setImage(form.getImages().COE.Link);
		form.btnReqSecondOpinion().setImage(form.getImages().Correspondence.PatientDocumentCreated16);
		form.btnAccept().setImage(form.getImages().Scheduling.ReleaseSlot16);
		form.btnAcceptReqAppt().setImage(form.getImages().Scheduling.session_16);
		form.btnReject().setImage(form.getImages().RefMan.rejection16x16);
		form.btnAcknowledgeRejection().setImage(form.getImages().Emergency.REFERTO16);
		form.btnCompleteAddNote().setImage(form.getImages().ICP.Completed_16);
		form.btnCompleteLinkCorrespondence().setImage(form.getImages().Correspondence.DocumentSend16);
		form.btnAuthorise().setImage(form.getImages().Core.OK_16);
		form.btnApptBooked().setImage(form.getImages().Admin.Calendar_Select_Day);
		form.btnRequiresInfo().setImage(form.getImages().Clinical.BulletPoint);
		form.btnRecordInfo().setImage(form.getImages().Core.Edit);
		form.btnRIE().setImage(form.getImages().Core.Alert_RedTriangle2);
		
		engine.setCaption(form.getGlobalContext().Clinical.getClinicalReferralRef() != null ? "Updating Internal Referral" : "Creating Internal Referral");
		
		initialiseDynamicGrid();
	}

	private void initialiseDynamicGrid()
	{
		form.lyrDetails().tabClinicalDetails().dyngrdQuestions().clear();
		form.lyrDetails().tabClinicalDetails().dyngrdQuestions().setSelectable(Boolean.FALSE);

		DynamicGridColumn imageColumn = form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().newColumn("", IMAGE_COLUMN);

		imageColumn.setWidth(DEFAULT_IMAGE_COLUMN_WIDTH);
		imageColumn.setCanGrow(Boolean.FALSE);

		DynamicGridColumn questionColumn = form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().newColumn("Question", QUESTION_COLUMN);

		questionColumn.setWidth(DEFAULT_QUESTION_COLUMN_WIDTH);
		questionColumn.setCanGrow(Boolean.FALSE);
	}

	private Boolean checkInpatient(PatientShort patientShort)
	{
		return domain.isInpatient(patientShort);
	}

	private void open(FormMode mode)
	{
		populateScreenFromData(mode);
		form.setMode(mode);

	}

	private void populateScreenFromData(FormMode mode)
	{
		clearScreen();

		updateReferralTypeCombo();
		
		if (form.getGlobalContext().Clinical.getClinicalReferralRef() != null)
			form.getLocalContext().setSelectedReferral(domain.getClinicalReferral(form.getGlobalContext().Clinical.getClinicalReferralRef()));

		if (form.getLocalContext().getSelectedReferral() == null)
		{
			if (FormMode.EDIT.equals(mode))
				defaultValues();
			form.getGlobalContext().Clinical.setClinicalReferraNotes(null);
			return;
		}

		ClinicalReferralsVo currentReferral = form.getLocalContext().getSelectedReferral();
		
		form.getGlobalContext().Clinical.setClinicalReferraNotes(currentReferral.getClinicalReferralNotes()); //WDEV-19163 
		form.cmbReferralType().setValue(currentReferral.getReferralType());

		if (currentReferral.getReferringService() != null)
		{
			form.qmbReferringService().newRow(currentReferral.getReferringService(), currentReferral.getReferringService().getServiceName());
			form.qmbReferringService().setValue(currentReferral.getReferringService());
		}

		if (currentReferral.getReferringHCP() != null)
		{
			form.qmbReferringHcp().newRow(currentReferral.getReferringHCP(), currentReferral.getReferringHCP().getMos().getIMosName());
			form.qmbReferringHcp().setValue(currentReferral.getReferringHCP());
		}

		if (currentReferral.getReferToService() != null && currentReferral.getReferToService().getService() != null)
		{
			form.qmbReferToService().newRow(currentReferral.getReferToService(), currentReferral.getReferToService().getService().getServiceName());
			form.qmbReferToService().setValue(currentReferral.getReferToService());
			form.qmbReferToService().setTooltip(currentReferral.getReferToService().getTooltipText());
		}

		if (currentReferral.getReferToHCP() != null)
		{
			form.qmbReferToHcp().newRow(currentReferral.getReferToHCP(), currentReferral.getReferToHCP().getMos().getIMosName());
			form.qmbReferToHcp().setValue(currentReferral.getReferToHCP());
		}

		form.lyrDetails().tabClinicalDetails().txtClinicalDetails().setValue(currentReferral.getReasonForReferral());
		form.dteDecisionToRefer().setValue(currentReferral.getDateDecisionToRefer());
		form.txtPathwayId().setValue(currentReferral.getPathwayID());

		if (currentReferral.getCurrentReferralStatus() != null)
			form.lblStatusText().setValue(currentReferral.getCurrentReferralStatus().getReferralStatus().getText());

		if (currentReferral.getRecordingInfo() != null)
		{
			form.lblRecordingUser().setValue(currentReferral.getRecordingInfo().getRecordingUser() != null ? currentReferral.getRecordingInfo().getRecordingUser().getIItemText() : "");
			form.lblRecordingDateTime().setValue(currentReferral.getRecordingInfo().getRecordingDateTime() != null ? currentReferral.getRecordingInfo().getRecordingDateTime().toString() : "");
		}
		
		if (currentReferral.getAuthorisingInfo() != null)
		{
			form.lyrDetails().tabClinicalDetails().lblAuthorisedByText().setValue(currentReferral.getAuthorisingInfo().getRecordingUser() != null ? currentReferral.getAuthorisingInfo().getRecordingUser().getIItemText() : "");
			form.lyrDetails().tabClinicalDetails().lblAuthorisedDateTimeText().setValue(currentReferral.getAuthorisingInfo().getRecordingDateTime() != null ? currentReferral.getAuthorisingInfo().getRecordingDateTime().toString() : "");
		}

		if (currentReferral.getCurrentReferralStatus() != null)
		{
			//WDEV-19198
			String displayText =  currentReferral.getCurrentReferralStatus().getRejectionReason() != null ? currentReferral.getCurrentReferralStatus().getRejectionReason().getText() : "";
			String labelTooltipText = formatForDisplay("<b> Rejection Reason: </b>" + displayText) + (currentReferral.getCurrentReferralStatus().getRejectionReasonText() != null ? "<br/><br/> <b> Rejection Comment: </b>" + formatForDisplay(currentReferral.getCurrentReferralStatus().getRejectionReasonText().trim()) : "");
			form.lblRejectionReason1().setValue((displayText.length() > 43 ? (displayText.lastIndexOf(" " , 0) >= 40 && displayText.lastIndexOf(" " , 0) <= 43) ? displayText.substring(0, displayText.lastIndexOf(" " , 0)) : displayText.substring(0, 43) : displayText));
			form.lblRejectionReason2().setValue((displayText.length() > 43 ? (displayText.lastIndexOf(" " , 43) >= 83 && displayText.lastIndexOf(" " , 43) < 86) ? displayText.substring(43, displayText.lastIndexOf(" " , 43)) : displayText.substring(43, (displayText.length() > 86 ? 86 : displayText.length())) + (displayText.length() > 86 ? "..." :"") : ""));
			form.lblRejectionReason().setTooltip(labelTooltipText);
			form.lblRejectionReason1().setTooltip(labelTooltipText);
			form.lblRejectionReason2().setTooltip(displayText.length() > 43 ? labelTooltipText : null); //WDEV-19164
		}
		
		if (Boolean.TRUE.equals(currentReferral.getUrgentReferral()))
		{
			form.GroupUrgent().setValue(GroupUrgentEnumeration.rdoYes);
		}
		else if (Boolean.FALSE.equals(currentReferral.getUrgentReferral()))
		{
			form.GroupUrgent().setValue(GroupUrgentEnumeration.rdoNo);
		}

		if (Boolean.TRUE.equals(currentReferral.getNewCondition()))
		{
			form.GroupCondition().setValue(GroupConditionEnumeration.rdoYesCondition);
		}
		else if (Boolean.FALSE.equals(currentReferral.getNewCondition()))
		{
			form.GroupCondition().setValue(GroupConditionEnumeration.rdoNoCondition);
		}

		if (Boolean.TRUE.equals(currentReferral.getRequiresAuthorisation()))
		{
			form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setValue(GroupAuthorisationEnumeration.rdoYesAuthorisation);
		}
		else if (Boolean.FALSE.equals(currentReferral.getRequiresAuthorisation()))
		{
			form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setValue(GroupAuthorisationEnumeration.rdoNoAuthorisation);
		}

		for (int j = 0; currentReferral.getServiceSpecificAnswers() != null && j < currentReferral.getServiceSpecificAnswers().size(); j++)
		{
			populateQuestionsGrid(currentReferral.getServiceSpecificAnswers().get(j).getAssessmentQuestion(), currentReferral.getServiceSpecificAnswers().get(j).getPatientAnswers());
		}

	}
	//WDEV-19198
	private String formatForDisplay(String s)
	{
		if (s == null || s.length() == 0)
			return "";
		StringBuilder str = new StringBuilder();
		while (s.length() > 50)
		{	
			str.append(s.substring(0, (s.lastIndexOf(" ", 55) >= 45 && s.lastIndexOf(" ", 55) <= 55 ? s.lastIndexOf(" ", 55) : 50)) + "<br/>");
			s = s.substring(s.lastIndexOf(" ", 55) >= 45 && s.lastIndexOf(" ", 55) <= 55 ? s.lastIndexOf(" ", 55) : 50, s.length());
		}
		return str.append(s).toString();
	}
	private void clearScreen()
	{
		form.cmbReferralType().setValue(null);
		form.qmbReferringHcp().clear();
		form.qmbReferToService().clear();
		form.qmbReferToHcp().clear();
		form.qmbReferringService().clear();
		form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setValue(null);
		form.GroupCondition().setValue(null);
		form.GroupUrgent().setValue(null);
		form.dteDecisionToRefer().setValue(null);
		form.txtPathwayId().setValue(null);
		form.lyrDetails().tabClinicalDetails().txtClinicalDetails().setValue(null);
		form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getRows().clear();

		form.lblRecordingUser().setValue("");
		form.lblRecordingDateTime().setValue("");

		form.getLocalContext().setDocumentsCollection(null);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		form.getGlobalContext().Clinical.setSaveInternalReferralNote(FormMode.EDIT.equals(form.getMode()) ? true : false); //WDEV-19163 
		tabSelection(form.getLocalContext().getSelectedTab()); //WDEV-19163 
	}

	private void updateControlsState()
	{
		InternalReferralStatus status = form.getLocalContext().getSelectedReferral() != null ? form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus() : null;
		ClinicalReferralType referralType = form.getLocalContext().getSelectedReferral() != null ? form.getLocalContext().getSelectedReferral().getReferralType() : null;
		ServiceConfigIntReferralForReferralVo referToService = form.getLocalContext().getSelectedReferral() != null ? form.getLocalContext().getSelectedReferral().getReferToService() : null;
		
		boolean enableGroup = ClinicalReferralType.IP_TO_BE_SEEN_AS_OUTPATIENT.equals(form.cmbReferralType().getValue()) || ClinicalReferralType.OP_TO_BE_SEEN_AS_OUTPATIENT.equals(form.cmbReferralType().getValue());
		boolean showRejectionReason = form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getCurrentReferralStatus() != null && InternalReferralStatus.REJECTED.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus());
		boolean showCurrentStatusLabels = form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getID_ClinicalReferrals() != null;
		boolean showAuthorisedLabels = form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getAuthorisingInfo() != null;
		boolean showNewButton = form.getLocalContext().getSelectedReferral() == null;
		boolean showEditButton = form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getID_ClinicalReferrals() != null;
		boolean serviceAllowsHcp = form.qmbReferToService().getValue() == null || (form.qmbReferToService().getValue() != null && !Boolean.TRUE.equals(form.qmbReferToService().getValue().getNoHCPAllowedForService()));
		boolean disableGroupAuthorisation = form.getLocalContext().getHcpUser() != null || (form.qmbReferToService().getValue() != null && Boolean.TRUE.equals(form.qmbReferToService().getValue().getRequiresHcpAuthorisation()));
		boolean enableViewReferralLetterButton = (form.getLocalContext().getSelectedReferral() == null && FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getDocumentsCollection() != null && form.getLocalContext().getDocumentsCollection().size() > 0 ) || (form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getReferralDocument() != null && form.getLocalContext().getSelectedReferral().getReferralDocument().size() > 0) ;
		//WDEV-19002
		boolean enableGroupAuthorisation = form.getLocalContext().getSelectedReferral() == null || (form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getCurrentReferralStatus() != null && (InternalReferralStatus.AWAITING_ACCEPTANCE.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus()) || InternalReferralStatus.AWAITING_AUTHORISATION.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus())));
		
		boolean allowAttachLetterForStatus = form.getLocalContext().getSelectedReferral() != null && (form.getLocalContext().getSelectedReferral().getReferralDocument() == null  || form.getLocalContext().getSelectedReferral().getReferralDocument().size() == 0) && form.getLocalContext().getSelectedReferral().getCurrentReferralStatus() != null 
		&& (InternalReferralStatus.AWAITING_REFERRAL_LETTER.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus())
		|| InternalReferralStatus.AWAITING_AUTHORISATION.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus())
		|| InternalReferralStatus.AWAITING_ACCEPTANCE.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus())
		|| InternalReferralStatus.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus())
		|| InternalReferralStatus.SECOND_OPINION_REQUIRED.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus()));
		
		boolean showAddLinkButton = (form.getLocalContext().getSelectedReferral() == null && (form.getLocalContext().getDocumentsCollection() == null || form.getLocalContext().getDocumentsCollection().size() == 0 )) || allowAttachLetterForStatus;
		boolean showAcceptRejectSecondOpinionButtons = form.getLocalContext().getHcpUser() != null || (form.getLocalContext().getHcpUser() == null && referToService != null && Boolean.TRUE.equals(referToService.getNonHcpAcceptance()));

		form.cmbReferralType().setEnabled(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.getLocalContext().getPatientIsInpatient()));
		form.qmbReferringHcp().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.qmbReferringService().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.qmbReferToHcp().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.qmbReferToService().getValue() != null && serviceAllowsHcp);
		form.qmbReferToService().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getSelectedReferral() == null);

		form.GroupUrgent().setVisible(enableGroup);
		form.lblUrgent().setVisible(enableGroup);
		form.GroupUrgent().setEnabled(GroupUrgentEnumeration.rdoNo, FormMode.EDIT.equals(form.getMode()) && enableGroup);
		form.GroupUrgent().setEnabled(GroupUrgentEnumeration.rdoYes, FormMode.EDIT.equals(form.getMode()) && enableGroup);
		form.txtUrgentMandatory().setEnabled(FormMode.EDIT.equals(form.getMode()) && enableGroup);
		

		form.GroupCondition().setVisible(enableGroup);
		form.lblNewCondition1().setVisible(enableGroup);
		form.lblNewCondition2().setVisible(enableGroup);
		form.GroupCondition().setEnabled(GroupConditionEnumeration.rdoNoCondition, FormMode.EDIT.equals(form.getMode()) && enableGroup);
		form.GroupCondition().setEnabled(GroupConditionEnumeration.rdoYesCondition, FormMode.EDIT.equals(form.getMode()) && enableGroup);
		form.txtConditionMandatory().setEnabled(FormMode.EDIT.equals(form.getMode()) && enableGroup);

		form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setVisible(form.getLocalContext().getHcpUser() == null && form.qmbReferToService().getValue() != null);
		form.lyrDetails().tabClinicalDetails().lblAuthorisation1().setVisible(form.getLocalContext().getHcpUser() == null && form.qmbReferToService().getValue() != null);
		form.lyrDetails().tabClinicalDetails().lblAuthorisation2().setVisible(form.getLocalContext().getHcpUser() == null && form.qmbReferToService().getValue() != null);
		form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setEnabled(FormMode.EDIT.equals(form.getMode()) && enableGroupAuthorisation && !disableGroupAuthorisation);
		form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setEnabled(GroupAuthorisationEnumeration.rdoYesAuthorisation, FormMode.EDIT.equals(form.getMode()) && enableGroupAuthorisation && !disableGroupAuthorisation);
		form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setEnabled(GroupAuthorisationEnumeration.rdoNoAuthorisation, FormMode.EDIT.equals(form.getMode()) && enableGroupAuthorisation && !disableGroupAuthorisation);
		form.lyrDetails().tabClinicalDetails().txtRequiresAuthorisationMandatory().setEnabled(FormMode.EDIT.equals(form.getMode()) && enableGroupAuthorisation && !disableGroupAuthorisation && form.qmbReferToService().getValue() != null);
		
		form.dteDecisionToRefer().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lblPathwayId().setVisible(enableGroup);
		form.txtPathwayId().setVisible(enableGroup);
		form.txtPathwayId().setEnabled(FormMode.EDIT.equals(form.getMode()) && GroupConditionEnumeration.rdoNoCondition.equals(form.GroupCondition().getValue()));

		form.lblRejectionReason().setVisible(showRejectionReason);
		form.lblRejectionReason1().setVisible(showRejectionReason); 	//WDEV-19198
		form.lblRejectionReason2().setVisible(showRejectionReason); 	//WDEV-19198
		form.lblCurrentStatus().setVisible(showCurrentStatusLabels);
		form.lblStatusText().setVisible(showCurrentStatusLabels);
		
		form.lyrDetails().tabClinicalDetails().lblAuthorisedBy().setVisible(showAuthorisedLabels);
		form.lyrDetails().tabClinicalDetails().lblAuthorisedByText().setVisible(showAuthorisedLabels);
		form.lyrDetails().tabClinicalDetails().lblAuthorisedDateTimeText().setVisible(showAuthorisedLabels);
		form.lyrDetails().tabClinicalDetails().lblAuthorisedDateTime().setVisible(showAuthorisedLabels);

		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && showNewButton);
		form.btnClose().setVisible(FormMode.VIEW.equals(form.getMode()) && engine.isDialog());
		
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && showEditButton);
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.EDIT));

		form.getContextMenus().Clinical.getInternalReferralsNotesNEWItem().setVisible(true); // WDEV-19163
		
		form.btnAddNote().setVisible(FormMode.VIEW.equals(form.getMode()) || InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()) || InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()));
		form.btnAddNote().setEnabled(form.getLocalContext().getSelectedReferral() != null);
		
		form.btnStatusHistory().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.btnStatusHistory().setEnabled(form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getHistoryOfReferralStatus() != null && form.getLocalContext().getSelectedReferral().getHistoryOfReferralStatus().size() > 0);

		form.lyrDetails().tabClinicalDetails().btnLink().setEnabled((form.getLocalContext().getSelectedReferral() == null && FormMode.EDIT.equals(form.getMode()) || form.getLocalContext().getSelectedReferral() != null) && showAddLinkButton);
		form.lyrDetails().tabClinicalDetails().btnLink().setVisible(showAddLinkButton);
		 
		form.lyrDetails().tabClinicalDetails().btnAddReferralLetter().setEnabled((form.getLocalContext().getSelectedReferral() == null && FormMode.EDIT.equals(form.getMode()) || form.getLocalContext().getSelectedReferral() != null) && showAddLinkButton);
		//WDEV-19043//WDEV-19390 
		form.lyrDetails().tabClinicalDetails().btnAddReferralLetter().setVisible(showAddLinkButton && form.getLocalContext().getReferralSettings() != null && (form.getLocalContext().getReferralSettings().getAllowScanImport() == null || (form.getLocalContext().getReferralSettings().getAllowScanImportIsNotNull() && form.getLocalContext().getReferralSettings().getAllowScanImport())));
		
		form.lyrDetails().tabClinicalDetails().btnViewReferralLetter().setVisible(!showAddLinkButton);
		form.lyrDetails().tabClinicalDetails().btnViewReferralLetter().setEnabled(enableViewReferralLetterButton);
		
		boolean showBtnSecondOpinion = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.SECOND_OPINION_REQUIRED) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.SECOND_OPINION_REQUIRED) && showAcceptRejectSecondOpinionButtons;
		form.btnReqSecondOpinion().setVisible(showBtnSecondOpinion);
		form.btnReqSecondOpinion().setEnabled(showBtnSecondOpinion);
		
		boolean showBtnAccept = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.ACCEPT) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.ACCEPT) && showAcceptRejectSecondOpinionButtons;
		form.btnAccept().setVisible(showBtnAccept);
		form.btnAccept().setEnabled(showBtnAccept);
		
		boolean showBtnReqAppt = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED) && showAcceptRejectSecondOpinionButtons; 
		form.btnAcceptReqAppt().setVisible(showBtnReqAppt);
		form.btnAcceptReqAppt().setEnabled(showBtnReqAppt);
		
		boolean showBtnReject = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.REJECT) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.REJECT) && showAcceptRejectSecondOpinionButtons;
		form.btnReject().setVisible(showBtnReject);
		form.btnReject().setEnabled(showBtnReject);
		
		boolean showBtnAcknowledgeRejection = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.REJECT_ACKNOWLEDGED) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.REJECT_ACKNOWLEDGED) && form.getLocalContext().getSelectedReferral() != null && !Boolean.TRUE.equals(form.getLocalContext().getSelectedReferral().getAcknowledgeRejection());
		form.btnAcknowledgeRejection().setVisible(showBtnAcknowledgeRejection);
		form.btnAcknowledgeRejection().setEnabled(showBtnAcknowledgeRejection);
		
		boolean showBtnCompleteAddNote = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.COMPLETE_ADD_NOTE) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.COMPLETE_ADD_NOTE);
		form.btnCompleteAddNote().setVisible(showBtnCompleteAddNote);
		form.btnCompleteAddNote().setEnabled(showBtnCompleteAddNote);
		
		boolean showBtnCompleteLinkCorrespondence = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE);
		form.btnCompleteLinkCorrespondence().setVisible(showBtnCompleteLinkCorrespondence);
		form.btnCompleteLinkCorrespondence().setEnabled(showBtnCompleteLinkCorrespondence);
		
		boolean showBtnAppointmentBooked = FormMode.VIEW.equals(form.getMode()) && (ClinicalReferralType.IP_TO_BE_SEEN_AS_OUTPATIENT.equals(referralType) || ClinicalReferralType.OP_TO_BE_SEEN_AS_OUTPATIENT.equals(referralType)) && !isDeniedAction(InternalReferralStatusAction.APPOINTMENT_BOOKED) && form.getLocalContext().getSelectedReferral() != null 
		&& form.getLocalContext().getSelectedReferral().getCurrentReferralStatus() != null && InternalReferralStatus.ACCEPTED.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus()) 
		&& Boolean.TRUE.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getAppointmentRequired()) && !Boolean.TRUE.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getAppointmentBooked());
		form.btnApptBooked().setVisible(showBtnAppointmentBooked);
		form.btnApptBooked().setEnabled(showBtnAppointmentBooked);
		
		boolean showBtnAuthorise = FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getHcpUser() != null && !isDeniedAction(InternalReferralStatusAction.SIGN_OFF) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.SIGN_OFF);
		form.btnAuthorise().setVisible(showBtnAuthorise);
		form.btnAuthorise().setEnabled(showBtnAuthorise);
		
		boolean showBtnRequiresInfo = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION);
		form.btnRequiresInfo().setVisible(showBtnRequiresInfo);
		form.btnRequiresInfo().setEnabled(showBtnRequiresInfo);
		
		boolean showBtnRecordInfo = FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION) && form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.RECORD_FURTHER_INFORMATION);
		form.btnRecordInfo().setVisible(showBtnRecordInfo);
		form.btnRecordInfo().setEnabled(showBtnRecordInfo);
		
		boolean showBtnRIE =  form.getLocalContext().getSelectedReferral() != null && FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InternalReferralStatusAction.RIE); //WDEV-19237
		form.btnRIE().setVisible(showBtnRIE);
		form.btnRIE().setEnabled(showBtnRIE);
		
		form.btnSave().setText(InternalReferralStatusAction.SIGN_OFF.equals(form.getLocalContext().getActionPressed()) ? "Authorise" : "Save");
	}

	private boolean isDeniedAction(InternalReferralStatusAction referralAction) 
	{
		if(referralAction == null)
			return false;
		
		if(form.getLocalContext().getDeniedActions() == null || form.getLocalContext().getDeniedActions().size() == 0)
			return false;
		
		for(int i=0; i<form.getLocalContext().getDeniedActions().size(); i++)
		{
			if(referralAction.equals(form.getLocalContext().getDeniedActions().get(i)))
				return true;
		}
		
		return false;
	}
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getReferralBackToGPOptionalMessageBoxId() != null && form.getLocalContext().getReferralBackToGPOptionalMessageBoxId().equals(messageBoxId))
		{
			if (DialogResult.NO.equals(result))
			{
				if (save(true, InternalReferralStatus.ABANDONED,false))	//wdev-19421
				{
					if(engine.isDialog())
					{
						engine.close(DialogResult.OK);
					}
					else
					{
						open(FormMode.VIEW);
					}
				}
			}
			else
				if (save(true, null,false))								//wdev-19421	
				{
					if(engine.isDialog())
					{
						engine.close(DialogResult.OK);
					}
					else
					{
						open(FormMode.VIEW);
					}
				}
		}
		else if (form.getLocalContext().getReferralBackToGPMandatoryMessageBoxId() != null && form.getLocalContext().getReferralBackToGPMandatoryMessageBoxId().equals(messageBoxId))
		{
			if (save(true, InternalReferralStatus.ABANDONED,false))			//wdev-19421
			{
				if(engine.isDialog())
				{
					engine.close(DialogResult.OK);
				}
				else
				{
					open(FormMode.VIEW);
				}
			}
		}
		else if (form.getLocalContext().getAppointmentBookedMessageBoxId() != null && form.getLocalContext().getAppointmentBookedMessageBoxId().equals(messageBoxId))
		{
			if (DialogResult.YES.equals(result))
			{
				appointmentBooked();
			}
		}
		//wdev-19421
		else if( form.getLocalContext().getWarningForReferralWithoutClinicalDetailsId() != null && form.getLocalContext().getWarningForReferralWithoutClinicalDetailsId().equals(messageBoxId))
		{
			if( DialogResult.YES.equals(result))
			{
				if( continueSaving( form.getLocalContext().getsaveValidatedForContinueSaving(), form.getLocalContext().getReferralForContinueSaving()) == true)
				{
					
					if( InternalReferralStatusAction.SIGN_OFF.equals(form.getLocalContext().getActionPressed()))
					{
						if(engine.isDialog())
						{
							engine.close(DialogResult.OK);
						}
						else
						{
							open(FormMode.VIEW);
						}
					}
					else if( InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
					{
						
							open(FormMode.VIEW);
					}
					else if( InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
					{
						
							open(FormMode.VIEW);
					}
					else if( form.getLocalContext().getSelectedReferral() == null && engine.isDialog())
					{
							
							engine.close(DialogResult.OK);
					}
					else 
					{

							open(FormMode.VIEW);
					}
					
				}
			}
			
			form.getLocalContext().setReferralForContinueSaving(null);
			form.getLocalContext().setsaveValidatedForContinueSaving(null);
			form.getLocalContext().setWarningForReferralWithoutClinicalDetailsId(null);
		}
		//-----------
	}

	private void appointmentBooked()
	{
		if (form.getLocalContext().getSelectedReferral() == null)
			return;
		
		updateStatusForReferral(null, InternalReferralStatus.ACCEPTED, true);
		
		if (justSave(form.getLocalContext().getSelectedReferral()))
		{
				open(FormMode.VIEW);
		}
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		boolean isAwaitingReferralLetter = form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getCurrentReferralStatus() != null 
		&& InternalReferralStatus.AWAITING_REFERRAL_LETTER.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus());
		
		InternalReferralStatus statusToSave = isAwaitingReferralLetter ? InternalReferralStatus.AWAITING_ACCEPTANCE : null;
		
		if (Boolean.TRUE.equals(form.getLocalContext().getMarkCompleteForDocument()))
		{
			statusToSave = InternalReferralStatus.COMPLETED;
		}
		
		if (formName.equals(form.getForms().Clinical.InternalReferralsDocumentsView))
		{
			if (form.getGlobalContext().Core.getPatientDocumentsCollectionForClinicalReferral() != null && form.getGlobalContext().Core.getPatientDocumentsCollectionForClinicalReferral().size() > 0)
			{
				PatientDocumentVoCollection documentsColl = form.getGlobalContext().Core.getPatientDocumentsCollectionForClinicalReferral();

				if (form.getLocalContext().getDocumentsCollection() == null)
				{
					form.getLocalContext().setDocumentsCollection(new PatientDocumentVoCollection());
				}

				for (int i = 0; i < documentsColl.size(); i++)
				{
					form.getLocalContext().getDocumentsCollection().add(documentsColl.get(i));
				}

				if (FormMode.VIEW.equals(form.getMode()))
				{
					if (save(true, statusToSave,true))			//wdev-19421
						open(FormMode.VIEW);
				}
			}
		}
		else if (formName.equals(form.getForms().Clinical.PatientDocumentSearchDialog))
		{
			form.getLocalContext().setMarkCompleteForDocument(null);
				
			if ((DialogResult.OK.equals(result)) && form.getGlobalContext().Clinical.getLinkedPatientDocument() != null)
			{
				PatientDocumentVo document = domain.getPatientDocument(form.getGlobalContext().Clinical.getLinkedPatientDocument());

				if (form.getLocalContext().getDocumentsCollection() == null)
				{
					form.getLocalContext().setDocumentsCollection(new PatientDocumentVoCollection());
				}
				else
					form.getLocalContext().getDocumentsCollection().clear();

				form.getLocalContext().getDocumentsCollection().add(document);

				if (FormMode.VIEW.equals(form.getMode()))
				{
					if (save(true, statusToSave,true))			//wdev-19421
					{
						if (engine.isDialog() && InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE.equals(form.getLocalContext().getActionPressed()))
						{
							engine.close(DialogResult.OK);
						}
						else
							open(FormMode.VIEW);
					}
				}
			}
		}
		else if(form.getForms().Clinical.InternalReferralsRejectionDialog.equals(formName))
		{
			if (engine.isDialog() && DialogResult.OK.equals(result) && InternalReferralStatusAction.REJECT.equals(form.getLocalContext().getActionPressed()))
			{
				engine.close(DialogResult.OK);
			}
			else
				open(FormMode.VIEW);
		} 
		else if (form.getForms().Clinical.InternalReferralsEditNoteDialog.equals(formName))
		{
			boolean canCloseDialogForAction = InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()) || InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()) 
			|| InternalReferralStatusAction.SECOND_OPINION_REQUIRED.equals(form.getLocalContext().getActionPressed()) || InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED.equals(form.getLocalContext().getActionPressed())
			|| InternalReferralStatusAction.COMPLETE_ADD_NOTE.equals(form.getLocalContext().getActionPressed()); 
			
			if (engine.isDialog() && DialogResult.OK.equals(result) && canCloseDialogForAction)
			{
				if (InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
				{
					engine.showMessage("Further Information saved.", "", MessageButtons.OK, MessageIcon.WARNING);
				}
				else if (InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
				{
					engine.showMessage("Further Information requirements saved.", "", MessageButtons.OK, MessageIcon.WARNING);
				}
				
				engine.close(DialogResult.OK);
				return;
			}
			
			//WDEV-19163
			form.getLocalContext().setSelectedReferral(domain.getClinicalReferral(form.getGlobalContext().Clinical.getClinicalReferralRef()));
			tabSelection(form.getLocalContext().getSelectedTab());
			
		}
		else if (form.getForms().Core.RieConfirmationDialog.equals(formName))
		{
			if (DialogResult.OK.equals(result))
			{
				if (markAsRIE() && engine.isDialog())
					engine.close(DialogResult.OK);
				else
					open(FormMode.VIEW);
			}
		}
			

		updateControlsState();
	}

	private boolean markAsRIE()
	{

        ClinicalReferralsVo clinicalReferral = domain.getClinicalReferral(form.getLocalContext().getSelectedReferral());
        
        //record made RIE from another session
		if (clinicalReferral == null && form.getLocalContext().getSelectedReferral() != null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		} 
		//check record changed from another session
		else if (clinicalReferral.getVersion_ClinicalReferrals() != form.getLocalContext().getSelectedReferral().getVersion_ClinicalReferrals())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;

		}
        
		try 
		{
			if (clinicalReferral.getClinicalReferralNotes() != null	&& clinicalReferral.getClinicalReferralNotes().size() > 0) 
			{
				for (int i = 0; i < clinicalReferral.getClinicalReferralNotes().size(); i++) 
				{
					if (engine.isDialog())
					{
						domain.markAsRie(clinicalReferral.getClinicalReferralNotes().get(i), form.getForms().Clinical.InternalReferralDialog, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, null, form.getGlobalContext().Core.getRieMessage());
					}
					else
					{
						domain.markAsRie(clinicalReferral.getClinicalReferralNotes().get(i), form.getForms().Clinical.InternalReferral, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, null, form.getGlobalContext().Core.getRieMessage());
					}
						
				}
			}
			
			if (engine.isDialog())
			{
				domain.markAsRie(clinicalReferral, form.getForms().Clinical.InternalReferralDialog, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, null, form.getGlobalContext().Core.getRieMessage());
			}
			else
				domain.markAsRie(clinicalReferral, form.getForms().Clinical.InternalReferral, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, null, form.getGlobalContext().Core.getRieMessage());
			
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(FormMode.VIEW); // WDEV-19237
			return false;
		}
		
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getSelectedReferral() == null && engine.isDialog())
		{
			engine.close(DialogResult.CANCEL);
		}
		else
		{
			open(FormMode.VIEW);
			tabSelection(form.getLocalContext().getSelectedTab()); //WDEV-19163 
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (InternalReferralStatusAction.SIGN_OFF.equals(form.getLocalContext().getActionPressed()))
		{
			if (save(true, InternalReferralStatus.AWAITING_ACCEPTANCE, true))		//wdev-19421
			{
				if(engine.isDialog())
				{
					engine.close(DialogResult.OK);
				}
				else
				{
					open(FormMode.VIEW);
				}
			}
		}
		else if (InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
		{
			if (save(true, InternalReferralStatus.REQUIRES_FURTHER_INFORMATION, true))	//wdev-19421
				open(FormMode.VIEW);
		}
		else if (InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
		{
			if (save(true, InternalReferralStatus.AWAITING_ACCEPTANCE, true))			//wdev-19421
				open(FormMode.VIEW);
		}
		else if (form.getLocalContext().getSelectedReferral() == null && engine.isDialog())
		{
				if (save(false, null,true))			//wdev-19421
					engine.close(DialogResult.OK);
		}
		else if (save(false, null,true))			//wdev-19421
				open(FormMode.VIEW);

	}

	private boolean save(boolean saveValidated, InternalReferralStatus statusToSet, boolean firstTimeSaveNoClinDet)
	{
		ClinicalReferralsVo clinicalReferral = populateDataFromScreen(form.getLocalContext().getSelectedReferral(), statusToSet, false);
		
		String[] errors = clinicalReferral.validate(validateUiRules(clinicalReferral));

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		
		//wdev-19421
		if( firstTimeSaveNoClinDet == true && clinicalReferral != null && !clinicalReferral.getReasonForReferralIsNotNull() && (!clinicalReferral.getReferralDocumentIsNotNull() || (clinicalReferral.getReferralDocumentIsNotNull() && clinicalReferral.getReferralDocument().size() == 0)))
		{
			form.getLocalContext().setReferralForContinueSaving(clinicalReferral);
			form.getLocalContext().setsaveValidatedForContinueSaving(saveValidated);
			form.getLocalContext().setReferralBackToGPOptionalMessageBoxId(null);
			form.getLocalContext().setAppointmentBookedMessageBoxId(null);
			form.getLocalContext().setWarningForReferralWithoutClinicalDetailsId(engine.showMessage("You have not added any Clinical Details to this Internal Referral. It will not be sent.  Continue to save ?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			return false;
		}
			
		
		if( continueSaving(saveValidated, clinicalReferral) == true)  //wdev-19421
			return true;
		else
			return false;
		

	}
	//wdev-19421
	private boolean continueSaving( boolean saveValidated, ClinicalReferralsVo clinicalReferral)
	{
		if( clinicalReferral == null )
			return false;
		
		if (!saveValidated && !Boolean.TRUE.equals(clinicalReferral.getUrgentReferral()) && Boolean.TRUE.equals(clinicalReferral.getNewCondition()) && form.getLocalContext().getReferralSettings() != null)
		{
			if (InternalReferralConditionalReferralToGP.OPTIONAL.equals(form.getLocalContext().getReferralSettings().getNewConditionReferralBackToGP()))
			{
				form.getLocalContext().setReferralBackToGPOptionalMessageBoxId(engine.showMessage(form.getLocalContext().getReferralSettings().getReferralBackToGPOptionalMessage(), "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
				return false;
			}
			else if (InternalReferralConditionalReferralToGP.MANDATORY.equals(form.getLocalContext().getReferralSettings().getNewConditionReferralBackToGP()))
			{
				form.getLocalContext().setReferralBackToGPMandatoryMessageBoxId(engine.showMessage(form.getLocalContext().getReferralSettings().getReferralBackToGPMandatoryMessage(), "Warning", MessageButtons.OK, MessageIcon.WARNING));
				return false;
			}
		}
		
		try
		{
			clinicalReferral = domain.saveClinicalReferral(clinicalReferral);
		}

		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(FormMode.VIEW);
			return false;
		}

		form.getLocalContext().setSelectedReferral(clinicalReferral);
		form.getGlobalContext().Clinical.setClinicalReferralRef(clinicalReferral);

		return true;
	}
	//-----------

	private String[] validateUiRules(ClinicalReferralsVo clinicalReferral)
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		boolean referralHasLetter = (clinicalReferral != null && clinicalReferral.getReferralDocument() != null && clinicalReferral.getReferralDocument().size() > 0) || (form.getLocalContext().getDocumentsCollection() != null && form.getLocalContext().getDocumentsCollection().size() > 0);
		
		if (form.dteDecisionToRefer().getValue() != null && form.dteDecisionToRefer().getValue().isGreaterThan(new Date()))
		{
			listOfErrors.add("Date Decision To Refer cannot be in the future");
		}
		
		if (ClinicalReferralType.IP_TO_BE_SEEN_AS_INPATIENT.equals(form.cmbReferralType().getValue()) && form.lyrDetails().tabClinicalDetails().txtClinicalDetails().getValue() == null && !referralHasLetter)
		{
			listOfErrors.add("Please complete Clinical Details or attach a Referral Letter");
		}
		
		if (form.qmbReferringHcp().getValue() != null && form.qmbReferToHcp().getValue() != null && form.qmbReferringHcp().getValue().equals(form.qmbReferToHcp().getValue()))
		{
			listOfErrors.add("Referring HCP and Refer To HCP cannot have the same values");
		}
		
		if (GroupUrgentEnumeration.None.equals(form.GroupUrgent().getValue()) && form.GroupUrgent().isEnabled(GroupUrgentEnumeration.rdoYes))
		{
			listOfErrors.add("Urgent is mandatory");
		}

		if (GroupConditionEnumeration.None.equals(form.GroupCondition().getValue()) && form.GroupCondition().isEnabled(GroupConditionEnumeration.rdoYesCondition))
		{
			listOfErrors.add("Is referral for a new condition is mandatory");
		}

		if (GroupAuthorisationEnumeration.None.equals(form.lyrDetails().tabClinicalDetails().GroupAuthorisation().getValue()) && form.lyrDetails().tabClinicalDetails().GroupAuthorisation().isEnabled(GroupAuthorisationEnumeration.rdoYesAuthorisation))
		{
			listOfErrors.add("Requires Authorisation is mandatory");
		}

		if (clinicalReferral != null)
		{
			getMandatoryQuestionErrors(listOfErrors, clinicalReferral.getServiceSpecificAnswers());
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		return result;
	}

	private void getMandatoryQuestionErrors(ArrayList<String> errors, PatientAssessmentQuestionVoCollection voColl)
	{

		for (int j = 0; voColl != null && j < voColl.size(); j++)
		{
			PatientAssessmentQuestionVo assessmentQuestion = voColl.get(j);

			QuestionInformationVo question = assessmentQuestion.getAssessmentQuestion().getQuestion();

			boolean isQuestion = question.getIsQuestion().booleanValue();
			boolean isMandatory = assessmentQuestion.getIsMandatory();

			if (isQuestion)
			{
				if (isMandatory)
				{
					if (hasMandatoryAnswers(assessmentQuestion))
					{
						ArrayList<String> mandatoryAnswers = getMandatoryAnswers(assessmentQuestion);
						if (mandatoryAnswers != null && mandatoryAnswers.size() > 0)
						{

							String header = "'" + question.getText() + "' - " + (mandatoryAnswers.size() > 1 ? " Answers are mandatory" : " An answer is mandatory");
							for (String answ : mandatoryAnswers)
							{
								if (answ != null && answ.length() > 0)
								{
									header += " - ";
									break;
								}
							}
							mandatoryAnswers.add(0, header);
							errors.add(getAnswersFlat(mandatoryAnswers));
						}
					}
					else if (isHasAtLeastOneAnswer(assessmentQuestion.getPatientAnswers()) == false)
					{
						errors.add("'" + question.getText() + "'" + " - At least one answer is mandatory");
					}
				}
				else
				{
					if (isHasAtLeastOneAnswer(assessmentQuestion.getPatientAnswers()) && hasMandatoryAnswers(assessmentQuestion))
					{
						ArrayList<String> mandatoryAnswers = getMandatoryAnswers(assessmentQuestion);

						if (mandatoryAnswers != null && mandatoryAnswers.size() > 0)
						{
							String header = "'" + question.getText() + "' - " + (mandatoryAnswers.size() > 1 ? " Answers are mandatory" : " An answer is mandatory");
							for (String answ : mandatoryAnswers)
							{
								if (answ != null && answ.length() > 0)
								{
									header += " - ";
									break;
								}
							}

							mandatoryAnswers.add(0, header);
							errors.add(getAnswersFlat(mandatoryAnswers));
						}
					}
				}
			}
		}

	}

	private boolean isHasAtLeastOneAnswer(PatientAssessmentAnswerVoCollection patientAnswers)
	{
		if (patientAnswers == null || patientAnswers.size() == 0)
			return false;

		for (int i = 0; i < patientAnswers.size(); i++)
		{
			for (int j = 0; j < patientAnswers.get(i).getAnswerDetails().size(); j++)
			{
				if (isAnswered(patientAnswers.get(i).getAnswerDetails().get(j)))
					return true;
			}
		}
		return false;
	}

	private String getAnswersFlat(ArrayList<String> mandatoryAnswers)
	{
		StringBuffer sb = new StringBuffer();
		for (int i = 0; mandatoryAnswers != null && i < mandatoryAnswers.size(); i++)
			sb.append(mandatoryAnswers.get(i));

		return sb.toString();
	}

	private ArrayList<String> getMandatoryAnswers(PatientAssessmentQuestionVo assessmentQuestion)
	{
		ArrayList<String> errors = null;
		String separator = ", ";

		for (int j = 0; j < assessmentQuestion.getPatientAnswers().size(); j++)
		{
			PatientAssessmentAnswerVo voPAA = assessmentQuestion.getPatientAnswers().get(j);
			for (int k = 0; k < voPAA.getAnswerDetails().size(); k++)
			{
				// Check if answer is mandatory
				if (voPAA.getAnswerDetails().get(k).getAnswerType().getIsMandatoryIsNotNull() && voPAA.getAnswerDetails().get(k).getAnswerType().getIsMandatory().booleanValue())
				{
					if (isAnswered(voPAA.getAnswerDetails().get(k)) == false)
					{
						if (errors == null)
							errors = new ArrayList<String>();

						// Add the mandatory validation message only if not null or size > 0 
						errors.add(voPAA.getAnswerDetails().get(k).getAnswerType().getMandatoryValMessageIsNotNull() && voPAA.getAnswerDetails().get(k).getAnswerType().getMandatoryValMessage().trim().length() > 0 ? voPAA.getAnswerDetails().get(k).getAnswerType().getMandatoryValMessage() : "");
						errors.add(voPAA.getAnswerDetails().get(k).getAnswerType().getMandatoryValMessageIsNotNull() && voPAA.getAnswerDetails().get(k).getAnswerType().getMandatoryValMessage().trim().length() > 0 ? separator : "");
					}
				}
			}
		}

		// Remove last separator ", "
		if (errors != null && errors.size() > 0)
			errors.remove(errors.size() - 1);

		return errors;
	}

	private boolean isAnswered(AnswerDetailsVo answerDetail)
	{
		if (answerDetail == null || answerDetail.getAnswerType() == null || answerDetail.getAnswerType().getAnswerType() == null)
			return false;

		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.DATE))
			return answerDetail.getDateAnswerIsNotNull();
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.DECIMAL))
			return answerDetail.getDecimalAnswerIsNotNull();
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.INTEGER))
			return answerDetail.getIntegerAnswerIsNotNull();
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.MULTISELECT))
			return answerDetail.getMultiSelectAnswersIsNotNull() && answerDetail.getMultiSelectAnswers().size() > 0;
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.PARTIALDATE))
			return answerDetail.getPartialDateIsNotNull();
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.PICKLIST))
			return answerDetail.getPicklistIsNotNull();
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.TEXT))
			return answerDetail.getStringAnswerIsNotNull() && answerDetail.getStringAnswer().trim().length() > 0;
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.TIME))
			return answerDetail.getTimeAnswerIsNotNull();
		if (answerDetail.getAnswerType().getAnswerType().equals(QuestionAnswerType.YESNO))
			return answerDetail.getBoolValueAnswerIsNotNull();

		return false;
	}

	private boolean hasMandatoryAnswers(PatientAssessmentQuestionVo assessmentQuestion)
	{
		if (assessmentQuestion == null)
			return false;

		for (int j = 0; j < assessmentQuestion.getPatientAnswers().size(); j++)
		{
			PatientAssessmentAnswerVo voPAA = assessmentQuestion.getPatientAnswers().get(j);
			for (int k = 0; k < voPAA.getAnswerDetails().size(); k++)
			{
				if (voPAA.getAnswerDetails().get(k).getAnswerType().getIsMandatoryIsNotNull() && voPAA.getAnswerDetails().get(k).getAnswerType().getIsMandatory().booleanValue())
				{
					return true;
				}
			}
		}

		return false;
	}

	private ClinicalReferralsVo populateDataFromScreen(ClinicalReferralsVo clinicalReferral, InternalReferralStatus statusToSet, Boolean noStatusUpdate)
	{
		if (clinicalReferral == null)
		{
			clinicalReferral = new ClinicalReferralsVo();
			clinicalReferral.setClinicalReferralNotes(form.getGlobalContext().Clinical.getClinicalReferraNotes()); //WDEV-19163 
		}
		
		if (clinicalReferral != null && Boolean.TRUE.equals(form.getGlobalContext().Clinical.getSaveInternalReferralNote()))
			clinicalReferral.setClinicalReferralNotes(form.getGlobalContext().Clinical.getClinicalReferraNotes()); //WDEV-19163 
		

		clinicalReferral.setPatient(form.getGlobalContext().Core.getPatientShort());
		clinicalReferral.setReferralType(form.cmbReferralType().getValue());

		ClinicalReferralStatusVo referralStatus = updateStatus(clinicalReferral.getCurrentReferralStatus(), statusToSet, noStatusUpdate);

		if (referralStatus != null)
		{
			clinicalReferral.setCurrentReferralStatus(referralStatus);

			if (clinicalReferral.getHistoryOfReferralStatus() == null)
			{
				clinicalReferral.setHistoryOfReferralStatus(new ClinicalReferralStatusVoCollection());
			}

			clinicalReferral.getHistoryOfReferralStatus().add(referralStatus);
		}

		clinicalReferral.setReferringHCP(form.qmbReferringHcp().getValue());
		clinicalReferral.setReferringService(form.qmbReferringService().getValue());
		clinicalReferral.setReferToService(form.qmbReferToService().getValue());
		clinicalReferral.setReferToHCP(form.qmbReferToHcp().getValue());

		if (clinicalReferral.getRecordingInfo() == null)
		{
			RecordingUserInformationVo userInformation = new RecordingUserInformationVo();

			userInformation.setRecordingDateTime(new DateTime());
			userInformation.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());

			clinicalReferral.setRecordingInfo(userInformation);
		}

		if (InternalReferralStatusAction.SIGN_OFF.equals(form.getLocalContext().getActionPressed()))
		{
			RecordingUserInformationVo userInformation = new RecordingUserInformationVo();

			userInformation.setRecordingDateTime(new DateTime());
			userInformation.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());

			clinicalReferral.setAuthorisingInfo(userInformation);
		}
		
		
		if (GroupUrgentEnumeration.rdoYes.equals(form.GroupUrgent().getValue()))
		{
			clinicalReferral.setUrgentReferral(true);
		}
		else if (GroupUrgentEnumeration.rdoNo.equals(form.GroupUrgent().getValue()))
		{
			clinicalReferral.setUrgentReferral(false);
		}

		if (GroupConditionEnumeration.rdoYesCondition.equals(form.GroupCondition().getValue()))
		{
			clinicalReferral.setNewCondition(true);
		}
		else if (GroupConditionEnumeration.rdoNoCondition.equals(form.GroupCondition().getValue()))
		{
			clinicalReferral.setNewCondition(false);
		}

		if (GroupAuthorisationEnumeration.rdoYesAuthorisation.equals(form.lyrDetails().tabClinicalDetails().GroupAuthorisation().getValue()))
		{
			clinicalReferral.setRequiresAuthorisation(true);
		}
		else if (GroupAuthorisationEnumeration.rdoNoAuthorisation.equals(form.lyrDetails().tabClinicalDetails().GroupAuthorisation().getValue()))
		{
			clinicalReferral.setRequiresAuthorisation(false);
		}

		clinicalReferral.setDateDecisionToRefer(form.dteDecisionToRefer().getValue());
		clinicalReferral.setPathwayID(form.txtPathwayId().getValue());
		clinicalReferral.setReasonForReferral(form.lyrDetails().tabClinicalDetails().txtClinicalDetails().getValue());

		// add documents
		if (form.getLocalContext().getDocumentsCollection() != null && form.getLocalContext().getDocumentsCollection().size() > 0)
		{
			PatientDocumentVoCollection documentsColl = form.getLocalContext().getDocumentsCollection();

			if (clinicalReferral.getReferralDocument() == null)
				clinicalReferral.setReferralDocument(new PatientDocumentRefVoCollection());

			for (int i = 0; i < documentsColl.size(); i++)
			{
				clinicalReferral.getReferralDocument().add(documentsColl.get(i));
			}
		}

		// add Question Answers
		clinicalReferral.setServiceSpecificAnswers(getAnswers(clinicalReferral.getServiceSpecificAnswers()));

		return clinicalReferral;
	}

	private PatientAssessmentQuestionVoCollection getAnswers(PatientAssessmentQuestionVoCollection serviceSpecificAnswers)
	{

		if (serviceSpecificAnswers == null)
			serviceSpecificAnswers = new PatientAssessmentQuestionVoCollection();
		else
			serviceSpecificAnswers.clear();

		int questionsGridSize = form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getRows().size();

		for (int i = 0; i < questionsGridSize; i++)
		{
			DynamicGridRow row = form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getRows().get(i);

			Object questionIndetifier = row.getIdentifier();

			if (questionIndetifier instanceof AssessmentQuestionVo)
			{
				PatientAssessmentQuestionVo questionAnwer = getQuestionAnswer(row);

				if (questionAnwer != null)
					serviceSpecificAnswers.add(questionAnwer);
			}
		}

		return serviceSpecificAnswers;
	}

	private PatientAssessmentQuestionVo getQuestionAnswer(DynamicGridRow row)
	{
		if (row == null)
			return null;

		if (row.getIdentifier() instanceof AssessmentQuestionVo)
		{
			PatientAssessmentQuestionVo vo = new PatientAssessmentQuestionVo();
			vo.setAssessmentQuestion((AssessmentQuestionVo) row.getIdentifier());
			vo.setIsMandatory(((AssessmentQuestionVo) row.getIdentifier()).getIsMandatory());
			vo.setPatientAnswers(getPatientAnswers(row));

			vo.setAllowsMultipleAnswers(Boolean.TRUE.equals(((AssessmentQuestionVo) row.getIdentifier()).getAllowsMultipleAnswers()) ? Boolean.TRUE : Boolean.FALSE);
			vo.setSequence(((AssessmentQuestionVo) row.getIdentifier()).getSequence());
			vo.setIsAnswered(AnswerStatus.NOTAPPLICABLE);

			return vo;
		}

		return null;
	}

	private PatientAssessmentAnswerVoCollection getPatientAnswers(DynamicGridRow gridRow)
	{
		PatientAssessmentAnswerVoCollection patientAssAnswerColl = new PatientAssessmentAnswerVoCollection();
		AnswerDetailsVoCollection answerDetails = new AnswerDetailsVoCollection();

		PatientAssessmentAnswerVo voPatientAssessmentAnswer = new PatientAssessmentAnswerVo();

		for (int x = 0; x < form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().size(); x++)
		{
			DynamicGridCell cell = gridRow.getCells().get(form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().get(x));

			if (cell != null && !cell.getType().equals(DynamicCellType.EMPTY) && cell.getIdentifier() != null && (cell.getIdentifier() instanceof QuestionAnswerTypeVo || cell.getIdentifier() instanceof AnswerCellData))
			{
				answerDetails.add(getCellAnswer(cell));
			}
		}

		voPatientAssessmentAnswer.setAnswerDetails(answerDetails);
		patientAssAnswerColl.add(voPatientAssessmentAnswer);

		return patientAssAnswerColl;
	}

	private AnswerDetailsVo getCellAnswer(DynamicGridCell cell)
	{
		if (cell == null)
			return null;

		AnswerDetailsVo answerDetails = null;
		QuestionAnswerTypeVo config = null;

		if (cell.getIdentifier() instanceof AnswerCellData)
		{
			answerDetails = ((AnswerCellData) cell.getIdentifier()).getInstData();
			config = ((AnswerCellData) cell.getIdentifier()).getConfigData();
		}
		else if (cell.getIdentifier() instanceof QuestionAnswerTypeVo)
		{
			config = (QuestionAnswerTypeVo) cell.getIdentifier();
		}

		if (answerDetails == null)
			answerDetails = new AnswerDetailsVo();

		answerDetails.setAnswerType(config);

		if (cell.getType() == DynamicCellType.ANSWER)
		{
			if (cell.getValue() == null)
			{
				answerDetails.setBoolValueAnswer(null);
			}
			else
			{
				if (cell.getValue().equals(this.optionYes))
					answerDetails.setBoolValueAnswer(Boolean.TRUE);
				else
					answerDetails.setBoolValueAnswer(Boolean.FALSE);
			}
		}
		else if (cell.getType() == DynamicCellType.COMMENT)
		{
			answerDetails.setAnswerWidth(new Integer(cell.getWidth()));
			answerDetails.setStringAnswer((String) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.DATE)
		{
			answerDetails.setDateAnswer((Date) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.PARTIALDATE)
		{
			answerDetails.setPartialDate((PartialDate) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.DECIMAL)
		{
			answerDetails.setDecimalAnswer((Float) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.ENUMERATION)
		{
			answerDetails.setAnswerWidth(new Integer(cell.getWidth()));
			answerDetails.setPicklist((AnswerOptionVo) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.INT)
		{
			answerDetails.setIntegerAnswer((Integer) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.STRING)
		{
			answerDetails.setAnswerWidth(new Integer(cell.getWidth()));
			answerDetails.setStringAnswer((String) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.TIME)
		{
			answerDetails.setTimeAnswer((Time) cell.getValue());
		}
		else if (cell.getType() == DynamicCellType.WRAPTEXT)
		{
			answerDetails.setAnswerWidth(new Integer(cell.getWidth()));
			answerDetails.setStringAnswer(cell.getValue() != null ? (String) cell.getValue() : "");
		}
		else if (cell.getType() == DynamicCellType.MULTISELECT)
		{
			answerDetails.setAnswerWidth(new Integer(cell.getWidth()));
			answerDetails.setMaxMultiselectAllowed(cell.getMaxCheckedItemsForMultiSelect());
			answerDetails.setMultiSelectAnswers(getCellMultiAnswer(cell));
		}

		return answerDetails;
	}

	private AnswerOptionVoCollection getCellMultiAnswer(DynamicGridCell cell)
	{
		if (!cell.getType().equals(DynamicCellType.MULTISELECT))
			throw new CodingRuntimeException("Multiple answer should be collected only for multiselect cells");

		AnswerOptionVoCollection result = new AnswerOptionVoCollection();

		for (int x = 0; x < cell.getItems().size(); x++)
		{
			if (cell.getItems().get(x).isChecked())
			{
				result.add((AnswerOptionVo) cell.getItems().get(x).getIdentifier());
			}
		}

		return result;
	}

	private ClinicalReferralStatusVo updateStatus(ClinicalReferralStatusVo currentReferralStatus, InternalReferralStatus statusToSet, Boolean noStatusUpdate)
	{
		if (Boolean.TRUE.equals(noStatusUpdate))
			return null;
		
		if (currentReferralStatus == null)
		{
			currentReferralStatus = new ClinicalReferralStatusVo();
		}

		if (statusToSet != null)
		{
			currentReferralStatus = new ClinicalReferralStatusVo();
			currentReferralStatus.setReferralStatus(statusToSet);
			
			if (InternalReferralStatus.ACCEPTED.equals(statusToSet))
			{
				boolean isOutpatientReferral = ClinicalReferralType.IP_TO_BE_SEEN_AS_OUTPATIENT.equals(form.cmbReferralType().getValue()) || ClinicalReferralType.OP_TO_BE_SEEN_AS_OUTPATIENT.equals(form.cmbReferralType().getValue());
				currentReferralStatus.setAppointmentRequired(isOutpatientReferral ? Boolean.TRUE : Boolean.FALSE);
			}
		}
		else if (form.getLocalContext().getSelectedReferral() == null || (form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getCurrentReferralStatus() != null && (InternalReferralStatus.AWAITING_REFERRAL_LETTER.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus()) || ( Boolean.TRUE.equals(form.getLocalContext().getRequiresAuthorisationChanged()) && (InternalReferralStatus.AWAITING_AUTHORISATION.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus()) || InternalReferralStatus.AWAITING_ACCEPTANCE.equals(form.getLocalContext().getSelectedReferral().getCurrentReferralStatus().getReferralStatus()))))) )
		{
			boolean isOutpatientReferral = ClinicalReferralType.IP_TO_BE_SEEN_AS_OUTPATIENT.equals(form.cmbReferralType().getValue()) || ClinicalReferralType.OP_TO_BE_SEEN_AS_OUTPATIENT.equals(form.cmbReferralType().getValue());
			boolean referralHasLetter = (form.getLocalContext().getSelectedReferral() != null && form.getLocalContext().getSelectedReferral().getReferralDocument() != null && form.getLocalContext().getSelectedReferral().getReferralDocument().size() > 0) || (form.getLocalContext().getDocumentsCollection() != null && form.getLocalContext().getDocumentsCollection().size() > 0);

			if (isOutpatientReferral && form.lyrDetails().tabClinicalDetails().txtClinicalDetails().getValue() == null && !referralHasLetter)
			{
				if (InternalReferralStatus.AWAITING_REFERRAL_LETTER.equals(currentReferralStatus.getReferralStatus()))
					return null;
				else
				{
					currentReferralStatus = new ClinicalReferralStatusVo();
					currentReferralStatus.setReferralStatus(InternalReferralStatus.AWAITING_REFERRAL_LETTER);
				}
			}
			else if (form.getLocalContext().getHcpUser() == null && (form.lyrDetails().tabClinicalDetails().txtClinicalDetails().getValue() != null || referralHasLetter) && GroupAuthorisationEnumeration.rdoYesAuthorisation.equals(form.lyrDetails().tabClinicalDetails().GroupAuthorisation().getValue()))
			{
				if (InternalReferralStatus.AWAITING_AUTHORISATION.equals(currentReferralStatus.getReferralStatus()))
					return null;
				else
				{
					currentReferralStatus = new ClinicalReferralStatusVo();
					currentReferralStatus.setReferralStatus(InternalReferralStatus.AWAITING_AUTHORISATION);
				}
			}
			else if (form.getLocalContext().getHcpUser() == null && (form.lyrDetails().tabClinicalDetails().txtClinicalDetails().getValue() != null || referralHasLetter) && GroupAuthorisationEnumeration.rdoNoAuthorisation.equals(form.lyrDetails().tabClinicalDetails().GroupAuthorisation().getValue()))
			{
				if (InternalReferralStatus.AWAITING_ACCEPTANCE.equals(currentReferralStatus.getReferralStatus()))
					return null;
				else
				{
					currentReferralStatus = new ClinicalReferralStatusVo();
					currentReferralStatus.setReferralStatus(InternalReferralStatus.AWAITING_ACCEPTANCE);
				}
			}
			else if (form.getLocalContext().getHcpUser() != null && (form.lyrDetails().tabClinicalDetails().txtClinicalDetails().getValue() != null || referralHasLetter))
			{
				if (InternalReferralStatus.AWAITING_ACCEPTANCE.equals(currentReferralStatus.getReferralStatus()))
					return null;
				else
				{
					currentReferralStatus = new ClinicalReferralStatusVo();
					currentReferralStatus.setReferralStatus(InternalReferralStatus.AWAITING_ACCEPTANCE);
				}
			}
			else if (GroupUrgentEnumeration.rdoYes.equals(form.GroupUrgent().getValue()) && GroupConditionEnumeration.rdoYesCondition.equals(form.GroupCondition().getValue()))
			{
				if (InternalReferralStatus.INAPPROPRIATE_REFERRAL.equals(currentReferralStatus.getReferralStatus()))
					return null;
				else
				{
					currentReferralStatus = new ClinicalReferralStatusVo();
					currentReferralStatus.setReferralStatus(InternalReferralStatus.INAPPROPRIATE_REFERRAL);
				}
			}
		}
		else
			return null;

		RecordingUserInformationVo userInformation = new RecordingUserInformationVo();

		userInformation.setRecordingDateTime(new DateTime());
		userInformation.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());

		currentReferralStatus.setRecordingInfo(userInformation);

		return currentReferralStatus;
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setActionPressed(null);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedReferral(null);
		form.getGlobalContext().Clinical.setClinicalReferralRef(null);
		form.getGlobalContext().Clinical.setClinicalReferraNotes(null);

		form.setMode(FormMode.EDIT);
		open(FormMode.EDIT);
	}

	private void defaultValues()
	{

		if (form.getLocalContext().getHcpUser() != null)
		{
			form.qmbReferringHcp().newRow(form.getLocalContext().getHcpUser(), form.getLocalContext().getHcpUser().getMos().getIMosName());
			form.qmbReferringHcp().setValue(form.getLocalContext().getHcpUser());
		}

		form.dteDecisionToRefer().setValue(new Date());

		MemberOfStaffLiteVo mosUser = (MemberOfStaffLiteVo) domain.getMosUser();
		form.lblRecordingUser().setValue(mosUser != null ? mosUser.getIMosName() : "");

		form.lblRecordingDateTime().setValue((new DateTime()).toString());

	}

	private void updateReferralTypeCombo()
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getPatientIsInpatient()))
		{
			form.cmbReferralType().removeRow(ClinicalReferralType.OP_TO_BE_SEEN_AS_OUTPATIENT);
		}
		else
			form.cmbReferralType().setValue(ClinicalReferralType.OP_TO_BE_SEEN_AS_OUTPATIENT);
	}

	@Override
	protected void onBtnStatusHistoryClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setClinicalReferralStatusHistory(form.getLocalContext().getSelectedReferral() != null ? form.getLocalContext().getSelectedReferral().getHistoryOfReferralStatus() : null);
		engine.open(form.getForms().Clinical.InternalReferralStatusHistory);
	}

	@Override
	protected void onBtnAddReferralLetterClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setClinicalReferralRef(form.getLocalContext().getSelectedReferral());
		form.getGlobalContext().Core.setPatientDocumentsCollectionForClinicalReferral(form.getLocalContext().getDocumentsCollection());
		engine.open(form.getForms().Clinical.InternalReferralsDocumentsView,  new Object[] {FormMode.EDIT});
	}

	@Override
	protected void onQmbReferToHcpTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbReferToHcp().clear();
		
		if (value == null || value.length() == 0)
			return;

		HcpLiteVoCollection hcpColl = domain.listHCPs(value);

		if (hcpColl != null)
		{
			for (int i = 0; i < hcpColl.size(); i++)
			{
				form.qmbReferToHcp().newRow(hcpColl.get(i), hcpColl.get(i).getMos().getIMosName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbReferToHcp().showOpened();
	}

	@Override
	protected void onQmbReferToServiceValueChanged() throws PresentationLogicException
	{
		form.qmbReferToHcp().clear();
		form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getRows().clear();
		form.getLocalContext().setServiceQuestions(null);

		ServiceConfigIntReferralForReferralVo serviceConfig = form.qmbReferToService().getValue();

		if (serviceConfig != null)
		{
			if (form.getLocalContext().getHcpUser() == null && Boolean.TRUE.equals(serviceConfig.getRequiresHcpAuthorisation()))
				form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setValue(GroupAuthorisationEnumeration.rdoYesAuthorisation);
			else
				form.lyrDetails().tabClinicalDetails().GroupAuthorisation().setValue(GroupAuthorisationEnumeration.rdoNoAuthorisation);

			form.getLocalContext().setServiceQuestions(domain.getQuestionsForServiceConfig(serviceConfig));

			form.qmbReferToService().setTooltip(serviceConfig.getTooltipText());
		}

		for (int j = 0; form.getLocalContext().getServiceQuestions() != null && j < form.getLocalContext().getServiceQuestions().size(); j++)
		{
			populateQuestionsGrid(form.getLocalContext().getServiceQuestions().get(j), null);
		}

		updateControlsState();
	}

	@Override
	protected void onQmbReferToServiceTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbReferToService().clear();
		
		if (value == null || value.length() == 0)
			return;

		ServiceConfigIntReferralForReferralVoCollection services = domain.listConfigServices(value);

		if (services != null)
		{
			for (int i = 0; i < services.size(); i++)
			{
				if (services.get(i) != null && services.get(i).getService() != null)
					form.qmbReferToService().newRow(services.get(i), services.get(i).getService().getServiceName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbReferToService().showOpened();
	}

	@Override
	protected void onQmbReferringHcpTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbReferringHcp().clear();
		
		if (value == null || value.length() == 0)
			return;

		HcpLiteVoCollection hcpColl = domain.listHCPs(value);

		if (hcpColl != null)
		{
			for (int i = 0; i < hcpColl.size(); i++)
			{
				form.qmbReferringHcp().newRow(hcpColl.get(i), hcpColl.get(i).getMos().getIMosName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbReferringHcp().showOpened();
	}

	@Override
	protected void onCmbReferralTypeValueChanged() throws PresentationLogicException
	{
		form.GroupUrgent().setValue(null);
		form.GroupCondition().setValue(null);
		updateControlsState();

	}

	@Override
	protected void onQmbReferringServiceTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbReferringService().clear();
		
		if (value == null || value.length() == 0)
			return;

		ServiceLiteVoCollection services = domain.listServices(value);

		if (services != null)
		{
			for (int i = 0; i < services.size(); i++)
			{
				if (services.get(i) != null)
					form.qmbReferringService().newRow(services.get(i), services.get(i).getServiceName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbReferringService().showOpened();
	}

	private void populateQuestionsGrid(AssessmentQuestionVo serviceQuestion, PatientAssessmentAnswerVoCollection patientAnswers)
	{

		if (serviceQuestion == null)
			return;

		Image rowQuestionImage = null;

		if (serviceQuestion.getQuestion() != null && Boolean.FALSE.equals(serviceQuestion.getQuestion().getIsQuestion()))
			rowQuestionImage = form.getImages().OCRR.Information;
		else
		{
			rowQuestionImage = form.getImages().OCRR.Question;

			if (Boolean.TRUE.equals(serviceQuestion.getIsMandatory()))
				rowQuestionImage = form.getImages().Core.MandatoryQuestion;
		}

		DynamicGridRow row = form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getRows().newRow();
		row.setSelectable(false);

		DynamicGridCell imageCell = row.getCells().newCell(form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().getByIdentifier(IMAGE_COLUMN), DynamicCellType.IMAGE);
		imageCell.setReadOnly(true);
		imageCell.setValue(rowQuestionImage);

		DynamicGridCell questionNameCell = row.getCells().newCell(form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().getByIdentifier(QUESTION_COLUMN), DynamicCellType.WRAPTEXT);
		questionNameCell.setReadOnly(true);
		questionNameCell.setValue(serviceQuestion.getQuestion() != null ? serviceQuestion.getQuestion().getText() : "");
		questionNameCell.setTooltip(serviceQuestion.getQuestion() != null ? serviceQuestion.getQuestion().getText() : "");

		row.setIdentifier(serviceQuestion);

		addAnswers(row, serviceQuestion, patientAnswers);
	}

	private void addAnswers(DynamicGridRow row, AssessmentQuestionVo vo, PatientAssessmentAnswerVoCollection patientAnswers)
	{
		if (vo == null || vo.getQuestion() == null)
			return;

		if (vo.getQuestion().getAnswerTypesIsNotNull())
		{
			for (int x = 0; x < vo.getQuestion().getAnswerTypes().size(); x++)
			{
				if (Boolean.TRUE.equals(vo.getQuestion().getAnswerTypes().get(x).getActiveStatus()))
				{
					boolean readOnlyCell = false;
					addAnswerCell(row, getAnswerColumn(x), vo.getQuestion().getAnswerTypes().get(x), getInstAnswerType(patientAnswers, vo.getQuestion().getAnswerTypes().get(x)), readOnlyCell);
				}
			}
		}
	}

	private DynamicGridColumn getAnswerColumn(int answerIndex)
	{
		DynamicGridColumn column = form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().getByIdentifier(new Integer(answerIndex));
		if (column == null)
			column = createAnswerColumn(answerIndex);

		return column;
	}

	private DynamicGridColumn createAnswerColumn(int answerIndex)
	{
		DynamicGridColumn column = form.lyrDetails().tabClinicalDetails().dyngrdQuestions().getColumns().newColumn("");
		column.setDynamicWidthSupported(true);
		column.setIdentifier(new Integer(answerIndex));
		column.setWidth(100);
		return column;
	}

	private AnswerDetailsVo getInstAnswerType(PatientAssessmentAnswerVoCollection patientAnswers, QuestionAnswerTypeVo configAnswerType)
	{
		if (patientAnswers == null || patientAnswers.size() == 0 || configAnswerType == null)
			return null;

		for (int i = 0; i < patientAnswers.size(); i++)
		{
			PatientAssessmentAnswerVo voPatAssAnswerVo = patientAnswers.get(i);
			for (int j = 0; voPatAssAnswerVo != null && j < voPatAssAnswerVo.getAnswerDetails().size(); j++)
			{
				if (voPatAssAnswerVo.getAnswerDetails().get(j).getAnswerTypeIsNotNull() && voPatAssAnswerVo.getAnswerDetails().get(j).getAnswerType().equals(configAnswerType))
				{
					return voPatAssAnswerVo.getAnswerDetails().get(j);
				}
			}
		}

		return null;
	}

	private DynamicGridCell addAnswerCell(DynamicGridRow row, DynamicGridColumn column, QuestionAnswerTypeVo configAnswer, AnswerDetailsVo instAnswer, boolean readOnly)
	{

		DynamicCellType cellAnswerType = getCellAnswerType(configAnswer.getAnswerType());
		DynamicGridCell cell = row.getCells().newCell(column, cellAnswerType);

		cell.setWidth(getCellAnswerWidth(configAnswer, instAnswer));
		cell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
		cell.setIdentifier(configAnswer);
		cell.setReadOnly(readOnly);
		setAnswerCellValue(cell, configAnswer, instAnswer);
		setCellAnswer(cell, instAnswer);

		if (instAnswer == null)
		{
			setCellTooltip(cell, configAnswer);
		}
		else
		{
			setCellAnswerTooltip(cell, instAnswer);
		}

		return cell;
	}

	private void setCellTooltip(DynamicGridCell cell, QuestionAnswerTypeVo configAnswer)
	{
		if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.DATE))
			cell.setTooltip("Select date");
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.DECIMAL))
			cell.setTooltip("Enter decimal value");
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.INTEGER))
			cell.setTooltip("Enter numeric value");
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.PARTIALDATE))
			cell.setTooltip("Enter partial date");
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.TEXT))
			cell.setTooltip("Enter text");
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.TIME))
			cell.setTooltip("Enter time");
	}

	private void setCellAnswerTooltip(DynamicGridCell cell, AnswerDetailsVo answer)
	{
		if (cell == null || answer == null)
			return;

		else if (cell.getType() == DynamicCellType.COMMENT)
		{
			cell.setTooltip(answer.getStringAnswer());
		}
		else if (cell.getType() == DynamicCellType.DATE && answer.getDateAnswer() != null)
		{
			cell.setTooltip(answer.getDateAnswer().toString());
		}
		else if (cell.getType() == DynamicCellType.PARTIALDATE && answer.getPartialDate() != null)
		{
			cell.setTooltip(answer.getPartialDate().toString());
		}
		else if (cell.getType() == DynamicCellType.DECIMAL && answer.getDecimalAnswer() != null)
		{
			cell.setTooltip(answer.getDecimalAnswer().toString());
		}
		else if (cell.getType() == DynamicCellType.INT && answer.getIntegerAnswer() != null)
		{
			cell.setTooltip(answer.getIntegerAnswer().toString());
		}
		else if (cell.getType() == DynamicCellType.STRING)
		{
			cell.setTooltip(answer.getStringAnswer());
		}
		else if (cell.getType() == DynamicCellType.TIME && answer.getTimeAnswer() != null)
		{
			cell.setTooltip(answer.getTimeAnswer().toString());
		}
		else if (cell.getType() == DynamicCellType.WRAPTEXT)
		{
			cell.setTooltip(answer.getStringAnswer());
		}

	}

	private void setCellAnswer(DynamicGridCell cell, AnswerDetailsVo answer)
	{
		if (cell == null)
			return;
		if (answer == null)
			return;

		if (cell.getType() == DynamicCellType.ANSWER)
		{
			if (answer.getBoolValueAnswerIsNotNull())
				cell.setValue(answer.getBoolValueAnswer().booleanValue() ? this.optionYes : this.optionNo);
			else
				cell.setValue(null);
		}
		else if (cell.getType() == DynamicCellType.COMMENT)
		{
			cell.setValue(answer.getStringAnswer());
		}
		else if (cell.getType() == DynamicCellType.DATE)
		{
			cell.setValue(answer.getDateAnswer());
		}
		else if (cell.getType() == DynamicCellType.PARTIALDATE)
		{
			cell.setValue(answer.getPartialDate());
		}
		else if (cell.getType() == DynamicCellType.DECIMAL)
		{
			cell.setValue(answer.getDecimalAnswer());
		}
		else if (cell.getType() == DynamicCellType.ENUMERATION)
		{
			cell.setValue(answer.getPicklist());
		}
		else if (cell.getType() == DynamicCellType.INT)
		{
			cell.setValue(answer.getIntegerAnswer());
		}
		else if (cell.getType() == DynamicCellType.STRING)
		{
			cell.setValue(answer.getStringAnswer());
		}
		else if (cell.getType() == DynamicCellType.TIME)
		{
			cell.setValue(answer.getTimeAnswer());
		}
		else if (cell.getType() == DynamicCellType.WRAPTEXT)
		{
			cell.setValue(answer.getStringAnswer());
		}
		else if (cell.getType() == DynamicCellType.MULTISELECT)
		{
			setCellMultiAnswer(cell, answer.getMultiSelectAnswers());
		}
	}

	private void setCellMultiAnswer(DynamicGridCell cell, AnswerOptionVoCollection items)
	{
		if (!cell.getType().equals(DynamicCellType.MULTISELECT))
			throw new CodingRuntimeException("Multiple answer should be collected only for multiselect cells");

		if (cell.getItems() != null)
		{
			for (int x = 0; x < cell.getItems().size(); x++)
			{
				boolean checked = false;

				if (items != null)
				{
					for (int y = 0; y < items.size(); y++)
					{
						if (cell.getItems().get(x).getIdentifier() != null && cell.getItems().get(x).getIdentifier().equals(items.get(y)))
						{
							checked = true;
							break;
						}
					}
				}

				cell.getItems().get(x).setChecked(checked);
			}
		}
	}

	private DynamicCellType getCellAnswerType(ims.core.vo.lookups.QuestionAnswerType answerType)
	{
		if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.DATE))
			return DynamicCellType.DATE;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.DECIMAL))
			return DynamicCellType.DECIMAL;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.INTEGER))
			return DynamicCellType.INT;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.MULTISELECT))
			return DynamicCellType.MULTISELECT;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.PARTIALDATE))
			return DynamicCellType.PARTIALDATE;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.PICKLIST))
			return DynamicCellType.ENUMERATION;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.SEPARATOR))
			return DynamicCellType.DYNAMICLABEL;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.TEXT))
			return DynamicCellType.WRAPTEXT;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.TIME))
			return DynamicCellType.TIME;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.YESNO))
			return DynamicCellType.ANSWER;

		return DynamicCellType.EMPTY;
	}

	private int getCellAnswerWidth(QuestionAnswerTypeVo configAnswer, AnswerDetailsVo instAnswer)
	{
		if (configAnswer == null || configAnswer.getAnswerType() == null)
			return 0;

		ims.core.vo.lookups.QuestionAnswerType answerType = configAnswer.getAnswerType();

		if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.DATE))
			return DEFAULT_DATE_ANSWER_CELL_WIDTH;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.DECIMAL))
			return DEFAULT_DECIMAL_ANSWER_CELL_WIDTH;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.INTEGER))
			return DEFAULT_INTEGER_ANSWER_CELL_WIDTH;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.MULTISELECT))
		{
			int defaultMultiSelect = DEFAULT_MULTISELECT_ANSWER_CELL_WIDTH;
			if (instAnswer != null)
				return instAnswer.getAnswerWidth() == null ? defaultMultiSelect : instAnswer.getAnswerWidth().intValue();

			return configAnswer.getAnswerWidth() == null ? defaultMultiSelect : configAnswer.getAnswerWidth().intValue();
		}
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.PARTIALDATE))
			return DEFAULT_PARTIALDATE_ANSWER_CELL_WIDTH;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.PICKLIST))
		{
			if (instAnswer != null)
				return instAnswer.getAnswerWidth() == null ? DEFAULT_PICKLIST_ANSWER_CELL_WIDTH : instAnswer.getAnswerWidth().intValue();

			return configAnswer.getAnswerWidth() == null ? DEFAULT_PICKLIST_ANSWER_CELL_WIDTH : configAnswer.getAnswerWidth().intValue();
		}
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.SEPARATOR))
			return DEFAULT_SEPARATOR_ANSWER_CELL_WIDTH;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.TEXT))
		{
			if (instAnswer != null)
				return instAnswer.getAnswerWidth() == null ? DEFAULT_TEXT_ANSWER_CELL_WIDTH : instAnswer.getAnswerWidth().intValue();

			return configAnswer.getAnswerWidth() == null ? DEFAULT_TEXT_ANSWER_CELL_WIDTH : configAnswer.getAnswerWidth().intValue();
		}
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.TIME))
			return DEFAULT_TIME_ANSWER_CELL_WIDTH;
		else if (answerType.equals(ims.core.vo.lookups.QuestionAnswerType.YESNO))
			return DEFAULT_YESNO_ANSWER_CELL_WIDTH;

		return DEFAULT_UNKNOWN_ANSWER_CELL_WIDTH;
	}

	private void setAnswerCellValue(DynamicGridCell cell, QuestionAnswerTypeVo configAnswer, AnswerDetailsVo instAnswer)
	{
		if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.SEPARATOR))
		{
			cell.setTextColor(DEFAULT_SEPARATOR_CELL_TEXT_COLOR);
			cell.setValue(" " + (configAnswer.getSeparatorTextIsNotNull() ? configAnswer.getSeparatorText() : "") + " ");
		}
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.YESNO))
		{
			cell.getItems().clear();
			cell.getItems().newItem(this.optionYes, this.optionYes.getIItemImage());
			cell.getItems().newItem(this.optionNo, this.optionNo.getIItemImage());
		}
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.PICKLIST))
		{
			setAnswerCellOptions(configAnswer, cell);
		}
		else if (configAnswer.getAnswerType().equals(ims.core.vo.lookups.QuestionAnswerType.MULTISELECT))
		{
			setAnswerCellOptions(configAnswer, cell);

			if (instAnswer != null)
			{
				if (instAnswer.getMaxMultiselectAllowedIsNotNull())
				{
					cell.setMaxCheckedItemsForMultiSelect(instAnswer.getMaxMultiselectAllowed());
				}
			}
			else
			{
				if (configAnswer.getMaxMultiselectAllowedIsNotNull())
				{
					cell.setMaxCheckedItemsForMultiSelect(configAnswer.getMaxMultiselectAllowed());
				}
			}
		}
	}

	private void setAnswerCellOptions(QuestionAnswerTypeVo answer, DynamicGridCell cell)
	{
		cell.getItems().clear();
		int maxVisibleItems = 0;

		if (answer.getOptionsIsNotNull())
		{
			for (int x = 0; x < answer.getOptions().size(); x++)
			{
				AnswerOptionVo answerItem = answer.getOptions().get(x);

				if (answerItem != null)
				{
					DynamicGridCellItem item = cell.getItems().newItem(answerItem);
					item.setIdentifier(answerItem);
					maxVisibleItems++;

					if (answerItem.getColourIsNotNull() && ims.core.vo.lookups.QuestionAnswerType.MULTISELECT.equals(answer.getAnswerType()))
					{
						item.setMarkerColor(answerItem.getColour());
					}
				}
			}
		}

		cell.setMaxVisibleItemsForMultiSelect(maxVisibleItems == 0 ? 1 : maxVisibleItems);
	}

	@Override
	protected void onBtnLinkClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.PatientDocumentSearchDialog);

	}

	@Override
	protected void onBtnViewReferralLetterClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setClinicalReferralRef(form.getLocalContext().getSelectedReferral());
		form.getGlobalContext().Core.setPatientDocumentsCollectionForClinicalReferral(form.getLocalContext().getDocumentsCollection());
		engine.open(form.getForms().Clinical.InternalReferralsDocumentsView, new Object[] {FormMode.VIEW});
		
	}

	@Override
	protected void onRadioButtonGroupConditionValueChanged() throws PresentationLogicException
	{
		form.txtPathwayId().setValue(null);
		updateControlsState();
		
	}

	@Override
	protected void onBtnAcknowledgeRejectionClick() throws PresentationLogicException
	{
		ackRejection();
		
	}

	private void ackRejection()
	{
		if (form.getLocalContext().getSelectedReferral() == null)
			return;
		
		InternalReferralStatus statusToUpdate = InternalReferralStatus.REJECTED;
		ClinicalReferralStatusVo currentStatus = form.getLocalContext().getSelectedReferral().getCurrentReferralStatus(); //WDEV-19164
		
		updateStatusForReferral(currentStatus, statusToUpdate, false);
		
		form.getLocalContext().getSelectedReferral().setAcknowledgeRejection(Boolean.TRUE);
		
		if (justSave(form.getLocalContext().getSelectedReferral()))
		{
			if (engine.isDialog())
				engine.close(DialogResult.OK);
			else
				open(FormMode.VIEW);
		}
		
	}

	private void updateStatusForReferral(ClinicalReferralStatusVo currentStatus, InternalReferralStatus statusToUpdate, Boolean wasAppointmentBooked)
	{
		ClinicalReferralStatusVo updatedStatus = null;
		
		if (statusToUpdate != null)
		{			
			updatedStatus = new ClinicalReferralStatusVo();
			
			updatedStatus.setReferralStatus(statusToUpdate);
			
			RecordingUserInformationVo userInformation = new RecordingUserInformationVo();
			userInformation.setRecordingDateTime(new DateTime());
			userInformation.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());

			updatedStatus.setRecordingInfo(userInformation);
			
			//WDEV-19164
			if (currentStatus != null && InternalReferralStatus.REJECTED.equals(currentStatus.getReferralStatus()) && (InternalReferralStatus.REJECTED.equals(statusToUpdate)))
			{
				updatedStatus.setRejectionReason(currentStatus.getRejectionReason());
				updatedStatus.setRejectionReasonText(currentStatus.getRejectionReasonText());
			}
			
			if (wasAppointmentBooked)
			{
				updatedStatus.setAppointmentBooked(true);
				updatedStatus.setAppointmentRequired(false);
				updatedStatus.setInternalReferralStatusChangeReason(InternalReferralStatusChangeReason.BOOKING_MADE);
			}
		}
		
		if (updatedStatus != null)
		{
			form.getLocalContext().getSelectedReferral().setCurrentReferralStatus(updatedStatus);

			if (form.getLocalContext().getSelectedReferral().getHistoryOfReferralStatus() == null)
			{
				form.getLocalContext().getSelectedReferral().setHistoryOfReferralStatus(new ClinicalReferralStatusVoCollection());
			}

			form.getLocalContext().getSelectedReferral().getHistoryOfReferralStatus().add(updatedStatus);
		}
	}

	private boolean justSave(ClinicalReferralsVo clinicalReferral)
	{
		String[] errors = clinicalReferral.validate(validateUiRules(clinicalReferral));

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			clinicalReferral = domain.saveClinicalReferral(clinicalReferral);
		}

		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(FormMode.VIEW);
			return false;
		}

		return true;

	}

	@Override
	protected void onBtnReqSecondOpinionClick() throws PresentationLogicException
	{
		secondOpinion();
		
	}

	private void secondOpinion()
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.SECOND_OPINION_REQUIRED);
		engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {ClinicalReferralNoteType.SECOND_OPINION, InternalReferralStatus.SECOND_OPINION_REQUIRED});
		
	}

	@Override
	protected void onBtnCompleteLinkCorrespondenceClick() throws PresentationLogicException
	{
		completeLinkDocument();
		
	}

	private void completeLinkDocument()
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.COMPLETE_LINK_CORRESPONDENCE);
		form.getLocalContext().setMarkCompleteForDocument(Boolean.TRUE);
		engine.open(form.getForms().Clinical.PatientDocumentSearchDialog);
		
	}

	@Override
	protected void onBtnCompleteAddNoteClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.COMPLETE_ADD_NOTE);
		completeAddNote();
		
	}

	private void completeAddNote()
	{
		engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {ClinicalReferralNoteType.COMPLETION_NOTE, InternalReferralStatus.COMPLETED});
		
	}

	@Override
	protected void onBtnRejectClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.REJECT);
		rejectReferral();
		
	}
	
	private void rejectReferral()
	{
		engine.open(form.getForms().Clinical.InternalReferralsRejectionDialog);
		
	}

	@Override
	protected void onBtnAcceptClick() throws PresentationLogicException
	{
		acceptReferral();
		
	}

	private void acceptReferral()
	{
		
		if (save(true, InternalReferralStatus.ACCEPTED,true))		//wdev-19421
		{
			if (engine.isDialog())
				engine.close(DialogResult.OK);
			else
				open(FormMode.VIEW);
		}
		
	}

	@Override
	protected void onBtnAcceptReqApptClick() throws PresentationLogicException
	{
		acceptReqAppt();
		
	}

	private void acceptReqAppt()
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.ACCEPT_APPOINTMENT_REQUIRED);
		engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {ClinicalReferralNoteType.BOOKING_NOTE, InternalReferralStatus.ACCEPTED});
		
	}

	@Override
	protected void onBtnAddNoteClick() throws PresentationLogicException
	{
		form.getLocalContext().setFormStatus(form.getMode());
		if (InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()) || InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
		{
			//update the local context before opening the Notes dialog as the save is done on the dialog and modifications may have been done to the referral
			populateDataFromScreen(form.getLocalContext().getSelectedReferral(), null, Boolean.TRUE); 
		}
		
		if (InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
		{
			engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {ClinicalReferralNoteType.FURTHER_INFORMATION_REQUIRED, InternalReferralStatus.REQUIRES_FURTHER_INFORMATION, form.getLocalContext().getSelectedReferral()});
		}
		else if (InternalReferralStatusAction.RECORD_FURTHER_INFORMATION.equals(form.getLocalContext().getActionPressed()))
		{
			engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {ClinicalReferralNoteType.FURTHER_INFORMATION, InternalReferralStatus.AWAITING_ACCEPTANCE, form.getLocalContext().getSelectedReferral()});
		}
		else
			engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {null, null});
		
	}

	@Override
	protected void onRadioButtonGroupAuthorisationValueChanged() throws PresentationLogicException
	{
		if (form.getLocalContext().getSelectedReferral() != null)
		{
			if (GroupAuthorisationEnumeration.rdoYesAuthorisation.equals(form.lyrDetails().tabClinicalDetails().GroupAuthorisation().getValue()) && !Boolean.TRUE.equals(form.getLocalContext().getSelectedReferral().getRequiresAuthorisation()))
			{
				form.getLocalContext().setRequiresAuthorisationChanged(Boolean.TRUE);
			}
			else if (GroupAuthorisationEnumeration.rdoNoAuthorisation.equals(form.lyrDetails().tabClinicalDetails().GroupAuthorisation().getValue()) && !Boolean.FALSE.equals(form.getLocalContext().getSelectedReferral().getRequiresAuthorisation()))
			{
				form.getLocalContext().setRequiresAuthorisationChanged(Boolean.TRUE);
			}
			else
				form.getLocalContext().setRequiresAuthorisationChanged(Boolean.FALSE);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender)throws PresentationLogicException 
	{
		switch(menuItemID)
		{
		case GenForm.ContextMenus.ClinicalNamespace.InternalReferralsNotes.NEW:
			onBtnAddNoteClick();
			break;
		}	
	}

	@Override
	protected void onlyrDetailsTabChanged(LayerBridge tab) 
	{
		form.getLocalContext().setSelectedTab(tab);
		tabSelection(form.getLocalContext().getSelectedTab());	
	}

	private void tabSelection(LayerBridge tab)
	{
		if(tab != null && tab.getCaption().equals(form.lyrDetails().tabNotes().getCaption()))
		{
			if (form.getGlobalContext().Clinical.getClinicalReferralRefIsNotNull() && Boolean.FALSE.equals(form.getGlobalContext().Clinical.getSaveInternalReferralNote()))
				form.getGlobalContext().Clinical.setClinicalReferraNotes(form.getLocalContext().getSelectedReferral() != null ? form.getLocalContext().getSelectedReferral().getClinicalReferralNotes() : null);
			populateNotesGridFromData();
		}
	}

	private void populateNotesGridFromData()
	{
		form.lyrDetails().tabNotes().grdNotes().getRows().clear();

		if (form.getGlobalContext().Clinical.getClinicalReferraNotes() == null)
			return;

		ClinicalReferralNotesVoCollection notes = form.getGlobalContext().Clinical.getClinicalReferraNotes();

		notes.sort(new RecordingDateTimeComparator(SortOrder.DESCENDING));

		for (int i = 0; i < notes.size(); i++)
		{
		 grdNotesRow newRow = form.lyrDetails().tabNotes().grdNotes().getRows().newRow();

			newRow.setColNote(notes.get(i).getNote());
			newRow.setCellColNoteTooltip(newRow.getColNote());

			if (notes.get(i).getRecordingInfo() != null)
			{
				newRow.setColRecordingUser(notes.get(i).getRecordingInfo().getRecordingUser() != null ? notes.get(i).getRecordingInfo().getRecordingUser().getIItemText() : "");
				newRow.setCellColRecordingUserTooltip(newRow.getColRecordingUser());
				newRow.setColRecordingDateTime(notes.get(i).getRecordingInfo().getRecordingDateTime() != null ? notes.get(i).getRecordingInfo().getRecordingDateTime().toString() : "");
				newRow.setCellColRecordingDateTimeTooltip(newRow.getColRecordingDateTime());
			}
			
			newRow.setColType(notes.get(i).getNoteType() != null ? notes.get(i).getNoteType().getText() : null);
			newRow.setCellColTypeTooltip(newRow.getColType());
		}
		
	}
	
	public class RecordingDateTimeComparator implements Comparator<Object>
	{
		private int direction = 1;

		public RecordingDateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public RecordingDateTimeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;

		}

		public int compare(Object ob1, Object ob2)
		{
			DateTime rez1 = null;
			DateTime rez2 = null;

			if (ob1 instanceof ClinicalReferralNotesVo)
			{
				ClinicalReferralNotesVo ps1 = (ClinicalReferralNotesVo) ob1;
				rez1 = ps1.getRecordingInfo() != null && ps1.getRecordingInfo().getRecordingDateTime() != null ? ps1.getRecordingInfo().getRecordingDateTime() : null;
			}

			if (ob2 instanceof ClinicalReferralNotesVo)
			{
				ClinicalReferralNotesVo ps2 = (ClinicalReferralNotesVo) ob2;
				rez2 = ps2.getRecordingInfo() != null && ps2.getRecordingInfo().getRecordingDateTime() != null ? ps2.getRecordingInfo().getRecordingDateTime() : null;
			}

			if (rez1 != null && rez2 != null)
				return rez1.compareTo(rez2) * direction;

			if (rez1 != null && rez2 == null)
				return direction;

			if (rez2 != null && rez1 == null)
				return (-1) * direction;

			return 0;
		}
	}

	@Override
	protected void onBtnRecordInfoClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION);
		
		recordFurtherInformation();
		
	}

	private void recordFurtherInformation()
	{
		engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {ClinicalReferralNoteType.FURTHER_INFORMATION, InternalReferralStatus.AWAITING_ACCEPTANCE});
		
	}

	@Override
	protected void onBtnRequiresInfoClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION);
		
		requiresFurtherInformation();
	}

	private void requiresFurtherInformation()
	{
		engine.open(form.getForms().Clinical.InternalReferralsEditNoteDialog, new Object[] {ClinicalReferralNoteType.FURTHER_INFORMATION_REQUIRED, InternalReferralStatus.REQUIRES_FURTHER_INFORMATION});
		
	}

	@Override
	protected void onBtnAuthoriseClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionPressed(InternalReferralStatusAction.SIGN_OFF);
		form.setMode(FormMode.EDIT);
		
	}

	@Override
	protected void onBtnApptBookedClick() throws PresentationLogicException
	{
		form.getLocalContext().setAppointmentBookedMessageBoxId(engine.showMessage("Confirm appointment for " + getPatientName() + " has been Booked", "Warning", MessageButtons.YESNO));
		
	}

	private String getPatientName()
	{
		String patientName = " ";
		
		PatientShort patient = domain.getPatientShort(form.getGlobalContext().Core.getPatientShort());
		
		if (patient != null && patient.getName() != null)
				patientName = patient.getName().toString();
		
		form.getGlobalContext().Core.setPatientShort(patient);
		
		return patientName;
	}

	@Override
	protected void onBtnRIEClick() throws PresentationLogicException
	{
		markReferralAsRie();
	}

	private void markReferralAsRie()
	{
		engine.open(form.getForms().Core.RieConfirmationDialog);
		
	}
}
