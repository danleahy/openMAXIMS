//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.internalreferral;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabClinicalDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
		
			public static class GroupAuthorisationRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 160, 120, 38, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 19);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 112, 120, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 18);
				}
				public void setText(GroupAuthorisationEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupAuthorisationEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupAuthorisationEnumeration.None;
						case 0: return GroupAuthorisationEnumeration.rdoNoAuthorisation;
						case 1: return GroupAuthorisationEnumeration.rdoYesAuthorisation;
					}
					return null;
				}
				public void setValue(GroupAuthorisationEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupAuthorisationEnumeration.None.id);
				}
				public boolean isEnabled(GroupAuthorisationEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupAuthorisationEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupAuthorisationEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupAuthorisationEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupAuthorisationEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupAuthorisationEnumeration None = new GroupAuthorisationEnumeration(-1);
				public static GroupAuthorisationEnumeration rdoNoAuthorisation = new GroupAuthorisationEnumeration(0);
				public static GroupAuthorisationEnumeration rdoYesAuthorisation = new GroupAuthorisationEnumeration(1);
				private GroupAuthorisationEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupAuthorisationEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 528, 32, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<DateTime>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 528, 8, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<User>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 400, 32, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authorised Date/Time:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 400, 8, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authorised By:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 13, 160, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Questions:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 13, 144, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Specific", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 13, 48, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 13, 24, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Letter:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 13, 128, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authorisation?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 13, 112, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requires", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 112, 24, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " View", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 112, 24, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Link", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 192, 24, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Add", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 112, 48, 714, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 199, 120, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 112, 144, 714, 126, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// RadioButton Controls
				RadioButton tmpGroupAuthorisation = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupAuthorisation);
				GroupAuthorisationRadioButton GroupAuthorisation = (GroupAuthorisationRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupAuthorisationRadioButton.class, tmpGroupAuthorisation);
				GroupAuthorisation.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupAuthorisation);
			}

			public Label lblAuthorisedDateTimeText()
			{
				return (Label)super.getControl(0);
			}
			public Label lblAuthorisedByText()
			{
				return (Label)super.getControl(1);
			}
			public Label lblAuthorisedDateTime()
			{
				return (Label)super.getControl(2);
			}
			public Label lblAuthorisedBy()
			{
				return (Label)super.getControl(3);
			}
			public Label lblAuthorisation2()
			{
				return (Label)super.getControl(8);
			}
			public Label lblAuthorisation1()
			{
				return (Label)super.getControl(9);
			}
			public Button btnViewReferralLetter()
			{
				return (Button)super.getControl(10);
			}
			public Button btnLink()
			{
				return (Button)super.getControl(11);
			}
			public Button btnAddReferralLetter()
			{
				return (Button)super.getControl(12);
			}
			public TextBox txtClinicalDetails()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtRequiresAuthorisationMandatory()
			{
				return (TextBox)super.getControl(14);
			}
			public DynamicGrid dyngrdQuestions()
			{
				return (DynamicGrid)super.getControl(15);
			}
			public GroupAuthorisationRadioButton GroupAuthorisation()
			{
				return (GroupAuthorisationRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdNotesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdNotesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColRecordingDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColRecordingDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColRecordingDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColRecordingDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setColRecordingDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColRecordingDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColRecordingUserReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColRecordingUserReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColRecordingUserOpened()
				{
					super.row.showOpened(1);
				}
				public String getColRecordingUser()
				{
					return (String)super.row.get(1);
				}
				public void setColRecordingUser(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColRecordingUserTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColTypeReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColTypeOpened()
				{
					super.row.showOpened(2);
				}
				public String getColType()
				{
					return (String)super.row.get(2);
				}
				public void setColType(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColTypeTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColNoteReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColNoteReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColNoteOpened()
				{
					super.row.showOpened(3);
				}
				public String getColNote()
				{
					return (String)super.row.get(3);
				}
				public void setColNote(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColNoteTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdNotesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdNotesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdNotesRow get(int index)
				{
					return new grdNotesRow(super.collection.get(index));
				}
				public grdNotesRow newRow()
				{
					return new grdNotesRow(super.collection.newRow());
				}
				public grdNotesRow newRow(boolean autoSelect)
				{
					return new grdNotesRow(super.collection.newRow(autoSelect));
				}
				public grdNotesRow newRowAt(int index)
				{
					return new grdNotesRow(super.collection.newRowAt(index));
				}
				public grdNotesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdNotesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdNotesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdNotesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdNotesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdNotesRowCollection getRows()
				{
					return new grdNotesRowCollection(super.grid.getRows());
				}
				public grdNotesRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdNotesRow(row);
				}
				public void setColRecordingDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColRecordingDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColRecordingUserHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColRecordingUserHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColNoteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColNoteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 264, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdNotesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuInternalReferralsNotes, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdNotesTemp);
				grdNotesGrid grdNotes = (grdNotesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNotesGrid.class, m_grdNotesTemp);
				grdNotes.addStringColumn("Recording Date/Time", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdNotes.addStringColumn("Recording User", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdNotes.addStringColumn("Type", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdNotes.addStringColumn("Note", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdNotes);
			}

			public grdNotesGrid grdNotes()
			{
				return (grdNotesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 4, 240, 840, 304, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClinicalDetailsContainer m_tabClinicalDetailsContainer = (tabClinicalDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalDetailsContainer.class, m_tabClinicalDetails, factory);
			super.addContainer(m_tabClinicalDetails, m_tabClinicalDetailsContainer);
			ims.framework.utils.SizeInfo m_tabClinicalDetailsDesignSize = new ims.framework.utils.SizeInfo(840, 304);
			ims.framework.utils.SizeInfo m_tabClinicalDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabClinicalDetailsContainer.setContext(form, appForm, m_tabClinicalDetails, loader, form_images_local, contextMenus, startControlID, m_tabClinicalDetailsDesignSize, m_tabClinicalDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 4, 240, 840, 304, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Notes", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNotesContainer m_tabNotesContainer = (tabNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNotesContainer.class, m_tabNotes, factory);
			super.addContainer(m_tabNotes, m_tabNotesContainer);
			ims.framework.utils.SizeInfo m_tabNotesDesignSize = new ims.framework.utils.SizeInfo(840, 304);
			ims.framework.utils.SizeInfo m_tabNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabNotesContainer.setContext(form, appForm, m_tabNotes, loader, form_images_local, contextMenus, startControlID, m_tabNotesDesignSize, m_tabNotesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabClinicalDetails().setVisible(false);
			tabNotes().setVisible(false);
		}
		public void settabClinicalDetailsEnabled(boolean value)
		{
			tabClinicalDetails().setEnabled(value);
		}
		public void settabNotesEnabled(boolean value)
		{
			tabNotes().setEnabled(value);
		}
		public void showtabClinicalDetails()
		{
			tabNotes().setVisible(false);
			tabClinicalDetails().setVisible(true);
		}
		public void showtabNotes()
		{
			tabClinicalDetails().setVisible(false);
			tabNotes().setVisible(true);
		}

		public tabClinicalDetailsContainer tabClinicalDetails()
		{
			return (tabClinicalDetailsContainer)super.layers.get(0);
		}
		public tabNotesContainer tabNotes()
		{
			return (tabNotesContainer)super.layers.get(1);
		}
	}
	public static class cmbReferralTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.ClinicalReferralType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.ClinicalReferralType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.ClinicalReferralType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.ClinicalReferralType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.ClinicalReferralType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.ClinicalReferralType getValue()
		{
			return (ims.clinical.vo.lookups.ClinicalReferralType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.ClinicalReferralType value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbReferringServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbReferToHcpComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbReferToServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.ServiceConfigIntReferralForReferralVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.ServiceConfigIntReferralForReferralVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.ServiceConfigIntReferralForReferralVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.ServiceConfigIntReferralForReferralVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.ServiceConfigIntReferralForReferralVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.ServiceConfigIntReferralForReferralVo getValue()
		{
			return (ims.clinical.vo.ServiceConfigIntReferralForReferralVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.ServiceConfigIntReferralForReferralVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbReferringHcpComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}

	public static class GroupConditionRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 168, 181, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "No", startTabIndex.intValue() + 10);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 120, 181, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper23.getX(), anchoringHelper23.getY(), anchoringHelper23.getWidth(), "Yes", startTabIndex.intValue() + 9);
		}
		public void setText(GroupConditionEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupConditionEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupConditionEnumeration.None;
				case 0: return GroupConditionEnumeration.rdoNoCondition;
				case 1: return GroupConditionEnumeration.rdoYesCondition;
			}
			return null;
		}
		public void setValue(GroupConditionEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupConditionEnumeration.None.id);
		}
		public boolean isEnabled(GroupConditionEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupConditionEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupConditionEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupConditionEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupConditionEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupConditionEnumeration None = new GroupConditionEnumeration(-1);
		public static GroupConditionEnumeration rdoNoCondition = new GroupConditionEnumeration(0);
		public static GroupConditionEnumeration rdoYesCondition = new GroupConditionEnumeration(1);
		private GroupConditionEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupConditionEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupUrgentRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 168, 153, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper24.getX(), anchoringHelper24.getY(), anchoringHelper24.getWidth(), "No", startTabIndex.intValue() + 8);
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 120, 153, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper25.getX(), anchoringHelper25.getY(), anchoringHelper25.getWidth(), "Yes", startTabIndex.intValue() + 7);
		}
		public void setText(GroupUrgentEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupUrgentEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupUrgentEnumeration.None;
				case 0: return GroupUrgentEnumeration.rdoNo;
				case 1: return GroupUrgentEnumeration.rdoYes;
			}
			return null;
		}
		public void setValue(GroupUrgentEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupUrgentEnumeration.None.id);
		}
		public boolean isEnabled(GroupUrgentEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupUrgentEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupUrgentEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupUrgentEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupUrgentEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupUrgentEnumeration None = new GroupUrgentEnumeration(-1);
		public static GroupUrgentEnumeration rdoNo = new GroupUrgentEnumeration(0);
		public static GroupUrgentEnumeration rdoYes = new GroupUrgentEnumeration(1);
		private GroupUrgentEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupUrgentEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuInternalReferralsNotes = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuInternalReferralsNotesNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "New Note", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5730001)))
			contextMenus.Clinical.contextMenuInternalReferralsNotes.add(contextMenus.Clinical.contextMenuInternalReferralsNotesNEWItem);
		form.registerMenu(contextMenus.Clinical.contextMenuInternalReferralsNotes);


		// Panel Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 4, 58, 382, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Refer To", new Integer(1), ""}));

		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 504, 49, 208, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 504, 34, 208, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<reason>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 504, 7, 208, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<status>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 392, 73, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referred By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 400, 101, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 125, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 400, 34, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Rejection Reason:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 400, 7, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Status:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 528, 213, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<DateTime>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 528, 181, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<User>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 400, 213, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording Date/Time:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 400, 181, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording User:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 16, 213, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pathway ID:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "to Refer:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 189, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "New Condition?", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 16, 173, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is Referral for a", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 153, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgent", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 16, 101, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 400, 125, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 1, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Decision", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 4, 551, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 692, 551, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Appointment Booked", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 444, 600, 240, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Record Further Information", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 212, 600, 224, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Requires Further Information", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Authorise", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 212, 551, 224, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Accept - requires Appointment", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 212, 575, 224, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Acknowledge Rejection", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 692, 575, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Requires 2nd Opinion", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 444, 551, 240, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Complete and Link Correspondence", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 444, 575, 240, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Complete and Add Note", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 88, 575, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Reject", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 88, 551, 115, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Accept", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 769, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 692, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 692, 600, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 4, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 4, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 732, 31, 112, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, " Add Note", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 732, 4, 112, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, " Status History", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 203, 181, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 203, 149, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 120, 213, 254, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(20), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 120, 5, 254, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 120, 32, 254, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbReferralTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbReferralTypeTemp);
		cmbReferralTypeComboBox cmbReferralType = (cmbReferralTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReferralTypeComboBox.class, m_cmbReferralTypeTemp);
		super.addComboBox(cmbReferralType);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 448, 99, 254, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbReferringServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(2), null, Boolean.FALSE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbReferringServiceTemp);
		qmbReferringServiceComboBox qmbReferringService = (qmbReferringServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReferringServiceComboBox.class, m_qmbReferringServiceTemp);
		super.addComboBox(qmbReferringService);
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 120, 123, 254, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbReferToHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(2), null, Boolean.FALSE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbReferToHcpTemp);
		qmbReferToHcpComboBox qmbReferToHcp = (qmbReferToHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReferToHcpComboBox.class, m_qmbReferToHcpTemp);
		super.addComboBox(qmbReferToHcp);
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 120, 99, 254, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbReferToServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(2), null, Boolean.TRUE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbReferToServiceTemp);
		qmbReferToServiceComboBox qmbReferToService = (qmbReferToServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReferToServiceComboBox.class, m_qmbReferToServiceTemp);
		super.addComboBox(qmbReferToService);
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 448, 123, 254, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbReferringHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(2), null, Boolean.TRUE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbReferringHcpTemp);
		qmbReferringHcpComboBox qmbReferringHcp = (qmbReferringHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReferringHcpComboBox.class, m_qmbReferringHcpTemp);
		super.addComboBox(qmbReferringHcp);

		// RadioButton Controls
		RadioButton tmpGroupCondition = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupCondition);
		GroupConditionRadioButton GroupCondition = (GroupConditionRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupConditionRadioButton.class, tmpGroupCondition);
		GroupCondition.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupCondition);
		RadioButton tmpGroupUrgent = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupUrgent);
		GroupUrgentRadioButton GroupUrgent = (GroupUrgentRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupUrgentRadioButton.class, tmpGroupUrgent);
		GroupUrgent.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupUrgent);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Label lblRejectionReason2()
	{
		return (Label)super.getControl(3);
	}
	public Label lblRejectionReason1()
	{
		return (Label)super.getControl(4);
	}
	public Label lblStatusText()
	{
		return (Label)super.getControl(5);
	}
	public Label lblRejectionReason()
	{
		return (Label)super.getControl(9);
	}
	public Label lblCurrentStatus()
	{
		return (Label)super.getControl(10);
	}
	public Label lblRecordingDateTime()
	{
		return (Label)super.getControl(11);
	}
	public Label lblRecordingUser()
	{
		return (Label)super.getControl(12);
	}
	public Label lblPathwayId()
	{
		return (Label)super.getControl(15);
	}
	public Label lblNewCondition2()
	{
		return (Label)super.getControl(17);
	}
	public Label lblNewCondition1()
	{
		return (Label)super.getControl(18);
	}
	public Label lblUrgent()
	{
		return (Label)super.getControl(19);
	}
	public Button btnRIE()
	{
		return (Button)super.getControl(24);
	}
	public Button btnApptBooked()
	{
		return (Button)super.getControl(25);
	}
	public Button btnRecordInfo()
	{
		return (Button)super.getControl(26);
	}
	public Button btnRequiresInfo()
	{
		return (Button)super.getControl(27);
	}
	public Button btnAuthorise()
	{
		return (Button)super.getControl(28);
	}
	public Button btnAcceptReqAppt()
	{
		return (Button)super.getControl(29);
	}
	public Button btnAcknowledgeRejection()
	{
		return (Button)super.getControl(30);
	}
	public Button btnReqSecondOpinion()
	{
		return (Button)super.getControl(31);
	}
	public Button btnCompleteLinkCorrespondence()
	{
		return (Button)super.getControl(32);
	}
	public Button btnCompleteAddNote()
	{
		return (Button)super.getControl(33);
	}
	public Button btnReject()
	{
		return (Button)super.getControl(34);
	}
	public Button btnAccept()
	{
		return (Button)super.getControl(35);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(36);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(37);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(38);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(39);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(40);
	}
	public Button btnAddNote()
	{
		return (Button)super.getControl(41);
	}
	public Button btnStatusHistory()
	{
		return (Button)super.getControl(42);
	}
	public TextBox txtConditionMandatory()
	{
		return (TextBox)super.getControl(43);
	}
	public TextBox txtUrgentMandatory()
	{
		return (TextBox)super.getControl(44);
	}
	public TextBox txtPathwayId()
	{
		return (TextBox)super.getControl(45);
	}
	public DateControl dteDecisionToRefer()
	{
		return (DateControl)super.getControl(46);
	}
	public cmbReferralTypeComboBox cmbReferralType()
	{
		return (cmbReferralTypeComboBox)super.getComboBox(0);
	}
	public qmbReferringServiceComboBox qmbReferringService()
	{
		return (qmbReferringServiceComboBox)super.getComboBox(1);
	}
	public qmbReferToHcpComboBox qmbReferToHcp()
	{
		return (qmbReferToHcpComboBox)super.getComboBox(2);
	}
	public qmbReferToServiceComboBox qmbReferToService()
	{
		return (qmbReferToServiceComboBox)super.getComboBox(3);
	}
	public qmbReferringHcpComboBox qmbReferringHcp()
	{
		return (qmbReferringHcpComboBox)super.getComboBox(4);
	}
	public GroupConditionRadioButton GroupCondition()
	{
		return (GroupConditionRadioButton)super.getRadioButton(0);
	}
	public GroupUrgentRadioButton GroupUrgent()
	{
		return (GroupUrgentRadioButton)super.getRadioButton(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				InternalReferralNotes = new LocalFormName(123276);
				InternalReferralStatusHistory = new LocalFormName(123277);
				InternalReferralsDocumentsView = new LocalFormName(123280);
				PatientDocumentSearchDialog = new LocalFormName(123294);
				InternalReferralsEditNoteDialog = new LocalFormName(123281);
				InternalReferralsRejectionDialog = new LocalFormName(123279);
				InternalReferralDialog = new LocalFormName(123287);
				InternalReferral = new LocalFormName(123275);
			}
			public final FormName InternalReferralNotes;
			public final FormName InternalReferralStatusHistory;
			public final FormName InternalReferralsDocumentsView;
			public final FormName PatientDocumentSearchDialog;
			public final FormName InternalReferralsEditNoteDialog;
			public final FormName InternalReferralsRejectionDialog;
			public final FormName InternalReferralDialog;
			public final FormName InternalReferral;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
			Core = new CoreImages();
			Correspondence = new CorrespondenceImages();
			Scheduling = new SchedulingImages();
			RefMan = new RefManImages();
			Emergency = new EmergencyImages();
			ICP = new ICPImages();
			Clinical = new ClinicalImages();
			COE = new COEImages();
			Admin = new AdminImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Question = new ImageHelper(116100, "Images/OCRR/Question.gif", new Integer(16), new Integer(16));
				Information = new ImageHelper(116101, "Images/OCRR/Information.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Question;
			public final ims.framework.utils.Image Information;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				MandatoryQuestion = new ImageHelper(102272, "Images/Core/Help4.gif", new Integer(16), new Integer(16));
				AddFile16 = new ImageHelper(102330, "Images/Core/add-file_16x16.png", new Integer(16), new Integer(16));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				OK_16 = new ImageHelper(102573, "Images/Core/ok_16.png", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				Alert_RedTriangle2 = new ImageHelper(102142, "Images/Core/alarm-red-triangle-2.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image MandatoryQuestion;
			public final ims.framework.utils.Image AddFile16;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image OK_16;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image Alert_RedTriangle2;
		}
		public final class CorrespondenceImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceImages()
			{
				PatientDocumentCreated16 = new ImageHelper(111150, "Images/Correspondence/new_patient_document.png", new Integer(16), new Integer(16));
				DocumentSend16 = new ImageHelper(111153, "Images/Correspondence/document_ready_send_16x16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image PatientDocumentCreated16;
			public final ims.framework.utils.Image DocumentSend16;
		}
		public final class SchedulingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingImages()
			{
				ReleaseSlot16 = new ImageHelper(114135, "Images/Scheduling/threads_ok_16.png", new Integer(16), new Integer(16));
				session_16 = new ImageHelper(114137, "Images/Scheduling/session16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ReleaseSlot16;
			public final ims.framework.utils.Image session_16;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				rejection16x16 = new ImageHelper(134140, "Images/RefMan/rejection16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image rejection16x16;
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				REFERTO16 = new ImageHelper(129154, "Images/Emergency/ReferTo.png", new Integer(16), new Integer(16));
				ViewHistoryEnabled16 = new ImageHelper(129100, "Images/Emergency/book_open.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image REFERTO16;
			public final ims.framework.utils.Image ViewHistoryEnabled16;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Completed_16 = new ImageHelper(118134, "Images/ICP/Completed.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Completed_16;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				viewOut_16x16 = new ImageHelper(123175, "Images/Clinical/viewobs_16.png", new Integer(16), new Integer(16));
				BulletPoint = new ImageHelper(123100, "Images/Clinical/Indent-Decrease-2.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image viewOut_16x16;
			public final ims.framework.utils.Image BulletPoint;
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				Link = new ImageHelper(101128, "Images/COE/Page-Next.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Link;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Calendar_Select_Day = new ImageHelper(103137, "Images/Admin/calendar_select_day.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Calendar_Select_Day;
		}
		public final OCRRImages OCRR;
		public final CoreImages Core;
		public final CorrespondenceImages Correspondence;
		public final SchedulingImages Scheduling;
		public final RefManImages RefMan;
		public final EmergencyImages Emergency;
		public final ICPImages ICP;
		public final ClinicalImages Clinical;
		public final COEImages COE;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientIsInpatient = new ims.framework.ContextVariable("PatientIsInpatient", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__PatientIsInpatient_" + componentIdentifier + "");
			cxl_SelectedReferral = new ims.framework.ContextVariable("SelectedReferral", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier + "");
			cxl_HcpUser = new ims.framework.ContextVariable("HcpUser", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__HcpUser_" + componentIdentifier + "");
			cxl_DocumentsCollection = new ims.framework.ContextVariable("DocumentsCollection", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__DocumentsCollection_" + componentIdentifier + "");
			cxl_ReferralSettings = new ims.framework.ContextVariable("ReferralSettings", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralSettings_" + componentIdentifier + "");
			cxl_ReferralBackToGPOptionalMessageBoxId = new ims.framework.ContextVariable("ReferralBackToGPOptionalMessageBoxId", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralBackToGPOptionalMessageBoxId_" + componentIdentifier + "");
			cxl_ServiceQuestions = new ims.framework.ContextVariable("ServiceQuestions", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ServiceQuestions_" + componentIdentifier + "");
			cxl_ReferralBackToGPMandatoryMessageBoxId = new ims.framework.ContextVariable("ReferralBackToGPMandatoryMessageBoxId", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralBackToGPMandatoryMessageBoxId_" + componentIdentifier + "");
			cxl_InternalReferralHelper = new ims.framework.ContextVariable("InternalReferralHelper", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__InternalReferralHelper_" + componentIdentifier + "");
			cxl_MarkCompleteForDocument = new ims.framework.ContextVariable("MarkCompleteForDocument", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__MarkCompleteForDocument_" + componentIdentifier + "");
			cxl_DeniedActions = new ims.framework.ContextVariable("DeniedActions", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__DeniedActions_" + componentIdentifier + "");
			cxl_ActionPressed = new ims.framework.ContextVariable("ActionPressed", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ActionPressed_" + componentIdentifier + "");
			cxl_RequiresAuthorisationChanged = new ims.framework.ContextVariable("RequiresAuthorisationChanged", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__RequiresAuthorisationChanged_" + componentIdentifier + "");
			cxl_SelectedTab = new ims.framework.ContextVariable("SelectedTab", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedTab_" + componentIdentifier + "");
			cxl_AppointmentBookedMessageBoxId = new ims.framework.ContextVariable("AppointmentBookedMessageBoxId", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__AppointmentBookedMessageBoxId_" + componentIdentifier + "");
			cxl_FormStatus = new ims.framework.ContextVariable("FormStatus", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__FormStatus_" + componentIdentifier + "");
			cxl_WarningForReferralWithoutClinicalDetailsId = new ims.framework.ContextVariable("WarningForReferralWithoutClinicalDetailsId", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__WarningForReferralWithoutClinicalDetailsId_" + componentIdentifier + "");
			cxl_ReferralForContinueSaving = new ims.framework.ContextVariable("ReferralForContinueSaving", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier + "");
			cxl_saveValidatedForContinueSaving = new ims.framework.ContextVariable("saveValidatedForContinueSaving", prefix + "_lv_Clinical.InternalReferral.__internal_x_context__saveValidatedForContinueSaving_" + componentIdentifier + "");
		}
		
		public boolean getPatientIsInpatientIsNotNull()
		{
			return !cxl_PatientIsInpatient.getValueIsNull(context);
		}
		public Boolean getPatientIsInpatient()
		{
			return (Boolean)cxl_PatientIsInpatient.getValue(context);
		}
		public void setPatientIsInpatient(Boolean value)
		{
			cxl_PatientIsInpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientIsInpatient = null;
		public boolean getSelectedReferralIsNotNull()
		{
			return !cxl_SelectedReferral.getValueIsNull(context);
		}
		public ims.clinical.vo.ClinicalReferralsVo getSelectedReferral()
		{
			return (ims.clinical.vo.ClinicalReferralsVo)cxl_SelectedReferral.getValue(context);
		}
		public void setSelectedReferral(ims.clinical.vo.ClinicalReferralsVo value)
		{
			cxl_SelectedReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedReferral = null;
		public boolean getHcpUserIsNotNull()
		{
			return !cxl_HcpUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getHcpUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_HcpUser.getValue(context);
		}
		public void setHcpUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_HcpUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HcpUser = null;
		public boolean getDocumentsCollectionIsNotNull()
		{
			return !cxl_DocumentsCollection.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVoCollection getDocumentsCollection()
		{
			return (ims.core.vo.PatientDocumentVoCollection)cxl_DocumentsCollection.getValue(context);
		}
		public void setDocumentsCollection(ims.core.vo.PatientDocumentVoCollection value)
		{
			cxl_DocumentsCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DocumentsCollection = null;
		public boolean getReferralSettingsIsNotNull()
		{
			return !cxl_ReferralSettings.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.InternalReferralSettingsForReferralRecordingVo getReferralSettings()
		{
			return (ims.clinicaladmin.vo.InternalReferralSettingsForReferralRecordingVo)cxl_ReferralSettings.getValue(context);
		}
		public void setReferralSettings(ims.clinicaladmin.vo.InternalReferralSettingsForReferralRecordingVo value)
		{
			cxl_ReferralSettings.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralSettings = null;
		public boolean getReferralBackToGPOptionalMessageBoxIdIsNotNull()
		{
			return !cxl_ReferralBackToGPOptionalMessageBoxId.getValueIsNull(context);
		}
		public Integer getReferralBackToGPOptionalMessageBoxId()
		{
			return (Integer)cxl_ReferralBackToGPOptionalMessageBoxId.getValue(context);
		}
		public void setReferralBackToGPOptionalMessageBoxId(Integer value)
		{
			cxl_ReferralBackToGPOptionalMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralBackToGPOptionalMessageBoxId = null;
		public boolean getServiceQuestionsIsNotNull()
		{
			return !cxl_ServiceQuestions.getValueIsNull(context);
		}
		public ims.core.vo.AssessmentQuestionVoCollection getServiceQuestions()
		{
			return (ims.core.vo.AssessmentQuestionVoCollection)cxl_ServiceQuestions.getValue(context);
		}
		public void setServiceQuestions(ims.core.vo.AssessmentQuestionVoCollection value)
		{
			cxl_ServiceQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceQuestions = null;
		public boolean getReferralBackToGPMandatoryMessageBoxIdIsNotNull()
		{
			return !cxl_ReferralBackToGPMandatoryMessageBoxId.getValueIsNull(context);
		}
		public Integer getReferralBackToGPMandatoryMessageBoxId()
		{
			return (Integer)cxl_ReferralBackToGPMandatoryMessageBoxId.getValue(context);
		}
		public void setReferralBackToGPMandatoryMessageBoxId(Integer value)
		{
			cxl_ReferralBackToGPMandatoryMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralBackToGPMandatoryMessageBoxId = null;
		public boolean getInternalReferralHelperIsNotNull()
		{
			return !cxl_InternalReferralHelper.getValueIsNull(context);
		}
		public ims.clinicaladmin.helper.InternalReferralActionsHelper getInternalReferralHelper()
		{
			return (ims.clinicaladmin.helper.InternalReferralActionsHelper)cxl_InternalReferralHelper.getValue(context);
		}
		public void setInternalReferralHelper(ims.clinicaladmin.helper.InternalReferralActionsHelper value)
		{
			cxl_InternalReferralHelper.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InternalReferralHelper = null;
		public boolean getMarkCompleteForDocumentIsNotNull()
		{
			return !cxl_MarkCompleteForDocument.getValueIsNull(context);
		}
		public Boolean getMarkCompleteForDocument()
		{
			return (Boolean)cxl_MarkCompleteForDocument.getValue(context);
		}
		public void setMarkCompleteForDocument(Boolean value)
		{
			cxl_MarkCompleteForDocument.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MarkCompleteForDocument = null;
		public boolean getDeniedActionsIsNotNull()
		{
			return !cxl_DeniedActions.getValueIsNull(context);
		}
		public java.util.List<ims.core.vo.enums.InternalReferralStatusAction> getDeniedActions()
		{
			return (java.util.List<ims.core.vo.enums.InternalReferralStatusAction>)cxl_DeniedActions.getValue(context);
		}
		public void setDeniedActions(java.util.List<ims.core.vo.enums.InternalReferralStatusAction> value)
		{
			cxl_DeniedActions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeniedActions = null;
		public boolean getActionPressedIsNotNull()
		{
			return !cxl_ActionPressed.getValueIsNull(context);
		}
		public ims.core.vo.enums.InternalReferralStatusAction getActionPressed()
		{
			return (ims.core.vo.enums.InternalReferralStatusAction)cxl_ActionPressed.getValue(context);
		}
		public void setActionPressed(ims.core.vo.enums.InternalReferralStatusAction value)
		{
			cxl_ActionPressed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActionPressed = null;
		public boolean getRequiresAuthorisationChangedIsNotNull()
		{
			return !cxl_RequiresAuthorisationChanged.getValueIsNull(context);
		}
		public Boolean getRequiresAuthorisationChanged()
		{
			return (Boolean)cxl_RequiresAuthorisationChanged.getValue(context);
		}
		public void setRequiresAuthorisationChanged(Boolean value)
		{
			cxl_RequiresAuthorisationChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RequiresAuthorisationChanged = null;
		public boolean getSelectedTabIsNotNull()
		{
			return !cxl_SelectedTab.getValueIsNull(context);
		}
		public ims.framework.LayerBridge getSelectedTab()
		{
			return (ims.framework.LayerBridge)cxl_SelectedTab.getValue(context);
		}
		public void setSelectedTab(ims.framework.LayerBridge value)
		{
			cxl_SelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTab = null;
		public boolean getAppointmentBookedMessageBoxIdIsNotNull()
		{
			return !cxl_AppointmentBookedMessageBoxId.getValueIsNull(context);
		}
		public Integer getAppointmentBookedMessageBoxId()
		{
			return (Integer)cxl_AppointmentBookedMessageBoxId.getValue(context);
		}
		public void setAppointmentBookedMessageBoxId(Integer value)
		{
			cxl_AppointmentBookedMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AppointmentBookedMessageBoxId = null;
		public boolean getFormStatusIsNotNull()
		{
			return !cxl_FormStatus.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getFormStatus()
		{
			return (ims.framework.enumerations.FormMode)cxl_FormStatus.getValue(context);
		}
		public void setFormStatus(ims.framework.enumerations.FormMode value)
		{
			cxl_FormStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FormStatus = null;
		public boolean getWarningForReferralWithoutClinicalDetailsIdIsNotNull()
		{
			return !cxl_WarningForReferralWithoutClinicalDetailsId.getValueIsNull(context);
		}
		public Integer getWarningForReferralWithoutClinicalDetailsId()
		{
			return (Integer)cxl_WarningForReferralWithoutClinicalDetailsId.getValue(context);
		}
		public void setWarningForReferralWithoutClinicalDetailsId(Integer value)
		{
			cxl_WarningForReferralWithoutClinicalDetailsId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WarningForReferralWithoutClinicalDetailsId = null;
		public boolean getReferralForContinueSavingIsNotNull()
		{
			return !cxl_ReferralForContinueSaving.getValueIsNull(context);
		}
		public ims.clinical.vo.ClinicalReferralsVo getReferralForContinueSaving()
		{
			return (ims.clinical.vo.ClinicalReferralsVo)cxl_ReferralForContinueSaving.getValue(context);
		}
		public void setReferralForContinueSaving(ims.clinical.vo.ClinicalReferralsVo value)
		{
			cxl_ReferralForContinueSaving.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralForContinueSaving = null;
		public boolean getsaveValidatedForContinueSavingIsNotNull()
		{
			return !cxl_saveValidatedForContinueSaving.getValueIsNull(context);
		}
		public Boolean getsaveValidatedForContinueSaving()
		{
			return (Boolean)cxl_saveValidatedForContinueSaving.getValue(context);
		}
		public void setsaveValidatedForContinueSaving(Boolean value)
		{
			cxl_saveValidatedForContinueSaving.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_saveValidatedForContinueSaving = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class InternalReferralsNotes implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 1;
			}
			public void disableAllInternalReferralsNotesMenuItems()
			{
				this.contextMenuInternalReferralsNotesNEWItem.setEnabled(false);
			}
			public void hideAllInternalReferralsNotesMenuItems()
			{
				this.contextMenuInternalReferralsNotesNEWItem.setVisible(false);
			}
			private Menu contextMenuInternalReferralsNotes;
			public ReadOnlyMenuItem getInternalReferralsNotesNEWItem()
			{
				return this.contextMenuInternalReferralsNotesNEWItem;
			}
			private MenuItem contextMenuInternalReferralsNotesNEWItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[178];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Clinical.ClinicalReferralRef", "BO-1072100112-ID", "ID_ClinicalReferrals");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Clinical.LinkedPatientDocument", "BO-1068100001-ID", "ID_PatientDocument");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-ID", "ID_ClinicalReferrals");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-REFERRALTYPE", "ReferralType");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-URGENTREFERRAL", "UrgentReferral");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-NEWCONDITION", "NewCondition");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-REQUIRESAUTHORISATION", "RequiresAuthorisation");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-REASONFORREFERRAL", "ReasonForReferral");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-DATEDECISIONTOREFER", "DateDecisionToRefer");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-PATHWAYID", "PathwayID");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-ACKNOWLEDGEREJECTION", "AcknowledgeRejection");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100112-PATIENT", "Patient");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralSettings_" + componentIdentifier, "BO-1073100036-ID", "ID_InternalReferralSettings");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralSettings_" + componentIdentifier, "BO-1073100036-NEWCONDITIONREFERRALBACKTOGP", "NewConditionReferralBackToGP");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralSettings_" + componentIdentifier, "BO-1073100036-REFERRALBACKTOGPOPTIONALMESSAGE", "ReferralBackToGPOptionalMessage");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralSettings_" + componentIdentifier, "BO-1073100036-REFERRALBACKTOGPMANDATORYMESSAGE", "ReferralBackToGPMandatoryMessage");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralSettings_" + componentIdentifier, "BO-1073100036-URGENTREFERRALBACKGROUNDCOLOUR", "UrgentReferralBackgroundColour");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralSettings_" + componentIdentifier, "BO-1073100036-ALLOWSCANIMPORT", "AllowScanImport");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-ID", "ID_ClinicalReferrals");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-REFERRALTYPE", "ReferralType");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-URGENTREFERRAL", "UrgentReferral");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-NEWCONDITION", "NewCondition");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-REQUIRESAUTHORISATION", "RequiresAuthorisation");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-REASONFORREFERRAL", "ReasonForReferral");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-DATEDECISIONTOREFER", "DateDecisionToRefer");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-PATHWAYID", "PathwayID");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-ACKNOWLEDGEREJECTION", "AcknowledgeRejection");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferral.__internal_x_context__ReferralForContinueSaving_" + componentIdentifier, "BO-1072100112-PATIENT", "Patient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
