//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3314.22227)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargemedicationcomponent;

import ims.clinical.forms.edischargemedicationcomponent.GenForm.grdMedicationRow;
import ims.clinical.helper.JACExecutionHelper;
import ims.clinical.vo.AdmissionMedicationChangesVo;
import ims.clinical.vo.AdmissionMedicationChangesVoCollection;
import ims.clinical.vo.DischargeMedicationDetailsVo;
import ims.clinical.vo.RTLSummaryVo;
import ims.clinical.vo.TTAMedicationVo;
import ims.clinical.vo.TTAMedicationVoCollection;
import ims.clinical.vo.TTANoteVoCollection;
import ims.clinical.vo.lookups.TTORequired;
import ims.clinicaladmin.vo.lookups.EDischargeHINT;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.FieldHelpVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static int COL_MEDICATION_NAME = 0;
	private static int COL_MEDICATION_DOSE = 1;
	private static int COL_MEDICATION_ROUTE = 2;
	private static int COL_MEDICATION_FREQUENCY = 3;
	private static int COL_MEDICATION_DAYS_SUPPLIED = 4;
	private static int COL_GP_CONT = 5;
	private static int COL_MEDICATION_COMMENTS = 6;
	private static int COL_DUMMY = 7;
	//-----------------------------------------------------------------------------------------------------------
	// Component interface functions
	//-----------------------------------------------------------------------------------------------------------
	
	public void initialise() 
	{
		if (form.getLocalContext().getbInitialised() == null)
		{
			initializeComponent();
			open();
			form.getLocalContext().setbInitialised(Boolean.TRUE);
		}
	}


	
	//-----------------------------------------------------------------------------------------------------------
	// Event handlers
	//-----------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}
	
	@Override
	protected void onBtnTTACommentsClick() throws PresentationLogicException
	{
		DischargeMedicationDetailsVo selectedRecord = form.getLocalContext().getSelectedRecord();
		
		engine.open(form.getForms().Clinical.TTANotesDialog, new Object[] {selectedRecord}, false);
	}

	private void initializeComponent() 
	{
		setTooltips();
		form.getLocalContext().setisReadonly(false);

		form.getLocalContext().setbInitialised(null);
		initializeJACDynGrid();
	}

	private void setTooltips() 
	{ 
		EDischargeHINT lkpHint = new EDischargeHINT();
		
		lkpHint.setId(-1722); //TTO Required
		FieldHelpVo voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbTTOHINT().setTooltip(voHint.getHelpText());
		
		lkpHint.setId(-1723); //Meds On Discharge
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbMedsOnDisch().setTooltip(voHint.getHelpText());
		
		lkpHint.setId(-1724); //Meds Recommendations
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbMedRecommends().setTooltip(voHint.getHelpText());
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		open();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		btnSaveClick();
	}

	private void btnSaveClick() throws PresentationLogicException
	{
		if (form.cmbRequired().getValue() == null)
		{
			engine.showMessage("TTO : Required is a mandatory field");
			form.cmbRequired().setFocus();
			return; 
		}

		if (save())
			open();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}
	
	public void clearInstanceControls()
	{
		form.cmbRequired().setValue(null);
		form.dynGrdJAC().getRows().clear();
		form.txtMedicationRecommendations().setValue(null);
	}
	//WDEV-18622
	private RTLSummaryVo populateRTLSummary(CareContextShortVo careContext)
	{
		if (careContext == null)
			return null;
		
		RTLSummaryVo rTLSummary = domain.getRTLSummaryForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if (rTLSummary == null)
		{
			rTLSummary = new RTLSummaryVo();
		}
		rTLSummary.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		rTLSummary.setIsMedsRequiredOrNotRequired(TTORequired.REQUIRED.equals(form.cmbRequired().getValue()) || TTORequired.NOT_REQUIRED.equals(form.cmbRequired().getValue()));
    	
		return rTLSummary;
	}
	
	public boolean save() throws PresentationLogicException 
	{
		DischargeMedicationDetailsVo voMeds = populateDataFromScreen();
		RTLSummaryVo rTLSummary = populateRTLSummary(form.getGlobalContext().Core.getCurrentCareContext()); //WDEV-18622
		String[] str = voMeds.validate();
		if (str != null && str.length > 0 && rTLSummary.validate() != null) //WDEV-18622
		{
			engine.showErrors(str);
			return false;
		}

		try 
		{
			voMeds = domain.saveMedication(voMeds, rTLSummary); //WDEV-18622
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			form.setMode(FormMode.VIEW);			
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage("The data has been changed by medication message or another user. The screen will be refreshed.");
			
			form.setMode(FormMode.VIEW);
			open();
			
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			form.fireCustomControlValueChanged();
			
			return false;
		} 
		form.getLocalContext().setSelectedRecord(voMeds);
		form.setMode(FormMode.VIEW);

		return true;
	}

	private DischargeMedicationDetailsVo populateDataFromScreen() 
	{
		DischargeMedicationDetailsVo voMeds = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voMeds = form.getLocalContext().getSelectedRecord();
		else
			voMeds = new DischargeMedicationDetailsVo();

		if (voMeds.getCareContext() == null)
			voMeds.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voMeds.setTTARequired(form.cmbRequired().getValue());

		voMeds.setMedicationRecommendations(form.txtMedicationRecommendations().getValue());
		
		//wdev-19376
		if( !voMeds.getID_MedicationDetailsIsNotNull() )
			voMeds.setTTAReceived(Boolean.FALSE);
		//----------
	
		return voMeds;
	}

	public void open()
	{
		DischargeMedicationDetailsVo voMeds = domain.getMedication(form.getGlobalContext().Core.getCurrentCareContext());
		form.getLocalContext().setSelectedRecord(voMeds);
		
		populateScreenFromData(voMeds);
		
		manageReadOnly();
		
		updateControlsState();
	}


	private void updateControlsState()
	{
		boolean ttaCommentsPresent = form.getLocalContext().getSelectedRecord() != null && form.getLocalContext().getSelectedRecord().getTTAComments() != null  && form.getLocalContext().getSelectedRecord().getTTAComments().size() > 0;
		
		form.btnTTAComments().setVisible(ttaCommentsPresent);
		form.btnTTAComments().setEnabled(true);
		
		//WDEV-8369
		updateControlStateLblRefreshDateTime();
	}



	private void populateScreenFromData(DischargeMedicationDetailsVo voMeds)
	{
		clearInstanceControls();
		//WDEV-8183
		form.grdMedication().getRows().clear();
		//Should clear even if the new value is null
		
		if (voMeds == null)
			return;
		
		form.cmbRequired().setValue(voMeds.getTTARequired());
		//-----------------------------------------------------
		if (form.getMode().equals(FormMode.EDIT))
			form.btnOrderTTO().setVisible(TTORequired.REQUIRED.equals(form.cmbRequired().getValue())?true:false);
		//--------------------------------------------------------
		 if (voMeds.getTTAsIsNotNull())
		 {
			 	//	WDEV-9537
			 	TTAMedicationVoCollection ttas = voMeds.getTTAs();
			 	//ttas.sort(new TTANameCaseInsensitiveComparator<TTAMedicationVo>() );
			 	populateTTAsFromData(ttas.sort()); //WDEV-19289 //WDEV-19789 

		 }
		//form.grdJAC().sort(0);
		if (voMeds.getAdmissionMedicationChangesIsNotNull())
		{
			//	WDEV-9537
    		AdmissionMedicationChangesVoCollection admissionMedicationChanges = voMeds.getAdmissionMedicationChanges();
    		admissionMedicationChanges.sort(new TTANameCaseInsensitiveComparator<AdmissionMedicationChangesVo>());
    		
    		for ( int i = 0 ;i < admissionMedicationChanges.size() ; i++)
    		{
    			AdmissionMedicationChangesVo voChanges = admissionMedicationChanges.get(i);
    			
    			grdMedicationRow rowMeds = form.grdMedication().getRows().newRow();
    			rowMeds.setcolAdm(voChanges.getMedication());
    			rowMeds.setcolChange(voChanges.getMedicationChanges());
    			rowMeds.setValue(voChanges);
    		}
		//form.grdMedication().sort(0);
		}
		form.txtMedicationRecommendations().setValue(voMeds.getMedicationRecommendations());
	}
	
	private void populateTTAsFromData(TTAMedicationVoCollection ttas)
	{
		for ( int i = 0 ; i < ttas.size() ; i++)
		{
			TTAMedicationVo voTTA = ttas.get(i);

			DynamicGridRow tTARow = form.dynGrdJAC().getRows().newRow();
			tTARow.setSelectable(Boolean.FALSE);
			
			DynamicGridCell medNameCell = tTARow.getCells().newCell(getColumn(COL_MEDICATION_NAME), DynamicCellType.STRING);
			medNameCell.setReadOnly(Boolean.TRUE);
			medNameCell.setValue(voTTA.getMedication());
			medNameCell.setTooltip(voTTA.getMedication());
			
			DynamicGridCell doseCell = tTARow.getCells().newCell(getColumn(COL_MEDICATION_DOSE), DynamicCellType.STRING);
			doseCell.setReadOnly(Boolean.TRUE);
			doseCell.setValue(voTTA.getDoseAmount().toString() + " " + (voTTA.getDoseUnitIsNotNull() ? voTTA.getDoseUnit().toString() : ""));
			doseCell.setTooltip(voTTA.getDoseAmount().toString() + " " + (voTTA.getDoseUnitIsNotNull() ? voTTA.getDoseUnit().toString() : ""));
			
			DynamicGridCell routeCell = tTARow.getCells().newCell(getColumn(COL_MEDICATION_ROUTE), DynamicCellType.STRING);
			routeCell.setReadOnly(Boolean.TRUE);
			routeCell.setValue(voTTA.getRouteIsNotNull() ? voTTA.getRoute().toString() : null);
			routeCell.setTooltip(voTTA.getRouteIsNotNull() ? voTTA.getRoute().toString() : "");

			DynamicGridCell freqCell = tTARow.getCells().newCell(getColumn(COL_MEDICATION_FREQUENCY), DynamicCellType.STRING);
			freqCell.setReadOnly(Boolean.TRUE);
			freqCell.setValue(voTTA.getFrequency());
			freqCell.setTooltip(voTTA.getFrequency());

			DynamicGridCell daysSuppliedCell = tTARow.getCells().newCell(getColumn(COL_MEDICATION_DAYS_SUPPLIED), DynamicCellType.STRING);
			daysSuppliedCell.setReadOnly(Boolean.TRUE);
			daysSuppliedCell.setValue(voTTA.getDaysSupply().toString());
			daysSuppliedCell.setTooltip(voTTA.getDaysSupply().toString());

			DynamicGridCell gpToContCell = tTARow.getCells().newCell(getColumn(COL_GP_CONT), DynamicCellType.STRING);
			gpToContCell.setReadOnly(Boolean.TRUE);
			gpToContCell.setValue(voTTA.getGpToContinueIsNotNull() ? voTTA.getGpToContinue().toString() : null);
			gpToContCell.setTooltip(voTTA.getGpToContinueIsNotNull() ? voTTA.getGpToContinue().toString() : "");

			if (voTTA.getMedComments() != null && voTTA.getMedComments().size() > 0)
			{
				DynamicGridCell commentsCell = tTARow.getCells().newCell(getColumn(COL_MEDICATION_COMMENTS), DynamicCellType.IMAGEBUTTON);
				commentsCell.setValue(form.getImages().Core.Memo);
				commentsCell.setReadOnly(Boolean.FALSE);
				commentsCell.setAutoPostBack(Boolean.TRUE);
				commentsCell.setTooltip(getTooltipForMedComments(voTTA.getMedComments()));
			}

			tTARow.setValue(voTTA);
			
			form.lblRefreshDateTime().setValue(voTTA.getSysInfoIsNotNull() ? voTTA.getSysInfo().getCreationDateTime().toString() : "");
		}				

	}
	private DynamicGridColumn getColumn(Integer colFieldName) 
	{
			return form.dynGrdJAC().getColumns().getByIdentifier(colFieldName);
	}	
	private String getTooltipForMedComments(TTANoteVoCollection medComments)
	{
		StringBuilder tooltip = new StringBuilder();
		
		if (medComments == null)
			return null;
		
		for (int i = 0; i < medComments.size(); i++)
		{
			tooltip.append(medComments.get(i).getTTAComment());
			
			if (i < medComments.size() - 1)
				tooltip.append("<br/>");
		}
		
		return tooltip.toString();
	}



	private void manageReadOnly() 
	{
		if (form.getMode().equals(FormMode.VIEW) )
			form.btnEdit().setVisible(true);

		if (form.getLocalContext().getisReadonlyIsNotNull()
			&& form.getLocalContext().getisReadonly()
			&& form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}

	@Override
	protected void onBtnOrderTTOClick() throws PresentationLogicException 
	{
		btnSaveClick();

		JACExecutionHelper JAC = new JACExecutionHelper(engine, form.getGlobalContext().Core.getPatientShort());
		JAC.executeJAC();
	}

	public void setReadOnly() 
	{
		form.getLocalContext().setisReadonly(/*form.getGlobalContext().Clinical.geteDischargeCompleted()*/form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		
		manageReadOnly();
	}

	//WDEV-8369
	@Override
	protected void onCmbRequiredValueChanged()
			throws PresentationLogicException {
		updateControlStateLblRefreshDateTime();
		
	}
	private void updateControlStateLblRefreshDateTime(){
		form.lblRefreshDateTime().setVisible(TTORequired.NOT_REQUIRED.equals(form.cmbRequired().getValue())?false:true);
		//--------
		if (form.getMode().equals(FormMode.EDIT))
			form.btnOrderTTO().setVisible(TTORequired.REQUIRED.equals(form.cmbRequired().getValue())?true:false);
		//----------
	}
	class TTANameCaseInsensitiveComparator<T> implements Comparator<T>
	{

		public int compare(T o1, T o2)
		{
			return getMedicationName(o1).compareToIgnoreCase(getMedicationName(o2));
		}
		
		private String getMedicationName(T med)
		{
	
			if (med instanceof TTAMedicationVo)
			{	
				TTAMedicationVo ttamed = (TTAMedicationVo) med;
				return ttamed.getMedicationIsNotNull()?ttamed.getMedication():"";
			}
			if (med instanceof AdmissionMedicationChangesVo)
			{
				AdmissionMedicationChangesVo amc = (AdmissionMedicationChangesVo) med;
				return amc.getMedicationIsNotNull()?amc.getMedication():"";
			}
			return "";
		}
	}
	
	private void initializeJACDynGrid()
	{
		form.dynGrdJAC().clear();
		form.dynGrdJAC().setSelectable(false);
				
		DynamicGridColumn col = form.dynGrdJAC().getColumns().newColumn("Medication", COL_MEDICATION_NAME);
		col.setWidth(230);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
				
		col = form.dynGrdJAC().getColumns().newColumn("Dose", COL_MEDICATION_DOSE);
		col.setWidth(70);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
				
		col = form.dynGrdJAC().getColumns().newColumn("Route", COL_MEDICATION_ROUTE);
		col.setWidth(70);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
				
		col = form.dynGrdJAC().getColumns().newColumn("Frequency / Notes", COL_MEDICATION_FREQUENCY);
		col.setWidth(120);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
				
		col = form.dynGrdJAC().getColumns().newColumn("Days Supplied", COL_MEDICATION_DAYS_SUPPLIED);
		col.setWidth(90);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
				
		col = form.dynGrdJAC().getColumns().newColumn("GP to Continue", COL_GP_CONT);
		col.setWidth(150);
		col.setCanGrow(Boolean.FALSE);
		col.setReadOnly(Boolean.TRUE);
		
		col = form.dynGrdJAC().getColumns().newColumn("", COL_MEDICATION_COMMENTS);
		col.setWidth(-1);
		col.setAlignment(Alignment.CENTER);
		col.setReadOnly(Boolean.FALSE);
		col.setCanGrow(Boolean.FALSE);
		
	}
	protected void onDynGrdJACCellButtonClicked(DynamicGridCell cell)
	{		
		DynamicGridRow row = cell.getRow();
		
		if (row != null && row.getValue() != null && row.getValue() instanceof TTAMedicationVo)
		{
			TTAMedicationVo medication = (TTAMedicationVo) row.getValue();
			
			if (medication.getMedComments() != null && medication.getMedComments().size() > 0)
				engine.open(form.getForms().Clinical.TTANotesDialog, new Object[] {medication}, false);
		}
		
	}

}
