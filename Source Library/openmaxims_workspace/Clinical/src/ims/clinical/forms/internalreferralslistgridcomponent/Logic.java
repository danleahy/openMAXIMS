//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.internalreferralslistgridcomponent;

import ims.clinical.vo.ClinicalReferralStatusVo;
import ims.clinical.vo.ClinicalReferralStatusVoCollection;
import ims.clinical.vo.ClinicalReferralToUpdateForPatientReferralsListVo;
import ims.clinical.vo.ClinicalReferralsForIncomingReferralListVo;
import ims.clinical.vo.ClinicalReferralsForIncomingReferralListVoCollection;
import ims.clinical.vo.ClinicalReferralsSaveForIncomingReferralListVo;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVo;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVoCollection;
import ims.clinical.vo.PatientForIncomingReferralListVo;
import ims.clinical.vo.enums.InternalReferralGridComponentAction;
import ims.clinical.vo.lookups.ClinicalReferralType;
import ims.clinical.vo.lookups.InternalReferralStatusChangeReason;
import ims.clinical.vo.lookups.InternalReferralsGridColumn;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.enums.InternalReferralStatusAction;
import ims.core.vo.lookups.InternalReferralStatus;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;

import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void initialise(ims.clinical.vo.InternalReferralsGridColumnDetailsVoCollection columns)
	{
		form.getLocalContext().setInternalReferralHelper(domain.getInternalReferralHelper());
		form.getLocalContext().setInternalReferralSettings(domain.getInternalReferralSettings());
		
		Object hcpUser = domain.getHcpLiteUser();
		
		if(hcpUser instanceof HcpLiteVo)
		{
			form.getLocalContext().setCurrentHcpUser((HcpLiteVo) hcpUser);
			form.getLocalContext().setCurrentMosUser(((HcpLiteVo) hcpUser).getMos());
		}
		else
		{
			Object mosUser = domain.getMosUser();
			
			if(mosUser instanceof MemberOfStaffLiteVo)
			{
				form.getLocalContext().setCurrentMosUser((MemberOfStaffLiteVo) mosUser);
			}
		}
		
		form.dyngrdReferrals().clear();
		form.dyngrdReferrals().setSelectable(true);
		
		if(columns == null)
			return;
		
		for(InternalReferralsGridColumnDetailsVo column : columns)
		{
			addColumn(column);
		}
		
		form.lblTotal().setValue("Total : " + form.dyngrdReferrals().getRows().size());
	}

	private void addColumn(InternalReferralsGridColumnDetailsVo column) 
	{
		if(column == null || column.getColumn() == null)
			return;
		
		String columnHeader = null;
		
		if(InternalReferralsGridColumn.PATIENT_ID.equals(column.getColumn()))
		{
			columnHeader = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText();
		}
		else if(InternalReferralsGridColumn.APPOINTMENT_STATUS.equals(column.getColumn()))
		{
			columnHeader = "";
		}
		else
		{
			columnHeader = column.getColumn().getText();
		}
		
		DynamicGridColumn col = form.dyngrdReferrals().getColumns().newColumn(columnHeader);
		col.setIdentifier(column.getColumn());
		col.setWidth(column.getWidth() != null ? column.getWidth() : 0);
		col.setCanGrow(true);
		
		if(InternalReferralsGridColumn.URGENT.equals(column.getColumn()) || InternalReferralsGridColumn.DOB.equals(column.getColumn()) || InternalReferralsGridColumn.REFERRAL_DATE.equals(column.getColumn()) || InternalReferralsGridColumn.PATIENT_ID.equals(column.getColumn()) || InternalReferralsGridColumn.APPOINTMENT_STATUS.equals(column.getColumn()))
		{
			col.setCanGrow(false);
		}
		
		if(InternalReferralsGridColumn.APPOINTMENT_STATUS.equals(column.getColumn()))
		{
			col.setAlignment(Alignment.CENTER);
			return;
		}
		
		if(InternalReferralsGridColumn.REFERRAL_DATE.equals(column.getColumn()) || InternalReferralsGridColumn.DOB.equals(column.getColumn()) || InternalReferralsGridColumn.PATIENT_NAME.equals(column.getColumn()) || InternalReferralsGridColumn.REFERRAL_TO.equals(column.getColumn()) || InternalReferralsGridColumn.REFERRIING_HCP.equals(column.getColumn()))
		{
			col.setSortMode(SortMode.MANUAL);
		}
		else
		{
			col.setSortMode(SortMode.AUTOMATIC);
		}
	}

	public void setValue(ims.clinical.vo.ClinicalReferralsForIncomingReferralListVoCollection referrals)
	{
		clear();
		
		if(referrals != null)
		{
			for(ClinicalReferralsForIncomingReferralListVo referral : referrals)
			{
				addReferralRow(referral);
			}
		}
		
		form.dyngrdReferrals().setValue(null);
		form.dyngrdReferrals().setValue(form.getLocalContext().getCurrentRecord());
		
		selectionChanged();
		
		if(form.dyngrdReferrals().getValue() == null)
		{
			form.getLocalContext().setCurrentRecord(null);
		}
		
		form.lblTotal().setValue("Total : " + form.dyngrdReferrals().getRows().size());
		
		updateControlsState();
	}

	private void clear() 
	{
		form.dyngrdReferrals().getRows().clear();
		
		form.lblTotal().setValue("Total : " + form.dyngrdReferrals().getRows().size());
		
		if(!Boolean.TRUE.equals(form.getLocalContext().getIsPatientMandatory()))
		{
			form.getGlobalContext().Core.setPatientShort(null);
		}
		
		form.getGlobalContext().Core.setPatientDocumentsCollectionForClinicalReferral(null);
		
		form.getGlobalContext().Clinical.setClinicalReferralRef(null);
	}

	private void addReferralRow(ClinicalReferralsForIncomingReferralListVo referral) 
	{
		if(referral == null)
			return;
		
		DynamicGridRow row = form.dyngrdReferrals().getRows().newRow();
		row.setValue(referral);
		row.setReadOnly(true);
		
		DynamicGridCell cell = null;
		
		for(int i=0; i<form.dyngrdReferrals().getColumns().size(); i++)
		{
			DynamicGridColumn column = form.dyngrdReferrals().getColumns().get(i);
	
			if(column.getIdentifier() == null)
				continue;
			
			if(InternalReferralsGridColumn.URGENT.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				String urgentValue = Boolean.TRUE.equals(referral.getUrgentReferral()) ? "Yes" : (Boolean.FALSE.equals(referral.getUrgentReferral()) ? "No" : null);
				cell.setValue(urgentValue);
				cell.setTooltip(urgentValue);
				
				if(Boolean.TRUE.equals(referral.getUrgentReferral()))
				{
					if(form.getLocalContext().getInternalReferralSettings() != null && form.getLocalContext().getInternalReferralSettings().getUrgentReferralBackgroundColour() != null)
					{
						row.setBackColor(form.getLocalContext().getInternalReferralSettings().getUrgentReferralBackgroundColour());
					}
				}
			}
			
			if(InternalReferralsGridColumn.REFERRAL_DATE.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.DATE);
				
				cell.setValue(referral.getDateDecisionToRefer());
				cell.setTooltip(referral.getDateDecisionToRefer() != null ? referral.getDateDecisionToRefer().toString() : null);
			}
			if(InternalReferralsGridColumn.IP_OR_OP.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				cell.setValue(referral.getReferralTypeText());
				cell.setTooltip(referral.getReferralTypeText());
			}
			if(InternalReferralsGridColumn.PATIENT_ID.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				PatientId patientID = referral.getPatient().getDisplayId();
				
				if(patientID != null)
				{
					cell.setValue(patientID.getValue());
					
					if(!PatIdType.NHSN.equals(patientID.getType()))
					{
						if(referral.getPatient().getNhsn() != null)
						{
							cell.setTooltip("NHS Number:" + referral.getPatient().getNhsn().getValue());
						}
					}
				}
			}
			if(InternalReferralsGridColumn.PATIENT_NAME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				String nameValue = referral.getPatient() != null ? referral.getPatient().getName().toString() : null;
				cell.setValue(nameValue);
				cell.setTooltip(nameValue);
			}
			if(InternalReferralsGridColumn.DOB.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				String dobValue = (referral.getPatient() != null && referral.getPatient().getDob() != null) ? referral.getPatient().getDob().toString() : null;
				cell.setValue(dobValue);
				cell.setTooltip(dobValue);
			}
			if(InternalReferralsGridColumn.REFERRIING_HCP.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				String referringHcpValue = referral.getReferringHCP() != null ? referral.getReferringHCP().getIHcpName() : null;
				cell.setValue(referringHcpValue);
				cell.setTooltip(referringHcpValue);
			}
			if(InternalReferralsGridColumn.SERVICE.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				String serviceValue = (referral.getReferToService() != null && referral.getReferToService().getService() != null) ? referral.getReferToService().getService().getServiceName() : null;
				cell.setValue(serviceValue);
				cell.setTooltip(serviceValue);
			}
			if(InternalReferralsGridColumn.REFERRAL_TO.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				String refToValue = referral.getReferToHCP() != null ? referral.getReferToHCP().getIHcpName() : null;
				cell.setValue(refToValue);
				cell.setTooltip(refToValue);
			}
			if(InternalReferralsGridColumn.APPOINTMENT_STATUS.equals(column.getIdentifier()))
			{
				Image img = null;
				String tooltip = null;
				if(referral.getCurrentReferralStatus() != null && Boolean.TRUE.equals(referral.getCurrentReferralStatus().getAppointmentRequired()))
				{
					img = form.getImages().Scheduling.session_16;
					tooltip = "Appointment Required";
				}
				else if(referral.getCurrentReferralStatus() != null && Boolean.TRUE.equals(referral.getCurrentReferralStatus().getAppointmentBooked()))
				{
					img = form.getImages().Core.Calendar16;
					tooltip = "Appointment Booked";
				}
				
				if(img != null)
				{
					cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
					
					cell.setValue(img);
					cell.setTooltip(tooltip);
				}
			}
			if(InternalReferralsGridColumn.STATUS.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				
				String statusValue = (referral.getCurrentReferralStatus() != null && referral.getCurrentReferralStatus().getReferralStatus() != null) ? referral.getCurrentReferralStatus().getReferralStatus().getText() : null;
				cell.setValue(statusValue);
				cell.setTooltip(statusValue);
			}
		}
	}

	@Override
	protected void onDyngrdDocumentsRowSelectionChanged(DynamicGridRow row)	throws PresentationLogicException 
	{
		selectionChanged();
		updateControlsState();
		
		if(form.getLocalContext().getAllowedActions() == null || form.getLocalContext().getAllowedActions().size() == 0)
		{
			form.getGlobalContext().Clinical.setClinicalReferralRef((ClinicalReferralsForIncomingReferralListVo) form.dyngrdReferrals().getValue());
			viewReferral();
		}
	}

	private void selectionChanged() 
	{
		form.getLocalContext().setAction(null);
		
		if(!(form.dyngrdReferrals().getValue() instanceof ClinicalReferralsForIncomingReferralListVo))
			return;
		
		if(!Boolean.TRUE.equals(form.getLocalContext().getIsPatientMandatory()))
		{
			PatientForIncomingReferralListVo patient = ((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).getPatient();
		
			if(patient != null)
			{
				form.getGlobalContext().Core.setPatientShort(new PatientShort(patient.getID_Patient(), patient.getVersion_Patient()));
			}
		}
		
		form.getLocalContext().setCurrentRecord((ClinicalReferralsForIncomingReferralListVo)((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).clone());
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		form.getGlobalContext().Clinical.setClinicalReferralRef((ClinicalReferralsForIncomingReferralListVo) form.dyngrdReferrals().getValue());
		
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.NEW:
				newReferral();
			break;
		
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.EDIT:
				editReferral();
			break;
		
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.VIEW:
				viewReferral();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.SIGN_OFF_REFERRAL:
				signOffReferral();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.REQ_FURTHER_INFO:
				reqFurtherInfo();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.REC_FURTHER_INFO:
				recFurtherInfo();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.RIE:
				markReferralAsRie();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.ClinicalReferralsListMenu.APPT_BOOKED:
				apptBookedMenu();
			break;
		}
		
		updateControlsState();
	}
	
	private void apptBookedMenu() 
	{
		form.getLocalContext().setAppointmentBookedMsgBoxId(engine.showMessage("Confirm appointment for " + getPatientName() + " has been Booked", "Warning", MessageButtons.YESNO));
	}

	private String getPatientName() 
	{
		if(!(form.dyngrdReferrals().getValue() instanceof ClinicalReferralsForIncomingReferralListVo))
			return "";
		
		return ((ClinicalReferralsForIncomingReferralListVo) form.dyngrdReferrals().getValue()).getPatient().getName().toString();
	}

	private void apptBooked() 
	{
		if(save(InternalReferralStatus.ACCEPTED, Boolean.TRUE))
		{
			form.getLocalContext().setAction(InternalReferralGridComponentAction.REFRESH);
			form.fireCustomControlValueChanged();
		}
	}

	private void markReferralAsRie() 
	{
		if(!(form.dyngrdReferrals().getValue() instanceof ClinicalReferralsForIncomingReferralListVo))
			return;
		
		form.getLocalContext().setRIEReferral((ClinicalReferralsForIncomingReferralListVo) form.dyngrdReferrals().getValue());
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	private void editReferral() 
	{
		engine.open(form.getForms().Clinical.InternalReferralDialog, new Object[] {FormMode.EDIT, form.getLocalContext().getDeniedActions()});
	}

	private void newReferral() 
	{
		form.dyngrdReferrals().setValue(null);
		form.getLocalContext().setCurrentRecord(null);
		
		form.getGlobalContext().Core.setPatientDocumentsCollectionForClinicalReferral(null);
		form.getGlobalContext().Clinical.setClinicalReferralRef(null);
		
		engine.open(form.getForms().Clinical.InternalReferralDialog, new Object[] {FormMode.EDIT, form.getLocalContext().getDeniedActions()});
	}

	private void recFurtherInfo() 
	{
		engine.open(form.getForms().Clinical.InternalReferralDialog, new Object[] {FormMode.EDIT, form.getLocalContext().getDeniedActions(), InternalReferralStatusAction.RECORD_FURTHER_INFORMATION});
	}

	private void reqFurtherInfo() 
	{
		engine.open(form.getForms().Clinical.InternalReferralDialog, new Object[] {FormMode.EDIT, form.getLocalContext().getDeniedActions(), InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION});
	}

	private void signOffReferral() 
	{
		engine.open(form.getForms().Clinical.InternalReferralDialog, new Object[] {FormMode.EDIT, form.getLocalContext().getDeniedActions(), InternalReferralStatusAction.SIGN_OFF});
	}

	private void viewReferral() 
	{
		engine.open(form.getForms().Clinical.InternalReferralDialog, new Object[] {FormMode.VIEW, form.getLocalContext().getDeniedActions()});
	}
	
	private void updateControlsState() 
	{
		InternalReferralStatus status = null;
		ClinicalReferralType referralType = null;
		boolean appointmentRequired = false;
		boolean appointmentBooked = false;
		
		if(form.dyngrdReferrals().getValue() instanceof ClinicalReferralsForIncomingReferralListVo)
		{
			referralType = ((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).getReferralType();
			
			if(((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).getCurrentReferralStatus() != null)
			{
				status = ((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).getCurrentReferralStatus().getReferralStatus();
				appointmentRequired = Boolean.TRUE.equals(((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).getCurrentReferralStatus().getAppointmentRequired());
				appointmentBooked = Boolean.TRUE.equals(((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).getCurrentReferralStatus().getAppointmentBooked());
			}
		}
		
		form.getContextMenus().Clinical.hideAllClinicalReferralsListMenuMenuItems();
		
		form.getContextMenus().Clinical.getClinicalReferralsListMenuNEWItem().setVisible(form.getGlobalContext().Core.getPatientShort() != null && isAllowedAction(InternalReferralStatusAction.NEW) && !isDeniedAction(InternalReferralStatusAction.NEW));
		form.getContextMenus().Clinical.getClinicalReferralsListMenuVIEWItem().setVisible(form.dyngrdReferrals().getValue() != null && isAllowedAction(InternalReferralStatusAction.VIEW) && !isDeniedAction(InternalReferralStatusAction.VIEW));
		form.getContextMenus().Clinical.getClinicalReferralsListMenuEDITItem().setVisible(form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.EDIT) && isAllowedAction(InternalReferralStatusAction.EDIT) && !isDeniedAction(InternalReferralStatusAction.EDIT));
		form.getContextMenus().Clinical.getClinicalReferralsListMenuSIGN_OFF_REFERRALItem().setVisible(form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.SIGN_OFF) && form.getLocalContext().getCurrentHcpUser() != null && isAllowedAction(InternalReferralStatusAction.SIGN_OFF) && !isDeniedAction(InternalReferralStatusAction.SIGN_OFF));
		form.getContextMenus().Clinical.getClinicalReferralsListMenuREQ_FURTHER_INFOItem().setVisible(form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION) && isAllowedAction(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION) && !isDeniedAction(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION));
		form.getContextMenus().Clinical.getClinicalReferralsListMenuREC_FURTHER_INFOItem().setVisible(form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.RECORD_FURTHER_INFORMATION) && isAllowedAction(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION) && !isDeniedAction(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION));
		form.getContextMenus().Clinical.getClinicalReferralsListMenuRIEItem().setVisible(form.dyngrdReferrals().getValue() != null && isAllowedAction(InternalReferralStatusAction.RIE) && !isDeniedAction(InternalReferralStatusAction.RIE));
		form.getContextMenus().Clinical.getClinicalReferralsListMenuAPPT_BOOKEDItem().setVisible(form.getLocalContext().getInternalReferralHelper().getActionState(status, referralType, InternalReferralStatusAction.APPOINTMENT_BOOKED) && isAllowedAction(InternalReferralStatusAction.APPOINTMENT_BOOKED) && !isDeniedAction(InternalReferralStatusAction.APPOINTMENT_BOOKED) && !appointmentBooked && appointmentRequired);
	}
	
	private boolean save(InternalReferralStatus statusAfterLetterWasAttached, Boolean bookedAppt) 
	{
		if(form.dyngrdReferrals().getValue() == null)
			return false;
		
		int previousVersion = ((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue()).getVersion_ClinicalReferrals();
		
		ClinicalReferralsSaveForIncomingReferralListVo clinicalReferral = domain.getClinicalReferral((ClinicalReferralsForIncomingReferralListVo)form.dyngrdReferrals().getValue());
		
		if(clinicalReferral == null)
			return false;
		
		int currentVersion = clinicalReferral.getVersion_ClinicalReferrals();
		
		if(previousVersion < currentVersion)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setAction(InternalReferralGridComponentAction.REFRESH);
			form.fireCustomControlValueChanged();
        	return false;
		}
		
		clinicalReferral = populateClinicalReferral(clinicalReferral, statusAfterLetterWasAttached, bookedAppt);
		
		String[] errors = clinicalReferral.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			domain.save(clinicalReferral);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setAction(InternalReferralGridComponentAction.REFRESH);
			form.fireCustomControlValueChanged();
			return false;
		}
		
		return true;
	}
	
	private boolean isAllowedAction(InternalReferralStatusAction action) 
	{
		if(action == null)
			return false;
		
		if(form.getLocalContext().getAllowedActions() == null || form.getLocalContext().getAllowedActions().size() == 0)
			return false;
		
		for(int i=0; i<form.getLocalContext().getAllowedActions().size(); i++)
		{
			if(action.equals(form.getLocalContext().getAllowedActions().get(i)))
				return true;
		}
		
		return false;
	}
	
	private ClinicalReferralsSaveForIncomingReferralListVo populateClinicalReferral(ClinicalReferralsSaveForIncomingReferralListVo clinicalReferral, InternalReferralStatus statusInstance, Boolean bookedAppt) 
	{
		if(clinicalReferral == null)
			return null;
		
		if(statusInstance != null)
		{
			ClinicalReferralStatusVo status = createStatus(statusInstance, bookedAppt);
			clinicalReferral.setCurrentReferralStatus(status);
			
			if(clinicalReferral.getHistoryOfReferralStatus() == null)
			{
				clinicalReferral.setHistoryOfReferralStatus(new ClinicalReferralStatusVoCollection());
			}
			
			clinicalReferral.getHistoryOfReferralStatus().add(status);
		}
		
		return clinicalReferral;
	}
	
	private ClinicalReferralStatusVo createStatus(InternalReferralStatus status, Boolean bookedAppt) 
	{
		ClinicalReferralStatusVo currentStatus = new ClinicalReferralStatusVo();
		
		RecordingUserInformationVo userInfo = new RecordingUserInformationVo();
		userInfo.setRecordingUser(form.getLocalContext().getCurrentMosUser());
		userInfo.setRecordingDateTime(new DateTime());
		
		currentStatus.setRecordingInfo(userInfo);
		currentStatus.setReferralStatus(status);
		
		if(Boolean.TRUE.equals(bookedAppt))
		{
			currentStatus.setInternalReferralStatusChangeReason(InternalReferralStatusChangeReason.BOOKING_MADE);
			currentStatus.setAppointmentBooked(true);
			currentStatus.setAppointmentRequired(false);
		}
		
		return currentStatus;
	}

	private boolean isDeniedAction(InternalReferralStatusAction referralAction) 
	{
		if(referralAction == null)
			return false;
		
		if(form.getLocalContext().getDeniedActions() == null || form.getLocalContext().getDeniedActions().size() == 0)
			return false;
		
		for(int i=0; i<form.getLocalContext().getDeniedActions().size(); i++)
		{
			if(referralAction.equals(form.getLocalContext().getDeniedActions().get(i)))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(form.getForms().Core.RieConfirmationDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				markAsRIE();
				form.getLocalContext().setAction(InternalReferralGridComponentAction.REFRESH);
				form.fireCustomControlValueChanged();
			}
		}
		
		if(form.getForms().Clinical.InternalReferralsEditNoteDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result) || DialogResult.ABORT.equals(result))
			{
				form.getLocalContext().setAction(InternalReferralGridComponentAction.REFRESH);
				form.fireCustomControlValueChanged();
			}
		}
		
		if(form.getForms().Clinical.InternalReferralDialog.equals(formName))
		{
			if(form.getGlobalContext().Clinical.getClinicalReferralRef() != null && form.getLocalContext().getCurrentRecord() == null)
			{
				form.getLocalContext().setCurrentRecord(new ClinicalReferralsForIncomingReferralListVo(form.getGlobalContext().Clinical.getClinicalReferralRef().getID_ClinicalReferrals(), form.getGlobalContext().Clinical.getClinicalReferralRef().getVersion_ClinicalReferrals()));
			}
			
			form.getLocalContext().setAction(InternalReferralGridComponentAction.REFRESH);
			form.fireCustomControlValueChanged();
		}
		
		if(form.getForms().Clinical.InternalReferralAdminEventDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result) || DialogResult.ABORT.equals(result))
			{
				form.getLocalContext().setAction(InternalReferralGridComponentAction.REFRESH);
				form.fireCustomControlValueChanged();
			}
		}
		
		form.getGlobalContext().Clinical.setClinicalReferralRef(null);
		
		updateControlsState();
	}

	private void markAsRIE() 
	{
		if(domain.isStale(form.getLocalContext().getRIEReferral()))
        {
        	engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        	return;
        }

        ClinicalReferralToUpdateForPatientReferralsListVo clinicalReferral = domain.getClinicalReferralForRIE(form.getLocalContext().getRIEReferral());
        
		try 
		{
			if (clinicalReferral.getClinicalReferralNotes() != null	&& clinicalReferral.getClinicalReferralNotes().size() > 0) 
			{
				for (int i = 0; i < clinicalReferral.getClinicalReferralNotes().size(); i++) 
				{
					domain.markAsRie(clinicalReferral.getClinicalReferralNotes().get(i), form.getForms().Clinical.InternalReferralsListGridComponent, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, null, form.getGlobalContext().Core.getRieMessage());
				}
			}
			
			domain.markAsRie(clinicalReferral, form.getForms().Clinical.InternalReferralsListGridComponent, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null, null, form.getGlobalContext().Core.getRieMessage());
			
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}

	public InternalReferralGridComponentAction getAction() 
	{
		return form.getLocalContext().getAction();
	}

	public void initialise(PatientShort patient, InternalReferralsGridColumnDetailsVoCollection columns) 
	{
		initialise(patient, columns, null, null);
	}

	@Override
	protected void onDyngrdReferralsColumnHeaderClicked(DynamicGridColumn column) 
	{
		if(column == null)
			return;
		
		ClinicalReferralsForIncomingReferralListVoCollection referrals = getReferralsFromFrid();
		
		if(referrals == null)
			return;
		
		if(InternalReferralsGridColumn.REFERRAL_DATE.equals(column.getIdentifier()))
		{
			form.getLocalContext().setReferralDateSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getReferralDateSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			referrals.sort(new InternalReferralsReferralDateComparator(form.getLocalContext().getReferralDateSortOrder()));
		}
		if(InternalReferralsGridColumn.PATIENT_NAME.equals(column.getIdentifier()))
		{
			form.getLocalContext().setPatientNameSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getPatientNameSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			referrals.sort(new InternalReferralsPatientNameComparator(form.getLocalContext().getPatientNameSortOrder()));
		}
		if(InternalReferralsGridColumn.DOB.equals(column.getIdentifier()))
		{
			form.getLocalContext().setDOBSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getDOBSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			referrals.sort(new InternalReferralsDOBComparator(form.getLocalContext().getDOBSortOrder()));
		}
		if(InternalReferralsGridColumn.REFERRIING_HCP.equals(column.getIdentifier()))
		{
			form.getLocalContext().setReferringBySortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getReferringBySortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			referrals.sort(new InternalReferralsReferringByComparator(form.getLocalContext().getReferringBySortOrder()));
		}
		if(InternalReferralsGridColumn.REFERRAL_TO.equals(column.getIdentifier()))
		{
			form.getLocalContext().setReferralToSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getReferralToSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			referrals.sort(new InternalReferralsReferralToComparator(form.getLocalContext().getReferralToSortOrder()));
		}
		
		setValue(referrals);
	}

	private ClinicalReferralsForIncomingReferralListVoCollection getReferralsFromFrid() 
	{
		if(form.dyngrdReferrals().getRows().size() == 0)
			return null;
		
		ClinicalReferralsForIncomingReferralListVoCollection referrals = new ClinicalReferralsForIncomingReferralListVoCollection();
		
		for(int i=0; i<form.dyngrdReferrals().getRows().size(); i++)
		{
			if(form.dyngrdReferrals().getRows().get(i).getValue() instanceof ClinicalReferralsForIncomingReferralListVo)
			{
				referrals.add((ClinicalReferralsForIncomingReferralListVo) form.dyngrdReferrals().getRows().get(i).getValue());
			}
		}
		
		return referrals;
	}
	
	public class InternalReferralsDOBComparator implements Comparator<ClinicalReferralsForIncomingReferralListVo>
	{
		private int order = 1;
		
		public InternalReferralsDOBComparator()
		{
			order = 1;
		}
		
		public InternalReferralsDOBComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2)
		{
			if(o1 != null && o1.getPatient().getDobIsNotNull() && o2 != null && o2.getPatient().getDobIsNotNull())
				return order*o1.getPatient().getDob().compareTo(o2.getPatient().getDob());
			
			if (o1 == null || !o1.getPatient().getDobIsNotNull())
				return -1 * order;
			
			if (o2 == null || !o2.getPatient().getDobIsNotNull())
				return order;
			
			return 0;
		}
	}
	
	public class InternalReferralsPatientNameComparator implements Comparator<ClinicalReferralsForIncomingReferralListVo>
	{
		private int order = 1;
		
		public InternalReferralsPatientNameComparator()
		{
			order = 1;
		}
		
		public InternalReferralsPatientNameComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2)
		{
			if(o1 != null && o1.getPatient().getNameIsNotNull() && o2 != null && o2.getPatient().getNameIsNotNull())
				return order*o1.getPatient().getName().compareTo(o2.getPatient().getName());
			
			if (o1 == null || !o1.getPatient().getNameIsNotNull())
				return -1 * order;
			
			if (o2 == null || !o2.getPatient().getNameIsNotNull())
				return order;
			
			return 0;
		}
	}
	
	public class InternalReferralsReferralToComparator implements Comparator<ClinicalReferralsForIncomingReferralListVo>
	{
		private int order = 1;
		
		public InternalReferralsReferralToComparator()
		{
			order = 1;
		}
		
		public InternalReferralsReferralToComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2)
		{
			if(o1 != null && o1.getReferToHCPIsNotNull() && o1.getReferToHCP().getMosIsNotNull() && o1.getReferToHCP().getMos().getNameIsNotNull() && o2 != null && o2.getReferToHCPIsNotNull() && o2.getReferToHCP().getMosIsNotNull() && o2.getReferToHCP().getMos().getNameIsNotNull())
				return order* o1.getReferToHCP().getMos().getName().compareTo( o2.getReferToHCP().getMos().getName());
			
			if (o1 == null || !o1.getReferToHCPIsNotNull() || !o1.getReferToHCP().getMosIsNotNull() || !o1.getReferToHCP().getMos().getNameIsNotNull())
				return -1 * order;
			
			if (o2 == null || !o2.getReferToHCPIsNotNull() || !o2.getReferToHCP().getMosIsNotNull() || !o2.getReferToHCP().getMos().getNameIsNotNull())
				return order;
			
			return 0;
		}
	}
	
	public class InternalReferralsReferringByComparator implements Comparator<ClinicalReferralsForIncomingReferralListVo>
	{
		private int order = 1;
		
		public InternalReferralsReferringByComparator()
		{
			order = 1;
		}
		
		public InternalReferralsReferringByComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2)
		{
			if(o1 != null && o1.getReferringHCP().getMosIsNotNull() && o1.getReferringHCP().getMos().getNameIsNotNull() && o2 != null && o2.getReferringHCP().getMosIsNotNull() && o2.getReferringHCP().getMos().getNameIsNotNull())
				return order* o1.getReferringHCP().getMos().getName().compareTo( o2.getReferringHCP().getMos().getName());
			
			if (o1 == null || !o1.getReferringHCP().getMosIsNotNull() || !o1.getReferringHCP().getMos().getNameIsNotNull())
				return -1 * order;
			
			if (o2 == null || !o2.getReferringHCP().getMosIsNotNull() || !o2.getReferringHCP().getMos().getNameIsNotNull())
				return order;
			
			return 0;
		}
	}
	
	public class InternalReferralsReferralDateComparator implements Comparator<ClinicalReferralsForIncomingReferralListVo>
	{
		private int order = 1;
		
		public InternalReferralsReferralDateComparator()
		{
			order = 1;
		}
		
		public InternalReferralsReferralDateComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2)
		{
			if(o1 != null && o1.getDateDecisionToRefer() != null && o2 != null && o2.getDateDecisionToRefer() != null)
				return order* o1.getDateDecisionToRefer().compareTo(o2.getDateDecisionToRefer());
			
			if (o1 == null || !o1.getDateDecisionToReferIsNotNull())
				return -1 * order;
			
			if (o2 == null || !o2.getDateDecisionToReferIsNotNull())
				return order;
			
			return 0;
		}
	}

	public void initialise(PatientShort patient, InternalReferralsGridColumnDetailsVoCollection columns, List<InternalReferralStatusAction> deniedActions, List<InternalReferralStatusAction> allowedActions) 
	{
		form.getGlobalContext().Core.setPatientShort(patient);
		
		if(patient != null)
		{
			form.getLocalContext().setIsPatientMandatory(true);
		}
		
		form.getLocalContext().setDeniedActions(deniedActions);
		form.getLocalContext().setAllowedActions(allowedActions);
		
		initialise(columns);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getAppointmentBookedMsgBoxId() != null && form.getLocalContext().getAppointmentBookedMsgBoxId() == messageBoxId)
		{
			if(DialogResult.YES.equals(result))
			{
				apptBooked();
			}
		}
	}
}
