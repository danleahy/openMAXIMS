//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3352.27411)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargepreviewcomponent;

import ims.clinical.forms.edischargepreviewcomponent.GenForm.grdReciepientRow;
import ims.clinical.vo.DementiaForWorklistVo;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeMedicationDetailsLiteVo;
import ims.clinical.vo.DischargeReadyToLeaveVo;
import ims.clinical.vo.DischargeReportDetailVo;
import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo;
import ims.clinical.vo.RTLSummaryVo;
import ims.clinical.vo.enums.DementiaWorklistOpenFormModeEnum;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.clinical.vo.lookups.TTORequired;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.GPLiteWithCommChannelsVo;
import ims.core.vo.GPLiteWithCommChannelsVoCollection;
import ims.core.vo.GpLiteVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.PatientDiagnosisEDischargeListVoCollection;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.PatientNoDiagInfoForCCVo;
import ims.core.vo.PatientShort;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.DementiaWorklistStatus;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.PatientDiagnosisStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;	
	private String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
	private String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
	private boolean isComplete = false;
	
	//WDEV-18843
	private static final String COLUMN1 		= "Column1";
	private static final String COLUMN2			= "Column2";
	private static final String COLUMN3 		= "Column3";
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initializeSummaryDynGrid();//WDEV-18843
		form.getLocalContext().setisReadonly(false);
		form.ccHCP().initialize(MosType.MEDIC);
		form.ccHCP().isRequired(true);
		//-------------
		openFromOnFromOpen();
		//--------------
	}
	
	//WDEV-18843
	private void initializeSummaryDynGrid()
	{
		form.dyngrdSummary().clear();
		form.dyngrdSummary().setHeaderHeight(0);
		form.dyngrdSummary().setSelectable(false);
		DynamicGridColumn col1 = form.dyngrdSummary().getColumns().newColumn("", true);
		col1.setWidth(100);	//WDEV-20282
		col1.setIdentifier(COLUMN1);
		
		DynamicGridColumn userColumn = form.dyngrdSummary().getColumns().newColumn("", true);
		userColumn.setWidth(220); //WDEV-20282
		userColumn.setIdentifier(COLUMN2);

		DynamicGridColumn preEditedNoteColumn = form.dyngrdSummary().getColumns().newColumn("", true);
		preEditedNoteColumn.setWidth(-1);	
		preEditedNoteColumn.setIdentifier(COLUMN3);
		preEditedNoteColumn.setCanGrow(false);
		preEditedNoteColumn.setAlignment(Alignment.CENTER);
		
	}
	public void openFromOnFromOpen()
	{
		form.getLocalContext().setisCurrentUserMoS(domain.getHcpLiteUser()!=null);
		
		form.btnUndo().setVisible(false);//wdev-8465
		DischargeReportDetailVo record = domain.getDischargeReportDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if(record != null)
		{
			if(record.getIsClinicalDetailsComplete() == true)
			{
				form.btnUndo().setVisible(form.getLocalContext().getisCurrentUserMoS());
				isComplete = true;
			}
			else
			{
				form.btnUndo().setVisible(false);
			}
		}
		
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}	
	
	private String buildReport()
	{		
		CareContextShortVo currentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		String url = "";
		
		Integer reportID = 163;
		obj = domain.getSystemReportAndTemplate(reportID);
		client.addSeed(new SeedValue("CARE_CONTEXT",  currentCareContext.getID_CareContext(), Integer.class));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return "";
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return "";
		}
				
		try
		{
			url = client.buildReportAsUrlInlineFrame((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
			if (url != null)
			{
				return url;
			}
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return "";
		}
				
		return "";
	}
	
	
	private boolean manageDialog()
	{
		PatientDiagnosisEDischargeListVoCollection listComor = domain.listRelevComorbidity(form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext()); //WDEV-19820 //WDEV-20265
		PatientDiagnosisEDischargeListVoCollection listComp = domain.listComplications(form.getGlobalContext().Core.getEpisodeofCareShort());
		PatientNoDiagInfoForCCVo patientNoDiagInfo = domain.getPatientNoDiagInfoForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		DischargeDetailsVo dischargeDetails = domain.getDischargeDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		boolean showNoDiagnosisMessage = false;
		
		if (patientNoDiagInfo == null && (form.dyngrdSummary().getRows().size()>0 && form.dyngrdSummary().getRows().get(0).getCells().size()<=2 )) //for old data //18843
		{
			PatientDiagnosisEDischargeListVoCollection diagnoses = domain.listDiagnoses(form.getGlobalContext().Core.getEpisodeofCareShort());
			showNoDiagnosisMessage = diagnoses == null || diagnoses.size() == 0;
		}
		else
			showNoDiagnosisMessage =form.dyngrdSummary().getRows().size()>0 && form.dyngrdSummary().getRows().get(0).getCells().size()>2 && !Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(0).getCells().get(getCol(COLUMN3)).getValue()) && !(patientNoDiagInfo!=null && (PatientDiagnosisStatus.HASDIAGNOSISFOREPISODE.equals(patientNoDiagInfo.getDiagnosisStatus()) || PatientDiagnosisStatus.NOKNOWNDIAGNOSISFOREPISODE.equals(patientNoDiagInfo.getDiagnosisStatus())));

		StringBuffer sb = new StringBuffer();
		
		Boolean.TRUE.equals(dischargeDetails.getHasNoComplications());
		boolean noComplications =(dischargeDetails!=null && Boolean.TRUE.equals(dischargeDetails.getHasNoComplications())) || (  form.dyngrdSummary().getRows().size()>1 && form.dyngrdSummary().getRows().get(1).getCells().size()>2 && Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(1).getCells().get(getCol(COLUMN3)).getValue()));
		boolean noComorbidities =(dischargeDetails!=null && Boolean.TRUE.equals(dischargeDetails.getHasNoComorbidities())) || ( form.dyngrdSummary().getRows().size()>2 && form.dyngrdSummary().getRows().get(2).getCells().size()>2 && Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(2).getCells().get(getCol(COLUMN3)).getValue()));

		
		if ( (listComor.size() == 0 && !noComorbidities)
			|| (listComp.size() == 0 && !noComplications) || showNoDiagnosisMessage) 
		{
			sb.append("No ");

			if (listComor.size() == 0 && ! noComorbidities)
			{
				sb.append("Co-Morbidities"); //WDEV-20265
			}

			if (listComor.size() == 0 && ! noComorbidities
				&& listComp.size() == 0 && ! noComplications )
				sb.append(" or Complications");
			else if (listComp.size() == 0 && ! noComplications )
				sb.append("Complications");
			
			if (showNoDiagnosisMessage && ((listComor.size() == 0 && ! noComorbidities) || (listComp.size() == 0 && ! noComplications)))
			{
				sb.append(" or Diagnoses");
			}
			else if (showNoDiagnosisMessage)
				sb.append("Diagnoses");
			
			sb.append(" recorded for this Patient's episode.");
		}

		if (form.lblTTARequired().getValue().equals("Not Specified"))
			sb.append("\n\n No TTA Required information recorded.");
			
		StringBuffer sbDementiaWarning = new StringBuffer();
		if(form.getLocalContext().getDementiaStatusIsNotNull()
			&& form.getLocalContext().getDementiaStatus().getCurrentWorklistStatusIsNotNull())//wdev-16251
		{
			if ( !form.getLocalContext().getDementiaStatus().getCurrentWorklistStatus().getStatus().equals(DementiaWorklistStatus.COMPLETED)
				&& !form.getLocalContext().getDementiaStatus().getCurrentWorklistStatus().getStatus().equals(DementiaWorklistStatus.FOR_REFERRAL)
				&& !form.getLocalContext().getDementiaStatus().getCurrentWorklistStatus().getStatus().equals(DementiaWorklistStatus.EXCLUDED)
				&& ! ConfigFlag.GEN.DEMENTIA_ALLOW_SAVE_EDISCHARGE_DISCHARGEDETAILS.getValue())
			{
				
				if( form.getLocalContext().getDementiaStatus().getDischargeDateTime() == null)
					sb.append("\n\nDementia FAIR process is not completed. Please complete the Dementia record so eDischarge can be completed.");
				else
					sbDementiaWarning.append("Dementia FAIR process is not completed, however eDischarge will still be saved as there is a Discharge date on the Dementia record.");
			}
		}
		if (sb.length() > 0)
		{
	//		form.htmPreview().setVisible(false);
			engine.showMessage(sb.toString());
			return false;
		}
		else if (sbDementiaWarning.length() > 0)
		{
	//		form.htmPreview().setVisible(false);		
			engine.showMessage(sbDementiaWarning.toString());
			return true;
		}
			
		return true;
	}
	private void saveFromManageDialog()
	{
		if (save())
		{
			form.setMode(FormMode.VIEW);
			manageReadOnly();
		}
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String err = getUIErrors(null);
		if (err != null && err != "")
		{	
			engine.showMessage(err);
			return; 
		}
		DischargeReportDetailVo record = populateDataFromScreen(form.getLocalContext().getEditedRecord());
		
		String[] errors = record.validate();			
		if (errors != null && errors.length > 0) 
		{	
			engine.showErrors(errors);
			return;
		}
		
		if ( form.chkClinicalDetails().getValue() == true)
		{ 
//			if (form.getLocalContext().getEditedRecord() == null || !form.getLocalContext().getEditedRecord().getIsClinicalDetailsComplete())
			if (form.getLocalContext().getEditedRecord() == null || form.getLocalContext().getEditedRecord().getIsClinicalDetailsComplete())
			{
				if(!manageDialog())
					return;
			}
		}
			 
		if (save())
		{
			if (isTTARequiredAndNoTTAMedicationSaved(form.getLocalContext().getTTAMedicationDetails())) //WDEV-18635
			{
				form.htmPreview().setVisible(false);
				engine.showMessage("This eDischarge record has a medication status of 'eTTA Required', but there are no TTA medication records saved at the moment.", "TTA Medications - No Data", MessageButtons.OK, MessageIcon.WARNING);
			}
			form.setMode(FormMode.VIEW);
			open();
			updateButtonUndo();
			manageReadOnly();
		}
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
		 
	}
	//WDEV-18635
	private boolean isTTARequiredAndNoTTAMedicationSaved(DischargeMedicationDetailsLiteVo med)
	{
		if (med == null)
			return false;
		if (TTORequired.REQUIRED.equals(med.getTTARequired()) && (med.getTTAs() == null || (med.getTTAs() != null && med.getTTAs().size() == 0)))
		{
			return true;	
		}
		return false;
	}
	private boolean save() 
	{
		
		DischargeReportDetailVo record = populateDataFromScreen(form.getLocalContext().getEditedRecord());
		RTLSummaryVo rTLSummary = populateRTLSummary(form.getGlobalContext().Core.getCurrentCareContext(),record); //WDEV-18622
		
		String[] errors = record.validate();			
		if (errors != null && errors.length > 0) 
		{	
			engine.showErrors(errors);
			return false;
		}
		
		DischargeDetailsVo details = populateDataFromScreen(domain.getDischargeDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		errors = details.validate();
		if (errors != null && errors.length>0)
		{
			throw new CodingRuntimeException("Discharge Details should be valid !");
		}
		
		PatientNoDiagInfoForCCVo patientNoDiagInfo = null;
		
		if (form.dyngrdSummary().getRows().size()>0 && form.dyngrdSummary().getRows().get(0).getCells().size()>2 && Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(0).getCells().get(getCol(COLUMN3)).getValue())) //WDEV-18843
				patientNoDiagInfo = populatePatientNoDiagInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getPatientShort());
		
		try 
		{
			record = domain.saveDischargeReportDetail(record, null, rTLSummary, patientNoDiagInfo); //WDEV-18622
			domain.saveDischargeDetails(details);
		}
		catch (StaleObjectException e) 
		{
			form.htmPreview().setVisible(false);
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(),"Error", MessageButtons.OK, MessageIcon.ERROR);
	
			form.setMode(FormMode.VIEW);
			open();
			updateButtonUndo();
			manageReadOnly();

			return false;
		}
		isComplete = true;
		form.getLocalContext().setEditedRecord(record);
		if(record.getIsClinicalDetailsCompleteIsNotNull() && record.getIsClinicalDetailsComplete() == true)
		{
			setReadOnly();
			form.getGlobalContext().Clinical.seteDischargeClinicalComplete(true);
			updateButtonUndo();
			
		}
		return true;
	}
	
	private PatientNoDiagInfoForCCVo populatePatientNoDiagInfo(CareContextShortVo careContext, PatientShort patientShort)
	{
		if (careContext == null)
			return null;

		PatientNoDiagInfoForCCVo patientNoDiagInfo = domain.getPatientNoDiagInfoForCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if (patientNoDiagInfo == null)
		{
			patientNoDiagInfo = new PatientNoDiagInfoForCCVo();
		}

		if (PatientDiagnosisStatus.NOKNOWNDIAGNOSISFOREPISODE.equals(patientNoDiagInfo.getDiagnosisStatus()))
			return null;

		AuthoringInformationVo authoringInformation = new AuthoringInformationVo();

		authoringInformation.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		authoringInformation.setAuthoringDateTime(new DateTime());

		patientNoDiagInfo.setAuthoringInformation(authoringInformation);
		patientNoDiagInfo.setCareContext(careContext);
		patientNoDiagInfo.setPatient(patientShort);
		patientNoDiagInfo.setDiagnosisStatus(PatientDiagnosisStatus.NOKNOWNDIAGNOSISFOREPISODE);

		return patientNoDiagInfo;
	}
	
	//WDEV-18622
	private RTLSummaryVo populateRTLSummary(CareContextShortVo careContext, DischargeReportDetailVo dischargeDetail)
	{
		if (careContext == null)
			return null;
		
		RTLSummaryVo rTLSummary = domain.getRTLSummaryForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if (rTLSummary == null)
		{
			rTLSummary = new RTLSummaryVo();
		}
		rTLSummary.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		rTLSummary.setWasPreviewSignedOff(dischargeDetail.getIsClinicalDetailsComplete());
		
		//WDEV-18843
		if (form.dyngrdSummary().getRows().size()>1 && form.dyngrdSummary().getRows().get(1).getCells().size()>2)
		{
			rTLSummary.setWereComplicationsEntered(Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(1).getCells().get(getCol(COLUMN3)).getValue()));
		}
		
		if (form.dyngrdSummary().getRows().size()>2 && form.dyngrdSummary().getRows().get(2).getCells().size()>2)
		{
			rTLSummary.setWereCoMorbiditiesEntered(Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(2).getCells().get(getCol(COLUMN3)).getValue()));
		}
		
		return rTLSummary;
	}
	
	private String getUIErrors(String[] errors) 
	{	
		ArrayList <String> e=new ArrayList<String>();
		if(form.chkClinicalDetails().getValue() == true)
		{
			if (form.ccHCP().getValue() == null)
				e.add("HCP is a Mandatory field");
			if (form.dtimCompletion().getValue() == null)
				e.add("Date of Completion is a Mandatory field");
			else{
				if(form.getGlobalContext().Core.getPatientShortIsNotNull()){
					PatientShort ps = form.getGlobalContext().Core.getPatientShort();
					if (ps.getDobIsNotNull() && ps.getDob().isGreaterThan(form.dtimCompletion().getValue().getDate()))
						e.add("Date of Completion cannot be before Date of Birth");
				}
				if ((new DateTime()).isLessThan(form.dtimCompletion().getValue()))
				{
					e.add("Date of Completion cannot be in the future");
				}
			}
		}
		
		if (errors != null &&
				errors.length > 0)
		{
			for (int i = 0; i < errors.length; i++) 
			{
				e.add(errors[i]);
			}
		}
		
		String err = "";
		for (int i = 0; i < e.size(); i++) 
		{
			err += e.get(i) + "\n";
		}
		
		
		if (err != null)
			return err;		
		
		return null;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
		updateButtonUndo();
		manageReadOnly();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}
	private void updateButtonUndo()
	{
		form.btnUndo().setVisible(form.getLocalContext().getEditedRecordIsNotNull() && form.getLocalContext().getEditedRecord().getIsClinicalDetailsComplete() && form.getLocalContext().getisCurrentUserMoS());
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				addGP();
				break;
			//WDEV-18843
			case GenForm.ContextMenus.GenericGrid.Remove:
				form.grdReciepient().removeSelectedRow();
				break;
				
			default:
				break;
		}
		
		updateControlState();	//WDEV-18843
	}
	
	private DischargeReportDetailVo populateDataFromScreen(DischargeReportDetailVo dischargeReportDetail)
	{
		if (dischargeReportDetail == null)
			dischargeReportDetail = new DischargeReportDetailVo();
						
		//if (dischargeReportDetail.getAuthoringInformation() == null)
		//{
			AuthoringInformationVo vo = new AuthoringInformationVo();
			Object user = domain.getHcpLiteUser();
			if (user != null)
			{
				vo.setAuthoringHcp((HcpLiteVo) user);
				vo.setAuthoringDateTime(new DateTime());
				dischargeReportDetail.setAuthoringInformation(vo);
			}
		//}
		
		if (dischargeReportDetail.getCareContext() == null)
		{			
			dischargeReportDetail.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
			
		IMos hcp = form.ccHCP().getValue();
		if (hcp != null)
		{
			HcpLiteVo completingHcp = domain.getHcp((HcpRefVo)hcp);
			dischargeReportDetail.setCompletingHCP(completingHcp);
		}
		
		dischargeReportDetail.setDateOfCompletion(form.dtimCompletion().getValue());
		
		
		GPLiteWithCommChannelsVoCollection gpRecipients = dischargeReportDetail.getGpRecipients();
		if (gpRecipients == null)
			gpRecipients = new GPLiteWithCommChannelsVoCollection();
		
		gpRecipients.clear();
		for (int i = 0; i < form.grdReciepient().getRows().size(); i++) 
		{
			gpRecipients.add(form.grdReciepient().getRows().get(i).getValue());
		}
		dischargeReportDetail.setGpRecipients(gpRecipients);
		dischargeReportDetail.setIsClinicalDetailsComplete(form.chkClinicalDetails().getValue());
		
		return dischargeReportDetail;
	}
	private DischargeDetailsVo populateDataFromScreen(DischargeDetailsVo dischargeDetails)
	{
		if (dischargeDetails==null){
			throw new CodingRuntimeException("DischargeDetails should not be null");
		}
		
		if (form.dyngrdSummary().getRows().size()>1 && form.dyngrdSummary().getRows().get(1).getCells().size()>2)
		{
			dischargeDetails.setHasNoComplications(Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(1).getCells().get(getCol(COLUMN3)).getValue()));
		}
		
		if (form.dyngrdSummary().getRows().size()>2 && form.dyngrdSummary().getRows().get(2).getCells().size()>2)
		{
			dischargeDetails.setHasNoComorbidities(Boolean.TRUE.equals(form.dyngrdSummary().getRows().get(2).getCells().get(getCol(COLUMN3)).getValue()));
		}
		
		
		
		return dischargeDetails;
		
	}
	
	private void addGP() 
	{
		form.htmPreview().setHTML("");
		engine.open(form.getForms().Core.GPSelection);		
	}
	public void initialise()
	{
		if (form.getMode().equals(FormMode.EDIT)) 
			return;
		
		form.getLocalContext().setDementiaStatus(null);//wdev-16251
		form.setMode(FormMode.VIEW);
		openFromOnFromOpen();
		
		open();
	
		if (!form.getLocalContext().getisCurrentUserMoS() )
			engine.showMessage( "The logged in user is not a HCP.\nYou will not be able to edit this form.");
	}
	
	private void open() //WDEV-18843
	{
		form.getLocalContext().setEditedRecord(null);
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			form.getLocalContext().setEditedRecord(domain.getDischargeReportDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		}
		
		populateScreenFromData(form.getLocalContext().getEditedRecord());
		
		if (!form.getLocalContext().getEditedRecordIsNotNull())
			prePopulateRecipients(form.getGlobalContext().Core.getPatientShort());
		
		populateScreenFromData(domain.getDischargeDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		
		populateDementiaAndVteLabels();//wdev-16251 WDEV-16745
	}

	//wdev-16251
	private void populateDementiaAndVteLabels()
	{
		boolean areVteLabelsVisible = (Boolean.TRUE.equals(ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue()) && form.getGlobalContext().Core.getCurrentCareContext() != null && form.getGlobalContext().Core.getCurrentCareContext().getPasEvent() != null);
		form.lblDementiaLabel().setVisible(false);
		form.lblDementiaStatus().setVisible(false);
		form.imbDementia().setVisible(false);		//wdev-18785
		
		//WDEV-16745
		form.lblVteLabel().setVisible(areVteLabelsVisible);
		form.lblVteStatus().setVisible(areVteLabelsVisible);
		
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()
			&& form.getGlobalContext().Core.getCurrentCareContext().getPasEventIsNotNull())
		{
			form.getLocalContext().setDementiaStatus(domain.getDementiaStatus(form.getGlobalContext().Core.getCurrentCareContext().getPasEvent()));
			form.lblDementiaLabel().setVisible(form.getLocalContext().getDementiaStatusIsNotNull());
			form.lblDementiaStatus().setVisible(form.getLocalContext().getDementiaStatusIsNotNull());
			form.lblDementiaStatus().setValue(form.getLocalContext().getDementiaStatusIsNotNull() && form.getLocalContext().getDementiaStatus().getCurrentWorklistStatusIsNotNull() ? form.getLocalContext().getDementiaStatus().getCurrentWorklistStatus().getStatus().getText() : "");
			form.imbDementia().setVisible(form.getLocalContext().getDementiaStatusIsNotNull());		//wdev-18785
			
			InpatientEpisodeForVTERiskAsessmentVo inpatientEpisode = domain.getVteStatus(form.getGlobalContext().Core.getCurrentCareContext().getPasEvent().getID_PASEvent());
			form.lblVteStatus().setValue((inpatientEpisode != null && inpatientEpisode.getVTEAssessmentStatus() != null) ? inpatientEpisode.getVTEAssessmentStatus().getIItemText(): "Not Required");
		}
	}
	
	private void manageReadOnly() 
	{
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(true);

		if (form.getLocalContext().getisReadonlyIsNotNull()
			&& form.getLocalContext().getisReadonly()
			&& form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}

	private void populateScreenFromData(DischargeReportDetailVo dischargeReportDetails) 
	{			
		clearScreen();
		//WDEV-18635
		form.getLocalContext().setTTAMedicationDetails(domain.getDischargeMedicationDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		if (form.getLocalContext().getTTAMedicationDetails() != null)
		{
			form.lblTTARequired().setValue(form.getLocalContext().getTTAMedicationDetails().getTTARequiredIsNotNull() ? form.getLocalContext().getTTAMedicationDetails().getTTARequired().getIItemText() : "Not Specified");						
		}
		else
			form.lblTTARequired().setValue("Not Specified");
		
		PatientNoDiagInfoForCCVo patientNoDiagInfo = domain.getPatientNoDiagInfoForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if (patientNoDiagInfo == null) //for old data
		{
			PatientDiagnosisEDischargeListVoCollection diagnoses = domain.listDiagnoses(form.getGlobalContext().Core.getEpisodeofCareShort());
			
			if (diagnoses != null && diagnoses.size() > 0)
				form.lblDiagnosisRequired().setValue("Specified");
				
		}
		else if (PatientDiagnosisStatus.HASDIAGNOSISFOREPISODE.equals(patientNoDiagInfo.getDiagnosisStatus()))
		{
			form.lblDiagnosisRequired().setValue("Specified");
		}
		else if (PatientDiagnosisStatus.NOKNOWNDIAGNOSISFOREPISODE.equals(patientNoDiagInfo.getDiagnosisStatus()))
		{
			form.lblDiagnosisRequired().setValue("No Known Diagnoses");
		}
		else 
			form.lblDiagnosisRequired().setValue("Not Specified");

		if (dischargeReportDetails == null) 
		{
			//WDEV-16379
			String url = buildReport();
			form.htmPreview().setHTML("<p align='center'>" + url );
			return;
		}
		
		form.chkClinicalDetails().setValue(dischargeReportDetails.getIsClinicalDetailsComplete());
	

		form.ccHCP().setValue(dischargeReportDetails.getCompletingHCP());
		hcpValueChanged();

		form.dtimCompletion().setValue(dischargeReportDetails.getDateOfCompletion());

		updateEditButton();											
					
		if (dischargeReportDetails.getGpRecipientsIsNotNull() 
			&& dischargeReportDetails.getGpRecipients().size() > 0)
		{
			form.grdReciepient().getRows().clear();
			for (int i = 0; i < dischargeReportDetails.getGpRecipients().size(); i++) 
			{
				GPLiteWithCommChannelsVo gp = dischargeReportDetails.getGpRecipients().get(i);
				addGpToGrid(gp);
			}
		}
		
		//WDEV-16379
		String url = buildReport();
		form.htmPreview().setHTML("<p align='center'>" + url );
	}
	
	private void populateScreenFromData(DischargeDetailsVo dischargeDetails)
	{
		if (dischargeDetails == null) 
			return;
	
		populateSummaryGrid(dischargeDetails);//WDEV-18843
	}

	//WDEV-18843
	private void populateSummaryGrid(DischargeDetailsVo dischargeDetails)
	{
		form.dyngrdSummary().getRows().clear();
		
		if (dischargeDetails == null)
			return;
		
		PatientDiagnosisEDischargeListVoCollection diagnoses = domain.listDiagnoses(form.getGlobalContext().Core.getEpisodeofCareShort());
		boolean diagRecorded = diagnoses != null && diagnoses.size() > 0;
		
		PatientNoDiagInfoForCCVo patientNoDiagInfo = domain.getPatientNoDiagInfoForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		boolean diagNoKnownRecorded;
		
		if (patientNoDiagInfo != null)
		{
			diagNoKnownRecorded = PatientDiagnosisStatus.NOKNOWNDIAGNOSISFOREPISODE.equals(patientNoDiagInfo.getDiagnosisStatus());
		}
		else
			diagNoKnownRecorded = Boolean.TRUE.equals(dischargeDetails.getHasNoDiagnosis());
		
		
		//-------------
		DynamicGridRow row1 = form.dyngrdSummary().getRows().newRow();

		DynamicGridColumn col1 = getCol(COLUMN1);
		DynamicGridCell cell1 = row1.getCells().newCell(col1, DynamicCellType.STRING);
		cell1.setValue("Diagnoses");
		cell1.setReadOnly(true);
	
		DynamicGridColumn col2 = getCol(COLUMN2);
		DynamicGridCell cell2 = row1.getCells().newCell(col2, DynamicCellType.STRING);
		cell2.setValue(diagNoKnownRecorded ? "No diagnosis to record" : (diagRecorded? "Recorded" :  "No diagnosis to record" )); //WDEV-20282 //WDEV-20446
		cell2.setReadOnly(true);
		
		//WDEV-20446
		if (diagRecorded || diagNoKnownRecorded) //WDEV-20551
			row1.setBackColor(Color.LightGreen);
		else
		{
			DynamicGridColumn col31 = getCol(COLUMN3);
			col31.setAlignment(Alignment.CENTER);
			DynamicGridCell cell31 = row1.getCells().newCell(col31, DynamicCellType.BOOL);
			cell31.setValue(false);
		}
		
		//------------------
		
		DynamicGridRow row2 = form.dyngrdSummary().getRows().newRow();
		
		PatientDiagnosisEDischargeListVoCollection listComp = domain.listComplications(form.getGlobalContext().Core.getEpisodeofCareShort());
		boolean compRecorded = listComp!=null && listComp.size()>0;
		boolean compNoKnownRecorded = Boolean.TRUE.equals(dischargeDetails.getHasNoComplications());	
		
		
		col1 = getCol(COLUMN1);
		cell1 = row2.getCells().newCell(col1, DynamicCellType.STRING);
		cell1.setValue("Complications");
		cell1.setReadOnly(true);
	
		col2 = getCol(COLUMN2);
		cell2 = row2.getCells().newCell(col2, DynamicCellType.STRING);
		cell2.setValue(compNoKnownRecorded ? "No complications for this episode" : (compRecorded? "Recorded" :  "No complications for this episode " )); //WDEV-20282 //WDEV-20446 //WDEV-20551
		cell2.setReadOnly(true);
		
		//WDEV-20446
		if (compRecorded || compNoKnownRecorded) //WDEV-20551
			row2.setBackColor(Color.LightGreen);
		else
		{
			DynamicGridColumn col32 = getCol(COLUMN3);
			col32.setAlignment(Alignment.CENTER);
			DynamicGridCell cell32 = row2.getCells().newCell(col32, DynamicCellType.BOOL);
			cell32.setValue(false);
		}
		//------------------
		
		DynamicGridRow row3 = form.dyngrdSummary().getRows().newRow();

		//PatientDiagnosisEDischargeListVoCollection listComor = domain.listComorbidity(form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext()); //WDEV-19820
		PatientDiagnosisEDischargeListVoCollection listComor = domain.listRelevComorbidity(form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext()); //WDEV-20225
		boolean comorbRecorded =  listComor != null && listComor.size()>0;
		boolean comorbNoKnownRecorded =Boolean.TRUE.equals(dischargeDetails.getHasNoComorbidities());

		col1 = getCol(COLUMN1);
		cell1 = row3.getCells().newCell(col1, DynamicCellType.STRING);
		cell1.setValue("Co-Morbidities");
		cell1.setReadOnly(true);
	
		col2 = getCol(COLUMN2);
		cell2 = row3.getCells().newCell(col2, DynamicCellType.STRING);
		cell2.setValue(comorbNoKnownRecorded ? "No relevant co-morbidities for this episode" : (comorbRecorded? "Recorded" :  "No co-morbidities relevant for this episode" )); //WDEV-20282
		cell2.setReadOnly(true);
		
		//WDEV-20446
		if (comorbRecorded || comorbNoKnownRecorded) //WDEV-20551
			row3.setBackColor(Color.LightGreen);
		else
		{
			DynamicGridColumn col33 = getCol(COLUMN3);
			col33.setAlignment(Alignment.CENTER);
			DynamicGridCell cell33 = row3.getCells().newCell(col33, DynamicCellType.BOOL);
			cell33.setValue(false);
		}
		//-----------------	
		
	}
	
	//WDEV-18843
	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdSummary().getColumns().getByIdentifier(identifier);
	}
	
	private void prePopulateRecipients(PatientShort patientShort) 
	{
		GPLiteWithCommChannelsVo gp = domain.getGPLiteWithCommChannelsFromPatientShort(patientShort);
		
		addGpToGrid(gp);
	}

		
	private void clearScreen()
	{
		form.chkClinicalDetails().setValue(false);
		form.ccHCP().setValue(null);
		form.lblGrade().setValue(null);
		form.lblSpec().setValue(null);		
		form.grdReciepient().getRows().clear();
		form.dtimCompletion().setValue(null);	
	}
	
	private void displayPatientDocument(DischargeReportDetailVo dischargeReportDetails) 
	{				
		if (dischargeReportDetails != null &&
				dischargeReportDetails.getDischargeDocumentsIsNotNull() &&
					dischargeReportDetails.getDischargeDocuments().size() > 0)
		{
			PatientDocumentVoCollection documents = dischargeReportDetails.getDischargeDocuments().sort(SortOrder.DESCENDING);
			for (int i = 0; i < documents.size(); i++) 
			{
				if (documents.get(i).getServerDocumentIsNotNull() &&
						documents.get(i).getCategoryIsNotNull())
				{
					if (documents.get(i).getCategory().equals(DocumentCategory.DISCHARGE_SUMMARY))
					{
						if (documents.get(i).getServerDocumentIsNotNull() &&
								documents.get(i).getServerDocument().getFileNameIsNotNull())
						{								
							
							form.htmPreview().setHTML("<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + ConfigFlag.GEN.FILE_SERVER_URL.getValue() + documents.get(i).getServerDocument().getFileName() +  "'></IFRAME>");
							form.getLocalContext().setReportURL("<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + ConfigFlag.GEN.FILE_SERVER_URL.getValue() + documents.get(i).getServerDocument().getFileName() +  "'></IFRAME>");
							break;
						}
					}
				}
			}										
		}
		else
		{
			String url = buildReport();
			form.htmPreview().setHTML("<p align='center'>" + url);
			form.getLocalContext().setReportURL("<p align='center'>" + url);
		}
	}

 	protected void onCcHCPValueChanged() throws PresentationLogicException 
	{
 		hcpValueChanged();
	}

 	private void hcpValueChanged() 
 	{
 		
 		form.lblGrade().setValue(null); //WDEV-16320
		form.lblSpec().setValue(null);
 		
		if (form.ccHCP().getValue() != null)
		{
			if (form.ccHCP().getValue() instanceof MedicVo)
			{
				MedicVo medic = (MedicVo) form.ccHCP().getValue();
				if (medic != null)
				{				
					form.lblGrade().setValue(medic.getGradeIsNotNull() ? medic.getGrade().getText() : null);
					form.lblSpec().setValue(medic.getSpecialtyIsNotNull() ? medic.getSpecialty().getText() : null);
				}
			}
			if (form.ccHCP().getValue() instanceof HcpLiteVo)
			{
				HcpLiteVo hcp = (HcpLiteVo)form.ccHCP().getValue();
				MedicLiteVo voMedicLite = new MedicLiteVo();
				voMedicLite.setID_Hcp(hcp.getID_Hcp());
				MedicVo medic = domain.getMedicVo(voMedicLite);
				if (medic != null)
				{				
					form.lblGrade().setValue(medic.getGradeIsNotNull() ? medic.getGrade().getText() : null);
					form.lblSpec().setValue(medic.getSpecialtyIsNotNull() ? medic.getSpecialty().getText() : null);
				}
				
			}
		}		
	}

	@Override
	protected void onChkClinicalDetailsValueChanged() throws PresentationLogicException 
	{
		clinicalDetailsChanged();
	}

	private void clinicalDetailsChanged()  //WDEV-18843
	{
		if (form.chkClinicalDetails().getValue())
		{
			form.setccHCPEnabled(true);
			form.dtimCompletion().setEnabled(true);
			form.grdReciepient().setEnabled(true);
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
		}
		else
		{
			form.setccHCPEnabled(false);
			form.lblGrade().setValue(null);
			form.lblSpec().setValue(null);
			form.ccHCP().setValue(null);
			form.dtimCompletion().setEnabled(false);
			form.dtimCompletion().setValue(null);			
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result)
			throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Core.GPSelection))
		{
			if (result.equals(DialogResult.OK)  && form.getGlobalContext().Core.getGPDetailsIsNotNull())
				addGpToGrid(form.getGlobalContext().Core.getGPDetails());
			
			//WDEV-16379
			String url = buildReport();
			form.htmPreview().setHTML("<p align='center'>" + url);
			form.getLocalContext().setReportURL("<p align='center'>" + url);
		}
		
		if(formName.equals(form.getForms().Core.YesNoDialog))
		{
			if(formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
			{
				saveFromManageDialog();
				//form.htmPreview().setVisible(true);
			}
			
		//	form.htmPreview().setVisible(true);
	
			
		}
		if( formName.equals(form.getForms().Clinical.DementiaAssessmentFormDialog) )	//wdev-18785
		{
			String url = buildReport();
			form.htmPreview().setHTML("<p align='center'>" + url);
			form.getLocalContext().setReportURL("<p align='center'>" + url);
		}
	}
	
	private void addGpToGrid(GpShortVo voGp)
	{
		//check if this GP already exists
		if (voGp == null) return;
		addGpToGrid(domain.getGPLiteWithCommChannels(voGp));
	}

	private boolean isGpAlreadyAdded(GpLiteVo voGp) {
		for (int i = 0; i < form.grdReciepient().getRows().size(); i++)
		{
			if(form.grdReciepient().getRows().get(i).getValue() != null)
			{
				if(form.grdReciepient().getRows().get(i).getValue().getNameIsNotNull() && form.grdReciepient().getRows().get(i).getValue().getID_Gp().equals(voGp.getID_Gp()))
				{
					return true;
				}
			}
		}
		return false;
	}
	private void addGpToGrid(GPLiteWithCommChannelsVo voGp)
	{
		if (voGp == null ) return;
		//check if this GP already exists
		if (isGpAlreadyAdded(voGp)){
			engine.showErrors(new String[]{"The GP is already in the list"});
			return;
		}
		
		grdReciepientRow row = form.grdReciepient().getRows().newRow();
		String gpName = voGp.getNameIsNotNull() ?  voGp.getName().toString() : "";
		
		row.setValue(voGp);
		String emails = "";
		if (voGp != null)
		{
			for (int j = 0; j < voGp.getCommChannels().size(); j++) 
			{
				if (voGp.getCommChannels().get(j).getChannelType().equals(ChannelType.EMAIL))
				{
					emails += "Email : " +  voGp.getCommChannels().get(j).getCommValue() + "<br>";
				}
			}
			if (emails == "")
				emails = "No email";
		}
		row.setColRecipient(gpName+", "+emails);
		row.setTooltip(emails);
	}
	
	@Override
	protected void onFormModeChanged() 
	{
		updateControlState();	//WDEV-18843
	}

	//WDEV-18843
	private void updateControlState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);//WDEV-18939
		}
		else
		{
			form.chkClinicalDetails().setEnabled(true);
			form.getContextMenus().getGenericGridAddItem().setVisible(true);//WDEV-18843
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.grdReciepient().getValue()!=null);//WDEV-18843
			if (form.chkClinicalDetails().getValue())
				clinicalDetailsChanged();
			/*
			DischargeDetailsVo dischargedetail =  domain.getDischargeDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if(dischargedetail != null)
			{
				if(dischargedetail.getHasNoComorbiditiesIsNotNull())
				if(dischargedetail.getHasNoComorbidities() == true )
				{
					form.chkClinicalDetails().setEnabled(false);
					form.setccHCPEnabled(false);
					form.dtimCompletion().setEnabled(false);
				}
				if(dischargedetail.getHasNoComplicationsIsNotNull())
					if(dischargedetail.getHasNoComplications() == true )
					{
						form.chkClinicalDetails().setEnabled(false);
						form.setccHCPEnabled(false);
						form.dtimCompletion().setEnabled(false);
					}
			
			}	*/
			
		}
		
		form.dyngrdSummary().setReadOnly(form.getMode().equals(FormMode.VIEW));//WDEV-18843
		
		updateEditButton();
	}

	private void updateEditButton() 
	{
		
		if (form.getMode().equals(FormMode.VIEW))
		{
		
		form.btnEdit().setVisible(!isComplete && form.getLocalContext().getisCurrentUserMoS());
		
		}
	}

	public void setReadOnly() 
	{
		form.getLocalContext().setisReadonly( form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		
		manageReadOnly();
	}

	@Override
	protected void onBtnUndoClick() throws PresentationLogicException 
	{
		
		if (SaveUndo())
		{
			open();
			
			updateButtonUndo();
			form.chkClinicalDetails().setValue(false);
			form.dtimCompletion().setValue(null);
			form.setMode(FormMode.VIEW);
			manageReadOnly();
		}
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
		
	}

	private boolean SaveUndo()
	{
		DischargeReportDetailVo record = domain.getDischargeReportDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if(record != null)
		{
			record.setIsClinicalDetailsComplete(false);
			record.setDateOfCompletion(null);
			record.setCompletingHCP(null);

			String[] errors = record.validate();			
			if (errors != null && errors.length > 0) 
			{	
				engine.showErrors(errors);
				return false;
			}
			DischargeDetailsVo details = populateDataFromScreen(domain.getDischargeDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			RTLSummaryVo rTLSummary = populateRTLSummary(form.getGlobalContext().Core.getCurrentCareContext(), record); //WDEV-18622
			
			details.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);
			
			errors = details.validate();
			if (errors != null && errors.length>0)
			{
				throw new CodingRuntimeException("Discharge Details should be valid !");
			}
			

			DischargeReadyToLeaveVo recordReady = domain.getReadyToLeave(form.getGlobalContext().Core.getCurrentCareContext());
			if (recordReady != null && recordReady.getHasPatientReceivedCopyOfDischargeIsNotNull())
			{
				recordReady.setHasPatientReceivedCopyOfDischarge(null);
				errors = recordReady.validate();
				if (errors != null && errors.length > 0)
				{
					throw new CodingRuntimeException("Discharge Ready To Leave should be valid !");
				}
				
			}
			else
				recordReady = null;
			
			try 
			{
				record = domain.saveDischargeReportDetail(record, recordReady, rTLSummary, null); //WDEV-18622
				domain.saveDischargeDetails(details);
			}
			catch (StaleObjectException e) 
			{		
				engine.showMessage(e.getMessage());
				return true;
				//e.printStackTrace();
			}
			isComplete = true;
			form.getLocalContext().setEditedRecord(record);
			//--------------------
			if(record.getIsClinicalDetailsComplete() == false)
			{
				setReadOnly();
				form.getGlobalContext().Clinical.seteDischargeClinicalComplete(false);
				
			}
			//------------------------
			
		}
		return true;
	}
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		form.htmPreview().setVisible(true);
	}

	//wdev-18785
	protected void onImbDementiaClick() throws PresentationLogicException 
	{
		
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()
				&& form.getGlobalContext().Core.getCurrentCareContext().getPasEventIsNotNull()
				&& form.getGlobalContext().Core.getCurrentCareContext().getPasEvent().getPatientIsNotNull())
		{
	
			DementiaForWorklistVo tempvo  = domain.getDementia(form.getGlobalContext().Core.getCurrentCareContext().getPasEvent().getPatient());
			if( tempvo != null )
			{
				form.htmPreview().setHTML("");
				engine.open(form.getForms().Clinical.DementiaAssessmentFormDialog, new Object[] { tempvo, DementiaWorklistOpenFormModeEnum.VIEW });
			}
		}
	
		
	}

	//WDEV-18843
	@Override
	protected void onGrdReciepientSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}	
}
