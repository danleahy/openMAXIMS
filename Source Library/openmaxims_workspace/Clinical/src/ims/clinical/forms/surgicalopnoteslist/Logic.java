//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.surgicalopnoteslist;

import ims.assessment.vo.GraphicAssessmentShortVoCollection;
import ims.clinical.forms.surgicalopnoteslist.GenForm.grdSurgicalOPsRow;
import ims.clinical.vo.SurgicalOPNotesFilterVo;
import ims.clinical.vo.SurgicalOperationNotesListVo;
import ims.clinical.vo.SurgicalOperationNotesListVoCollection;
import ims.core.vo.ColumnSortOrderVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientId;
import ims.core.vo.PatientProcedureSurgicalOpVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.HcpDisType;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int PATIENT_COLUMN_ID = 0;
	private static final int CONSULTANT_COLUMN_ID = 1;
	private static final int SURGEON_COLUMN_ID = 2;
	private static final int PROCEDURE_COLUMN_ID = 3;
	private static final int DATE_COLUMN_ID = 4;
	private static final int HCP_COLUMN_ID = 5;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{

		initialize();
		open();
	}

	private void initialize()
	{
		form.getContextMenus().disableAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridViewItem().setText("Open Surgical Op Note");
		form.getContextMenus().getGenericGridViewItem().setEnabled(true);
		rebindAllLookups();

	}

	private void open()
	{
		if (form.getGlobalContext().Clinical.getSurgicalOpNotesFilterIsNotNull())
		{
			populateSearchScreenFromData(form.getGlobalContext().Clinical.getSurgicalOpNotesFilter());
			
			String[] errors = validateSearchCriteria();
			
			if (errors == null || errors.length == 0)
			{
				populateResultScreenFromData(domain.listSurgicalOpNotes(populateSearchDataFromScreen()));
				
				SurgicalOPNotesFilterVo searchFilter = form.getGlobalContext().Clinical.getSurgicalOpNotesFilter();
				
				if (searchFilter != null && searchFilter.getColumnSortOrder() != null)
				{
					setSortOrderForColumn(searchFilter.getColumnSortOrder().getColumnId(), searchFilter.getColumnSortOrder().getSortOrder());
				}
			}
		}
		
		form.setMode(FormMode.VIEW);
		updateControlState();
	}


	private void populateResultScreenFromData(SurgicalOperationNotesListVoCollection listResults)
	{
		clearResultScreen();
		
		if (listResults == null || listResults.size() == 0 )
		{
			return;
		}
		
		for (int i = 0 ; i<listResults.size()  ; i++)
		{
			addRowToGrid(listResults.get(i));
		}
		form.lblTotal().setValue(Integer.toString(listResults.size()));
	}

	private void addRowToGrid(SurgicalOperationNotesListVo record)
	{
		if (record == null)
			return;
		grdSurgicalOPsRow newRow = form.grdSurgicalOPs().getRows().newRow();
		boolean episodeOfCareNotNull = record.getCareContextIsNotNull() && 
						record.getCareContext().getEpisodeOfCareIsNotNull();
		newRow.setColumnPatient(episodeOfCareNotNull &&
				record.getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() &&
				record.getCareContext().getEpisodeOfCare().getCareSpell().getPatientIsNotNull() ? 
				record.getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getISelectedPatientName(): null);
		//-----------------------------
		if(episodeOfCareNotNull &&
				record.getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() &&
				record.getCareContext().getEpisodeOfCare().getCareSpell().getPatientIsNotNull()  
				)
		{
			String strTemp = new String();
			for(PatientId temp:record.getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getIdentifiers())
			{
				strTemp = strTemp +temp.getType().toString() + '=' + temp.getValue();
				strTemp += ',';
			}
			if(strTemp.length() > 0)
			{
				int n = strTemp.lastIndexOf(',');
				strTemp = strTemp.substring(0, n); //take out the last ,
			}
			newRow.setTooltipForColumnPatient(strTemp);
			
		}
		//------------------------------
		newRow.setColumnConsultant(episodeOfCareNotNull &&
				record.getCareContext().getEpisodeOfCare().getResponsibleHCPIsNotNull() ?
				record.getCareContext().getEpisodeOfCare().getResponsibleHCP().getIMosName(): null);
		newRow.setColumnOpSurgeon(record.getProceduresPerformedIsNotNull() && 
				record.getProceduresPerformed().size()>0 && 
				(record.getProceduresPerformed().get(0) instanceof PatientProcedureSurgicalOpVo) &&
				record.getProceduresPerformed().get(0).getPeformedByIsNotNull()? 
				record.getProceduresPerformed().get(0).getPeformedBy().getIMosName() : null);
		
		newRow.setColumnPrimProcedure(record.getMainProcedureIsNotNull() &&
				record.getMainProcedure().getProcedureIsNotNull() ? 
				record.getMainProcedure().getProcedure().getProcedureName(): null);
		newRow.setColumnSignoffDate(record.getSignOffDateTimeIsNotNull()? record.getSignOffDateTime().getDate():null);
		newRow.setColumnSignoffHcp(record.getSignOffHCPIsNotNull() ? 
				record.getSignOffHCP().getIMosName() : null);
		newRow.setValue(record);
		
	}

	private void clearResultScreen()
	{
		form.grdSurgicalOPs().getRows().clear();
		form.lblTotal().setValue("0");
	}

	private String[] validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		SurgicalOPNotesFilterVo sonf = populateSearchDataFromScreen();
		
		if (sonf.countFieldsWithValue() == 0)
		{
			listOfErrors.add("Please fill in at least one search field");
		}
		else
		{
			Date today = new Date();
			if (today.isLessThan(sonf.getDateFrom()))
			{
				listOfErrors.add("'Date From' cannot be set to a date in the future."); //WDEV-18762
			}
			if (today.isLessThan(sonf.getDateTo()))
			{
				listOfErrors.add("'Date To' cannot be set to a date in the future."); //WDEV-18762
			}
			if (sonf.getDateToIsNotNull() && sonf.getDateFromIsNotNull() && sonf.getDateFrom().isGreaterThan(sonf.getDateTo()))
			{
				
				listOfErrors.add("'Date From' cannot be later than 'Date To'."); //WDEV-18762
			}
		}
		if (listOfErrors.size() == 0 )
			return null;
		String[] errors = new String[listOfErrors.size()];
		errors = listOfErrors.toArray(errors);
		return errors;
	}

	private SurgicalOPNotesFilterVo populateSearchDataFromScreen()
	{
		SurgicalOPNotesFilterVo result;
		
		if (form.getGlobalContext().Clinical.getSurgicalOpNotesFilter() == null)
			 result = new SurgicalOPNotesFilterVo();
		else
			result = (SurgicalOPNotesFilterVo) form.getGlobalContext().Clinical.getSurgicalOpNotesFilter().clone();
			
		result.setCompletingClinician(form.qmbCompletingClinian().getValue());
		result.setConsultant(form.qmbConsultant().getValue());
		result.setDateFrom(form.dteFrom().getValue());
		result.setDateTo(form.dteTo().getValue());
		result.setDiagnosis(form.qmbDiagnosis().getValue());
		result.setDiagram(form.qmbDiagram().getValue());
		result.setFollowupOrdered(form.cmbFollowUpOrdered().getValue());
		result.setHospital(form.qmbHospital().getValue());
		result.setOperatingSurgeon(form.qmbOpSurgeon().getValue());
		result.setProcedure(form.qmbProcedure().getValue());
		return result;
	}

	private void populateSearchScreenFromData(SurgicalOPNotesFilterVo record)
	{
		clearSearchScreen();
		if (record == null)
			return;

		if (record.getProcedureIsNotNull())
		{
			form.qmbProcedure().newRow(record.getProcedure(), record.getProcedure().getProcedureName());
			form.qmbProcedure().setValue(record.getProcedure());
		}

		if (record.getDiagnosisIsNotNull())
		{
			form.qmbDiagnosis().newRow(record.getDiagnosis(), record.getDiagnosis().getDiagnosisName());
			form.qmbDiagnosis().setValue(record.getDiagnosis());
		}
		if (record.getDiagramIsNotNull())
		{
			form.qmbDiagram().newRow(record.getDiagram(), record.getDiagram().getName());
			form.qmbDiagram().setValue(record.getDiagram());
		}
		if (record.getHospitalIsNotNull())
		{
			form.qmbHospital().newRow(record.getHospital(), record.getHospital().getName());
			form.qmbHospital().setValue(record.getHospital());
		}
		if (record.getOperatingSurgeonIsNotNull())
		{
			form.qmbOpSurgeon().newRow(record.getOperatingSurgeon(), record.getOperatingSurgeon().getIMosName());
			form.qmbOpSurgeon().setValue(record.getOperatingSurgeon());
		}
		if (record.getCompletingClinicianIsNotNull())
		{
			form.qmbCompletingClinian().newRow(record.getCompletingClinician(), record.getCompletingClinician().getIMosName());
			form.qmbCompletingClinian().setValue(record.getCompletingClinician());
		}
		if (record.getConsultantIsNotNull())
		{
			form.qmbConsultant().newRow(record.getConsultant(), record.getConsultant().getIMosName());
			form.qmbConsultant().setValue(record.getConsultant());
		}
		form.cmbFollowUpOrdered().setValue(record.getFollowupOrdered());
		form.dteFrom().setValue(record.getDateFrom());
		form.dteTo().setValue(record.getDateTo());

	}

	private void clearSearchScreen()
	{
		form.qmbCompletingClinian().clear();
		form.qmbConsultant().clear();
		form.qmbDiagnosis().clear();
		form.qmbDiagram().clear();
		form.qmbHospital().clear();
		form.qmbOpSurgeon().clear();
		form.qmbProcedure().clear();
		form.cmbFollowUpOrdered().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
	}

	private void updateControlState()
	{
		form.getContextMenus().getGenericGridViewItem().setVisible(form.grdSurgicalOPs().getValue() != null);
	}

	@Override
	protected void onGrdSurgicalOPsSelectionChanged()
	{
		updateControlState();
	}

	@Override
	protected void onGrdSurgicalOPsSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onQmbHospitalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		
		LocationLiteVoCollection lisResults = domain.listHospitals(value);
		form.qmbHospital().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbHospital().newRow(lisResults.get(i), lisResults.get(i).getName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbHospital().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbHospital().showOpened();
		}
	}

	@Override
	protected void onQmbCompletingClinianTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		HcpLiteVoCollection listHcpLite = domain.listHcpLite(value,null);
		form.qmbCompletingClinian().clear();
		if (listHcpLite == null || listHcpLite.size() == 0)
			return;
		for (int i = 0; i < listHcpLite.size(); i++)
		{
			form.qmbCompletingClinian().newRow(listHcpLite.get(i), listHcpLite.get(i).getIMosName());
		}
		if (listHcpLite.size() == 1)
		{
			form.qmbCompletingClinian().setValue(listHcpLite.get(0));
		}
		else
		{
			form.qmbCompletingClinian().showOpened();
		}
	}

	@Override
	protected void onQmbOpSurgeonTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		
		HcpLiteVoCollection listHcpLite = domain.listHcpLite(value,HcpDisType.MEDICAL);
		form.qmbOpSurgeon().clear();
		if (listHcpLite == null || listHcpLite.size() == 0)
			return;
		for (int i = 0; i < listHcpLite.size(); i++)
		{
			form.qmbOpSurgeon().newRow(listHcpLite.get(i), listHcpLite.get(i).getIMosName());
		}
		if (listHcpLite.size() == 1)
		{
			form.qmbOpSurgeon().setValue(listHcpLite.get(0));
		}
		else
		{
			form.qmbOpSurgeon().showOpened();
		}
	}

	@Override
	protected void onQmbDiagramTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		GraphicAssessmentShortVoCollection lisResults = domain.listDiagrams(value);
		form.qmbDiagram().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbDiagram().newRow(lisResults.get(i), lisResults.get(i).getName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbDiagram().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbDiagram().showOpened();
		}
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		
		HcpLiteVoCollection listHcpLite = domain.listHcpLite(value,null);
		form.qmbConsultant().clear();
		if (listHcpLite == null || listHcpLite.size() == 0)
			return;
		for (int i = 0; i < listHcpLite.size(); i++)
		{
			form.qmbConsultant().newRow(listHcpLite.get(i), listHcpLite.get(i).getIMosName());
		}
		if (listHcpLite.size() == 1)
		{
			form.qmbConsultant().setValue(listHcpLite.get(0));
		}
		else
		{
			form.qmbConsultant().showOpened();
		}
	}

	@Override
	protected void onQmbDiagnosisTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
	
		DiagLiteVoCollection lisResults = domain.listDiagnosis(value);
		form.qmbDiagnosis().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbDiagnosis().newRow(lisResults.get(i), lisResults.get(i).getDiagnosisName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbDiagnosis().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbDiagnosis().showOpened();
		}
	}

	@Override
	protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		ProcedureLiteVoCollection lisResults = domain.listProcedures(value);
		form.qmbProcedure().clear();
		if (lisResults == null || lisResults.size() == 0)
			return;
		for (int i = 0; i < lisResults.size(); i++)
		{
			form.qmbProcedure().newRow(lisResults.get(i), lisResults.get(i).getProcedureName());
		}
		if (lisResults.size() == 1)
		{
			form.qmbProcedure().setValue(lisResults.get(0));
		}
		else
		{
			form.qmbProcedure().showOpened();
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSurgicalOpNotesFilter(null);
		clearSearchScreen();
		clearResultScreen();
		updateControlState();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		String[] errors = validateSearchCriteria();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		clearResultScreen();
		SurgicalOPNotesFilterVo searchFilter = populateSearchDataFromScreen();
		form.getGlobalContext().Clinical.setSurgicalOpNotesFilter(searchFilter);
		
		SurgicalOperationNotesListVoCollection listResults = domain.listSurgicalOpNotes(searchFilter);
		
		if (listResults == null || listResults.size() == 0 )
		{
			engine.showMessage("No results were found. Please alter your search criteria", "No results", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		
		populateResultScreenFromData(listResults);
		
		if (searchFilter != null && searchFilter.getColumnSortOrder() != null)
		{
			setSortOrderForColumn(searchFilter.getColumnSortOrder().getColumnId(), searchFilter.getColumnSortOrder().getSortOrder());
		}
		
		updateControlState();
	}

	private void setSortOrderForColumn(Integer columnId, Integer sortOrderId)
	{
		SortOrder order;
		
		if (sortOrderId == 1) // 1 is ascending but for the form to work correct we need to reverse this
			order = SortOrder.DESCENDING;
		else
			order = SortOrder.ASCENDING;
		
		if (PATIENT_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderPatient(order);
			sortColumn(PATIENT_COLUMN_ID);
		}
		else if (CONSULTANT_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderConsultant(order);
			sortColumn(CONSULTANT_COLUMN_ID);
		}
		else if (SURGEON_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderSurgeon(order);
			sortColumn(SURGEON_COLUMN_ID);
		}
		else if (PROCEDURE_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderProcedure(order);
			sortColumn(PROCEDURE_COLUMN_ID);
		}
		else if (DATE_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderDate(order);
			sortColumn(DATE_COLUMN_ID);
		}
		else if (HCP_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderHcp(order);
			sortColumn(HCP_COLUMN_ID);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.View:
			openOpNote();
				break;
		}
	}

	private void openOpNote()
	{
		SurgicalOperationNotesListVo value = form.grdSurgicalOPs().getValue();
		
			
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(value.getCareContext()));
			engine.open(form.getForms().Clinical.SurgicalOpNotes);
	}

	//WDEV-18647
	@Override
	protected void onGrdSurgicalOPsGridHeaderClicked(int column) throws PresentationLogicException
	{
		SurgicalOperationNotesListVo temp = form.grdSurgicalOPs().getValue();
		
		sortColumn(column);
		
		form.grdSurgicalOPs().setValue(temp);
		
	}

	private void sortColumn(int column)
	{
		if (column == PATIENT_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderPatient() == null)
				form.getLocalContext().setSortOrderPatient(SortOrder.ASCENDING);
			
			SurgicalOperationNotesListVoCollection collectionToSort = form.grdSurgicalOPs().getValues();
			
			collectionToSort.sort(new PatientComparator(form.getLocalContext().getSortOrderPatient()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPatient()))
			{
				form.getLocalContext().setSortOrderPatient(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderPatient(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(PATIENT_COLUMN_ID, form.getLocalContext().getSortOrderPatient());
			
			form.grdSurgicalOPs().getRows().clear();
			populateResultScreenFromData(collectionToSort);
		}
		else if (column == CONSULTANT_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderConsultant() == null)
				form.getLocalContext().setSortOrderConsultant(SortOrder.ASCENDING);
			
			SurgicalOperationNotesListVoCollection collectionToSort = form.grdSurgicalOPs().getValues();
			
			collectionToSort.sort(new ConsultantComparator(form.getLocalContext().getSortOrderConsultant()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderConsultant()))
			{
				form.getLocalContext().setSortOrderConsultant(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderConsultant(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(CONSULTANT_COLUMN_ID, form.getLocalContext().getSortOrderConsultant());
			
			form.grdSurgicalOPs().getRows().clear();
			populateResultScreenFromData(collectionToSort);
		}
		else if (column == SURGEON_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderSurgeon() == null)
				form.getLocalContext().setSortOrderSurgeon(SortOrder.ASCENDING);
			
			SurgicalOperationNotesListVoCollection collectionToSort = form.grdSurgicalOPs().getValues();
			
			collectionToSort.sort(new SurgeonComparator(form.getLocalContext().getSortOrderSurgeon()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderSurgeon()))
			{
				form.getLocalContext().setSortOrderSurgeon(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderSurgeon(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(SURGEON_COLUMN_ID, form.getLocalContext().getSortOrderSurgeon());
			
			form.grdSurgicalOPs().getRows().clear();
			populateResultScreenFromData(collectionToSort);
		}
		else if (column == PROCEDURE_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderProcedure() == null)
				form.getLocalContext().setSortOrderProcedure(SortOrder.ASCENDING);
			
			SurgicalOperationNotesListVoCollection collectionToSort = form.grdSurgicalOPs().getValues();
			
			collectionToSort.sort(new ProcedureComparator(form.getLocalContext().getSortOrderProcedure()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderProcedure()))
			{
				form.getLocalContext().setSortOrderProcedure(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderProcedure(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(PROCEDURE_COLUMN_ID, form.getLocalContext().getSortOrderProcedure());
			
			form.grdSurgicalOPs().getRows().clear();
			populateResultScreenFromData(collectionToSort);
		}
		else if (column == DATE_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderDate() == null)
				form.getLocalContext().setSortOrderDate(SortOrder.ASCENDING);
			
			SurgicalOperationNotesListVoCollection collectionToSort = form.grdSurgicalOPs().getValues();
			
			collectionToSort.sort(new DateComparator(form.getLocalContext().getSortOrderDate()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDate()))
			{
				form.getLocalContext().setSortOrderDate(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderDate(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(DATE_COLUMN_ID, form.getLocalContext().getSortOrderDate());
			
			form.grdSurgicalOPs().getRows().clear();
			populateResultScreenFromData(collectionToSort);
		}
		else if (column == HCP_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderHcp() == null)
				form.getLocalContext().setSortOrderHcp(SortOrder.ASCENDING);
			
			SurgicalOperationNotesListVoCollection collectionToSort = form.grdSurgicalOPs().getValues();
			
			collectionToSort.sort(new HcpComparator(form.getLocalContext().getSortOrderHcp()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderHcp()))
			{
				form.getLocalContext().setSortOrderHcp(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderHcp(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(HCP_COLUMN_ID, form.getLocalContext().getSortOrderHcp());
			
			form.grdSurgicalOPs().getRows().clear();
			populateResultScreenFromData(collectionToSort);
		}
	}

	private void addColumnSortToSearchCriteriaGC(int identifierColumnId, SortOrder sortOrder)
	{
		if (form.getGlobalContext().Clinical.getSurgicalOpNotesFilter() == null)
			return;
		
		ColumnSortOrderVo columnSortOrder = new ColumnSortOrderVo();
		
		columnSortOrder.setColumnId(identifierColumnId);
		
		if (SortOrder.ASCENDING.equals(sortOrder))
			columnSortOrder.setSortOrder(1);
		else
			columnSortOrder.setSortOrder(-1);
		
		form.getGlobalContext().Clinical.getSurgicalOpNotesFilter().setColumnSortOrder(columnSortOrder);
		
	}
	
	public class PatientComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public PatientComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public PatientComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof SurgicalOperationNotesListVo )
			{
				SurgicalOperationNotesListVo ps1 = (SurgicalOperationNotesListVo)ob1;
				rez1 = (ps1.getCareContext() != null && ps1.getCareContext().getEpisodeOfCare() != null && ps1.getCareContext().getEpisodeOfCare().getCareSpell() != null
						&& ps1.getCareContext().getEpisodeOfCare().getCareSpell().getPatient() != null) ? ps1.getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getISelectedPatientName():null;
			}
			if(ob2 instanceof SurgicalOperationNotesListVo)
			{
				SurgicalOperationNotesListVo ps2 = (SurgicalOperationNotesListVo)ob2;
				rez2 = (ps2.getCareContext() != null && ps2.getCareContext().getEpisodeOfCare() != null && ps2.getCareContext().getEpisodeOfCare().getCareSpell() != null
						&& ps2.getCareContext().getEpisodeOfCare().getCareSpell().getPatient() != null) ? ps2.getCareContext().getEpisodeOfCare().getCareSpell().getPatient().getISelectedPatientName():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class ConsultantComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ConsultantComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ConsultantComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof SurgicalOperationNotesListVo )
			{
				SurgicalOperationNotesListVo ps1 = (SurgicalOperationNotesListVo)ob1;
				rez1 = (ps1.getCareContext() != null && ps1.getCareContext().getEpisodeOfCare() != null && ps1.getCareContext().getEpisodeOfCare().getResponsibleHCP() != null)
				? ps1.getCareContext().getEpisodeOfCare().getResponsibleHCP().getIMosName():null;
			}
			if(ob2 instanceof SurgicalOperationNotesListVo)
			{
				SurgicalOperationNotesListVo ps2 = (SurgicalOperationNotesListVo)ob2;
				rez2 = (ps2.getCareContext() != null && ps2.getCareContext().getEpisodeOfCare() != null && ps2.getCareContext().getEpisodeOfCare().getResponsibleHCP() != null)
				? ps2.getCareContext().getEpisodeOfCare().getResponsibleHCP().getIMosName():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class SurgeonComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public SurgeonComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SurgeonComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof SurgicalOperationNotesListVo )
			{
				SurgicalOperationNotesListVo ps1 = (SurgicalOperationNotesListVo)ob1;
				rez1 = (ps1.getProceduresPerformed() != null && ps1.getProceduresPerformed().size() > 0 && ps1.getProceduresPerformed().get(0) instanceof PatientProcedureSurgicalOpVo
						&& ps1.getProceduresPerformed().get(0).getPeformedBy() != null) ? ps1.getProceduresPerformed().get(0).getPeformedBy().getIMosName(): null;
			}
			if(ob2 instanceof SurgicalOperationNotesListVo)
			{
				SurgicalOperationNotesListVo ps2 = (SurgicalOperationNotesListVo)ob2;
				rez2 = (ps2.getProceduresPerformed() != null && ps2.getProceduresPerformed().size() > 0 && ps2.getProceduresPerformed().get(0) instanceof PatientProcedureSurgicalOpVo
						&& ps2.getProceduresPerformed().get(0).getPeformedBy() != null) ? ps2.getProceduresPerformed().get(0).getPeformedBy().getIMosName(): null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class ProcedureComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ProcedureComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ProcedureComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof SurgicalOperationNotesListVo )
			{
				SurgicalOperationNotesListVo ps1 = (SurgicalOperationNotesListVo)ob1;
				rez1 = (ps1.getMainProcedure() != null && ps1.getMainProcedure().getProcedure() != null) ? ps1.getMainProcedure().getProcedure().getProcedureName(): null;
			}
			if(ob2 instanceof SurgicalOperationNotesListVo)
			{
				SurgicalOperationNotesListVo ps2 = (SurgicalOperationNotesListVo)ob2;
				rez2 = (ps2.getMainProcedure() != null && ps2.getMainProcedure().getProcedure() != null) ? ps2.getMainProcedure().getProcedure().getProcedureName(): null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class DateComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public DateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date rez1 = null;
			Date rez2 = null;
			
			if(ob1 instanceof SurgicalOperationNotesListVo )
			{
				SurgicalOperationNotesListVo ps1 = (SurgicalOperationNotesListVo)ob1;
				rez1 = ps1.getSignOffDateTime() != null ? ps1.getSignOffDateTime().getDate(): null;
			}
			if(ob2 instanceof SurgicalOperationNotesListVo)
			{
				SurgicalOperationNotesListVo ps2 = (SurgicalOperationNotesListVo)ob2;
				rez2 = ps2.getSignOffDateTime() != null ? ps2.getSignOffDateTime().getDate(): null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareTo(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class HcpComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public HcpComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public HcpComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof SurgicalOperationNotesListVo )
			{
				SurgicalOperationNotesListVo ps1 = (SurgicalOperationNotesListVo)ob1;
				rez1 = ps1.getSignOffHCP() != null ? ps1.getSignOffHCP().getIMosName(): null;
			}
			if(ob2 instanceof SurgicalOperationNotesListVo)
			{
				SurgicalOperationNotesListVo ps2 = (SurgicalOperationNotesListVo)ob2;
				rez2 = ps2.getSignOffHCP() != null ? ps2.getSignOffHCP().getIMosName(): null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
}
