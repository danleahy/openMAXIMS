//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3338.27167)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargeclinicalinfocomponent;


import ims.clinical.forms.edischargeclinicalinfocomponent.GenForm.grdClinicalRelevantResultsRow;
import ims.clinical.forms.edischargeclinicalinfocomponent.GenForm.grdInvestigationsRow;
import ims.clinical.forms.edischargeclinicalinfocomponent.GenForm.grdPathologyRelevantResultsRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.patientclericaltaskdialog.GenForm.grdPatClericalTaskGrid;
import ims.core.vo.DischargeClinicalInformationVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.ocrr.vo.OrderInvestigationBookingVoCollection;
import ims.ocrr.vo.lookups.Category;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		open();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);			
		open();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		
		form.setMode(FormMode.VIEW);	
	}
	
	public boolean save() throws PresentationLogicException 
	{
		DischargeClinicalInformationVo voClinInfo = populateDataFromScreen();
		String[] str = voClinInfo.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}

		try 
		{
			voClinInfo = domain.saveClinicalInfo(voClinInfo);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			form.setMode(FormMode.VIEW);			
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			form.setMode(FormMode.VIEW);
			open();
			
			// Temporary fix for WDEV-8612 (this code really belongs in the open() function)
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			form.fireCustomControlValueChanged();

			return false;
		} 
		
		form.setMode(FormMode.VIEW);			
		form.getLocalContext().setSelectedRecord(voClinInfo);
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.fireCustomControlValueChanged();

		return true;
	}

	private DischargeClinicalInformationVo populateDataFromScreen() 
	{
		DischargeClinicalInformationVo voClinInfo = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voClinInfo = form.getLocalContext().getSelectedRecord();
		else
			voClinInfo = new DischargeClinicalInformationVo();

		if (voClinInfo.getCareContext() == null)
			voClinInfo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voClinInfo.setRelevantTreatments(form.richTxtRelevantTreatmentsETC().getValue());
		voClinInfo.setSummaryOfAdmission(form.richTxtSummaryofAdmission().getValue());
		
		OrderInvestigationBookingVoCollection voColl = new OrderInvestigationBookingVoCollection();
		
		//add the radiology results from the grid
		for (int i = 0 ; i < form.grdInvestigations().getRows().size() ; i++)
		{
			if (form.grdInvestigations().getRows().get(i).getColInclude())
				voColl.add(form.grdInvestigations().getRows().get(i).getValue());
		}
		
		//WDEV-18619 add the pathology results
		/*OrderInvestigationBookingVoCollection pathInvs = form.getLocalContext().getPathologyInvestigations();
		
		for (int j = 0 ; pathInvs != null && j <  pathInvs.size() ; j++)
		{
				if ( ! voColl.contains(pathInvs.get(j)))
					voColl.add(pathInvs.get(j));
		}*/
		
		//wdev-18892
		//add the pathology results from the grid
		for (int i = 0 ; i < form.grdPathologyRelevantResults().getRows().size() ; i++)
		{
			if( form.grdPathologyRelevantResults().getRows().get(i).getColumnInclude())
				voColl.add(form.grdPathologyRelevantResults().getRows().get(i).getValue());
		}
		
		//add the clinical results from the grid
		for (int i = 0 ; i < form.grdClinicalRelevantResults().getRows().size() ; i++)
		{
			if( form.grdClinicalRelevantResults().getRows().get(i).getColumnInclude())
				voColl.add(form.grdClinicalRelevantResults().getRows().get(i).getValue());
		}
		
		//---------
		
		voClinInfo.setResults(voColl);
		
		return voClinInfo;
	}

	public void open()
	{
		DischargeClinicalInformationVo voClinInfo = domain.getClinicalInfo(form.getGlobalContext().Core.getCurrentCareContext());

		form.getLocalContext().setSelectedRecord(voClinInfo);
		populateScreenFromData(voClinInfo);
		
		if (form.getMode().equals(FormMode.EDIT ))
			listAllResultsForTimePeriod();
		
		manageReadOnly();
		
		updateControlsState();
	}

	private void listAllResultsForTimePeriod() 
	{
		OrderInvestigationBookingVoCollection voColl = domain.listInvestigationResults(form.getGlobalContext().Core.getPatientShort(), ConfigFlag.UI.EDISCHARGE_RESULTS_NUM_DAYS.getValue());
						
		for(int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			boolean bFound = false;
			
			if (Category.CLINICALIMAGING.equals(voColl.get(i).getInvestigation().getInvestigationIndex().getCategory()))  //wdev-18892
			{
				for(int j = 0 ; j < form.grdInvestigations().getRows().size() ; j++)
				{
					if (voColl.get(i).equals(form.grdInvestigations().getRows().get(j).getValue()))
					{
						bFound = true;
						break;
					}
				}
			}
			if( Category.PATHOLOGY.equals(voColl.get(i).getInvestigation().getInvestigationIndex().getCategory()))  //wdev-18892
			{
				for(int j = 0 ; j < form.grdPathologyRelevantResults().getRows().size() ; j++)
				{
					if (voColl.get(i).equals(form.grdPathologyRelevantResults().getRows().get(j).getValue()))
					{
						bFound = true;
						break;
					}
				}
			}
			
			
			if ( ! bFound 
				&&voColl.get(i).getInvestigationIsNotNull()
				&& voColl.get(i).getInvestigation().getInvestigationIndexIsNotNull()
				&& voColl.get(i).getInvestigation().getInvestigationIndex().getNameIsNotNull())
			{
				if (Category.CLINICALIMAGING.equals(voColl.get(i).getInvestigation().getInvestigationIndex().getCategory()))
				{
					grdInvestigationsRow row = form.grdInvestigations().getRows().newRow();
					row.setColInvestigation(voColl.get(i).getInvestigation().getInvestigationIndex().getName());
					row.setValue(voColl.get(i));
				}
				else if( Category.PATHOLOGY.equals(voColl.get(i).getInvestigation().getInvestigationIndex().getCategory()))	//wdev-18892
				{
					grdPathologyRelevantResultsRow row = form.grdPathologyRelevantResults().getRows().newRow();
					row.setColumnInvestigation(voColl.get(i).getInvestigation().getInvestigationIndex().getName());
					row.setValue(voColl.get(i));
				}
				
			}
		}
		//wdev-18892
		voColl = domain.listClinicalInvestigationsResults(form.getGlobalContext().Core.getPatientShort(), ConfigFlag.UI.EDISCHARGE_RESULTS_NUM_DAYS.getValue());
		
		
		
		for(int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			boolean bFound = false;
			if( Category.CLINICAL.equals(voColl.get(i).getInvestigation().getInvestigationIndex().getCategory()))  //wdev-18892
			{
				for(int j = 0 ; j < form.grdClinicalRelevantResults().getRows().size() ; j++)
				{
					if (voColl.get(i).equals(form.grdClinicalRelevantResults().getRows().get(j).getValue()))
					{
						bFound = true;
						break;
					}
				}
			}
			if ( ! bFound 
					&&voColl.get(i).getInvestigationIsNotNull()
					&& voColl.get(i).getInvestigation().getInvestigationIndexIsNotNull()
					&& voColl.get(i).getInvestigation().getInvestigationIndex().getNameIsNotNull())
				{
					if( Category.CLINICAL.equals(voColl.get(i).getInvestigation().getInvestigationIndex().getCategory()))	//wdev-18892
					{
						grdClinicalRelevantResultsRow row = form.grdClinicalRelevantResults().getRows().newRow();
						row.setColumnOtherResults(voColl.get(i).getInvestigation().getInvestigationIndex().getName());
						row.setValue(voColl.get(i));
					}
				}
		}
			
				
		
	}
	private void populateScreenFromData(DischargeClinicalInformationVo voClinInfo)
	{
		clearInstanceControls();
		
		if (voClinInfo == null)
			return;
		
		StringBuffer tooltip = new StringBuffer();
		OrderInvestigationBookingVoCollection pathInvestigations =  new OrderInvestigationBookingVoCollection();
		
		if (voClinInfo.getPresentingComplaints() != null)
			tooltip.append("<b>Presenting Complaint:</b> " + voClinInfo.getPresentingComplaints() + "<br>");
		if (voClinInfo.getInvestigationComments() != null)
			tooltip.append("<b>Investigation Comments:</b> " + voClinInfo.getInvestigationComments() + "<br>");
		if (voClinInfo.getAdditionalComments() != null)
			tooltip.append("<b>Additional Comments:</b> " + voClinInfo.getAdditionalComments());
		
		form.imbInfo().setTooltip(tooltip.toString());
		form.richTxtRelevantTreatmentsETC().setValue(voClinInfo.getRelevantTreatments());
		form.richTxtSummaryofAdmission().setValue(voClinInfo.getSummaryOfAdmission());
		
		for(int i = 0 ; voClinInfo.getResultsIsNotNull() && i < voClinInfo.getResults().size() ; i++)
		{
			if (voClinInfo.getResults().get(i).getInvestigation() == null || voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex() == null)
				continue;
			
			if (Category.CLINICALIMAGING.equals(voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getCategory()))
			{	
				grdInvestigationsRow row = form.grdInvestigations().getRows().newRow();
				row.setColInvestigation(voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getName());
				row.setColInclude(Boolean.TRUE);
				row.setValue(voClinInfo.getResults().get(i));
			}
			else if( Category.PATHOLOGY.equals(voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getCategory()))   //wdev-18892
			{
				 grdPathologyRelevantResultsRow rowpat = form.grdPathologyRelevantResults().getRows().newRow();
				 rowpat.setColumnInvestigation(voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getName());
				 rowpat.setColumnInclude(Boolean.TRUE);
				 rowpat.setValue(voClinInfo.getResults().get(i));
			}
			else if( Category.CLINICAL.equals(voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getCategory()))
			{
				 grdClinicalRelevantResultsRow rowclin = form.grdClinicalRelevantResults().getRows().newRow();
				 rowclin.setColumnOtherResults(voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getName());
				 rowclin.setColumnInclude(Boolean.TRUE);
				 rowclin.setValue(voClinInfo.getResults().get(i));
			}
				
			/*else
				pathInvestigations.add(voClinInfo.getResults().get(i));*/
		}
		
		form.getLocalContext().setPathologyInvestigations(pathInvestigations);
	}
	
	public void initializeComponent()
	{
		//setTooltips();
		//form.lblPathology().setTextColor(Color.Red);
		form.getLocalContext().setbInitialised(null);
		form.getLocalContext().setisReadonly(false);
	}
	
	/*private void setTooltips() 
	{
		EDischargeHINT lkpHint = new EDischargeHINT();
		
		lkpHint.setId(-1709); // Investigations
		FieldHelpVo voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbInvestigationCommentsHINT().setTooltip(voHint.getHelpText());
		
		lkpHint.setId(-1710); //Additional
		voHint = domain.getHintByLookupID(lkpHint);
		if (voHint != null)
			form.imbAdditionalCommnetsHINT().setTooltip(voHint.getHelpText());
		
	}*/

	public void clearInstanceControls()
	{
		
		form.richTxtSummaryofAdmission().setValue(null);
		form.richTxtRelevantTreatmentsETC().setValue(null);
		form.grdInvestigations().getRows().clear();
		form.grdPathologyRelevantResults().getRows().clear();	//wdev-18892
		form.grdClinicalRelevantResults().getRows().clear();	//wdev-18892
		
	}
	public void initialise() 
	{
		if (form.getLocalContext().getbInitialised() == null)
		{
			initializeComponent();
			open();
			form.getLocalContext().setbInitialised(Boolean.TRUE);
		}
	}

	public void setReadOnly() 
	{
		form.getLocalContext().setisReadonly(/*form.getGlobalContext().Clinical.geteDischargeCompleted()*/form.getGlobalContext().Clinical.geteDischargeClinicalComplete());
		manageReadOnly();
	}

	private void manageReadOnly() 
	{
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(true);

		if (form.getLocalContext().getisReadonlyIsNotNull()
			&& form.getLocalContext().getisReadonly()
			&& form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}

	@Override
	protected void onImbRelevantTreatCheckSpellClick() throws PresentationLogicException
	{
		form.richTxtRelevantTreatmentsETC().spellCheck();
		
	}

	@Override
	protected void onImbsummaryAdmSpellCheckClick() throws PresentationLogicException
	{
		form.richTxtSummaryofAdmission().spellCheck();
		
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		DischargeClinicalInformationVo voClinInfo = form.getLocalContext().getSelectedRecord();
		
		form.imbRelevantTreatCheckSpell().setTooltip(FormMode.EDIT.equals(form.getMode()) ? "Spell Check" : "");
		form.imbSummaryAdmSpellCheck().setTooltip(FormMode.EDIT.equals(form.getMode()) ? "Spell Check" : "");
		
		form.imbInfo().setEnabled(false);
		form.imbInfo().setVisible(voClinInfo != null && (voClinInfo.getPresentingComplaints() != null || voClinInfo.getInvestigationComments() != null || voClinInfo.getAdditionalComments() != null));
		
		//form.lblPathology().setVisible(form.getLocalContext().getPathologyInvestigations() != null && form.getLocalContext().getPathologyInvestigations().size() > 0);
	}

}
