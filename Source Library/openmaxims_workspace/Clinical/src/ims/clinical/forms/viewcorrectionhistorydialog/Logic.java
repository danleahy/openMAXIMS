//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.viewcorrectionhistorydialog;

import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNoteStatusVoCollection;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String COL_UPDATE_DATE_TIME 		= "Update Date/Time";
	private static final String COL_UPDATE_USER 			= "Update User";
	private static final String COL_NOTE_PRE_CORRECTION		= "Note-Pre-Correction";
	private static final String COL_NOTE_POST_CORRECTION	= "Note-Post-Correction";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void initialise() 
	{	
		form.dyngrdNotes().clear();

		DynamicGridColumn dateColumn = form.dyngrdNotes().getColumns().newColumn("Update Date/Time", true);
		dateColumn.setWidth(120);	
		dateColumn.setIdentifier(COL_UPDATE_DATE_TIME);
		dateColumn.setSortMode(SortMode.AUTOMATIC);
		
		DynamicGridColumn userColumn = form.dyngrdNotes().getColumns().newColumn("Update User", true);
		userColumn.setWidth(110);		
		userColumn.setIdentifier(COL_UPDATE_USER);
		userColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn preEditedNoteColumn = form.dyngrdNotes().getColumns().newColumn("Note-Pre-Correction", true);
		preEditedNoteColumn.setWidth(291);	
		preEditedNoteColumn.setIdentifier(COL_NOTE_PRE_CORRECTION);
		
		DynamicGridColumn postEditedNoteColumn = form.dyngrdNotes().getColumns().newColumn("Note-Post-Correction", true);
		postEditedNoteColumn.setWidth(-1);	
		postEditedNoteColumn.setIdentifier(COL_NOTE_POST_CORRECTION);
	}
	
	private void open()
	{
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() &&
				form.getGlobalContext().Clinical.getCurrentClinicalNote().getStatusHistoryIsNotNull())
		{
			ClinicalNoteStatusVoCollection voClinNoteStatColl = form.getGlobalContext().Clinical.getCurrentClinicalNote().getStatusHistory();
			
			populateNotesGrid(voClinNoteStatColl);
			
		}
	}

	private void populateNotesGrid(ClinicalNoteStatusVoCollection voClinNoteStatColl) 
	{
		if (voClinNoteStatColl==null)
			return;
		
		voClinNoteStatColl.sort(new DateTimeComparator(SortOrder.ASCENDING));
		
		for(int i = 0 ; i < voClinNoteStatColl.size() ; i++)
		{
			if(voClinNoteStatColl.get(i).getStatusIsNotNull()
				&& voClinNoteStatColl.get(i).getStatus().equals(ClinicalNotesStatus.CORRECTED))
			{
				addRowToGrid(voClinNoteStatColl.get(i));
				
			}
		}
	}

	private void addRowToGrid(ClinicalNoteStatusVo clinicalNoteStatusVo) 
	{
		if (clinicalNoteStatusVo==null)
			return;
		
		DynamicGridRow row = form.dyngrdNotes().getRows().newRow();
		
		if(clinicalNoteStatusVo.getDateTimeIsNotNull())
		{
			DynamicGridColumn col = getCol(COL_UPDATE_DATE_TIME);
			if(col == null)
				throw new DomainRuntimeException("No column for Identifier");

			DynamicGridCell cellDateTime = row.getCells().newCell(col, DynamicCellType.STRING);
			cellDateTime.setValue(clinicalNoteStatusVo.getDateTimeIsNotNull() ? clinicalNoteStatusVo.getDateTime().toString() : null);
			cellDateTime.setTooltip(clinicalNoteStatusVo.getDateTimeIsNotNull() ? clinicalNoteStatusVo.getDateTime().toString() : null);
		}
		
		if(clinicalNoteStatusVo.getMOSIsNotNull())
		{
			DynamicGridColumn col = getCol(COL_UPDATE_USER);
			if(col == null)
				throw new DomainRuntimeException("No column for Identifier");

			DynamicGridCell cellMos = row.getCells().newCell(col, DynamicCellType.STRING);
			cellMos.setValue(clinicalNoteStatusVo.getMOSIsNotNull() ? clinicalNoteStatusVo.getMOS().getName().toString() : null);
			cellMos.setTooltip(clinicalNoteStatusVo.getMOSIsNotNull() ? clinicalNoteStatusVo.getMOS().getName().toString() : null);
		}

		if(clinicalNoteStatusVo.getPreEditClinicalNoteIsNotNull()) 
		{
			DynamicGridColumn col = getCol(COL_NOTE_PRE_CORRECTION);
			if(col == null)
				throw new DomainRuntimeException("No column for Identifier");

			DynamicGridCell cellPreCorrectionNote = row.getCells().newCell(col, DynamicCellType.HTMLVIEW);
			cellPreCorrectionNote.setValue(clinicalNoteStatusVo.getPreEditClinicalNote());
			cellPreCorrectionNote.setTooltip(clinicalNoteStatusVo.getPreEditClinicalNote());
		}
		
		if(clinicalNoteStatusVo.getClinicalNoteIsNotNull()) 
		{
			DynamicGridColumn col = getCol(COL_NOTE_POST_CORRECTION);
			if(col == null)
				throw new DomainRuntimeException("No column for Identifier");

			DynamicGridCell cellPostCorrectionNote  = row.getCells().newCell(col, DynamicCellType.HTMLVIEW);
			cellPostCorrectionNote.setValue(clinicalNoteStatusVo.getClinicalNote());
			cellPostCorrectionNote.setTooltip(clinicalNoteStatusVo.getClinicalNote());
		}

		row.setBackColor(Color.Bisque);
		row.setValue(clinicalNoteStatusVo);
	}

	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdNotes().getColumns().getByIdentifier(identifier);
	}

	
	
	public class DateTimeComparator implements Comparator
	{
		private int direction = 1;
		
		public DateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateTimeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime dateTime1 = null;
			DateTime dateTime2 = null;
			if(ob1 instanceof ClinicalNoteStatusVo )
			{
				ClinicalNoteStatusVo voClinicalNoteStatus = ((ClinicalNoteStatusVo)ob1);
				dateTime1 = voClinicalNoteStatus.getDateTimeIsNotNull() ? voClinicalNoteStatus.getDateTime() :null;
			}
			if(ob2 instanceof ClinicalNoteStatusVo )
			{
				ClinicalNoteStatusVo voClinicalNoteStatus = ((ClinicalNoteStatusVo)ob2);
				dateTime2 = voClinicalNoteStatus.getDateTimeIsNotNull() ? voClinicalNoteStatus.getDateTime() :null;
			}
			if(dateTime1 != null )
				return  dateTime1.compareTo(dateTime2)*direction;
			if(dateTime2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
		
	}



	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
	}
}
