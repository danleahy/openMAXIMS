//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.theatresessiondetailsdialog;

import ims.clinical.forms.theatresessiondetailsdialog.GenForm.grdAssistingSurgeonsRow;
import ims.clinical.forms.theatresessiondetailsdialog.GenForm.grdScrubNursesRow;
import ims.clinical.vo.TheatreSessionStaffDetailVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.NurseLiteVo;
import ims.core.vo.NurseLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.vo.SessionTheatreDetailsLiteVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		form.ccAnaestheticPractioner().initialize(MosType.MEDIC);
		form.ccAnaesthetist().initializeMedic(HcpDisType.ANAESTHETIST, null); //WDEV-22627
		form.ccAssistingAn().initializeMedic(HcpDisType.ANAESTHETIST, null); //WDEV-22627
		form.ccOperatingSurgeon().initialize(MosType.MEDIC);
		form.ccSupervisingAn().initializeMedic(HcpDisType.ANAESTHETIST, null); //WDEV-22627
		form.ccSupervisingSurgeon().initialize(MosType.MEDIC);
	}

	@Override
	protected void onImbRemoveCirculatorsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdScrubNurses().removeSelectedRow();
		//WDEV-21778
		updateControlState();
	}

	@Override
	protected void onImbAddCirculatorsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdScrubNurses().getRows().newRow();
	}

	@Override
	protected void onImbRemovaeAssSurgeonsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdAssistingSurgeons().removeSelectedRow();
		//WDEV-21778
		updateControlState();
	}

	@Override
	protected void onImbAddAssSurgeonsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdAssistingSurgeons().getRows().newRow();
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		clearInstanceControls();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		TheatreSessionStaffDetailVo theatreSessionStaffDetail = populateDataFromScreen(form.getLocalContext().getTheatreSessionStaffDetail());
		String[] errors = theatreSessionStaffDetail.validate();

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveTheatreSessionStaffDetail(theatreSessionStaffDetail);
		}
		catch (StaleObjectException e)
		{
			refreshScreen();
			return;
		}
		//WDEV-21778
		catch (DomainInterfaceException ex)
		{
			refreshScreen();
			return;
		}
		engine.close(DialogResult.OK);
	}

	private void refreshScreen()
	{
		engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		form.getLocalContext().setTheatreSessionStaffDetail(domain.getTheatreSessionStaffDetails(form.getGlobalContext().Scheduling.getTheatreSession()));
		//WDEV-21778
		clearInstanceControls();
		populateScreenFromData();
	}

	private TheatreSessionStaffDetailVo populateDataFromScreen(TheatreSessionStaffDetailVo theatreSessionStaffDetail)
	{
		if (theatreSessionStaffDetail == null)
		{
			theatreSessionStaffDetail = new TheatreSessionStaffDetailVo();
		}

		theatreSessionStaffDetail.setAnaestheticPractioner(form.ccAnaestheticPractioner().getValue());
		theatreSessionStaffDetail.setAnaesthetist(form.ccAnaesthetist().getValue());
		theatreSessionStaffDetail.setAssistingAnaesthetist(form.ccAssistingAn().getValue());
		theatreSessionStaffDetail.setOperatingSurgeon(form.ccOperatingSurgeon().getValue());
		theatreSessionStaffDetail.setSupervisingAnaesthetist(form.ccSupervisingAn().getValue());
		theatreSessionStaffDetail.setSupervisingSurgeon(form.ccSupervisingSurgeon().getValue());

		MedicLiteVoCollection voCollMedics = new MedicLiteVoCollection();
		for (int i = 0; i < form.grdAssistingSurgeons().getRows().size(); i++)
		{
			if (form.grdAssistingSurgeons().getRows().get(i).getColAssistingSurgeon().getValue() != null)
			{
				voCollMedics.add((MedicLiteVo) form.grdAssistingSurgeons().getRows().get(i).getColAssistingSurgeon().getValue());
			}
		}
		theatreSessionStaffDetail.setAssistingSurgeons(voCollMedics);

		NurseLiteVoCollection voCollNurses = new NurseLiteVoCollection();
		for (int i = 0; i < form.grdScrubNurses().getRows().size(); i++)
		{
			if (form.grdScrubNurses().getRows().get(i).getColCirculatorsScrubNurses().getValue() != null)
			{
				voCollNurses.add((NurseLiteVo) form.grdScrubNurses().getRows().get(i).getColCirculatorsScrubNurses().getValue());
			}
		}
		theatreSessionStaffDetail.setCirculatorsScrubNurses(voCollNurses);
		theatreSessionStaffDetail.setOther(form.txtOther().getValue());
		theatreSessionStaffDetail.setNoAnaesthetistPresentLA(form.chkNoAnaesthetistPresent().getValue());
		
		//WDEV-22305
		if(form.getGlobalContext().Scheduling.getTheatreSessionIsNotNull())
		{
			SessionTheatreDetailsLiteVo voTheatreSEssion = new SessionTheatreDetailsLiteVo(form.getGlobalContext().Scheduling.getTheatreSession().getID_Sch_Session(), form.getGlobalContext().Scheduling.getTheatreSession().getVersion_Sch_Session());
			theatreSessionStaffDetail.setTheatreSession(voTheatreSEssion);
		}
		
		return theatreSessionStaffDetail;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setTheatreSessionStaffDetail(domain.getTheatreSessionStaffDetails(form.getGlobalContext().Scheduling.getTheatreSession()));
		clearInstanceControls();
		populateScreenFromData();
	}

	private void populateScreenFromData()
	{
		TheatreSessionStaffDetailVo theatreSessionStaffDetail = form.getLocalContext().getTheatreSessionStaffDetail();
		if (theatreSessionStaffDetail == null)
			return;

		form.ccAnaestheticPractioner().setValue(theatreSessionStaffDetail.getAnaestheticPractioner());
		form.ccAnaesthetist().setValue(theatreSessionStaffDetail.getAnaesthetist());
		form.ccAssistingAn().setValue(theatreSessionStaffDetail.getAssistingAnaesthetist());
		form.ccOperatingSurgeon().setValue(theatreSessionStaffDetail.getOperatingSurgeon());
		form.ccSupervisingAn().setValue(theatreSessionStaffDetail.getSupervisingAnaesthetist());
		form.ccSupervisingSurgeon().setValue(theatreSessionStaffDetail.getSupervisingSurgeon());

		if (theatreSessionStaffDetail.getAssistingSurgeonsIsNotNull())
		{
			for (MedicLiteVo medic : theatreSessionStaffDetail.getAssistingSurgeons())
			{
				grdAssistingSurgeonsRow row = form.grdAssistingSurgeons().getRows().newRow();
				row.getColAssistingSurgeon().newRow(medic, medic.toString());
				row.getColAssistingSurgeon().setValue(medic);
			}
		}

		if (theatreSessionStaffDetail.getCirculatorsScrubNursesIsNotNull())
		{
			for (NurseLiteVo nurse : theatreSessionStaffDetail.getCirculatorsScrubNurses())
			{
				grdScrubNursesRow row = form.grdScrubNurses().getRows().newRow();
				row.getColCirculatorsScrubNurses().newRow(nurse, nurse.getMos().toString());
				row.getColCirculatorsScrubNurses().setValue(nurse);
			}
		}

		form.txtOther().setValue(theatreSessionStaffDetail.getOther());
		form.chkNoAnaesthetistPresent().setValue(theatreSessionStaffDetail.getNoAnaesthetistPresentLA());
	}

	private void clearInstanceControls()
	{
		form.ccAnaestheticPractioner().clear();
		form.ccAnaesthetist().clear();
		form.ccAssistingAn().clear();
		form.ccOperatingSurgeon().clear();
		form.ccSupervisingAn().clear();
		form.ccSupervisingSurgeon().clear();
		form.grdAssistingSurgeons().getRows().clear();
		form.grdScrubNurses().getRows().clear();
		form.txtOther().setValue(null);
		form.chkNoAnaesthetistPresent().setValue(false);
	}

	private void updateControlState()
	{
		form.imbRemovaeAssSurgeons().setEnabled(false);
		if (form.grdAssistingSurgeons().getSelectedRow() != null)
		{
			form.imbRemovaeAssSurgeons().setEnabled(form.getMode().equals(FormMode.EDIT));
		}

		form.imbRemoveCirculators().setEnabled(false);
		if (form.grdScrubNurses().getSelectedRow() != null)
		{
			form.imbRemoveCirculators().setEnabled(form.getMode().equals(FormMode.EDIT));
		}
	}

	@Override
	protected void onGrdScrubNursesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdAssistingSurgeonsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdScrubNursesGridQueryComboBoxTextSubmited(int column, grdScrubNursesRow row, String text) throws PresentationLogicException
	{
		if (text == null || text.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}

		NurseLiteVoCollection voCollNurse = domain.listNurseLiteVo(text);

		//WDEV-21778
		row.getColCirculatorsScrubNurses().clear();
		
		for (int i = 0; i < voCollNurse.size(); i++)
		{
			row.getColCirculatorsScrubNurses().newRow(voCollNurse.get(i), voCollNurse.get(i).getMos().toString());
		}

		if (voCollNurse.size() == 1)
			row.getColCirculatorsScrubNurses().setValue(voCollNurse.get(0));
		else
			row.getColCirculatorsScrubNurses().showOpened();

	}

	@Override
	protected void onGrdAssistingSurgeonsGridQueryComboBoxTextSubmited(int column, grdAssistingSurgeonsRow row, String text) throws PresentationLogicException
	{
		if (text == null || text.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}

		MedicLiteVoCollection voCollMedics = domain.listMedicLiteVo(text);

		//WDEV-21778
		row.getColAssistingSurgeon().clear();
		
		for (int i = 0; i < voCollMedics.size(); i++)
		{
			row.getColAssistingSurgeon().newRow(voCollMedics.get(i), voCollMedics.get(i).getMos().toString());
		}

		if (voCollMedics.size() == 1)
			row.getColAssistingSurgeon().setValue(voCollMedics.get(0));
		else
			row.getColAssistingSurgeon().showOpened();
	}

	//WDEV-21778
	@Override
	protected void onFormModeChanged()
	{
		form.imbRemovaeAssSurgeons().setEnabled(form.grdAssistingSurgeons().getSelectedRow() != null && form.getMode().equals(FormMode.EDIT));
		form.imbRemoveCirculators().setEnabled(form.grdScrubNurses().getSelectedRow() != null && form.getMode().equals(FormMode.EDIT));		
	}
}
