//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.intraoperativecasedetailsdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrIntraLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabCaseDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbCaseServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.clinical.vo.ServiceRefVo getValue()
				{
					return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
				}
				public void setValue(ims.core.clinical.vo.ServiceRefVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbScrubPractitioner2ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.NurseLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.NurseLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.NurseLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.NurseLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.NurseLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.NurseLiteVo getValue()
				{
					return (ims.core.vo.NurseLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.NurseLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbScrubPractitioner1ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.NurseLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.NurseLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.NurseLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.NurseLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.NurseLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.NurseLiteVo getValue()
				{
					return (ims.core.vo.NurseLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.NurseLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdScrubNursesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdScrubNursesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColCirculatorsScrubNursesReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColCirculatorsScrubNursesReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColCirculatorsScrubNursesOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getColCirculatorsScrubNurses()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellColCirculatorsScrubNursesTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColRoleReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColRoleReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColRoleOpened()
				{
					super.row.showOpened(1);
				}
				public ims.clinical.vo.lookups.CirculatorScrubNurseRole getColRole()
				{
					return (ims.clinical.vo.lookups.CirculatorScrubNurseRole)super.row.get(1);
				}
				public void setColRole(ims.clinical.vo.lookups.CirculatorScrubNurseRole value)
				{
					super.row.set(1, value, true);
				}
				public void setCellColRoleTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinical.vo.CirculatorScrubNurseRoleVo getValue()
				{
					return (ims.clinical.vo.CirculatorScrubNurseRoleVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.CirculatorScrubNurseRoleVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdScrubNursesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdScrubNursesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdScrubNursesRow get(int index)
				{
					return new grdScrubNursesRow(super.collection.get(index));
				}
				public grdScrubNursesRow newRow()
				{
					return new grdScrubNursesRow(super.collection.newRow());
				}
				public grdScrubNursesRow newRow(boolean autoSelect)
				{
					return new grdScrubNursesRow(super.collection.newRow(autoSelect));
				}
				public grdScrubNursesRow newRowAt(int index)
				{
					return new grdScrubNursesRow(super.collection.newRowAt(index));
				}
				public grdScrubNursesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdScrubNursesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdScrubNursesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.clinical.vo.CirculatorScrubNurseRoleVoCollection getValues()
				{
					ims.clinical.vo.CirculatorScrubNurseRoleVoCollection listOfValues = new ims.clinical.vo.CirculatorScrubNurseRoleVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.CirculatorScrubNurseRoleVo getValue()
				{
					return (ims.clinical.vo.CirculatorScrubNurseRoleVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.CirculatorScrubNurseRoleVo value)
				{
					super.grid.setValue(value);
				}
				public grdScrubNursesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdScrubNursesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdScrubNursesRowCollection getRows()
				{
					return new grdScrubNursesRowCollection(super.grid.getRows());
				}
				public grdScrubNursesRow getRowByValue(ims.clinical.vo.CirculatorScrubNurseRoleVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdScrubNursesRow(row);
				}
				public void setColCirculatorsScrubNursesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColCirculatorsScrubNursesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColRoleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColRoleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public GridComboBox ColRoleComboBox()
				{
					return new GridComboBox(super.grid, 1);
				}
			}
			public static class grdAssistingSurgeonsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAssistingSurgeonsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColAssistingSurgeonReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColAssistingSurgeonReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColAssistingSurgeonOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getColAssistingSurgeon()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellColAssistingSurgeonTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.MedicLiteVo getValue()
				{
					return (ims.core.vo.MedicLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.MedicLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAssistingSurgeonsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAssistingSurgeonsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAssistingSurgeonsRow get(int index)
				{
					return new grdAssistingSurgeonsRow(super.collection.get(index));
				}
				public grdAssistingSurgeonsRow newRow()
				{
					return new grdAssistingSurgeonsRow(super.collection.newRow());
				}
				public grdAssistingSurgeonsRow newRow(boolean autoSelect)
				{
					return new grdAssistingSurgeonsRow(super.collection.newRow(autoSelect));
				}
				public grdAssistingSurgeonsRow newRowAt(int index)
				{
					return new grdAssistingSurgeonsRow(super.collection.newRowAt(index));
				}
				public grdAssistingSurgeonsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAssistingSurgeonsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAssistingSurgeonsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				public ims.core.vo.MedicLiteVoCollection getValues()
				{
					ims.core.vo.MedicLiteVoCollection listOfValues = new ims.core.vo.MedicLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.MedicLiteVo getValue()
				{
					return (ims.core.vo.MedicLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.MedicLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdAssistingSurgeonsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAssistingSurgeonsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAssistingSurgeonsRowCollection getRows()
				{
					return new grdAssistingSurgeonsRowCollection(super.grid.getRows());
				}
				public grdAssistingSurgeonsRow getRowByValue(ims.core.vo.MedicLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAssistingSurgeonsRow(row);
				}
				public void setColAssistingSurgeonHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColAssistingSurgeonHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 440, 173, 352, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccSupervisingSurgeonForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 29, skipContextValidation);
				//ims.framework.Control m_ccSupervisingSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(440), new Integer(173), new Integer(352), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 29), m_ccSupervisingSurgeonForm, instance1 } );
				ims.framework.Control m_ccSupervisingSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 29), m_ccSupervisingSurgeonForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSupervisingSurgeonControl);
				Menu[] menus1 = m_ccSupervisingSurgeonForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 440, 148, 352, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccOperatingSurgeonForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 27, skipContextValidation);
				//ims.framework.Control m_ccOperatingSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(440), new Integer(148), new Integer(352), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 27), m_ccOperatingSurgeonForm, instance2 } );
				ims.framework.Control m_ccOperatingSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 27), m_ccOperatingSurgeonForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccOperatingSurgeonControl);
				Menu[] menus2 = m_ccOperatingSurgeonForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 440, 123, 352, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAnaestheticPractitionerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance3, startTabIndex.intValue() + 25, skipContextValidation);
				//ims.framework.Control m_ccAnaestheticPractitionerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(440), new Integer(123), new Integer(352), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 25), m_ccAnaestheticPractitionerForm, instance3 } );
				ims.framework.Control m_ccAnaestheticPractitionerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 25), m_ccAnaestheticPractitionerForm, instance3, Boolean.FALSE } );
				super.addControl(m_ccAnaestheticPractitionerControl);
				Menu[] menus3 = m_ccAnaestheticPractitionerForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
				ims.framework.CustomComponent instance4 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 440, 98, 352, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccSupervisingAnForm = loader.loadComponent(102256, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance4, startTabIndex.intValue() + 23, skipContextValidation);
				//ims.framework.Control m_ccSupervisingAnControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(440), new Integer(98), new Integer(352), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 23), m_ccSupervisingAnForm, instance4 } );
				ims.framework.Control m_ccSupervisingAnControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 23), m_ccSupervisingAnForm, instance4, Boolean.FALSE } );
				super.addControl(m_ccSupervisingAnControl);
				Menu[] menus4 = m_ccSupervisingAnForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus4.length; x++)
				{
					form.registerMenu(menus4[x]);
				}
				ims.framework.CustomComponent instance5 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 440, 73, 352, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAssistingAnForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance5, startTabIndex.intValue() + 21, skipContextValidation);
				//ims.framework.Control m_ccAssistingAnControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(440), new Integer(73), new Integer(352), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 21), m_ccAssistingAnForm, instance5 } );
				ims.framework.Control m_ccAssistingAnControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 21), m_ccAssistingAnForm, instance5, Boolean.FALSE } );
				super.addControl(m_ccAssistingAnControl);
				Menu[] menus5 = m_ccAssistingAnForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus5.length; x++)
				{
					form.registerMenu(menus5[x]);
				}
				ims.framework.CustomComponent instance6 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 440, 48, 352, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAnaethetistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 6000, anchoringHelper6.getSize(), instance6, startTabIndex.intValue() + 19, skipContextValidation);
				//ims.framework.Control m_ccAnaethetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(440), new Integer(48), new Integer(352), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 19), m_ccAnaethetistForm, instance6 } );
				ims.framework.Control m_ccAnaethetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 19), m_ccAnaethetistForm, instance6, Boolean.FALSE } );
				super.addControl(m_ccAnaethetistControl);
				Menu[] menus6 = m_ccAnaethetistForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus6.length; x++)
				{
					form.registerMenu(menus6[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 296, 309, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scrub Practitioner 1:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 296, 335, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scrub Practitioner 2:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 296, 464, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 296, 359, 140, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Circulators/Scrub Nurse(s):", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 296, 198, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assisting Surgeon(s):", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 296, 75, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assisting Anaesthetist:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 296, 175, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Supervising Surgeon:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 296, 125, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Practitioner:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 296, 150, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Operating Surgeon:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 296, 100, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Supervising Anaesthetist:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 296, 50, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 224, 496, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 224, 346, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 224, 436, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 224, 468, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 224, 406, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 224, 376, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 224, 316, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 224, 286, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 224, 256, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 224, 226, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 224, 196, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 296, 507, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Case Service:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 6, 157, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned Procedure details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 240, 6, 225, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "<proc 1 name and laterality>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 240, 24, 152, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<proc 2 name and laterality>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 218, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Planned Procedure details:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 8, 528, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Remove Time(s)", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 492, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Out of Recovery", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.GreenYellow, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 402, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery Stop", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Moccasin, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 464, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ready For Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Brown, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 432, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Left Theatre", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Plum, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 342, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Out Completed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Green, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 372, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery Start", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Fuchia, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 312, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetised Ready For Surgery", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Yellow, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 282, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Sign in", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Peru, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 252, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Arrived", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.DeepPink, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 222, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Sent For", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.DarkOrange, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 192, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Safety Brief", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.DarkGray, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 664, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 744, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 376, 568, 136, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Chartable Occurrences", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Black }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 440, 464, 336, 36, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 440, 505, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbCaseServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCaseServiceTemp);
				cmbCaseServiceComboBox cmbCaseService = (cmbCaseServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCaseServiceComboBox.class, m_cmbCaseServiceTemp);
				super.addComboBox(cmbCaseService);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 440, 333, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbScrubPractitioner2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbScrubPractitioner2Temp);
				qmbScrubPractitioner2ComboBox qmbScrubPractitioner2 = (qmbScrubPractitioner2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbScrubPractitioner2ComboBox.class, m_qmbScrubPractitioner2Temp);
				super.addComboBox(qmbScrubPractitioner2);
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 440, 307, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbScrubPractitioner1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbScrubPractitioner1Temp);
				qmbScrubPractitioner1ComboBox qmbScrubPractitioner1 = (qmbScrubPractitioner1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbScrubPractitioner1ComboBox.class, m_qmbScrubPractitioner1Temp);
				super.addComboBox(qmbScrubPractitioner1);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 16, 163, 160, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Recovery in Theatre", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 16, 139, 160, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Tourniquet", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 16, 115, 248, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Implants, Arterial Clamps + Other Equipment", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 16, 91, 232, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Specimen, Wound Packing + Skin Closure", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 16, 67, 216, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Irrigation, Catheters, Drains and Tubes", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 160, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Diathermy and Laser", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 440, 359, 336, 100, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdScrubNursesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdScrubNursesTemp);
				grdScrubNursesGrid grdScrubNurses = (grdScrubNursesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdScrubNursesGrid.class, m_grdScrubNursesTemp);
				grdScrubNurses.addMutableComboBoxColumn("Circulators / Scrub Nurses", 0, 0, 220, false, true, true, false, true, true, -1);
				grdScrubNurses.addComboBoxColumn("Role", 0, 0, -1, false, true, false, false, true, -1);
				super.addGrid(grdScrubNurses);
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 440, 198, 336, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdAssistingSurgeonsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAssistingSurgeonsTemp);
				grdAssistingSurgeonsGrid grdAssistingSurgeons = (grdAssistingSurgeonsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssistingSurgeonsGrid.class, m_grdAssistingSurgeonsTemp);
				grdAssistingSurgeons.addMutableComboBoxColumn("Assisting Surgeon", 0, 0, -1, false, true, true, false, true, true, -1);
				super.addGrid(grdAssistingSurgeons);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 784, 399, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Remove, form_images_local.Core.Remove, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 784, 359, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Add, form_images_local.Core.Add, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 784, 237, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Remove, form_images_local.Core.Remove, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 784, 198, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Add, form_images_local.Core.Add, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.mosquery.IComponent ccSupervisingSurgeon()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSupervisingSurgeonValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSupervisingSurgeonVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSupervisingSurgeonVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSupervisingSurgeonEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSupervisingSurgeonEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccOperatingSurgeon()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccOperatingSurgeonValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccOperatingSurgeonVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccOperatingSurgeonVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccOperatingSurgeonEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccOperatingSurgeonEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccAnaestheticPractitioner()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccAnaestheticPractitionerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccAnaestheticPractitionerVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccAnaestheticPractitionerVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccAnaestheticPractitionerEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccAnaestheticPractitionerEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccSupervisingAn()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
			}
			public void setccSupervisingAnValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
			}
			public void setccSupervisingAnVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setVisible(value);
			}
			public boolean isccSupervisingAnVisible()
			{
				return ((ims.framework.Control)super.getControl(3)).isVisible();
			}
			public void setccSupervisingAnEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setEnabled(value);
			}
			public boolean isccSupervisingAnEnabled()
			{
				return ((ims.framework.Control)super.getControl(3)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccAssistingAn()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
			}
			public void setccAssistingAnValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
			}
			public void setccAssistingAnVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setVisible(value);
			}
			public boolean isccAssistingAnVisible()
			{
				return ((ims.framework.Control)super.getControl(4)).isVisible();
			}
			public void setccAssistingAnEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setEnabled(value);
			}
			public boolean isccAssistingAnEnabled()
			{
				return ((ims.framework.Control)super.getControl(4)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccAnaethetist()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(5)).getLogic();
			}
			public void setccAnaethetistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(5)).setValueChangedEvent(delegate);
			}
			public void setccAnaethetistVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(5)).setVisible(value);
			}
			public boolean isccAnaethetistVisible()
			{
				return ((ims.framework.Control)super.getControl(5)).isVisible();
			}
			public void setccAnaethetistEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(5)).setEnabled(value);
			}
			public boolean isccAnaethetistEnabled()
			{
				return ((ims.framework.Control)super.getControl(5)).isEnabled();
			}
			public Label lblTimeOutOfRecovery()
			{
				return (Label)super.getControl(17);
			}
			public Label lblTimeOutCompleted()
			{
				return (Label)super.getControl(18);
			}
			public Label lblPatientLeftTheatre()
			{
				return (Label)super.getControl(19);
			}
			public Label lblReadyForDischarge()
			{
				return (Label)super.getControl(20);
			}
			public Label lblSurgeryStop()
			{
				return (Label)super.getControl(21);
			}
			public Label lblSurgeryStart()
			{
				return (Label)super.getControl(22);
			}
			public Label lblAnaesRFS()
			{
				return (Label)super.getControl(23);
			}
			public Label lblAnaesSignInTime()
			{
				return (Label)super.getControl(24);
			}
			public Label lblArrivedTime()
			{
				return (Label)super.getControl(25);
			}
			public Label lblSentForTime()
			{
				return (Label)super.getControl(26);
			}
			public Label lblSafetyBriefTime()
			{
				return (Label)super.getControl(27);
			}
			public Label lblCaseProc()
			{
				return (Label)super.getControl(29);
			}
			public Label lblCaseProcValue()
			{
				return (Label)super.getControl(30);
			}
			public Label lblAddCaseProcValue()
			{
				return (Label)super.getControl(31);
			}
			public Label lblAddCaseProc()
			{
				return (Label)super.getControl(32);
			}
			public Button btnRemoveTimes()
			{
				return (Button)super.getControl(33);
			}
			public Button btnTimeOutOfRecovery()
			{
				return (Button)super.getControl(34);
			}
			public Button btnSurgeryStop()
			{
				return (Button)super.getControl(35);
			}
			public Button btnReadyForDischarge()
			{
				return (Button)super.getControl(36);
			}
			public Button btnPatientLeftTheatre()
			{
				return (Button)super.getControl(37);
			}
			public Button btnTimeOutCompleted()
			{
				return (Button)super.getControl(38);
			}
			public Button btnSurgeryStart()
			{
				return (Button)super.getControl(39);
			}
			public Button btnAnaesRFS()
			{
				return (Button)super.getControl(40);
			}
			public Button btnAnaesSignIn()
			{
				return (Button)super.getControl(41);
			}
			public Button btnPatientArrived()
			{
				return (Button)super.getControl(42);
			}
			public Button btnSentFor()
			{
				return (Button)super.getControl(43);
			}
			public Button btnSafetyBrief()
			{
				return (Button)super.getControl(44);
			}
			public Button btnEditCase()
			{
				return (Button)super.getControl(45);
			}
			public Button btnSaveCase()
			{
				return (Button)super.getControl(46);
			}
			public Button btnCancelCase()
			{
				return (Button)super.getControl(47);
			}
			public Button btnChartableOccurrences()
			{
				return (Button)super.getControl(48);
			}
			public TextBox txtOther()
			{
				return (TextBox)super.getControl(49);
			}
			public cmbCaseServiceComboBox cmbCaseService()
			{
				return (cmbCaseServiceComboBox)super.getComboBox(0);
			}
			public qmbScrubPractitioner2ComboBox qmbScrubPractitioner2()
			{
				return (qmbScrubPractitioner2ComboBox)super.getComboBox(1);
			}
			public qmbScrubPractitioner1ComboBox qmbScrubPractitioner1()
			{
				return (qmbScrubPractitioner1ComboBox)super.getComboBox(2);
			}
			public CheckBox chkDisplayRecovery()
			{
				return (CheckBox)super.getControl(53);
			}
			public CheckBox chkDisplayTourniquet()
			{
				return (CheckBox)super.getControl(54);
			}
			public CheckBox chkDisplayImplants()
			{
				return (CheckBox)super.getControl(55);
			}
			public CheckBox chkDisplaySpecimen()
			{
				return (CheckBox)super.getControl(56);
			}
			public CheckBox chkDisplayIrrigation()
			{
				return (CheckBox)super.getControl(57);
			}
			public CheckBox chkDisplayDiathermy()
			{
				return (CheckBox)super.getControl(58);
			}
			public grdScrubNursesGrid grdScrubNurses()
			{
				return (grdScrubNursesGrid)super.getGrid(0);
			}
			public grdAssistingSurgeonsGrid grdAssistingSurgeons()
			{
				return (grdAssistingSurgeonsGrid)super.getGrid(1);
			}
			public ImageButton imbRemoveScrubNurse()
			{
				return (ImageButton)super.getControl(61);
			}
			public ImageButton imbAddScrubNurse()
			{
				return (ImageButton)super.getControl(62);
			}
			public ImageButton imbRemoveAssistingSurgeon()
			{
				return (ImageButton)super.getControl(63);
			}
			public ImageButton imbAddAssistingSurgeon()
			{
				return (ImageButton)super.getControl(64);
			}
		}
		public static class tabPlannedProceduresContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbLateralityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRB getValue()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRB value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbPlannedProcedureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureLiteVo getValue()
				{
					return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdPlannedProceduresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPlannedProceduresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolProcedureReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolProcedureOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolProcedure()
				{
					return (String)super.row.get(0);
				}
				public void setcolProcedure(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolProcedureTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolLateralityReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolLateralityReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolLateralityOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolLaterality()
				{
					return (String)super.row.get(1);
				}
				public void setcolLaterality(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolLateralityTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolProcedureCommentReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolProcedureCommentReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolProcedureCommentOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolProcedureComment()
				{
					return (String)super.row.get(2);
				}
				public void setcolProcedureComment(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolProcedureCommentTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolPrimaryReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolPrimaryReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolPrimaryOpened()
				{
					super.row.showOpened(3);
				}
				public boolean getcolPrimary()
				{
					return ((Boolean)super.row.get(3)).booleanValue();
				}
				public void setcolPrimary(boolean value)
				{
					super.row.set(3, new Boolean(value));
				}
				public void setCellcolPrimaryTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.clinical.vo.IntraOpPlannedProcedureVo getValue()
				{
					return (ims.clinical.vo.IntraOpPlannedProcedureVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.IntraOpPlannedProcedureVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPlannedProceduresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPlannedProceduresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPlannedProceduresRow get(int index)
				{
					return new grdPlannedProceduresRow(super.collection.get(index));
				}
				public grdPlannedProceduresRow newRow()
				{
					return new grdPlannedProceduresRow(super.collection.newRow());
				}
				public grdPlannedProceduresRow newRow(boolean autoSelect)
				{
					return new grdPlannedProceduresRow(super.collection.newRow(autoSelect));
				}
				public grdPlannedProceduresRow newRowAt(int index)
				{
					return new grdPlannedProceduresRow(super.collection.newRowAt(index));
				}
				public grdPlannedProceduresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPlannedProceduresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPlannedProceduresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.clinical.vo.IntraOpPlannedProcedureVoCollection getValues()
				{
					ims.clinical.vo.IntraOpPlannedProcedureVoCollection listOfValues = new ims.clinical.vo.IntraOpPlannedProcedureVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.IntraOpPlannedProcedureVo getValue()
				{
					return (ims.clinical.vo.IntraOpPlannedProcedureVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.IntraOpPlannedProcedureVo value)
				{
					super.grid.setValue(value);
				}
				public grdPlannedProceduresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPlannedProceduresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPlannedProceduresRowCollection getRows()
				{
					return new grdPlannedProceduresRowCollection(super.grid.getRows());
				}
				public grdPlannedProceduresRow getRowByValue(ims.clinical.vo.IntraOpPlannedProcedureVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPlannedProceduresRow(row);
				}
				public void setcolProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolLateralityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolLateralityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolProcedureCommentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolProcedureCommentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolPrimaryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolPrimaryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 24, 266, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 24, 328, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Comment:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 24, 298, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 8, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 664, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 744, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 144, 328, 536, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 144, 296, 536, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLateralityTemp);
				cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
				super.addComboBox(cmbLaterality);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 144, 264, 536, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbPlannedProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbPlannedProcedureTemp);
				qmbPlannedProcedureComboBox qmbPlannedProcedure = (qmbPlannedProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbPlannedProcedureComboBox.class, m_qmbPlannedProcedureTemp);
				super.addComboBox(qmbPlannedProcedure);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 784, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdPlannedProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPlannedProceduresTemp);
				grdPlannedProceduresGrid grdPlannedProcedures = (grdPlannedProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPlannedProceduresGrid.class, m_grdPlannedProceduresTemp);
				grdPlannedProcedures.addStringColumn("Procedure", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPlannedProcedures.addStringColumn("Laterality", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPlannedProcedures.addStringColumn("Procedure Comment", 0, 0, 260, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPlannedProcedures.addBoolColumn("Primary Procedure", 1, 1, -1, false, true, 0, true);
				super.addGrid(grdPlannedProcedures);
			}

			public Label lblPlannedLaterality()
			{
				return (Label)super.getControl(2);
			}
			public Button btnNewPlanned()
			{
				return (Button)super.getControl(3);
			}
			public Button btnSavePlanned()
			{
				return (Button)super.getControl(4);
			}
			public Button btnCancelPlanned()
			{
				return (Button)super.getControl(5);
			}
			public TextBox txtProcedureComment()
			{
				return (TextBox)super.getControl(6);
			}
			public cmbLateralityComboBox cmbLaterality()
			{
				return (cmbLateralityComboBox)super.getComboBox(0);
			}
			public qmbPlannedProcedureComboBox qmbPlannedProcedure()
			{
				return (qmbPlannedProcedureComboBox)super.getComboBox(1);
			}
			public grdPlannedProceduresGrid grdPlannedProcedures()
			{
				return (grdPlannedProceduresGrid)super.getGrid(0);
			}
		}
		public static class tabAnaestheticDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbStatusReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatientAssessmentStatusReason getValue()
				{
					return (ims.core.vo.lookups.PatientAssessmentStatusReason)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatientAssessmentStatusReason getValue()
				{
					return (ims.core.vo.lookups.PatientAssessmentStatusReason)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 528, 504, 304, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ims.framework.FormUiLogic m_ccCompletedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 7000, anchoringHelper76.getSize(), instance1, startTabIndex.intValue() + 59, skipContextValidation);
				//ims.framework.Control m_ccCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(528), new Integer(504), new Integer(304), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 59), m_ccCompletedForm, instance1 } );
				ims.framework.Control m_ccCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1082),  new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 59), m_ccCompletedForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccCompletedControl);
				Menu[] menus1 = m_ccCompletedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 0, 504, 304, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_ccAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 8000, anchoringHelper77.getSize(), instance2, startTabIndex.intValue() + 54, skipContextValidation);
				//ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(0), new Integer(504), new Integer(304), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 54), m_ccAuthoringForm, instance2 } );
				ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1084),  new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 54), m_ccAuthoringForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccAuthoringControl);
				Menu[] menus2 = m_ccAuthoringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 488, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccAssessmentForm = loader.loadComponent(127109, appForm, startControlID * 10 + 9000, anchoringHelper78.getSize(), instance3, startTabIndex.intValue() + 52, skipContextValidation);
				//ims.framework.Control m_ccAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(8), new Integer(8), new Integer(808), new Integer(488), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 52), m_ccAssessmentForm, instance3 } );
				ims.framework.Control m_ccAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1086),  new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 52), m_ccAssessmentForm, instance3, Boolean.FALSE } );
				super.addControl(m_ccAssessmentControl);
				Menu[] menus3 = m_ccAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 316, 532, 49, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Status\nReason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 316, 514, 45, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 664, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 64), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 744, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 8, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 365, 536, 144, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbStatusReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbStatusReasonTemp);
				cmbStatusReasonComboBox cmbStatusReason = (cmbStatusReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusReasonComboBox.class, m_cmbStatusReasonTemp);
				super.addComboBox(cmbStatusReason);
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 365, 512, 144, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbStatusTemp);
				cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
				super.addComboBox(cmbStatus);
			}

			public ims.core.forms.authoringinfo.IComponent ccCompleted()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccCompletedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccCompletedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccCompletedVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccCompletedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccCompletedEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent ccAuthoring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccAuthoringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccAuthoringVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccAuthoringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccAuthoringEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public ims.assessment.forms.structuralassessment.IComponent ccAssessment()
			{
				return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public Button btnSaveAssessment()
			{
				return (Button)super.getControl(5);
			}
			public Button btnCancelEditAssessment()
			{
				return (Button)super.getControl(6);
			}
			public Button btnEditAssessment()
			{
				return (Button)super.getControl(7);
			}
			public cmbStatusReasonComboBox cmbStatusReason()
			{
				return (cmbStatusReasonComboBox)super.getComboBox(0);
			}
			public cmbStatusComboBox cmbStatus()
			{
				return (cmbStatusComboBox)super.getComboBox(1);
			}
		}
		public static class tabPreparationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class chklistPatPreparationCheckedListBox extends CheckedListBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.PatientPreparationIntraOp value, boolean checked, boolean enabled)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, enabled));
				}
				public void newRow(ims.clinical.vo.lookups.PatientPreparationIntraOp value)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor()));
				}
				public void newRow(ims.clinical.vo.lookups.PatientPreparationIntraOp value, boolean checked)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, true));
				}
				public ims.clinical.vo.lookups.PatientPreparationIntraOpCollection getValues()
				{
					ListItemCollection checkedItems = super.control.getCheckedItems();
					if(checkedItems.size() == 0)
						return null;
					ims.clinical.vo.lookups.PatientPreparationIntraOpCollection items = new ims.clinical.vo.lookups.PatientPreparationIntraOpCollection();
					for(int x = 0; x < checkedItems.size(); x++)
					{
						items.add((ims.clinical.vo.lookups.PatientPreparationIntraOp)checkedItems.get(x).getValue());
					}
					return items;
				}
				public void setValues(ims.clinical.vo.lookups.PatientPreparationIntraOpCollection values)
				{
					if(values == null)
						super.control.setCheckedItems(null);
					else
					{
						ListItemCollection checkedItems = new ListItemCollection();
						for(int x = 0; x < values.size(); x++)
						{
							ListItem item = new ListItem();
							item.setValue(values.get(x));
							checkedItems.add(item);
						}
						super.control.setCheckedItems(checkedItems);
					}
				}
			}
			public static class cmbSurgicalPrepSiteSolutionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRightLegPositionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.LeftRightLegPositionIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLeftLegPositionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.LeftRightLegPositionIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRightArmPositionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.LeftRightArmPositionIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLeftArmPositionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.LeftRightArmPositionIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbBodyPositionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.BodyPositionIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.BodyPositionIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.BodyPositionIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.BodyPositionIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.BodyPositionIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.BodyPositionIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.BodyPositionIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.BodyPositionIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPatTransFromOperatingComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPatTransToOperatingComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp getValue()
				{
					return (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbPrepPerformedByComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdSkinPreparationRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSkinPreparationRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColPrepSolutionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColPrepSolutionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColPrepSolutionOpened()
				{
					super.row.showOpened(0);
				}
				public String getColPrepSolution()
				{
					return (String)super.row.get(0);
				}
				public void setColPrepSolution(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColPrepSolutionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColPrepSiteReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColPrepSiteReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColPrepSiteOpened()
				{
					super.row.showOpened(1);
				}
				public String getColPrepSite()
				{
					return (String)super.row.get(1);
				}
				public void setColPrepSite(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColPrepSiteTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPrepPerformedByReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPrepPerformedByReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPrepPerformedByOpened()
				{
					super.row.showOpened(2);
				}
				public String getColPrepPerformedBy()
				{
					return (String)super.row.get(2);
				}
				public void setColPrepPerformedBy(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColPrepPerformedByTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.clinical.vo.SkinPreparationIntraOpVo getValue()
				{
					return (ims.clinical.vo.SkinPreparationIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.SkinPreparationIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSkinPreparationRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSkinPreparationRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSkinPreparationRow get(int index)
				{
					return new grdSkinPreparationRow(super.collection.get(index));
				}
				public grdSkinPreparationRow newRow()
				{
					return new grdSkinPreparationRow(super.collection.newRow());
				}
				public grdSkinPreparationRow newRow(boolean autoSelect)
				{
					return new grdSkinPreparationRow(super.collection.newRow(autoSelect));
				}
				public grdSkinPreparationRow newRowAt(int index)
				{
					return new grdSkinPreparationRow(super.collection.newRowAt(index));
				}
				public grdSkinPreparationRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSkinPreparationRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSkinPreparationGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.SkinPreparationIntraOpVoCollection getValues()
				{
					ims.clinical.vo.SkinPreparationIntraOpVoCollection listOfValues = new ims.clinical.vo.SkinPreparationIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.SkinPreparationIntraOpVo getValue()
				{
					return (ims.clinical.vo.SkinPreparationIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.SkinPreparationIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdSkinPreparationRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSkinPreparationRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSkinPreparationRowCollection getRows()
				{
					return new grdSkinPreparationRowCollection(super.grid.getRows());
				}
				public grdSkinPreparationRow getRowByValue(ims.clinical.vo.SkinPreparationIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSkinPreparationRow(row);
				}
				public void setColPrepSolutionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColPrepSolutionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColPrepSiteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColPrepSiteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPrepPerformedByHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPrepPerformedByHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdPositioningDevicesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPositioningDevicesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColAssistingSurgeonReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColAssistingSurgeonReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColAssistingSurgeonOpened()
				{
					super.row.showOpened(0);
				}
				public ims.clinical.vo.lookups.PositioningDevicesIntraOp getColAssistingSurgeon()
				{
					return (ims.clinical.vo.lookups.PositioningDevicesIntraOp)super.row.get(0);
				}
				public void setColAssistingSurgeon(ims.clinical.vo.lookups.PositioningDevicesIntraOp value)
				{
					super.row.set(0, value, true);
				}
				public void setCellColAssistingSurgeonTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPositioningDevicesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPositioningDevicesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPositioningDevicesRow get(int index)
				{
					return new grdPositioningDevicesRow(super.collection.get(index));
				}
				public grdPositioningDevicesRow newRow()
				{
					return new grdPositioningDevicesRow(super.collection.newRow());
				}
				public grdPositioningDevicesRow newRow(boolean autoSelect)
				{
					return new grdPositioningDevicesRow(super.collection.newRow(autoSelect));
				}
				public grdPositioningDevicesRow newRowAt(int index)
				{
					return new grdPositioningDevicesRow(super.collection.newRowAt(index));
				}
				public grdPositioningDevicesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPositioningDevicesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPositioningDevicesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdPositioningDevicesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPositioningDevicesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPositioningDevicesRowCollection getRows()
				{
					return new grdPositioningDevicesRowCollection(super.grid.getRows());
				}
				public grdPositioningDevicesRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPositioningDevicesRow(row);
				}
				public void setColAssistingSurgeonHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColAssistingSurgeonHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox ColAssistingSurgeonComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
			}
		
			public static class WarmingBlanketRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 640, 320, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper86.getX(), anchoringHelper86.getY(), anchoringHelper86.getWidth(), "No", startTabIndex.intValue() + 84);
					RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 568, 320, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper87.getX(), anchoringHelper87.getY(), anchoringHelper87.getWidth(), "Yes", startTabIndex.intValue() + 83);
				}
				public void setText(WarmingBlanketEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public WarmingBlanketEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return WarmingBlanketEnumeration.None;
						case 0: return WarmingBlanketEnumeration.rdoWarmingBlanketNo;
						case 1: return WarmingBlanketEnumeration.rdoWarmingBlanketYes;
					}
					return null;
				}
				public void setValue(WarmingBlanketEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(WarmingBlanketEnumeration.None.id);
				}
				public boolean isEnabled(WarmingBlanketEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(WarmingBlanketEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(WarmingBlanketEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(WarmingBlanketEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class WarmingBlanketEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static WarmingBlanketEnumeration None = new WarmingBlanketEnumeration(-1);
				public static WarmingBlanketEnumeration rdoWarmingBlanketNo = new WarmingBlanketEnumeration(0);
				public static WarmingBlanketEnumeration rdoWarmingBlanketYes = new WarmingBlanketEnumeration(1);
				private WarmingBlanketEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((WarmingBlanketEnumeration)o).id;
				}
				private int id;
			}
		
			public static class FluidWarmerRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 640, 304, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper88.getX(), anchoringHelper88.getY(), anchoringHelper88.getWidth(), "No", startTabIndex.intValue() + 82);
					RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 568, 304, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper89.getX(), anchoringHelper89.getY(), anchoringHelper89.getWidth(), "Yes", startTabIndex.intValue() + 81);
				}
				public void setText(FluidWarmerEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public FluidWarmerEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return FluidWarmerEnumeration.None;
						case 0: return FluidWarmerEnumeration.rdoFluidWarmerNo;
						case 1: return FluidWarmerEnumeration.rdoFluidWarmerYes;
					}
					return null;
				}
				public void setValue(FluidWarmerEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(FluidWarmerEnumeration.None.id);
				}
				public boolean isEnabled(FluidWarmerEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(FluidWarmerEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(FluidWarmerEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(FluidWarmerEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class FluidWarmerEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static FluidWarmerEnumeration None = new FluidWarmerEnumeration(-1);
				public static FluidWarmerEnumeration rdoFluidWarmerNo = new FluidWarmerEnumeration(0);
				public static FluidWarmerEnumeration rdoFluidWarmerYes = new FluidWarmerEnumeration(1);
				private FluidWarmerEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((FluidWarmerEnumeration)o).id;
				}
				private int id;
			}
		
			public static class PatientWarmedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 640, 288, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper90.getX(), anchoringHelper90.getY(), anchoringHelper90.getWidth(), "No", startTabIndex.intValue() + 80);
					RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 568, 288, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper91.getX(), anchoringHelper91.getY(), anchoringHelper91.getWidth(), "Yes", startTabIndex.intValue() + 79);
				}
				public void setText(PatientWarmedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public PatientWarmedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return PatientWarmedEnumeration.None;
						case 0: return PatientWarmedEnumeration.rdoPatWarmedNo;
						case 1: return PatientWarmedEnumeration.rdoPatWarmedYes;
					}
					return null;
				}
				public void setValue(PatientWarmedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(PatientWarmedEnumeration.None.id);
				}
				public boolean isEnabled(PatientWarmedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(PatientWarmedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(PatientWarmedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(PatientWarmedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class PatientWarmedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static PatientWarmedEnumeration None = new PatientWarmedEnumeration(-1);
				public static PatientWarmedEnumeration rdoPatWarmedNo = new PatientWarmedEnumeration(0);
				public static PatientWarmedEnumeration rdoPatWarmedYes = new PatientWarmedEnumeration(1);
				private PatientWarmedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((PatientWarmedEnumeration)o).id;
				}
				private int id;
			}
		
			public static class SkinIntegrityRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 224, 240, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper92.getX(), anchoringHelper92.getY(), anchoringHelper92.getWidth(), "No", startTabIndex.intValue() + 68);
					RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 152, 240, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper93.getX(), anchoringHelper93.getY(), anchoringHelper93.getWidth(), "Yes", startTabIndex.intValue() + 67);
				}
				public void setText(SkinIntegrityEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public SkinIntegrityEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return SkinIntegrityEnumeration.None;
						case 0: return SkinIntegrityEnumeration.rdoSkinIntegrityNo;
						case 1: return SkinIntegrityEnumeration.rdoSkinIntegrityYes;
					}
					return null;
				}
				public void setValue(SkinIntegrityEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(SkinIntegrityEnumeration.None.id);
				}
				public boolean isEnabled(SkinIntegrityEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(SkinIntegrityEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(SkinIntegrityEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(SkinIntegrityEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class SkinIntegrityEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static SkinIntegrityEnumeration None = new SkinIntegrityEnumeration(-1);
				public static SkinIntegrityEnumeration rdoSkinIntegrityNo = new SkinIntegrityEnumeration(0);
				public static SkinIntegrityEnumeration rdoSkinIntegrityYes = new SkinIntegrityEnumeration(1);
				private SkinIntegrityEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((SkinIntegrityEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 8, 344, 808, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Skin Preparation", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 456, 336, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Positioning Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 24, 505, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Prep Performed By:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 24, 480, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Prep Site:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 24, 456, 140, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgical Site Prep Solution:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 696, 304, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 368, 320, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Warming blanket used?", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 368, 304, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fluid warmer used?", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 368, 158, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Right Leg Position:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 368, 136, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Left Leg Position:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 368, 114, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Right Arm Position:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 368, 92, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Left Arm Position:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 368, 70, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Body Position:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 368, 48, 194, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pat. transfer from operating table via:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 368, 26, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pat. transfer to operating table via:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 368, 288, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Was the patient warmed?", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Skin Integrity Maintained?", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 8, 168, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other Details:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Preparation:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 280, 240, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 7, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 93), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 663, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 94), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 743, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), new Integer(startTabIndex.intValue() + 95), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 16, 528, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 88), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add Skin Prep", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 128, 528, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), new Integer(startTabIndex.intValue() + 89), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Skin Prep", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 592, 528, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), new Integer(startTabIndex.intValue() + 90), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Skin Prep", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 704, 528, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), new Integer(startTabIndex.intValue() + 92), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Skin Prep", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 240, 528, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), new Integer(startTabIndex.intValue() + 91), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Remove Skin Prep", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 176, 480, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), new Integer(startTabIndex.intValue() + 87), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 120, 168, 232, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1123), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), new Integer(startTabIndex.intValue() + 66), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper124 = new RuntimeAnchoring(designSize, runtimeSize, 176, 456, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSurgicalPrepSiteSolutionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1124), new Integer(anchoringHelper124.getX()), new Integer(anchoringHelper124.getY()), new Integer(anchoringHelper124.getWidth()), new Integer(anchoringHelper124.getHeight()), new Integer(startTabIndex.intValue() + 86), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbSurgicalPrepSiteSolutionTemp);
				cmbSurgicalPrepSiteSolutionComboBox cmbSurgicalPrepSiteSolution = (cmbSurgicalPrepSiteSolutionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSurgicalPrepSiteSolutionComboBox.class, m_cmbSurgicalPrepSiteSolutionTemp);
				super.addComboBox(cmbSurgicalPrepSiteSolution);
				RuntimeAnchoring anchoringHelper125 = new RuntimeAnchoring(designSize, runtimeSize, 568, 156, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbRightLegPositionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1125), new Integer(anchoringHelper125.getX()), new Integer(anchoringHelper125.getY()), new Integer(anchoringHelper125.getWidth()), new Integer(anchoringHelper125.getHeight()), new Integer(startTabIndex.intValue() + 75), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRightLegPositionTemp);
				cmbRightLegPositionComboBox cmbRightLegPosition = (cmbRightLegPositionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRightLegPositionComboBox.class, m_cmbRightLegPositionTemp);
				super.addComboBox(cmbRightLegPosition);
				RuntimeAnchoring anchoringHelper126 = new RuntimeAnchoring(designSize, runtimeSize, 568, 134, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLeftLegPositionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1126), new Integer(anchoringHelper126.getX()), new Integer(anchoringHelper126.getY()), new Integer(anchoringHelper126.getWidth()), new Integer(anchoringHelper126.getHeight()), new Integer(startTabIndex.intValue() + 74), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLeftLegPositionTemp);
				cmbLeftLegPositionComboBox cmbLeftLegPosition = (cmbLeftLegPositionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLeftLegPositionComboBox.class, m_cmbLeftLegPositionTemp);
				super.addComboBox(cmbLeftLegPosition);
				RuntimeAnchoring anchoringHelper127 = new RuntimeAnchoring(designSize, runtimeSize, 568, 112, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbRightArmPositionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1127), new Integer(anchoringHelper127.getX()), new Integer(anchoringHelper127.getY()), new Integer(anchoringHelper127.getWidth()), new Integer(anchoringHelper127.getHeight()), new Integer(startTabIndex.intValue() + 73), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRightArmPositionTemp);
				cmbRightArmPositionComboBox cmbRightArmPosition = (cmbRightArmPositionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRightArmPositionComboBox.class, m_cmbRightArmPositionTemp);
				super.addComboBox(cmbRightArmPosition);
				RuntimeAnchoring anchoringHelper128 = new RuntimeAnchoring(designSize, runtimeSize, 568, 90, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLeftArmPositionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1128), new Integer(anchoringHelper128.getX()), new Integer(anchoringHelper128.getY()), new Integer(anchoringHelper128.getWidth()), new Integer(anchoringHelper128.getHeight()), new Integer(startTabIndex.intValue() + 72), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLeftArmPositionTemp);
				cmbLeftArmPositionComboBox cmbLeftArmPosition = (cmbLeftArmPositionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLeftArmPositionComboBox.class, m_cmbLeftArmPositionTemp);
				super.addComboBox(cmbLeftArmPosition);
				RuntimeAnchoring anchoringHelper129 = new RuntimeAnchoring(designSize, runtimeSize, 568, 68, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbBodyPositionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1129), new Integer(anchoringHelper129.getX()), new Integer(anchoringHelper129.getY()), new Integer(anchoringHelper129.getWidth()), new Integer(anchoringHelper129.getHeight()), new Integer(startTabIndex.intValue() + 71), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbBodyPositionTemp);
				cmbBodyPositionComboBox cmbBodyPosition = (cmbBodyPositionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBodyPositionComboBox.class, m_cmbBodyPositionTemp);
				super.addComboBox(cmbBodyPosition);
				RuntimeAnchoring anchoringHelper130 = new RuntimeAnchoring(designSize, runtimeSize, 568, 46, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPatTransFromOperatingTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1130), new Integer(anchoringHelper130.getX()), new Integer(anchoringHelper130.getY()), new Integer(anchoringHelper130.getWidth()), new Integer(anchoringHelper130.getHeight()), new Integer(startTabIndex.intValue() + 70), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatTransFromOperatingTemp);
				cmbPatTransFromOperatingComboBox cmbPatTransFromOperating = (cmbPatTransFromOperatingComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatTransFromOperatingComboBox.class, m_cmbPatTransFromOperatingTemp);
				super.addComboBox(cmbPatTransFromOperating);
				RuntimeAnchoring anchoringHelper131 = new RuntimeAnchoring(designSize, runtimeSize, 568, 24, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPatTransToOperatingTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1131), new Integer(anchoringHelper131.getX()), new Integer(anchoringHelper131.getY()), new Integer(anchoringHelper131.getWidth()), new Integer(anchoringHelper131.getHeight()), new Integer(startTabIndex.intValue() + 69), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatTransToOperatingTemp);
				cmbPatTransToOperatingComboBox cmbPatTransToOperating = (cmbPatTransToOperatingComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatTransToOperatingComboBox.class, m_cmbPatTransToOperatingTemp);
				super.addComboBox(cmbPatTransToOperating);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper132 = new RuntimeAnchoring(designSize, runtimeSize, 176, 503, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbPrepPerformedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1132), new Integer(anchoringHelper132.getX()), new Integer(anchoringHelper132.getY()), new Integer(anchoringHelper132.getWidth()), new Integer(anchoringHelper132.getHeight()), new Integer(startTabIndex.intValue() + 105), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbPrepPerformedByTemp);
				qmbPrepPerformedByComboBox qmbPrepPerformedBy = (qmbPrepPerformedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbPrepPerformedByComboBox.class, m_qmbPrepPerformedByTemp);
				super.addComboBox(qmbPrepPerformedBy);
		
				// CheckedListBox Controls
				RuntimeAnchoring anchoringHelper133 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 232, 84, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				CheckedListBox m_chklistPatPreparationTemp = (CheckedListBox)factory.getControl(CheckedListBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1133), new Integer(anchoringHelper133.getX()), new Integer(anchoringHelper133.getY()), new Integer(anchoringHelper133.getWidth()), new Integer(anchoringHelper133.getHeight()), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, null, new Integer(startTabIndex.intValue() + 65), Boolean.FALSE, null});
				addControl(m_chklistPatPreparationTemp);
				chklistPatPreparationCheckedListBox chklistPatPreparation = (chklistPatPreparationCheckedListBox)CheckedListBoxFlyweightFactory.getInstance().createCheckedListBoxBridge(chklistPatPreparationCheckedListBox.class, m_chklistPatPreparationTemp);
				super.addCheckedListBox(chklistPatPreparation);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper134 = new RuntimeAnchoring(designSize, runtimeSize, 16, 370, 792, 82, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdSkinPreparationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1134), new Integer(anchoringHelper134.getX()), new Integer(anchoringHelper134.getY()), new Integer(anchoringHelper134.getWidth()), new Integer(anchoringHelper134.getHeight()), new Integer(startTabIndex.intValue() + 85), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSkinPreparationTemp);
				grdSkinPreparationGrid grdSkinPreparation = (grdSkinPreparationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSkinPreparationGrid.class, m_grdSkinPreparationTemp);
				grdSkinPreparation.addStringColumn("Prep Solution", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSkinPreparation.addStringColumn("Prep Site", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSkinPreparation.addStringColumn("Prep Performed By", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSkinPreparation);
				RuntimeAnchoring anchoringHelper135 = new RuntimeAnchoring(designSize, runtimeSize, 368, 184, 384, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdPositioningDevicesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1135), new Integer(anchoringHelper135.getX()), new Integer(anchoringHelper135.getY()), new Integer(anchoringHelper135.getWidth()), new Integer(anchoringHelper135.getHeight()), new Integer(startTabIndex.intValue() + 76), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPositioningDevicesTemp);
				grdPositioningDevicesGrid grdPositioningDevices = (grdPositioningDevicesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPositioningDevicesGrid.class, m_grdPositioningDevicesTemp);
				grdPositioningDevices.addComboBoxColumn("Positioning Devices", 0, 0, -1, false, true, true, false, true, -1);
				super.addGrid(grdPositioningDevices);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper136 = new RuntimeAnchoring(designSize, runtimeSize, 760, 218, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1136), new Integer(anchoringHelper136.getX()), new Integer(anchoringHelper136.getY()), new Integer(anchoringHelper136.getWidth()), new Integer(anchoringHelper136.getHeight()), new Integer(startTabIndex.intValue() + 78), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper137 = new RuntimeAnchoring(designSize, runtimeSize, 760, 184, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1137), new Integer(anchoringHelper137.getX()), new Integer(anchoringHelper137.getY()), new Integer(anchoringHelper137.getWidth()), new Integer(anchoringHelper137.getHeight()), new Integer(startTabIndex.intValue() + 77), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Add, form_images_local.Core.Add, "Add", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpWarmingBlanket = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1138), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpWarmingBlanket);
				WarmingBlanketRadioButton WarmingBlanket = (WarmingBlanketRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(WarmingBlanketRadioButton.class, tmpWarmingBlanket);
				WarmingBlanket.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(WarmingBlanket);
				RadioButton tmpFluidWarmer = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1139), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpFluidWarmer);
				FluidWarmerRadioButton FluidWarmer = (FluidWarmerRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(FluidWarmerRadioButton.class, tmpFluidWarmer);
				FluidWarmer.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(FluidWarmer);
				RadioButton tmpPatientWarmed = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1140), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpPatientWarmed);
				PatientWarmedRadioButton PatientWarmed = (PatientWarmedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(PatientWarmedRadioButton.class, tmpPatientWarmed);
				PatientWarmed.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(PatientWarmed);
				RadioButton tmpSkinIntegrity = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1141), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpSkinIntegrity);
				SkinIntegrityRadioButton SkinIntegrity = (SkinIntegrityRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SkinIntegrityRadioButton.class, tmpSkinIntegrity);
				SkinIntegrity.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(SkinIntegrity);
			}

			public Label lblFluidWarmerRequired()
			{
				return (Label)super.getControl(5);
			}
			public Label lblWarmingBlanket()
			{
				return (Label)super.getControl(6);
			}
			public Label lblFluidWarmer()
			{
				return (Label)super.getControl(7);
			}
			public Label lblSkinIntegrityMaintainedRequired()
			{
				return (Label)super.getControl(19);
			}
			public Button btnEditPreparation()
			{
				return (Button)super.getControl(20);
			}
			public Button btnSavePreparation()
			{
				return (Button)super.getControl(21);
			}
			public Button btnCancelPreparation()
			{
				return (Button)super.getControl(22);
			}
			public Button btnAddSkinPreparation()
			{
				return (Button)super.getControl(23);
			}
			public Button btnEditSkinPrep()
			{
				return (Button)super.getControl(24);
			}
			public Button btnSaveSkinPrep()
			{
				return (Button)super.getControl(25);
			}
			public Button btnCancelSkinPrep()
			{
				return (Button)super.getControl(26);
			}
			public Button btnRemoveSkinPrep()
			{
				return (Button)super.getControl(27);
			}
			public TextBox txtPrepSite()
			{
				return (TextBox)super.getControl(28);
			}
			public TextBox txtOtherDetails()
			{
				return (TextBox)super.getControl(29);
			}
			public cmbSurgicalPrepSiteSolutionComboBox cmbSurgicalPrepSiteSolution()
			{
				return (cmbSurgicalPrepSiteSolutionComboBox)super.getComboBox(0);
			}
			public cmbRightLegPositionComboBox cmbRightLegPosition()
			{
				return (cmbRightLegPositionComboBox)super.getComboBox(1);
			}
			public cmbLeftLegPositionComboBox cmbLeftLegPosition()
			{
				return (cmbLeftLegPositionComboBox)super.getComboBox(2);
			}
			public cmbRightArmPositionComboBox cmbRightArmPosition()
			{
				return (cmbRightArmPositionComboBox)super.getComboBox(3);
			}
			public cmbLeftArmPositionComboBox cmbLeftArmPosition()
			{
				return (cmbLeftArmPositionComboBox)super.getComboBox(4);
			}
			public cmbBodyPositionComboBox cmbBodyPosition()
			{
				return (cmbBodyPositionComboBox)super.getComboBox(5);
			}
			public cmbPatTransFromOperatingComboBox cmbPatTransFromOperating()
			{
				return (cmbPatTransFromOperatingComboBox)super.getComboBox(6);
			}
			public cmbPatTransToOperatingComboBox cmbPatTransToOperating()
			{
				return (cmbPatTransToOperatingComboBox)super.getComboBox(7);
			}
			public qmbPrepPerformedByComboBox qmbPrepPerformedBy()
			{
				return (qmbPrepPerformedByComboBox)super.getComboBox(8);
			}
			public chklistPatPreparationCheckedListBox chklistPatPreparation()
			{
				return (chklistPatPreparationCheckedListBox)super.getCheckedListBox(0);
			}
			public grdSkinPreparationGrid grdSkinPreparation()
			{
				return (grdSkinPreparationGrid)super.getGrid(0);
			}
			public grdPositioningDevicesGrid grdPositioningDevices()
			{
				return (grdPositioningDevicesGrid)super.getGrid(1);
			}
			public ImageButton imbRemovePositioning()
			{
				return (ImageButton)super.getControl(42);
			}
			public ImageButton imbAddPositioning()
			{
				return (ImageButton)super.getControl(43);
			}
			public WarmingBlanketRadioButton WarmingBlanket()
			{
				return (WarmingBlanketRadioButton)super.getRadioButton(0);
			}
			public FluidWarmerRadioButton FluidWarmer()
			{
				return (FluidWarmerRadioButton)super.getRadioButton(1);
			}
			public PatientWarmedRadioButton PatientWarmed()
			{
				return (PatientWarmedRadioButton)super.getRadioButton(2);
			}
			public SkinIntegrityRadioButton SkinIntegrity()
			{
				return (SkinIntegrityRadioButton)super.getRadioButton(3);
			}
		}
		public static class tabDiathermyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class chklistpatientSafetyMeasuresCheckedListBox extends CheckedListBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LaserPatientSafetyMeasures value, boolean checked, boolean enabled)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, enabled));
				}
				public void newRow(ims.core.vo.lookups.LaserPatientSafetyMeasures value)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor()));
				}
				public void newRow(ims.core.vo.lookups.LaserPatientSafetyMeasures value, boolean checked)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, true));
				}
				public ims.core.vo.lookups.LaserPatientSafetyMeasuresCollection getValues()
				{
					ListItemCollection checkedItems = super.control.getCheckedItems();
					if(checkedItems.size() == 0)
						return null;
					ims.core.vo.lookups.LaserPatientSafetyMeasuresCollection items = new ims.core.vo.lookups.LaserPatientSafetyMeasuresCollection();
					for(int x = 0; x < checkedItems.size(); x++)
					{
						items.add((ims.core.vo.lookups.LaserPatientSafetyMeasures)checkedItems.get(x).getValue());
					}
					return items;
				}
				public void setValues(ims.core.vo.lookups.LaserPatientSafetyMeasuresCollection values)
				{
					if(values == null)
						super.control.setCheckedItems(null);
					else
					{
						ListItemCollection checkedItems = new ListItemCollection();
						for(int x = 0; x < values.size(); x++)
						{
							ListItem item = new ListItem();
							item.setValue(values.get(x));
							checkedItems.add(item);
						}
						super.control.setCheckedItems(checkedItems);
					}
				}
			}
			public static class cmbLaserComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LaserMode value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LaserMode value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LaserMode value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LaserMode value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LaserMode value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LaserMode getValue()
				{
					return (ims.core.vo.lookups.LaserMode)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LaserMode value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLaserDeviceSerialNumberComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LaserDeviceSerialNumber value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LaserDeviceSerialNumber value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LaserDeviceSerialNumber value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LaserDeviceSerialNumber value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LaserDeviceSerialNumber value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LaserDeviceSerialNumber getValue()
				{
					return (ims.core.vo.lookups.LaserDeviceSerialNumber)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LaserDeviceSerialNumber value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLaserDeviceNameComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LaserDeviceName value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LaserDeviceName value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LaserDeviceName value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LaserDeviceName value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LaserDeviceName value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LaserDeviceName getValue()
				{
					return (ims.core.vo.lookups.LaserDeviceName)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LaserDeviceName value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDiaPadSiteComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.DiathermyPadSite value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.DiathermyPadSite value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.DiathermyPadSite value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.DiathermyPadSite value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.DiathermyPadSite value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.DiathermyPadSite getValue()
				{
					return (ims.core.vo.lookups.DiathermyPadSite)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.DiathermyPadSite value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDiaSerialNumberComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.DiathermySerialNumber value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.DiathermySerialNumber value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.DiathermySerialNumber value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.DiathermySerialNumber value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.DiathermySerialNumber value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.DiathermySerialNumber getValue()
				{
					return (ims.clinical.vo.lookups.DiathermySerialNumber)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.DiathermySerialNumber value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbLaserOperatorComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbDiaRemovedByComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbDiaAppliedByComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdDiathermyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiathermyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColModeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColModeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColModeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColMode()
				{
					return (String)super.row.get(0);
				}
				public void setColMode(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColModeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColCoagReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColCoagReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColCoagOpened()
				{
					super.row.showOpened(1);
				}
				public String getColCoag()
				{
					return (String)super.row.get(1);
				}
				public void setColCoag(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColCoagTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColCutReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColCutReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColCutOpened()
				{
					super.row.showOpened(2);
				}
				public String getColCut()
				{
					return (String)super.row.get(2);
				}
				public void setColCut(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColCutTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColBlendReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColBlendReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColBlendOpened()
				{
					super.row.showOpened(3);
				}
				public String getColBlend()
				{
					return (String)super.row.get(3);
				}
				public void setColBlend(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColBlendTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSerialNumberReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSerialNumberReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSerialNumberOpened()
				{
					super.row.showOpened(4);
				}
				public String getColSerialNumber()
				{
					return (String)super.row.get(4);
				}
				public void setColSerialNumber(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSerialNumberTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColPadSiteReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColPadSiteReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColPadSiteOpened()
				{
					super.row.showOpened(5);
				}
				public String getColPadSite()
				{
					return (String)super.row.get(5);
				}
				public void setColPadSite(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColPadSiteTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.clinical.vo.DiathermyDetailIntraOpVo getValue()
				{
					return (ims.clinical.vo.DiathermyDetailIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.DiathermyDetailIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiathermyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiathermyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiathermyRow get(int index)
				{
					return new grdDiathermyRow(super.collection.get(index));
				}
				public grdDiathermyRow newRow()
				{
					return new grdDiathermyRow(super.collection.newRow());
				}
				public grdDiathermyRow newRow(boolean autoSelect)
				{
					return new grdDiathermyRow(super.collection.newRow(autoSelect));
				}
				public grdDiathermyRow newRowAt(int index)
				{
					return new grdDiathermyRow(super.collection.newRowAt(index));
				}
				public grdDiathermyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiathermyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiathermyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.DiathermyDetailIntraOpVoCollection getValues()
				{
					ims.clinical.vo.DiathermyDetailIntraOpVoCollection listOfValues = new ims.clinical.vo.DiathermyDetailIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.DiathermyDetailIntraOpVo getValue()
				{
					return (ims.clinical.vo.DiathermyDetailIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.DiathermyDetailIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdDiathermyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiathermyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiathermyRowCollection getRows()
				{
					return new grdDiathermyRowCollection(super.grid.getRows());
				}
				public grdDiathermyRow getRowByValue(ims.clinical.vo.DiathermyDetailIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiathermyRow(row);
				}
				public void setColModeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColModeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColCoagHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColCoagHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColCutHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColCutHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColBlendHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColBlendHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColSerialNumberHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSerialNumberHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColPadSiteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColPadSiteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
		
			public static class DiathermyModeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper138 = new RuntimeAnchoring(designSize, runtimeSize, 224, 172, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper138.getX(), anchoringHelper138.getY(), anchoringHelper138.getWidth(), "Bipolar", startTabIndex.intValue() + 98);
					RuntimeAnchoring anchoringHelper139 = new RuntimeAnchoring(designSize, runtimeSize, 120, 172, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper139.getX(), anchoringHelper139.getY(), anchoringHelper139.getWidth(), "Monopolar", startTabIndex.intValue() + 97);
				}
				public void setText(DiathermyModeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public DiathermyModeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return DiathermyModeEnumeration.None;
						case 0: return DiathermyModeEnumeration.rdoDiaBipolar;
						case 1: return DiathermyModeEnumeration.rdoDiaMonopolar;
					}
					return null;
				}
				public void setValue(DiathermyModeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(DiathermyModeEnumeration.None.id);
				}
				public boolean isEnabled(DiathermyModeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(DiathermyModeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(DiathermyModeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(DiathermyModeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class DiathermyModeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static DiathermyModeEnumeration None = new DiathermyModeEnumeration(-1);
				public static DiathermyModeEnumeration rdoDiaBipolar = new DiathermyModeEnumeration(0);
				public static DiathermyModeEnumeration rdoDiaMonopolar = new DiathermyModeEnumeration(1);
				private DiathermyModeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((DiathermyModeEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper140 = new RuntimeAnchoring(designSize, runtimeSize, 8, 320, 808, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1142), new Integer(anchoringHelper140.getX()), new Integer(anchoringHelper140.getY()), new Integer(anchoringHelper140.getWidth()), new Integer(anchoringHelper140.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Laser Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper141 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 808, 312, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1143), new Integer(anchoringHelper141.getX()), new Integer(anchoringHelper141.getY()), new Integer(anchoringHelper141.getWidth()), new Integer(anchoringHelper141.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Diathermy Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper142 = new RuntimeAnchoring(designSize, runtimeSize, 24, 496, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1144), new Integer(anchoringHelper142.getX()), new Integer(anchoringHelper142.getY()), new Integer(anchoringHelper142.getWidth()), new Integer(anchoringHelper142.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Safety Measures:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper143 = new RuntimeAnchoring(designSize, runtimeSize, 24, 474, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1145), new Integer(anchoringHelper143.getX()), new Integer(anchoringHelper143.getY()), new Integer(anchoringHelper143.getWidth()), new Integer(anchoringHelper143.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laser Operator:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper144 = new RuntimeAnchoring(designSize, runtimeSize, 488, 448, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1146), new Integer(anchoringHelper144.getX()), new Integer(anchoringHelper144.getY()), new Integer(anchoringHelper144.getWidth()), new Integer(anchoringHelper144.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Number of Burns:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper145 = new RuntimeAnchoring(designSize, runtimeSize, 424, 448, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1147), new Integer(anchoringHelper145.getX()), new Integer(anchoringHelper145.getY()), new Integer(anchoringHelper145.getWidth()), new Integer(anchoringHelper145.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "seconds", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper146 = new RuntimeAnchoring(designSize, runtimeSize, 272, 448, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1148), new Integer(anchoringHelper146.getX()), new Integer(anchoringHelper146.getY()), new Integer(anchoringHelper146.getWidth()), new Integer(anchoringHelper146.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Total Duration:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper147 = new RuntimeAnchoring(designSize, runtimeSize, 252, 448, 14, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1149), new Integer(anchoringHelper147.getX()), new Integer(anchoringHelper147.getY()), new Integer(anchoringHelper147.getWidth()), new Integer(anchoringHelper147.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "W", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper148 = new RuntimeAnchoring(designSize, runtimeSize, 24, 448, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1150), new Integer(anchoringHelper148.getX()), new Integer(anchoringHelper148.getY()), new Integer(anchoringHelper148.getWidth()), new Integer(anchoringHelper148.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Power:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper149 = new RuntimeAnchoring(designSize, runtimeSize, 24, 422, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1151), new Integer(anchoringHelper149.getX()), new Integer(anchoringHelper149.getY()), new Integer(anchoringHelper149.getWidth()), new Integer(anchoringHelper149.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laser:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper150 = new RuntimeAnchoring(designSize, runtimeSize, 24, 396, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1152), new Integer(anchoringHelper150.getX()), new Integer(anchoringHelper150.getY()), new Integer(anchoringHelper150.getWidth()), new Integer(anchoringHelper150.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laser Fibre Lot:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper151 = new RuntimeAnchoring(designSize, runtimeSize, 24, 370, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1153), new Integer(anchoringHelper151.getX()), new Integer(anchoringHelper151.getY()), new Integer(anchoringHelper151.getWidth()), new Integer(anchoringHelper151.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Device Serial Number:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper152 = new RuntimeAnchoring(designSize, runtimeSize, 24, 344, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1154), new Integer(anchoringHelper152.getX()), new Integer(anchoringHelper152.getY()), new Integer(anchoringHelper152.getWidth()), new Integer(anchoringHelper152.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Device Name:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper153 = new RuntimeAnchoring(designSize, runtimeSize, 24, 250, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1155), new Integer(anchoringHelper153.getX()), new Integer(anchoringHelper153.getY()), new Integer(anchoringHelper153.getWidth()), new Integer(anchoringHelper153.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Blend Setting:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper154 = new RuntimeAnchoring(designSize, runtimeSize, 24, 198, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1156), new Integer(anchoringHelper154.getX()), new Integer(anchoringHelper154.getY()), new Integer(anchoringHelper154.getWidth()), new Integer(anchoringHelper154.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Coag Setting:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper155 = new RuntimeAnchoring(designSize, runtimeSize, 24, 172, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1157), new Integer(anchoringHelper155.getX()), new Integer(anchoringHelper155.getY()), new Integer(anchoringHelper155.getWidth()), new Integer(anchoringHelper155.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diathermy Mode:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper156 = new RuntimeAnchoring(designSize, runtimeSize, 352, 250, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1158), new Integer(anchoringHelper156.getX()), new Integer(anchoringHelper156.getY()), new Integer(anchoringHelper156.getWidth()), new Integer(anchoringHelper156.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Removed By:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper157 = new RuntimeAnchoring(designSize, runtimeSize, 352, 198, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1159), new Integer(anchoringHelper157.getX()), new Integer(anchoringHelper157.getY()), new Integer(anchoringHelper157.getWidth()), new Integer(anchoringHelper157.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pad Site:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper158 = new RuntimeAnchoring(designSize, runtimeSize, 352, 224, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1160), new Integer(anchoringHelper158.getX()), new Integer(anchoringHelper158.getY()), new Integer(anchoringHelper158.getWidth()), new Integer(anchoringHelper158.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Applied By:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper159 = new RuntimeAnchoring(designSize, runtimeSize, 24, 224, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1161), new Integer(anchoringHelper159.getX()), new Integer(anchoringHelper159.getY()), new Integer(anchoringHelper159.getWidth()), new Integer(anchoringHelper159.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cut Setting:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper160 = new RuntimeAnchoring(designSize, runtimeSize, 352, 172, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1162), new Integer(anchoringHelper160.getX()), new Integer(anchoringHelper160.getY()), new Integer(anchoringHelper160.getWidth()), new Integer(anchoringHelper160.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Serial Number:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper161 = new RuntimeAnchoring(designSize, runtimeSize, 16, 560, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1163), new Integer(anchoringHelper161.getX()), new Integer(anchoringHelper161.getY()), new Integer(anchoringHelper161.getWidth()), new Integer(anchoringHelper161.getHeight()), new Integer(startTabIndex.intValue() + 120), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Laser Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper162 = new RuntimeAnchoring(designSize, runtimeSize, 560, 560, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1164), new Integer(anchoringHelper162.getX()), new Integer(anchoringHelper162.getY()), new Integer(anchoringHelper162.getWidth()), new Integer(anchoringHelper162.getHeight()), new Integer(startTabIndex.intValue() + 121), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Laser Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper163 = new RuntimeAnchoring(designSize, runtimeSize, 688, 560, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1165), new Integer(anchoringHelper163.getX()), new Integer(anchoringHelper163.getY()), new Integer(anchoringHelper163.getWidth()), new Integer(anchoringHelper163.getHeight()), new Integer(startTabIndex.intValue() + 122), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Laser Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper164 = new RuntimeAnchoring(designSize, runtimeSize, 16, 284, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1166), new Integer(anchoringHelper164.getX()), new Integer(anchoringHelper164.getY()), new Integer(anchoringHelper164.getWidth()), new Integer(anchoringHelper164.getHeight()), new Integer(startTabIndex.intValue() + 107), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add Diathermy", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper165 = new RuntimeAnchoring(designSize, runtimeSize, 136, 284, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1167), new Integer(anchoringHelper165.getX()), new Integer(anchoringHelper165.getY()), new Integer(anchoringHelper165.getWidth()), new Integer(anchoringHelper165.getHeight()), new Integer(startTabIndex.intValue() + 108), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Diathermy", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper166 = new RuntimeAnchoring(designSize, runtimeSize, 576, 284, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1168), new Integer(anchoringHelper166.getX()), new Integer(anchoringHelper166.getY()), new Integer(anchoringHelper166.getWidth()), new Integer(anchoringHelper166.getHeight()), new Integer(startTabIndex.intValue() + 109), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Diathermy", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper167 = new RuntimeAnchoring(designSize, runtimeSize, 696, 284, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1169), new Integer(anchoringHelper167.getX()), new Integer(anchoringHelper167.getY()), new Integer(anchoringHelper167.getWidth()), new Integer(anchoringHelper167.getHeight()), new Integer(startTabIndex.intValue() + 110), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Diathermy", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper168 = new RuntimeAnchoring(designSize, runtimeSize, 152, 394, 488, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1170), new Integer(anchoringHelper168.getX()), new Integer(anchoringHelper168.getY()), new Integer(anchoringHelper168.getWidth()), new Integer(anchoringHelper168.getHeight()), new Integer(startTabIndex.intValue() + 113), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(75), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper169 = new RuntimeAnchoring(designSize, runtimeSize, 120, 248, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1171), new Integer(anchoringHelper169.getX()), new Integer(anchoringHelper169.getY()), new Integer(anchoringHelper169.getWidth()), new Integer(anchoringHelper169.getHeight()), new Integer(startTabIndex.intValue() + 101), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper170 = new RuntimeAnchoring(designSize, runtimeSize, 120, 196, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1172), new Integer(anchoringHelper170.getX()), new Integer(anchoringHelper170.getY()), new Integer(anchoringHelper170.getWidth()), new Integer(anchoringHelper170.getHeight()), new Integer(startTabIndex.intValue() + 99), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper171 = new RuntimeAnchoring(designSize, runtimeSize, 120, 222, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1173), new Integer(anchoringHelper171.getX()), new Integer(anchoringHelper171.getY()), new Integer(anchoringHelper171.getWidth()), new Integer(anchoringHelper171.getHeight()), new Integer(startTabIndex.intValue() + 100), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper172 = new RuntimeAnchoring(designSize, runtimeSize, 152, 420, 488, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLaserTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1174), new Integer(anchoringHelper172.getX()), new Integer(anchoringHelper172.getY()), new Integer(anchoringHelper172.getWidth()), new Integer(anchoringHelper172.getHeight()), new Integer(startTabIndex.intValue() + 114), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLaserTemp);
				cmbLaserComboBox cmbLaser = (cmbLaserComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLaserComboBox.class, m_cmbLaserTemp);
				super.addComboBox(cmbLaser);
				RuntimeAnchoring anchoringHelper173 = new RuntimeAnchoring(designSize, runtimeSize, 152, 368, 488, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLaserDeviceSerialNumberTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1175), new Integer(anchoringHelper173.getX()), new Integer(anchoringHelper173.getY()), new Integer(anchoringHelper173.getWidth()), new Integer(anchoringHelper173.getHeight()), new Integer(startTabIndex.intValue() + 112), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLaserDeviceSerialNumberTemp);
				cmbLaserDeviceSerialNumberComboBox cmbLaserDeviceSerialNumber = (cmbLaserDeviceSerialNumberComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLaserDeviceSerialNumberComboBox.class, m_cmbLaserDeviceSerialNumberTemp);
				super.addComboBox(cmbLaserDeviceSerialNumber);
				RuntimeAnchoring anchoringHelper174 = new RuntimeAnchoring(designSize, runtimeSize, 152, 342, 488, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLaserDeviceNameTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1176), new Integer(anchoringHelper174.getX()), new Integer(anchoringHelper174.getY()), new Integer(anchoringHelper174.getWidth()), new Integer(anchoringHelper174.getHeight()), new Integer(startTabIndex.intValue() + 111), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLaserDeviceNameTemp);
				cmbLaserDeviceNameComboBox cmbLaserDeviceName = (cmbLaserDeviceNameComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLaserDeviceNameComboBox.class, m_cmbLaserDeviceNameTemp);
				super.addComboBox(cmbLaserDeviceName);
				RuntimeAnchoring anchoringHelper175 = new RuntimeAnchoring(designSize, runtimeSize, 440, 196, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDiaPadSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1177), new Integer(anchoringHelper175.getX()), new Integer(anchoringHelper175.getY()), new Integer(anchoringHelper175.getWidth()), new Integer(anchoringHelper175.getHeight()), new Integer(startTabIndex.intValue() + 103), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDiaPadSiteTemp);
				cmbDiaPadSiteComboBox cmbDiaPadSite = (cmbDiaPadSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiaPadSiteComboBox.class, m_cmbDiaPadSiteTemp);
				super.addComboBox(cmbDiaPadSite);
				RuntimeAnchoring anchoringHelper176 = new RuntimeAnchoring(designSize, runtimeSize, 440, 170, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDiaSerialNumberTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1178), new Integer(anchoringHelper176.getX()), new Integer(anchoringHelper176.getY()), new Integer(anchoringHelper176.getWidth()), new Integer(anchoringHelper176.getHeight()), new Integer(startTabIndex.intValue() + 102), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDiaSerialNumberTemp);
				cmbDiaSerialNumberComboBox cmbDiaSerialNumber = (cmbDiaSerialNumberComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiaSerialNumberComboBox.class, m_cmbDiaSerialNumberTemp);
				super.addComboBox(cmbDiaSerialNumber);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper177 = new RuntimeAnchoring(designSize, runtimeSize, 152, 472, 488, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbLaserOperatorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1179), new Integer(anchoringHelper177.getX()), new Integer(anchoringHelper177.getY()), new Integer(anchoringHelper177.getWidth()), new Integer(anchoringHelper177.getHeight()), new Integer(startTabIndex.intValue() + 118), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbLaserOperatorTemp);
				qmbLaserOperatorComboBox qmbLaserOperator = (qmbLaserOperatorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbLaserOperatorComboBox.class, m_qmbLaserOperatorTemp);
				super.addComboBox(qmbLaserOperator);
				RuntimeAnchoring anchoringHelper178 = new RuntimeAnchoring(designSize, runtimeSize, 440, 248, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbDiaRemovedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1180), new Integer(anchoringHelper178.getX()), new Integer(anchoringHelper178.getY()), new Integer(anchoringHelper178.getWidth()), new Integer(anchoringHelper178.getHeight()), new Integer(startTabIndex.intValue() + 106), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbDiaRemovedByTemp);
				qmbDiaRemovedByComboBox qmbDiaRemovedBy = (qmbDiaRemovedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbDiaRemovedByComboBox.class, m_qmbDiaRemovedByTemp);
				super.addComboBox(qmbDiaRemovedBy);
				RuntimeAnchoring anchoringHelper179 = new RuntimeAnchoring(designSize, runtimeSize, 440, 222, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbDiaAppliedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1181), new Integer(anchoringHelper179.getX()), new Integer(anchoringHelper179.getY()), new Integer(anchoringHelper179.getWidth()), new Integer(anchoringHelper179.getHeight()), new Integer(startTabIndex.intValue() + 104), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbDiaAppliedByTemp);
				qmbDiaAppliedByComboBox qmbDiaAppliedBy = (qmbDiaAppliedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbDiaAppliedByComboBox.class, m_qmbDiaAppliedByTemp);
				super.addComboBox(qmbDiaAppliedBy);
		
				// CheckedListBox Controls
				RuntimeAnchoring anchoringHelper180 = new RuntimeAnchoring(designSize, runtimeSize, 152, 496, 488, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				CheckedListBox m_chklistpatientSafetyMeasuresTemp = (CheckedListBox)factory.getControl(CheckedListBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1182), new Integer(anchoringHelper180.getX()), new Integer(anchoringHelper180.getY()), new Integer(anchoringHelper180.getWidth()), new Integer(anchoringHelper180.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, null, new Integer(startTabIndex.intValue() + 119), Boolean.TRUE, null});
				addControl(m_chklistpatientSafetyMeasuresTemp);
				chklistpatientSafetyMeasuresCheckedListBox chklistpatientSafetyMeasures = (chklistpatientSafetyMeasuresCheckedListBox)CheckedListBoxFlyweightFactory.getInstance().createCheckedListBoxBridge(chklistpatientSafetyMeasuresCheckedListBox.class, m_chklistpatientSafetyMeasuresTemp);
				super.addCheckedListBox(chklistpatientSafetyMeasures);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper181 = new RuntimeAnchoring(designSize, runtimeSize, 16, 31, 792, 135, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdDiathermyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1183), new Integer(anchoringHelper181.getX()), new Integer(anchoringHelper181.getY()), new Integer(anchoringHelper181.getWidth()), new Integer(anchoringHelper181.getHeight()), new Integer(startTabIndex.intValue() + 96), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiathermyTemp);
				grdDiathermyGrid grdDiathermy = (grdDiathermyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiathermyGrid.class, m_grdDiathermyTemp);
				grdDiathermy.addStringColumn("Mode", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiathermy.addStringColumn("Coag", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiathermy.addStringColumn("Cut", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiathermy.addStringColumn("Blend", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiathermy.addStringColumn("Serial Number", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiathermy.addStringColumn("Pad Site", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdDiathermy);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper182 = new RuntimeAnchoring(designSize, runtimeSize, 592, 446, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1184), new Integer(anchoringHelper182.getX()), new Integer(anchoringHelper182.getY()), new Integer(anchoringHelper182.getWidth()), new Integer(anchoringHelper182.getHeight()), new Integer(startTabIndex.intValue() + 117), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(4)}));
				RuntimeAnchoring anchoringHelper183 = new RuntimeAnchoring(designSize, runtimeSize, 360, 446, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1185), new Integer(anchoringHelper183.getX()), new Integer(anchoringHelper183.getY()), new Integer(anchoringHelper183.getWidth()), new Integer(anchoringHelper183.getHeight()), new Integer(startTabIndex.intValue() + 116), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(3)}));
		
				// DecimalBox Controls
				RuntimeAnchoring anchoringHelper184 = new RuntimeAnchoring(designSize, runtimeSize, 152, 446, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1186), new Integer(anchoringHelper184.getX()), new Integer(anchoringHelper184.getY()), new Integer(anchoringHelper184.getWidth()), new Integer(anchoringHelper184.getHeight()), new Integer(startTabIndex.intValue() + 115), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.TRUE}));
		
				// RadioButton Controls
				RadioButton tmpDiathermyMode = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1187), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpDiathermyMode);
				DiathermyModeRadioButton DiathermyMode = (DiathermyModeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(DiathermyModeRadioButton.class, tmpDiathermyMode);
				DiathermyMode.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(DiathermyMode);
			}

			public Button btnEditLaserDetails()
			{
				return (Button)super.getControl(21);
			}
			public Button btnSaveLaserDetails()
			{
				return (Button)super.getControl(22);
			}
			public Button btnCancelLaserDetails()
			{
				return (Button)super.getControl(23);
			}
			public Button btnAddDiathermy()
			{
				return (Button)super.getControl(24);
			}
			public Button btnEditDiathermy()
			{
				return (Button)super.getControl(25);
			}
			public Button btnSaveDiathermy()
			{
				return (Button)super.getControl(26);
			}
			public Button btnCancelDiathermy()
			{
				return (Button)super.getControl(27);
			}
			public TextBox txtLaserFibreLot()
			{
				return (TextBox)super.getControl(28);
			}
			public TextBox txtDiaBlendSetting()
			{
				return (TextBox)super.getControl(29);
			}
			public TextBox txtDiaCoagSetting()
			{
				return (TextBox)super.getControl(30);
			}
			public TextBox txtDiaCut()
			{
				return (TextBox)super.getControl(31);
			}
			public cmbLaserComboBox cmbLaser()
			{
				return (cmbLaserComboBox)super.getComboBox(0);
			}
			public cmbLaserDeviceSerialNumberComboBox cmbLaserDeviceSerialNumber()
			{
				return (cmbLaserDeviceSerialNumberComboBox)super.getComboBox(1);
			}
			public cmbLaserDeviceNameComboBox cmbLaserDeviceName()
			{
				return (cmbLaserDeviceNameComboBox)super.getComboBox(2);
			}
			public cmbDiaPadSiteComboBox cmbDiaPadSite()
			{
				return (cmbDiaPadSiteComboBox)super.getComboBox(3);
			}
			public cmbDiaSerialNumberComboBox cmbDiaSerialNumber()
			{
				return (cmbDiaSerialNumberComboBox)super.getComboBox(4);
			}
			public qmbLaserOperatorComboBox qmbLaserOperator()
			{
				return (qmbLaserOperatorComboBox)super.getComboBox(5);
			}
			public qmbDiaRemovedByComboBox qmbDiaRemovedBy()
			{
				return (qmbDiaRemovedByComboBox)super.getComboBox(6);
			}
			public qmbDiaAppliedByComboBox qmbDiaAppliedBy()
			{
				return (qmbDiaAppliedByComboBox)super.getComboBox(7);
			}
			public chklistpatientSafetyMeasuresCheckedListBox chklistpatientSafetyMeasures()
			{
				return (chklistpatientSafetyMeasuresCheckedListBox)super.getCheckedListBox(0);
			}
			public grdDiathermyGrid grdDiathermy()
			{
				return (grdDiathermyGrid)super.getGrid(0);
			}
			public IntBox intLaserNoOfBurns()
			{
				return (IntBox)super.getControl(42);
			}
			public IntBox intLaserTotalDuration()
			{
				return (IntBox)super.getControl(43);
			}
			public DecimalBox decLaserPower()
			{
				return (DecimalBox)super.getControl(44);
			}
			public DiathermyModeRadioButton DiathermyMode()
			{
				return (DiathermyModeRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabIrrigationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbIrrigantDetailComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.IrrigantSolution value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.IrrigantSolution value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.IrrigantSolution value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.IrrigantSolution value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.IrrigantSolution value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.IrrigantSolution getValue()
				{
					return (ims.core.vo.lookups.IrrigantSolution)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.IrrigantSolution value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbCatheterInsertedByComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdCathetersRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdCathetersRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColTypeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColType()
				{
					return (String)super.row.get(0);
				}
				public void setColType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSizeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSizeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSizeOpened()
				{
					super.row.showOpened(1);
				}
				public String getColSize()
				{
					return (String)super.row.get(1);
				}
				public void setColSize(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColSizeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColCollectionDeviceReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColCollectionDeviceReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColCollectionDeviceOpened()
				{
					super.row.showOpened(2);
				}
				public String getColCollectionDevice()
				{
					return (String)super.row.get(2);
				}
				public void setColCollectionDevice(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColCollectionDeviceTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColLotNumberReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColLotNumberReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColLotNumberOpened()
				{
					super.row.showOpened(3);
				}
				public String getColLotNumber()
				{
					return (String)super.row.get(3);
				}
				public void setColLotNumber(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColLotNumberTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColBodySizeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColBodySizeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColBodySizeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColBodySize()
				{
					return (String)super.row.get(4);
				}
				public void setColBodySize(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColBodySizeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColLubricantReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColLubricantReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColLubricantOpened()
				{
					super.row.showOpened(5);
				}
				public String getColLubricant()
				{
					return (String)super.row.get(5);
				}
				public void setColLubricant(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColLubricantTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColVolumeInBaloonReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColVolumeInBaloonReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColVolumeInBaloonOpened()
				{
					super.row.showOpened(6);
				}
				public String getColVolumeInBaloon()
				{
					return (String)super.row.get(6);
				}
				public void setColVolumeInBaloon(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColVolumeInBaloonTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.clinical.vo.CatheterDrainsTubeIntraOpVo getValue()
				{
					return (ims.clinical.vo.CatheterDrainsTubeIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.CatheterDrainsTubeIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdCathetersRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdCathetersRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdCathetersRow get(int index)
				{
					return new grdCathetersRow(super.collection.get(index));
				}
				public grdCathetersRow newRow()
				{
					return new grdCathetersRow(super.collection.newRow());
				}
				public grdCathetersRow newRow(boolean autoSelect)
				{
					return new grdCathetersRow(super.collection.newRow(autoSelect));
				}
				public grdCathetersRow newRowAt(int index)
				{
					return new grdCathetersRow(super.collection.newRowAt(index));
				}
				public grdCathetersRow newRowAt(int index, boolean autoSelect)
				{
					return new grdCathetersRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdCathetersGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.CatheterDrainsTubeIntraOpVoCollection getValues()
				{
					ims.clinical.vo.CatheterDrainsTubeIntraOpVoCollection listOfValues = new ims.clinical.vo.CatheterDrainsTubeIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.CatheterDrainsTubeIntraOpVo getValue()
				{
					return (ims.clinical.vo.CatheterDrainsTubeIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.CatheterDrainsTubeIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdCathetersRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdCathetersRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdCathetersRowCollection getRows()
				{
					return new grdCathetersRowCollection(super.grid.getRows());
				}
				public grdCathetersRow getRowByValue(ims.clinical.vo.CatheterDrainsTubeIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdCathetersRow(row);
				}
				public void setColTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSizeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSizeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColCollectionDeviceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColCollectionDeviceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColLotNumberHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColLotNumberHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColBodySizeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColBodySizeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColLubricantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColLubricantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColVolumeInBaloonHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColVolumeInBaloonHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
			public static class grdIrrigantDetailRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdIrrigantDetailRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColIrrigantReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColIrrigantReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColIrrigantOpened()
				{
					super.row.showOpened(0);
				}
				public String getColIrrigant()
				{
					return (String)super.row.get(0);
				}
				public void setColIrrigant(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColIrrigantTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColTotalVolumeInReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColTotalVolumeInReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColTotalVolumeInOpened()
				{
					super.row.showOpened(1);
				}
				public Integer getColTotalVolumeIn()
				{
					return (Integer)super.row.get(1);
				}
				public void setColTotalVolumeIn(Integer value)
				{
					super.row.set(1, value);
				}
				public void setCellColTotalVolumeInTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColWarmedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColWarmedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColWarmedOpened()
				{
					super.row.showOpened(2);
				}
				public String getColWarmed()
				{
					return (String)super.row.get(2);
				}
				public void setColWarmed(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColWarmedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.clinical.vo.IrrigantDetailIntraOpVo getValue()
				{
					return (ims.clinical.vo.IrrigantDetailIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.IrrigantDetailIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdIrrigantDetailRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdIrrigantDetailRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdIrrigantDetailRow get(int index)
				{
					return new grdIrrigantDetailRow(super.collection.get(index));
				}
				public grdIrrigantDetailRow newRow()
				{
					return new grdIrrigantDetailRow(super.collection.newRow());
				}
				public grdIrrigantDetailRow newRow(boolean autoSelect)
				{
					return new grdIrrigantDetailRow(super.collection.newRow(autoSelect));
				}
				public grdIrrigantDetailRow newRowAt(int index)
				{
					return new grdIrrigantDetailRow(super.collection.newRowAt(index));
				}
				public grdIrrigantDetailRow newRowAt(int index, boolean autoSelect)
				{
					return new grdIrrigantDetailRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdIrrigantDetailGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
				}
				public ims.clinical.vo.IrrigantDetailIntraOpVoCollection getValues()
				{
					ims.clinical.vo.IrrigantDetailIntraOpVoCollection listOfValues = new ims.clinical.vo.IrrigantDetailIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.IrrigantDetailIntraOpVo getValue()
				{
					return (ims.clinical.vo.IrrigantDetailIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.IrrigantDetailIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdIrrigantDetailRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdIrrigantDetailRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdIrrigantDetailRowCollection getRows()
				{
					return new grdIrrigantDetailRowCollection(super.grid.getRows());
				}
				public grdIrrigantDetailRow getRowByValue(ims.clinical.vo.IrrigantDetailIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdIrrigantDetailRow(row);
				}
				public void setColIrrigantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColIrrigantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColTotalVolumeInHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColTotalVolumeInHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColWarmedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColWarmedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
		
			public static class CatheterTypeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper185 = new RuntimeAnchoring(designSize, runtimeSize, 272, 416, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper185.getX(), anchoringHelper185.getY(), anchoringHelper185.getWidth(), "Tube", startTabIndex.intValue() + 139);
					RuntimeAnchoring anchoringHelper186 = new RuntimeAnchoring(designSize, runtimeSize, 208, 416, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper186.getX(), anchoringHelper186.getY(), anchoringHelper186.getWidth(), "Drain", startTabIndex.intValue() + 138);
					RuntimeAnchoring anchoringHelper187 = new RuntimeAnchoring(designSize, runtimeSize, 132, 416, 68, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper187.getX(), anchoringHelper187.getY(), anchoringHelper187.getWidth(), "Catheter", startTabIndex.intValue() + 137);
				}
				public void setText(CatheterTypeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public CatheterTypeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return CatheterTypeEnumeration.None;
						case 0: return CatheterTypeEnumeration.rdoTube;
						case 1: return CatheterTypeEnumeration.rdoDrain;
						case 2: return CatheterTypeEnumeration.rdoCatheter;
					}
					return null;
				}
				public void setValue(CatheterTypeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(CatheterTypeEnumeration.None.id);
				}
				public boolean isEnabled(CatheterTypeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(CatheterTypeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(CatheterTypeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(CatheterTypeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class CatheterTypeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static CatheterTypeEnumeration None = new CatheterTypeEnumeration(-1);
				public static CatheterTypeEnumeration rdoTube = new CatheterTypeEnumeration(0);
				public static CatheterTypeEnumeration rdoDrain = new CatheterTypeEnumeration(1);
				public static CatheterTypeEnumeration rdoCatheter = new CatheterTypeEnumeration(2);
				private CatheterTypeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((CatheterTypeEnumeration)o).id;
				}
				private int id;
			}
		
			public static class IrrigantDetailWarmedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper188 = new RuntimeAnchoring(designSize, runtimeSize, 178, 192, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper188.getX(), anchoringHelper188.getY(), anchoringHelper188.getWidth(), "No", startTabIndex.intValue() + 127);
					RuntimeAnchoring anchoringHelper189 = new RuntimeAnchoring(designSize, runtimeSize, 128, 192, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper189.getX(), anchoringHelper189.getY(), anchoringHelper189.getWidth(), "Yes", startTabIndex.intValue() + 126);
				}
				public void setText(IrrigantDetailWarmedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public IrrigantDetailWarmedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return IrrigantDetailWarmedEnumeration.None;
						case 0: return IrrigantDetailWarmedEnumeration.rdoIrrigantDetailWarmedNo;
						case 1: return IrrigantDetailWarmedEnumeration.rdoIrrigantDetailWarmedYes;
					}
					return null;
				}
				public void setValue(IrrigantDetailWarmedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(IrrigantDetailWarmedEnumeration.None.id);
				}
				public boolean isEnabled(IrrigantDetailWarmedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(IrrigantDetailWarmedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(IrrigantDetailWarmedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(IrrigantDetailWarmedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class IrrigantDetailWarmedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static IrrigantDetailWarmedEnumeration None = new IrrigantDetailWarmedEnumeration(-1);
				public static IrrigantDetailWarmedEnumeration rdoIrrigantDetailWarmedNo = new IrrigantDetailWarmedEnumeration(0);
				public static IrrigantDetailWarmedEnumeration rdoIrrigantDetailWarmedYes = new IrrigantDetailWarmedEnumeration(1);
				private IrrigantDetailWarmedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((IrrigantDetailWarmedEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper190 = new RuntimeAnchoring(designSize, runtimeSize, 16, 256, 792, 304, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1188), new Integer(anchoringHelper190.getX()), new Integer(anchoringHelper190.getY()), new Integer(anchoringHelper190.getWidth()), new Integer(anchoringHelper190.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Catheters, Drains and Tubes", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper191 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 472, 240, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1189), new Integer(anchoringHelper191.getX()), new Integer(anchoringHelper191.getY()), new Integer(anchoringHelper191.getWidth()), new Integer(anchoringHelper191.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Irrigation Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper192 = new RuntimeAnchoring(designSize, runtimeSize, 624, 488, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1190), new Integer(anchoringHelper192.getX()), new Integer(anchoringHelper192.getY()), new Integer(anchoringHelper192.getWidth()), new Integer(anchoringHelper192.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper193 = new RuntimeAnchoring(designSize, runtimeSize, 376, 488, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1191), new Integer(anchoringHelper193.getX()), new Integer(anchoringHelper193.getY()), new Integer(anchoringHelper193.getWidth()), new Integer(anchoringHelper193.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Total Volume In Balloon:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper194 = new RuntimeAnchoring(designSize, runtimeSize, 376, 440, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1192), new Integer(anchoringHelper194.getX()), new Integer(anchoringHelper194.getY()), new Integer(anchoringHelper194.getWidth()), new Integer(anchoringHelper194.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Inserted By:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper195 = new RuntimeAnchoring(designSize, runtimeSize, 36, 488, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1193), new Integer(anchoringHelper195.getX()), new Integer(anchoringHelper195.getY()), new Integer(anchoringHelper195.getWidth()), new Integer(anchoringHelper195.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lot Number:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper196 = new RuntimeAnchoring(designSize, runtimeSize, 36, 440, 28, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1194), new Integer(anchoringHelper196.getX()), new Integer(anchoringHelper196.getY()), new Integer(anchoringHelper196.getWidth()), new Integer(anchoringHelper196.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Size:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper197 = new RuntimeAnchoring(designSize, runtimeSize, 36, 416, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1195), new Integer(anchoringHelper197.getX()), new Integer(anchoringHelper197.getY()), new Integer(anchoringHelper197.getWidth()), new Integer(anchoringHelper197.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper198 = new RuntimeAnchoring(designSize, runtimeSize, 376, 464, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1196), new Integer(anchoringHelper198.getX()), new Integer(anchoringHelper198.getY()), new Integer(anchoringHelper198.getWidth()), new Integer(anchoringHelper198.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lubricant:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper199 = new RuntimeAnchoring(designSize, runtimeSize, 36, 464, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1197), new Integer(anchoringHelper199.getX()), new Integer(anchoringHelper199.getY()), new Integer(anchoringHelper199.getWidth()), new Integer(anchoringHelper199.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Collection Device:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper200 = new RuntimeAnchoring(designSize, runtimeSize, 376, 416, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1198), new Integer(anchoringHelper200.getX()), new Integer(anchoringHelper200.getY()), new Integer(anchoringHelper200.getWidth()), new Integer(anchoringHelper200.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Body Site:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper201 = new RuntimeAnchoring(designSize, runtimeSize, 760, 145, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1199), new Integer(anchoringHelper201.getX()), new Integer(anchoringHelper201.getY()), new Integer(anchoringHelper201.getWidth()), new Integer(anchoringHelper201.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper202 = new RuntimeAnchoring(designSize, runtimeSize, 504, 144, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1200), new Integer(anchoringHelper202.getX()), new Integer(anchoringHelper202.getY()), new Integer(anchoringHelper202.getWidth()), new Integer(anchoringHelper202.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Total Volume Difference:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper203 = new RuntimeAnchoring(designSize, runtimeSize, 760, 115, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1201), new Integer(anchoringHelper203.getX()), new Integer(anchoringHelper203.getY()), new Integer(anchoringHelper203.getWidth()), new Integer(anchoringHelper203.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper204 = new RuntimeAnchoring(designSize, runtimeSize, 504, 112, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1202), new Integer(anchoringHelper204.getX()), new Integer(anchoringHelper204.getY()), new Integer(anchoringHelper204.getWidth()), new Integer(anchoringHelper204.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Total Volume Out:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper205 = new RuntimeAnchoring(designSize, runtimeSize, 760, 83, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1203), new Integer(anchoringHelper205.getX()), new Integer(anchoringHelper205.getY()), new Integer(anchoringHelper205.getWidth()), new Integer(anchoringHelper205.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper206 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1204), new Integer(anchoringHelper206.getX()), new Integer(anchoringHelper206.getY()), new Integer(anchoringHelper206.getWidth()), new Integer(anchoringHelper206.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Overall Total Volume In:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper207 = new RuntimeAnchoring(designSize, runtimeSize, 760, 203, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1205), new Integer(anchoringHelper207.getX()), new Integer(anchoringHelper207.getY()), new Integer(anchoringHelper207.getWidth()), new Integer(anchoringHelper207.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper208 = new RuntimeAnchoring(designSize, runtimeSize, 504, 202, 155, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1206), new Integer(anchoringHelper208.getX()), new Integer(anchoringHelper208.getY()), new Integer(anchoringHelper208.getWidth()), new Integer(anchoringHelper208.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Blood Loss Volume:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper209 = new RuntimeAnchoring(designSize, runtimeSize, 226, 165, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1207), new Integer(anchoringHelper209.getX()), new Integer(anchoringHelper209.getY()), new Integer(anchoringHelper209.getWidth()), new Integer(anchoringHelper209.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mls", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper210 = new RuntimeAnchoring(designSize, runtimeSize, 32, 136, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1208), new Integer(anchoringHelper210.getX()), new Integer(anchoringHelper210.getY()), new Integer(anchoringHelper210.getWidth()), new Integer(anchoringHelper210.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Irrigant:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper211 = new RuntimeAnchoring(designSize, runtimeSize, 32, 164, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1209), new Integer(anchoringHelper211.getX()), new Integer(anchoringHelper211.getY()), new Integer(anchoringHelper211.getWidth()), new Integer(anchoringHelper211.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Total Volume In:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper212 = new RuntimeAnchoring(designSize, runtimeSize, 32, 192, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1210), new Integer(anchoringHelper212.getX()), new Integer(anchoringHelper212.getY()), new Integer(anchoringHelper212.getWidth()), new Integer(anchoringHelper212.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Warmed?", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper213 = new RuntimeAnchoring(designSize, runtimeSize, 28, 528, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1211), new Integer(anchoringHelper213.getX()), new Integer(anchoringHelper213.getY()), new Integer(anchoringHelper213.getWidth()), new Integer(anchoringHelper213.getHeight()), new Integer(startTabIndex.intValue() + 147), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add Device", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper214 = new RuntimeAnchoring(designSize, runtimeSize, 132, 528, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1212), new Integer(anchoringHelper214.getX()), new Integer(anchoringHelper214.getY()), new Integer(anchoringHelper214.getWidth()), new Integer(anchoringHelper214.getHeight()), new Integer(startTabIndex.intValue() + 148), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Device", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper215 = new RuntimeAnchoring(designSize, runtimeSize, 596, 528, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1213), new Integer(anchoringHelper215.getX()), new Integer(anchoringHelper215.getY()), new Integer(anchoringHelper215.getWidth()), new Integer(anchoringHelper215.getHeight()), new Integer(startTabIndex.intValue() + 149), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Device", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper216 = new RuntimeAnchoring(designSize, runtimeSize, 700, 528, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1214), new Integer(anchoringHelper216.getX()), new Integer(anchoringHelper216.getY()), new Integer(anchoringHelper216.getWidth()), new Integer(anchoringHelper216.getHeight()), new Integer(startTabIndex.intValue() + 150), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Device", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper217 = new RuntimeAnchoring(designSize, runtimeSize, 8, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1215), new Integer(anchoringHelper217.getX()), new Integer(anchoringHelper217.getY()), new Integer(anchoringHelper217.getWidth()), new Integer(anchoringHelper217.getHeight()), new Integer(startTabIndex.intValue() + 151), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper218 = new RuntimeAnchoring(designSize, runtimeSize, 744, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1216), new Integer(anchoringHelper218.getX()), new Integer(anchoringHelper218.getY()), new Integer(anchoringHelper218.getWidth()), new Integer(anchoringHelper218.getHeight()), new Integer(startTabIndex.intValue() + 153), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper219 = new RuntimeAnchoring(designSize, runtimeSize, 664, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1217), new Integer(anchoringHelper219.getX()), new Integer(anchoringHelper219.getY()), new Integer(anchoringHelper219.getWidth()), new Integer(anchoringHelper219.getHeight()), new Integer(startTabIndex.intValue() + 152), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper220 = new RuntimeAnchoring(designSize, runtimeSize, 24, 220, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1218), new Integer(anchoringHelper220.getX()), new Integer(anchoringHelper220.getY()), new Integer(anchoringHelper220.getWidth()), new Integer(anchoringHelper220.getHeight()), new Integer(startTabIndex.intValue() + 132), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add Irrigant", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper221 = new RuntimeAnchoring(designSize, runtimeSize, 120, 220, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1219), new Integer(anchoringHelper221.getX()), new Integer(anchoringHelper221.getY()), new Integer(anchoringHelper221.getWidth()), new Integer(anchoringHelper221.getHeight()), new Integer(startTabIndex.intValue() + 133), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Irrigant", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper222 = new RuntimeAnchoring(designSize, runtimeSize, 280, 220, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1220), new Integer(anchoringHelper222.getX()), new Integer(anchoringHelper222.getY()), new Integer(anchoringHelper222.getWidth()), new Integer(anchoringHelper222.getHeight()), new Integer(startTabIndex.intValue() + 134), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Irrigant", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper223 = new RuntimeAnchoring(designSize, runtimeSize, 384, 220, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1221), new Integer(anchoringHelper223.getX()), new Integer(anchoringHelper223.getY()), new Integer(anchoringHelper223.getWidth()), new Integer(anchoringHelper223.getHeight()), new Integer(startTabIndex.intValue() + 135), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Irrigant", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper224 = new RuntimeAnchoring(designSize, runtimeSize, 504, 486, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1222), new Integer(anchoringHelper224.getX()), new Integer(anchoringHelper224.getY()), new Integer(anchoringHelper224.getWidth()), new Integer(anchoringHelper224.getHeight()), new Integer(startTabIndex.intValue() + 146), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper225 = new RuntimeAnchoring(designSize, runtimeSize, 456, 462, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1223), new Integer(anchoringHelper225.getX()), new Integer(anchoringHelper225.getY()), new Integer(anchoringHelper225.getWidth()), new Integer(anchoringHelper225.getHeight()), new Integer(startTabIndex.intValue() + 145), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper226 = new RuntimeAnchoring(designSize, runtimeSize, 456, 414, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1224), new Integer(anchoringHelper226.getX()), new Integer(anchoringHelper226.getY()), new Integer(anchoringHelper226.getWidth()), new Integer(anchoringHelper226.getHeight()), new Integer(startTabIndex.intValue() + 143), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper227 = new RuntimeAnchoring(designSize, runtimeSize, 132, 486, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1225), new Integer(anchoringHelper227.getX()), new Integer(anchoringHelper227.getY()), new Integer(anchoringHelper227.getWidth()), new Integer(anchoringHelper227.getHeight()), new Integer(startTabIndex.intValue() + 142), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper228 = new RuntimeAnchoring(designSize, runtimeSize, 132, 438, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1226), new Integer(anchoringHelper228.getX()), new Integer(anchoringHelper228.getY()), new Integer(anchoringHelper228.getWidth()), new Integer(anchoringHelper228.getHeight()), new Integer(startTabIndex.intValue() + 140), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper229 = new RuntimeAnchoring(designSize, runtimeSize, 132, 462, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1227), new Integer(anchoringHelper229.getX()), new Integer(anchoringHelper229.getY()), new Integer(anchoringHelper229.getWidth()), new Integer(anchoringHelper229.getHeight()), new Integer(startTabIndex.intValue() + 141), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper230 = new RuntimeAnchoring(designSize, runtimeSize, 128, 134, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbIrrigantDetailTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1228), new Integer(anchoringHelper230.getX()), new Integer(anchoringHelper230.getY()), new Integer(anchoringHelper230.getWidth()), new Integer(anchoringHelper230.getHeight()), new Integer(startTabIndex.intValue() + 124), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbIrrigantDetailTemp);
				cmbIrrigantDetailComboBox cmbIrrigantDetail = (cmbIrrigantDetailComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIrrigantDetailComboBox.class, m_cmbIrrigantDetailTemp);
				super.addComboBox(cmbIrrigantDetail);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper231 = new RuntimeAnchoring(designSize, runtimeSize, 456, 438, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbCatheterInsertedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1229), new Integer(anchoringHelper231.getX()), new Integer(anchoringHelper231.getY()), new Integer(anchoringHelper231.getWidth()), new Integer(anchoringHelper231.getHeight()), new Integer(startTabIndex.intValue() + 144), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbCatheterInsertedByTemp);
				qmbCatheterInsertedByComboBox qmbCatheterInsertedBy = (qmbCatheterInsertedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbCatheterInsertedByComboBox.class, m_qmbCatheterInsertedByTemp);
				super.addComboBox(qmbCatheterInsertedBy);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper232 = new RuntimeAnchoring(designSize, runtimeSize, 28, 283, 768, 127, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdCathetersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1230), new Integer(anchoringHelper232.getX()), new Integer(anchoringHelper232.getY()), new Integer(anchoringHelper232.getWidth()), new Integer(anchoringHelper232.getHeight()), new Integer(startTabIndex.intValue() + 136), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdCathetersTemp);
				grdCathetersGrid grdCatheters = (grdCathetersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCathetersGrid.class, m_grdCathetersTemp);
				grdCatheters.addStringColumn("Type", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCatheters.addStringColumn("Size", 0, 0, 70, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCatheters.addStringColumn("Collection Device", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCatheters.addStringColumn("Lot Number", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCatheters.addStringColumn("Body Site", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCatheters.addStringColumn("Lubricant", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCatheters.addStringColumn("Volume In Balloon", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdCatheters);
				RuntimeAnchoring anchoringHelper233 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 456, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdIrrigantDetailTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1231), new Integer(anchoringHelper233.getX()), new Integer(anchoringHelper233.getY()), new Integer(anchoringHelper233.getWidth()), new Integer(anchoringHelper233.getHeight()), new Integer(startTabIndex.intValue() + 123), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdIrrigantDetailTemp);
				grdIrrigantDetailGrid grdIrrigantDetail = (grdIrrigantDetailGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIrrigantDetailGrid.class, m_grdIrrigantDetailTemp);
				grdIrrigantDetail.addStringColumn("Irrigant", 0, 0, 220, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIrrigantDetail.addIntColumn("Total Volume In", 0, 0, 120, true, true, null, false, 1, true, 0);
				grdIrrigantDetail.addStringColumn("Warmed", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdIrrigantDetail);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper234 = new RuntimeAnchoring(designSize, runtimeSize, 656, 144, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1232), new Integer(anchoringHelper234.getX()), new Integer(anchoringHelper234.getY()), new Integer(anchoringHelper234.getWidth()), new Integer(anchoringHelper234.getHeight()), new Integer(startTabIndex.intValue() + 130), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper235 = new RuntimeAnchoring(designSize, runtimeSize, 656, 112, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1233), new Integer(anchoringHelper235.getX()), new Integer(anchoringHelper235.getY()), new Integer(anchoringHelper235.getWidth()), new Integer(anchoringHelper235.getHeight()), new Integer(startTabIndex.intValue() + 129), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper236 = new RuntimeAnchoring(designSize, runtimeSize, 656, 80, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1234), new Integer(anchoringHelper236.getX()), new Integer(anchoringHelper236.getY()), new Integer(anchoringHelper236.getWidth()), new Integer(anchoringHelper236.getHeight()), new Integer(startTabIndex.intValue() + 128), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper237 = new RuntimeAnchoring(designSize, runtimeSize, 656, 200, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1235), new Integer(anchoringHelper237.getX()), new Integer(anchoringHelper237.getY()), new Integer(anchoringHelper237.getWidth()), new Integer(anchoringHelper237.getHeight()), new Integer(startTabIndex.intValue() + 131), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper238 = new RuntimeAnchoring(designSize, runtimeSize, 128, 162, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1236), new Integer(anchoringHelper238.getX()), new Integer(anchoringHelper238.getY()), new Integer(anchoringHelper238.getWidth()), new Integer(anchoringHelper238.getHeight()), new Integer(startTabIndex.intValue() + 125), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpCatheterType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1237), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpCatheterType);
				CatheterTypeRadioButton CatheterType = (CatheterTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(CatheterTypeRadioButton.class, tmpCatheterType);
				CatheterType.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(CatheterType);
				RadioButton tmpIrrigantDetailWarmed = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1238), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpIrrigantDetailWarmed);
				IrrigantDetailWarmedRadioButton IrrigantDetailWarmed = (IrrigantDetailWarmedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(IrrigantDetailWarmedRadioButton.class, tmpIrrigantDetailWarmed);
				IrrigantDetailWarmed.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(IrrigantDetailWarmed);
			}

			public Button btnAddDevice()
			{
				return (Button)super.getControl(23);
			}
			public Button btnEditDevice()
			{
				return (Button)super.getControl(24);
			}
			public Button btnSaveDevice()
			{
				return (Button)super.getControl(25);
			}
			public Button btnCancelDevice()
			{
				return (Button)super.getControl(26);
			}
			public Button btnEditIrrigant()
			{
				return (Button)super.getControl(27);
			}
			public Button btnCancelIrrigant()
			{
				return (Button)super.getControl(28);
			}
			public Button btnSaveIrrigant()
			{
				return (Button)super.getControl(29);
			}
			public Button btnAddIrrigantDetail()
			{
				return (Button)super.getControl(30);
			}
			public Button btnEditIrrigantDetail()
			{
				return (Button)super.getControl(31);
			}
			public Button btnSaveIrrigantDetail()
			{
				return (Button)super.getControl(32);
			}
			public Button btnCancelIrrigantDetail()
			{
				return (Button)super.getControl(33);
			}
			public TextBox txtCatheterVolInBaloon()
			{
				return (TextBox)super.getControl(34);
			}
			public TextBox txtCatheterLubricant()
			{
				return (TextBox)super.getControl(35);
			}
			public TextBox txtCatheterBodySite()
			{
				return (TextBox)super.getControl(36);
			}
			public TextBox txtCatheterLotNumber()
			{
				return (TextBox)super.getControl(37);
			}
			public TextBox txtCatheterSize()
			{
				return (TextBox)super.getControl(38);
			}
			public TextBox txtCatheterCollectionDevice()
			{
				return (TextBox)super.getControl(39);
			}
			public cmbIrrigantDetailComboBox cmbIrrigantDetail()
			{
				return (cmbIrrigantDetailComboBox)super.getComboBox(0);
			}
			public qmbCatheterInsertedByComboBox qmbCatheterInsertedBy()
			{
				return (qmbCatheterInsertedByComboBox)super.getComboBox(1);
			}
			public grdCathetersGrid grdCatheters()
			{
				return (grdCathetersGrid)super.getGrid(0);
			}
			public grdIrrigantDetailGrid grdIrrigantDetail()
			{
				return (grdIrrigantDetailGrid)super.getGrid(1);
			}
			public IntBox intIrrigantTotalVolDiff()
			{
				return (IntBox)super.getControl(44);
			}
			public IntBox intIrrigantOTotalOut()
			{
				return (IntBox)super.getControl(45);
			}
			public IntBox intIrrigantOTotalIn()
			{
				return (IntBox)super.getControl(46);
			}
			public IntBox intIrrigantEBloodLoss()
			{
				return (IntBox)super.getControl(47);
			}
			public IntBox intIrrigantDetailTotalVolume()
			{
				return (IntBox)super.getControl(48);
			}
			public CatheterTypeRadioButton CatheterType()
			{
				return (CatheterTypeRadioButton)super.getRadioButton(0);
			}
			public IrrigantDetailWarmedRadioButton IrrigantDetailWarmed()
			{
				return (IrrigantDetailWarmedRadioButton)super.getRadioButton(1);
			}
		}
		public static class tabSpecimenContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSkinClosuresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSkinClosuresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSkinClosureTypesReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSkinClosureTypesReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSkinClosureTypesOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColSkinClosureTypes(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColSkinClosureTypes()
				{
					return (String)super.row.get(0);
				}
				public void setColSkinClosureTypes(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSkinClosureTypesTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProcedureReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProcedureOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProcedure(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColProcedure()
				{
					return (String)super.row.get(1);
				}
				public void setColProcedure(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProcedureTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColProcedureWoundClassReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColProcedureWoundClassReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColProcedureWoundClassOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColProcedureWoundClass(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColProcedureWoundClass()
				{
					return (String)super.row.get(2);
				}
				public void setColProcedureWoundClass(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColProcedureWoundClassTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.clinical.vo.SkinClosureIntraOpVo getValue()
				{
					return (ims.clinical.vo.SkinClosureIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.SkinClosureIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSkinClosuresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSkinClosuresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSkinClosuresRow get(int index)
				{
					return new grdSkinClosuresRow(super.collection.get(index));
				}
				public grdSkinClosuresRow newRow()
				{
					return new grdSkinClosuresRow(super.collection.newRow());
				}
				public grdSkinClosuresRow newRow(boolean autoSelect)
				{
					return new grdSkinClosuresRow(super.collection.newRow(autoSelect));
				}
				public grdSkinClosuresRow newRowAt(int index)
				{
					return new grdSkinClosuresRow(super.collection.newRowAt(index));
				}
				public grdSkinClosuresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSkinClosuresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSkinClosuresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.SkinClosureIntraOpVoCollection getValues()
				{
					ims.clinical.vo.SkinClosureIntraOpVoCollection listOfValues = new ims.clinical.vo.SkinClosureIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.SkinClosureIntraOpVo getValue()
				{
					return (ims.clinical.vo.SkinClosureIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.SkinClosureIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdSkinClosuresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSkinClosuresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSkinClosuresRowCollection getRows()
				{
					return new grdSkinClosuresRowCollection(super.grid.getRows());
				}
				public grdSkinClosuresRow getRowByValue(ims.clinical.vo.SkinClosureIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSkinClosuresRow(row);
				}
				public void setColSkinClosureTypesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSkinClosureTypesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColProcedureWoundClassHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColProcedureWoundClassHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdSpecimensRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSpecimensRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSpecimenDestinationReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSpecimenDestinationReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSpecimenDestinationOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColSpecimenDestination(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColSpecimenDestination()
				{
					return (String)super.row.get(0);
				}
				public void setColSpecimenDestination(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSpecimenDestinationTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColNoOfSpecimensReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColNoOfSpecimensReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColNoOfSpecimensOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColNoOfSpecimens(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColNoOfSpecimens()
				{
					return (String)super.row.get(1);
				}
				public void setColNoOfSpecimens(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColNoOfSpecimensTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDirectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDirectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDirectOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColDirect(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColDirect()
				{
					return (String)super.row.get(2);
				}
				public void setColDirect(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDirectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSpecimenTypeCommentReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSpecimenTypeCommentReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSpecimenTypeCommentOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColSpecimenTypeComment(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColSpecimenTypeComment()
				{
					return (String)super.row.get(3);
				}
				public void setColSpecimenTypeComment(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSpecimenTypeCommentTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColProcedureReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColProcedureOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColProcedure(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColProcedure()
				{
					return (String)super.row.get(4);
				}
				public void setColProcedure(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColProcedureTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.clinical.vo.SpecimenIntraOpVo getValue()
				{
					return (ims.clinical.vo.SpecimenIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.SpecimenIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSpecimensRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSpecimensRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSpecimensRow get(int index)
				{
					return new grdSpecimensRow(super.collection.get(index));
				}
				public grdSpecimensRow newRow()
				{
					return new grdSpecimensRow(super.collection.newRow());
				}
				public grdSpecimensRow newRow(boolean autoSelect)
				{
					return new grdSpecimensRow(super.collection.newRow(autoSelect));
				}
				public grdSpecimensRow newRowAt(int index)
				{
					return new grdSpecimensRow(super.collection.newRowAt(index));
				}
				public grdSpecimensRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSpecimensRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSpecimensGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.SpecimenIntraOpVoCollection getValues()
				{
					ims.clinical.vo.SpecimenIntraOpVoCollection listOfValues = new ims.clinical.vo.SpecimenIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.SpecimenIntraOpVo getValue()
				{
					return (ims.clinical.vo.SpecimenIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.SpecimenIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdSpecimensRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSpecimensRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSpecimensRowCollection getRows()
				{
					return new grdSpecimensRowCollection(super.grid.getRows());
				}
				public grdSpecimensRow getRowByValue(ims.clinical.vo.SpecimenIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSpecimensRow(row);
				}
				public void setColSpecimenDestinationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSpecimenDestinationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColNoOfSpecimensHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColNoOfSpecimensHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDirectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDirectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSpecimenTypeCommentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSpecimenTypeCommentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public static class grdWoundPackingsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdWoundPackingsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColPackingTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColPackingTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColPackingTypeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColPackingType(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColPackingType()
				{
					return (String)super.row.get(0);
				}
				public void setColPackingType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColPackingTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColTypeCommentsReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColTypeCommentsReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColTypeCommentsOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColTypeComments(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColTypeComments()
				{
					return (String)super.row.get(1);
				}
				public void setColTypeComments(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColTypeCommentsTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColInplaceOnDepartureReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColInplaceOnDepartureReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColInplaceOnDepartureOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColInplaceOnDeparture(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColInplaceOnDeparture()
				{
					return (String)super.row.get(2);
				}
				public void setColInplaceOnDeparture(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColInplaceOnDepartureTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColPackingSiteReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColPackingSiteReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColPackingSiteOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColPackingSite(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColPackingSite()
				{
					return (String)super.row.get(3);
				}
				public void setColPackingSite(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColPackingSiteTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSiteCommentsReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSiteCommentsReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSiteCommentsOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColSiteComments(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColSiteComments()
				{
					return (String)super.row.get(4);
				}
				public void setColSiteComments(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSiteCommentsTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColProcedureReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColProcedureOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColProcedure(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColProcedure()
				{
					return (String)super.row.get(5);
				}
				public void setColProcedure(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColProcedureTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.clinical.vo.WoundPackingIntraOpVo getValue()
				{
					return (ims.clinical.vo.WoundPackingIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.WoundPackingIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdWoundPackingsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdWoundPackingsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdWoundPackingsRow get(int index)
				{
					return new grdWoundPackingsRow(super.collection.get(index));
				}
				public grdWoundPackingsRow newRow()
				{
					return new grdWoundPackingsRow(super.collection.newRow());
				}
				public grdWoundPackingsRow newRow(boolean autoSelect)
				{
					return new grdWoundPackingsRow(super.collection.newRow(autoSelect));
				}
				public grdWoundPackingsRow newRowAt(int index)
				{
					return new grdWoundPackingsRow(super.collection.newRowAt(index));
				}
				public grdWoundPackingsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdWoundPackingsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdWoundPackingsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.WoundPackingIntraOpVoCollection getValues()
				{
					ims.clinical.vo.WoundPackingIntraOpVoCollection listOfValues = new ims.clinical.vo.WoundPackingIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.WoundPackingIntraOpVo getValue()
				{
					return (ims.clinical.vo.WoundPackingIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.WoundPackingIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdWoundPackingsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdWoundPackingsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdWoundPackingsRowCollection getRows()
				{
					return new grdWoundPackingsRowCollection(super.grid.getRows());
				}
				public grdWoundPackingsRow getRowByValue(ims.clinical.vo.WoundPackingIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdWoundPackingsRow(row);
				}
				public void setColPackingTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColPackingTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColTypeCommentsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColTypeCommentsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColInplaceOnDepartureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColInplaceOnDepartureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColPackingSiteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColPackingSiteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColSiteCommentsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSiteCommentsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper239 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 800, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1239), new Integer(anchoringHelper239.getX()), new Integer(anchoringHelper239.getY()), new Integer(anchoringHelper239.getWidth()), new Integer(anchoringHelper239.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Skin Closures", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper240 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 184, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1240), new Integer(anchoringHelper240.getX()), new Integer(anchoringHelper240.getY()), new Integer(anchoringHelper240.getWidth()), new Integer(anchoringHelper240.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Specimens", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper241 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 800, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1241), new Integer(anchoringHelper241.getX()), new Integer(anchoringHelper241.getY()), new Integer(anchoringHelper241.getWidth()), new Integer(anchoringHelper241.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Wound Packings", new Integer(2), ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper242 = new RuntimeAnchoring(designSize, runtimeSize, 16, 418, 744, 120, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSkinClosuresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1242), new Integer(anchoringHelper242.getX()), new Integer(anchoringHelper242.getY()), new Integer(anchoringHelper242.getWidth()), new Integer(anchoringHelper242.getHeight()), new Integer(startTabIndex.intValue() + 162), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSkinClosuresTemp);
				grdSkinClosuresGrid grdSkinClosures = (grdSkinClosuresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSkinClosuresGrid.class, m_grdSkinClosuresTemp);
				grdSkinClosures.addStringColumn("Skin Closure Types / Other", 0, 0, 180, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSkinClosures.addStringColumn("Procedure", 0, 0, 280, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSkinClosures.addStringColumn("Procedure Wound Class", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSkinClosures);
				RuntimeAnchoring anchoringHelper243 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 744, 104, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSpecimensTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1243), new Integer(anchoringHelper243.getX()), new Integer(anchoringHelper243.getY()), new Integer(anchoringHelper243.getWidth()), new Integer(anchoringHelper243.getHeight()), new Integer(startTabIndex.intValue() + 154), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSpecimensTemp);
				grdSpecimensGrid grdSpecimens = (grdSpecimensGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecimensGrid.class, m_grdSpecimensTemp);
				grdSpecimens.addStringColumn("Specimen Destination / Other", 0, 0, 170, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSpecimens.addStringColumn("Number of Specimens", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSpecimens.addStringColumn("Direct Or Indirect", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSpecimens.addStringColumn("Specimen Type Comment", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSpecimens.addStringColumn("Procedure", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSpecimens);
				RuntimeAnchoring anchoringHelper244 = new RuntimeAnchoring(designSize, runtimeSize, 16, 234, 744, 96, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdWoundPackingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1244), new Integer(anchoringHelper244.getX()), new Integer(anchoringHelper244.getY()), new Integer(anchoringHelper244.getWidth()), new Integer(anchoringHelper244.getHeight()), new Integer(startTabIndex.intValue() + 158), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdWoundPackingsTemp);
				grdWoundPackingsGrid grdWoundPackings = (grdWoundPackingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWoundPackingsGrid.class, m_grdWoundPackingsTemp);
				grdWoundPackings.addStringColumn("Packing Type", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWoundPackings.addStringColumn("Type Comments", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWoundPackings.addStringColumn("In-place on departure", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWoundPackings.addStringColumn("Packing Site", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWoundPackings.addStringColumn("Site Comments", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWoundPackings.addStringColumn("Procedure", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdWoundPackings);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper245 = new RuntimeAnchoring(designSize, runtimeSize, 768, 490, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1245), new Integer(anchoringHelper245.getX()), new Integer(anchoringHelper245.getY()), new Integer(anchoringHelper245.getWidth()), new Integer(anchoringHelper245.getHeight()), new Integer(startTabIndex.intValue() + 165), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove Skin Closure", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper246 = new RuntimeAnchoring(designSize, runtimeSize, 768, 418, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1246), new Integer(anchoringHelper246.getX()), new Integer(anchoringHelper246.getY()), new Integer(anchoringHelper246.getWidth()), new Integer(anchoringHelper246.getHeight()), new Integer(startTabIndex.intValue() + 163), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add Skin Closure", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper247 = new RuntimeAnchoring(designSize, runtimeSize, 768, 454, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1247), new Integer(anchoringHelper247.getX()), new Integer(anchoringHelper247.getY()), new Integer(anchoringHelper247.getWidth()), new Integer(anchoringHelper247.getHeight()), new Integer(startTabIndex.intValue() + 164), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit Skin Closure", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper248 = new RuntimeAnchoring(designSize, runtimeSize, 768, 78, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1248), new Integer(anchoringHelper248.getX()), new Integer(anchoringHelper248.getY()), new Integer(anchoringHelper248.getWidth()), new Integer(anchoringHelper248.getHeight()), new Integer(startTabIndex.intValue() + 156), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit Specimen", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper249 = new RuntimeAnchoring(designSize, runtimeSize, 768, 114, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1249), new Integer(anchoringHelper249.getX()), new Integer(anchoringHelper249.getY()), new Integer(anchoringHelper249.getWidth()), new Integer(anchoringHelper249.getHeight()), new Integer(startTabIndex.intValue() + 157), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove Specimen", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper250 = new RuntimeAnchoring(designSize, runtimeSize, 768, 42, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1250), new Integer(anchoringHelper250.getX()), new Integer(anchoringHelper250.getY()), new Integer(anchoringHelper250.getWidth()), new Integer(anchoringHelper250.getHeight()), new Integer(startTabIndex.intValue() + 155), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add Specimen", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper251 = new RuntimeAnchoring(designSize, runtimeSize, 768, 306, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1251), new Integer(anchoringHelper251.getX()), new Integer(anchoringHelper251.getY()), new Integer(anchoringHelper251.getWidth()), new Integer(anchoringHelper251.getHeight()), new Integer(startTabIndex.intValue() + 161), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove Wound Packing", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper252 = new RuntimeAnchoring(designSize, runtimeSize, 768, 234, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1252), new Integer(anchoringHelper252.getX()), new Integer(anchoringHelper252.getY()), new Integer(anchoringHelper252.getWidth()), new Integer(anchoringHelper252.getHeight()), new Integer(startTabIndex.intValue() + 159), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add Wound Packing", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper253 = new RuntimeAnchoring(designSize, runtimeSize, 768, 270, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1253), new Integer(anchoringHelper253.getX()), new Integer(anchoringHelper253.getY()), new Integer(anchoringHelper253.getWidth()), new Integer(anchoringHelper253.getHeight()), new Integer(startTabIndex.intValue() + 160), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit Wound Packing", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public grdSkinClosuresGrid grdSkinClosures()
			{
				return (grdSkinClosuresGrid)super.getGrid(0);
			}
			public grdSpecimensGrid grdSpecimens()
			{
				return (grdSpecimensGrid)super.getGrid(1);
			}
			public grdWoundPackingsGrid grdWoundPackings()
			{
				return (grdWoundPackingsGrid)super.getGrid(2);
			}
			public ImageButton imbRemoveSkinClosure()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbAddSkinClosure()
			{
				return (ImageButton)super.getControl(7);
			}
			public ImageButton imbEditSkinClosures()
			{
				return (ImageButton)super.getControl(8);
			}
			public ImageButton imbEditSpecimen()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbRemoveSpecimen()
			{
				return (ImageButton)super.getControl(10);
			}
			public ImageButton imbAddSpecimen()
			{
				return (ImageButton)super.getControl(11);
			}
			public ImageButton imbRemoveWoundPacking()
			{
				return (ImageButton)super.getControl(12);
			}
			public ImageButton imbAddWoundPacking()
			{
				return (ImageButton)super.getControl(13);
			}
			public ImageButton imbEditWoundPacking()
			{
				return (ImageButton)super.getControl(14);
			}
		}
		public static class tabImplantsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdOtherEquipmentRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdOtherEquipmentRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColEquipDescReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColEquipDescReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColEquipDescOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColEquipDesc(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColEquipDesc()
				{
					return (String)super.row.get(0);
				}
				public void setColEquipDesc(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColEquipDescTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColUnitNoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColUnitNoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColUnitNoOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColUnitNo(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColUnitNo()
				{
					return (String)super.row.get(1);
				}
				public void setColUnitNo(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColUnitNoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColCommentsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColCommentsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColCommentsOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColComments(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColComments()
				{
					return (String)super.row.get(2);
				}
				public void setColComments(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColCommentsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.clinical.vo.EquipmentIntraOpVo getValue()
				{
					return (ims.clinical.vo.EquipmentIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.EquipmentIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdOtherEquipmentRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdOtherEquipmentRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdOtherEquipmentRow get(int index)
				{
					return new grdOtherEquipmentRow(super.collection.get(index));
				}
				public grdOtherEquipmentRow newRow()
				{
					return new grdOtherEquipmentRow(super.collection.newRow());
				}
				public grdOtherEquipmentRow newRow(boolean autoSelect)
				{
					return new grdOtherEquipmentRow(super.collection.newRow(autoSelect));
				}
				public grdOtherEquipmentRow newRowAt(int index)
				{
					return new grdOtherEquipmentRow(super.collection.newRowAt(index));
				}
				public grdOtherEquipmentRow newRowAt(int index, boolean autoSelect)
				{
					return new grdOtherEquipmentRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdOtherEquipmentGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.EquipmentIntraOpVoCollection getValues()
				{
					ims.clinical.vo.EquipmentIntraOpVoCollection listOfValues = new ims.clinical.vo.EquipmentIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.EquipmentIntraOpVo getValue()
				{
					return (ims.clinical.vo.EquipmentIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.EquipmentIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdOtherEquipmentRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdOtherEquipmentRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdOtherEquipmentRowCollection getRows()
				{
					return new grdOtherEquipmentRowCollection(super.grid.getRows());
				}
				public grdOtherEquipmentRow getRowByValue(ims.clinical.vo.EquipmentIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdOtherEquipmentRow(row);
				}
				public void setColEquipDescHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColEquipDescHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColUnitNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColUnitNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColCommentsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColCommentsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdArterialClampsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdArterialClampsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColClampSizeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColClampSizeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColClampSizeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColClampSize()
				{
					return (String)super.row.get(0);
				}
				public void setColClampSize(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColClampSizeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColTimeOnReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColTimeOnReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColTimeOnOpened()
				{
					super.row.showOpened(1);
				}
				public String getColTimeOn()
				{
					return (String)super.row.get(1);
				}
				public void setColTimeOn(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColTimeOnTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColTimeOffReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColTimeOffReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColTimeOffOpened()
				{
					super.row.showOpened(2);
				}
				public String getColTimeOff()
				{
					return (String)super.row.get(2);
				}
				public void setColTimeOff(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColTimeOffTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.clinical.vo.ArterialClampsIntraOpVo getValue()
				{
					return (ims.clinical.vo.ArterialClampsIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.ArterialClampsIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdArterialClampsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdArterialClampsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdArterialClampsRow get(int index)
				{
					return new grdArterialClampsRow(super.collection.get(index));
				}
				public grdArterialClampsRow newRow()
				{
					return new grdArterialClampsRow(super.collection.newRow());
				}
				public grdArterialClampsRow newRow(boolean autoSelect)
				{
					return new grdArterialClampsRow(super.collection.newRow(autoSelect));
				}
				public grdArterialClampsRow newRowAt(int index)
				{
					return new grdArterialClampsRow(super.collection.newRowAt(index));
				}
				public grdArterialClampsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdArterialClampsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdArterialClampsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.ArterialClampsIntraOpVoCollection getValues()
				{
					ims.clinical.vo.ArterialClampsIntraOpVoCollection listOfValues = new ims.clinical.vo.ArterialClampsIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.ArterialClampsIntraOpVo getValue()
				{
					return (ims.clinical.vo.ArterialClampsIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.ArterialClampsIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdArterialClampsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdArterialClampsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdArterialClampsRowCollection getRows()
				{
					return new grdArterialClampsRowCollection(super.grid.getRows());
				}
				public grdArterialClampsRow getRowByValue(ims.clinical.vo.ArterialClampsIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdArterialClampsRow(row);
				}
				public void setColClampSizeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColClampSizeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColTimeOnHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColTimeOnHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColTimeOffHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColTimeOffHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdImplantsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdImplantsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColImplantDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColImplantDescriptionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColImplantDescriptionOpened()
				{
					super.row.showOpened(0);
				}
				public String getColImplantDescription()
				{
					return (String)super.row.get(0);
				}
				public void setColImplantDescription(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColImplantDescriptionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColManufacturerReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColManufacturerReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColManufacturerOpened()
				{
					super.row.showOpened(1);
				}
				public String getColManufacturer()
				{
					return (String)super.row.get(1);
				}
				public void setColManufacturer(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColManufacturerTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColCatNoReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColCatNoReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColCatNoOpened()
				{
					super.row.showOpened(2);
				}
				public String getColCatNo()
				{
					return (String)super.row.get(2);
				}
				public void setColCatNo(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColCatNoTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColLotNoReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColLotNoReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColLotNoOpened()
				{
					super.row.showOpened(3);
				}
				public String getColLotNo()
				{
					return (String)super.row.get(3);
				}
				public void setColLotNo(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColLotNoTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSerialNoReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSerialNoReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSerialNoOpened()
				{
					super.row.showOpened(4);
				}
				public String getColSerialNo()
				{
					return (String)super.row.get(4);
				}
				public void setColSerialNo(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSerialNoTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColQtyReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColQtyReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColQtyOpened()
				{
					super.row.showOpened(5);
				}
				public String getColQty()
				{
					return (String)super.row.get(5);
				}
				public void setColQty(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColQtyTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColSizeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColSizeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColSizeOpened()
				{
					super.row.showOpened(6);
				}
				public String getColSize()
				{
					return (String)super.row.get(6);
				}
				public void setColSize(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColSizeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColExpDateReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColExpDateReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColExpDateOpened()
				{
					super.row.showOpened(7);
				}
				public String getColExpDate()
				{
					return (String)super.row.get(7);
				}
				public void setColExpDate(String value)
				{
					super.row.set(7, value);
				}
				public void setCellColExpDateTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.clinical.vo.ImplantsIntraOpVo getValue()
				{
					return (ims.clinical.vo.ImplantsIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.ImplantsIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdImplantsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdImplantsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdImplantsRow get(int index)
				{
					return new grdImplantsRow(super.collection.get(index));
				}
				public grdImplantsRow newRow()
				{
					return new grdImplantsRow(super.collection.newRow());
				}
				public grdImplantsRow newRow(boolean autoSelect)
				{
					return new grdImplantsRow(super.collection.newRow(autoSelect));
				}
				public grdImplantsRow newRowAt(int index)
				{
					return new grdImplantsRow(super.collection.newRowAt(index));
				}
				public grdImplantsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdImplantsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdImplantsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.ImplantsIntraOpVoCollection getValues()
				{
					ims.clinical.vo.ImplantsIntraOpVoCollection listOfValues = new ims.clinical.vo.ImplantsIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.ImplantsIntraOpVo getValue()
				{
					return (ims.clinical.vo.ImplantsIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.ImplantsIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdImplantsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdImplantsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdImplantsRowCollection getRows()
				{
					return new grdImplantsRowCollection(super.grid.getRows());
				}
				public grdImplantsRow getRowByValue(ims.clinical.vo.ImplantsIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdImplantsRow(row);
				}
				public void setColImplantDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColImplantDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColManufacturerHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColManufacturerHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColCatNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColCatNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColLotNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColLotNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColSerialNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSerialNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColQtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColQtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColSizeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColSizeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColExpDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColExpDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper254 = new RuntimeAnchoring(designSize, runtimeSize, 8, 400, 800, 184, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1254), new Integer(anchoringHelper254.getX()), new Integer(anchoringHelper254.getY()), new Integer(anchoringHelper254.getWidth()), new Integer(anchoringHelper254.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Other Equipment", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper255 = new RuntimeAnchoring(designSize, runtimeSize, 8, 208, 800, 184, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1255), new Integer(anchoringHelper255.getX()), new Integer(anchoringHelper255.getY()), new Integer(anchoringHelper255.getWidth()), new Integer(anchoringHelper255.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Arterial Clamps", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper256 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 192, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1256), new Integer(anchoringHelper256.getX()), new Integer(anchoringHelper256.getY()), new Integer(anchoringHelper256.getWidth()), new Integer(anchoringHelper256.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Implants", new Integer(2), ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper257 = new RuntimeAnchoring(designSize, runtimeSize, 16, 437, 744, 149, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdOtherEquipmentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1257), new Integer(anchoringHelper257.getX()), new Integer(anchoringHelper257.getY()), new Integer(anchoringHelper257.getWidth()), new Integer(anchoringHelper257.getHeight()), new Integer(startTabIndex.intValue() + 174), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdOtherEquipmentTemp);
				grdOtherEquipmentGrid grdOtherEquipment = (grdOtherEquipmentGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOtherEquipmentGrid.class, m_grdOtherEquipmentTemp);
				grdOtherEquipment.addStringColumn("Equipment Description", 0, 0, 200, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOtherEquipment.addStringColumn("Unit Number", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOtherEquipment.addStringColumn("Comments", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdOtherEquipment);
				RuntimeAnchoring anchoringHelper258 = new RuntimeAnchoring(designSize, runtimeSize, 16, 244, 744, 150, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdArterialClampsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1258), new Integer(anchoringHelper258.getX()), new Integer(anchoringHelper258.getY()), new Integer(anchoringHelper258.getWidth()), new Integer(anchoringHelper258.getHeight()), new Integer(startTabIndex.intValue() + 170), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdArterialClampsTemp);
				grdArterialClampsGrid grdArterialClamps = (grdArterialClampsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdArterialClampsGrid.class, m_grdArterialClampsTemp);
				grdArterialClamps.addStringColumn("Clamp Size", 0, 0, 200, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdArterialClamps.addStringColumn("Time On", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdArterialClamps.addStringColumn("Time Off", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdArterialClamps);
				RuntimeAnchoring anchoringHelper259 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 744, 159, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdImplantsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1259), new Integer(anchoringHelper259.getX()), new Integer(anchoringHelper259.getY()), new Integer(anchoringHelper259.getWidth()), new Integer(anchoringHelper259.getHeight()), new Integer(startTabIndex.intValue() + 166), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdImplantsTemp);
				grdImplantsGrid grdImplants = (grdImplantsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdImplantsGrid.class, m_grdImplantsTemp);
				grdImplants.addStringColumn("Implant Description", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImplants.addStringColumn("Manufacturer", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImplants.addStringColumn("Catalogue Number", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImplants.addStringColumn("Lot Number", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImplants.addStringColumn("Serial Number", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImplants.addStringColumn("Quantity", 0, 0, 75, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImplants.addStringColumn("Size", 0, 0, 55, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdImplants.addStringColumn("Expiry Date", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdImplants);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper260 = new RuntimeAnchoring(designSize, runtimeSize, 768, 506, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1260), new Integer(anchoringHelper260.getX()), new Integer(anchoringHelper260.getY()), new Integer(anchoringHelper260.getWidth()), new Integer(anchoringHelper260.getHeight()), new Integer(startTabIndex.intValue() + 177), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper261 = new RuntimeAnchoring(designSize, runtimeSize, 768, 434, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1261), new Integer(anchoringHelper261.getX()), new Integer(anchoringHelper261.getY()), new Integer(anchoringHelper261.getWidth()), new Integer(anchoringHelper261.getHeight()), new Integer(startTabIndex.intValue() + 175), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper262 = new RuntimeAnchoring(designSize, runtimeSize, 768, 470, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1262), new Integer(anchoringHelper262.getX()), new Integer(anchoringHelper262.getY()), new Integer(anchoringHelper262.getWidth()), new Integer(anchoringHelper262.getHeight()), new Integer(startTabIndex.intValue() + 176), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper263 = new RuntimeAnchoring(designSize, runtimeSize, 768, 314, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1263), new Integer(anchoringHelper263.getX()), new Integer(anchoringHelper263.getY()), new Integer(anchoringHelper263.getWidth()), new Integer(anchoringHelper263.getHeight()), new Integer(startTabIndex.intValue() + 173), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper264 = new RuntimeAnchoring(designSize, runtimeSize, 768, 242, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1264), new Integer(anchoringHelper264.getX()), new Integer(anchoringHelper264.getY()), new Integer(anchoringHelper264.getWidth()), new Integer(anchoringHelper264.getHeight()), new Integer(startTabIndex.intValue() + 171), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper265 = new RuntimeAnchoring(designSize, runtimeSize, 768, 278, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1265), new Integer(anchoringHelper265.getX()), new Integer(anchoringHelper265.getY()), new Integer(anchoringHelper265.getWidth()), new Integer(anchoringHelper265.getHeight()), new Integer(startTabIndex.intValue() + 172), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper266 = new RuntimeAnchoring(designSize, runtimeSize, 768, 78, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1266), new Integer(anchoringHelper266.getX()), new Integer(anchoringHelper266.getY()), new Integer(anchoringHelper266.getWidth()), new Integer(anchoringHelper266.getHeight()), new Integer(startTabIndex.intValue() + 168), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper267 = new RuntimeAnchoring(designSize, runtimeSize, 768, 114, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1267), new Integer(anchoringHelper267.getX()), new Integer(anchoringHelper267.getY()), new Integer(anchoringHelper267.getWidth()), new Integer(anchoringHelper267.getHeight()), new Integer(startTabIndex.intValue() + 169), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper268 = new RuntimeAnchoring(designSize, runtimeSize, 768, 42, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1268), new Integer(anchoringHelper268.getX()), new Integer(anchoringHelper268.getY()), new Integer(anchoringHelper268.getWidth()), new Integer(anchoringHelper268.getHeight()), new Integer(startTabIndex.intValue() + 167), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public grdOtherEquipmentGrid grdOtherEquipment()
			{
				return (grdOtherEquipmentGrid)super.getGrid(0);
			}
			public grdArterialClampsGrid grdArterialClamps()
			{
				return (grdArterialClampsGrid)super.getGrid(1);
			}
			public grdImplantsGrid grdImplants()
			{
				return (grdImplantsGrid)super.getGrid(2);
			}
			public ImageButton imbRemoveOtherEquipment()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbAddOtherEquipment()
			{
				return (ImageButton)super.getControl(7);
			}
			public ImageButton imbEditOtherEquipment()
			{
				return (ImageButton)super.getControl(8);
			}
			public ImageButton imbRemoveArterialClamps()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbAddArterialClamps()
			{
				return (ImageButton)super.getControl(10);
			}
			public ImageButton imbEditArterialClamp()
			{
				return (ImageButton)super.getControl(11);
			}
			public ImageButton imbEditImplants()
			{
				return (ImageButton)super.getControl(12);
			}
			public ImageButton imbRemoveImplants()
			{
				return (ImageButton)super.getControl(13);
			}
			public ImageButton imbAddImplants()
			{
				return (ImageButton)super.getControl(14);
			}
		}
		public static class tabTourniquetContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTourniquetSiteComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.TourniquetSite value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.TourniquetSite value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.TourniquetSite value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.TourniquetSite value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.TourniquetSite value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.TourniquetSite getValue()
				{
					return (ims.clinical.vo.lookups.TourniquetSite)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.TourniquetSite value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdTourniquetRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTourniquetRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSiteReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSiteReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSiteOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSite()
				{
					return (String)super.row.get(0);
				}
				public void setColSite(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSiteTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColInflatedReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColInflatedReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColInflatedOpened()
				{
					super.row.showOpened(1);
				}
				public String getColInflated()
				{
					return (String)super.row.get(1);
				}
				public void setColInflated(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColInflatedTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDeflatedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDeflatedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDeflatedOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDeflated()
				{
					return (String)super.row.get(2);
				}
				public void setColDeflated(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDeflatedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.clinical.vo.TourniquetIntraOpVo getValue()
				{
					return (ims.clinical.vo.TourniquetIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.TourniquetIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTourniquetRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTourniquetRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTourniquetRow get(int index)
				{
					return new grdTourniquetRow(super.collection.get(index));
				}
				public grdTourniquetRow newRow()
				{
					return new grdTourniquetRow(super.collection.newRow());
				}
				public grdTourniquetRow newRow(boolean autoSelect)
				{
					return new grdTourniquetRow(super.collection.newRow(autoSelect));
				}
				public grdTourniquetRow newRowAt(int index)
				{
					return new grdTourniquetRow(super.collection.newRowAt(index));
				}
				public grdTourniquetRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTourniquetRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTourniquetGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.TourniquetIntraOpVoCollection getValues()
				{
					ims.clinical.vo.TourniquetIntraOpVoCollection listOfValues = new ims.clinical.vo.TourniquetIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.TourniquetIntraOpVo getValue()
				{
					return (ims.clinical.vo.TourniquetIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.TourniquetIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdTourniquetRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTourniquetRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTourniquetRowCollection getRows()
				{
					return new grdTourniquetRowCollection(super.grid.getRows());
				}
				public grdTourniquetRow getRowByValue(ims.clinical.vo.TourniquetIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTourniquetRow(row);
				}
				public void setColSiteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSiteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColInflatedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColInflatedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDeflatedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDeflatedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper269 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 800, 568, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1269), new Integer(anchoringHelper269.getX()), new Integer(anchoringHelper269.getY()), new Integer(anchoringHelper269.getWidth()), new Integer(anchoringHelper269.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Tourniquet Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper270 = new RuntimeAnchoring(designSize, runtimeSize, 56, 282, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1270), new Integer(anchoringHelper270.getX()), new Integer(anchoringHelper270.getY()), new Integer(anchoringHelper270.getWidth()), new Integer(anchoringHelper270.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper271 = new RuntimeAnchoring(designSize, runtimeSize, 56, 318, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1271), new Integer(anchoringHelper271.getX()), new Integer(anchoringHelper271.getY()), new Integer(anchoringHelper271.getWidth()), new Integer(anchoringHelper271.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Inflated:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper272 = new RuntimeAnchoring(designSize, runtimeSize, 56, 354, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1272), new Integer(anchoringHelper272.getX()), new Integer(anchoringHelper272.getY()), new Integer(anchoringHelper272.getWidth()), new Integer(anchoringHelper272.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Deflated:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper273 = new RuntimeAnchoring(designSize, runtimeSize, 24, 552, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1273), new Integer(anchoringHelper273.getX()), new Integer(anchoringHelper273.getY()), new Integer(anchoringHelper273.getWidth()), new Integer(anchoringHelper273.getHeight()), new Integer(startTabIndex.intValue() + 182), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add Tourniquet", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper274 = new RuntimeAnchoring(designSize, runtimeSize, 136, 552, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1274), new Integer(anchoringHelper274.getX()), new Integer(anchoringHelper274.getY()), new Integer(anchoringHelper274.getWidth()), new Integer(anchoringHelper274.getHeight()), new Integer(startTabIndex.intValue() + 183), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Tourniquet", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper275 = new RuntimeAnchoring(designSize, runtimeSize, 576, 552, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1275), new Integer(anchoringHelper275.getX()), new Integer(anchoringHelper275.getY()), new Integer(anchoringHelper275.getWidth()), new Integer(anchoringHelper275.getHeight()), new Integer(startTabIndex.intValue() + 184), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Tourniquet", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper276 = new RuntimeAnchoring(designSize, runtimeSize, 696, 552, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1276), new Integer(anchoringHelper276.getX()), new Integer(anchoringHelper276.getY()), new Integer(anchoringHelper276.getWidth()), new Integer(anchoringHelper276.getHeight()), new Integer(startTabIndex.intValue() + 185), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Tourniquet", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper277 = new RuntimeAnchoring(designSize, runtimeSize, 152, 352, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1277), new Integer(anchoringHelper277.getX()), new Integer(anchoringHelper277.getY()), new Integer(anchoringHelper277.getWidth()), new Integer(anchoringHelper277.getHeight()), new Integer(startTabIndex.intValue() + 181), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper278 = new RuntimeAnchoring(designSize, runtimeSize, 152, 316, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1278), new Integer(anchoringHelper278.getX()), new Integer(anchoringHelper278.getY()), new Integer(anchoringHelper278.getWidth()), new Integer(anchoringHelper278.getHeight()), new Integer(startTabIndex.intValue() + 180), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper279 = new RuntimeAnchoring(designSize, runtimeSize, 152, 280, 504, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTourniquetSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1279), new Integer(anchoringHelper279.getX()), new Integer(anchoringHelper279.getY()), new Integer(anchoringHelper279.getWidth()), new Integer(anchoringHelper279.getHeight()), new Integer(startTabIndex.intValue() + 179), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTourniquetSiteTemp);
				cmbTourniquetSiteComboBox cmbTourniquetSite = (cmbTourniquetSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTourniquetSiteComboBox.class, m_cmbTourniquetSiteTemp);
				super.addComboBox(cmbTourniquetSite);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper280 = new RuntimeAnchoring(designSize, runtimeSize, 24, 51, 784, 215, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdTourniquetTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1280), new Integer(anchoringHelper280.getX()), new Integer(anchoringHelper280.getY()), new Integer(anchoringHelper280.getWidth()), new Integer(anchoringHelper280.getHeight()), new Integer(startTabIndex.intValue() + 178), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTourniquetTemp);
				grdTourniquetGrid grdTourniquet = (grdTourniquetGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTourniquetGrid.class, m_grdTourniquetTemp);
				grdTourniquet.addStringColumn("Site", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTourniquet.addStringColumn("Inflated", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTourniquet.addStringColumn("Deflated", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdTourniquet);
			}

			public Button btnAddTourniquet()
			{
				return (Button)super.getControl(4);
			}
			public Button btnEditTourniquet()
			{
				return (Button)super.getControl(5);
			}
			public Button btnSaveTourniquet()
			{
				return (Button)super.getControl(6);
			}
			public Button btnCancelTourniquet()
			{
				return (Button)super.getControl(7);
			}
			public DateTimeControl dtimTourniquetDeflated()
			{
				return (DateTimeControl)super.getControl(8);
			}
			public DateTimeControl dtimTournuetInflated()
			{
				return (DateTimeControl)super.getControl(9);
			}
			public cmbTourniquetSiteComboBox cmbTourniquetSite()
			{
				return (cmbTourniquetSiteComboBox)super.getComboBox(0);
			}
			public grdTourniquetGrid grdTourniquet()
			{
				return (grdTourniquetGrid)super.getGrid(0);
			}
		}
		public static class tabHandoverAndFinalCountsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdIncorrectRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdIncorrectRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColProcedureReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColProcedureOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColProcedure(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColProcedure()
				{
					return (String)super.row.get(0);
				}
				public void setColProcedure(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColProcedureTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColMissingItemsReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColMissingItemsReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColMissingItemsOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColMissingItems(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColMissingItems()
				{
					return (String)super.row.get(1);
				}
				public void setColMissingItems(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColMissingItemsTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColActionsTakenReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColActionsTakenReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColActionsTakenOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColActionsTaken(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColActionsTaken()
				{
					return (String)super.row.get(2);
				}
				public void setColActionsTaken(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColActionsTakenTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColVerifiedByReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColVerifiedByReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColVerifiedByOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColVerifiedBy(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColVerifiedBy()
				{
					return (String)super.row.get(3);
				}
				public void setColVerifiedBy(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColVerifiedByTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdIncorrectRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdIncorrectRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdIncorrectRow get(int index)
				{
					return new grdIncorrectRow(super.collection.get(index));
				}
				public grdIncorrectRow newRow()
				{
					return new grdIncorrectRow(super.collection.newRow());
				}
				public grdIncorrectRow newRow(boolean autoSelect)
				{
					return new grdIncorrectRow(super.collection.newRow(autoSelect));
				}
				public grdIncorrectRow newRowAt(int index)
				{
					return new grdIncorrectRow(super.collection.newRowAt(index));
				}
				public grdIncorrectRow newRowAt(int index, boolean autoSelect)
				{
					return new grdIncorrectRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdIncorrectGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdIncorrectRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdIncorrectRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdIncorrectRowCollection getRows()
				{
					return new grdIncorrectRowCollection(super.grid.getRows());
				}
				public grdIncorrectRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdIncorrectRow(row);
				}
				public void setColProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColMissingItemsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColMissingItemsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColActionsTakenHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColActionsTakenHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColVerifiedByHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColVerifiedByHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public static class grdFinalRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFinalRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColProcedureReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColProcedureOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColProcedure(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColProcedure()
				{
					return (String)super.row.get(0);
				}
				public void setColProcedure(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColProcedureTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSwabsAccountableReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSwabsAccountableReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSwabsAccountableOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColSwabsAccountable(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColSwabsAccountable()
				{
					return (String)super.row.get(1);
				}
				public void setColSwabsAccountable(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColSwabsAccountableTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColInstrumentsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColInstrumentsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColInstrumentsOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColInstruments(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColInstruments()
				{
					return (String)super.row.get(2);
				}
				public void setColInstruments(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColInstrumentsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSharpsReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSharpsReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSharpsOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColSharps(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColSharps()
				{
					return (String)super.row.get(3);
				}
				public void setColSharps(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSharpsTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.clinical.vo.FinalCountsIntraOpVo getValue()
				{
					return (ims.clinical.vo.FinalCountsIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.FinalCountsIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFinalRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFinalRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFinalRow get(int index)
				{
					return new grdFinalRow(super.collection.get(index));
				}
				public grdFinalRow newRow()
				{
					return new grdFinalRow(super.collection.newRow());
				}
				public grdFinalRow newRow(boolean autoSelect)
				{
					return new grdFinalRow(super.collection.newRow(autoSelect));
				}
				public grdFinalRow newRowAt(int index)
				{
					return new grdFinalRow(super.collection.newRowAt(index));
				}
				public grdFinalRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFinalRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFinalGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.FinalCountsIntraOpVoCollection getValues()
				{
					ims.clinical.vo.FinalCountsIntraOpVoCollection listOfValues = new ims.clinical.vo.FinalCountsIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.FinalCountsIntraOpVo getValue()
				{
					return (ims.clinical.vo.FinalCountsIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.FinalCountsIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdFinalRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFinalRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFinalRowCollection getRows()
				{
					return new grdFinalRowCollection(super.grid.getRows());
				}
				public grdFinalRow getRowByValue(ims.clinical.vo.FinalCountsIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFinalRow(row);
				}
				public void setColProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSwabsAccountableHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSwabsAccountableHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColInstrumentsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColInstrumentsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSharpsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSharpsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public static class grdHandoverRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHandoverRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColProcedureReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColProcedureOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColProcedure(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColProcedure()
				{
					return (String)super.row.get(0);
				}
				public void setColProcedure(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColProcedureTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColCountTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColCountTypeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColCountTypeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColCountType(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColCountType()
				{
					return (String)super.row.get(1);
				}
				public void setColCountType(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColCountTypeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColCountStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColCountStatusReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColCountStatusOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColCountStatus(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColCountStatus()
				{
					return (String)super.row.get(2);
				}
				public void setColCountStatus(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColCountStatusTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColScrubPractitionerReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColScrubPractitionerReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColScrubPractitionerOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColScrubPractitioner(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColScrubPractitioner()
				{
					return (String)super.row.get(3);
				}
				public void setColScrubPractitioner(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColScrubPractitionerTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColCirculatorReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColCirculatorReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColCirculatorOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColCirculator(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColCirculator()
				{
					return (String)super.row.get(4);
				}
				public void setColCirculator(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColCirculatorTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColIncorrectCountStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColIncorrectCountStatusReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColIncorrectCountStatusOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColIncorrectCountStatus(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColIncorrectCountStatus()
				{
					return (String)super.row.get(5);
				}
				public void setColIncorrectCountStatus(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColIncorrectCountStatusTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.clinical.vo.HandoverCountsIntraOpVo getValue()
				{
					return (ims.clinical.vo.HandoverCountsIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.HandoverCountsIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHandoverRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHandoverRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHandoverRow get(int index)
				{
					return new grdHandoverRow(super.collection.get(index));
				}
				public grdHandoverRow newRow()
				{
					return new grdHandoverRow(super.collection.newRow());
				}
				public grdHandoverRow newRow(boolean autoSelect)
				{
					return new grdHandoverRow(super.collection.newRow(autoSelect));
				}
				public grdHandoverRow newRowAt(int index)
				{
					return new grdHandoverRow(super.collection.newRowAt(index));
				}
				public grdHandoverRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHandoverRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHandoverGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinical.vo.HandoverCountsIntraOpVoCollection getValues()
				{
					ims.clinical.vo.HandoverCountsIntraOpVoCollection listOfValues = new ims.clinical.vo.HandoverCountsIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.HandoverCountsIntraOpVo getValue()
				{
					return (ims.clinical.vo.HandoverCountsIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.HandoverCountsIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdHandoverRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHandoverRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHandoverRowCollection getRows()
				{
					return new grdHandoverRowCollection(super.grid.getRows());
				}
				public grdHandoverRow getRowByValue(ims.clinical.vo.HandoverCountsIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHandoverRow(row);
				}
				public void setColProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColCountTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColCountTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColCountStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColCountStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColScrubPractitionerHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColScrubPractitionerHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColCirculatorHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColCirculatorHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColIncorrectCountStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColIncorrectCountStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper281 = new RuntimeAnchoring(designSize, runtimeSize, 12, 232, 800, 360, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1281), new Integer(anchoringHelper281.getX()), new Integer(anchoringHelper281.getY()), new Integer(anchoringHelper281.getWidth()), new Integer(anchoringHelper281.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Final Counts", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper282 = new RuntimeAnchoring(designSize, runtimeSize, 12, 8, 800, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1282), new Integer(anchoringHelper282.getX()), new Integer(anchoringHelper282.getY()), new Integer(anchoringHelper282.getWidth()), new Integer(anchoringHelper282.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Counts", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper283 = new RuntimeAnchoring(designSize, runtimeSize, 20, 413, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1283), new Integer(anchoringHelper283.getX()), new Integer(anchoringHelper283.getY()), new Integer(anchoringHelper283.getWidth()), new Integer(anchoringHelper283.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Incorrect Counts", new Integer(1), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper284 = new RuntimeAnchoring(designSize, runtimeSize, 20, 442, 744, 142, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdIncorrectTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1284), new Integer(anchoringHelper284.getX()), new Integer(anchoringHelper284.getY()), new Integer(anchoringHelper284.getWidth()), new Integer(anchoringHelper284.getHeight()), new Integer(startTabIndex.intValue() + 194), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdIncorrectTemp);
				grdIncorrectGrid grdIncorrect = (grdIncorrectGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIncorrectGrid.class, m_grdIncorrectTemp);
				grdIncorrect.addStringColumn("Procedure", 0, 0, 180, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIncorrect.addStringColumn("Missing Items", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIncorrect.addStringColumn("Actions Taken", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdIncorrect.addStringColumn("Verified By", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdIncorrect);
				RuntimeAnchoring anchoringHelper285 = new RuntimeAnchoring(designSize, runtimeSize, 20, 269, 744, 142, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdFinalTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1285), new Integer(anchoringHelper285.getX()), new Integer(anchoringHelper285.getY()), new Integer(anchoringHelper285.getWidth()), new Integer(anchoringHelper285.getHeight()), new Integer(startTabIndex.intValue() + 190), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFinalTemp);
				grdFinalGrid grdFinal = (grdFinalGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFinalGrid.class, m_grdFinalTemp);
				grdFinal.addStringColumn("Procedure", 0, 0, 180, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFinal.addStringColumn("Swab / Accountable Items", 0, 0, 180, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFinal.addStringColumn("Instruments", 0, 0, 200, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFinal.addStringColumn("Sharps / Other", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdFinal);
				RuntimeAnchoring anchoringHelper286 = new RuntimeAnchoring(designSize, runtimeSize, 20, 44, 744, 182, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdHandoverTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1286), new Integer(anchoringHelper286.getX()), new Integer(anchoringHelper286.getY()), new Integer(anchoringHelper286.getWidth()), new Integer(anchoringHelper286.getHeight()), new Integer(startTabIndex.intValue() + 186), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHandoverTemp);
				grdHandoverGrid grdHandover = (grdHandoverGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHandoverGrid.class, m_grdHandoverTemp);
				grdHandover.addStringColumn("Procedure", 0, 0, 170, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHandover.addStringColumn("Count Type", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHandover.addStringColumn("Count Status", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHandover.addStringColumn("Scrub Practitioner", 0, 0, 133, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHandover.addStringColumn("Circulator", 0, 0, 134, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHandover.addStringColumn("Incorrect Count Status", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdHandover);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper287 = new RuntimeAnchoring(designSize, runtimeSize, 772, 337, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1287), new Integer(anchoringHelper287.getX()), new Integer(anchoringHelper287.getY()), new Integer(anchoringHelper287.getWidth()), new Integer(anchoringHelper287.getHeight()), new Integer(startTabIndex.intValue() + 193), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper288 = new RuntimeAnchoring(designSize, runtimeSize, 772, 267, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1288), new Integer(anchoringHelper288.getX()), new Integer(anchoringHelper288.getY()), new Integer(anchoringHelper288.getWidth()), new Integer(anchoringHelper288.getHeight()), new Integer(startTabIndex.intValue() + 191), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper289 = new RuntimeAnchoring(designSize, runtimeSize, 772, 302, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1289), new Integer(anchoringHelper289.getX()), new Integer(anchoringHelper289.getY()), new Integer(anchoringHelper289.getWidth()), new Integer(anchoringHelper289.getHeight()), new Integer(startTabIndex.intValue() + 192), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper290 = new RuntimeAnchoring(designSize, runtimeSize, 772, 78, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1290), new Integer(anchoringHelper290.getX()), new Integer(anchoringHelper290.getY()), new Integer(anchoringHelper290.getWidth()), new Integer(anchoringHelper290.getHeight()), new Integer(startTabIndex.intValue() + 188), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Edit, form_images_local.Core.Edit, "Edit", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper291 = new RuntimeAnchoring(designSize, runtimeSize, 772, 113, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1291), new Integer(anchoringHelper291.getX()), new Integer(anchoringHelper291.getY()), new Integer(anchoringHelper291.getWidth()), new Integer(anchoringHelper291.getHeight()), new Integer(startTabIndex.intValue() + 189), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Remove, form_images_local.Core.Remove, "Remove", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper292 = new RuntimeAnchoring(designSize, runtimeSize, 772, 43, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1292), new Integer(anchoringHelper292.getX()), new Integer(anchoringHelper292.getY()), new Integer(anchoringHelper292.getWidth()), new Integer(anchoringHelper292.getHeight()), new Integer(startTabIndex.intValue() + 187), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Add, form_images_local.Core.Add, "Add", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public grdIncorrectGrid grdIncorrect()
			{
				return (grdIncorrectGrid)super.getGrid(0);
			}
			public grdFinalGrid grdFinal()
			{
				return (grdFinalGrid)super.getGrid(1);
			}
			public grdHandoverGrid grdHandover()
			{
				return (grdHandoverGrid)super.getGrid(2);
			}
			public ImageButton imbRemoveFinal()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbAddFinal()
			{
				return (ImageButton)super.getControl(7);
			}
			public ImageButton imbEditFinal()
			{
				return (ImageButton)super.getControl(8);
			}
			public ImageButton imbEditHandover()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbRemoveHandover()
			{
				return (ImageButton)super.getControl(10);
			}
			public ImageButton imbAddHandover()
			{
				return (ImageButton)super.getControl(11);
			}
		}
		public static class tabPerformedProceduresContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPerformedLateralityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRB getValue()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRB value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbSignOutSignatureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbPerformedProcedureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureLiteVo getValue()
				{
					return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdPerformedProceduresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPerformedProceduresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColHiddenPlannedProcValueReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColHiddenPlannedProcValueReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColHiddenPlannedProcValueOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColHiddenPlannedProcValue(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.clinical.vo.IntraOpPlannedProcedureVo getColHiddenPlannedProcValue()
				{
					return (ims.clinical.vo.IntraOpPlannedProcedureVo)super.row.get(0);
				}
				public void setColHiddenPlannedProcValue(ims.clinical.vo.IntraOpPlannedProcedureVo value)
				{
					super.row.set(0, value);
				}
				public void setCellColHiddenPlannedProcValueTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolProcedureReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolProcedureOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolProcedure(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolProcedure()
				{
					return (String)super.row.get(1);
				}
				public void setcolProcedure(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolProcedureTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolLateralityReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolLateralityReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolLateralityOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolLaterality(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getcolLaterality()
				{
					return (String)super.row.get(2);
				}
				public void setcolLaterality(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolLateralityTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolPlannedReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolPlannedReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolPlannedOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForcolPlanned(String value)
				{
					super.row.setTooltip(3, value);
				}
				public boolean getcolPlanned()
				{
					return ((Boolean)super.row.get(3)).booleanValue();
				}
				public void setcolPlanned(boolean value)
				{
					super.row.set(3, new Boolean(value));
				}
				public void setCellcolPlannedTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolPerformedReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolPerformedReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolPerformedOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForcolPerformed(String value)
				{
					super.row.setTooltip(4, value);
				}
				public boolean getcolPerformed()
				{
					return ((Boolean)super.row.get(4)).booleanValue();
				}
				public void setcolPerformed(boolean value)
				{
					super.row.set(4, new Boolean(value));
				}
				public void setCellcolPerformedTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.clinical.vo.PerformedProceduresIntraOpVo getValue()
				{
					return (ims.clinical.vo.PerformedProceduresIntraOpVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.PerformedProceduresIntraOpVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPerformedProceduresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPerformedProceduresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPerformedProceduresRow get(int index)
				{
					return new grdPerformedProceduresRow(super.collection.get(index));
				}
				public grdPerformedProceduresRow newRow()
				{
					return new grdPerformedProceduresRow(super.collection.newRow());
				}
				public grdPerformedProceduresRow newRow(boolean autoSelect)
				{
					return new grdPerformedProceduresRow(super.collection.newRow(autoSelect));
				}
				public grdPerformedProceduresRow newRowAt(int index)
				{
					return new grdPerformedProceduresRow(super.collection.newRowAt(index));
				}
				public grdPerformedProceduresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPerformedProceduresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPerformedProceduresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.clinical.vo.PerformedProceduresIntraOpVoCollection getValues()
				{
					ims.clinical.vo.PerformedProceduresIntraOpVoCollection listOfValues = new ims.clinical.vo.PerformedProceduresIntraOpVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.PerformedProceduresIntraOpVo getValue()
				{
					return (ims.clinical.vo.PerformedProceduresIntraOpVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.PerformedProceduresIntraOpVo value)
				{
					super.grid.setValue(value);
				}
				public grdPerformedProceduresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPerformedProceduresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPerformedProceduresRowCollection getRows()
				{
					return new grdPerformedProceduresRowCollection(super.grid.getRows());
				}
				public grdPerformedProceduresRow getRowByValue(ims.clinical.vo.PerformedProceduresIntraOpVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPerformedProceduresRow(row);
				}
				public void setColHiddenPlannedProcValueHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColHiddenPlannedProcValueHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolLateralityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolLateralityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolPlannedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolPlannedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolPerformedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolPerformedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
		
			public static class SignOutEquipmentProblemsRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper293 = new RuntimeAnchoring(designSize, runtimeSize, 368, 520, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper293.getX(), anchoringHelper293.getY(), anchoringHelper293.getWidth(), "N/A", startTabIndex.intValue() + 216);
					RuntimeAnchoring anchoringHelper294 = new RuntimeAnchoring(designSize, runtimeSize, 320, 520, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper294.getX(), anchoringHelper294.getY(), anchoringHelper294.getWidth(), "No", startTabIndex.intValue() + 215);
					RuntimeAnchoring anchoringHelper295 = new RuntimeAnchoring(designSize, runtimeSize, 264, 520, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper295.getX(), anchoringHelper295.getY(), anchoringHelper295.getWidth(), "Yes", startTabIndex.intValue() + 214);
				}
				public void setText(SignOutEquipmentProblemsEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public SignOutEquipmentProblemsEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return SignOutEquipmentProblemsEnumeration.None;
						case 0: return SignOutEquipmentProblemsEnumeration.rdoNAEquipment;
						case 1: return SignOutEquipmentProblemsEnumeration.rdoNoEquipment;
						case 2: return SignOutEquipmentProblemsEnumeration.rdoYesEquipment;
					}
					return null;
				}
				public void setValue(SignOutEquipmentProblemsEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(SignOutEquipmentProblemsEnumeration.None.id);
				}
				public boolean isEnabled(SignOutEquipmentProblemsEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(SignOutEquipmentProblemsEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(SignOutEquipmentProblemsEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(SignOutEquipmentProblemsEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class SignOutEquipmentProblemsEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static SignOutEquipmentProblemsEnumeration None = new SignOutEquipmentProblemsEnumeration(-1);
				public static SignOutEquipmentProblemsEnumeration rdoNAEquipment = new SignOutEquipmentProblemsEnumeration(0);
				public static SignOutEquipmentProblemsEnumeration rdoNoEquipment = new SignOutEquipmentProblemsEnumeration(1);
				public static SignOutEquipmentProblemsEnumeration rdoYesEquipment = new SignOutEquipmentProblemsEnumeration(2);
				private SignOutEquipmentProblemsEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((SignOutEquipmentProblemsEnumeration)o).id;
				}
				private int id;
			}
		
			public static class AntibioticsSurgicallyRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper296 = new RuntimeAnchoring(designSize, runtimeSize, 440, 400, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper296.getX(), anchoringHelper296.getY(), anchoringHelper296.getWidth(), "N/A", startTabIndex.intValue() + 210);
					RuntimeAnchoring anchoringHelper297 = new RuntimeAnchoring(designSize, runtimeSize, 392, 400, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper297.getX(), anchoringHelper297.getY(), anchoringHelper297.getWidth(), "No", startTabIndex.intValue() + 209);
					RuntimeAnchoring anchoringHelper298 = new RuntimeAnchoring(designSize, runtimeSize, 336, 400, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper298.getX(), anchoringHelper298.getY(), anchoringHelper298.getWidth(), "Yes", startTabIndex.intValue() + 208);
				}
				public void setText(AntibioticsSurgicallyEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public AntibioticsSurgicallyEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return AntibioticsSurgicallyEnumeration.None;
						case 0: return AntibioticsSurgicallyEnumeration.rdoNAAnti;
						case 1: return AntibioticsSurgicallyEnumeration.rdoNoAnti;
						case 2: return AntibioticsSurgicallyEnumeration.rdoYesAnti;
					}
					return null;
				}
				public void setValue(AntibioticsSurgicallyEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(AntibioticsSurgicallyEnumeration.None.id);
				}
				public boolean isEnabled(AntibioticsSurgicallyEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(AntibioticsSurgicallyEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(AntibioticsSurgicallyEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(AntibioticsSurgicallyEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class AntibioticsSurgicallyEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static AntibioticsSurgicallyEnumeration None = new AntibioticsSurgicallyEnumeration(-1);
				public static AntibioticsSurgicallyEnumeration rdoNAAnti = new AntibioticsSurgicallyEnumeration(0);
				public static AntibioticsSurgicallyEnumeration rdoNoAnti = new AntibioticsSurgicallyEnumeration(1);
				public static AntibioticsSurgicallyEnumeration rdoYesAnti = new AntibioticsSurgicallyEnumeration(2);
				private AntibioticsSurgicallyEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((AntibioticsSurgicallyEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper299 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 792, 312, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1293), new Integer(anchoringHelper299.getX()), new Integer(anchoringHelper299.getY()), new Integer(anchoringHelper299.getWidth()), new Integer(anchoringHelper299.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Performed Procedure Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper300 = new RuntimeAnchoring(designSize, runtimeSize, 16, 528, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1294), new Integer(anchoringHelper300.getX()), new Integer(anchoringHelper300.getY()), new Integer(anchoringHelper300.getWidth()), new Integer(anchoringHelper300.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "that need to be addressed?", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper301 = new RuntimeAnchoring(designSize, runtimeSize, 488, 496, 188, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1295), new Integer(anchoringHelper301.getX()), new Integer(anchoringHelper301.getY()), new Integer(anchoringHelper301.getWidth()), new Integer(anchoringHelper301.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Signature By Registered Practitioner:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper302 = new RuntimeAnchoring(designSize, runtimeSize, 16, 512, 238, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1296), new Integer(anchoringHelper302.getX()), new Integer(anchoringHelper302.getY()), new Integer(anchoringHelper302.getWidth()), new Integer(anchoringHelper302.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Have any equipment problems been identified ", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper303 = new RuntimeAnchoring(designSize, runtimeSize, 16, 426, 194, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1297), new Integer(anchoringHelper303.getX()), new Integer(anchoringHelper303.getY()), new Integer(anchoringHelper303.getWidth()), new Integer(anchoringHelper303.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time intra-operative antibiotics given:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper304 = new RuntimeAnchoring(designSize, runtimeSize, 16, 400, 312, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1298), new Integer(anchoringHelper304.getX()), new Integer(anchoringHelper304.getY()), new Integer(anchoringHelper304.getWidth()), new Integer(anchoringHelper304.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Did antibiotics become surgically indicated after knife to skin?", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper305 = new RuntimeAnchoring(designSize, runtimeSize, 56, 194, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1299), new Integer(anchoringHelper305.getX()), new Integer(anchoringHelper305.getY()), new Integer(anchoringHelper305.getWidth()), new Integer(anchoringHelper305.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper306 = new RuntimeAnchoring(designSize, runtimeSize, 56, 248, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1300), new Integer(anchoringHelper306.getX()), new Integer(anchoringHelper306.getY()), new Integer(anchoringHelper306.getWidth()), new Integer(anchoringHelper306.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Comment:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper307 = new RuntimeAnchoring(designSize, runtimeSize, 56, 222, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1301), new Integer(anchoringHelper307.getX()), new Integer(anchoringHelper307.getY()), new Integer(anchoringHelper307.getWidth()), new Integer(anchoringHelper307.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper308 = new RuntimeAnchoring(designSize, runtimeSize, 336, 316, 168, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1302), new Integer(anchoringHelper308.getX()), new Integer(anchoringHelper308.getY()), new Integer(anchoringHelper308.getWidth()), new Integer(anchoringHelper308.getHeight()), new Integer(startTabIndex.intValue() + 203), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "RIE Performed Procedure", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper309 = new RuntimeAnchoring(designSize, runtimeSize, 104, 316, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1303), new Integer(anchoringHelper309.getX()), new Integer(anchoringHelper309.getY()), new Integer(anchoringHelper309.getWidth()), new Integer(anchoringHelper309.getHeight()), new Integer(startTabIndex.intValue() + 201), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper310 = new RuntimeAnchoring(designSize, runtimeSize, 104, 316, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1304), new Integer(anchoringHelper310.getX()), new Integer(anchoringHelper310.getY()), new Integer(anchoringHelper310.getWidth()), new Integer(anchoringHelper310.getHeight()), new Integer(startTabIndex.intValue() + 202), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Flag As Performed", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper311 = new RuntimeAnchoring(designSize, runtimeSize, 24, 316, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1305), new Integer(anchoringHelper311.getX()), new Integer(anchoringHelper311.getY()), new Integer(anchoringHelper311.getWidth()), new Integer(anchoringHelper311.getHeight()), new Integer(startTabIndex.intValue() + 200), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper312 = new RuntimeAnchoring(designSize, runtimeSize, 640, 316, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1306), new Integer(anchoringHelper312.getX()), new Integer(anchoringHelper312.getY()), new Integer(anchoringHelper312.getWidth()), new Integer(anchoringHelper312.getHeight()), new Integer(startTabIndex.intValue() + 204), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper313 = new RuntimeAnchoring(designSize, runtimeSize, 720, 316, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1307), new Integer(anchoringHelper313.getX()), new Integer(anchoringHelper313.getY()), new Integer(anchoringHelper313.getWidth()), new Integer(anchoringHelper313.getHeight()), new Integer(startTabIndex.intValue() + 205), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper314 = new RuntimeAnchoring(designSize, runtimeSize, 664, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1308), new Integer(anchoringHelper314.getX()), new Integer(anchoringHelper314.getY()), new Integer(anchoringHelper314.getWidth()), new Integer(anchoringHelper314.getHeight()), new Integer(startTabIndex.intValue() + 219), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper315 = new RuntimeAnchoring(designSize, runtimeSize, 744, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1309), new Integer(anchoringHelper315.getX()), new Integer(anchoringHelper315.getY()), new Integer(anchoringHelper315.getWidth()), new Integer(anchoringHelper315.getHeight()), new Integer(startTabIndex.intValue() + 220), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper316 = new RuntimeAnchoring(designSize, runtimeSize, 8, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1310), new Integer(anchoringHelper316.getX()), new Integer(anchoringHelper316.getY()), new Integer(anchoringHelper316.getWidth()), new Integer(anchoringHelper316.getHeight()), new Integer(startTabIndex.intValue() + 218), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper317 = new RuntimeAnchoring(designSize, runtimeSize, 488, 398, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1311), new Integer(anchoringHelper317.getX()), new Integer(anchoringHelper317.getY()), new Integer(anchoringHelper317.getWidth()), new Integer(anchoringHelper317.getHeight()), new Integer(startTabIndex.intValue() + 224), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper318 = new RuntimeAnchoring(designSize, runtimeSize, 416, 520, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1312), new Integer(anchoringHelper318.getX()), new Integer(anchoringHelper318.getY()), new Integer(anchoringHelper318.getWidth()), new Integer(anchoringHelper318.getHeight()), new Integer(startTabIndex.intValue() + 222), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper319 = new RuntimeAnchoring(designSize, runtimeSize, 176, 248, 536, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1313), new Integer(anchoringHelper319.getX()), new Integer(anchoringHelper319.getY()), new Integer(anchoringHelper319.getWidth()), new Integer(anchoringHelper319.getHeight()), new Integer(startTabIndex.intValue() + 199), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper320 = new RuntimeAnchoring(designSize, runtimeSize, 232, 424, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1314), new Integer(anchoringHelper320.getX()), new Integer(anchoringHelper320.getY()), new Integer(anchoringHelper320.getWidth()), new Integer(anchoringHelper320.getHeight()), new Integer(startTabIndex.intValue() + 211), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper321 = new RuntimeAnchoring(designSize, runtimeSize, 176, 220, 536, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPerformedLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1315), new Integer(anchoringHelper321.getX()), new Integer(anchoringHelper321.getY()), new Integer(anchoringHelper321.getWidth()), new Integer(anchoringHelper321.getHeight()), new Integer(startTabIndex.intValue() + 198), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPerformedLateralityTemp);
				cmbPerformedLateralityComboBox cmbPerformedLaterality = (cmbPerformedLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPerformedLateralityComboBox.class, m_cmbPerformedLateralityTemp);
				super.addComboBox(cmbPerformedLaterality);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper322 = new RuntimeAnchoring(designSize, runtimeSize, 488, 528, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbSignOutSignatureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1316), new Integer(anchoringHelper322.getX()), new Integer(anchoringHelper322.getY()), new Integer(anchoringHelper322.getWidth()), new Integer(anchoringHelper322.getHeight()), new Integer(startTabIndex.intValue() + 217), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbSignOutSignatureTemp);
				qmbSignOutSignatureComboBox qmbSignOutSignature = (qmbSignOutSignatureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbSignOutSignatureComboBox.class, m_qmbSignOutSignatureTemp);
				super.addComboBox(qmbSignOutSignature);
				RuntimeAnchoring anchoringHelper323 = new RuntimeAnchoring(designSize, runtimeSize, 176, 192, 536, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbPerformedProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1317), new Integer(anchoringHelper323.getX()), new Integer(anchoringHelper323.getY()), new Integer(anchoringHelper323.getWidth()), new Integer(anchoringHelper323.getHeight()), new Integer(startTabIndex.intValue() + 197), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbPerformedProcedureTemp);
				qmbPerformedProcedureComboBox qmbPerformedProcedure = (qmbPerformedProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbPerformedProcedureComboBox.class, m_qmbPerformedProcedureTemp);
				super.addComboBox(qmbPerformedProcedure);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper324 = new RuntimeAnchoring(designSize, runtimeSize, 512, 360, 256, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1318), new Integer(anchoringHelper324.getX()), new Integer(anchoringHelper324.getY()), new Integer(anchoringHelper324.getWidth()), new Integer(anchoringHelper324.getHeight()), new Integer(startTabIndex.intValue() + 207), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Surgeon, anaesthetist, registered  <br>practitioner and/or recovery staff have <br>documented and communicated the key concerns  <br>for recovery and management of this patient", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper325 = new RuntimeAnchoring(designSize, runtimeSize, 16, 480, 456, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1319), new Integer(anchoringHelper325.getX()), new Integer(anchoringHelper325.getY()), new Integer(anchoringHelper325.getWidth()), new Integer(anchoringHelper325.getHeight()), new Integer(startTabIndex.intValue() + 213), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Any specimens labelled (including patient name)?", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper326 = new RuntimeAnchoring(designSize, runtimeSize, 16, 456, 456, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1320), new Integer(anchoringHelper326.getX()), new Integer(anchoringHelper326.getY()), new Integer(anchoringHelper326.getWidth()), new Integer(anchoringHelper326.getHeight()), new Integer(startTabIndex.intValue() + 212), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"The administration record has been completed for medications, bloods and fluids", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper327 = new RuntimeAnchoring(designSize, runtimeSize, 16, 360, 304, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1321), new Integer(anchoringHelper327.getX()), new Integer(anchoringHelper327.getY()), new Integer(anchoringHelper327.getWidth()), new Integer(anchoringHelper327.getHeight()), new Integer(startTabIndex.intValue() + 206), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"It has been confirmed that instruments, swabs and sharps  <br>counts are complete (or N/A)?", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper328 = new RuntimeAnchoring(designSize, runtimeSize, 24, 8, 176, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1322), new Integer(anchoringHelper328.getX()), new Integer(anchoringHelper328.getY()), new Integer(anchoringHelper328.getWidth()), new Integer(anchoringHelper328.getHeight()), new Integer(startTabIndex.intValue() + 195), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Unplanned return to theatre", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper329 = new RuntimeAnchoring(designSize, runtimeSize, 32, 66, 761, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdPerformedProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1323), new Integer(anchoringHelper329.getX()), new Integer(anchoringHelper329.getY()), new Integer(anchoringHelper329.getWidth()), new Integer(anchoringHelper329.getHeight()), new Integer(startTabIndex.intValue() + 196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuIntraOpPerformedProcedures, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPerformedProceduresTemp);
				grdPerformedProceduresGrid grdPerformedProcedures = (grdPerformedProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPerformedProceduresGrid.class, m_grdPerformedProceduresTemp);
				grdPerformedProcedures.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPerformedProcedures.addStringColumn("Procedure", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPerformedProcedures.addStringColumn("Laterality", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPerformedProcedures.addBoolColumn("Planned", 0, 0, 100, true, false, 0, true);
				grdPerformedProcedures.addBoolColumn("Performed", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdPerformedProcedures);
		
				// RadioButton Controls
				RadioButton tmpSignOutEquipmentProblems = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1324), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpSignOutEquipmentProblems);
				SignOutEquipmentProblemsRadioButton SignOutEquipmentProblems = (SignOutEquipmentProblemsRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SignOutEquipmentProblemsRadioButton.class, tmpSignOutEquipmentProblems);
				SignOutEquipmentProblems.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(SignOutEquipmentProblems);
				RadioButton tmpAntibioticsSurgically = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1325), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpAntibioticsSurgically);
				AntibioticsSurgicallyRadioButton AntibioticsSurgically = (AntibioticsSurgicallyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(AntibioticsSurgicallyRadioButton.class, tmpAntibioticsSurgically);
				AntibioticsSurgically.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(AntibioticsSurgically);
			}

			public Label lbl87()
			{
				return (Label)super.getControl(1);
			}
			public Label lblSignOutAntibiotics()
			{
				return (Label)super.getControl(4);
			}
			public Label lblPerformedLaterality()
			{
				return (Label)super.getControl(8);
			}
			public Button btnRIEPerformedProcedure()
			{
				return (Button)super.getControl(9);
			}
			public Button btnEditPerformedProcedure()
			{
				return (Button)super.getControl(10);
			}
			public Button btnFlagPerformed()
			{
				return (Button)super.getControl(11);
			}
			public Button btnAddPerformedProcedure()
			{
				return (Button)super.getControl(12);
			}
			public Button btnSavePerformedProcedure()
			{
				return (Button)super.getControl(13);
			}
			public Button btnCancelPerformedProcedure()
			{
				return (Button)super.getControl(14);
			}
			public Button btnSaveSignOut()
			{
				return (Button)super.getControl(15);
			}
			public Button btnCancelSignOut()
			{
				return (Button)super.getControl(16);
			}
			public Button btnEditSignOut()
			{
				return (Button)super.getControl(17);
			}
			public TextBox txtDidAntibioticsMandatoryField()
			{
				return (TextBox)super.getControl(18);
			}
			public TextBox txtHaveAnyEquipmentProblemsMandatory()
			{
				return (TextBox)super.getControl(19);
			}
			public TextBox txtPerformedComments()
			{
				return (TextBox)super.getControl(20);
			}
			public DateTimeControl dtimSignOutAntiGiven()
			{
				return (DateTimeControl)super.getControl(21);
			}
			public cmbPerformedLateralityComboBox cmbPerformedLaterality()
			{
				return (cmbPerformedLateralityComboBox)super.getComboBox(0);
			}
			public qmbSignOutSignatureComboBox qmbSignOutSignature()
			{
				return (qmbSignOutSignatureComboBox)super.getComboBox(1);
			}
			public qmbPerformedProcedureComboBox qmbPerformedProcedure()
			{
				return (qmbPerformedProcedureComboBox)super.getComboBox(2);
			}
			public CheckBox chkSignOutSurgeon()
			{
				return (CheckBox)super.getControl(25);
			}
			public CheckBox chkSignOutSpecimensLabelled()
			{
				return (CheckBox)super.getControl(26);
			}
			public CheckBox chkSignOutAdminComplete()
			{
				return (CheckBox)super.getControl(27);
			}
			public CheckBox chkSignOutHasBeenConfirmed()
			{
				return (CheckBox)super.getControl(28);
			}
			public CheckBox chkUnplanned()
			{
				return (CheckBox)super.getControl(29);
			}
			public grdPerformedProceduresGrid grdPerformedProcedures()
			{
				return (grdPerformedProceduresGrid)super.getGrid(0);
			}
			public SignOutEquipmentProblemsRadioButton SignOutEquipmentProblems()
			{
				return (SignOutEquipmentProblemsRadioButton)super.getRadioButton(0);
			}
			public AntibioticsSurgicallyRadioButton AntibioticsSurgically()
			{
				return (AntibioticsSurgicallyRadioButton)super.getRadioButton(1);
			}
		}
		public static class tabRecoveryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbRecoveryPainScoreComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(Integer value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(Integer value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(Integer value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(Integer value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(Integer value)
				{
					return super.control.removeRow(value);
				}
				public Integer getValue()
				{
					return (Integer)super.control.getValue();
				}
				public void setValue(Integer value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper330 = new RuntimeAnchoring(designSize, runtimeSize, 264, 88, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccRecoveryMemberofStaffForm = loader.loadComponent(102256, appForm, startControlID * 10 + 10000, anchoringHelper330.getSize(), instance1, startTabIndex.intValue() + 226, skipContextValidation);
				//ims.framework.Control m_ccRecoveryMemberofStaffControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1326), new Integer(264), new Integer(88), new Integer(320), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 226), m_ccRecoveryMemberofStaffForm, instance1 } );
				ims.framework.Control m_ccRecoveryMemberofStaffControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1327),  new Integer(anchoringHelper330.getX()), new Integer(anchoringHelper330.getY()), new Integer(anchoringHelper330.getWidth()), new Integer(anchoringHelper330.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 226), m_ccRecoveryMemberofStaffForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccRecoveryMemberofStaffControl);
				Menu[] menus1 = m_ccRecoveryMemberofStaffForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper331 = new RuntimeAnchoring(designSize, runtimeSize, 570, 90, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1328), new Integer(anchoringHelper331.getX()), new Integer(anchoringHelper331.getY()), new Integer(anchoringHelper331.getWidth()), new Integer(anchoringHelper331.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper332 = new RuntimeAnchoring(designSize, runtimeSize, 264, 153, 161, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1329), new Integer(anchoringHelper332.getX()), new Integer(anchoringHelper332.getY()), new Integer(anchoringHelper332.getWidth()), new Integer(anchoringHelper332.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<additional procedure detaills>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper333 = new RuntimeAnchoring(designSize, runtimeSize, 48, 153, 204, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1330), new Integer(anchoringHelper333.getX()), new Integer(anchoringHelper333.getY()), new Integer(anchoringHelper333.getWidth()), new Integer(anchoringHelper333.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Performed Procedure Details:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper334 = new RuntimeAnchoring(designSize, runtimeSize, 48, 256, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1331), new Integer(anchoringHelper334.getX()), new Integer(anchoringHelper334.getY()), new Integer(anchoringHelper334.getWidth()), new Integer(anchoringHelper334.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pain Score:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper335 = new RuntimeAnchoring(designSize, runtimeSize, 48, 221, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1332), new Integer(anchoringHelper335.getX()), new Integer(anchoringHelper335.getY()), new Integer(anchoringHelper335.getWidth()), new Integer(anchoringHelper335.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Blood Glucose:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper336 = new RuntimeAnchoring(designSize, runtimeSize, 392, 186, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1333), new Integer(anchoringHelper336.getX()), new Integer(anchoringHelper336.getY()), new Integer(anchoringHelper336.getWidth()), new Integer(anchoringHelper336.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Degrees C", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper337 = new RuntimeAnchoring(designSize, runtimeSize, 48, 186, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1334), new Integer(anchoringHelper337.getX()), new Integer(anchoringHelper337.getY()), new Integer(anchoringHelper337.getWidth()), new Integer(anchoringHelper337.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admitting Temperature:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper338 = new RuntimeAnchoring(designSize, runtimeSize, 264, 122, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1335), new Integer(anchoringHelper338.getX()), new Integer(anchoringHelper338.getY()), new Integer(anchoringHelper338.getWidth()), new Integer(anchoringHelper338.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<procedure detaills>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper339 = new RuntimeAnchoring(designSize, runtimeSize, 48, 122, 151, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1336), new Integer(anchoringHelper339.getX()), new Integer(anchoringHelper339.getY()), new Integer(anchoringHelper339.getWidth()), new Integer(anchoringHelper339.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performed Procedure Details:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper340 = new RuntimeAnchoring(designSize, runtimeSize, 48, 90, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1337), new Integer(anchoringHelper340.getX()), new Integer(anchoringHelper340.getY()), new Integer(anchoringHelper340.getWidth()), new Integer(anchoringHelper340.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Member Of Staff:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper341 = new RuntimeAnchoring(designSize, runtimeSize, 656, 25, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1338), new Integer(anchoringHelper341.getX()), new Integer(anchoringHelper341.getY()), new Integer(anchoringHelper341.getWidth()), new Integer(anchoringHelper341.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper342 = new RuntimeAnchoring(designSize, runtimeSize, 152, 25, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1339), new Integer(anchoringHelper342.getX()), new Integer(anchoringHelper342.getY()), new Integer(anchoringHelper342.getWidth()), new Integer(anchoringHelper342.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper343 = new RuntimeAnchoring(designSize, runtimeSize, 408, 25, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1340), new Integer(anchoringHelper343.getX()), new Integer(anchoringHelper343.getY()), new Integer(anchoringHelper343.getWidth()), new Integer(anchoringHelper343.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hh:mm", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper344 = new RuntimeAnchoring(designSize, runtimeSize, 536, 16, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1341), new Integer(anchoringHelper344.getX()), new Integer(anchoringHelper344.getY()), new Integer(anchoringHelper344.getWidth()), new Integer(anchoringHelper344.getHeight()), new Integer(startTabIndex.intValue() + 225), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Out of Recovery", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.GreenYellow, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper345 = new RuntimeAnchoring(designSize, runtimeSize, 288, 16, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1342), new Integer(anchoringHelper345.getX()), new Integer(anchoringHelper345.getY()), new Integer(anchoringHelper345.getWidth()), new Integer(anchoringHelper345.getHeight()), new Integer(startTabIndex.intValue() + 223), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ready For Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Brown, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper346 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1343), new Integer(anchoringHelper346.getX()), new Integer(anchoringHelper346.getY()), new Integer(anchoringHelper346.getWidth()), new Integer(anchoringHelper346.getHeight()), new Integer(startTabIndex.intValue() + 221), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Into Recovery", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.LightCyan, ims.framework.utils.Color.Black }));
				RuntimeAnchoring anchoringHelper347 = new RuntimeAnchoring(designSize, runtimeSize, 663, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1344), new Integer(anchoringHelper347.getX()), new Integer(anchoringHelper347.getY()), new Integer(anchoringHelper347.getWidth()), new Integer(anchoringHelper347.getHeight()), new Integer(startTabIndex.intValue() + 232), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper348 = new RuntimeAnchoring(designSize, runtimeSize, 743, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1345), new Integer(anchoringHelper348.getX()), new Integer(anchoringHelper348.getY()), new Integer(anchoringHelper348.getWidth()), new Integer(anchoringHelper348.getHeight()), new Integer(startTabIndex.intValue() + 233), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper349 = new RuntimeAnchoring(designSize, runtimeSize, 7, 568, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1346), new Integer(anchoringHelper349.getX()), new Integer(anchoringHelper349.getY()), new Integer(anchoringHelper349.getWidth()), new Integer(anchoringHelper349.getHeight()), new Integer(startTabIndex.intValue() + 231), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper350 = new RuntimeAnchoring(designSize, runtimeSize, 264, 254, 112, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbRecoveryPainScoreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1347), new Integer(anchoringHelper350.getX()), new Integer(anchoringHelper350.getY()), new Integer(anchoringHelper350.getWidth()), new Integer(anchoringHelper350.getHeight()), new Integer(startTabIndex.intValue() + 230), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRecoveryPainScoreTemp);
				cmbRecoveryPainScoreComboBox cmbRecoveryPainScore = (cmbRecoveryPainScoreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRecoveryPainScoreComboBox.class, m_cmbRecoveryPainScoreTemp);
				super.addComboBox(cmbRecoveryPainScore);
		
				// DecimalBox Controls
				RuntimeAnchoring anchoringHelper351 = new RuntimeAnchoring(designSize, runtimeSize, 264, 219, 112, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1348), new Integer(anchoringHelper351.getX()), new Integer(anchoringHelper351.getY()), new Integer(anchoringHelper351.getWidth()), new Integer(anchoringHelper351.getHeight()), new Integer(startTabIndex.intValue() + 229), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
				RuntimeAnchoring anchoringHelper352 = new RuntimeAnchoring(designSize, runtimeSize, 264, 184, 112, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1349), new Integer(anchoringHelper352.getX()), new Integer(anchoringHelper352.getY()), new Integer(anchoringHelper352.getWidth()), new Integer(anchoringHelper352.getHeight()), new Integer(startTabIndex.intValue() + 228), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
			}

			public ims.core.forms.mosquery.IComponent ccRecoveryMemberofStaff()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccRecoveryMemberofStaffValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccRecoveryMemberofStaffVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccRecoveryMemberofStaffVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccRecoveryMemberofStaffEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccRecoveryMemberofStaffEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblRecoveryMosRequired()
			{
				return (Label)super.getControl(1);
			}
			public Label lblAddProcValue()
			{
				return (Label)super.getControl(2);
			}
			public Label lblRecoveryAddProc()
			{
				return (Label)super.getControl(3);
			}
			public Label lblProcValue()
			{
				return (Label)super.getControl(8);
			}
			public Label lblRecoveryProc()
			{
				return (Label)super.getControl(9);
			}
			public Label lblRecoveryTimeOut()
			{
				return (Label)super.getControl(11);
			}
			public Label lblRecoveryTimeInto()
			{
				return (Label)super.getControl(12);
			}
			public Label lblRecoveryReadyForDischargeTime()
			{
				return (Label)super.getControl(13);
			}
			public Button btnRecoveryTimeOut()
			{
				return (Button)super.getControl(14);
			}
			public Button btnRecoveryReadyForDischarge()
			{
				return (Button)super.getControl(15);
			}
			public Button btnRecoveryInto()
			{
				return (Button)super.getControl(16);
			}
			public Button btnSaveRecovery()
			{
				return (Button)super.getControl(17);
			}
			public Button btnCancelRecovery()
			{
				return (Button)super.getControl(18);
			}
			public Button btnEditRecovery()
			{
				return (Button)super.getControl(19);
			}
			public cmbRecoveryPainScoreComboBox cmbRecoveryPainScore()
			{
				return (cmbRecoveryPainScoreComboBox)super.getComboBox(0);
			}
			public DecimalBox decRecoveryBloodGlucose()
			{
				return (DecimalBox)super.getControl(21);
			}
			public DecimalBox decRecoveryAdmTemp()
			{
				return (DecimalBox)super.getControl(22);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper353 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabCaseDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1350), new Integer(anchoringHelper353.getX()), new Integer(anchoringHelper353.getY()), new Integer(anchoringHelper353.getWidth()), new Integer(anchoringHelper353.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Case", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCaseDetailsContainer m_tabCaseDetailsContainer = (tabCaseDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCaseDetailsContainer.class, m_tabCaseDetails, factory);
			super.addContainer(m_tabCaseDetails, m_tabCaseDetailsContainer);
			ims.framework.utils.SizeInfo m_tabCaseDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabCaseDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper353.getWidth(), anchoringHelper353.getHeight());
			m_tabCaseDetailsContainer.setContext(form, appForm, m_tabCaseDetails, loader, form_images_local, contextMenus, startControlID, m_tabCaseDetailsDesignSize, m_tabCaseDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper354 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabPlannedProcedures = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1351), new Integer(anchoringHelper354.getX()), new Integer(anchoringHelper354.getY()), new Integer(anchoringHelper354.getWidth()), new Integer(anchoringHelper354.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Planned", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPlannedProceduresContainer m_tabPlannedProceduresContainer = (tabPlannedProceduresContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPlannedProceduresContainer.class, m_tabPlannedProcedures, factory);
			super.addContainer(m_tabPlannedProcedures, m_tabPlannedProceduresContainer);
			ims.framework.utils.SizeInfo m_tabPlannedProceduresDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabPlannedProceduresRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper354.getWidth(), anchoringHelper354.getHeight());
			m_tabPlannedProceduresContainer.setContext(form, appForm, m_tabPlannedProcedures, loader, form_images_local, contextMenus, startControlID, m_tabPlannedProceduresDesignSize, m_tabPlannedProceduresRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper355 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabAnaestheticDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1352), new Integer(anchoringHelper355.getX()), new Integer(anchoringHelper355.getY()), new Integer(anchoringHelper355.getWidth()), new Integer(anchoringHelper355.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Anaes", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAnaestheticDetailsContainer m_tabAnaestheticDetailsContainer = (tabAnaestheticDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAnaestheticDetailsContainer.class, m_tabAnaestheticDetails, factory);
			super.addContainer(m_tabAnaestheticDetails, m_tabAnaestheticDetailsContainer);
			ims.framework.utils.SizeInfo m_tabAnaestheticDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabAnaestheticDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper355.getWidth(), anchoringHelper355.getHeight());
			m_tabAnaestheticDetailsContainer.setContext(form, appForm, m_tabAnaestheticDetails, loader, form_images_local, contextMenus, startControlID, m_tabAnaestheticDetailsDesignSize, m_tabAnaestheticDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper356 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabPreparation = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1353), new Integer(anchoringHelper356.getX()), new Integer(anchoringHelper356.getY()), new Integer(anchoringHelper356.getWidth()), new Integer(anchoringHelper356.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Prep", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPreparationContainer m_tabPreparationContainer = (tabPreparationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPreparationContainer.class, m_tabPreparation, factory);
			super.addContainer(m_tabPreparation, m_tabPreparationContainer);
			ims.framework.utils.SizeInfo m_tabPreparationDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabPreparationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper356.getWidth(), anchoringHelper356.getHeight());
			m_tabPreparationContainer.setContext(form, appForm, m_tabPreparation, loader, form_images_local, contextMenus, startControlID, m_tabPreparationDesignSize, m_tabPreparationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper357 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabDiathermy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1354), new Integer(anchoringHelper357.getX()), new Integer(anchoringHelper357.getY()), new Integer(anchoringHelper357.getWidth()), new Integer(anchoringHelper357.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Dia Laser", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDiathermyContainer m_tabDiathermyContainer = (tabDiathermyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDiathermyContainer.class, m_tabDiathermy, factory);
			super.addContainer(m_tabDiathermy, m_tabDiathermyContainer);
			ims.framework.utils.SizeInfo m_tabDiathermyDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabDiathermyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper357.getWidth(), anchoringHelper357.getHeight());
			m_tabDiathermyContainer.setContext(form, appForm, m_tabDiathermy, loader, form_images_local, contextMenus, startControlID, m_tabDiathermyDesignSize, m_tabDiathermyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper358 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabIrrigation = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1355), new Integer(anchoringHelper358.getX()), new Integer(anchoringHelper358.getY()), new Integer(anchoringHelper358.getWidth()), new Integer(anchoringHelper358.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Irrigation", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabIrrigationContainer m_tabIrrigationContainer = (tabIrrigationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabIrrigationContainer.class, m_tabIrrigation, factory);
			super.addContainer(m_tabIrrigation, m_tabIrrigationContainer);
			ims.framework.utils.SizeInfo m_tabIrrigationDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabIrrigationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper358.getWidth(), anchoringHelper358.getHeight());
			m_tabIrrigationContainer.setContext(form, appForm, m_tabIrrigation, loader, form_images_local, contextMenus, startControlID, m_tabIrrigationDesignSize, m_tabIrrigationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper359 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabSpecimen = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1356), new Integer(anchoringHelper359.getX()), new Integer(anchoringHelper359.getY()), new Integer(anchoringHelper359.getWidth()), new Integer(anchoringHelper359.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Spec", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSpecimenContainer m_tabSpecimenContainer = (tabSpecimenContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimenContainer.class, m_tabSpecimen, factory);
			super.addContainer(m_tabSpecimen, m_tabSpecimenContainer);
			ims.framework.utils.SizeInfo m_tabSpecimenDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabSpecimenRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper359.getWidth(), anchoringHelper359.getHeight());
			m_tabSpecimenContainer.setContext(form, appForm, m_tabSpecimen, loader, form_images_local, contextMenus, startControlID, m_tabSpecimenDesignSize, m_tabSpecimenRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper360 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabImplants = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1357), new Integer(anchoringHelper360.getX()), new Integer(anchoringHelper360.getY()), new Integer(anchoringHelper360.getWidth()), new Integer(anchoringHelper360.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Implants", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabImplantsContainer m_tabImplantsContainer = (tabImplantsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabImplantsContainer.class, m_tabImplants, factory);
			super.addContainer(m_tabImplants, m_tabImplantsContainer);
			ims.framework.utils.SizeInfo m_tabImplantsDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabImplantsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper360.getWidth(), anchoringHelper360.getHeight());
			m_tabImplantsContainer.setContext(form, appForm, m_tabImplants, loader, form_images_local, contextMenus, startControlID, m_tabImplantsDesignSize, m_tabImplantsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper361 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabTourniquet = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1358), new Integer(anchoringHelper361.getX()), new Integer(anchoringHelper361.getY()), new Integer(anchoringHelper361.getWidth()), new Integer(anchoringHelper361.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Tour", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTourniquetContainer m_tabTourniquetContainer = (tabTourniquetContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTourniquetContainer.class, m_tabTourniquet, factory);
			super.addContainer(m_tabTourniquet, m_tabTourniquetContainer);
			ims.framework.utils.SizeInfo m_tabTourniquetDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabTourniquetRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper361.getWidth(), anchoringHelper361.getHeight());
			m_tabTourniquetContainer.setContext(form, appForm, m_tabTourniquet, loader, form_images_local, contextMenus, startControlID, m_tabTourniquetDesignSize, m_tabTourniquetRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper362 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabHandoverAndFinalCounts = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1359), new Integer(anchoringHelper362.getX()), new Integer(anchoringHelper362.getY()), new Integer(anchoringHelper362.getWidth()), new Integer(anchoringHelper362.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Counts", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHandoverAndFinalCountsContainer m_tabHandoverAndFinalCountsContainer = (tabHandoverAndFinalCountsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHandoverAndFinalCountsContainer.class, m_tabHandoverAndFinalCounts, factory);
			super.addContainer(m_tabHandoverAndFinalCounts, m_tabHandoverAndFinalCountsContainer);
			ims.framework.utils.SizeInfo m_tabHandoverAndFinalCountsDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabHandoverAndFinalCountsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper362.getWidth(), anchoringHelper362.getHeight());
			m_tabHandoverAndFinalCountsContainer.setContext(form, appForm, m_tabHandoverAndFinalCounts, loader, form_images_local, contextMenus, startControlID, m_tabHandoverAndFinalCountsDesignSize, m_tabHandoverAndFinalCountsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper363 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabPerformedProcedures = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1360), new Integer(anchoringHelper363.getX()), new Integer(anchoringHelper363.getY()), new Integer(anchoringHelper363.getWidth()), new Integer(anchoringHelper363.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Performed", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPerformedProceduresContainer m_tabPerformedProceduresContainer = (tabPerformedProceduresContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPerformedProceduresContainer.class, m_tabPerformedProcedures, factory);
			super.addContainer(m_tabPerformedProcedures, m_tabPerformedProceduresContainer);
			ims.framework.utils.SizeInfo m_tabPerformedProceduresDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabPerformedProceduresRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper363.getWidth(), anchoringHelper363.getHeight());
			m_tabPerformedProceduresContainer.setContext(form, appForm, m_tabPerformedProcedures, loader, form_images_local, contextMenus, startControlID, m_tabPerformedProceduresDesignSize, m_tabPerformedProceduresRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper364 = new RuntimeAnchoring(designSize, runtimeSize, 8, 4, 832, 624, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			Container m_tabRecovery = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1361), new Integer(anchoringHelper364.getX()), new Integer(anchoringHelper364.getY()), new Integer(anchoringHelper364.getWidth()), new Integer(anchoringHelper364.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Recovery", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabRecoveryContainer m_tabRecoveryContainer = (tabRecoveryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRecoveryContainer.class, m_tabRecovery, factory);
			super.addContainer(m_tabRecovery, m_tabRecoveryContainer);
			ims.framework.utils.SizeInfo m_tabRecoveryDesignSize = new ims.framework.utils.SizeInfo(832, 624);
			ims.framework.utils.SizeInfo m_tabRecoveryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper364.getWidth(), anchoringHelper364.getHeight());
			m_tabRecoveryContainer.setContext(form, appForm, m_tabRecovery, loader, form_images_local, contextMenus, startControlID, m_tabRecoveryDesignSize, m_tabRecoveryRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
		}
		public void settabCaseDetailsEnabled(boolean value)
		{
			tabCaseDetails().setEnabled(value);
		}
		public void settabPlannedProceduresEnabled(boolean value)
		{
			tabPlannedProcedures().setEnabled(value);
		}
		public void settabAnaestheticDetailsEnabled(boolean value)
		{
			tabAnaestheticDetails().setEnabled(value);
		}
		public void settabPreparationEnabled(boolean value)
		{
			tabPreparation().setEnabled(value);
		}
		public void settabDiathermyEnabled(boolean value)
		{
			tabDiathermy().setEnabled(value);
		}
		public void settabIrrigationEnabled(boolean value)
		{
			tabIrrigation().setEnabled(value);
		}
		public void settabSpecimenEnabled(boolean value)
		{
			tabSpecimen().setEnabled(value);
		}
		public void settabImplantsEnabled(boolean value)
		{
			tabImplants().setEnabled(value);
		}
		public void settabTourniquetEnabled(boolean value)
		{
			tabTourniquet().setEnabled(value);
		}
		public void settabHandoverAndFinalCountsEnabled(boolean value)
		{
			tabHandoverAndFinalCounts().setEnabled(value);
		}
		public void settabPerformedProceduresEnabled(boolean value)
		{
			tabPerformedProcedures().setEnabled(value);
		}
		public void settabRecoveryEnabled(boolean value)
		{
			tabRecovery().setEnabled(value);
		}
		public void showtabCaseDetails()
		{
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabCaseDetails().setVisible(true);
		}
		public void showtabPlannedProcedures()
		{
			tabCaseDetails().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabPlannedProcedures().setVisible(true);
		}
		public void showtabAnaestheticDetails()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabAnaestheticDetails().setVisible(true);
		}
		public void showtabPreparation()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabPreparation().setVisible(true);
		}
		public void showtabDiathermy()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabDiathermy().setVisible(true);
		}
		public void showtabIrrigation()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabIrrigation().setVisible(true);
		}
		public void showtabSpecimen()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabSpecimen().setVisible(true);
		}
		public void showtabImplants()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabImplants().setVisible(true);
		}
		public void showtabTourniquet()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabTourniquet().setVisible(true);
		}
		public void showtabHandoverAndFinalCounts()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(true);
		}
		public void showtabPerformedProcedures()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabRecovery().setVisible(false);
			tabPerformedProcedures().setVisible(true);
		}
		public void showtabRecovery()
		{
			tabCaseDetails().setVisible(false);
			tabPlannedProcedures().setVisible(false);
			tabAnaestheticDetails().setVisible(false);
			tabPreparation().setVisible(false);
			tabDiathermy().setVisible(false);
			tabIrrigation().setVisible(false);
			tabSpecimen().setVisible(false);
			tabImplants().setVisible(false);
			tabTourniquet().setVisible(false);
			tabHandoverAndFinalCounts().setVisible(false);
			tabPerformedProcedures().setVisible(false);
			tabRecovery().setVisible(true);
		}

		public tabCaseDetailsContainer tabCaseDetails()
		{
			return (tabCaseDetailsContainer)super.layers.get(0);
		}
		public tabPlannedProceduresContainer tabPlannedProcedures()
		{
			return (tabPlannedProceduresContainer)super.layers.get(1);
		}
		public tabAnaestheticDetailsContainer tabAnaestheticDetails()
		{
			return (tabAnaestheticDetailsContainer)super.layers.get(2);
		}
		public tabPreparationContainer tabPreparation()
		{
			return (tabPreparationContainer)super.layers.get(3);
		}
		public tabDiathermyContainer tabDiathermy()
		{
			return (tabDiathermyContainer)super.layers.get(4);
		}
		public tabIrrigationContainer tabIrrigation()
		{
			return (tabIrrigationContainer)super.layers.get(5);
		}
		public tabSpecimenContainer tabSpecimen()
		{
			return (tabSpecimenContainer)super.layers.get(6);
		}
		public tabImplantsContainer tabImplants()
		{
			return (tabImplantsContainer)super.layers.get(7);
		}
		public tabTourniquetContainer tabTourniquet()
		{
			return (tabTourniquetContainer)super.layers.get(8);
		}
		public tabHandoverAndFinalCountsContainer tabHandoverAndFinalCounts()
		{
			return (tabHandoverAndFinalCountsContainer)super.layers.get(9);
		}
		public tabPerformedProceduresContainer tabPerformedProcedures()
		{
			return (tabPerformedProceduresContainer)super.layers.get(10);
		}
		public tabRecoveryContainer tabRecovery()
		{
			return (tabRecoveryContainer)super.layers.get(11);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 656);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuIntraOpPerformedProcedures = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuIntraOpPerformedProceduresFLAG_PERFORMEDItem = factory.createMenuItem(startControlID.intValue() + 1, "Flag as Performed", true, false, new Integer(102209), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6380001)))
			contextMenus.Clinical.contextMenuIntraOpPerformedProcedures.add(contextMenus.Clinical.contextMenuIntraOpPerformedProceduresFLAG_PERFORMEDItem);
		form.registerMenu(contextMenus.Clinical.contextMenuIntraOpPerformedProcedures);


		// Layer Clasess
		lyrIntraLayer m_lyrIntraLayer = (lyrIntraLayer)LayerFlyweightFactory.getInstance().createLayer(lyrIntraLayer.class, this, factory);
		super.addLayer(m_lyrIntraLayer);
		m_lyrIntraLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper365 = new RuntimeAnchoring(designSize, runtimeSize, 756, 632, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1362), new Integer(anchoringHelper365.getX()), new Integer(anchoringHelper365.getY()), new Integer(anchoringHelper365.getWidth()), new Integer(anchoringHelper365.getHeight()), new Integer(startTabIndex.intValue() + 234), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrIntraLayer lyrIntra()
	{
		return (lyrIntraLayer)super.getLayer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(12);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Assessment = new AssessmentForms();
			Core = new CoreForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				AcuteTheatreCaseTimesDialog = new LocalFormName(123307);
				ChartableOccurencesDialog = new LocalFormName(123306);
				SpecimenIntraOpDialog = new LocalFormName(123309);
				WoundPackingIntraOpDialog = new LocalFormName(123310);
				SkinClosureIntraOpDialog = new LocalFormName(123311);
				AnaestheticSignInDialog = new LocalFormName(123305);
				ArterialClampIntraOpDialog = new LocalFormName(123313);
				OtherEquipmentIntraOpDialog = new LocalFormName(123314);
				ImplantsIntraOpDialog = new LocalFormName(123312);
				HandoverCountsIntraOpDialog = new LocalFormName(123315);
				FinalAndIncorrectCountIntraOpDialog = new LocalFormName(123316);
				RemoveIntraOpCaseTimesDialog = new LocalFormName(123323);
			}
			public final FormName AcuteTheatreCaseTimesDialog;
			public final FormName ChartableOccurencesDialog;
			public final FormName SpecimenIntraOpDialog;
			public final FormName WoundPackingIntraOpDialog;
			public final FormName SkinClosureIntraOpDialog;
			public final FormName AnaestheticSignInDialog;
			public final FormName ArterialClampIntraOpDialog;
			public final FormName OtherEquipmentIntraOpDialog;
			public final FormName ImplantsIntraOpDialog;
			public final FormName HandoverCountsIntraOpDialog;
			public final FormName FinalAndIncorrectCountIntraOpDialog;
			public final FormName RemoveIntraOpCaseTimesDialog;
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				AssessmentsForSpecialty = new LocalFormName(127123);
			}
			public final FormName AssessmentsForSpecialty;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public ClinicalForms Clinical;
		public AssessmentForms Assessment;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
				Remove = new ImageHelper(102300, "Images/Core/remove.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Add;
			public final ims.framework.utils.Image Remove;
			public final ims.framework.utils.Image Edit;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SafetyBrief = new ims.framework.ContextVariable("SafetyBrief", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SafetyBrief_" + componentIdentifier + "");
			cxl_AnaesRFS = new ims.framework.ContextVariable("AnaesRFS", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaesRFS_" + componentIdentifier + "");
			cxl_AnaestheticSignIn = new ims.framework.ContextVariable("AnaestheticSignIn", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier + "");
			cxl_PatientArrived = new ims.framework.ContextVariable("PatientArrived", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientArrived_" + componentIdentifier + "");
			cxl_PatientLeftTheatre = new ims.framework.ContextVariable("PatientLeftTheatre", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientLeftTheatre_" + componentIdentifier + "");
			cxl_PatientSentFor = new ims.framework.ContextVariable("PatientSentFor", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientSentFor_" + componentIdentifier + "");
			cxl_ReadyForDischarge = new ims.framework.ContextVariable("ReadyForDischarge", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ReadyForDischarge_" + componentIdentifier + "");
			cxl_SurgeryStart = new ims.framework.ContextVariable("SurgeryStart", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStart_" + componentIdentifier + "");
			cxl_SurgeryStop = new ims.framework.ContextVariable("SurgeryStop", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStop_" + componentIdentifier + "");
			cxl_TimeOutCompleted = new ims.framework.ContextVariable("TimeOutCompleted", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutCompleted_" + componentIdentifier + "");
			cxl_TimeOutOfRecovery = new ims.framework.ContextVariable("TimeOutOfRecovery", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier + "");
			cxl_TimeValidationMap = new ims.framework.ContextVariable("TimeValidationMap", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeValidationMap_" + componentIdentifier + "");
			cxl_CaseDetails = new ims.framework.ContextVariable("CaseDetails", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier + "");
			cxl_SessionStaffDetails = new ims.framework.ContextVariable("SessionStaffDetails", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier + "");
			cxl_SkinPrepMode = new ims.framework.ContextVariable("SkinPrepMode", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SkinPrepMode_" + componentIdentifier + "");
			cxl_PatientPreparation = new ims.framework.ContextVariable("PatientPreparation", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier + "");
			cxl_DiathermyMode = new ims.framework.ContextVariable("DiathermyMode", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__DiathermyMode_" + componentIdentifier + "");
			cxl_LaserMode = new ims.framework.ContextVariable("LaserMode", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserMode_" + componentIdentifier + "");
			cxl_LaserDetails = new ims.framework.ContextVariable("LaserDetails", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier + "");
			cxl_IrrigantDetailMode = new ims.framework.ContextVariable("IrrigantDetailMode", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__IrrigantDetailMode_" + componentIdentifier + "");
			cxl_CatheterMode = new ims.framework.ContextVariable("CatheterMode", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CatheterMode_" + componentIdentifier + "");
			cxl_Irrigant = new ims.framework.ContextVariable("Irrigant", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__Irrigant_" + componentIdentifier + "");
			cxl_TimeIntoRecovery = new ims.framework.ContextVariable("TimeIntoRecovery", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeIntoRecovery_" + componentIdentifier + "");
			cxl_RecoveryDetails = new ims.framework.ContextVariable("RecoveryDetails", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RecoveryDetails_" + componentIdentifier + "");
			cxl_PerformedProcedureMode = new ims.framework.ContextVariable("PerformedProcedureMode", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedProcedureMode_" + componentIdentifier + "");
			cxl_PerformedSignOut = new ims.framework.ContextVariable("PerformedSignOut", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier + "");
			cxl_ChoosenAssessment = new ims.framework.ContextVariable("ChoosenAssessment", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier + "");
			cxl_IntraOpFluidsUsed = new ims.framework.ContextVariable("IntraOpFluidsUsed", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__IntraOpFluidsUsed_" + componentIdentifier + "");
			cxl_SelectedDiathermyRecord = new ims.framework.ContextVariable("SelectedDiathermyRecord", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier + "");
			cxl_ConfirmationRemoveSpecimenMessageID = new ims.framework.ContextVariable("ConfirmationRemoveSpecimenMessageID", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ConfirmationRemoveSpecimenMessageID_" + componentIdentifier + "");
			cxl_ConfirmationRemoveWoundPackingMessageID = new ims.framework.ContextVariable("ConfirmationRemoveWoundPackingMessageID", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ConfirmationRemoveWoundPackingMessageID_" + componentIdentifier + "");
			cxl_ConfirmationRemoveSkinClosureMessageID = new ims.framework.ContextVariable("ConfirmationRemoveSkinClosureMessageID", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ConfirmationRemoveSkinClosureMessageID_" + componentIdentifier + "");
			cxl_RIEPerformedProcedureConfirmationMsgID = new ims.framework.ContextVariable("RIEPerformedProcedureConfirmationMsgID", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RIEPerformedProcedureConfirmationMsgID_" + componentIdentifier + "");
			cxl_TheatreSessionStaffDetail = new ims.framework.ContextVariable("TheatreSessionStaffDetail", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier + "");
			cxl_TheatreSession = new ims.framework.ContextVariable("TheatreSession", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier + "");
			cxl_selectedCaseService = new ims.framework.ContextVariable("selectedCaseService", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__selectedCaseService_" + componentIdentifier + "");
			cxl_ConfirmationRemoveSkinPrepMessageID = new ims.framework.ContextVariable("ConfirmationRemoveSkinPrepMessageID", prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ConfirmationRemoveSkinPrepMessageID_" + componentIdentifier + "");
		}
		
		public boolean getSafetyBriefIsNotNull()
		{
			return !cxl_SafetyBrief.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpSafetyBriefTimeVo getSafetyBrief()
		{
			return (ims.clinical.vo.PeriOpSafetyBriefTimeVo)cxl_SafetyBrief.getValue(context);
		}
		public void setSafetyBrief(ims.clinical.vo.PeriOpSafetyBriefTimeVo value)
		{
			cxl_SafetyBrief.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SafetyBrief = null;
		public boolean getAnaesRFSIsNotNull()
		{
			return !cxl_AnaesRFS.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpReadyForSurgeryTimeVo getAnaesRFS()
		{
			return (ims.clinical.vo.PeriOpReadyForSurgeryTimeVo)cxl_AnaesRFS.getValue(context);
		}
		public void setAnaesRFS(ims.clinical.vo.PeriOpReadyForSurgeryTimeVo value)
		{
			cxl_AnaesRFS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnaesRFS = null;
		public boolean getAnaestheticSignInIsNotNull()
		{
			return !cxl_AnaestheticSignIn.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpAnaesthticSignInTimVo getAnaestheticSignIn()
		{
			return (ims.clinical.vo.PeriOpAnaesthticSignInTimVo)cxl_AnaestheticSignIn.getValue(context);
		}
		public void setAnaestheticSignIn(ims.clinical.vo.PeriOpAnaesthticSignInTimVo value)
		{
			cxl_AnaestheticSignIn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnaestheticSignIn = null;
		public boolean getPatientArrivedIsNotNull()
		{
			return !cxl_PatientArrived.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpPatientArrivedTimeVo getPatientArrived()
		{
			return (ims.clinical.vo.PeriOpPatientArrivedTimeVo)cxl_PatientArrived.getValue(context);
		}
		public void setPatientArrived(ims.clinical.vo.PeriOpPatientArrivedTimeVo value)
		{
			cxl_PatientArrived.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientArrived = null;
		public boolean getPatientLeftTheatreIsNotNull()
		{
			return !cxl_PatientLeftTheatre.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpPatientLeftTheatreVo getPatientLeftTheatre()
		{
			return (ims.clinical.vo.PeriOpPatientLeftTheatreVo)cxl_PatientLeftTheatre.getValue(context);
		}
		public void setPatientLeftTheatre(ims.clinical.vo.PeriOpPatientLeftTheatreVo value)
		{
			cxl_PatientLeftTheatre.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientLeftTheatre = null;
		public boolean getPatientSentForIsNotNull()
		{
			return !cxl_PatientSentFor.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpPatientSentTimeVo getPatientSentFor()
		{
			return (ims.clinical.vo.PeriOpPatientSentTimeVo)cxl_PatientSentFor.getValue(context);
		}
		public void setPatientSentFor(ims.clinical.vo.PeriOpPatientSentTimeVo value)
		{
			cxl_PatientSentFor.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientSentFor = null;
		public boolean getReadyForDischargeIsNotNull()
		{
			return !cxl_ReadyForDischarge.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpReadyForDischargeVo getReadyForDischarge()
		{
			return (ims.clinical.vo.PeriOpReadyForDischargeVo)cxl_ReadyForDischarge.getValue(context);
		}
		public void setReadyForDischarge(ims.clinical.vo.PeriOpReadyForDischargeVo value)
		{
			cxl_ReadyForDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReadyForDischarge = null;
		public boolean getSurgeryStartIsNotNull()
		{
			return !cxl_SurgeryStart.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpSurgeryStartTimeVo getSurgeryStart()
		{
			return (ims.clinical.vo.PeriOpSurgeryStartTimeVo)cxl_SurgeryStart.getValue(context);
		}
		public void setSurgeryStart(ims.clinical.vo.PeriOpSurgeryStartTimeVo value)
		{
			cxl_SurgeryStart.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SurgeryStart = null;
		public boolean getSurgeryStopIsNotNull()
		{
			return !cxl_SurgeryStop.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpSurgeryStopTimeVo getSurgeryStop()
		{
			return (ims.clinical.vo.PeriOpSurgeryStopTimeVo)cxl_SurgeryStop.getValue(context);
		}
		public void setSurgeryStop(ims.clinical.vo.PeriOpSurgeryStopTimeVo value)
		{
			cxl_SurgeryStop.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SurgeryStop = null;
		public boolean getTimeOutCompletedIsNotNull()
		{
			return !cxl_TimeOutCompleted.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpTimeOutCompleteVo getTimeOutCompleted()
		{
			return (ims.clinical.vo.PeriOpTimeOutCompleteVo)cxl_TimeOutCompleted.getValue(context);
		}
		public void setTimeOutCompleted(ims.clinical.vo.PeriOpTimeOutCompleteVo value)
		{
			cxl_TimeOutCompleted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeOutCompleted = null;
		public boolean getTimeOutOfRecoveryIsNotNull()
		{
			return !cxl_TimeOutOfRecovery.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpTimeOutOfRecoveryVo getTimeOutOfRecovery()
		{
			return (ims.clinical.vo.PeriOpTimeOutOfRecoveryVo)cxl_TimeOutOfRecovery.getValue(context);
		}
		public void setTimeOutOfRecovery(ims.clinical.vo.PeriOpTimeOutOfRecoveryVo value)
		{
			cxl_TimeOutOfRecovery.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeOutOfRecovery = null;
		public boolean getTimeValidationMapIsNotNull()
		{
			return !cxl_TimeValidationMap.getValueIsNull(context);
		}
		public java.util.Map<Integer,ims.framework.utils.DateTime> getTimeValidationMap()
		{
			return (java.util.Map<Integer,ims.framework.utils.DateTime>)cxl_TimeValidationMap.getValue(context);
		}
		public void setTimeValidationMap(java.util.Map<Integer,ims.framework.utils.DateTime> value)
		{
			cxl_TimeValidationMap.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeValidationMap = null;
		public boolean getCaseDetailsIsNotNull()
		{
			return !cxl_CaseDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.IntraOpCaseStaffDetailsVo getCaseDetails()
		{
			return (ims.clinical.vo.IntraOpCaseStaffDetailsVo)cxl_CaseDetails.getValue(context);
		}
		public void setCaseDetails(ims.clinical.vo.IntraOpCaseStaffDetailsVo value)
		{
			cxl_CaseDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CaseDetails = null;
		public boolean getSessionStaffDetailsIsNotNull()
		{
			return !cxl_SessionStaffDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.TheatreSessionStaffDetailVo getSessionStaffDetails()
		{
			return (ims.clinical.vo.TheatreSessionStaffDetailVo)cxl_SessionStaffDetails.getValue(context);
		}
		public void setSessionStaffDetails(ims.clinical.vo.TheatreSessionStaffDetailVo value)
		{
			cxl_SessionStaffDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionStaffDetails = null;
		public boolean getSkinPrepModeIsNotNull()
		{
			return !cxl_SkinPrepMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getSkinPrepMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_SkinPrepMode.getValue(context);
		}
		public void setSkinPrepMode(ims.framework.enumerations.FormMode value)
		{
			cxl_SkinPrepMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SkinPrepMode = null;
		public boolean getPatientPreparationIsNotNull()
		{
			return !cxl_PatientPreparation.getValueIsNull(context);
		}
		public ims.clinical.vo.PatientPreperationIntraOpVo getPatientPreparation()
		{
			return (ims.clinical.vo.PatientPreperationIntraOpVo)cxl_PatientPreparation.getValue(context);
		}
		public void setPatientPreparation(ims.clinical.vo.PatientPreperationIntraOpVo value)
		{
			cxl_PatientPreparation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientPreparation = null;
		public boolean getDiathermyModeIsNotNull()
		{
			return !cxl_DiathermyMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getDiathermyMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_DiathermyMode.getValue(context);
		}
		public void setDiathermyMode(ims.framework.enumerations.FormMode value)
		{
			cxl_DiathermyMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DiathermyMode = null;
		public boolean getLaserModeIsNotNull()
		{
			return !cxl_LaserMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getLaserMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_LaserMode.getValue(context);
		}
		public void setLaserMode(ims.framework.enumerations.FormMode value)
		{
			cxl_LaserMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LaserMode = null;
		public boolean getLaserDetailsIsNotNull()
		{
			return !cxl_LaserDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.LaserDetailIntraOpVo getLaserDetails()
		{
			return (ims.clinical.vo.LaserDetailIntraOpVo)cxl_LaserDetails.getValue(context);
		}
		public void setLaserDetails(ims.clinical.vo.LaserDetailIntraOpVo value)
		{
			cxl_LaserDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LaserDetails = null;
		public boolean getIrrigantDetailModeIsNotNull()
		{
			return !cxl_IrrigantDetailMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getIrrigantDetailMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_IrrigantDetailMode.getValue(context);
		}
		public void setIrrigantDetailMode(ims.framework.enumerations.FormMode value)
		{
			cxl_IrrigantDetailMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IrrigantDetailMode = null;
		public boolean getCatheterModeIsNotNull()
		{
			return !cxl_CatheterMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getCatheterMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_CatheterMode.getValue(context);
		}
		public void setCatheterMode(ims.framework.enumerations.FormMode value)
		{
			cxl_CatheterMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatheterMode = null;
		public boolean getIrrigantIsNotNull()
		{
			return !cxl_Irrigant.getValueIsNull(context);
		}
		public ims.clinical.vo.IrrigantIntraOpVo getIrrigant()
		{
			return (ims.clinical.vo.IrrigantIntraOpVo)cxl_Irrigant.getValue(context);
		}
		public void setIrrigant(ims.clinical.vo.IrrigantIntraOpVo value)
		{
			cxl_Irrigant.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Irrigant = null;
		public boolean getTimeIntoRecoveryIsNotNull()
		{
			return !cxl_TimeIntoRecovery.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpTimeIntoRecoveryVo getTimeIntoRecovery()
		{
			return (ims.clinical.vo.PeriOpTimeIntoRecoveryVo)cxl_TimeIntoRecovery.getValue(context);
		}
		public void setTimeIntoRecovery(ims.clinical.vo.PeriOpTimeIntoRecoveryVo value)
		{
			cxl_TimeIntoRecovery.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeIntoRecovery = null;
		public boolean getRecoveryDetailsIsNotNull()
		{
			return !cxl_RecoveryDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpRecoveryDetailVo getRecoveryDetails()
		{
			return (ims.clinical.vo.PeriOpRecoveryDetailVo)cxl_RecoveryDetails.getValue(context);
		}
		public void setRecoveryDetails(ims.clinical.vo.PeriOpRecoveryDetailVo value)
		{
			cxl_RecoveryDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RecoveryDetails = null;
		public boolean getPerformedProcedureModeIsNotNull()
		{
			return !cxl_PerformedProcedureMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getPerformedProcedureMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_PerformedProcedureMode.getValue(context);
		}
		public void setPerformedProcedureMode(ims.framework.enumerations.FormMode value)
		{
			cxl_PerformedProcedureMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PerformedProcedureMode = null;
		public boolean getPerformedSignOutIsNotNull()
		{
			return !cxl_PerformedSignOut.getValueIsNull(context);
		}
		public ims.clinical.vo.PerformedProcAndSignOutIntraOpVo getPerformedSignOut()
		{
			return (ims.clinical.vo.PerformedProcAndSignOutIntraOpVo)cxl_PerformedSignOut.getValue(context);
		}
		public void setPerformedSignOut(ims.clinical.vo.PerformedProcAndSignOutIntraOpVo value)
		{
			cxl_PerformedSignOut.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PerformedSignOut = null;
		public boolean getChoosenAssessmentIsNotNull()
		{
			return !cxl_ChoosenAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.User_AssessmentVo getChoosenAssessment()
		{
			return (ims.assessment.vo.User_AssessmentVo)cxl_ChoosenAssessment.getValue(context);
		}
		public void setChoosenAssessment(ims.assessment.vo.User_AssessmentVo value)
		{
			cxl_ChoosenAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ChoosenAssessment = null;
		public boolean getIntraOpFluidsUsedIsNotNull()
		{
			return !cxl_IntraOpFluidsUsed.getValueIsNull(context);
		}
		public Boolean getIntraOpFluidsUsed()
		{
			return (Boolean)cxl_IntraOpFluidsUsed.getValue(context);
		}
		public void setIntraOpFluidsUsed(Boolean value)
		{
			cxl_IntraOpFluidsUsed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IntraOpFluidsUsed = null;
		public boolean getSelectedDiathermyRecordIsNotNull()
		{
			return !cxl_SelectedDiathermyRecord.getValueIsNull(context);
		}
		public ims.clinical.vo.DiathermyDetailIntraOpVo getSelectedDiathermyRecord()
		{
			return (ims.clinical.vo.DiathermyDetailIntraOpVo)cxl_SelectedDiathermyRecord.getValue(context);
		}
		public void setSelectedDiathermyRecord(ims.clinical.vo.DiathermyDetailIntraOpVo value)
		{
			cxl_SelectedDiathermyRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedDiathermyRecord = null;
		public boolean getConfirmationRemoveSpecimenMessageIDIsNotNull()
		{
			return !cxl_ConfirmationRemoveSpecimenMessageID.getValueIsNull(context);
		}
		public Integer getConfirmationRemoveSpecimenMessageID()
		{
			return (Integer)cxl_ConfirmationRemoveSpecimenMessageID.getValue(context);
		}
		public void setConfirmationRemoveSpecimenMessageID(Integer value)
		{
			cxl_ConfirmationRemoveSpecimenMessageID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmationRemoveSpecimenMessageID = null;
		public boolean getConfirmationRemoveWoundPackingMessageIDIsNotNull()
		{
			return !cxl_ConfirmationRemoveWoundPackingMessageID.getValueIsNull(context);
		}
		public Integer getConfirmationRemoveWoundPackingMessageID()
		{
			return (Integer)cxl_ConfirmationRemoveWoundPackingMessageID.getValue(context);
		}
		public void setConfirmationRemoveWoundPackingMessageID(Integer value)
		{
			cxl_ConfirmationRemoveWoundPackingMessageID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmationRemoveWoundPackingMessageID = null;
		public boolean getConfirmationRemoveSkinClosureMessageIDIsNotNull()
		{
			return !cxl_ConfirmationRemoveSkinClosureMessageID.getValueIsNull(context);
		}
		public Integer getConfirmationRemoveSkinClosureMessageID()
		{
			return (Integer)cxl_ConfirmationRemoveSkinClosureMessageID.getValue(context);
		}
		public void setConfirmationRemoveSkinClosureMessageID(Integer value)
		{
			cxl_ConfirmationRemoveSkinClosureMessageID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmationRemoveSkinClosureMessageID = null;
		public boolean getRIEPerformedProcedureConfirmationMsgIDIsNotNull()
		{
			return !cxl_RIEPerformedProcedureConfirmationMsgID.getValueIsNull(context);
		}
		public Integer getRIEPerformedProcedureConfirmationMsgID()
		{
			return (Integer)cxl_RIEPerformedProcedureConfirmationMsgID.getValue(context);
		}
		public void setRIEPerformedProcedureConfirmationMsgID(Integer value)
		{
			cxl_RIEPerformedProcedureConfirmationMsgID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIEPerformedProcedureConfirmationMsgID = null;
		public boolean getTheatreSessionStaffDetailIsNotNull()
		{
			return !cxl_TheatreSessionStaffDetail.getValueIsNull(context);
		}
		public ims.clinical.vo.TheatreSessionStaffDetailVo getTheatreSessionStaffDetail()
		{
			return (ims.clinical.vo.TheatreSessionStaffDetailVo)cxl_TheatreSessionStaffDetail.getValue(context);
		}
		public void setTheatreSessionStaffDetail(ims.clinical.vo.TheatreSessionStaffDetailVo value)
		{
			cxl_TheatreSessionStaffDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TheatreSessionStaffDetail = null;
		public boolean getTheatreSessionIsNotNull()
		{
			return !cxl_TheatreSession.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_SessionShortVo getTheatreSession()
		{
			return (ims.scheduling.vo.Sch_SessionShortVo)cxl_TheatreSession.getValue(context);
		}
		public void setTheatreSession(ims.scheduling.vo.Sch_SessionShortVo value)
		{
			cxl_TheatreSession.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TheatreSession = null;
		public boolean getselectedCaseServiceIsNotNull()
		{
			return !cxl_selectedCaseService.getValueIsNull(context);
		}
		public ims.core.clinical.vo.ServiceRefVo getselectedCaseService()
		{
			return (ims.core.clinical.vo.ServiceRefVo)cxl_selectedCaseService.getValue(context);
		}
		public void setselectedCaseService(ims.core.clinical.vo.ServiceRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'selectedCaseService' RefVo context variable.");
			if(value == null)
				cxl_selectedCaseService.setValue(context, null);
			else
				cxl_selectedCaseService.setValue(context, new ims.core.clinical.vo.ServiceRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_selectedCaseService = null;
		public boolean getConfirmationRemoveSkinPrepMessageIDIsNotNull()
		{
			return !cxl_ConfirmationRemoveSkinPrepMessageID.getValueIsNull(context);
		}
		public Integer getConfirmationRemoveSkinPrepMessageID()
		{
			return (Integer)cxl_ConfirmationRemoveSkinPrepMessageID.getValue(context);
		}
		public void setConfirmationRemoveSkinPrepMessageID(Integer value)
		{
			cxl_ConfirmationRemoveSkinPrepMessageID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmationRemoveSkinPrepMessageID = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class IntraOpPerformedProcedures implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int FLAG_PERFORMED = 1;
			}
			public void disableAllIntraOpPerformedProceduresMenuItems()
			{
				this.contextMenuIntraOpPerformedProceduresFLAG_PERFORMEDItem.setEnabled(false);
			}
			public void hideAllIntraOpPerformedProceduresMenuItems()
			{
				this.contextMenuIntraOpPerformedProceduresFLAG_PERFORMEDItem.setVisible(false);
			}
			private Menu contextMenuIntraOpPerformedProcedures;
			public ReadOnlyMenuItem getIntraOpPerformedProceduresFLAG_PERFORMEDItem()
			{
				return this.contextMenuIntraOpPerformedProceduresFLAG_PERFORMEDItem;
			}
			private MenuItem contextMenuIntraOpPerformedProceduresFLAG_PERFORMEDItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[367];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Clinical.WoundPackingIntraOpVo", "BO-1072100144-ID", "ID_WoundPackingIntraOp");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Clinical.WoundPackingIntraOpVo", "BO-1072100144-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Clinical.WoundPackingIntraOpVo", "BO-1072100144-PACKINGSITE", "PackingSite");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Clinical.WoundPackingIntraOpVo", "BO-1072100144-PACKINGSITECOMMENTS", "PackingSiteComments");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Clinical.WoundPackingIntraOpVo", "BO-1072100144-PACKINGTYPE", "PackingType");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Clinical.WoundPackingIntraOpVo", "BO-1072100144-PACKINGTYPECOMMENTS", "PackingTypeComments");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Clinical.WoundPackingIntraOpVo", "BO-1072100144-INPLACEONDEPARTURE", "InPlaceOnDeparture");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Clinical.SkinClosureIntraOpVo", "BO-1072100145-ID", "ID_SkinClosureIntraOp");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Clinical.SkinClosureIntraOpVo", "BO-1072100145-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Clinical.SkinClosureIntraOpVo", "BO-1072100145-PROCEDUREWOUNDCLASS", "ProcedureWoundClass");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Clinical.SkinClosureIntraOpVo", "BO-1072100145-OTHER", "Other");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Clinical.SkinClosureIntraOpVo", "BO-1072100145-DETAILS", "Details");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Clinical.ArterialClampIntraOpVo", "BO-1072100147-ID", "ID_ArterialClampIntraOp");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Clinical.ArterialClampIntraOpVo", "BO-1072100147-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Clinical.ArterialClampIntraOpVo", "BO-1072100147-CLAMPSITE", "ClampSite");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Clinical.ArterialClampIntraOpVo", "BO-1072100147-TIMEON", "TimeOn");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Clinical.ArterialClampIntraOpVo", "BO-1072100147-TIMEOFF", "TimeOff");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-ID", "ID_ImplantsIntraOp");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-IMPLANTDESCRIPTION", "ImplantDescription");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-MANUFACTURER", "Manufacturer");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-CATALOGUENUMBER", "CatalogueNumber");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-LOTNUMBER", "LotNumber");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-SERIALNUMBER", "SerialNumber");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-QUANTITY", "Quantity");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-SIZE", "Size");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Clinical.ImplantsIntraOpVo", "BO-1072100146-EXPIRYDATE", "ExpiryDate");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Clinical.OtherEquipmentIntraOpVo", "BO-1072100148-ID", "ID_EquipmentIntraOp");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Clinical.OtherEquipmentIntraOpVo", "BO-1072100148-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Clinical.OtherEquipmentIntraOpVo", "BO-1072100148-EQUIPMENTDESCRIPTION", "EquipmentDescription");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Clinical.OtherEquipmentIntraOpVo", "BO-1072100148-UNITNUMBER", "UnitNumber");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Clinical.OtherEquipmentIntraOpVo", "BO-1072100148-EXPIRYDATE", "ExpiryDate");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Clinical.OtherEquipmentIntraOpVo", "BO-1072100148-COMMENTS", "Comments");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Clinical.HandoverCountsIntraOpVo", "BO-1072100154-ID", "ID_HandoverCountIntraOp");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Clinical.HandoverCountsIntraOpVo", "BO-1072100154-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Clinical.HandoverCountsIntraOpVo", "BO-1072100154-COUNTTYPE", "CountType");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Clinical.HandoverCountsIntraOpVo", "BO-1072100154-COUNTSTATUS", "CountStatus");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Clinical.HandoverCountsIntraOpVo", "BO-1072100154-INCORRECTCOUNTSTATUS", "IncorrectCountStatus");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Clinical.FinalCountsIntraOpVo", "BO-1072100152-ID", "ID_FinalCountIntraOp");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Clinical.FinalCountsIntraOpVo", "BO-1072100152-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Clinical.FinalCountsIntraOpVo", "BO-1072100152-SWABSACCOUNTABLEITEMSCORRECT", "SwabsAccountableItemscorrect");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Clinical.FinalCountsIntraOpVo", "BO-1072100152-INSTRUMENTSCORRECT", "InstrumentsCorrect");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Clinical.FinalCountsIntraOpVo", "BO-1072100152-SHARPSOTHERCORRECTANDREMOVEDFROMSET", "SharpsOtherCorrectAndRemovedFromSet");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Clinical.FinalCountsIntraOpVo", "BO-1072100152-OTHERMISSINGITEMS", "OtherMissingItems");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Clinical.FinalCountsIntraOpVo", "BO-1072100152-OTHERACTIONSTAKEN", "OtherActionsTaken");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-ID", "ID_SpecimenIntraOp");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-SPECIMENDESTINATION", "SpecimenDestination");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-OTHER", "Other");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-DETAILS", "Details");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-NOOFSPECIMENS", "NoOfSpecimens");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-ISDIRECT", "IsDirect");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-ISINDIRECT", "IsIndirect");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpSpecimenVo", "BO-1072100143-TYPECOMMENTS", "TypeComments");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Clinical.IntraOpCaseStaffDetailRefVo", "BO-1072100132-ID", "ID_IntraOpCaseStaffDetails");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Clinical.TheatreAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Clinical.TheatreBookingRef", "BO-1090100011-ID", "ID_TheatreBooking");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-ID", "ID_PeriOpSafetyBriefTime");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-SAFETYBRIEFTIME", "SafetyBriefTime");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-RECORDEDBY", "RecordedBy");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-ID", "ID_PeriOpReadyForSurgeryTime");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-ANAESTHETISEDREADYFORSURGERYTIME", "AnaesthetisedReadyForSurgeryTime");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-RECORDEDBY", "RecordedBy");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-ID", "ID_PeriOpAnaesthticSignInTim");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-ANAESTHETICSTARTTIME", "AnaestheticStartTime");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-RECORDEDBY", "RecordedBy");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-ID", "ID_PeriOpPatientArrivedTime");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-PATIENTARRIVEDTIME", "PatientArrivedTime");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-RECORDEDBY", "RecordedBy");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-ID", "ID_PeriOpPatientLeftTheatre");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-PATIENTLEFTTHEATRETIME", "PatientLeftTheatreTime");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-RECORDEDBY", "RecordedBy");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-ID", "ID_PeriOpPatientSentTime");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-PATIENTSENTTIME", "PatientSentTime");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-RECORDEDBY", "RecordedBy");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-ID", "ID_PeriOpReadyForDischargeTi");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-READYFORDISCHARGETIME", "ReadyForDischargeTime");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-RECORDEDBY", "RecordedBy");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-ID", "ID_PeriOpSurgeryStartTime");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-SURGERYSTARTTIME", "SurgeryStartTime");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-RECORDEDBY", "RecordedBy");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-ID", "ID_PeriOpSurgeryStopTime");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-SURGERYSTOPTIME", "SurgeryStopTime");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-RECORDEDBY", "RecordedBy");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-ID", "ID_PeriOpTimeOutComplete");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-TIMEOUTCOMPLETED", "TimeOutCompleted");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-RECORDEDBY", "RecordedBy");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-ID", "ID_PeriOpTimeOutOfRecoveryTi");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-TIMEOUTOFRECOVERY", "TimeOutOfRecovery");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-RECORDEDBY", "RecordedBy");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-ID", "ID_IntraOpCaseStaffDetails");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-ANAESTHETICTYPE", "AnaestheticType");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-ANAESTHETIST", "Anaesthetist");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-ASSISTINGANAESTHETIST", "AssistingAnaesthetist");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-SUPERVISINGANAESTHETIST", "SupervisingAnaesthetist");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-ANAESTHETICPRACTIONER", "AnaestheticPractioner");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-OPERATINGSURGEON", "OperatingSurgeon");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-SUPERVISINGSURGEON", "SupervisingSurgeon");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-OTHER", "Other");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-DISPLAYDIATHERMYANDLASER", "DisplayDiathermyandLaser");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-DISPLAYIRRIGATIONCATHETERSDRAINSTUBES", "DisplayIrrigationCathetersDrainsTubes");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-DISPLAYSPECIMENSWOUNDPACKINGSKINCLOSURE", "DisplaySpecimensWoundPackingSkinClosure");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-DISPLAYIMPLANTSARTERIALCLAMPSOTHEREQUIPMENT", "DisplayImplantsArterialClampsOtherEquipment");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-DISPLAYTOURNIQUET", "DisplayTourniquet");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-DISPLAYRECOVERYDETAILS", "DisplayRecoveryDetails");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-ISRECOVERYINTHEATRE", "IsRecoveryInTheatre");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__CaseDetails_" + componentIdentifier, "BO-1072100132-CASESERVICE", "CaseService");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-ID", "ID_TheatreSessionStaffDetail");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-ANAESTHETIST", "Anaesthetist");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-ASSISTINGANAESTHETIST", "AssistingAnaesthetist");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-SUPERVISINGANAESTHETIST", "SupervisingAnaesthetist");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-ANAESTHETICPRACTIONER", "AnaestheticPractioner");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-OPERATINGSURGEON", "OperatingSurgeon");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-SUPERVISINGSURGEON", "SupervisingSurgeon");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-OTHER", "Other");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SessionStaffDetails_" + componentIdentifier, "BO-1072100117-NOANAESTHETISTPRESENTLA", "NoAnaesthetistPresentLA");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-ID", "ID_PatientPreperationIntraOp");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-OTHERDETAILS", "OtherDetails");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-SKININTEGRITYMAINTAINED", "SkinIntegrityMaintained");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-PATIENTTRANSFERTOOPERATINGTABLEVIA", "PatientTransferToOperatingTableVia");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-PATIENTTRANSFERFROMOPERATINGTABLEVIA1", "PatientTransferFromOperatingTableVia1");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-BODYPOSITION", "BodyPosition");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-LEFTARMPOSITION", "LeftArmPosition");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-RIGHTARMPOSITION", "RightArmPosition");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-LEFTLEGPOSITION", "LeftLegPosition");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-RIGHTLEGPOSITION", "RightLegPosition");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-WASPATIENTWARMED", "WasPatientWarmed");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-FLUIDWARMERUSED", "FluidWarmerUsed");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PatientPreparation_" + componentIdentifier, "BO-1072100136-WARMINGBLANKETUSED", "WarmingBlanketUsed");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-ID", "ID_LaserDetailIntraOp");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-DEVICENAME", "DeviceName");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-DEVICESERIALNUMBER", "DeviceSerialNumber");
			fields[292] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-LASERFIBRELOTNUMBER", "LaserFibreLotNumber");
			fields[293] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-LASERMODE", "LaserMode");
			fields[294] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-POWER", "Power");
			fields[295] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-TOTALDURATIONSECONDS", "TotalDurationSeconds");
			fields[296] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__LaserDetails_" + componentIdentifier, "BO-1072100139-NUMBEROFBURNS", "NumberOfBurns");
			fields[297] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__Irrigant_" + componentIdentifier, "BO-1072100140-ID", "ID_IrrigantIntraOp");
			fields[298] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__Irrigant_" + componentIdentifier, "BO-1072100140-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[299] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__Irrigant_" + componentIdentifier, "BO-1072100140-ESTIMATEDBLOODLOSS", "EstimatedBloodLoss");
			fields[300] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__Irrigant_" + componentIdentifier, "BO-1072100140-OVERALLTOTALVOLUMEIN", "OverallTotalVolumeIn");
			fields[301] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__Irrigant_" + componentIdentifier, "BO-1072100140-TOTALVOLUMEOUT", "TotalVolumeOut");
			fields[302] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__Irrigant_" + componentIdentifier, "BO-1072100140-TOTALVOLUMEDIFFERENCE", "TotalVolumeDifference");
			fields[303] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeIntoRecovery_" + componentIdentifier, "BO-1072100155-ID", "ID_PeriOpTimeIntoRecovery");
			fields[304] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeIntoRecovery_" + componentIdentifier, "BO-1072100155-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[305] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeIntoRecovery_" + componentIdentifier, "BO-1072100155-TIMEINTORECOVERY", "TimeIntoRecovery");
			fields[306] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TimeIntoRecovery_" + componentIdentifier, "BO-1072100155-RECORDEDBY", "RecordedBy");
			fields[307] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RecoveryDetails_" + componentIdentifier, "BO-1072100156-ID", "ID_PeriOpRecoveryDetail");
			fields[308] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RecoveryDetails_" + componentIdentifier, "BO-1072100156-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[309] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RecoveryDetails_" + componentIdentifier, "BO-1072100156-MOS", "MOS");
			fields[310] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RecoveryDetails_" + componentIdentifier, "BO-1072100156-AWAITINGTEMP", "AwaitingTemp");
			fields[311] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RecoveryDetails_" + componentIdentifier, "BO-1072100156-BLOODGLUCOSERESULT", "BloodGlucoseResult");
			fields[312] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__RecoveryDetails_" + componentIdentifier, "BO-1072100156-PAINSCORE", "PainScore");
			fields[313] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-ID", "ID_PerfProcAndSignOutIntraOp");
			fields[314] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[315] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-UNPLANNEDRETURNTOTHEATRE", "Unplannedreturntotheatre");
			fields[316] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-CONFIRMEDCOUNTSCOMPLETE", "ConfirmedCountsComplete");
			fields[317] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-ANTIBIOTICSAFTERKNIFETOSKIN", "AntibioticsAfterKnifeToSkin");
			fields[318] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-TIMEINTRAOPANTIBIOTICSGIVEN", "TimeIntraOpAntibioticsGiven");
			fields[319] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-ADMINISTRATIONRECORDCOMPLETED", "AdministrationRecordCompleted");
			fields[320] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-ANYSPECIMENSHAVEBEENLABELLED", "AnySpecimensHaveBeenLabelled");
			fields[321] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-ANYEQUIPMENTPROBLEMSADDRESSED", "AnyEquipmentProblemsAddressed");
			fields[322] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__PerformedSignOut_" + componentIdentifier, "BO-1072100150-KEYCONCERNSDOCUMENTED", "KeyConcernsDocumented");
			fields[323] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[324] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[325] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[326] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[327] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[328] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[329] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[330] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[331] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[332] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[333] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[334] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[335] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[336] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[337] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[338] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[339] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[340] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[341] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__ChoosenAssessment_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[342] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-ID", "ID_DiathermyDetailIntraOp");
			fields[343] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[344] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-DIATHERMYMODE", "DiathermyMode");
			fields[345] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-COAGSETTING", "CoagSetting");
			fields[346] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-CUTSETTING", "CutSetting");
			fields[347] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-SERIALNUMBER", "SerialNumber");
			fields[348] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-PADSITE", "PadSite");
			fields[349] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__SelectedDiathermyRecord_" + componentIdentifier, "BO-1072100138-BLENDSETTING", "BlendSetting");
			fields[350] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-ID", "ID_TheatreSessionStaffDetail");
			fields[351] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-ANAESTHETIST", "Anaesthetist");
			fields[352] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-ASSISTINGANAESTHETIST", "AssistingAnaesthetist");
			fields[353] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-SUPERVISINGANAESTHETIST", "SupervisingAnaesthetist");
			fields[354] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-ANAESTHETICPRACTIONER", "AnaestheticPractioner");
			fields[355] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-OPERATINGSURGEON", "OperatingSurgeon");
			fields[356] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-SUPERVISINGSURGEON", "SupervisingSurgeon");
			fields[357] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-OTHER", "Other");
			fields[358] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSessionStaffDetail_" + componentIdentifier, "BO-1072100117-NOANAESTHETISTPRESENTLA", "NoAnaesthetistPresentLA");
			fields[359] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier, "BO-1055100010-ID", "ID_Sch_Session");
			fields[360] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier, "BO-1055100010-NAME", "Name");
			fields[361] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier, "BO-1055100010-DESCRIPTION", "Description");
			fields[362] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier, "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[363] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier, "BO-1055100010-STARTTM", "StartTm");
			fields[364] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier, "BO-1055100010-ENDTM", "EndTm");
			fields[365] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__TheatreSession_" + componentIdentifier, "BO-1055100010-ISACTIVE", "IsActive");
			fields[366] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.IntraOperativeCaseDetailsDialog.__internal_x_context__selectedCaseService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
