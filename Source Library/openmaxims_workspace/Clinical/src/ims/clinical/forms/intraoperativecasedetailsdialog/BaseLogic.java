//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.intraoperativecasedetailsdialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.clinical.domain.IntraOperativeCaseDetailsDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.clinical.domain.IntraOperativeCaseDetailsDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void bindgrdScrubNursesColRoleLookup()
	{
		this.form.lyrIntra().tabCaseDetails().grdScrubNurses().ColRoleComboBox().clear();
		ims.clinical.vo.lookups.CirculatorScrubNurseRoleCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getCirculatorScrubNurseRole(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabCaseDetails().grdScrubNurses().ColRoleComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void oncmbLateralityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPlannedProcedures().cmbLaterality().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLateralityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLateralityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPlannedProcedures().cmbLaterality().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLateralityLookup()
	{
		this.form.lyrIntra().tabPlannedProcedures().cmbLaterality().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPlannedProcedures().cmbLaterality().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLateralityLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPlannedProcedures().cmbLaterality().setValue(instance);
	}
	protected final void defaultcmbLateralityLookupValue()
	{
		this.form.lyrIntra().tabPlannedProcedures().cmbLaterality().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbSurgicalPrepSiteSolutionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp existingInstance = (ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSurgicalPrepSiteSolutionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp)
		{
			ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp instance = (ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSurgicalPrepSiteSolutionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp existingInstance = (ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSurgicalPrepSiteSolutionLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().clear();
		ims.clinical.vo.lookups.SurgicalSitePreparationIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getSurgicalSitePreparationIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSurgicalPrepSiteSolutionLookupValue(int id)
	{
		ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getSurgicalSitePreparationIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().setValue(instance);
	}
	protected final void defaultcmbSurgicalPrepSiteSolutionLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().setValue((ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.SurgicalSitePreparationIntraOp.TYPE_ID));
	}
	protected final void bindgrdPositioningDevicesColAssistingSurgeonLookup()
	{
		this.form.lyrIntra().tabPreparation().grdPositioningDevices().ColAssistingSurgeonComboBox().clear();
		ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getPositioningDevicesIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().grdPositioningDevices().ColAssistingSurgeonComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void oncmbRightLegPositionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbRightLegPosition().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightLegPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRightLegPositionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)
		{
			ims.clinical.vo.lookups.LeftRightLegPositionIntraOp instance = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRightLegPositionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightLegPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbRightLegPosition().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRightLegPositionLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbRightLegPosition().clear();
		ims.clinical.vo.lookups.LeftRightLegPositionIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getLeftRightLegPositionIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbRightLegPosition().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRightLegPositionLookupValue(int id)
	{
		ims.clinical.vo.lookups.LeftRightLegPositionIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getLeftRightLegPositionIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbRightLegPosition().setValue(instance);
	}
	protected final void defaultcmbRightLegPositionLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbRightLegPosition().setValue((ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.TYPE_ID));
	}
	protected final void oncmbLeftLegPositionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbLeftLegPosition().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightLegPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLeftLegPositionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)
		{
			ims.clinical.vo.lookups.LeftRightLegPositionIntraOp instance = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLeftLegPositionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightLegPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbLeftLegPosition().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLeftLegPositionLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbLeftLegPosition().clear();
		ims.clinical.vo.lookups.LeftRightLegPositionIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getLeftRightLegPositionIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbLeftLegPosition().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLeftLegPositionLookupValue(int id)
	{
		ims.clinical.vo.lookups.LeftRightLegPositionIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getLeftRightLegPositionIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbLeftLegPosition().setValue(instance);
	}
	protected final void defaultcmbLeftLegPositionLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbLeftLegPosition().setValue((ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.TYPE_ID));
	}
	protected final void oncmbRightArmPositionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbRightArmPosition().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightArmPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRightArmPositionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)
		{
			ims.clinical.vo.lookups.LeftRightArmPositionIntraOp instance = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRightArmPositionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightArmPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbRightArmPosition().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRightArmPositionLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbRightArmPosition().clear();
		ims.clinical.vo.lookups.LeftRightArmPositionIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getLeftRightArmPositionIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbRightArmPosition().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRightArmPositionLookupValue(int id)
	{
		ims.clinical.vo.lookups.LeftRightArmPositionIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getLeftRightArmPositionIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbRightArmPosition().setValue(instance);
	}
	protected final void defaultcmbRightArmPositionLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbRightArmPosition().setValue((ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.TYPE_ID));
	}
	protected final void oncmbLeftArmPositionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbLeftArmPosition().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightArmPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLeftArmPositionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)
		{
			ims.clinical.vo.lookups.LeftRightArmPositionIntraOp instance = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLeftArmPositionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.LeftRightArmPositionIntraOp existingInstance = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbLeftArmPosition().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLeftArmPositionLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbLeftArmPosition().clear();
		ims.clinical.vo.lookups.LeftRightArmPositionIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getLeftRightArmPositionIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbLeftArmPosition().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLeftArmPositionLookupValue(int id)
	{
		ims.clinical.vo.lookups.LeftRightArmPositionIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getLeftRightArmPositionIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbLeftArmPosition().setValue(instance);
	}
	protected final void defaultcmbLeftArmPositionLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbLeftArmPosition().setValue((ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.TYPE_ID));
	}
	protected final void oncmbBodyPositionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbBodyPosition().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.BodyPositionIntraOp existingInstance = (ims.clinical.vo.lookups.BodyPositionIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbBodyPositionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.BodyPositionIntraOp)
		{
			ims.clinical.vo.lookups.BodyPositionIntraOp instance = (ims.clinical.vo.lookups.BodyPositionIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbBodyPositionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.BodyPositionIntraOp existingInstance = (ims.clinical.vo.lookups.BodyPositionIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbBodyPosition().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbBodyPositionLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbBodyPosition().clear();
		ims.clinical.vo.lookups.BodyPositionIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getBodyPositionIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbBodyPosition().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbBodyPositionLookupValue(int id)
	{
		ims.clinical.vo.lookups.BodyPositionIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getBodyPositionIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbBodyPosition().setValue(instance);
	}
	protected final void defaultcmbBodyPositionLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbBodyPosition().setValue((ims.clinical.vo.lookups.BodyPositionIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.BodyPositionIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.BodyPositionIntraOp.TYPE_ID));
	}
	protected final void oncmbPatTransFromOperatingValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbPatTransFromOperating().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp existingInstance = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatTransFromOperatingLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)
		{
			ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp instance = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatTransFromOperatingLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp existingInstance = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbPatTransFromOperating().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatTransFromOperatingLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbPatTransFromOperating().clear();
		ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getTransferToFromOperatingTableIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbPatTransFromOperating().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatTransFromOperatingLookupValue(int id)
	{
		ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getTransferToFromOperatingTableIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbPatTransFromOperating().setValue(instance);
	}
	protected final void defaultcmbPatTransFromOperatingLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbPatTransFromOperating().setValue((ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.TYPE_ID));
	}
	protected final void oncmbPatTransToOperatingValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPreparation().cmbPatTransToOperating().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp existingInstance = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatTransToOperatingLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)
		{
			ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp instance = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatTransToOperatingLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp existingInstance = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPreparation().cmbPatTransToOperating().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatTransToOperatingLookup()
	{
		this.form.lyrIntra().tabPreparation().cmbPatTransToOperating().clear();
		ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getTransferToFromOperatingTableIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().cmbPatTransToOperating().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatTransToOperatingLookupValue(int id)
	{
		ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp instance = ims.clinical.vo.lookups.LookupHelper.getTransferToFromOperatingTableIntraOpInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPreparation().cmbPatTransToOperating().setValue(instance);
	}
	protected final void defaultcmbPatTransToOperatingLookupValue()
	{
		this.form.lyrIntra().tabPreparation().cmbPatTransToOperating().setValue((ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.class, engine.getFormName().getID(), ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.TYPE_ID));
	}
	protected final void bindchklistPatPreparationLookup()
	{
		this.form.lyrIntra().tabPreparation().chklistPatPreparation().clear();
		ims.clinical.vo.lookups.PatientPreparationIntraOpCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getPatientPreparationIntraOp(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPreparation().chklistPatPreparation().newRow(lookupCollection.get(x));
		}
	}
	protected final void bindchklistpatientSafetyMeasuresLookup()
	{
		this.form.lyrIntra().tabDiathermy().chklistpatientSafetyMeasures().clear();
		ims.core.vo.lookups.LaserPatientSafetyMeasuresCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLaserPatientSafetyMeasures(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabDiathermy().chklistpatientSafetyMeasures().newRow(lookupCollection.get(x));
		}
	}
	protected final void oncmbLaserValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabDiathermy().cmbLaser().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LaserMode existingInstance = (ims.core.vo.lookups.LaserMode)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLaserLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LaserMode)
		{
			ims.core.vo.lookups.LaserMode instance = (ims.core.vo.lookups.LaserMode)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLaserLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LaserMode existingInstance = (ims.core.vo.lookups.LaserMode)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabDiathermy().cmbLaser().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLaserLookup()
	{
		this.form.lyrIntra().tabDiathermy().cmbLaser().clear();
		ims.core.vo.lookups.LaserModeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLaserMode(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabDiathermy().cmbLaser().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLaserLookupValue(int id)
	{
		ims.core.vo.lookups.LaserMode instance = ims.core.vo.lookups.LookupHelper.getLaserModeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabDiathermy().cmbLaser().setValue(instance);
	}
	protected final void defaultcmbLaserLookupValue()
	{
		this.form.lyrIntra().tabDiathermy().cmbLaser().setValue((ims.core.vo.lookups.LaserMode)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LaserMode.class, engine.getFormName().getID(), ims.core.vo.lookups.LaserMode.TYPE_ID));
	}
	protected final void oncmbLaserDeviceSerialNumberValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LaserDeviceSerialNumber existingInstance = (ims.core.vo.lookups.LaserDeviceSerialNumber)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLaserDeviceSerialNumberLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LaserDeviceSerialNumber)
		{
			ims.core.vo.lookups.LaserDeviceSerialNumber instance = (ims.core.vo.lookups.LaserDeviceSerialNumber)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLaserDeviceSerialNumberLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LaserDeviceSerialNumber existingInstance = (ims.core.vo.lookups.LaserDeviceSerialNumber)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLaserDeviceSerialNumberLookup()
	{
		this.form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().clear();
		ims.core.vo.lookups.LaserDeviceSerialNumberCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLaserDeviceSerialNumber(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLaserDeviceSerialNumberLookupValue(int id)
	{
		ims.core.vo.lookups.LaserDeviceSerialNumber instance = ims.core.vo.lookups.LookupHelper.getLaserDeviceSerialNumberInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().setValue(instance);
	}
	protected final void defaultcmbLaserDeviceSerialNumberLookupValue()
	{
		this.form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().setValue((ims.core.vo.lookups.LaserDeviceSerialNumber)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LaserDeviceSerialNumber.class, engine.getFormName().getID(), ims.core.vo.lookups.LaserDeviceSerialNumber.TYPE_ID));
	}
	protected final void oncmbLaserDeviceNameValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabDiathermy().cmbLaserDeviceName().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LaserDeviceName existingInstance = (ims.core.vo.lookups.LaserDeviceName)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLaserDeviceNameLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LaserDeviceName)
		{
			ims.core.vo.lookups.LaserDeviceName instance = (ims.core.vo.lookups.LaserDeviceName)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLaserDeviceNameLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LaserDeviceName existingInstance = (ims.core.vo.lookups.LaserDeviceName)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabDiathermy().cmbLaserDeviceName().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLaserDeviceNameLookup()
	{
		this.form.lyrIntra().tabDiathermy().cmbLaserDeviceName().clear();
		ims.core.vo.lookups.LaserDeviceNameCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLaserDeviceName(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabDiathermy().cmbLaserDeviceName().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLaserDeviceNameLookupValue(int id)
	{
		ims.core.vo.lookups.LaserDeviceName instance = ims.core.vo.lookups.LookupHelper.getLaserDeviceNameInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabDiathermy().cmbLaserDeviceName().setValue(instance);
	}
	protected final void defaultcmbLaserDeviceNameLookupValue()
	{
		this.form.lyrIntra().tabDiathermy().cmbLaserDeviceName().setValue((ims.core.vo.lookups.LaserDeviceName)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LaserDeviceName.class, engine.getFormName().getID(), ims.core.vo.lookups.LaserDeviceName.TYPE_ID));
	}
	protected final void oncmbDiaPadSiteValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabDiathermy().cmbDiaPadSite().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DiathermyPadSite existingInstance = (ims.core.vo.lookups.DiathermyPadSite)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDiaPadSiteLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.DiathermyPadSite)
		{
			ims.core.vo.lookups.DiathermyPadSite instance = (ims.core.vo.lookups.DiathermyPadSite)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDiaPadSiteLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DiathermyPadSite existingInstance = (ims.core.vo.lookups.DiathermyPadSite)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabDiathermy().cmbDiaPadSite().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDiaPadSiteLookup()
	{
		this.form.lyrIntra().tabDiathermy().cmbDiaPadSite().clear();
		ims.core.vo.lookups.DiathermyPadSiteCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDiathermyPadSite(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabDiathermy().cmbDiaPadSite().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDiaPadSiteLookupValue(int id)
	{
		ims.core.vo.lookups.DiathermyPadSite instance = ims.core.vo.lookups.LookupHelper.getDiathermyPadSiteInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabDiathermy().cmbDiaPadSite().setValue(instance);
	}
	protected final void defaultcmbDiaPadSiteLookupValue()
	{
		this.form.lyrIntra().tabDiathermy().cmbDiaPadSite().setValue((ims.core.vo.lookups.DiathermyPadSite)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.DiathermyPadSite.class, engine.getFormName().getID(), ims.core.vo.lookups.DiathermyPadSite.TYPE_ID));
	}
	protected final void oncmbDiaSerialNumberValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.DiathermySerialNumber existingInstance = (ims.clinical.vo.lookups.DiathermySerialNumber)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDiaSerialNumberLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.DiathermySerialNumber)
		{
			ims.clinical.vo.lookups.DiathermySerialNumber instance = (ims.clinical.vo.lookups.DiathermySerialNumber)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDiaSerialNumberLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.DiathermySerialNumber existingInstance = (ims.clinical.vo.lookups.DiathermySerialNumber)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDiaSerialNumberLookup()
	{
		this.form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().clear();
		ims.clinical.vo.lookups.DiathermySerialNumberCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getDiathermySerialNumber(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDiaSerialNumberLookupValue(int id)
	{
		ims.clinical.vo.lookups.DiathermySerialNumber instance = ims.clinical.vo.lookups.LookupHelper.getDiathermySerialNumberInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setValue(instance);
	}
	protected final void defaultcmbDiaSerialNumberLookupValue()
	{
		this.form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setValue((ims.clinical.vo.lookups.DiathermySerialNumber)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.DiathermySerialNumber.class, engine.getFormName().getID(), ims.clinical.vo.lookups.DiathermySerialNumber.TYPE_ID));
	}
	protected final void oncmbIrrigantDetailValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabIrrigation().cmbIrrigantDetail().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.IrrigantSolution existingInstance = (ims.core.vo.lookups.IrrigantSolution)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIrrigantDetailLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.IrrigantSolution)
		{
			ims.core.vo.lookups.IrrigantSolution instance = (ims.core.vo.lookups.IrrigantSolution)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIrrigantDetailLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.IrrigantSolution existingInstance = (ims.core.vo.lookups.IrrigantSolution)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabIrrigation().cmbIrrigantDetail().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIrrigantDetailLookup()
	{
		this.form.lyrIntra().tabIrrigation().cmbIrrigantDetail().clear();
		ims.core.vo.lookups.IrrigantSolutionCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getIrrigantSolution(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabIrrigation().cmbIrrigantDetail().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIrrigantDetailLookupValue(int id)
	{
		ims.core.vo.lookups.IrrigantSolution instance = ims.core.vo.lookups.LookupHelper.getIrrigantSolutionInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabIrrigation().cmbIrrigantDetail().setValue(instance);
	}
	protected final void defaultcmbIrrigantDetailLookupValue()
	{
		this.form.lyrIntra().tabIrrigation().cmbIrrigantDetail().setValue((ims.core.vo.lookups.IrrigantSolution)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.IrrigantSolution.class, engine.getFormName().getID(), ims.core.vo.lookups.IrrigantSolution.TYPE_ID));
	}
	protected final void oncmbTourniquetSiteValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabTourniquet().cmbTourniquetSite().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.TourniquetSite existingInstance = (ims.clinical.vo.lookups.TourniquetSite)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTourniquetSiteLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.TourniquetSite)
		{
			ims.clinical.vo.lookups.TourniquetSite instance = (ims.clinical.vo.lookups.TourniquetSite)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTourniquetSiteLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.TourniquetSite existingInstance = (ims.clinical.vo.lookups.TourniquetSite)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabTourniquet().cmbTourniquetSite().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTourniquetSiteLookup()
	{
		this.form.lyrIntra().tabTourniquet().cmbTourniquetSite().clear();
		ims.clinical.vo.lookups.TourniquetSiteCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getTourniquetSite(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabTourniquet().cmbTourniquetSite().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTourniquetSiteLookupValue(int id)
	{
		ims.clinical.vo.lookups.TourniquetSite instance = ims.clinical.vo.lookups.LookupHelper.getTourniquetSiteInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabTourniquet().cmbTourniquetSite().setValue(instance);
	}
	protected final void defaultcmbTourniquetSiteLookupValue()
	{
		this.form.lyrIntra().tabTourniquet().cmbTourniquetSite().setValue((ims.clinical.vo.lookups.TourniquetSite)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.TourniquetSite.class, engine.getFormName().getID(), ims.clinical.vo.lookups.TourniquetSite.TYPE_ID));
	}
	protected final void oncmbPerformedLateralityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPerformedLateralityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPerformedLateralityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPerformedLateralityLookup()
	{
		this.form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPerformedLateralityLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setValue(instance);
	}
	protected final void defaultcmbPerformedLateralityLookupValue()
	{
		this.form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.clinical.domain.IntraOperativeCaseDetailsDialog domain;
}
