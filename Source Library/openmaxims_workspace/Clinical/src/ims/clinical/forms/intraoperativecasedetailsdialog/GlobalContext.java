//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.intraoperativecasedetailsdialog;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Assessment = new AssessmentContext(context);
		Clinical = new ClinicalContext(context);
		Core = new CoreContext(context);
		Scheduling = new SchedulingContext(context);
	}
	public final class AssessmentContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private AssessmentContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getAssessmentsForSpecialtyCollectionIsNotNull()
		{
			return !cx_AssessmentAssessmentsForSpecialtyCollection.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentLiteVoCollection getAssessmentsForSpecialtyCollection()
		{
			return (ims.assessment.vo.UserAssessmentLiteVoCollection)cx_AssessmentAssessmentsForSpecialtyCollection.getValue(context);
		}
		public void setAssessmentsForSpecialtyCollection(ims.assessment.vo.UserAssessmentLiteVoCollection value)
		{
			cx_AssessmentAssessmentsForSpecialtyCollection.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_AssessmentAssessmentsForSpecialtyCollection = new ims.framework.ContextVariable("Assessment.AssessmentsForSpecialtyCollection", "_cv_Assessment.AssessmentsForSpecialtyCollection");

		private ims.framework.Context context;
	}
	public final class ClinicalContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ClinicalContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getWoundPackingIntraOpVoIsNotNull()
		{
			return !cx_ClinicalWoundPackingIntraOpVo.getValueIsNull(context);
		}
		public ims.clinical.vo.WoundPackingIntraOpVo getWoundPackingIntraOpVo()
		{
			return (ims.clinical.vo.WoundPackingIntraOpVo)cx_ClinicalWoundPackingIntraOpVo.getValue(context);
		}
		public void setWoundPackingIntraOpVo(ims.clinical.vo.WoundPackingIntraOpVo value)
		{
			cx_ClinicalWoundPackingIntraOpVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalWoundPackingIntraOpVo = new ims.framework.ContextVariable("Clinical.WoundPackingIntraOpVo", "_cv_Clinical.WoundPackingIntraOpVo");
		public boolean getSkinClosureIntraOpVoIsNotNull()
		{
			return !cx_ClinicalSkinClosureIntraOpVo.getValueIsNull(context);
		}
		public ims.clinical.vo.SkinClosureIntraOpVo getSkinClosureIntraOpVo()
		{
			return (ims.clinical.vo.SkinClosureIntraOpVo)cx_ClinicalSkinClosureIntraOpVo.getValue(context);
		}
		public void setSkinClosureIntraOpVo(ims.clinical.vo.SkinClosureIntraOpVo value)
		{
			cx_ClinicalSkinClosureIntraOpVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalSkinClosureIntraOpVo = new ims.framework.ContextVariable("Clinical.SkinClosureIntraOpVo", "_cv_Clinical.SkinClosureIntraOpVo");
		public boolean getArterialClampIntraOpVoIsNotNull()
		{
			return !cx_ClinicalArterialClampIntraOpVo.getValueIsNull(context);
		}
		public ims.clinical.vo.ArterialClampsIntraOpVo getArterialClampIntraOpVo()
		{
			return (ims.clinical.vo.ArterialClampsIntraOpVo)cx_ClinicalArterialClampIntraOpVo.getValue(context);
		}
		public void setArterialClampIntraOpVo(ims.clinical.vo.ArterialClampsIntraOpVo value)
		{
			cx_ClinicalArterialClampIntraOpVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalArterialClampIntraOpVo = new ims.framework.ContextVariable("Clinical.ArterialClampIntraOpVo", "_cv_Clinical.ArterialClampIntraOpVo");
		public boolean getImplantsIntraOpVoIsNotNull()
		{
			return !cx_ClinicalImplantsIntraOpVo.getValueIsNull(context);
		}
		public ims.clinical.vo.ImplantsIntraOpVo getImplantsIntraOpVo()
		{
			return (ims.clinical.vo.ImplantsIntraOpVo)cx_ClinicalImplantsIntraOpVo.getValue(context);
		}
		public void setImplantsIntraOpVo(ims.clinical.vo.ImplantsIntraOpVo value)
		{
			cx_ClinicalImplantsIntraOpVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalImplantsIntraOpVo = new ims.framework.ContextVariable("Clinical.ImplantsIntraOpVo", "_cv_Clinical.ImplantsIntraOpVo");
		public boolean getOtherEquipmentIntraOpVoIsNotNull()
		{
			return !cx_ClinicalOtherEquipmentIntraOpVo.getValueIsNull(context);
		}
		public ims.clinical.vo.EquipmentIntraOpVo getOtherEquipmentIntraOpVo()
		{
			return (ims.clinical.vo.EquipmentIntraOpVo)cx_ClinicalOtherEquipmentIntraOpVo.getValue(context);
		}
		public void setOtherEquipmentIntraOpVo(ims.clinical.vo.EquipmentIntraOpVo value)
		{
			cx_ClinicalOtherEquipmentIntraOpVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalOtherEquipmentIntraOpVo = new ims.framework.ContextVariable("Clinical.OtherEquipmentIntraOpVo", "_cv_Clinical.OtherEquipmentIntraOpVo");
		public boolean getIntraOpCaseStaffDetailRefVoIsNotNull()
		{
			return !cx_ClinicalIntraOpCaseStaffDetailRefVo.getValueIsNull(context);
		}
		public ims.clinical.vo.IntraOpCaseStaffDetailsRefVo getIntraOpCaseStaffDetailRefVo()
		{
			return (ims.clinical.vo.IntraOpCaseStaffDetailsRefVo)cx_ClinicalIntraOpCaseStaffDetailRefVo.getValue(context);
		}
		public void setIntraOpCaseStaffDetailRefVo(ims.clinical.vo.IntraOpCaseStaffDetailsRefVo value)
		{
			cx_ClinicalIntraOpCaseStaffDetailRefVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalIntraOpCaseStaffDetailRefVo = new ims.framework.ContextVariable("Clinical.IntraOpCaseStaffDetailRefVo", "_cv_Clinical.IntraOpCaseStaffDetailRefVo");
		public boolean getHandoverCountsIntraOpVoIsNotNull()
		{
			return !cx_ClinicalHandoverCountsIntraOpVo.getValueIsNull(context);
		}
		public ims.clinical.vo.HandoverCountsIntraOpVo getHandoverCountsIntraOpVo()
		{
			return (ims.clinical.vo.HandoverCountsIntraOpVo)cx_ClinicalHandoverCountsIntraOpVo.getValue(context);
		}
		public void setHandoverCountsIntraOpVo(ims.clinical.vo.HandoverCountsIntraOpVo value)
		{
			cx_ClinicalHandoverCountsIntraOpVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalHandoverCountsIntraOpVo = new ims.framework.ContextVariable("Clinical.HandoverCountsIntraOpVo", "_cv_Clinical.HandoverCountsIntraOpVo");
		public boolean getFinalCountsIntraOpVoIsNotNull()
		{
			return !cx_ClinicalFinalCountsIntraOpVo.getValueIsNull(context);
		}
		public ims.clinical.vo.FinalCountsIntraOpVo getFinalCountsIntraOpVo()
		{
			return (ims.clinical.vo.FinalCountsIntraOpVo)cx_ClinicalFinalCountsIntraOpVo.getValue(context);
		}
		public void setFinalCountsIntraOpVo(ims.clinical.vo.FinalCountsIntraOpVo value)
		{
			cx_ClinicalFinalCountsIntraOpVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalFinalCountsIntraOpVo = new ims.framework.ContextVariable("Clinical.FinalCountsIntraOpVo", "_cv_Clinical.FinalCountsIntraOpVo");
		public boolean getTheatreAppointmentRefIsNotNull()
		{
			return !cx_ClinicalTheatreAppointmentRef.getValueIsNull(context);
		}
		public ims.scheduling.vo.Booking_AppointmentRefVo getTheatreAppointmentRef()
		{
			return (ims.scheduling.vo.Booking_AppointmentRefVo)cx_ClinicalTheatreAppointmentRef.getValue(context);
		}
		public void setTheatreAppointmentRef(ims.scheduling.vo.Booking_AppointmentRefVo value)
		{
			cx_ClinicalTheatreAppointmentRef.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalTheatreAppointmentRef = new ims.framework.ContextVariable("Clinical.TheatreAppointmentRef", "_cv_Clinical.TheatreAppointmentRef");
		public boolean getTheatreBookingRefIsNotNull()
		{
			return !cx_ClinicalTheatreBookingRef.getValueIsNull(context);
		}
		public ims.scheduling.vo.TheatreBookingRefVo getTheatreBookingRef()
		{
			return (ims.scheduling.vo.TheatreBookingRefVo)cx_ClinicalTheatreBookingRef.getValue(context);
		}
		public void setTheatreBookingRef(ims.scheduling.vo.TheatreBookingRefVo value)
		{
			cx_ClinicalTheatreBookingRef.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalTheatreBookingRef = new ims.framework.ContextVariable("Clinical.TheatreBookingRef", "_cv_Clinical.TheatreBookingRef");
		public boolean getIntraOpSpecimenVoIsNotNull()
		{
			return !cx_ClinicalIntraOpSpecimenVo.getValueIsNull(context);
		}
		public ims.clinical.vo.SpecimenIntraOpVo getIntraOpSpecimenVo()
		{
			return (ims.clinical.vo.SpecimenIntraOpVo)cx_ClinicalIntraOpSpecimenVo.getValue(context);
		}
		public void setIntraOpSpecimenVo(ims.clinical.vo.SpecimenIntraOpVo value)
		{
			cx_ClinicalIntraOpSpecimenVo.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalIntraOpSpecimenVo = new ims.framework.ContextVariable("Clinical.IntraOpSpecimenVo", "_cv_Clinical.IntraOpSpecimenVo");
		public boolean getIntraOpRecoveryMannerIsNotNull()
		{
			return !cx_ClinicalIntraOpRecoveryManner.getValueIsNull(context);
		}
		public Boolean getIntraOpRecoveryManner()
		{
			return (Boolean)cx_ClinicalIntraOpRecoveryManner.getValue(context);
		}
		public void setIntraOpRecoveryManner(Boolean value)
		{
			cx_ClinicalIntraOpRecoveryManner.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalIntraOpRecoveryManner = new ims.framework.ContextVariable("Clinical.IntraOpRecoveryManner", "_cv_Clinical.IntraOpRecoveryManner");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getRieMessageIsNotNull()
		{
			return !cx_CoreRieMessage.getValueIsNull(context);
		}
		public String getRieMessage()
		{
			return (String)cx_CoreRieMessage.getValue(context);
		}
		public void setRieMessage(String value)
		{
			cx_CoreRieMessage.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreRieMessage = new ims.framework.ContextVariable("Core.RieMessage", "_cv_Core.RieMessage");

		private ims.framework.Context context;
	}
	public final class SchedulingContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private SchedulingContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getTheatreSessionIsNotNull()
		{
			return !cx_SchedulingTheatreSession.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_SessionRefVo getTheatreSession()
		{
			return (ims.scheduling.vo.Sch_SessionRefVo)cx_SchedulingTheatreSession.getValue(context);
		}
		public void setTheatreSession(ims.scheduling.vo.Sch_SessionRefVo value)
		{
			cx_SchedulingTheatreSession.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingTheatreSession = new ims.framework.ContextVariable("Scheduling.TheatreSession", "_cv_Scheduling.TheatreSession");

		private ims.framework.Context context;
	}

	public AssessmentContext Assessment;
	public ClinicalContext Clinical;
	public CoreContext Core;
	public SchedulingContext Scheduling;
}
