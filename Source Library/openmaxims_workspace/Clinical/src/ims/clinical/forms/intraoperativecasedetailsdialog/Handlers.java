//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.intraoperativecasedetailsdialog;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindgrdScrubNursesColRoleLookup();
	abstract protected void bindcmbLateralityLookup();
	abstract protected void defaultcmbLateralityLookupValue();
	abstract protected void bindcmbSurgicalPrepSiteSolutionLookup();
	abstract protected void defaultcmbSurgicalPrepSiteSolutionLookupValue();
	abstract protected void bindgrdPositioningDevicesColAssistingSurgeonLookup();
	abstract protected void bindcmbRightLegPositionLookup();
	abstract protected void defaultcmbRightLegPositionLookupValue();
	abstract protected void bindcmbLeftLegPositionLookup();
	abstract protected void defaultcmbLeftLegPositionLookupValue();
	abstract protected void bindcmbRightArmPositionLookup();
	abstract protected void defaultcmbRightArmPositionLookupValue();
	abstract protected void bindcmbLeftArmPositionLookup();
	abstract protected void defaultcmbLeftArmPositionLookupValue();
	abstract protected void bindcmbBodyPositionLookup();
	abstract protected void defaultcmbBodyPositionLookupValue();
	abstract protected void bindcmbPatTransFromOperatingLookup();
	abstract protected void defaultcmbPatTransFromOperatingLookupValue();
	abstract protected void bindcmbPatTransToOperatingLookup();
	abstract protected void defaultcmbPatTransToOperatingLookupValue();
	abstract protected void bindchklistPatPreparationLookup();
	abstract protected void bindchklistpatientSafetyMeasuresLookup();
	abstract protected void bindcmbLaserLookup();
	abstract protected void defaultcmbLaserLookupValue();
	abstract protected void bindcmbLaserDeviceSerialNumberLookup();
	abstract protected void defaultcmbLaserDeviceSerialNumberLookupValue();
	abstract protected void bindcmbLaserDeviceNameLookup();
	abstract protected void defaultcmbLaserDeviceNameLookupValue();
	abstract protected void bindcmbDiaPadSiteLookup();
	abstract protected void defaultcmbDiaPadSiteLookupValue();
	abstract protected void bindcmbDiaSerialNumberLookup();
	abstract protected void defaultcmbDiaSerialNumberLookupValue();
	abstract protected void bindcmbIrrigantDetailLookup();
	abstract protected void defaultcmbIrrigantDetailLookupValue();
	abstract protected void bindcmbTourniquetSiteLookup();
	abstract protected void defaultcmbTourniquetSiteLookupValue();
	abstract protected void bindcmbPerformedLateralityLookup();
	abstract protected void defaultcmbPerformedLateralityLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrIntraTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onBtnRemoveTimesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkDisplayRecoveryValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbCaseServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbScrubPractitioner2TextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbScrubPractitioner1TextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcOperatingSurgeonValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveScrubNurseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddScrubNurseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveAssistingSurgeonClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddAssistingSurgeonClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdScrubNursesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdScrubNursesGridQueryComboBoxTextSubmited(int column, GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdScrubNursesRow row, String text) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAssistingSurgeonsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAssistingSurgeonsGridQueryComboBoxTextSubmited(int column, GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdAssistingSurgeonsRow row, String text) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTimeOutOfRecoveryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSurgeryStopClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnReadyForDischargeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPatientLeftTheatreClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTimeOutCompletedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSurgeryStartClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAnaesRFSClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAnaesSignInClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPatientArrivedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSentForClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSafetyBriefClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditCaseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveCaseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelCaseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnChartableOccurencesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbPlannedProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbPlannedProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewPlannedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSavePlannedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelPlannedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbLateralityValueSet(Object value);
	abstract protected void onGrdPlannedProceduresSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPlannedProceduresGridCheckBoxClicked(int column, GenForm.lyrIntraLayer.tabPlannedProceduresContainer.grdPlannedProceduresRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveAssessmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelEditAssessmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditAssessmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditPreparationClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSavePreparationClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelPreparationClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbPrepPerformedByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSurgicalPrepSiteSolutionValueSet(Object value);
	abstract protected void onGrdSkinPreparationSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddSkinPreparationClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditSkinPrepClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveSkinPrepClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelSkinPrepClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRemoveSkinPrepClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemovePositioningClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddPositioningClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPositioningDevicesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbRightLegPositionValueSet(Object value);
	abstract protected void oncmbLeftLegPositionValueSet(Object value);
	abstract protected void oncmbRightArmPositionValueSet(Object value);
	abstract protected void oncmbLeftArmPositionValueSet(Object value);
	abstract protected void oncmbBodyPositionValueSet(Object value);
	abstract protected void oncmbPatTransFromOperatingValueSet(Object value);
	abstract protected void onRadioButtonPatientWarmedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPatTransToOperatingValueSet(Object value);
	abstract protected void oncmbLaserValueSet(Object value);
	abstract protected void oncmbLaserDeviceSerialNumberValueSet(Object value);
	abstract protected void onBtnEditLaserDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveLaserDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelLaserDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbLaserDeviceNameValueSet(Object value);
	abstract protected void onQmbLaserOperatorTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbDiaRemovedByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbDiaAppliedByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonDiathermyModeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDiaPadSiteValueSet(Object value);
	abstract protected void onBtnAddDiathermyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditDiathermyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveDiathermyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelDiathermyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDiaSerialNumberValueSet(Object value);
	abstract protected void onGrdDiathermySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbCatheterInsertedByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonCatheterTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddDeviceClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditDeviceClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveDeviceClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelDeviceClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdCathetersSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditIrrigantClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelIrrigantClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveIrrigantClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddIrrigantDetailClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditIrrigantDetailClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveIrrigantDetailClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelIrrigantDetailClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbIrrigantDetailValueSet(Object value);
	abstract protected void onGrdIrrigantDetailSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveSkinClosureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddSkinClosureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSkinClosuresSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditSkinClosuresClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditSpecimenClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveSpecimenClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddSpecimenClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSpecimensSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveWoundPackingClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddWoundPackingClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdWoundPackingsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditWoundPackingClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveOtherEquipmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddOtherEquipmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdOtherEquipmentSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditOtherEquipmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveArterialClampsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddArterialClampsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdArterialClampsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditArterialClampClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditImplantsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveImplantsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddImplantsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdImplantsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddTourniquetClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditTourniquetClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveTourniquetClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelTourniquetClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTourniquetSiteValueSet(Object value);
	abstract protected void onGrdTourniquetSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveFinalClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddFinalClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdFinalSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditFinalClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditHandoverClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveHandoverClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddHandoverClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdHandoverSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbSignOutSignatureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonAntibioticsSurgicallyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRIEPerformedProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditPerformedProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnFlagPerformedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbPerformedProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbPerformedProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddPerformedProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSavePerformedProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelPerformedProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPerformedLateralityValueSet(Object value);
	abstract protected void onGrdPerformedProceduresSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveSignOutClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelSignOutClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditSignOutClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRecoveryTimeOutClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRecoveryReadyForDischargeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRecoveryIntoClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveRecoveryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelRecoveryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditRecoveryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnClose().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabCaseDetailsActivated();
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabPlannedProceduresActivated();
			}
		});
		this.form.lyrIntra().tabAnaestheticDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabAnaestheticDetailsActivated();
			}
		});
		this.form.lyrIntra().tabPreparation().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabPreparationActivated();
			}
		});
		this.form.lyrIntra().tabDiathermy().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabDiathermyActivated();
			}
		});
		this.form.lyrIntra().tabIrrigation().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabIrrigationActivated();
			}
		});
		this.form.lyrIntra().tabSpecimen().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabSpecimenActivated();
			}
		});
		this.form.lyrIntra().tabImplants().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabImplantsActivated();
			}
		});
		this.form.lyrIntra().tabTourniquet().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabTourniquetActivated();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabHandoverAndFinalCountsActivated();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabPerformedProceduresActivated();
			}
		});
		this.form.lyrIntra().tabRecovery().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrIntratabRecoveryActivated();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnRemoveTimes().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRemoveTimesClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().chkDisplayRecovery().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkDisplayRecoveryValueChanged();
			}
		});
		this.form.lyrIntra().tabCaseDetails().cmbCaseService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbCaseServiceValueChanged();
			}
		});
		this.form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbScrubPractitioner2TextSubmited(value);
			}
		});
		this.form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbScrubPractitioner1TextSubmited(value);
			}
		});
		this.form.lyrIntra().tabCaseDetails().setccOperatingSurgeonValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcOperatingSurgeonValueChanged();
			}
		});
		this.form.lyrIntra().tabCaseDetails().imbRemoveScrubNurse().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveScrubNurseClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().imbAddScrubNurse().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddScrubNurseClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().imbRemoveAssistingSurgeon().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveAssistingSurgeonClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().imbAddAssistingSurgeon().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddAssistingSurgeonClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().grdScrubNurses().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdScrubNursesSelectionChanged();
			}
		});
		this.form.lyrIntra().tabCaseDetails().grdScrubNurses().setGridQueryComboBoxTextSubmitedEvent(new GridQueryComboBoxTextSubmited()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, String text) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdScrubNursesGridQueryComboBoxTextSubmited(column, new GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdScrubNursesRow(row), text);
			}
		});
		this.form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAssistingSurgeonsSelectionChanged();
			}
		});
		this.form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().setGridQueryComboBoxTextSubmitedEvent(new GridQueryComboBoxTextSubmited()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, String text) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAssistingSurgeonsGridQueryComboBoxTextSubmited(column, new GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdAssistingSurgeonsRow(row), text);
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnTimeOutOfRecovery().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTimeOutOfRecoveryClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnSurgeryStop().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSurgeryStopClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnReadyForDischarge().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReadyForDischargeClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnPatientLeftTheatre().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPatientLeftTheatreClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnTimeOutCompleted().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTimeOutCompletedClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnSurgeryStart().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSurgeryStartClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnAnaesRFS().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAnaesRFSClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnAnaesSignIn().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAnaesSignInClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnPatientArrived().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPatientArrivedClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnSentFor().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSentForClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnSafetyBrief().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSafetyBriefClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnEditCase().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditCaseClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnSaveCase().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveCaseClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnCancelCase().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelCaseClick();
			}
		});
		this.form.lyrIntra().tabCaseDetails().btnChartableOccurrences().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnChartableOccurencesClick();
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbPlannedProcedureValueChanged();
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbPlannedProcedureTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().btnNewPlanned().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewPlannedClick();
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().btnSavePlanned().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSavePlannedClick();
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().btnCancelPlanned().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelPlannedClick();
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().cmbLaterality().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLateralityValueSet(value);
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPlannedProceduresSelectionChanged();
			}
		});
		this.form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPlannedProceduresGridCheckBoxClicked(column, new GenForm.lyrIntraLayer.tabPlannedProceduresContainer.grdPlannedProceduresRow(row), isChecked);
			}
		});
		this.form.lyrIntra().tabAnaestheticDetails().btnSaveAssessment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveAssessmentClick();
			}
		});
		this.form.lyrIntra().tabAnaestheticDetails().btnCancelEditAssessment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelEditAssessmentClick();
			}
		});
		this.form.lyrIntra().tabAnaestheticDetails().btnEditAssessment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditAssessmentClick();
			}
		});
		this.form.lyrIntra().tabAnaestheticDetails().cmbStatus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbStatusValueChanged();
			}
		});
		this.form.lyrIntra().tabPreparation().btnEditPreparation().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditPreparationClick();
			}
		});
		this.form.lyrIntra().tabPreparation().btnSavePreparation().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSavePreparationClick();
			}
		});
		this.form.lyrIntra().tabPreparation().btnCancelPreparation().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelPreparationClick();
			}
		});
		this.form.lyrIntra().tabPreparation().qmbPrepPerformedBy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbPrepPerformedByTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSurgicalPrepSiteSolutionValueSet(value);
			}
		});
		this.form.lyrIntra().tabPreparation().grdSkinPreparation().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSkinPreparationSelectionChanged();
			}
		});
		this.form.lyrIntra().tabPreparation().btnAddSkinPreparation().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddSkinPreparationClick();
			}
		});
		this.form.lyrIntra().tabPreparation().btnEditSkinPrep().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditSkinPrepClick();
			}
		});
		this.form.lyrIntra().tabPreparation().btnSaveSkinPrep().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveSkinPrepClick();
			}
		});
		this.form.lyrIntra().tabPreparation().btnCancelSkinPrep().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelSkinPrepClick();
			}
		});
		this.form.lyrIntra().tabPreparation().btnRemoveSkinPrep().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRemoveSkinPrepClick();
			}
		});
		this.form.lyrIntra().tabPreparation().imbRemovePositioning().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemovePositioningClick();
			}
		});
		this.form.lyrIntra().tabPreparation().imbAddPositioning().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddPositioningClick();
			}
		});
		this.form.lyrIntra().tabPreparation().grdPositioningDevices().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPositioningDevicesSelectionChanged();
			}
		});
		this.form.lyrIntra().tabPreparation().cmbRightLegPosition().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbRightLegPositionValueSet(value);
			}
		});
		this.form.lyrIntra().tabPreparation().cmbLeftLegPosition().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLeftLegPositionValueSet(value);
			}
		});
		this.form.lyrIntra().tabPreparation().cmbRightArmPosition().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbRightArmPositionValueSet(value);
			}
		});
		this.form.lyrIntra().tabPreparation().cmbLeftArmPosition().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLeftArmPositionValueSet(value);
			}
		});
		this.form.lyrIntra().tabPreparation().cmbBodyPosition().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbBodyPositionValueSet(value);
			}
		});
		this.form.lyrIntra().tabPreparation().cmbPatTransFromOperating().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPatTransFromOperatingValueSet(value);
			}
		});
		this.form.lyrIntra().tabPreparation().PatientWarmed().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonPatientWarmedValueChanged();
			}
		});
		this.form.lyrIntra().tabPreparation().cmbPatTransToOperating().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPatTransToOperatingValueSet(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().cmbLaser().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLaserValueSet(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLaserDeviceSerialNumberValueSet(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().btnEditLaserDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditLaserDetailsClick();
			}
		});
		this.form.lyrIntra().tabDiathermy().btnSaveLaserDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveLaserDetailsClick();
			}
		});
		this.form.lyrIntra().tabDiathermy().btnCancelLaserDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelLaserDetailsClick();
			}
		});
		this.form.lyrIntra().tabDiathermy().cmbLaserDeviceName().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbLaserDeviceNameValueSet(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().qmbLaserOperator().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbLaserOperatorTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbDiaRemovedByTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbDiaAppliedByTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().DiathermyMode().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonDiathermyModeValueChanged();
			}
		});
		this.form.lyrIntra().tabDiathermy().cmbDiaPadSite().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDiaPadSiteValueSet(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().btnAddDiathermy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddDiathermyClick();
			}
		});
		this.form.lyrIntra().tabDiathermy().btnEditDiathermy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditDiathermyClick();
			}
		});
		this.form.lyrIntra().tabDiathermy().btnSaveDiathermy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveDiathermyClick();
			}
		});
		this.form.lyrIntra().tabDiathermy().btnCancelDiathermy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelDiathermyClick();
			}
		});
		this.form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDiaSerialNumberValueSet(value);
			}
		});
		this.form.lyrIntra().tabDiathermy().grdDiathermy().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiathermySelectionChanged();
			}
		});
		this.form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbCatheterInsertedByTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabIrrigation().CatheterType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonCatheterTypeValueChanged();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnAddDevice().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddDeviceClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnEditDevice().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditDeviceClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnSaveDevice().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveDeviceClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnCancelDevice().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelDeviceClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().grdCatheters().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdCathetersSelectionChanged();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnEditIrrigant().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditIrrigantClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnCancelIrrigant().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelIrrigantClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnSaveIrrigant().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveIrrigantClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnAddIrrigantDetail().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddIrrigantDetailClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnEditIrrigantDetail().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditIrrigantDetailClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnSaveIrrigantDetail().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveIrrigantDetailClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().btnCancelIrrigantDetail().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelIrrigantDetailClick();
			}
		});
		this.form.lyrIntra().tabIrrigation().cmbIrrigantDetail().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbIrrigantDetailValueSet(value);
			}
		});
		this.form.lyrIntra().tabIrrigation().grdIrrigantDetail().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdIrrigantDetailSelectionChanged();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbRemoveSkinClosure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveSkinClosureClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbAddSkinClosure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddSkinClosureClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().grdSkinClosures().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSkinClosuresSelectionChanged();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbEditSkinClosures().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditSkinClosuresClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbEditSpecimen().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditSpecimenClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbRemoveSpecimen().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveSpecimenClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbAddSpecimen().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddSpecimenClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().grdSpecimens().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSpecimensSelectionChanged();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbRemoveWoundPacking().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveWoundPackingClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbAddWoundPacking().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddWoundPackingClick();
			}
		});
		this.form.lyrIntra().tabSpecimen().grdWoundPackings().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdWoundPackingsSelectionChanged();
			}
		});
		this.form.lyrIntra().tabSpecimen().imbEditWoundPacking().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditWoundPackingClick();
			}
		});
		this.form.lyrIntra().tabImplants().imbRemoveOtherEquipment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveOtherEquipmentClick();
			}
		});
		this.form.lyrIntra().tabImplants().imbAddOtherEquipment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddOtherEquipmentClick();
			}
		});
		this.form.lyrIntra().tabImplants().grdOtherEquipment().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdOtherEquipmentSelectionChanged();
			}
		});
		this.form.lyrIntra().tabImplants().imbEditOtherEquipment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditOtherEquipmentClick();
			}
		});
		this.form.lyrIntra().tabImplants().imbRemoveArterialClamps().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveArterialClampsClick();
			}
		});
		this.form.lyrIntra().tabImplants().imbAddArterialClamps().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddArterialClampsClick();
			}
		});
		this.form.lyrIntra().tabImplants().grdArterialClamps().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdArterialClampsSelectionChanged();
			}
		});
		this.form.lyrIntra().tabImplants().imbEditArterialClamp().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditArterialClampClick();
			}
		});
		this.form.lyrIntra().tabImplants().imbEditImplants().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditImplantsClick();
			}
		});
		this.form.lyrIntra().tabImplants().imbRemoveImplants().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveImplantsClick();
			}
		});
		this.form.lyrIntra().tabImplants().imbAddImplants().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddImplantsClick();
			}
		});
		this.form.lyrIntra().tabImplants().grdImplants().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdImplantsSelectionChanged();
			}
		});
		this.form.lyrIntra().tabTourniquet().btnAddTourniquet().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddTourniquetClick();
			}
		});
		this.form.lyrIntra().tabTourniquet().btnEditTourniquet().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditTourniquetClick();
			}
		});
		this.form.lyrIntra().tabTourniquet().btnSaveTourniquet().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveTourniquetClick();
			}
		});
		this.form.lyrIntra().tabTourniquet().btnCancelTourniquet().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelTourniquetClick();
			}
		});
		this.form.lyrIntra().tabTourniquet().cmbTourniquetSite().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTourniquetSiteValueSet(value);
			}
		});
		this.form.lyrIntra().tabTourniquet().grdTourniquet().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdTourniquetSelectionChanged();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().imbRemoveFinal().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveFinalClick();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().imbAddFinal().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddFinalClick();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdFinalSelectionChanged();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().imbEditFinal().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditFinalClick();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().imbEditHandover().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditHandoverClick();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().imbRemoveHandover().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveHandoverClick();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().imbAddHandover().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddHandoverClick();
			}
		});
		this.form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdHandoverSelectionChanged();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbSignOutSignatureTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonAntibioticsSurgicallyValueChanged();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnRIEPerformedProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRIEPerformedProcedureClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnEditPerformedProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditPerformedProcedureClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnFlagPerformed().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnFlagPerformedClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbPerformedProcedureValueChanged();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbPerformedProcedureTextSubmited(value);
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnAddPerformedProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddPerformedProcedureClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnSavePerformedProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSavePerformedProcedureClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnCancelPerformedProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelPerformedProcedureClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPerformedLateralityValueSet(value);
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPerformedProceduresSelectionChanged();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnSaveSignOut().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveSignOutClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnCancelSignOut().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelSignOutClick();
			}
		});
		this.form.lyrIntra().tabPerformedProcedures().btnEditSignOut().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditSignOutClick();
			}
		});
		this.form.lyrIntra().tabRecovery().btnRecoveryTimeOut().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRecoveryTimeOutClick();
			}
		});
		this.form.lyrIntra().tabRecovery().btnRecoveryReadyForDischarge().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRecoveryReadyForDischargeClick();
			}
		});
		this.form.lyrIntra().tabRecovery().btnRecoveryInto().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRecoveryIntoClick();
			}
		});
		this.form.lyrIntra().tabRecovery().btnSaveRecovery().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveRecoveryClick();
			}
		});
		this.form.lyrIntra().tabRecovery().btnCancelRecovery().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelRecoveryClick();
			}
		});
		this.form.lyrIntra().tabRecovery().btnEditRecovery().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditRecoveryClick();
			}
		});
		this.form.getContextMenus().Clinical.getIntraOpPerformedProceduresFLAG_PERFORMEDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.IntraOpPerformedProcedures.FLAG_PERFORMED, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindgrdScrubNursesColRoleLookup();
		bindcmbLateralityLookup();
		bindcmbSurgicalPrepSiteSolutionLookup();
		bindgrdPositioningDevicesColAssistingSurgeonLookup();
		bindcmbRightLegPositionLookup();
		bindcmbLeftLegPositionLookup();
		bindcmbRightArmPositionLookup();
		bindcmbLeftArmPositionLookup();
		bindcmbBodyPositionLookup();
		bindcmbPatTransFromOperatingLookup();
		bindcmbPatTransToOperatingLookup();
		bindchklistPatPreparationLookup();
		bindchklistpatientSafetyMeasuresLookup();
		bindcmbLaserLookup();
		bindcmbLaserDeviceSerialNumberLookup();
		bindcmbLaserDeviceNameLookup();
		bindcmbDiaPadSiteLookup();
		bindcmbDiaSerialNumberLookup();
		bindcmbIrrigantDetailLookup();
		bindcmbTourniquetSiteLookup();
		bindcmbPerformedLateralityLookup();
	}
	protected void rebindAllLookups()
	{
		bindgrdScrubNursesColRoleLookup();
		bindcmbLateralityLookup();
		bindcmbSurgicalPrepSiteSolutionLookup();
		bindgrdPositioningDevicesColAssistingSurgeonLookup();
		bindcmbRightLegPositionLookup();
		bindcmbLeftLegPositionLookup();
		bindcmbRightArmPositionLookup();
		bindcmbLeftArmPositionLookup();
		bindcmbBodyPositionLookup();
		bindcmbPatTransFromOperatingLookup();
		bindcmbPatTransToOperatingLookup();
		bindchklistPatPreparationLookup();
		bindchklistpatientSafetyMeasuresLookup();
		bindcmbLaserLookup();
		bindcmbLaserDeviceSerialNumberLookup();
		bindcmbLaserDeviceNameLookup();
		bindcmbDiaPadSiteLookup();
		bindcmbDiaSerialNumberLookup();
		bindcmbIrrigantDetailLookup();
		bindcmbTourniquetSiteLookup();
		bindcmbPerformedLateralityLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbLateralityLookupValue();
		defaultcmbSurgicalPrepSiteSolutionLookupValue();
		defaultcmbRightLegPositionLookupValue();
		defaultcmbLeftLegPositionLookupValue();
		defaultcmbRightArmPositionLookupValue();
		defaultcmbLeftArmPositionLookupValue();
		defaultcmbBodyPositionLookupValue();
		defaultcmbPatTransFromOperatingLookupValue();
		defaultcmbPatTransToOperatingLookupValue();
		defaultcmbLaserLookupValue();
		defaultcmbLaserDeviceSerialNumberLookupValue();
		defaultcmbLaserDeviceNameLookupValue();
		defaultcmbDiaPadSiteLookupValue();
		defaultcmbDiaSerialNumberLookupValue();
		defaultcmbIrrigantDetailLookupValue();
		defaultcmbTourniquetSiteLookupValue();
		defaultcmbPerformedLateralityLookupValue();
	}
	private void onlyrIntratabCaseDetailsActivated()
	{
		this.form.lyrIntra().showtabCaseDetails();
		onlyrIntraTabChanged(this.form.lyrIntra().tabCaseDetails());
	}
	private void onlyrIntratabPlannedProceduresActivated()
	{
		this.form.lyrIntra().showtabPlannedProcedures();
		onlyrIntraTabChanged(this.form.lyrIntra().tabPlannedProcedures());
	}
	private void onlyrIntratabAnaestheticDetailsActivated()
	{
		this.form.lyrIntra().showtabAnaestheticDetails();
		onlyrIntraTabChanged(this.form.lyrIntra().tabAnaestheticDetails());
	}
	private void onlyrIntratabPreparationActivated()
	{
		this.form.lyrIntra().showtabPreparation();
		onlyrIntraTabChanged(this.form.lyrIntra().tabPreparation());
	}
	private void onlyrIntratabDiathermyActivated()
	{
		this.form.lyrIntra().showtabDiathermy();
		onlyrIntraTabChanged(this.form.lyrIntra().tabDiathermy());
	}
	private void onlyrIntratabIrrigationActivated()
	{
		this.form.lyrIntra().showtabIrrigation();
		onlyrIntraTabChanged(this.form.lyrIntra().tabIrrigation());
	}
	private void onlyrIntratabSpecimenActivated()
	{
		this.form.lyrIntra().showtabSpecimen();
		onlyrIntraTabChanged(this.form.lyrIntra().tabSpecimen());
	}
	private void onlyrIntratabImplantsActivated()
	{
		this.form.lyrIntra().showtabImplants();
		onlyrIntraTabChanged(this.form.lyrIntra().tabImplants());
	}
	private void onlyrIntratabTourniquetActivated()
	{
		this.form.lyrIntra().showtabTourniquet();
		onlyrIntraTabChanged(this.form.lyrIntra().tabTourniquet());
	}
	private void onlyrIntratabHandoverAndFinalCountsActivated()
	{
		this.form.lyrIntra().showtabHandoverAndFinalCounts();
		onlyrIntraTabChanged(this.form.lyrIntra().tabHandoverAndFinalCounts());
	}
	private void onlyrIntratabPerformedProceduresActivated()
	{
		this.form.lyrIntra().showtabPerformedProcedures();
		onlyrIntraTabChanged(this.form.lyrIntra().tabPerformedProcedures());
	}
	private void onlyrIntratabRecoveryActivated()
	{
		this.form.lyrIntra().showtabRecovery();
		onlyrIntraTabChanged(this.form.lyrIntra().tabRecovery());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
