//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.intraoperativecasedetailsdialog;

import ims.assessment.vo.Patient_AssessmentDataVo;
import ims.assessment.vo.Patient_AssessmentVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.assessment.vo.User_AssessmentVo;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdAssistingSurgeonsRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdScrubNursesRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabDiathermyContainer.DiathermyModeEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabDiathermyContainer.grdDiathermyRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabHandoverAndFinalCountsContainer.grdFinalRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabHandoverAndFinalCountsContainer.grdHandoverRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabHandoverAndFinalCountsContainer.grdIncorrectRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabImplantsContainer.grdArterialClampsRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabImplantsContainer.grdImplantsRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabImplantsContainer.grdOtherEquipmentRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabIrrigationContainer.CatheterTypeEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabIrrigationContainer.IrrigantDetailWarmedEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabIrrigationContainer.grdCathetersRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabIrrigationContainer.grdIrrigantDetailRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPerformedProceduresContainer.AntibioticsSurgicallyEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPerformedProceduresContainer.SignOutEquipmentProblemsEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPerformedProceduresContainer.grdPerformedProceduresRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPlannedProceduresContainer.grdPlannedProceduresRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPreparationContainer.FluidWarmerEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPreparationContainer.PatientWarmedEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPreparationContainer.SkinIntegrityEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPreparationContainer.WarmingBlanketEnumeration;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPreparationContainer.grdPositioningDevicesRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabPreparationContainer.grdSkinPreparationRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabSpecimenContainer.grdSkinClosuresRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabSpecimenContainer.grdSpecimensRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabSpecimenContainer.grdWoundPackingsRow;
import ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabTourniquetContainer.grdTourniquetRow;
import ims.clinical.helper.TheatreCaseTimeHelper;
import ims.clinical.vo.AnaestheticSignInVo;
import ims.clinical.vo.ArterialClampsIntraOpVo;
import ims.clinical.vo.ArterialClampsIntraOpVoCollection;
import ims.clinical.vo.CatheterDrainsTubeIntraOpVo;
import ims.clinical.vo.CatheterDrainsTubeIntraOpVoCollection;
import ims.clinical.vo.CirculatorScrubNurseRoleVo;
import ims.clinical.vo.CirculatorScrubNurseRoleVoCollection;
import ims.clinical.vo.DiathermyDetailIntraOpVo;
import ims.clinical.vo.DiathermyDetailIntraOpVoCollection;
import ims.clinical.vo.EquipmentIntraOpVo;
import ims.clinical.vo.EquipmentIntraOpVoCollection;
import ims.clinical.vo.FinalCountsIntraOpVo;
import ims.clinical.vo.FinalCountsIntraOpVoCollection;
import ims.clinical.vo.HandoverCountsIntraOpVo;
import ims.clinical.vo.HandoverCountsIntraOpVoCollection;
import ims.clinical.vo.ImplantsIntraOpVo;
import ims.clinical.vo.ImplantsIntraOpVoCollection;
import ims.clinical.vo.IntraOpCaseStaffDetailsVo;
import ims.clinical.vo.IntraOpPlannedProcedureVo;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.clinical.vo.IrrigantDetailIntraOpVo;
import ims.clinical.vo.IrrigantIntraOpVo;
import ims.clinical.vo.LaserDetailIntraOpVo;
import ims.clinical.vo.PatientPreperationIntraOpVo;
import ims.clinical.vo.PerformedProcAndSignOutIntraOpVo;
import ims.clinical.vo.PerformedProceduresIntraOpVo;
import ims.clinical.vo.PerformedProceduresIntraOpVoCollection;
import ims.clinical.vo.PeriOpRecoveryDetailVo;
import ims.clinical.vo.SkinClosureIntraOpVo;
import ims.clinical.vo.SkinClosureIntraOpVoCollection;
import ims.clinical.vo.SkinPreparationIntraOpVo;
import ims.clinical.vo.SkinPreparationIntraOpVoCollection;
import ims.clinical.vo.SpecimenIntraOpVo;
import ims.clinical.vo.SpecimenIntraOpVoCollection;
import ims.clinical.vo.TheatreSessionStaffDetailVo;
import ims.clinical.vo.TourniquetIntraOpVo;
import ims.clinical.vo.TourniquetIntraOpVoCollection;
import ims.clinical.vo.WoundPackingIntraOpVo;
import ims.clinical.vo.WoundPackingIntraOpVoCollection;
import ims.clinical.vo.lookups.CatheterDrainsTube;
import ims.clinical.vo.lookups.ChartableOccuranceType;
import ims.clinical.vo.lookups.DiathermyMode;
import ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection;
import ims.clinical.vo.lookups.SkinClosureType;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.NurseLiteVo;
import ims.core.vo.NurseLiteVoCollection;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.PatientProcedureMinVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LateralityLRB;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientAssessmentStatusReasonCollection;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoNotApplicable;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.TheatreBookingLiteVo;
import ims.scheduling.vo.lookups.AcuteTheateListBookingState;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class Logic extends BaseLogic
{
	private static final String CASE_TAB = "CASE";
	private static final String RECOVERY_TAB = "RECOVERY";

	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		openCaseTimes();
		openCaseDetails();
		form.setMode(FormMode.VIEW);

		navigateToRecoveryTabIfRequired();
	}

	private void navigateToRecoveryTabIfRequired()
	{
		if (form.getGlobalContext().Clinical.getIntraOpRecoveryMannerIsNotNull() && form.getGlobalContext().Clinical.getIntraOpRecoveryManner())
		{
			form.lyrIntra().showtabRecovery();
			onlyrIntraTabChanged(form.lyrIntra().tabRecovery());
			//WDEV-21776
			form.lyrIntra().tabRecovery().setHeaderVisible(true);
		}
	}

	private void initialise()
	{
		initialiseCaseDetails();
		initialisePreparation();
		initialiseRecoveryDetails();
		initialisePerformedProcedures();
		initialiseAnaestheticSignInDetails(); //WDEV-22282
		initialiseAnaesTab();
	}

	// WDEV-22282 Blood glucose should be mandatory for a diabetic
	private void initialiseAnaestheticSignInDetails()
	{
		//WDEV-22363
//        Boolean preAssessment = domain.isDiabeticFromPreAssessmentOutcome(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
//        if (preAssessment)
//        {
//               form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().setRequired(true);
//        }
		Boolean isPatientDiabetic = domain.isDiabeticFromPreAssessmentOutcome(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (isPatientDiabetic != null 
				&& isPatientDiabetic)
		{
			form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().setRequired(true);
		} //WDEV-22363

		AnaestheticSignInVo anaestheticSignInVo = domain.getAnaestheticSignInvo(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
//		if (YesNo.YES.equals(anaestheticSignInVo.getIsPatientDiabetic()))
		if (anaestheticSignInVo != null 
				&& YesNo.YES.equals(anaestheticSignInVo.getIsPatientDiabetic())) //WDEV-22333 Bug fix
		{
			form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().setRequired(true);
		}
		else if (anaestheticSignInVo!= null 
				&& YesNo.NO.equals(anaestheticSignInVo.getIsPatientDiabetic()))
		{
			form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().setRequired(false);
		}
	}

	private void initialiseAnaesTab()
	{
		loadStatusCombo();
		form.lyrIntra().tabAnaestheticDetails().ccCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
	}

	private void loadStatusCombo()
	{
		form.lyrIntra().tabAnaestheticDetails().cmbStatus().clear();

		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getParent() == null)
			{
				form.lyrIntra().tabAnaestheticDetails().cmbStatus().newRow(voColl.get(i), voColl.get(i).toString());
			}
		}
	}

	private void initialisePerformedProcedures()
	{
		// prepopulate performed with planned
		IntraOpPlannedProcedureVoCollection plannedProcedures = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		
		if (plannedProcedures != null)
		{
			for (IntraOpPlannedProcedureVo plannedProcedure : plannedProcedures)
			{
				if (plannedProcedure.getPlannedProcedureIsNotNull())
				{
					//WDEV-21840
					grdPerformedProceduresRow rowPerformedProc=isPlannedProcPerformed(plannedProcedure.getPlannedProcedure().getProcedure());
					
					if (rowPerformedProc==null)
					{
						grdPerformedProceduresRow row = form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getRows().newRow();
						row.setcolProcedure(plannedProcedure.getPlannedProcedure().getProcedure() != null ? plannedProcedure.getPlannedProcedure().getProcedure().getProcedureName() : null);
						row.setcolLaterality(plannedProcedure.getPlannedProcedure().getProcLaterality() != null ? plannedProcedure.getPlannedProcedure().getProcLaterality().getIItemText() : null);
						row.setcolPlanned(true);
						row.setColHiddenPlannedProcValue(plannedProcedure);
					}
					else
					{
						rowPerformedProc.setcolPlanned(true);
					}
				}
			}
		}
		form.getLocalContext().setPerformedProcedureMode(FormMode.VIEW);
		grdPerformedProceduresSelectionChanged();
	}

	//WDEV-21840
	private grdPerformedProceduresRow isPlannedProcPerformed(ProcedureLiteVo procedure)
	{
		for (int i = 0; i < form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getRows().size(); i++)
		{
			grdPerformedProceduresRow row = form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getRows().get(i);
			PerformedProceduresIntraOpVo performedProc = row.getValue();
			if (performedProc != null && performedProc.getPerformedProcedureIsNotNull() && procedure.equals(performedProc.getPerformedProcedure().getProcedure()))
			{
				return row;
			}
		}
		
		return null;
	}

	private void grdPerformedProceduresSelectionChanged()
	{
		updatePerformedProcedureInstanceControlState();

		// default in planned data if it exists
		IntraOpPlannedProcedureVo planned = form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getSelectedRow() != null ? form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getSelectedRow().getColHiddenPlannedProcValue() : null;
		populatePerformedProcedureInstanceControls(planned, form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue());
		qmbPerformedProcedureValueChanged();
	}

	private void initialisePreparation()
	{
		//WDEV-22482
		form.lyrIntra().tabPreparation().lblFluidWarmerRequired().setTextColor(Color.Red);
		form.lyrIntra().tabPreparation().lblSkinIntegrityMaintainedRequired().setTextColor(Color.Red);
	}

	private void initialiseCaseDetails()
	{
		form.lyrIntra().tabCaseDetails().ccAnaestheticPractitioner().initialize(MosType.MEDIC);
		form.lyrIntra().tabCaseDetails().ccAnaethetist().initializeMedic(HcpDisType.ANAESTHETIST, null); //WDEV-21788
		form.lyrIntra().tabCaseDetails().ccAssistingAn().initializeMedic(HcpDisType.ANAESTHETIST, null); //WDEV-21788
		form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().initialize(MosType.MEDIC);
		form.lyrIntra().tabCaseDetails().ccSupervisingAn().initializeMedic(HcpDisType.ANAESTHETIST, null); //WDEV-21788
		form.lyrIntra().tabCaseDetails().ccSupervisingSurgeon().initialize(MosType.MEDIC);

		form.lyrIntra().tabDiathermy().setHeaderVisible(false);
		form.lyrIntra().tabIrrigation().setHeaderVisible(false);
		form.lyrIntra().tabSpecimen().setHeaderVisible(false);
		form.lyrIntra().tabImplants().setHeaderVisible(false);
		form.lyrIntra().tabTourniquet().setHeaderVisible(false);
		form.lyrIntra().tabRecovery().setHeaderVisible(false);
		
		//WDEV-21788
		form.getLocalContext().setTheatreSession(domain.getTheatreSession(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
		populateCaseServiceCombo(); 
		
	}

	private void initialiseRecoveryDetails()
	{
		form.lyrIntra().tabRecovery().ccRecoveryMemberofStaff().initialize(MosType.ALL);
		form.lyrIntra().tabRecovery().lblRecoveryMosRequired().setTextColor(Color.Red);
		for (int i = 1; i < 11; i++)
		{
			form.lyrIntra().tabRecovery().cmbRecoveryPainScore().newRow(i, String.valueOf(i));
		}
	}

	private void openCaseDetails()
	{
		IntraOpCaseStaffDetailsVo caseStaffDetail = domain.getCaseStaffDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.getLocalContext().setCaseDetails(caseStaffDetail);
		form.getGlobalContext().Clinical.setIntraOpCaseStaffDetailRefVo(caseStaffDetail);
		populateCaseDetailsScreenFromData();
		//displayCaseDetailProcedureLabels();
		
		//WDEV-21788
		populateCaseDetailsPlannedProcedureLabels(); 
		updateCaseDetailsTabControlState();
	}

	private void populateAnaesScreeFromData(IntraOpCaseStaffDetailsVo intraOpCaseStaffDetailsVo)
	{
		if (intraOpCaseStaffDetailsVo != null && intraOpCaseStaffDetailsVo.getPatientAssessment() != null)
		{
			populateAssessmentComponent(intraOpCaseStaffDetailsVo.getPatientAssessment());
		}
		else
		{
			initialiseAssessmentComponent();
		}
	}

	private boolean initialiseAssessmentComponent()
	{
		clearAnaesIntsnceControls(); //WDEV-21812

		UserAssessmentLiteVoCollection list = domain.listUserAssessment();

		if (list != null && list.size() > 0)
		{
			form.getLocalContext().setChoosenAssessment(domain.getUserAssessment(list.get(0)));
			loadAssessment();
		}

		if (list == null || (list != null && list.size() == 0))
		{
			engine.showMessage("No configured assessment was found for TaxonomyMapping MAXIMS = ANAES_ASSESS.", "No Configured Assessment", MessageButtons.OK, MessageIcon.WARNING);
			form.setMode(FormMode.VIEW);

			return false;
		}

		return true;
	}

	private void loadAssessment()
	{
		if (form.getLocalContext().getChoosenAssessment() != null)
		{
			Patient_AssessmentVo newAssessment = new Patient_AssessmentVo();
			Patient_AssessmentDataVo assessmentData = new Patient_AssessmentDataVo();
			User_AssessmentVo userAssessment = form.getLocalContext().getChoosenAssessment();
			assessmentData.setUserAssessment(userAssessment);
			assessmentData.setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
			newAssessment.setAssessmentData(assessmentData);

			form.lyrIntra().tabAnaestheticDetails().ccAssessment().setPatientAssessment(newAssessment, form.getMode().equals(FormMode.VIEW), PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		}
	}

	private void populateAssessmentComponent(Patient_AssessmentVo patientAssessment)
	{
		clearAnaesIntsnceControls(); //WDEV-21812
		
		form.lyrIntra().tabAnaestheticDetails().ccAssessment().setPatientAssessment(patientAssessment, form.getMode().equals(FormMode.VIEW));

		populateCombos(patientAssessment);

		populateAuthoring(patientAssessment);
		populateCompletedHCPCustomControl(patientAssessment);
	}

	//WDEV-21812
	private void clearAnaesIntsnceControls()
	{
		form.lyrIntra().tabAnaestheticDetails().ccAssessment().clearComponent();
		form.lyrIntra().tabAnaestheticDetails().ccAuthoring().setValue(null);
		form.lyrIntra().tabAnaestheticDetails().cmbStatus().setValue(null);
		form.lyrIntra().tabAnaestheticDetails().cmbStatusReason().setValue(null);
		form.lyrIntra().tabAnaestheticDetails().ccCompleted().setValue(null);
	}

	private void populateCompletedHCPCustomControl(Patient_AssessmentVo patientAssessment)
	{
		if (patientAssessment == null)
			return;

		AuthoringInformationVo completedData = new AuthoringInformationVo();
		completedData.setAuthoringHcp(patientAssessment.getCompletedHCP());
		completedData.setAuthoringDateTime(patientAssessment.getCompletedDateTime());

		form.lyrIntra().tabAnaestheticDetails().ccCompleted().setValue(completedData);
	}

	private void populateAuthoring(Patient_AssessmentVo patientAssessment)
	{
		AuthoringInformationVo voAuthoringInfo = null;
		if (patientAssessment != null)
			voAuthoringInfo = patientAssessment.getAuthoringInformation();

		if (voAuthoringInfo != null)
			form.lyrIntra().tabAnaestheticDetails().ccAuthoring().setValue(voAuthoringInfo);
		else
			form.lyrIntra().tabAnaestheticDetails().ccAuthoring().initializeComponent();
	}

	private void populateCombos(Patient_AssessmentVo patientAssessment)
	{
		if (patientAssessment == null)
			return;

		loadStatusCombo();

		form.lyrIntra().tabAnaestheticDetails().cmbStatus().setValue(patientAssessment.getStatus());

		statusAssessmentValueChanged();

		form.lyrIntra().tabAnaestheticDetails().cmbStatusReason().setValue(patientAssessment.getStatusReason());
	}

	private class ProcedureDisplayHelper
	{

		ProcedureLiteVo first;
		LateralityLRB firstLaterality;
		ProcedureLiteVo additional;
		LateralityLRB additionalLaterality;
		boolean isFirstPerformed;
		boolean isAdditionalPerformed;
	
		public ProcedureDisplayHelper(ProcedureLiteVo first, 
				LateralityLRB firstLaterality, 
				ProcedureLiteVo additional, 
				LateralityLRB additionalLaterality, 
				boolean isFirstPerformed,
				boolean isAdditionalPerformed)
		{
			this.first = first;
			this.firstLaterality = firstLaterality;
			this.additional = additional;
			this.additionalLaterality = additionalLaterality;
			this.isFirstPerformed = isFirstPerformed;
			this.isAdditionalPerformed = isAdditionalPerformed;
		}
	}

	private void displayCaseDetailProcedureLabels()
	{
		ProcedureDisplayHelper helper = determineProcedures();
		displayProcedureLabels(helper, CASE_TAB);	
	}

	//WDEV-21788
	private void populateCaseDetailsPlannedProcedureLabels()
	{
		ProcedureLiteVo first = null;
		LateralityLRB firstLaterality = null;
		ProcedureLiteVo additional = null;
		LateralityLRB additionalLaterality = null;
	
		form.lyrIntra().tabCaseDetails().lblCaseProcValue().setVisible(false);
		form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setVisible(false);
		
		IntraOpPlannedProcedureVoCollection plannedProcedures = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());;
		if (plannedProcedures != null && plannedProcedures.size() > 0)
		{
			for (IntraOpPlannedProcedureVo item : plannedProcedures)
			{
				if (item!=null && Boolean.TRUE.equals(item.getPlannedProcedure().getIsPrimary()))
				{
					first = item.getPlannedProcedure().getProcedure();
					firstLaterality = item.getPlannedProcedure().getProcLaterality();
					break;
				}
			}
				
			if (plannedProcedures.size() > 1)
			{
				if (first!=null && !first.equals(plannedProcedures.get(0).getPlannedProcedure().getProcedure()))
				{
					additional = plannedProcedures.get(0).getPlannedProcedure().getProcedure();
					additionalLaterality = plannedProcedures.get(0).getPlannedProcedure().getProcLaterality();
				}
				else
				{
					additional = plannedProcedures.get(1).getPlannedProcedure().getProcedure();
					additionalLaterality = plannedProcedures.get(1).getPlannedProcedure().getProcLaterality();
				}
			}
										
		}
		
		if(first == null || additional == null)
		{
			TheatreBookingLiteVo booking = domain.getTheatreBooking(form.getGlobalContext().Clinical.getTheatreBookingRef());

			if(first == null)
			{
    			first = booking.getProcedure();
    			firstLaterality = booking.getProcLaterality();
			}
			
			if(additional == null)
			{
    			additional = booking.getSecondaryProcedure();
    			additionalLaterality = booking.getSecondaryProcLaterality();
			}
		}
		
		if (first!=null)
		{
			String primaryProc = first.getProcedureName();
    		if (firstLaterality != null)
    		{
    			primaryProc += " - " + firstLaterality.getText();
    		}
    		
    		form.lyrIntra().tabCaseDetails().lblCaseProcValue().setValue(primaryProc.length() > 80 ? primaryProc.substring(0, 80) + "..." : primaryProc);
    		form.lyrIntra().tabCaseDetails().lblCaseProcValue().setTooltip(null); //WDEV-23037
    		form.lyrIntra().tabCaseDetails().lblCaseProcValue().setTooltip(primaryProc);
    		form.lyrIntra().tabCaseDetails().lblCaseProcValue().setVisible(true);
		}
		
		
		if (additional!=null)
		{
			String additionalProc = additional.getProcedureName();
    		if (additionalLaterality != null)
    		{
    			additionalProc += " - " + additionalLaterality.getText();
    		}
    
    		form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setValue(additionalProc.length() > 80 ? additionalProc.substring(0, 80) + "..." : additionalProc);
    		form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setTooltip(null); //WDEV-23037
    		form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setTooltip(additionalProc);
    		form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setVisible(true);
		}
	}
	
	private void displayProcedureLabels(ProcedureDisplayHelper helper, String tab)
	{
		if (tab.equals(CASE_TAB))
		{
			form.lyrIntra().tabCaseDetails().lblCaseProc().setVisible(false);
			form.lyrIntra().tabCaseDetails().lblCaseProcValue().setVisible(false);
			form.lyrIntra().tabCaseDetails().lblAddCaseProc().setVisible(false);
			form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setVisible(false);
		}
		else if (tab.equals(RECOVERY_TAB))
		{
			form.lyrIntra().tabRecovery().lblRecoveryProc().setVisible(false);
			form.lyrIntra().tabRecovery().lblProcValue().setVisible(false);
			form.lyrIntra().tabRecovery().lblRecoveryAddProc().setVisible(false);
			form.lyrIntra().tabRecovery().lblAddProcValue().setVisible(false);
		}
		else
		{
			return;
		}

		ProcedureLiteVo first = helper.first;
		LateralityLRB firstLaterality = helper.firstLaterality;
		ProcedureLiteVo additional = helper.additional;
		LateralityLRB additionalLaterality = helper.additionalLaterality;
		boolean isFirstPerformed = helper.isFirstPerformed;
		boolean isAdditionalPerformed = helper.isAdditionalPerformed;
		

		if (first != null)
		{
			String FIRST_PERFORMED_PROC_LABEL = "Performed Procedure Details";
			if (tab.equals(CASE_TAB))
			{
				form.lyrIntra().tabCaseDetails().lblCaseProc().setVisible(true);
				//WDEV-21857
				if(isFirstPerformed)
					form.lyrIntra().tabCaseDetails().lblCaseProc().setValue(FIRST_PERFORMED_PROC_LABEL);
				
				form.lyrIntra().tabCaseDetails().lblCaseProcValue().setVisible(true);
			}
			else if (tab.equals(RECOVERY_TAB))
			{
				form.lyrIntra().tabRecovery().lblRecoveryProc().setVisible(true);
				
				//WDEV-21857
				if(isFirstPerformed)
					form.lyrIntra().tabRecovery().lblRecoveryProc().setValue(FIRST_PERFORMED_PROC_LABEL);
				
				form.lyrIntra().tabRecovery().lblProcValue().setVisible(true);
			}

			String firstValue = first.getProcedureName();
			String firstValueShortened; //WDEV-22332
			if (firstLaterality != null)
			{
				firstValue += " - " + firstLaterality.getText();
			}

			if (tab.equals(CASE_TAB))
			{
				//WDEV-22332
				if (firstValue.length() > 35)
				{
					firstValueShortened = firstValue.substring(0, 35) + "...";
				}
				else
				{
					firstValueShortened = firstValue;					
				}

				form.lyrIntra().tabCaseDetails().lblCaseProcValue().setValue(firstValueShortened);
				form.lyrIntra().tabCaseDetails().lblCaseProcValue().setTooltip(firstValue); //WDEV-22332
			}
			else if (tab.equals(RECOVERY_TAB))
			{
				form.lyrIntra().tabRecovery().lblProcValue().setValue(firstValue);
			}

		}
		if (additional != null)
		{
			String ADDITIONAL_PERFORMED_PROC_LABEL = "Additional Performed Procedure Details";
			if (tab.equals(CASE_TAB))
			{
				form.lyrIntra().tabCaseDetails().lblAddCaseProc().setVisible(true);
				//WDEV-21857
				if(isAdditionalPerformed)
					form.lyrIntra().tabCaseDetails().lblAddCaseProc().setValue(ADDITIONAL_PERFORMED_PROC_LABEL);
				form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setVisible(true);
			}
			else if (tab.equals(RECOVERY_TAB))
			{
				form.lyrIntra().tabRecovery().lblRecoveryAddProc().setVisible(true);
				//WDEV-21857
				if(isAdditionalPerformed)
					form.lyrIntra().tabRecovery().lblRecoveryAddProc().setValue(ADDITIONAL_PERFORMED_PROC_LABEL);
				form.lyrIntra().tabRecovery().lblAddProcValue().setVisible(true);
			}

			String additionalValue = additional.getProcedureName();
			String additionalValueShortened; //WDEV-22332
			if (additionalLaterality != null)
			{
				additionalValue += " - " + additionalLaterality.getText();
			}
			if (tab.equals(CASE_TAB))
			{
				//WDEV-22332
				if (additionalValue.length() > 25)
				{
					additionalValueShortened = additionalValue.substring(0, 25) + "...";
				}
				else
				{
					additionalValueShortened = additionalValue;					
				}

				form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setValue(additionalValueShortened);
				form.lyrIntra().tabCaseDetails().lblAddCaseProcValue().setTooltip(additionalValue); //WDEV-22332
			}
			else if (tab.equals(RECOVERY_TAB))
			{
				form.lyrIntra().tabRecovery().lblAddProcValue().setValue(additionalValue);
			}
		}
	}
	
	//WDEV-21857
	/**
	 * Method will try to retrieve Procedure data and labels in the following order
	 * 1)Performed
	 * 2)Planned
	 * 3)TheatreBooking
	*/
	private ProcedureDisplayHelper determineProcedures()
	{
		ProcedureLiteVo first = null;
		LateralityLRB firstLaterality = null;
		ProcedureLiteVo additional = null;
		LateralityLRB additionalLaterality = null;
		boolean isFirstPerformed = false;
		boolean isAdditionalPerformed = false;

		//1) Performed
		PerformedProceduresIntraOpVoCollection performedProcedures = domain.listPerformedProceduresByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef()); 
		if (performedProcedures != null && performedProcedures.size() > 0)
		{
			for (PerformedProceduresIntraOpVo item : performedProcedures)
			{
				if (item.getPerformedProcedure().getIsPrimaryIsNotNull() && item.getPerformedProcedure().getIsPrimary())
				{
					first = item.getPerformedProcedure().getProcedure();
					firstLaterality = item.getPerformedProcedure().getProcLaterality();
					isFirstPerformed = true;
					break;
				}
			}

			if (performedProcedures.size() > 1)
			{
				additional = performedProcedures.get(1).getPerformedProcedure().getProcedure();
				additionalLaterality = performedProcedures.get(1).getPerformedProcedure().getProcLaterality();
				isAdditionalPerformed = true;
			}
		}
		
		//2) Planned
		//if we haven't set some procedure detail by performed data try planned
		if(first == null || additional == null)
		{
			IntraOpPlannedProcedureVoCollection plannedProcedures = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());;
			if (plannedProcedures != null && plannedProcedures.size() > 0)
			{
				if(first == null)
				{
    				for (IntraOpPlannedProcedureVo item : plannedProcedures)
    				{
    					if (item.getPlannedProcedure().getIsPrimary())
    					{
    						first = item.getPlannedProcedure().getProcedure();
    						firstLaterality = item.getPlannedProcedure().getProcLaterality();
    						isFirstPerformed = false;
    						break;
    					}
    				}
				}
				
				if(additional == null)
				{
    				if (plannedProcedures.size() > 1)
    				{
    					additional = plannedProcedures.get(1).getPlannedProcedure().getProcedure();
    					additionalLaterality = plannedProcedures.get(1).getPlannedProcedure().getProcLaterality();
    					isAdditionalPerformed = false;
    				}
				}
			}			
		}
		
		//3) TheatreBooking
		//if we haven't set some procedure detail by performed or planned data try theatrebooking
		if(first == null || additional == null)
		{
			TheatreBookingLiteVo booking = domain.getTheatreBooking(form.getGlobalContext().Clinical.getTheatreBookingRef());

			if(first == null)
			{
    			first = booking.getProcedure();
    			firstLaterality = booking.getProcLaterality();
    			isFirstPerformed = false;
			}
			
			if(additional == null)
			{
    			additional = booking.getSecondaryProcedure();
    			additionalLaterality = booking.getSecondaryProcLaterality();
    			isAdditionalPerformed = false;
			}
		}
		
		ProcedureDisplayHelper helper = new ProcedureDisplayHelper(first, firstLaterality, additional, additionalLaterality, isFirstPerformed, isAdditionalPerformed);
		return helper;
	}

	private void openRecoveryDetails()
	{
		PeriOpRecoveryDetailVo recoveryDetails = domain.getRecoveryDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.getLocalContext().setRecoveryDetails(recoveryDetails);
		populateRecoveryDetailsScreenFromData();
		//displayRecoveryDetailProcedureLabels();
		populateRecoveryDetailsPerformedProcedureLabels();//WDEV-21857
	}

	//WDEV-21857
	private void populateRecoveryDetailsPerformedProcedureLabels()
	{
		ProcedureLiteVo first = null;
		LateralityLRB firstLaterality = null;
		ProcedureLiteVo additional = null;
		LateralityLRB additionalLaterality = null;
		ProcedureLiteVo primaryProcedure=null;
	
		form.lyrIntra().tabRecovery().lblProcValue().setVisible(false);
		form.lyrIntra().tabRecovery().lblAddProcValue().setVisible(false);
		
		
		IntraOpPlannedProcedureVo primaryPlannedProc = domain.getPrimaryPlannedProc(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		PerformedProceduresIntraOpVoCollection performedProcedures = domain.listPerformedProceduresByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		if (primaryPlannedProc!=null)
		{
			primaryProcedure=primaryPlannedProc.getPlannedProcedure().getProcedure();
		}
		
		if (performedProcedures != null && performedProcedures.size() > 0)
		{
			for (PerformedProceduresIntraOpVo item : performedProcedures)
			{
				if (item!=null && primaryPlannedProc!=null && primaryProcedure.equals(item.getPerformedProcedure().getProcedure()))
				{
					first = item.getPerformedProcedure().getProcedure();
					firstLaterality = item.getPerformedProcedure().getProcLaterality();
					break;
				}
			}
			
			if (first==null)
			{
				first = performedProcedures.get(0).getPerformedProcedure().getProcedure();
				firstLaterality = performedProcedures.get(0).getPerformedProcedure().getProcLaterality();
			}
			
			if (performedProcedures.size() > 1)
			{
				if (first!=null && !first.equals(performedProcedures.get(0).getPerformedProcedure().getProcedure()))
				{
					additional = performedProcedures.get(0).getPerformedProcedure().getProcedure();
					additionalLaterality = performedProcedures.get(0).getPerformedProcedure().getProcLaterality();
				}
				else
				{
					additional = performedProcedures.get(1).getPerformedProcedure().getProcedure();
					additionalLaterality = performedProcedures.get(1).getPerformedProcedure().getProcLaterality();
				}
			}
										
		}
		
		if (first!=null)
		{
			String primaryProc = first.getProcedureName();
    		if (firstLaterality != null)
    		{
    			primaryProc += " - " + firstLaterality.getText();
    		}
    		
    		form.lyrIntra().tabRecovery().lblProcValue().setValue(primaryProc.length() > 80 ? primaryProc.substring(0, 80) + "..." : primaryProc);
    		form.lyrIntra().tabRecovery().lblProcValue().setTooltip(primaryProc);
    		form.lyrIntra().tabRecovery().lblProcValue().setVisible(true);
		}
		
		
		if (additional!=null)
		{
			String additionalProc = additional.getProcedureName();
    		if (additionalLaterality != null)
    		{
    			additionalProc += " - " + additionalLaterality.getText();
    		}
    
    		form.lyrIntra().tabRecovery().lblAddProcValue().setValue(additionalProc.length() > 80 ? additionalProc.substring(0, 80) + "..." : additionalProc);
    		form.lyrIntra().tabRecovery().lblAddProcValue().setTooltip(additionalProc);
    		form.lyrIntra().tabRecovery().lblAddProcValue().setVisible(true);
		}
	}
	
	private void displayRecoveryDetailProcedureLabels()
	{
		ProcedureDisplayHelper helper = determineProcedures();
		displayProcedureLabels(helper, RECOVERY_TAB);
	}

	private void populateRecoveryDetailsScreenFromData()
	{
		clearRecoveryDetailsInstanceControls();
		PeriOpRecoveryDetailVo recoveryDetails = form.getLocalContext().getRecoveryDetails();
		if (recoveryDetails == null)
			return;

		form.lyrIntra().tabRecovery().ccRecoveryMemberofStaff().setValue(recoveryDetails.getMOS());
		form.lyrIntra().tabRecovery().decRecoveryAdmTemp().setValue(recoveryDetails.getAwaitingTemp());
		form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().setValue(recoveryDetails.getBloodGlucoseResult());
		form.lyrIntra().tabRecovery().cmbRecoveryPainScore().setValue(recoveryDetails.getPainScore());
	}

	private void clearRecoveryDetailsInstanceControls()
	{
		form.lyrIntra().tabRecovery().ccRecoveryMemberofStaff().clear();
		form.lyrIntra().tabRecovery().decRecoveryAdmTemp().setValue(null);
		form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().setValue(null);
		form.lyrIntra().tabRecovery().cmbRecoveryPainScore().setValue(null);
	}

	private void populateCaseDetailsScreenFromData()
	{
		clearCaseDetailsInstanceControls();

		IntraOpCaseStaffDetailsVo caseStaffDetail = form.getLocalContext().getCaseDetails();
		if (caseStaffDetail == null)
			return;

		form.lyrIntra().tabCaseDetails().ccAnaestheticPractitioner().setValue(caseStaffDetail.getAnaestheticPractioner());
		form.lyrIntra().tabCaseDetails().ccAnaethetist().setValue(caseStaffDetail.getAnaesthetist());
		form.lyrIntra().tabCaseDetails().ccAssistingAn().setValue(caseStaffDetail.getAssistingAnaesthetist());
		form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().setValue(caseStaffDetail.getOperatingSurgeon());
		form.lyrIntra().tabCaseDetails().ccSupervisingAn().setValue(caseStaffDetail.getSupervisingAnaesthetist());
		form.lyrIntra().tabCaseDetails().ccSupervisingSurgeon().setValue(caseStaffDetail.getSupervisingSurgeon());

		populateCaseServiceCombo(); //WDEV-21788
		
		if (caseStaffDetail.getAssistingSurgeonsIsNotNull())
		{
			for (MedicLiteVo medic : caseStaffDetail.getAssistingSurgeons())
			{
				ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdAssistingSurgeonsRow row = form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getRows().newRow();
				row.getColAssistingSurgeon().newRow(medic, medic.toString());
				row.getColAssistingSurgeon().setValue(medic);
			}
		}

		if (caseStaffDetail.getCirculatorScrubNurseRolesIsNotNull())
		{
			for (CirculatorScrubNurseRoleVo nurseRole : caseStaffDetail.getCirculatorScrubNurseRoles())
			{
				ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdScrubNursesRow row = form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().newRow();
				row.getColCirculatorsScrubNurses().newRow(nurseRole.getNurse(), nurseRole.getNurse().getMos().toString());
				row.getColCirculatorsScrubNurses().setValue(nurseRole.getNurse());
				row.setColRole(nurseRole.getCirculatorScrubNurseRole());
			}
		}
		if (caseStaffDetail.getScrubPractitioner1IsNotNull())
		{
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().newRow(caseStaffDetail.getScrubPractitioner1(), caseStaffDetail.getScrubPractitioner1().getMos().toString());
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().setValue(caseStaffDetail.getScrubPractitioner1());
		}
		if (caseStaffDetail.getScrubPractitioner2IsNotNull())
		{
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().newRow(caseStaffDetail.getScrubPractitioner2(), caseStaffDetail.getScrubPractitioner2().getMos().toString());
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().setValue(caseStaffDetail.getScrubPractitioner2());
		}

		form.lyrIntra().tabCaseDetails().txtOther().setValue(caseStaffDetail.getOther());
		
		//WDEV-22305
		form.lyrIntra().tabCaseDetails().cmbCaseService().setValue(caseStaffDetail.getCaseService());
		form.getLocalContext().setselectedCaseService(caseStaffDetail.getCaseService());//WDEV-22650

		if (caseStaffDetail.getDisplayRecoveryDetailsIsNotNull())
			form.lyrIntra().tabCaseDetails().chkDisplayRecovery().setValue(caseStaffDetail.getDisplayRecoveryDetails().booleanValue());
		if (caseStaffDetail.getDisplayTourniquetIsNotNull())
			form.lyrIntra().tabCaseDetails().chkDisplayTourniquet().setValue(caseStaffDetail.getDisplayTourniquet().booleanValue());
		if (caseStaffDetail.getDisplayImplantsArterialClampsOtherEquipmentIsNotNull())
			form.lyrIntra().tabCaseDetails().chkDisplayImplants().setValue(caseStaffDetail.getDisplayImplantsArterialClampsOtherEquipment().booleanValue());
		if (caseStaffDetail.getDisplaySpecimensWoundPackingSkinClosureIsNotNull())
			form.lyrIntra().tabCaseDetails().chkDisplaySpecimen().setValue(caseStaffDetail.getDisplaySpecimensWoundPackingSkinClosure().booleanValue());
		if (caseStaffDetail.getDisplayIrrigationCathetersDrainsTubesIsNotNull())
			form.lyrIntra().tabCaseDetails().chkDisplayIrrigation().setValue(caseStaffDetail.getDisplayIrrigationCathetersDrainsTubes().booleanValue());
		if (caseStaffDetail.getDisplayDiathermyandLaserIsNotNull())
			form.lyrIntra().tabCaseDetails().chkDisplayDiathermy().setValue(caseStaffDetail.getDisplayDiathermyandLaser().booleanValue());

	}

	private void clearCaseDetailsInstanceControls()
	{
		form.lyrIntra().tabCaseDetails().ccAnaestheticPractitioner().clear();
		form.lyrIntra().tabCaseDetails().ccAnaethetist().clear();
		form.lyrIntra().tabCaseDetails().ccAssistingAn().clear();
		form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().clear();
		form.lyrIntra().tabCaseDetails().ccSupervisingAn().clear();
		form.lyrIntra().tabCaseDetails().ccSupervisingSurgeon().clear();
		form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getRows().clear();
		form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().clear();
		form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().setValue(null);
		form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().setValue(null);
		form.lyrIntra().tabCaseDetails().txtOther().setValue(null);
		//WDEV-22305
		form.lyrIntra().tabCaseDetails().cmbCaseService().setValue(null);
		form.getLocalContext().setselectedCaseService(null); //WDEV-22650

		form.lyrIntra().tabCaseDetails().chkDisplayRecovery().setValue(false);
		form.lyrIntra().tabCaseDetails().chkDisplayTourniquet().setValue(false);
		form.lyrIntra().tabCaseDetails().chkDisplayImplants().setValue(false);
		form.lyrIntra().tabCaseDetails().chkDisplaySpecimen().setValue(false);
		form.lyrIntra().tabCaseDetails().chkDisplayIrrigation().setValue(false);
		form.lyrIntra().tabCaseDetails().chkDisplayDiathermy().setValue(false);
	}

	private void prePopulateCaseDetailsScreenFromTheatreSessionAndBooking(TheatreSessionStaffDetailVo theatreSessionStaffDetail, TheatreBookingLiteVo booking)
	{
		//WDEV-21788
		if(form.getLocalContext().getTheatreSessionIsNotNull() && form.getLocalContext().getTheatreSession().getServiceIsNotNull())
		{
			form.lyrIntra().tabCaseDetails().cmbCaseService().setValue(form.getLocalContext().getTheatreSession().getService());
			form.getLocalContext().setselectedCaseService(form.getLocalContext().getTheatreSession().getService()); //WDEV-22650
		}
				
		if (theatreSessionStaffDetail == null)
			return;

		form.lyrIntra().tabCaseDetails().ccAnaestheticPractitioner().setValue(theatreSessionStaffDetail.getAnaestheticPractioner());
		form.lyrIntra().tabCaseDetails().ccAnaethetist().setValue(theatreSessionStaffDetail.getAnaesthetist());
		form.lyrIntra().tabCaseDetails().ccAssistingAn().setValue(theatreSessionStaffDetail.getAssistingAnaesthetist());
		form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().setValue(theatreSessionStaffDetail.getOperatingSurgeon());
		
		//DEV-22305
		populateCaseServiceCombo(); 
		if(form.getLocalContext().getTheatreSessionIsNotNull() && form.getLocalContext().getTheatreSession().getServiceIsNotNull())
		{
			form.lyrIntra().tabCaseDetails().cmbCaseService().setValue(form.getLocalContext().getTheatreSession().getService());
			form.getLocalContext().setselectedCaseService(form.getLocalContext().getTheatreSession().getService()); //WDEV-22650
		}
		
		form.lyrIntra().tabCaseDetails().ccSupervisingAn().setValue(theatreSessionStaffDetail.getSupervisingAnaesthetist());
		form.lyrIntra().tabCaseDetails().ccSupervisingSurgeon().setValue(theatreSessionStaffDetail.getSupervisingSurgeon());

		if (theatreSessionStaffDetail.getAssistingSurgeonsIsNotNull())
		{
			for (MedicLiteVo medic : theatreSessionStaffDetail.getAssistingSurgeons())
			{
				ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdAssistingSurgeonsRow row = form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getRows().newRow();
				row.getColAssistingSurgeon().newRow(medic, medic.toString());
				row.getColAssistingSurgeon().setValue(medic);
			}
		}

		if (theatreSessionStaffDetail.getCirculatorsScrubNursesIsNotNull())
		{
			for (NurseLiteVo nurse : theatreSessionStaffDetail.getCirculatorsScrubNurses())
			{
				ims.clinical.forms.intraoperativecasedetailsdialog.GenForm.lyrIntraLayer.tabCaseDetailsContainer.grdScrubNursesRow row = form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().newRow();
				row.getColCirculatorsScrubNurses().newRow(nurse, nurse.getMos().toString());
				row.getColCirculatorsScrubNurses().setValue(nurse);
			}
		}

		form.lyrIntra().tabCaseDetails().txtOther().setValue(theatreSessionStaffDetail.getOther());
	}

	private void openCaseTimes()
	{
		clearCaseTimeLabels();
		loadPeriOPCaseTimes();
		displayPeriOPCaseTimes();
	}

	private void openRecoveryTimes()
	{
		clearRecoveryTimeLabels();
		loadPeriOPRecoveryTimes();
		displayPeriOPRecoveryTimes();
	}

	private void displayPeriOPRecoveryTimes()
	{
		if (form.getLocalContext().getReadyForDischargeIsNotNull() && form.getLocalContext().getReadyForDischarge().getReadyForDischargeTimeIsNotNull())
			form.lyrIntra().tabRecovery().lblRecoveryReadyForDischargeTime().setValue(form.getLocalContext().getReadyForDischarge().getReadyForDischargeTime().getTime().toString());

		if (form.getLocalContext().getTimeOutOfRecoveryIsNotNull() && form.getLocalContext().getTimeOutOfRecovery().getTimeOutOfRecoveryIsNotNull())
			form.lyrIntra().tabRecovery().lblRecoveryTimeOut().setValue(form.getLocalContext().getTimeOutOfRecovery().getTimeOutOfRecovery().getTime().toString());

		if (form.getLocalContext().getTimeIntoRecoveryIsNotNull() && form.getLocalContext().getTimeIntoRecovery().getTimeIntoRecoveryIsNotNull())
			form.lyrIntra().tabRecovery().lblRecoveryTimeInto().setValue(form.getLocalContext().getTimeIntoRecovery().getTimeIntoRecovery().getTime().toString());
	}

	private void loadPeriOPRecoveryTimes()
	{
		Booking_AppointmentRefVo appt = form.getGlobalContext().Clinical.getTheatreAppointmentRef();
		form.getLocalContext().setReadyForDischarge(domain.getReadyForDischargeByAppointment(appt));
		form.getLocalContext().setTimeIntoRecovery(domain.getIntoRecoveryByAppointment(appt));
		form.getLocalContext().setTimeOutOfRecovery(domain.getTimeOutOfRecoveryByAppointment(appt));
	}

	private void clearRecoveryTimeLabels()
	{
		form.lyrIntra().tabRecovery().lblRecoveryReadyForDischargeTime().setValue(null);
		form.lyrIntra().tabRecovery().lblRecoveryTimeInto().setValue(null);
		form.lyrIntra().tabRecovery().lblRecoveryTimeOut().setValue(null);
	}

	private void clearCaseTimeLabels()
	{
		form.lyrIntra().tabCaseDetails().lblAnaesSignInTime().setValue(null);
		form.lyrIntra().tabCaseDetails().lblAnaesRFS().setValue(null);
		form.lyrIntra().tabCaseDetails().lblArrivedTime().setValue(null);
		form.lyrIntra().tabCaseDetails().lblPatientLeftTheatre().setValue(null);
		form.lyrIntra().tabCaseDetails().lblReadyForDischarge().setValue(null);
		form.lyrIntra().tabCaseDetails().lblSafetyBriefTime().setValue(null);
		form.lyrIntra().tabCaseDetails().lblSentForTime().setValue(null);
		form.lyrIntra().tabCaseDetails().lblSurgeryStart().setValue(null);
		form.lyrIntra().tabCaseDetails().lblSurgeryStop().setValue(null);
		form.lyrIntra().tabCaseDetails().lblTimeOutCompleted().setValue(null);
		form.lyrIntra().tabCaseDetails().lblTimeOutOfRecovery().setValue(null);
	}

	private void loadPeriOPCaseTimes()
	{
		Booking_AppointmentRefVo appt = form.getGlobalContext().Clinical.getTheatreAppointmentRef();
		form.getLocalContext().setSafetyBrief(domain.getSafetyBriefByAppointment(appt));
		form.getLocalContext().setAnaesRFS(domain.getAnaesRFSByAppointment(appt));
		form.getLocalContext().setAnaestheticSignIn(domain.getPeriOpAnaestheticSignInByAppointment(appt));
		form.getLocalContext().setPatientArrived(domain.getPatientArrivedByAppointment(appt));
		form.getLocalContext().setPatientLeftTheatre(domain.getPatientLeftTheatreByAppointment(appt));
		form.getLocalContext().setPatientSentFor(domain.getPatientSentForByAppointment(appt));
		form.getLocalContext().setReadyForDischarge(domain.getReadyForDischargeByAppointment(appt));
		form.getLocalContext().setSurgeryStart(domain.getSurgeryStartByAppointment(appt));
		form.getLocalContext().setSurgeryStop(domain.getSurgeryStopByAppointment(appt));
		form.getLocalContext().setTimeOutCompleted(domain.getTimeOutCompletedByAppointment(appt));
		form.getLocalContext().setTimeOutOfRecovery(domain.getTimeOutOfRecoveryByAppointment(appt));
		form.getLocalContext().setTimeIntoRecovery(domain.getIntoRecoveryByAppointment(appt));
		form.getLocalContext().setTimeValidationMap(TheatreCaseTimeHelper.createTimeValidationMap(form.getLocalContext().getSafetyBrief(), form.getLocalContext().getAnaesRFS(), form.getLocalContext().getAnaestheticSignIn(), form.getLocalContext().getPatientArrived(), form.getLocalContext().getPatientLeftTheatre(), form.getLocalContext().getPatientSentFor(), form.getLocalContext().getReadyForDischarge(), form.getLocalContext().getSurgeryStart(), form.getLocalContext().getSurgeryStop(), form.getLocalContext().getTimeIntoRecovery(), form.getLocalContext().getTimeOutCompleted(), form.getLocalContext().getTimeOutOfRecovery()));
	}

	private void displayPeriOPCaseTimes()
	{
		if (form.getLocalContext().getSafetyBriefIsNotNull() && form.getLocalContext().getSafetyBrief().getSafetyBriefTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblSafetyBriefTime().setValue(form.getLocalContext().getSafetyBrief().getSafetyBriefTime().getTime().toString());

		if (form.getLocalContext().getAnaesRFSIsNotNull() && form.getLocalContext().getAnaesRFS().getAnaesthetisedReadyForSurgeryTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblAnaesRFS().setValue(form.getLocalContext().getAnaesRFS().getAnaesthetisedReadyForSurgeryTime().getTime().toString());

		if (form.getLocalContext().getAnaestheticSignInIsNotNull() && form.getLocalContext().getAnaestheticSignIn().getAnaestheticStartTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblAnaesSignInTime().setValue(form.getLocalContext().getAnaestheticSignIn().getAnaestheticStartTime().getTime().toString());

		if (form.getLocalContext().getPatientArrivedIsNotNull() && form.getLocalContext().getPatientArrived().getPatientArrivedTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblArrivedTime().setValue(form.getLocalContext().getPatientArrived().getPatientArrivedTime().getTime().toString());

		if (form.getLocalContext().getPatientLeftTheatreIsNotNull() && form.getLocalContext().getPatientLeftTheatre().getPatientLeftTheatreTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblPatientLeftTheatre().setValue(form.getLocalContext().getPatientLeftTheatre().getPatientLeftTheatreTime().getTime().toString());

		if (form.getLocalContext().getPatientSentForIsNotNull() && form.getLocalContext().getPatientSentFor().getPatientSentTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblSentForTime().setValue(form.getLocalContext().getPatientSentFor().getPatientSentTime().getTime().toString());

		if (form.getLocalContext().getReadyForDischargeIsNotNull() && form.getLocalContext().getReadyForDischarge().getReadyForDischargeTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblReadyForDischarge().setValue(form.getLocalContext().getReadyForDischarge().getReadyForDischargeTime().getTime().toString());

		if (form.getLocalContext().getSurgeryStartIsNotNull() && form.getLocalContext().getSurgeryStart().getSurgeryStartTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblSurgeryStart().setValue(form.getLocalContext().getSurgeryStart().getSurgeryStartTime().getTime().toString());

		if (form.getLocalContext().getSurgeryStopIsNotNull() && form.getLocalContext().getSurgeryStop().getSurgeryStopTimeIsNotNull())
			form.lyrIntra().tabCaseDetails().lblSurgeryStop().setValue(form.getLocalContext().getSurgeryStop().getSurgeryStopTime().getTime().toString());

		if (form.getLocalContext().getTimeOutCompletedIsNotNull() && form.getLocalContext().getTimeOutCompleted().getTimeOutCompletedIsNotNull())
			form.lyrIntra().tabCaseDetails().lblTimeOutCompleted().setValue(form.getLocalContext().getTimeOutCompleted().getTimeOutCompleted().getTime().toString());

		if (form.getLocalContext().getTimeOutOfRecoveryIsNotNull() && form.getLocalContext().getTimeOutOfRecovery().getTimeOutOfRecoveryIsNotNull())
			form.lyrIntra().tabCaseDetails().lblTimeOutOfRecovery().setValue(form.getLocalContext().getTimeOutOfRecovery().getTimeOutOfRecovery().getTime().toString());
	}

	@Override
	protected void onBtnSafetyBriefClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getSafetyBrief(), AcuteTheateListBookingState.SAFETY_BRIEF, 
			form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.SAFETY_BRIEF.getIItemText());
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState()
	{
		updateTabState();

		if (form.lyrIntra().tabCaseDetails().isVisible())
		{
			updateCaseDetailsTabControlState();
		}
		else if (form.lyrIntra().tabPlannedProcedures().isVisible())
		{
			updatePlannedProceduresTabControlState();
		}
		else if (form.lyrIntra().tabPreparation().isVisible())
		{
			updatePreparationTabControlState();
			// Overall FormMode will supercede local context value
			if (form.getMode().equals(FormMode.VIEW))
				form.getLocalContext().setSkinPrepMode(FormMode.VIEW);

			updateSkinPreparationInstanceControlState();
		}
		else if (form.lyrIntra().tabDiathermy().isVisible())
		{
			// Overall FormMode will supercede local context value
			if (form.getMode().equals(FormMode.VIEW))
			{
				form.getLocalContext().setDiathermyMode(FormMode.VIEW);
				form.getLocalContext().setLaserMode(FormMode.VIEW);
			}
			updateDiathermyInstanceControlState();
			updateLaserControlState();
		}
		else if (form.lyrIntra().tabIrrigation().isVisible())
		{
			updateIrrigationTabControlState();
			// Overall FormMode will supercede local context value
			if (form.getMode().equals(FormMode.VIEW))
			{
				form.getLocalContext().setIrrigantDetailMode(FormMode.VIEW);
				form.getLocalContext().setCatheterMode(FormMode.VIEW);
			}
			updateIrrigantDetailInstanceControlState();
			updateCatheterInstanceControlState();
		}
		else if (form.lyrIntra().tabSpecimen().isVisible())
		{
			updateSpecimenTabControlState();
		}
		else if (form.lyrIntra().tabImplants().isVisible())
		{
			updateImplantsTabTabControlState();
		}
		else if (form.lyrIntra().tabTourniquet().isVisible())
		{
			updateTourniquetTabControlState();
		}
		else if (form.lyrIntra().tabHandoverAndFinalCounts().isVisible())
		{
			updateHandoverTabControlState();
		}
		else if (form.lyrIntra().tabPerformedProcedures().isVisible())
		{
			updatePerformedTabControlState();
			// Overall FormMode will supercede local context value
			if (form.getMode().equals(FormMode.VIEW))
				form.getLocalContext().setPerformedProcedureMode(FormMode.VIEW);

			updatePerformedProcedureInstanceControlState();
		}
		else if (form.lyrIntra().tabAnaestheticDetails().isVisible())
		{
			updateAnaesTabControlsState();
		}
	}

	private void updatePlannedProceduresTabControlState()
	{
		form.lyrIntra().tabPlannedProcedures().cmbLaterality().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
	}

	private void updateAnaesTabControlsState()
	{
		form.lyrIntra().tabAnaestheticDetails().ccAssessment().setReadOnly(FormMode.VIEW.equals(form.getMode()));
		form.lyrIntra().tabAnaestheticDetails().setccAuthoringEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrIntra().tabAnaestheticDetails().ccAuthoring().setIsRequiredPropertyToControls(FormMode.EDIT.equals(form.getMode()));

		form.lyrIntra().tabAnaestheticDetails().cmbStatus().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrIntra().tabAnaestheticDetails().cmbStatusReason().setEnabled(FormMode.EDIT.equals(form.getMode()));

		form.lyrIntra().tabAnaestheticDetails().setccCompletedVisible(FormMode.EDIT.equals(form.getMode()) && PatientAssessmentStatusReason.COMPLETED.equals(form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue())); //WDEV-21812
		form.lyrIntra().tabAnaestheticDetails().ccCompleted().setIsRequiredPropertyToControls(FormMode.EDIT.equals(form.getMode()) && PatientAssessmentStatusReason.COMPLETED.equals(form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue()));

		form.lyrIntra().tabAnaestheticDetails().btnEditAssessment().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCaseDetails() != null && (form.getLocalContext().getCaseDetails().getPatientAssessment() == null || (form.getLocalContext().getCaseDetails().getPatientAssessment() != null && !PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getCaseDetails().getPatientAssessment().getStatus()))));
		form.lyrIntra().tabAnaestheticDetails().btnEditAssessment().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCaseDetails() != null && (form.getLocalContext().getCaseDetails().getPatientAssessment() == null || (form.getLocalContext().getCaseDetails().getPatientAssessment() != null && !PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getCaseDetails().getPatientAssessment().getStatus()))));
	}

	private void updatePerformedProcedureInstanceControlState() //WDEV-21840
	{
		boolean enable = form.getLocalContext().getPerformedProcedureMode().equals(FormMode.EDIT);

		form.lyrIntra().tabPerformedProcedures().btnEditPerformedProcedure().setVisible(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getPerformedProcedureMode().equals(FormMode.VIEW) && form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue() != null);
		form.lyrIntra().tabPerformedProcedures().btnRIEPerformedProcedure().setVisible(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getPerformedProcedureMode().equals(FormMode.VIEW) && form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue() != null); //WDEV-22548

		// dont allow change procedure or already created records
		form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().setEnabled(enable && form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getSelectedRow() == null);
		form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setEnabled(enable);
		form.lyrIntra().tabPerformedProcedures().txtPerformedComments().setEnabled(enable);

		form.lyrIntra().tabPerformedProcedures().btnSavePerformedProcedure().setVisible(enable);
		form.lyrIntra().tabPerformedProcedures().btnCancelPerformedProcedure().setVisible(enable);

		form.lyrIntra().tabPerformedProcedures().btnAddPerformedProcedure().setVisible(form.getLocalContext().getPerformedProcedureMode().equals(FormMode.VIEW) && form.getMode().equals(FormMode.EDIT));

		if (enable)
		{
			form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setEnabled(false);
		}
		else
		{
			form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setEnabled(true);
			form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setReadOnly(true);
			
		}
		
		form.lyrIntra().tabPerformedProcedures().btnFlagPerformed().setVisible(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getPerformedProcedureMode().equals(FormMode.VIEW) && form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getSelectedRow() != null && form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getSelectedRow().getColHiddenPlannedProcValue() != null && form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue() == null);
	}

	private void updatePerformedTabControlState() //WDEV-21840
	{
		boolean enable = form.getMode().equals(FormMode.EDIT);

		if (FormMode.EDIT.equals(form.getLocalContext().getPerformedProcedureMode()))
		{
			form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setEnabled(false);
		}
		else
		{
			form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setEnabled(true);
			form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setReadOnly(true);
		}
		
		form.lyrIntra().tabPerformedProcedures().btnAddPerformedProcedure().setVisible(enable);
		updatePerformedTabAntibioticsControlsState();
	}

	private void updatePerformedTabAntibioticsControlsState()
	{
		boolean antiBioticsSurgically = form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().getValue() != null && form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().getValue().equals(AntibioticsSurgicallyEnumeration.rdoYesAnti);

		form.lyrIntra().tabPerformedProcedures().lblSignOutAntibiotics().setVisible(antiBioticsSurgically);
		form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().setVisible(antiBioticsSurgically);
		form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().setEnabled(form.getMode().equals(FormMode.EDIT)); //WDEV-21840
	}

	private void updateTourniquetTabControlState()
	{
		boolean enable = form.getMode().equals(FormMode.VIEW);
		form.lyrIntra().tabTourniquet().btnEditTourniquet().setVisible(enable && form.lyrIntra().tabTourniquet().grdTourniquet().getValue() != null);
	}

	private void updateCatheterInstanceControlState()
	{
		boolean enable = form.getLocalContext().getCatheterMode().equals(FormMode.EDIT);

		form.lyrIntra().tabIrrigation().btnAddDevice().setVisible(form.getLocalContext().getCatheterMode().equals(FormMode.VIEW));
		form.lyrIntra().tabIrrigation().btnEditDevice().setVisible(form.getLocalContext().getCatheterMode().equals(FormMode.VIEW) && form.lyrIntra().tabIrrigation().grdCatheters().getValue() != null);
		form.lyrIntra().tabIrrigation().btnSaveDevice().setVisible(enable);
		form.lyrIntra().tabIrrigation().btnCancelDevice().setVisible(enable);

		form.lyrIntra().tabIrrigation().txtCatheterBodySite().setEnabled(enable);
		form.lyrIntra().tabIrrigation().txtCatheterCollectionDevice().setEnabled(enable);
		form.lyrIntra().tabIrrigation().txtCatheterLotNumber().setEnabled(enable);
		form.lyrIntra().tabIrrigation().txtCatheterLubricant().setEnabled(enable);
		form.lyrIntra().tabIrrigation().txtCatheterSize().setEnabled(enable);
		form.lyrIntra().tabIrrigation().txtCatheterVolInBaloon().setEnabled(enable);
		form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().setEnabled(enable);
		form.lyrIntra().tabIrrigation().CatheterType().setEnabled(enable);

		form.lyrIntra().tabIrrigation().grdCatheters().setEnabled(!enable);
	}

	private void updateIrrigationTabControlState()
	{
		boolean enable = form.getMode().equals(FormMode.EDIT);

		form.lyrIntra().tabIrrigation().grdIrrigantDetail().setEnabled(enable);
		form.lyrIntra().tabIrrigation().btnAddIrrigantDetail().setEnabled(enable);

		form.lyrIntra().tabIrrigation().grdCatheters().setEnabled(enable);
		form.lyrIntra().tabIrrigation().btnAddDevice().setEnabled(enable);
	}

	private void updateIrrigantDetailInstanceControlState()
	{
		boolean enable = form.getLocalContext().getIrrigantDetailMode().equals(FormMode.EDIT);

		form.lyrIntra().tabIrrigation().btnAddIrrigantDetail().setVisible(form.getLocalContext().getIrrigantDetailMode().equals(FormMode.VIEW));
		form.lyrIntra().tabIrrigation().btnEditIrrigantDetail().setVisible(form.getLocalContext().getIrrigantDetailMode().equals(FormMode.VIEW) && form.lyrIntra().tabIrrigation().grdIrrigantDetail().getValue() != null);
		form.lyrIntra().tabIrrigation().btnSaveIrrigantDetail().setVisible(enable);
		form.lyrIntra().tabIrrigation().btnCancelIrrigantDetail().setVisible(enable);

		form.lyrIntra().tabIrrigation().cmbIrrigantDetail().setEnabled(enable);
		form.lyrIntra().tabIrrigation().intIrrigantDetailTotalVolume().setEnabled(enable);
		form.lyrIntra().tabIrrigation().IrrigantDetailWarmed().setEnabled(enable);

		form.lyrIntra().tabIrrigation().grdIrrigantDetail().setEnabled(!enable);
	}

	private void updateLaserControlState()
	{
		boolean enable = form.getLocalContext().getLaserMode().equals(FormMode.EDIT);

		form.lyrIntra().tabDiathermy().btnEditLaserDetails().setVisible(form.getLocalContext().getLaserMode().equals(FormMode.VIEW));
		form.lyrIntra().tabDiathermy().btnSaveLaserDetails().setVisible(enable);
		form.lyrIntra().tabDiathermy().btnCancelLaserDetails().setVisible(enable);

		form.lyrIntra().tabDiathermy().cmbLaser().setEnabled(enable);
		form.lyrIntra().tabDiathermy().cmbLaserDeviceName().setEnabled(enable);
		form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().setEnabled(enable);
		form.lyrIntra().tabDiathermy().chklistpatientSafetyMeasures().setEnabled(enable);
		form.lyrIntra().tabDiathermy().txtLaserFibreLot().setEnabled(enable);
		form.lyrIntra().tabDiathermy().intLaserNoOfBurns().setEnabled(enable);
		form.lyrIntra().tabDiathermy().intLaserTotalDuration().setEnabled(enable);
		form.lyrIntra().tabDiathermy().qmbLaserOperator().setEnabled(enable);
		form.lyrIntra().tabDiathermy().decLaserPower().setEnabled(enable);
		
		//WDEV-21825
		form.lyrIntra().tabDiathermy().btnAddDiathermy().setVisible(form.lyrIntra().tabDiathermy().grdDiathermy().getRows().size()<2 && !enable); 
		form.lyrIntra().tabDiathermy().btnEditDiathermy().setVisible(form.lyrIntra().tabDiathermy().grdDiathermy().getValue() != null && !enable);
	}

	private void updateDiathermyInstanceControlState()
	{
		boolean enable = form.getLocalContext().getDiathermyMode().equals(FormMode.EDIT);

		form.lyrIntra().tabDiathermy().btnAddDiathermy().setVisible(form.lyrIntra().tabDiathermy().grdDiathermy().getRows().size()<2 && form.getLocalContext().getDiathermyMode().equals(FormMode.VIEW)); //WDEV-21825 
		form.lyrIntra().tabDiathermy().btnEditDiathermy().setVisible(form.getLocalContext().getDiathermyMode().equals(FormMode.VIEW) && form.lyrIntra().tabDiathermy().grdDiathermy().getValue() != null);
		form.lyrIntra().tabDiathermy().btnSaveDiathermy().setVisible(enable);
		form.lyrIntra().tabDiathermy().btnCancelDiathermy().setVisible(enable);

		form.lyrIntra().tabDiathermy().cmbDiaPadSite().setEnabled(enable);
		form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setEnabled(enable);
		form.lyrIntra().tabDiathermy().txtDiaBlendSetting().setEnabled(enable);
		form.lyrIntra().tabDiathermy().txtDiaCoagSetting().setEnabled(enable);
		form.lyrIntra().tabDiathermy().txtDiaCut().setEnabled(enable);
		form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().setEnabled(enable);
		form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().setEnabled(enable);
		form.lyrIntra().tabDiathermy().DiathermyMode().setEnabled(enable);
		
		form.lyrIntra().tabDiathermy().btnEditLaserDetails().setVisible(!enable); //WDEV-21825
	}

	private void updatePreparationTabControlState()
	{
		boolean enable = form.getMode().equals(FormMode.EDIT);

		form.lyrIntra().tabPreparation().grdSkinPreparation().setEnabled(enable);
		form.lyrIntra().tabPreparation().btnAddSkinPreparation().setEnabled(enable);
		//WDEV-22032
		form.lyrIntra().tabPreparation().imbRemovePositioning().setEnabled(false);
		if (form.lyrIntra().tabPreparation().grdPositioningDevices().getSelectedRow() != null)
		{
			form.lyrIntra().tabPreparation().imbRemovePositioning().setEnabled(enable);
		}		

		//WDEV-22482 - changed to label for consistency and design time visibility in DevEnv
		form.lyrIntra().tabPreparation().lblSkinIntegrityMaintainedRequired().setVisible(enable); //WDEV-21807
		updatePreparationTabWarmedControlsState();
	}

	//WDEV-22482
	private void updatePreparationTabWarmedControlsState()
	{
		boolean enable = form.getMode().equals(FormMode.EDIT);
		boolean wasPatientWarmed = form.lyrIntra().tabPreparation().PatientWarmed().getValue() != null && form.lyrIntra().tabPreparation().PatientWarmed().getValue().equals(PatientWarmedEnumeration.rdoPatWarmedYes);
		boolean intraOpFluidsUsed = form.getLocalContext().getIntraOpFluidsUsedIsNotNull() && form.getLocalContext().getIntraOpFluidsUsed();
		
		form.lyrIntra().tabPreparation().lblFluidWarmer().setVisible(intraOpFluidsUsed);
		form.lyrIntra().tabPreparation().FluidWarmer().setVisible(intraOpFluidsUsed);
		form.lyrIntra().tabPreparation().FluidWarmer().setEnabled(intraOpFluidsUsed && enable);
		//WDEV-22482
		form.lyrIntra().tabPreparation().lblFluidWarmerRequired().setVisible(intraOpFluidsUsed && enable);

		form.lyrIntra().tabPreparation().lblWarmingBlanket().setVisible(wasPatientWarmed);
		form.lyrIntra().tabPreparation().WarmingBlanket().setVisible(wasPatientWarmed);
		form.lyrIntra().tabPreparation().WarmingBlanket().setEnabled(wasPatientWarmed && enable);
	}

	private void updateTabState()
	{
		boolean enable = form.getMode().equals(FormMode.VIEW) && !Boolean.TRUE.equals(form.getGlobalContext().Clinical.getIntraOpRecoveryManner()); //WDEV-21788

		form.lyrIntra().tabAnaestheticDetails().setHeaderEnabled(enable);
		form.lyrIntra().tabCaseDetails().setHeaderEnabled(enable);
		form.lyrIntra().tabHandoverAndFinalCounts().setHeaderEnabled(enable);
		form.lyrIntra().tabPerformedProcedures().setHeaderEnabled(enable);
		form.lyrIntra().tabPlannedProcedures().setHeaderEnabled(enable);
		form.lyrIntra().tabPreparation().setHeaderEnabled(enable);

		if (form.getLocalContext().getCaseDetailsIsNotNull())
		{
			IntraOpCaseStaffDetailsVo caseDetail = form.getLocalContext().getCaseDetails();

			form.lyrIntra().tabIrrigation().setHeaderVisible((caseDetail.getDisplayIrrigationCathetersDrainsTubesIsNotNull() && caseDetail.getDisplayIrrigationCathetersDrainsTubes()));
			form.lyrIntra().tabImplants().setHeaderVisible((caseDetail.getDisplayImplantsArterialClampsOtherEquipmentIsNotNull() && caseDetail.getDisplayImplantsArterialClampsOtherEquipment()));
			form.lyrIntra().tabDiathermy().setHeaderVisible((caseDetail.getDisplayDiathermyandLaserIsNotNull() && caseDetail.getDisplayDiathermyandLaser()));
			form.lyrIntra().tabSpecimen().setHeaderVisible((caseDetail.getDisplaySpecimensWoundPackingSkinClosureIsNotNull() && caseDetail.getDisplaySpecimensWoundPackingSkinClosure()));
			form.lyrIntra().tabTourniquet().setHeaderVisible((caseDetail.getDisplayTourniquetIsNotNull() && caseDetail.getDisplayTourniquet()));

			form.lyrIntra().tabIrrigation().setHeaderEnabled(enable);
			form.lyrIntra().tabImplants().setHeaderEnabled(enable);
			form.lyrIntra().tabDiathermy().setHeaderEnabled(enable);
			form.lyrIntra().tabSpecimen().setHeaderEnabled(enable);
			form.lyrIntra().tabTourniquet().setHeaderEnabled(enable);
			form.lyrIntra().tabRecovery().setHeaderEnabled(form.getMode().equals(FormMode.VIEW) && (Boolean.TRUE.equals(form.getGlobalContext().Clinical.getIntraOpRecoveryManner()) || !form.lyrIntra().tabCaseDetails().chkDisplayRecovery().getValue())); //WDEV-21788

			//WDEV-21776
			if(form.getGlobalContext().Clinical.getIntraOpRecoveryMannerIsNotNull() && form.getGlobalContext().Clinical.getIntraOpRecoveryManner())
			{
				form.lyrIntra().tabRecovery().setHeaderVisible(true);
			}
			else
			{
				form.lyrIntra().tabRecovery().setHeaderVisible(!form.lyrIntra().tabCaseDetails().chkDisplayRecovery().getValue()); //WDEV-21788
			}
		}
		//WDEV-22445
		else
		{
			form.lyrIntra().tabIrrigation().setHeaderEnabled(false);
			form.lyrIntra().tabImplants().setHeaderEnabled(false);
			form.lyrIntra().tabDiathermy().setHeaderEnabled(false);
			form.lyrIntra().tabSpecimen().setHeaderEnabled(false);
			form.lyrIntra().tabTourniquet().setHeaderEnabled(false);
			form.lyrIntra().tabAnaestheticDetails().setHeaderEnabled(false);
			form.lyrIntra().tabCaseDetails().setHeaderEnabled(false);
			form.lyrIntra().tabHandoverAndFinalCounts().setHeaderEnabled(false);
			form.lyrIntra().tabPerformedProcedures().setHeaderEnabled(false);
			form.lyrIntra().tabPlannedProcedures().setHeaderEnabled(false);
			form.lyrIntra().tabPreparation().setHeaderEnabled(false);
		}
	}

	private void updateCaseDetailsTabControlState()
	{
		form.lyrIntra().tabCaseDetails().imbRemoveAssistingSurgeon().setEnabled(form.getMode().equals(FormMode.EDIT) && form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getSelectedRow() != null);
		form.lyrIntra().tabCaseDetails().imbRemoveScrubNurse().setEnabled(form.getMode().equals(FormMode.EDIT) && form.lyrIntra().tabCaseDetails().grdScrubNurses().getSelectedRow() != null);
		
		//WDEV-21788
		boolean displayRecovery = form.lyrIntra().tabCaseDetails().chkDisplayRecovery().getValue();
		form.lyrIntra().tabCaseDetails().lblTimeOutOfRecovery().setVisible(!displayRecovery);
		form.lyrIntra().tabCaseDetails().btnTimeOutOfRecovery().setVisible(!displayRecovery);
		
		form.lyrIntra().tabCaseDetails().lblReadyForDischarge().setVisible(displayRecovery);
		form.lyrIntra().tabCaseDetails().btnReadyForDischarge().setVisible(displayRecovery);
	}

	@Override
	protected void onBtnChartableOccurencesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.ChartableOccurencesDialog);
	}

	@Override
	protected void onBtnTimeOutOfRecoveryClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getTimeOutOfRecovery(), AcuteTheateListBookingState.TIME_OUT_OF_RECOVERY, 
			form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.TIME_OUT_OF_RECOVERY.getIItemText());
	}

	@Override
	protected void onBtnSurgeryStopClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getSurgeryStop(), AcuteTheateListBookingState.SURGERY_STOP, 
			form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.SURGERY_STOP.getIItemText());
	}

	@Override
	protected void onBtnReadyForDischargeClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getReadyForDischarge(), AcuteTheateListBookingState.READY_FOR_DISCHARGE, 
			form.getLocalContext().getTimeValidationMap()}, AcuteTheateListBookingState.READY_FOR_DISCHARGE.getIItemText());
	}

	@Override
	protected void onBtnPatientLeftTheatreClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getPatientLeftTheatre(), AcuteTheateListBookingState.PATIENT_LEFT_THEATRE, 
			form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.PATIENT_LEFT_THEATRE.getIItemText());
	}

	@Override
	protected void onBtnTimeOutCompletedClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getTimeOutCompleted(), AcuteTheateListBookingState.TIMEOUT_COMPLETE , 
			form.getLocalContext().getTimeValidationMap()}, AcuteTheateListBookingState.TIMEOUT_COMPLETE.getIItemText());
	}

	@Override
	protected void onBtnSurgeryStartClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getSurgeryStart(), AcuteTheateListBookingState.SURGERY_START_TIME , 
			form.getLocalContext().getTimeValidationMap()}, AcuteTheateListBookingState.SURGERY_START_TIME.getIItemText());
	}

	@Override
	protected void onBtnAnaesRFSClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getAnaesRFS(), AcuteTheateListBookingState.ANAESTHETIC_RFS, 
			form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.ANAESTHETIC_RFS.getIItemText());
	}

	@Override
	protected void onBtnAnaesSignInClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AnaestheticSignInDialog, new Object[]{form.getLocalContext().getTimeValidationMap()});
	}

	@Override
	protected void onBtnPatientArrivedClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getPatientArrived(), AcuteTheateListBookingState.PATIENT_ARRIVED, 
			form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.PATIENT_ARRIVED.getIItemText());
	}

	@Override
	protected void onBtnSentForClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getPatientSentFor(), AcuteTheateListBookingState.PATIENT_SENT_FOR, 
			form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.PATIENT_SENT_FOR.getIItemText());

	}

	@Override
	protected void onBtnEditCaseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		IntraOpCaseStaffDetailsVo caseStaffDetail = form.getLocalContext().getCaseDetails();
		if (caseStaffDetail == null)
		{
			TheatreBookingLiteVo booking = domain.getTheatreBooking(form.getGlobalContext().Clinical.getTheatreBookingRef());
			prePopulateCaseDetailsScreenFromTheatreSessionAndBooking(domain.getTheatreSessionStaffDetails(form.getGlobalContext().Scheduling.getTheatreSession()), booking);
			defaultOptionalTabsCheckBoxes();
		}

		form.setMode(FormMode.EDIT);
	}

	private void defaultOptionalTabsCheckBoxes()
	{
		form.lyrIntra().tabCaseDetails().chkDisplayDiathermy().setValue(true);
		form.lyrIntra().tabCaseDetails().chkDisplayImplants().setValue(true);
		form.lyrIntra().tabCaseDetails().chkDisplayIrrigation().setValue(true);
		form.lyrIntra().tabCaseDetails().chkDisplaySpecimen().setValue(true);
		form.lyrIntra().tabCaseDetails().chkDisplayTourniquet().setValue(true);
		form.lyrIntra().tabCaseDetails().chkDisplayRecovery().setValue(false);
	}

	@Override
	protected void onBtnCancelCaseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		openCaseDetails();
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnSaveCaseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		IntraOpCaseStaffDetailsVo caseStaffDetail = populateCaseDetailsDataFromScreen(form.getLocalContext().getCaseDetails());
		String[] errors = caseStaffDetail.validate(validateCaseUI()); //WDEV-21788

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		//WDEV-21788
		if (caseStaffDetail.getID_IntraOpCaseStaffDetails()==null && domain.getCaseStaffDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef())!=null)
		{
			refreshCaseData();
			return;
		}
		
		try
		{
			domain.saveCaseStaffDetails(caseStaffDetail);
		}
		catch (StaleObjectException e)
		{
			refreshCaseData();
			return;
		}
		catch (UniqueKeyViolationException e)
		{
			refreshCaseData();
			return;
		}

		openCaseDetails();
		form.setMode(FormMode.VIEW);
	}

	private String[] validateCaseUI() //WDEV-21788
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		for (int i=0;i<form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().size();i++)
		{
			grdScrubNursesRow row = form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().get(i);
			if (row.getColCirculatorsScrubNurses().getValue()==null && row.getColRole()!=null)
			{
				uiErrors.add("Circulators / Scrub Nurses is mandatory");
				break;
			}
		}
		
		return uiErrors.toArray(new String[0]);
	}
	
	private void refreshCaseData()
	{
		engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		form.getLocalContext().setCaseDetails(domain.getCaseStaffDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
		populateCaseDetailsScreenFromData();
	}

	private IntraOpCaseStaffDetailsVo populateCaseDetailsDataFromScreen(IntraOpCaseStaffDetailsVo caseStaffDetails)
	{
		if (caseStaffDetails == null)
		{
			caseStaffDetails = new IntraOpCaseStaffDetailsVo();
		}

		caseStaffDetails.setAnaestheticPractioner(form.lyrIntra().tabCaseDetails().ccAnaestheticPractitioner().getValue());
		caseStaffDetails.setAnaesthetist(form.lyrIntra().tabCaseDetails().ccAnaethetist().getValue());
		caseStaffDetails.setAssistingAnaesthetist(form.lyrIntra().tabCaseDetails().ccAssistingAn().getValue());
		caseStaffDetails.setOperatingSurgeon(form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().getValue());
		caseStaffDetails.setSupervisingAnaesthetist(form.lyrIntra().tabCaseDetails().ccSupervisingAn().getValue());
		caseStaffDetails.setSupervisingSurgeon(form.lyrIntra().tabCaseDetails().ccSupervisingSurgeon().getValue());

		MedicLiteVoCollection voCollMedics = new MedicLiteVoCollection();
		for (int i = 0; i < form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getRows().size(); i++)
		{
			if (form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getRows().get(i).getColAssistingSurgeon().getValue() != null)
			{
				voCollMedics.add((MedicLiteVo) form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getRows().get(i).getColAssistingSurgeon().getValue());
			}
		}
		caseStaffDetails.setAssistingSurgeons(voCollMedics);

		CirculatorScrubNurseRoleVoCollection voCollCircScrubNurseRoles = new CirculatorScrubNurseRoleVoCollection();
		for (int i = 0; i < form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().size(); i++)
		{
			grdScrubNursesRow row = form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().get(i);
			if (row.getColCirculatorsScrubNurses().getValue() != null)
			{
				CirculatorScrubNurseRoleVo voNurseRole = row.getValue();
				if (voNurseRole == null)
				{
					voNurseRole = new CirculatorScrubNurseRoleVo();
				}
				voNurseRole.setCirculatorScrubNurseRole(row.getColRole());
				voNurseRole.setNurse((NurseLiteVo) row.getColCirculatorsScrubNurses().getValue());
				voCollCircScrubNurseRoles.add(voNurseRole);
			}
		}
		caseStaffDetails.setCirculatorScrubNurseRoles(voCollCircScrubNurseRoles);

		caseStaffDetails.setScrubPractitioner1(form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().getValue());
		caseStaffDetails.setScrubPractitioner2(form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().getValue());
		caseStaffDetails.setOther(form.lyrIntra().tabCaseDetails().txtOther().getValue());
			
		//WDEV-22305  //WDEV-22650
		caseStaffDetails.setCaseService(form.getLocalContext().getselectedCaseService());
		
		caseStaffDetails.setDisplayRecoveryDetails(new Boolean(form.lyrIntra().tabCaseDetails().chkDisplayRecovery().getValue()));
		caseStaffDetails.setDisplayTourniquet(new Boolean(form.lyrIntra().tabCaseDetails().chkDisplayTourniquet().getValue()));
		caseStaffDetails.setDisplayImplantsArterialClampsOtherEquipment(new Boolean(form.lyrIntra().tabCaseDetails().chkDisplayImplants().getValue()));
		caseStaffDetails.setDisplaySpecimensWoundPackingSkinClosure(new Boolean(form.lyrIntra().tabCaseDetails().chkDisplaySpecimen().getValue()));
		caseStaffDetails.setDisplayIrrigationCathetersDrainsTubes(new Boolean(form.lyrIntra().tabCaseDetails().chkDisplayIrrigation().getValue()));
		caseStaffDetails.setDisplayDiathermyandLaser(new Boolean(form.lyrIntra().tabCaseDetails().chkDisplayDiathermy().getValue()));

		caseStaffDetails.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		return caseStaffDetails;
	}

	@Override
	protected void onImbRemoveScrubNurseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrIntra().tabCaseDetails().grdScrubNurses().removeSelectedRow();
		//WDEV-22285
		updateCaseDetailsTabControlState();
	}

	@Override
	protected void onImbAddScrubNurseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrIntra().tabCaseDetails().grdScrubNurses().getRows().newRow();
	}

	@Override
	protected void onImbRemoveAssistingSurgeonClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().removeSelectedRow();
		//WDEV-22285
		updateCaseDetailsTabControlState();
	}

	@Override
	protected void onImbAddAssistingSurgeonClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrIntra().tabCaseDetails().grdAssistingSurgeons().getRows().newRow();
	}

	@Override
	protected void onBtnNewPlannedClick() throws PresentationLogicException
	{
		form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().setValue(null);
		clearPlannedProcedureInstanceControls();
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSavePlannedClick() throws PresentationLogicException
	{
		IntraOpPlannedProcedureVo planned = form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().getValue();
		planned = populatePlannedProcedureInstanceData(planned); //WDEV-21840

		String[] errors = planned.validate(validatePlannedUI(planned.getID_IntraOpPlannedProcedure()==null));
		
		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveIntraOpPlannedProcedure(planned, form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		openPlannedProcedures();
		form.setMode(FormMode.VIEW);
	}

	private String[] validatePlannedUI(boolean newPlanned) //WDEV-21840
	{
		ArrayList<String> uiErrors = new ArrayList<String>();

		if (form.lyrIntra().tabPlannedProcedures().cmbLaterality().getVisible() && form.lyrIntra().tabPlannedProcedures().cmbLaterality().isEnabled() && form.lyrIntra().tabPlannedProcedures().cmbLaterality().getValue() == null)
		{
			uiErrors.add("Laterality is mandatory");
		}
		
		//WDEV-21840
		if (newPlanned && form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().getValue()!=null && domain.isPlannedOrPerformedProcedureAddedAlready(form.getGlobalContext().Clinical.getTheatreAppointmentRef(), form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().getValue()))
		{
			uiErrors.add(form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().getValue().getProcedureName() + " is already added as Planned or Performed procedure");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;

	}
	
	//WDEV-22282 
	/* 
	 * Check if patient is diabetic. If no blood glucose reading then
	 * add validation error message, and display
	 */
	private String[] validateRecoveryUI(PeriOpRecoveryDetailVo recovery)
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().isRequired()
				&& recovery.getBloodGlucoseResult() == null)
		{
			uiErrors.add("Patient is diabetic. Blood Glucose is mandatory");
		} 
		
		return uiErrors.toArray(new String[0]);
	}

	private IntraOpPlannedProcedureVo populatePlannedProcedureInstanceData(IntraOpPlannedProcedureVo planned)
	{
		if (planned == null)
			planned = new IntraOpPlannedProcedureVo();

		PatientProcedureMinVo patientPlannedProc = planned.getPlannedProcedure();
		if (patientPlannedProc == null)
			patientPlannedProc = new PatientProcedureMinVo();

		patientPlannedProc.setProcedure(form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().getValue());
		patientPlannedProc.setNotes(form.lyrIntra().tabPlannedProcedures().txtProcedureComment().getValue());
		patientPlannedProc.setProcLaterality(form.lyrIntra().tabPlannedProcedures().cmbLaterality().getValue());
		
		//WDEV-22558
		patientPlannedProc.setProcedureStatus(PatientProcedureStatus.PLANNED); 
		patientPlannedProc.setDatePlanned(form.getLocalContext().getTheatreSession()!=null && form.getLocalContext().getTheatreSession().getSessionDate()!=null ? form.getLocalContext().getTheatreSession().getSessionDate().toPartialDate() : null);		
		planned.setPlannedProcedure(patientPlannedProc);

		planned.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		
		
		return planned;
	}

	@Override
	protected void onBtnCancelPlannedClick() throws PresentationLogicException
	{
		openPlannedProcedures();
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnEditPreparationClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSavePreparationClick() throws PresentationLogicException
	{
		PatientPreperationIntraOpVo patientPreperation = populatePreparationDataFromScreen(form.getLocalContext().getPatientPreparation());
		String[] errors = patientPreperation.validate(validatePrepUI()); //WDEV-21807

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		//WDEV-21807
		PatientPreperationIntraOpVo patientPreparationFromDB = domain.getPatientPreparation(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (patientPreperation.getID_PatientPreperationIntraOp() == null && patientPreparationFromDB!=null)
		{
			refreshData();
			return;
		}
		
		// if skin integrity maintained is selected as NO - check for Chartable
		// Occurence Type and display a message
		if (patientPreperation.getSkinIntegrityMaintainedIsNotNull() && patientPreperation.getSkinIntegrityMaintained().equals(YesNo.NO))
		{
			if (!domain.doesChartableOccuranceTypeExistForAppt(form.getGlobalContext().Clinical.getTheatreAppointmentRef(), ChartableOccuranceType.SKIN_INTEGRITY_MAINTENANCE))
				engine.showMessage("Please record a Chartable occurrence of Occurrence Type 'Skin Integrity Maintenance'", "Information", MessageButtons.OK, MessageIcon.INFORMATION); //WDEV-21807
		}

		try
		{
			domain.savePatientPreparation(patientPreperation);
		}
		catch (StaleObjectException e)
		{
			refreshData();
			return;
		}
		catch (UniqueKeyViolationException ex)
		{
			refreshData();
			return;
		}

		form.setMode(FormMode.VIEW);
		openPreparation();
		openSkinPreparation();
	}

	private String[] validatePrepUI() //WDEV-21807
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		//WDEV-22482
		if( form.lyrIntra().tabPreparation().lblFluidWarmerRequired().isVisible())
		{
			if(form.lyrIntra().tabPreparation().FluidWarmer().getValue().equals(FluidWarmerEnumeration.None))
				uiErrors.add("Fluid warmer used is mandatory");
		}
		
		if (SkinIntegrityEnumeration.None.equals(form.lyrIntra().tabPreparation().SkinIntegrity().getValue()))
			uiErrors.add("Skin Integrity Maintained is mandatory");
		
		return uiErrors.toArray(new String[0]);
	}
	
	private void refreshData()
	{
		engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		form.getLocalContext().setPatientPreparation(domain.getPatientPreparation(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
		populatePreparationScreenFromData();
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnCancelPreparationClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		openPreparation();
		openSkinPreparation();
	}

	@Override
	protected void onGrdOtherEquipmentSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setOtherEquipmentIntraOpVo(form.lyrIntra().tabImplants().grdOtherEquipment().getValue());
		updateImplantsTabTabControlState();
	}

	@Override
	protected void onGrdArterialClampsSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setArterialClampIntraOpVo(form.lyrIntra().tabImplants().grdArterialClamps().getValue());
		updateImplantsTabTabControlState();
	}

	@Override
	protected void onGrdImplantsSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setImplantsIntraOpVo(form.lyrIntra().tabImplants().grdImplants().getValue());
		updateImplantsTabTabControlState();
	}

	@Override
	protected void onBtnEditIrrigantClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelIrrigantClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		openIrrigation();
		openIrrigationDetail();
		openCatheter();
		updateIrrigantDetailInstanceControlState();
		updateCatheterInstanceControlState();
		updateIrrigationTabControlState();
	}

	@Override
	protected void onImbAddSkinClosureClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSkinClosureIntraOpVo(null);
		engine.open(form.getForms().Clinical.SkinClosureIntraOpDialog);
	}

	@Override
	protected void onImbAddSpecimenClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setIntraOpSpecimenVo(null);
		engine.open(form.getForms().Clinical.SpecimenIntraOpDialog);
	}

	@Override
	protected void onImbAddWoundPackingClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setWoundPackingIntraOpVo(null);
		engine.open(form.getForms().Clinical.WoundPackingIntraOpDialog);
	}

	@Override
	protected void onImbAddOtherEquipmentClick() throws PresentationLogicException
	{
		if(form.lyrIntra().tabImplants().grdOtherEquipment().getRows().size() < 10)
		{
    		form.getGlobalContext().Clinical.setOtherEquipmentIntraOpVo(null);
    		engine.open(form.getForms().Clinical.OtherEquipmentIntraOpDialog);
		}
		else
		{
			engine.showMessage("Maximum (10) number of records reached");
		}
	}

	@Override
	protected void onImbAddArterialClampsClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setArterialClampIntraOpVo(null);
		engine.open(form.getForms().Clinical.ArterialClampIntraOpDialog);
	}

	@Override
	protected void onImbAddImplantsClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setImplantsIntraOpVo(null);
		engine.open(form.getForms().Clinical.ImplantsIntraOpDialog);
	}

	@Override
	protected void onBtnAddTourniquetClick() throws PresentationLogicException
	{
		form.lyrIntra().tabTourniquet().grdTourniquet().setValue(null);
		clearTourniquetInstanceControls();
		form.lyrIntra().tabTourniquet().dtimTournuetInflated().setValue(new DateTime());
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnEditTourniquetClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelTourniquetClick() throws PresentationLogicException
	{
		openTourniquet();
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onImbAddFinalClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setFinalCountsIntraOpVo(null);
		engine.open(form.getForms().Clinical.FinalAndIncorrectCountIntraOpDialog);
	}

	@Override
	protected void onGrdFinalSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setFinalCountsIntraOpVo(form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().getValue());
		updateHandoverTabControlState();
	}

	@Override
	protected void onImbAddHandoverClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setHandoverCountsIntraOpVo(null);
		engine.open(form.getForms().Clinical.HandoverCountsIntraOpDialog);
	}

	@Override
	protected void onGrdHandoverSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setHandoverCountsIntraOpVo(form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().getValue());
		updateHandoverTabControlState();
	}

	@Override
	protected void onBtnRecoveryTimeOutClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { 
			form.getLocalContext().getTimeOutOfRecovery(), 
			AcuteTheateListBookingState.TIME_OUT_OF_RECOVERY, 
			form.getLocalContext().getTimeValidationMap() }, 
			AcuteTheateListBookingState.TIME_OUT_OF_RECOVERY.getIItemText());
	}

	@Override
	protected void onBtnRecoveryReadyForDischargeClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getReadyForDischarge(), AcuteTheateListBookingState.READY_FOR_DISCHARGE, form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.READY_FOR_DISCHARGE.getIItemText());
	}

	@Override
	protected void onBtnRecoveryIntoClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getTimeIntoRecovery(), AcuteTheateListBookingState.INTO_RECOVERY, form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.INTO_RECOVERY.getIItemText());
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.AcuteTheatreCaseTimesDialog))
		{
			if (form.lyrIntra().tabCaseDetails().isVisible())
				openCaseTimes();
			else if (form.lyrIntra().tabRecovery().isVisible())
				openRecoveryTimes();
		}
		else if (formName.equals(form.getForms().Clinical.AnaestheticSignInDialog))
		{
			openCaseTimes();
		}
		else if (formName.equals(form.getForms().Clinical.SpecimenIntraOpDialog))
		{
			openSpecimenIntraOP();
			updateSpecimenTabControlState();
		}
		else if (formName.equals(form.getForms().Clinical.WoundPackingIntraOpDialog))
		{
			openWoundPackingIntraOp();
			updateSpecimenTabControlState();
		}
		else if (formName.equals(form.getForms().Clinical.SkinClosureIntraOpDialog))
		{
			openSkinClosureIntraOp();
			updateSpecimenTabControlState();
		}
		else if (formName.equals(form.getForms().Clinical.ArterialClampIntraOpDialog))
		{
			openArterialClampIntraOp();
			updateImplantsTabTabControlState();
		}
		else if (formName.equals(form.getForms().Clinical.ImplantsIntraOpDialog))
		{
			openImplantsIntraOp();
			updateImplantsTabTabControlState();
		}
		else if (formName.equals(form.getForms().Clinical.OtherEquipmentIntraOpDialog))
		{
			openOtherEquipmentIntraOp();
			updateImplantsTabTabControlState();
		}
		else if (formName.equals(form.getForms().Clinical.HandoverCountsIntraOpDialog))
		{
			openHandoverCounts();
			updateHandoverTabControlState();
		}
		else if (formName.equals(form.getForms().Clinical.FinalAndIncorrectCountIntraOpDialog))
		{
			openFinalCounts();
			updateHandoverTabControlState();
		}
		//WDEV-22400
		else if (formName.equals(form.getForms().Clinical.RemoveIntraOpCaseTimesDialog))
		{
			openCaseTimes();
			if(result.equals(DialogResult.OK))
				updateBookingState();
		}
		
		//WDEV-22548
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && result.equals(DialogResult.OK))
		{
			riePerformedProcedure();
		}
	}

	//WDEV-22400
	//determine which state the TheatreBooking record is now in so we can update the colour
	private void updateBookingState()
	{
		Map<Integer, DateTime> times = form.getLocalContext().getTimeValidationMap();
		
		Integer currentRecord = Collections.max(times.keySet());
		while(times.get(currentRecord) == null && currentRecord != -1)
		{
			currentRecord = currentRecord -= 1;
		}
		
		AcuteTheateListBookingState state = TheatreCaseTimeHelper.getBookingState(currentRecord);
		domain.saveBookingState(form.getGlobalContext().Clinical.getTheatreBookingRef(), state);
	}

	private void openSpecimenIntraOP() //WDEV-21829
	{
		form.lyrIntra().tabSpecimen().grdSpecimens().getRows().clear();
		SpecimenIntraOpVoCollection specimenIntraOps = domain.listSpecimenIntraOpByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (SpecimenIntraOpVo specimenIntraOp : specimenIntraOps)
		{
			grdSpecimensRow row = form.lyrIntra().tabSpecimen().grdSpecimens().getRows().newRow();
			if (specimenIntraOp.getSpecimenDestinationIsNotNull())
			{
				row.setColSpecimenDestination(specimenIntraOp.getSpecimenDestination().getText());
				row.setTooltipForColSpecimenDestination(specimenIntraOp.getSpecimenDestination().getText());
			}
			else if (specimenIntraOp.getDetailsIsNotNull())
			{
				row.setColSpecimenDestination(specimenIntraOp.getDetails());
				row.setTooltipForColSpecimenDestination(specimenIntraOp.getDetails());
			}

			if (specimenIntraOp.getNoOfSpecimensIsNotNull())
			{
				row.setColNoOfSpecimens(String.valueOf(specimenIntraOp.getNoOfSpecimens()));
				row.setTooltipForColNoOfSpecimens(String.valueOf(specimenIntraOp.getNoOfSpecimens()));
			}

			String directOrIndirect = "";
			if (specimenIntraOp.getIsDirect())
				directOrIndirect = "Direct";
			else if (specimenIntraOp.getIsIndirect())
				directOrIndirect = "Indirect";

			row.setColDirect(directOrIndirect);
			row.setTooltipForColDirect(directOrIndirect);

			row.setColSpecimenTypeComment(specimenIntraOp.getTypeComments());
			row.setTooltipForColSpecimenTypeComment(specimenIntraOp.getTypeComments());
			
			if (specimenIntraOp.getPatientProcedureIsNotNull())
			{
				String theatresProcedureDisplayText = specimenIntraOp.getPatientProcedure().getTheatresProcedureDisplayText();
				row.setColProcedure(theatresProcedureDisplayText);
				row.setTooltipForColProcedure(theatresProcedureDisplayText);
			}
			row.setValue(specimenIntraOp);
		}
	}

	@Override
	protected void onGrdScrubNursesGridQueryComboBoxTextSubmited(int column, grdScrubNursesRow row, String text) throws PresentationLogicException
	{
		if (text == null || text.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}

		NurseLiteVoCollection voCollNurse = domain.listNurseLiteVo(text);

		for (int i = 0; i < voCollNurse.size(); i++)
		{
			row.getColCirculatorsScrubNurses().newRow(voCollNurse.get(i), voCollNurse.get(i).getMos().toString());
		}

		if (voCollNurse.size() == 1)
			row.getColCirculatorsScrubNurses().setValue(voCollNurse.get(0));
		else
			row.getColCirculatorsScrubNurses().showOpened();
	}

	@Override
	protected void onGrdAssistingSurgeonsGridQueryComboBoxTextSubmited(int column, grdAssistingSurgeonsRow row, String text) throws PresentationLogicException
	{
		if (text == null || text.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}

		MedicLiteVoCollection voCollMedics = domain.listMedicLiteVo(text);

		for (int i = 0; i < voCollMedics.size(); i++)
		{
			row.getColAssistingSurgeon().newRow(voCollMedics.get(i), voCollMedics.get(i).getMos().toString());
		}

		if (voCollMedics.size() == 1)
			row.getColAssistingSurgeon().setValue(voCollMedics.get(0));
		else
			row.getColAssistingSurgeon().showOpened();
	}

	@Override
	protected void onQmbScrubPractitioner2TextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().clear();

		NurseLiteVoCollection voCollNurse = domain.listNurseLiteVo(value);

		for (int i = 0; i < voCollNurse.size(); i++)
		{
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().newRow(voCollNurse.get(i), voCollNurse.get(i).getMos().toString());
		}

		if (voCollNurse.size() == 1)
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().setValue(voCollNurse.get(0));
		else
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner2().showOpened();
	}

	@Override
	protected void onQmbScrubPractitioner1TextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().clear();

		NurseLiteVoCollection voCollNurse = domain.listNurseLiteVo(value);

		for (int i = 0; i < voCollNurse.size(); i++)
		{
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().newRow(voCollNurse.get(i), voCollNurse.get(i).getMos().toString());
		}

		if (voCollNurse.size() == 1)
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().setValue(voCollNurse.get(0));
		else
			form.lyrIntra().tabCaseDetails().qmbScrubPractitioner1().showOpened();
	}

	@Override
	protected void onlyrIntraTabChanged(LayerBridge tab)
	{
		/*
		 * NB : the order here that the local context modes are set for each
		 * form is important and must be maintained - they must be set before
		 * setting the overall form mode
		 */
		form.getLocalContext().setSkinPrepMode(FormMode.VIEW);
		form.getLocalContext().setDiathermyMode(FormMode.VIEW);
		form.getLocalContext().setLaserMode(FormMode.VIEW);
		form.getLocalContext().setIrrigantDetailMode(FormMode.VIEW);
		form.getLocalContext().setCatheterMode(FormMode.VIEW);
		form.getLocalContext().setPerformedProcedureMode(FormMode.VIEW);
		

		if (tab.equals(form.lyrIntra().tabAnaestheticDetails()))
		{
			populateAnaesScreeFromData(form.getLocalContext().getCaseDetails());
		}
		else if (tab.equals(form.lyrIntra().tabCaseDetails()))
		{
			openCaseTimes();
			openCaseDetails();
		}
		else if (tab.equals(form.lyrIntra().tabDiathermy()))
		{
			openDiathermy();
			
			//WDEV-21825
			openLaserDetails();
			updateDiathermyInstanceControlState();
			updateLaserControlState();
		}
		else if (tab.equals(form.lyrIntra().tabImplants()))
		{
			openImplantsIntraOp();
			openArterialClampIntraOp();
			openOtherEquipmentIntraOp();
		}
		else if (tab.equals(form.lyrIntra().tabIrrigation()))
		{
			openIrrigation();
			openCatheter();
		}
		else if (tab.equals(form.lyrIntra().tabPerformedProcedures()))
		{
			openPerformedSignOut();
			openPerformedProcedures();
		}
		else if (tab.equals(form.lyrIntra().tabPlannedProcedures()))
		{
			openPlannedProcedures();
		}
		else if (tab.equals(form.lyrIntra().tabPreparation()))
		{
			//WDEV-22482
			form.getLocalContext().setIntraOpFluidsUsed(domain.isAnaestheticSignInIntraOpFluidsYes(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
			openPreparation();
			openSkinPreparation();
		}
		else if (tab.equals(form.lyrIntra().tabRecovery()))
		{
			openRecoveryTimes();
			openRecoveryDetails();
		}
		else if (tab.equals(form.lyrIntra().tabSpecimen()))
		{
			openSpecimenIntraOP();
			openWoundPackingIntraOp();
			openSkinClosureIntraOp();
		}
		else if (tab.equals(form.lyrIntra().tabTourniquet()))
		{
			openTourniquet();
		}
		else if (tab.equals(form.lyrIntra().tabHandoverAndFinalCounts()))
		{
			openHandoverCounts();
			openFinalCounts();
		}
		
		//WDEV-21831
		form.setMode(FormMode.VIEW);
	}

	private void openPerformedSignOut()
	{
		PerformedProcAndSignOutIntraOpVo perfSignOut = domain.getPerformedSignOut(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.getLocalContext().setPerformedSignOut(perfSignOut);
		populatePerformedSignOutScreenFromData();
		updatePerformedTabAntibioticsControlsState();
	}

	private void clearPerformedSignOutScreen()
	{
		form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().setValue(null);
		form.lyrIntra().tabPerformedProcedures().chkSignOutSurgeon().setValue(false);
		form.lyrIntra().tabPerformedProcedures().chkSignOutSpecimensLabelled().setValue(false);
		form.lyrIntra().tabPerformedProcedures().chkSignOutAdminComplete().setValue(false);
		form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().setValue(null);
		form.lyrIntra().tabPerformedProcedures().chkSignOutHasBeenConfirmed().setValue(false);
		form.lyrIntra().tabPerformedProcedures().chkUnplanned().setValue(false);
		form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().setValue(null);
		form.lyrIntra().tabPerformedProcedures().SignOutEquipmentProblems().setValue(null);
	}

	private void populatePerformedSignOutScreenFromData()
	{
		clearPerformedSignOutScreen();
		PerformedProcAndSignOutIntraOpVo perfSignOut = form.getLocalContext().getPerformedSignOut();
		if (perfSignOut == null)
			return;

		if (perfSignOut.getSignatureByRegisteredPractitionerIsNotNull())
		{
			form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().newRow(perfSignOut.getSignatureByRegisteredPractitioner(), perfSignOut.getSignatureByRegisteredPractitioner().getMos().toString());
			form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().setValue(perfSignOut.getSignatureByRegisteredPractitioner());
		}
		if (perfSignOut.getKeyConcernsDocumentedIsNotNull())
			form.lyrIntra().tabPerformedProcedures().chkSignOutSurgeon().setValue(perfSignOut.getKeyConcernsDocumented().booleanValue());
		if (perfSignOut.getAnySpecimensHaveBeenLabelledIsNotNull())
			form.lyrIntra().tabPerformedProcedures().chkSignOutSpecimensLabelled().setValue(perfSignOut.getAnySpecimensHaveBeenLabelled().booleanValue());
		if (perfSignOut.getAdministrationRecordCompletedIsNotNull())
			form.lyrIntra().tabPerformedProcedures().chkSignOutAdminComplete().setValue(perfSignOut.getAdministrationRecordCompleted().booleanValue());
		form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().setValue(perfSignOut.getTimeIntraOpAntibioticsGivenIsNotNull() ? perfSignOut.getTimeIntraOpAntibioticsGiven() : null);
		if (perfSignOut.getConfirmedCountsCompleteIsNotNull())
			form.lyrIntra().tabPerformedProcedures().chkSignOutHasBeenConfirmed().setValue(perfSignOut.getConfirmedCountsComplete().booleanValue());
		if (perfSignOut.getUnplannedreturntotheatreIsNotNull())
			form.lyrIntra().tabPerformedProcedures().chkUnplanned().setValue(perfSignOut.getUnplannedreturntotheatre().booleanValue());

		form.lyrIntra().tabPerformedProcedures().SignOutEquipmentProblems().setValue(null);
		YesNoNotApplicable equipmentProblems = perfSignOut.getAnyEquipmentProblemsAddressed();
		if (equipmentProblems != null)
		{
			if (equipmentProblems.equals(YesNoNotApplicable.YES))
			{
				form.lyrIntra().tabPerformedProcedures().SignOutEquipmentProblems().setValue(SignOutEquipmentProblemsEnumeration.rdoYesEquipment);
			}
			else if (equipmentProblems.equals(YesNoNotApplicable.NO))
			{
				form.lyrIntra().tabPerformedProcedures().SignOutEquipmentProblems().setValue(SignOutEquipmentProblemsEnumeration.rdoNoEquipment);
			}
			else if (equipmentProblems.equals(YesNoNotApplicable.NOTAPPLICABLE))
			{
				form.lyrIntra().tabPerformedProcedures().SignOutEquipmentProblems().setValue(SignOutEquipmentProblemsEnumeration.rdoNAEquipment);
			}
		}

		form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().setValue(null);
		YesNoNotApplicable antibiotics = perfSignOut.getAntibioticsAfterKnifeToSkin();
		if (antibiotics != null)
		{
			if (antibiotics.equals(YesNoNotApplicable.YES))
			{
				form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().setValue(AntibioticsSurgicallyEnumeration.rdoYesAnti);
			}
			else if (antibiotics.equals(YesNoNotApplicable.NO))
			{
				form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().setValue(AntibioticsSurgicallyEnumeration.rdoNoAnti); //WDEV-21840
			}
			else if (antibiotics.equals(YesNoNotApplicable.NOTAPPLICABLE))
			{
				form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().setValue(AntibioticsSurgicallyEnumeration.rdoNAAnti);
			}
		}
	}

	private ims.clinical.vo.PerformedProcAndSignOutIntraOpVo populatePerformedSignOutDataFromScreen(ims.clinical.vo.PerformedProcAndSignOutIntraOpVo perfSignOut)
	{
		if (perfSignOut == null)
			perfSignOut = new ims.clinical.vo.PerformedProcAndSignOutIntraOpVo();

		perfSignOut.setSignatureByRegisteredPractitioner(form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().getValue());
		perfSignOut.setKeyConcernsDocumented(new Boolean(form.lyrIntra().tabPerformedProcedures().chkSignOutSurgeon().getValue()));
		perfSignOut.setAnySpecimensHaveBeenLabelled(new Boolean(form.lyrIntra().tabPerformedProcedures().chkSignOutSpecimensLabelled().getValue()));
		perfSignOut.setAdministrationRecordCompleted(new Boolean(form.lyrIntra().tabPerformedProcedures().chkSignOutAdminComplete().getValue()));
		perfSignOut.setTimeIntraOpAntibioticsGiven(form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().isVisible() ? form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().getValue() : null); //WDEV-21840
		perfSignOut.setConfirmedCountsComplete(new Boolean(form.lyrIntra().tabPerformedProcedures().chkSignOutHasBeenConfirmed().getValue()));
		perfSignOut.setUnplannedreturntotheatre(new Boolean(form.lyrIntra().tabPerformedProcedures().chkUnplanned().getValue()));

		if (form.lyrIntra().tabPerformedProcedures().SignOutEquipmentProblems().getValue() != null)
		{
			SignOutEquipmentProblemsEnumeration selection = form.lyrIntra().tabPerformedProcedures().SignOutEquipmentProblems().getValue();
			if (selection.equals(SignOutEquipmentProblemsEnumeration.rdoYesEquipment))
			{
				perfSignOut.setAnyEquipmentProblemsAddressed(YesNoNotApplicable.YES);
			}
			else if (selection.equals(SignOutEquipmentProblemsEnumeration.rdoNoEquipment))
			{
				perfSignOut.setAnyEquipmentProblemsAddressed(YesNoNotApplicable.NO);
			}
			else if (selection.equals(SignOutEquipmentProblemsEnumeration.rdoNAEquipment))
			{
				perfSignOut.setAnyEquipmentProblemsAddressed(YesNoNotApplicable.NOTAPPLICABLE);
			}
		}

		if (form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().getValue() != null)
		{
			AntibioticsSurgicallyEnumeration selection = form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().getValue();
			if (selection.equals(AntibioticsSurgicallyEnumeration.rdoYesAnti))
			{
				perfSignOut.setAntibioticsAfterKnifeToSkin(YesNoNotApplicable.YES);
			}
			else if (selection.equals(AntibioticsSurgicallyEnumeration.rdoNoAnti))
			{
				perfSignOut.setAntibioticsAfterKnifeToSkin(YesNoNotApplicable.NO);
			}
			else if (selection.equals(AntibioticsSurgicallyEnumeration.rdoNAAnti))
			{
				perfSignOut.setAntibioticsAfterKnifeToSkin(YesNoNotApplicable.NOTAPPLICABLE);
			}
		}

		perfSignOut.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		return perfSignOut;
	}

	private void openPerformedProcedures()
	{
		clearPerformedInstanceControls();

		form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getRows().clear();
		PerformedProceduresIntraOpVoCollection perfProcedures = domain.listPerformedProceduresByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (perfProcedures != null)
		{
			for (PerformedProceduresIntraOpVo performed : perfProcedures)
			{
				if (performed.getPerformedProcedureIsNotNull())
				{
					grdPerformedProceduresRow row = form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getRows().newRow();
					row.setcolProcedure(performed.getPerformedProcedure().getProcedure().getProcedureName());
					if (performed.getPerformedProcedure().getProcLateralityIsNotNull())
						row.setcolLaterality(performed.getPerformedProcedure().getProcLaterality().getIItemText());

					row.setcolPerformed(true);
					row.setValue(performed);
				}
			}
		}

		initialisePerformedProcedures();
		grdPerformedProceduresSelectionChanged();
	}

	private void openHandoverCounts() //WDEV-22635
	{
		form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().getRows().clear();
		HandoverCountsIntraOpVoCollection handovers = domain.listHandoverByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (HandoverCountsIntraOpVo handover : handovers)
		{
			grdHandoverRow row = form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().getRows().newRow();

			if (handover.getCirculatorIsNotNull())
			{
				row.setColCirculator(handover.getCirculator().getMos().toString());
				row.setTooltipForColCirculator(handover.getCirculator().getMos().toString());
			}
			if (handover.getScrubPractitionerIsNotNull())
			{
				row.setColScrubPractitioner(handover.getScrubPractitioner().getMos().toString());
				row.setTooltipForColScrubPractitioner(handover.getScrubPractitioner().getMos().toString());
			}
			if (handover.getCountStatusIsNotNull())
			{
				row.setColCountStatus(handover.getCountStatus().getText());
				row.setTooltipForColCountStatus(handover.getCountStatus().getText());
			}
			if (handover.getCountTypeIsNotNull())
			{
				row.setColCountType(handover.getCountType().getText());
				row.setTooltipForColCountType(handover.getCountType().getText());
			}
			if (handover.getProcedureIsNotNull())
			{
				row.setColProcedure(handover.getProcedure().getTheatresProcedureDisplayText());
				row.setTooltipForColProcedure(handover.getProcedure().getTheatresProcedureDisplayText());
			}

			if (handover.getIncorrectCountStatusIsNotNull())
			{
				row.setColIncorrectCountStatus(handover.getIncorrectCountStatus().getText());
				row.setTooltipForColIncorrectCountStatus(handover.getIncorrectCountStatus().getText());
			}
			
			row.setValue(handover);
		}
	}

	private void openFinalCounts()
	{
		form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().getRows().clear();
		form.lyrIntra().tabHandoverAndFinalCounts().grdIncorrect().getRows().clear(); //WDEV-22566
		FinalCountsIntraOpVoCollection finals = domain.listFinalCountByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (FinalCountsIntraOpVo finalCount : finals)
		{
			grdFinalRow row = form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().getRows().newRow();

			if (finalCount.getInstrumentsCorrectIsNotNull())
			{
				String instrumentsCorrectText = finalCount.getInstrumentsCorrect().getText();
				row.setColInstruments(instrumentsCorrectText);
				row.setTooltipForColInstruments(instrumentsCorrectText);
			}
			String theatresProcedureDisplayText = "";
			if (finalCount.getProcedureIsNotNull())
			{
				theatresProcedureDisplayText = finalCount.getProcedure().getTheatresProcedureDisplayText();
				row.setColProcedure(theatresProcedureDisplayText);
				row.setTooltipForColProcedure(theatresProcedureDisplayText);
			}
			if (finalCount.getSwabsAccountableItemscorrectIsNotNull())
			{
				String swabsAccountableText = finalCount.getSwabsAccountableItemscorrect().getText();
				row.setColSwabsAccountable(swabsAccountableText);
				row.setTooltipForColSwabsAccountable(swabsAccountableText);
			}
			if (finalCount.getSharpsOtherCorrectAndRemovedFromSetIsNotNull())
			{
				String sharpsText = finalCount.getSharpsOtherCorrectAndRemovedFromSet().getText();
				row.setColSharps(sharpsText);
				row.setTooltipForColSharps(sharpsText);
			}
			row.setValue(finalCount);

			// using verified by (a mandatory field for incorrect count records)
			// to see if we have a incorrect count record
			if (finalCount.getVerifiedByIsNotNull())
			{
				grdIncorrectRow incorrectRow = form.lyrIntra().tabHandoverAndFinalCounts().grdIncorrect().getRows().newRow();

				incorrectRow.setColProcedure(theatresProcedureDisplayText);
				incorrectRow.setTooltipForColProcedure(theatresProcedureDisplayText);
								
				if (finalCount.getMissingItemsIsNotNull())
				{
					String missingItems = "";
					for (int i = 0; i < finalCount.getMissingItems().size(); i++)
					{
						missingItems += finalCount.getMissingItems().get(i).getText();
					}
					incorrectRow.setColMissingItems(missingItems);
				}
				if (finalCount.getActionsTakenIsNotNull())
				{
					String actionsTaken = "";
					for (int i = 0; i < finalCount.getActionsTaken().size(); i++)
					{
						actionsTaken += finalCount.getActionsTaken().get(i).getText();
					}
					incorrectRow.setColActionsTaken(actionsTaken);
				}
				incorrectRow.setColVerifiedBy(finalCount.getVerifiedBy().getMos().toString());
			}
		}
	}

	private void openTourniquet()
	{
		form.lyrIntra().tabTourniquet().grdTourniquet().getRows().clear();
		TourniquetIntraOpVoCollection tourniquets = domain.listTourniquetByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (tourniquets != null)
		{
			for (TourniquetIntraOpVo tourniquet : tourniquets)
			{
				grdTourniquetRow row = form.lyrIntra().tabTourniquet().grdTourniquet().getRows().newRow();

				if (tourniquet.getSiteIsNotNull())
					row.setColSite(tourniquet.getSite().getText());
				if (tourniquet.getInflatedIsNotNull())
					row.setColInflated(tourniquet.getInflated().toString());
				if (tourniquet.getDeflatedIsNotNull())
					row.setColDeflated(tourniquet.getDeflated().toString());

				row.setValue(tourniquet);
			}
		}

		grdTourniquetSelectionChanged();
	}

	private void grdTourniquetSelectionChanged()
	{
		populateTourniquetInstanceControls(form.lyrIntra().tabTourniquet().grdTourniquet().getValue());
		updateTourniquetTabControlState();
	}

	private void clearTourniquetInstanceControls()
	{
		form.lyrIntra().tabTourniquet().dtimTourniquetDeflated().setValue(null);
		form.lyrIntra().tabTourniquet().dtimTournuetInflated().setValue(null);
		form.lyrIntra().tabTourniquet().cmbTourniquetSite().setValue(null);
	}

	private void populateTourniquetInstanceControls(ims.clinical.vo.TourniquetIntraOpVo tourniquet)
	{
		clearTourniquetInstanceControls();
		if (tourniquet == null)
			return;

		form.lyrIntra().tabTourniquet().dtimTourniquetDeflated().setValue(tourniquet.getDeflatedIsNotNull() ? tourniquet.getDeflated() : null);
		form.lyrIntra().tabTourniquet().dtimTournuetInflated().setValue(tourniquet.getInflatedIsNotNull() ? tourniquet.getInflated() : null);
		form.lyrIntra().tabTourniquet().cmbTourniquetSite().setValue(tourniquet.getSiteIsNotNull() ? tourniquet.getSite() : null);
	}

	private ims.clinical.vo.TourniquetIntraOpVo populateTourniquetInstanceData(ims.clinical.vo.TourniquetIntraOpVo tourniquet)
	{
		if (tourniquet == null)
			tourniquet = new ims.clinical.vo.TourniquetIntraOpVo();

		tourniquet.setDeflated(form.lyrIntra().tabTourniquet().dtimTourniquetDeflated().getValue());
		tourniquet.setInflated(form.lyrIntra().tabTourniquet().dtimTournuetInflated().getValue());
		tourniquet.setSite(form.lyrIntra().tabTourniquet().cmbTourniquetSite().getValue());
		tourniquet.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		return tourniquet;
	}

	private void openSkinClosureIntraOp() //WDEV-21829
	{
		form.lyrIntra().tabSpecimen().grdSkinClosures().getRows().clear();
		SkinClosureIntraOpVoCollection skinClosures = domain.listSkinClosuresAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (SkinClosureIntraOpVo skinClosure : skinClosures)
		{
			grdSkinClosuresRow row = form.lyrIntra().tabSpecimen().grdSkinClosures().getRows().newRow();

			String display = buildSkinClosureDisplayText(skinClosure);
			row.setColSkinClosureTypes(display);
			row.setTooltipForColSkinClosureTypes(display);

			if (skinClosure.getPatientProcedureIsNotNull())
			{
				String theatresProcedureDisplayText = skinClosure.getPatientProcedure().getTheatresProcedureDisplayText();
				row.setColProcedure(theatresProcedureDisplayText);
				row.setTooltipForColProcedure(theatresProcedureDisplayText);
			}

			if (skinClosure.getProcedureWoundClassIsNotNull())
			{
				row.setColProcedureWoundClass(skinClosure.getProcedureWoundClass().getText());
				row.setTooltipForColProcedureWoundClass(skinClosure.getProcedureWoundClass().getText());
			}

			row.setValue(skinClosure);
		}
	}

	private String buildSkinClosureDisplayText(SkinClosureIntraOpVo skinClosure)
	{
		String display = "";
		if (skinClosure.getSkinClosureTypeIsNotNull() && skinClosure.getSkinClosureType().size() > 0)
		{
			int i = 0;
			for (SkinClosureType val : skinClosure.getSkinClosureType().toArray())
			{
				if (i > 0)
					display += ",";

				display += val.getText();
				i++;
			}
		}
		else if (skinClosure.getDetailsIsNotNull())
		{
			display = skinClosure.getDetails();
		}
		return display;
	}

	private void openCatheter()
	{
		CatheterDrainsTubeIntraOpVoCollection voCollCatheter = domain.listCatheter(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.lyrIntra().tabIrrigation().grdCatheters().getRows().clear();
		if (voCollCatheter == null)
			return;

		for (CatheterDrainsTubeIntraOpVo item : voCollCatheter)
		{
			grdCathetersRow row = form.lyrIntra().tabIrrigation().grdCatheters().getRows().newRow();

			row.setColBodySize(item.getBodySite());
			row.setColCollectionDevice(item.getCollectionDevice());
			row.setColLotNumber(item.getLotNumber());
			row.setColLubricant(item.getLubricant());
			row.setColSize(item.getSize());
			row.setColVolumeInBaloon(item.getVolumeInBalloon());
			if (item.getTypeIsNotNull())
				row.setColType(item.getType().getText());

			row.setValue(item);
		}

		clearCatheterInstanceControls();
	}

	private void openIrrigation()
	{
		IrrigantIntraOpVo irrigant = domain.getIrrigant(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.getLocalContext().setIrrigant(irrigant);
		populateIrrigantScreenFromData();
		updateIrrigationTabControlState();
	}

	private void openSkinPreparation()
	{
		SkinPreparationIntraOpVoCollection voCollSkinPreparation = domain.listSkinPreparation(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.lyrIntra().tabPreparation().grdSkinPreparation().getRows().clear();
		if (voCollSkinPreparation == null)
			return;

		for (SkinPreparationIntraOpVo item : voCollSkinPreparation)
		{
			grdSkinPreparationRow row = form.lyrIntra().tabPreparation().grdSkinPreparation().getRows().newRow();

			if (item.getSurgicalSiteSkinPrepSolutionIsNotNull())
				row.setColPrepSolution(item.getSurgicalSiteSkinPrepSolution().getText());
			row.setColPrepSite(item.getPrepSite());
			if (item.getPrepPerformedByIsNotNull())
				row.setColPrepPerformedBy(item.getPrepPerformedBy().toString());

			row.setValue(item);
		}

		clearSkinPrepInstanceControls();
		grdSkinPreparationValueChanged();
	}

	private void openPreparation()
	{
		PatientPreperationIntraOpVo patientPreparation = domain.getPatientPreparation(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.getLocalContext().setPatientPreparation(patientPreparation);
		populatePreparationScreenFromData();
		updatePreparationTabWarmedControlsState();
	}

	private void openPlannedProcedures()
	{
		form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().getRows().clear();
		IntraOpPlannedProcedureVoCollection procedures = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (procedures != null)
		{
			for (IntraOpPlannedProcedureVo plannedProcedure : procedures)
			{
				if (plannedProcedure.getPlannedProcedureIsNotNull())
				{
					grdPlannedProceduresRow row = form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().getRows().newRow();
					row.setcolProcedure(plannedProcedure.getPlannedProcedure().getProcedure().getProcedureName());
					if (plannedProcedure.getPlannedProcedure().getProcLateralityIsNotNull())
						row.setcolLaterality(plannedProcedure.getPlannedProcedure().getProcLaterality().getIItemText());

					row.setcolProcedureComment(plannedProcedure.getPlannedProcedure().getNotes());
					if (plannedProcedure.getPlannedProcedure().getIsPrimaryIsNotNull())
						row.setcolPrimary(plannedProcedure.getPlannedProcedure().getIsPrimary());

					row.setValue(plannedProcedure);
				}
			}
		}

		grdPlannedProceduresSelectionChanged();
	}

	@Override
	protected void onGrdPlannedProceduresSelectionChanged() throws PresentationLogicException
	{
		grdPlannedProceduresSelectionChanged();
	}

	private void grdPlannedProceduresSelectionChanged()
	{
		populatePlannedProcedureInstanceControls(form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().getValue());
		qmbPlannedProcedureValueChanged();
	}

	private void populatePlannedProcedureInstanceControls(IntraOpPlannedProcedureVo value)
	{
		clearPlannedProcedureInstanceControls();
		if (value == null)
			return;

		if (value.getPlannedProcedureIsNotNull())
		{
			form.lyrIntra().tabPlannedProcedures().cmbLaterality().setValue(value.getPlannedProcedure().getProcLaterality());
			form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().newRow(value.getPlannedProcedure().getProcedure(), value.getPlannedProcedure().getProcedure().getProcedureName());
			form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().setValue(value.getPlannedProcedure().getProcedure());
			form.lyrIntra().tabPlannedProcedures().txtProcedureComment().setValue(value.getPlannedProcedure().getNotes());
		}
	}

	private void clearPlannedProcedureInstanceControls()
	{
		form.lyrIntra().tabPlannedProcedures().cmbLaterality().setValue(null);
		form.lyrIntra().tabPlannedProcedures().cmbLaterality().setVisible(false);
		form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().clear();
		form.lyrIntra().tabPlannedProcedures().txtProcedureComment().setValue(null);
		
	}

	@Override
	protected void onQmbPlannedProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().clear();

		ProcedureLiteVoCollection procedures;
		try
		{
			procedures = domain.listProcedures(value);
			if (procedures == null || procedures.size() == 0)
			{
				engine.showErrors(new String[] { "No matching records found" });
				return;
			}
			for (ProcedureLiteVo procedure : procedures)
			{
				form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().newRow(procedure, procedure.getProcedureName());
			}

			if (procedures.size() == 1)
			{
				form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().setValue(procedures.get(0));
			}
			else if (procedures.size() > 1)
				form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().showOpened();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
	}

	@Override
	protected void onGrdSkinPreparationSelectionChanged() throws PresentationLogicException
	{
		grdSkinPreparationValueChanged();
	}

	private void grdSkinPreparationValueChanged()
	{
		updateSkinPreparationInstanceControlState();
		populateSkinPrepInstanceControls(form.lyrIntra().tabPreparation().grdSkinPreparation().getValue());
	}

	private void updateSkinPreparationInstanceControlState() //WDEV-21807
	{
		boolean enable = form.getLocalContext().getSkinPrepMode().equals(FormMode.EDIT);

		form.lyrIntra().tabPreparation().btnEditSkinPrep().setVisible(form.getLocalContext().getSkinPrepMode().equals(FormMode.VIEW) && form.lyrIntra().tabPreparation().grdSkinPreparation().getValue() != null);
		form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().setEnabled(enable);
		form.lyrIntra().tabPreparation().txtPrepSite().setEnabled(enable);
		form.lyrIntra().tabPreparation().qmbPrepPerformedBy().setEnabled(enable); //WDEV-22744
		form.lyrIntra().tabPreparation().btnSaveSkinPrep().setEnabled(enable);
		form.lyrIntra().tabPreparation().btnCancelSkinPrep().setEnabled(enable);
		form.lyrIntra().tabPreparation().btnSaveSkinPrep().setVisible(enable);
		form.lyrIntra().tabPreparation().btnCancelSkinPrep().setVisible(enable);
		form.lyrIntra().tabPreparation().btnAddSkinPreparation().setVisible(form.getLocalContext().getSkinPrepMode().equals(FormMode.VIEW) && form.getMode().equals(FormMode.EDIT));

		form.lyrIntra().tabPreparation().grdSkinPreparation().setEnabled(!enable && form.getMode().equals(FormMode.EDIT));
		form.lyrIntra().tabPreparation().qmbPrepPerformedBy().setRequired(form.lyrIntra().tabPreparation().qmbPrepPerformedBy().isEnabled()); //WDEV-21807 //WDEV-22744
		
		form.lyrIntra().tabPreparation().btnRemoveSkinPrep().setVisible(form.getLocalContext().getSkinPrepMode().equals(FormMode.VIEW) && form.lyrIntra().tabPreparation().grdSkinPreparation().getValue() != null); //WDEV-22721
	}

	@Override
	protected void onBtnAddSkinPreparationClick() throws PresentationLogicException
	{
		form.lyrIntra().tabPreparation().grdSkinPreparation().setValue(null);
		form.getLocalContext().setSkinPrepMode(FormMode.EDIT);
		clearSkinPrepInstanceControls();
		updateSkinPreparationInstanceControlState();
	}

	@Override
	protected void onBtnEditSkinPrepClick() throws PresentationLogicException
	{
		form.getLocalContext().setSkinPrepMode(FormMode.EDIT);
		updateSkinPreparationInstanceControlState();
	}

	@Override
	protected void onBtnSaveSkinPrepClick() throws PresentationLogicException
	{
		SkinPreparationIntraOpVo skinPrep = populateSkinPrepInstanceData(form.lyrIntra().tabPreparation().grdSkinPreparation().getValue());
		String[] errors = skinPrep.validate();

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		//WDEV-22721  - stale on remove and edit from 2 sessions
		if (skinPrep.getID_SkinPrepIntraOpIsNotNull() && domain.getSkinPrep(skinPrep)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSkinPrepMode(FormMode.VIEW);
			openSkinPreparation();
			updateSkinPreparationInstanceControlState();
			return;
		}
		
		try
		{
			domain.saveSkinPreparation(skinPrep);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		form.getLocalContext().setSkinPrepMode(FormMode.VIEW);
		openSkinPreparation();
		updateSkinPreparationInstanceControlState();
	}

	@Override
	protected void onBtnCancelSkinPrepClick() throws PresentationLogicException
	{
		form.getLocalContext().setSkinPrepMode(FormMode.VIEW);
		openSkinPreparation();
		updateSkinPreparationInstanceControlState();
	}

	@Override
	protected void onGrdPlannedProceduresGridCheckBoxClicked(int column, grdPlannedProceduresRow row, boolean isChecked) throws PresentationLogicException
	{
		Map<PatientProcedureRefVo, Boolean> procedures = new HashMap<PatientProcedureRefVo, Boolean>();
		if (isChecked)
		{
			for (int i = 0; i < form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().getRows().size(); i++)
			{
				grdPlannedProceduresRow grdRow = form.lyrIntra().tabPlannedProcedures().grdPlannedProcedures().getRows().get(i);
				procedures.put(grdRow.getValue().getPlannedProcedure(), Boolean.FALSE);
			}

			procedures.put(row.getValue().getPlannedProcedure(), Boolean.TRUE);

			try
			{
				domain.setPrimaryPlannedProcedure(procedures);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			openPlannedProcedures();
		}
		else
		{
			// override deselecting a primary
			row.setcolPrimary(true);
		}
	}

	private void clearPreparationInstanceControls()
	{
		form.lyrIntra().tabPreparation().txtOtherDetails().setValue(null);
		//WDEV-22032
		form.lyrIntra().tabPreparation().grdPositioningDevices().getRows().clear();
		form.lyrIntra().tabPreparation().cmbRightArmPosition().setValue(null);
		form.lyrIntra().tabPreparation().cmbLeftArmPosition().setValue(null);
		form.lyrIntra().tabPreparation().cmbLeftLegPosition().setValue(null);
		form.lyrIntra().tabPreparation().cmbRightLegPosition().setValue(null);
		form.lyrIntra().tabPreparation().cmbBodyPosition().setValue(null);
		form.lyrIntra().tabPreparation().cmbPatTransFromOperating().setValue(null);
		form.lyrIntra().tabPreparation().cmbPatTransToOperating().setValue(null);
		form.lyrIntra().tabPreparation().chklistPatPreparation().setValues(null);
		form.lyrIntra().tabPreparation().FluidWarmer().setValue(FluidWarmerEnumeration.None);
		form.lyrIntra().tabPreparation().SkinIntegrity().setValue(SkinIntegrityEnumeration.None);
		form.lyrIntra().tabPreparation().PatientWarmed().setValue(PatientWarmedEnumeration.None);
		form.lyrIntra().tabPreparation().WarmingBlanket().setValue(WarmingBlanketEnumeration.None);
	}

	private void populatePreparationScreenFromData()
	{
		clearPreparationInstanceControls();

		PatientPreperationIntraOpVo patientPreparation = form.getLocalContext().getPatientPreparation();
		if (patientPreparation == null)
			return;

		form.lyrIntra().tabPreparation().txtOtherDetails().setValue(patientPreparation.getOtherDetails());
		//WDEV-22032
		if(patientPreparation.getPositioningDevices().size() > 0)
		{
			for(int i=0; i<patientPreparation.getPositioningDevices().size(); i++)
			{
				grdPositioningDevicesRow row = form.lyrIntra().tabPreparation().grdPositioningDevices().getRows().newRow();
				row.setColAssistingSurgeon(patientPreparation.getPositioningDevices().get(i));
			}
		}
		
		form.lyrIntra().tabPreparation().cmbRightArmPosition().setValue(patientPreparation.getRightArmPosition());
		form.lyrIntra().tabPreparation().cmbLeftArmPosition().setValue(patientPreparation.getLeftArmPosition());
		form.lyrIntra().tabPreparation().cmbLeftLegPosition().setValue(patientPreparation.getLeftLegPosition());
		form.lyrIntra().tabPreparation().cmbRightLegPosition().setValue(patientPreparation.getRightLegPosition());
		form.lyrIntra().tabPreparation().cmbBodyPosition().setValue(patientPreparation.getBodyPosition());
		form.lyrIntra().tabPreparation().cmbPatTransFromOperating().setValue(patientPreparation.getPatientTransferFromOperatingTableVia1());
		form.lyrIntra().tabPreparation().cmbPatTransToOperating().setValue(patientPreparation.getPatientTransferToOperatingTableVia());
		form.lyrIntra().tabPreparation().chklistPatPreparation().setValues(patientPreparation.getPatientPreparation());

		form.lyrIntra().tabPreparation().FluidWarmer().setValue(patientPreparation.getFluidWarmerUsedIsNotNull() ? (patientPreparation.getFluidWarmerUsed().equals(YesNo.YES) ? FluidWarmerEnumeration.rdoFluidWarmerYes : FluidWarmerEnumeration.rdoFluidWarmerNo) : null);
		form.lyrIntra().tabPreparation().SkinIntegrity().setValue(patientPreparation.getSkinIntegrityMaintainedIsNotNull() ? (patientPreparation.getSkinIntegrityMaintained().equals(YesNo.YES) ? SkinIntegrityEnumeration.rdoSkinIntegrityYes : SkinIntegrityEnumeration.rdoSkinIntegrityNo) : null);
		form.lyrIntra().tabPreparation().PatientWarmed().setValue(patientPreparation.getWasPatientWarmedIsNotNull() ? (patientPreparation.getWasPatientWarmed().equals(YesNo.YES) ? PatientWarmedEnumeration.rdoPatWarmedYes : PatientWarmedEnumeration.rdoPatWarmedNo) : null);
		form.lyrIntra().tabPreparation().WarmingBlanket().setValue(patientPreparation.getWarmingBlanketUsedIsNotNull() ? (patientPreparation.getWarmingBlanketUsed().equals(YesNo.YES) ? WarmingBlanketEnumeration.rdoWarmingBlanketYes : WarmingBlanketEnumeration.rdoWarmingBlanketNo) : null);

	}

	private ims.clinical.vo.PatientPreperationIntraOpVo populatePreparationDataFromScreen(ims.clinical.vo.PatientPreperationIntraOpVo patientPreparation)
	{
		if (patientPreparation == null)
		{
			patientPreparation = new PatientPreperationIntraOpVo();
		}

		patientPreparation.setOtherDetails(form.lyrIntra().tabPreparation().txtOtherDetails().getValue());
		
		//WDEV-22032
		PositioningDevicesIntraOpCollection collDevices = new PositioningDevicesIntraOpCollection();
		for(int i=0; i< form.lyrIntra().tabPreparation().grdPositioningDevices().getRows().size(); i++)
		{
			collDevices.add(form.lyrIntra().tabPreparation().grdPositioningDevices().getRows().get(i).getColAssistingSurgeon());
		}
		patientPreparation.setPositioningDevices(collDevices);
		
		patientPreparation.setRightArmPosition(form.lyrIntra().tabPreparation().cmbRightArmPosition().getValue());
		patientPreparation.setLeftArmPosition(form.lyrIntra().tabPreparation().cmbLeftArmPosition().getValue());
		patientPreparation.setLeftLegPosition(form.lyrIntra().tabPreparation().cmbLeftLegPosition().getValue());
		patientPreparation.setRightLegPosition(form.lyrIntra().tabPreparation().cmbRightLegPosition().getValue());
		patientPreparation.setBodyPosition(form.lyrIntra().tabPreparation().cmbBodyPosition().getValue());
		patientPreparation.setPatientTransferFromOperatingTableVia1(form.lyrIntra().tabPreparation().cmbPatTransFromOperating().getValue());
		patientPreparation.setPatientTransferToOperatingTableVia(form.lyrIntra().tabPreparation().cmbPatTransToOperating().getValue());
		patientPreparation.setPatientPreparation(form.lyrIntra().tabPreparation().chklistPatPreparation().getValues());
		//WDEV-21807
		patientPreparation.setFluidWarmerUsed(FluidWarmerEnumeration.rdoFluidWarmerYes.equals(form.lyrIntra().tabPreparation().FluidWarmer().getValue()) ? YesNo.YES : ( FluidWarmerEnumeration.rdoFluidWarmerNo.equals(form.lyrIntra().tabPreparation().FluidWarmer().getValue()) ? YesNo.NO : null));
		patientPreparation.setSkinIntegrityMaintained(SkinIntegrityEnumeration.rdoSkinIntegrityYes.equals(form.lyrIntra().tabPreparation().SkinIntegrity().getValue()) ? YesNo.YES : (SkinIntegrityEnumeration.rdoSkinIntegrityNo.equals(form.lyrIntra().tabPreparation().SkinIntegrity().getValue()) ? YesNo.NO : null));
		patientPreparation.setWasPatientWarmed(PatientWarmedEnumeration.rdoPatWarmedYes.equals(form.lyrIntra().tabPreparation().PatientWarmed().getValue()) ? YesNo.YES : (PatientWarmedEnumeration.rdoPatWarmedNo.equals(form.lyrIntra().tabPreparation().PatientWarmed().getValue()) ? YesNo.NO : null));
		patientPreparation.setWarmingBlanketUsed(WarmingBlanketEnumeration.rdoWarmingBlanketYes.equals(form.lyrIntra().tabPreparation().WarmingBlanket().getValue()) ? YesNo.YES : ( WarmingBlanketEnumeration.rdoWarmingBlanketNo.equals(form.lyrIntra().tabPreparation().WarmingBlanket().getValue()) ? YesNo.NO : null));

		patientPreparation.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		return patientPreparation;
	}

	private void clearSkinPrepInstanceControls()
	{
		form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().setValue(null);
		form.lyrIntra().tabPreparation().txtPrepSite().setValue(null);
		form.lyrIntra().tabPreparation().qmbPrepPerformedBy().clear(); //WDEV-22744
	}

	private void populateSkinPrepInstanceControls(ims.clinical.vo.SkinPreparationIntraOpVo skinPrep)
	{
		clearSkinPrepInstanceControls();
		if (skinPrep == null)
			return;

		form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().setValue(skinPrep.getSurgicalSiteSkinPrepSolutionIsNotNull() ? skinPrep.getSurgicalSiteSkinPrepSolution() : null);
		form.lyrIntra().tabPreparation().txtPrepSite().setValue(skinPrep.getPrepSiteIsNotNull() ? skinPrep.getPrepSite() : null);
		
		//WDEV-22744
		if (skinPrep.getPrepPerformedByIsNotNull())
		{
			form.lyrIntra().tabPreparation().qmbPrepPerformedBy().newRow(skinPrep.getPrepPerformedBy(), skinPrep.getPrepPerformedBy().toString());
			form.lyrIntra().tabPreparation().qmbPrepPerformedBy().setValue(skinPrep.getPrepPerformedBy()); 
		}
	}

	private ims.clinical.vo.SkinPreparationIntraOpVo populateSkinPrepInstanceData(ims.clinical.vo.SkinPreparationIntraOpVo skinPrep)
	{
		if (skinPrep == null)
			skinPrep = new ims.clinical.vo.SkinPreparationIntraOpVo();

		skinPrep.setSurgicalSiteSkinPrepSolution(form.lyrIntra().tabPreparation().cmbSurgicalPrepSiteSolution().getValue());
		skinPrep.setPrepSite(form.lyrIntra().tabPreparation().txtPrepSite().getValue());
		skinPrep.setPrepPerformedBy((HcpLiteVo) form.lyrIntra().tabPreparation().qmbPrepPerformedBy().getValue()); //WDEV-22744

		skinPrep.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		return skinPrep;
	}

	@Override
	protected void onRadioButtonPatientWarmedValueChanged() throws PresentationLogicException
	{
		updatePreparationTabWarmedControlsState();
		// clear values for hidden controls
		if (form.lyrIntra().tabPreparation().PatientWarmed().getValue().equals(PatientWarmedEnumeration.rdoPatWarmedNo))
		{
			form.lyrIntra().tabPreparation().FluidWarmer().setValue(FluidWarmerEnumeration.None);
			form.lyrIntra().tabPreparation().WarmingBlanket().setValue(WarmingBlanketEnumeration.None);
		}
	}

	@Override
	protected void onBtnAddDiathermyClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.lyrIntra().tabDiathermy().grdDiathermy().setValue(null);
		form.getLocalContext().setSelectedDiathermyRecord(null); //WDEV-21825
		form.getLocalContext().setDiathermyMode(FormMode.EDIT);
		clearDiathermyInstanceControls();
		updateDiathermyInstanceControlState();
		radioButtonDiathermyChanged();
	}

	@Override
	protected void onBtnEditDiathermyClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setDiathermyMode(FormMode.EDIT);
		updateDiathermyInstanceControlState();
		radioButtonDiathermyChanged();
	}

	@Override
	protected void onBtnSaveDiathermyClick() throws PresentationLogicException
	{
		
				
		DiathermyDetailIntraOpVo diathermy = populateDiathermyInstanceData(form.lyrIntra().tabDiathermy().grdDiathermy().getValue());
		String[] errors = diathermy.validate(validateDiathermyUI());

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-21825
		DiathermyDetailIntraOpVoCollection collDiathermy = domain.listDiathermy(form.getGlobalContext().Clinical.getTheatreAppointmentRef());;
		
		if (diathermy.getID_DiathermyDetailIntraOp()==null && collDiathermy!=null && collDiathermy.size()>=2)
		{
			engine.showMessage( "You are not allowed to add more than two Diathermy records.", "" , MessageButtons.OK	,MessageIcon.INFORMATION);
			form.getLocalContext().setDiathermyMode(FormMode.VIEW);
			form.setMode(FormMode.VIEW);
			openDiathermy();
			updateDiathermyInstanceControlState();
			return;
		}
				
		try
		{
			form.getLocalContext().setSelectedDiathermyRecord(domain.saveDiathermy(diathermy)); //WDEV-21825
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		form.getLocalContext().setDiathermyMode(FormMode.VIEW);
		form.setMode(FormMode.VIEW);
		openDiathermy();
		updateDiathermyInstanceControlState();
	}

	private String[] validateDiathermyUI() //WDEV-21825
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		DiathermyModeEnumeration mode = form.lyrIntra().tabDiathermy().DiathermyMode().getValue();
		if (mode != null)
		{
			if (mode.equals(DiathermyModeEnumeration.rdoDiaMonopolar))
			{
				if (form.lyrIntra().tabDiathermy().txtDiaCut().getValue() == null)
					uiErrors.add("Cut Setting is mandatory");
				if (form.lyrIntra().tabDiathermy().cmbDiaPadSite().getValue() == null)
					uiErrors.add("Pad Site is mandatory");
				if (form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().getValue() == null)
					uiErrors.add("Applied By is mandatory");
				if (form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().getValue() == null)
					uiErrors.add("Removed By is mandatory");
			}
		}

		return uiErrors.toArray(new String[0]);
	}

	private void openDiathermy()
	{
		DiathermyDetailIntraOpVoCollection voCollDiathermy = domain.listDiathermy(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.lyrIntra().tabDiathermy().grdDiathermy().getRows().clear();
		if (voCollDiathermy == null)
			return;

		for (DiathermyDetailIntraOpVo item : voCollDiathermy)
		{
			grdDiathermyRow row = form.lyrIntra().tabDiathermy().grdDiathermy().getRows().newRow();

			row.setColBlend(item.getBlendSetting());
			row.setColCoag(item.getCoagSetting());
			row.setColCut(item.getCutSetting());
			if (item.getDiathermyModeIsNotNull())
				row.setColMode(item.getDiathermyMode().getText());
			if (item.getPadSiteIsNotNull())
				row.setColPadSite(item.getPadSite().getText());
			if (item.getSerialNumberIsNotNull())
				row.setColSerialNumber(item.getSerialNumber().getText());

			row.setTooltip(item.constructToolTipForDiathermy());
			row.setValue(item);
		}

		//WDEV-21825
		form.lyrIntra().tabDiathermy().grdDiathermy().setValue(form.getLocalContext().getSelectedDiathermyRecord());
		populateDiathermyInstanceControls(form.lyrIntra().tabDiathermy().grdDiathermy().getValue());
	}

	@Override
	protected void onBtnCancelDiathermyClick() throws PresentationLogicException
	{
		form.getLocalContext().setDiathermyMode(FormMode.VIEW);
		form.setMode(FormMode.VIEW);
		openDiathermy();
		updateDiathermyInstanceControlState();
	}

	@Override
	protected void onGrdDiathermySelectionChanged() throws PresentationLogicException
	{
		updateDiathermyInstanceControlState();
		form.getLocalContext().setSelectedDiathermyRecord(form.lyrIntra().tabDiathermy().grdDiathermy().getValue()); //WDEV-21825
		populateDiathermyInstanceControls(form.lyrIntra().tabDiathermy().grdDiathermy().getValue());
	}

	protected void clearDiathermyInstanceControls()
	{
		form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().setValue(null);
		form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().setValue(null);
		form.lyrIntra().tabDiathermy().txtDiaBlendSetting().setValue(null);
		form.lyrIntra().tabDiathermy().txtDiaCoagSetting().setValue(null);
		form.lyrIntra().tabDiathermy().cmbDiaPadSite().setValue(null);
		form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setValue(null);
		form.lyrIntra().tabDiathermy().txtDiaCut().setValue(null);
		form.lyrIntra().tabDiathermy().DiathermyMode().setValue(DiathermyModeEnumeration.rdoDiaMonopolar);
	}

	protected void populateDiathermyInstanceControls(ims.clinical.vo.DiathermyDetailIntraOpVo diathermy)
	{
		clearDiathermyInstanceControls();
		if (diathermy == null)
			return;

		//WDEV-21825
		if (diathermy.getRemovedByIsNotNull())
		{
			form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().newRow(diathermy.getRemovedBy(), diathermy.getRemovedBy().toString());
			form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().setValue(diathermy.getRemovedBy());
		}
		
		if (diathermy.getAppliedByIsNotNull())
		{
			form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().newRow(diathermy.getAppliedBy() ,diathermy.getAppliedBy().toString());
			form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().setValue(diathermy.getAppliedBy());
		}
		
		form.lyrIntra().tabDiathermy().txtDiaBlendSetting().setValue(diathermy.getBlendSettingIsNotNull() ? diathermy.getBlendSetting() : null);
		form.lyrIntra().tabDiathermy().txtDiaCoagSetting().setValue(diathermy.getCoagSettingIsNotNull() ? diathermy.getCoagSetting() : null);
		form.lyrIntra().tabDiathermy().cmbDiaPadSite().setValue(diathermy.getPadSiteIsNotNull() ? diathermy.getPadSite() : null);
		form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setValue(diathermy.getSerialNumberIsNotNull() ? diathermy.getSerialNumber() : null);
		form.lyrIntra().tabDiathermy().txtDiaCut().setValue(diathermy.getCutSettingIsNotNull() ? diathermy.getCutSetting() : null);
		form.lyrIntra().tabDiathermy().DiathermyMode().setValue(diathermy.getDiathermyModeIsNotNull() ? (diathermy.getDiathermyMode().equals(DiathermyMode.MONOPOLAR) ? DiathermyModeEnumeration.rdoDiaMonopolar : DiathermyModeEnumeration.rdoDiaBipolar) : null);
	}

	protected ims.clinical.vo.DiathermyDetailIntraOpVo populateDiathermyInstanceData(ims.clinical.vo.DiathermyDetailIntraOpVo diathermy)
	{
		if (diathermy == null)
			diathermy = new ims.clinical.vo.DiathermyDetailIntraOpVo();

		diathermy.setRemovedBy(form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().getValue());
		diathermy.setAppliedBy(form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().getValue());
		diathermy.setBlendSetting(form.lyrIntra().tabDiathermy().txtDiaBlendSetting().getValue());
		diathermy.setCoagSetting(form.lyrIntra().tabDiathermy().txtDiaCoagSetting().getValue());
		diathermy.setPadSite(form.lyrIntra().tabDiathermy().cmbDiaPadSite().getValue());
		diathermy.setSerialNumber(form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().getValue());
		diathermy.setCutSetting(form.lyrIntra().tabDiathermy().txtDiaCut().getValue());
		diathermy.setDiathermyMode(form.lyrIntra().tabDiathermy().DiathermyMode().getValue().equals(DiathermyModeEnumeration.rdoDiaMonopolar) ? DiathermyMode.MONOPOLAR : DiathermyMode.BIPOLAR);
		diathermy.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		return diathermy;
	}

	protected void clearLaserDetailControls()
	{
		form.lyrIntra().tabDiathermy().chklistpatientSafetyMeasures().setValues(null);
		form.lyrIntra().tabDiathermy().intLaserNoOfBurns().setValue(null);
		form.lyrIntra().tabDiathermy().intLaserTotalDuration().setValue(null);
		form.lyrIntra().tabDiathermy().decLaserPower().setValue(null);
		form.lyrIntra().tabDiathermy().cmbLaser().setValue(null);
		form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().setValue(null);
		form.lyrIntra().tabDiathermy().cmbLaserDeviceName().setValue(null);
		form.lyrIntra().tabDiathermy().txtLaserFibreLot().setValue(null);
		form.lyrIntra().tabDiathermy().qmbLaserOperator().setValue(null);
	}

	protected void populateLaserScreenFromData()
	{
		clearLaserDetailControls();
		LaserDetailIntraOpVo laserDetail = form.getLocalContext().getLaserDetails();
		if (laserDetail == null)
			return;

		form.lyrIntra().tabDiathermy().chklistpatientSafetyMeasures().setValues(laserDetail.getPatientSafetyMeasuresIsNotNull() ? laserDetail.getPatientSafetyMeasures() : null);
		form.lyrIntra().tabDiathermy().intLaserNoOfBurns().setValue(laserDetail.getNumberOfBurnsIsNotNull() ? laserDetail.getNumberOfBurns() : null);
		form.lyrIntra().tabDiathermy().intLaserTotalDuration().setValue(laserDetail.getTotalDurationSecondsIsNotNull() ? laserDetail.getTotalDurationSeconds() : null);
		form.lyrIntra().tabDiathermy().decLaserPower().setValue(laserDetail.getPowerIsNotNull() ? laserDetail.getPower() : null);
		form.lyrIntra().tabDiathermy().cmbLaser().setValue(laserDetail.getLaserModeIsNotNull() ? laserDetail.getLaserMode() : null);
		form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().setValue(laserDetail.getDeviceSerialNumberIsNotNull() ? laserDetail.getDeviceSerialNumber() : null);
		form.lyrIntra().tabDiathermy().cmbLaserDeviceName().setValue(laserDetail.getDeviceNameIsNotNull() ? laserDetail.getDeviceName() : null);
		form.lyrIntra().tabDiathermy().txtLaserFibreLot().setValue(laserDetail.getLaserFibreLotNumberIsNotNull() ? laserDetail.getLaserFibreLotNumber() : null);
		if (laserDetail.getLaserOperatorIsNotNull())
		{
			form.lyrIntra().tabDiathermy().qmbLaserOperator().newRow(laserDetail.getLaserOperator(), laserDetail.getLaserOperator().toString());
			form.lyrIntra().tabDiathermy().qmbLaserOperator().setValue(laserDetail.getLaserOperatorIsNotNull() ? laserDetail.getLaserOperator() : null);
		}
	}

	protected ims.clinical.vo.LaserDetailIntraOpVo populateLaserDetailDataFromScreen(ims.clinical.vo.LaserDetailIntraOpVo laserDetail)
	{
		if (laserDetail == null)
			laserDetail = new ims.clinical.vo.LaserDetailIntraOpVo();

		laserDetail.setPatientSafetyMeasures(form.lyrIntra().tabDiathermy().chklistpatientSafetyMeasures().getValues());
		laserDetail.setNumberOfBurns(form.lyrIntra().tabDiathermy().intLaserNoOfBurns().getValue());
		laserDetail.setTotalDurationSeconds(form.lyrIntra().tabDiathermy().intLaserTotalDuration().getValue());
		laserDetail.setPower(form.lyrIntra().tabDiathermy().decLaserPower().getValue());
		laserDetail.setLaserMode(form.lyrIntra().tabDiathermy().cmbLaser().getValue());
		laserDetail.setDeviceSerialNumber(form.lyrIntra().tabDiathermy().cmbLaserDeviceSerialNumber().getValue());
		laserDetail.setDeviceName(form.lyrIntra().tabDiathermy().cmbLaserDeviceName().getValue());
		laserDetail.setLaserFibreLotNumber(form.lyrIntra().tabDiathermy().txtLaserFibreLot().getValue());
		laserDetail.setLaserOperator(form.lyrIntra().tabDiathermy().qmbLaserOperator().getValue());
		laserDetail.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		return laserDetail;
	}

	@Override
	protected void onBtnEditLaserDetailsClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setLaserMode(FormMode.EDIT);
		updateLaserControlState();
	}

	@Override
	protected void onBtnSaveLaserDetailsClick() throws PresentationLogicException
	{
		LaserDetailIntraOpVo laserDetail = populateLaserDetailDataFromScreen(form.getLocalContext().getLaserDetails());
		String[] errors = laserDetail.validate(validateLaserDetailsUI()); //WDEV-21825

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		//WDEV-21825
		LaserDetailIntraOpVo laserDetailFromDB = domain.getLaserDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (laserDetail.getID_LaserDetailIntraOp()==null && laserDetailFromDB!=null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setLaserDetails(laserDetailFromDB);
			populateLaserScreenFromData();
			form.getLocalContext().setLaserMode(FormMode.VIEW);
			form.setMode(FormMode.VIEW);
			return;
		}
		
		try
		{
			domain.saveLaserDetails(laserDetail);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setLaserDetails(domain.getLaserDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
			populateLaserScreenFromData();
			form.getLocalContext().setLaserMode(FormMode.VIEW);
			form.setMode(FormMode.VIEW);
			return;
		}

		form.getLocalContext().setLaserMode(FormMode.VIEW);
		form.setMode(FormMode.VIEW);
		openLaserDetails();
	}

	private String[] validateLaserDetailsUI() //WDEV-21825
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (form.lyrIntra().tabDiathermy().intLaserTotalDuration().getValue()!=null && form.lyrIntra().tabDiathermy().intLaserTotalDuration().getValue() >400)
			uiErrors.add("Total Duration should be less or equal to 400 ");
		
		return uiErrors.toArray(new String[0]);
	}
	
	private void openLaserDetails()
	{
		LaserDetailIntraOpVo laserDetail = domain.getLaserDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.getLocalContext().setLaserDetails(laserDetail);
		populateLaserScreenFromData();
		updateLaserControlState();
	}

	@Override
	protected void onBtnCancelLaserDetailsClick() throws PresentationLogicException
	{
		form.getLocalContext().setLaserMode(FormMode.VIEW);
		form.setMode(FormMode.VIEW);
		updateLaserControlState();
		openLaserDetails();
	}

	@Override
	protected void onQmbLaserOperatorTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabDiathermy().qmbLaserOperator().clear();

		HcpLiteVoCollection voCollHcp;
		try
		{
			voCollHcp = domain.listCaseStaffHcps(value, form.getLocalContext().getCaseDetails());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.lyrIntra().tabDiathermy().qmbLaserOperator().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().toString());
		}

		if (voCollHcp.size() == 0)
			engine.showMessage("No matching records found");
		else if (voCollHcp.size() == 1)
			form.lyrIntra().tabDiathermy().qmbLaserOperator().setValue(voCollHcp.get(0));
		else
			form.lyrIntra().tabDiathermy().qmbLaserOperator().showOpened();
	}

	@Override
	protected void onQmbDiaRemovedByTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().clear();

		HcpLiteVoCollection voCollHcp;
		try
		{
			voCollHcp = domain.listCaseStaffHcps(value, form.getLocalContext().getCaseDetails());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().toString());
		}

		if (voCollHcp.size() == 0)
			engine.showMessage("No matching records found");
		else if (voCollHcp.size() == 1)
			form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().setValue(voCollHcp.get(0));
		else
			form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().showOpened();
	}

	@Override
	protected void onQmbDiaAppliedByTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().clear();

		HcpLiteVoCollection voCollHcp;
		try
		{
			voCollHcp = domain.listCaseStaffHcps(value, form.getLocalContext().getCaseDetails());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().toString());
		}

		if (voCollHcp.size() == 0)
			engine.showMessage("No matching records found");
		else if (voCollHcp.size() == 1)
			form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().setValue(voCollHcp.get(0));
		else
			form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().showOpened();
	}

	@Override
	protected void onBtnSaveIrrigantClick() throws PresentationLogicException
	{
		IrrigantIntraOpVo irrigant = populateIrrigantDataFromScreen(form.getLocalContext().getIrrigant());
		String[] errors = irrigant.validate();

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveIrrigant(irrigant);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setIrrigant(domain.getIrrigant(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
			populateIrrigantScreenFromData();
			return;
		}

		form.setMode(FormMode.VIEW);
		openIrrigation();
		openIrrigationDetail();
		openCatheter(); 
		updateIrrigantDetailInstanceControlState();
		updateCatheterInstanceControlState();
		updateIrrigationTabControlState();
	}

	@Override
	protected void onBtnAddIrrigantDetailClick() throws PresentationLogicException
	{
		form.lyrIntra().tabIrrigation().grdIrrigantDetail().setValue(null);
		form.getLocalContext().setIrrigantDetailMode(FormMode.EDIT);
		clearIrrigantDetailInstanceControls();
		form.lyrIntra().tabIrrigation().IrrigantDetailWarmed().setValue(IrrigantDetailWarmedEnumeration.rdoIrrigantDetailWarmedNo);
		updateIrrigantDetailInstanceControlState();
	}

	@Override
	protected void onBtnEditIrrigantDetailClick() throws PresentationLogicException
	{
		form.getLocalContext().setIrrigantDetailMode(FormMode.EDIT);
		updateIrrigantDetailInstanceControlState();
	}

	@Override
	protected void onBtnSaveIrrigantDetailClick() throws PresentationLogicException
	{
		IrrigantDetailIntraOpVo irrigantDetail = populateIrrigantDetailInstanceData(form.lyrIntra().tabIrrigation().grdIrrigantDetail().getValue());
		String[] errors = irrigantDetail.validate();

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		displayTransientIrrigantDetailData(irrigantDetail);
		form.getLocalContext().setIrrigantDetailMode(FormMode.VIEW);
		
		form.lyrIntra().tabIrrigation().grdIrrigantDetail().setValue(irrigantDetail);
		
		updateIrrigantDetailInstanceControlState();
	}

	private void displayTransientIrrigantDetailData(IrrigantDetailIntraOpVo irrigantDetail)
	{
		// replace in grid or add to grid - only actually persists to database
		// with parent Record
		grdIrrigantDetailRow row;
		if (form.lyrIntra().tabIrrigation().grdIrrigantDetail().getValue() != null)
			row = form.lyrIntra().tabIrrigation().grdIrrigantDetail().getSelectedRow();
		else
			row = form.lyrIntra().tabIrrigation().grdIrrigantDetail().getRows().newRow();

		populateIrrigantDetailRow(irrigantDetail, row);
	}

	private void populateIrrigantDetailRow(IrrigantDetailIntraOpVo irrigantDetail, grdIrrigantDetailRow row)
	{
		if (irrigantDetail.getIrrigantIsNotNull())
			row.setColIrrigant(irrigantDetail.getIrrigant().getText());
		if (irrigantDetail.getTotalVolumeInIsNotNull())
			row.setColTotalVolumeIn(irrigantDetail.getTotalVolumeIn());
		if (irrigantDetail.getWarmedIsNotNull())
			row.setColWarmed(irrigantDetail.getWarmed().getText());
		row.setValue(irrigantDetail);
	}

	@Override
	protected void onBtnCancelIrrigantDetailClick() throws PresentationLogicException
	{
		form.getLocalContext().setIrrigantDetailMode(FormMode.VIEW);
		
		populateIrrigantDetailInstanceControls(form.lyrIntra().tabIrrigation().grdIrrigantDetail().getValue());
		
		updateIrrigantDetailInstanceControlState();
	}

	private void openIrrigationDetail()
	{
		clearIrrigantDetailInstanceControls();
	}

	@Override
	protected void onGrdIrrigantDetailSelectionChanged() throws PresentationLogicException
	{
		updateIrrigantDetailInstanceControlState();
		populateIrrigantDetailInstanceControls(form.lyrIntra().tabIrrigation().grdIrrigantDetail().getValue());
	}

	protected void clearIrrigantDetailInstanceControls()
	{
		form.lyrIntra().tabIrrigation().intIrrigantDetailTotalVolume().setValue(null);
		form.lyrIntra().tabIrrigation().cmbIrrigantDetail().setValue(null);
		form.lyrIntra().tabIrrigation().IrrigantDetailWarmed().setValue(IrrigantDetailWarmedEnumeration.None);
	}

	protected void populateIrrigantDetailInstanceControls(ims.clinical.vo.IrrigantDetailIntraOpVo irrigantDetail)
	{
		clearIrrigantDetailInstanceControls();
		if (irrigantDetail == null)
			return;

		form.lyrIntra().tabIrrigation().intIrrigantDetailTotalVolume().setValue(irrigantDetail.getTotalVolumeInIsNotNull() ? irrigantDetail.getTotalVolumeIn() : null);
		form.lyrIntra().tabIrrigation().cmbIrrigantDetail().setValue(irrigantDetail.getIrrigantIsNotNull() ? irrigantDetail.getIrrigant() : null);
		form.lyrIntra().tabIrrigation().IrrigantDetailWarmed().setValue(irrigantDetail.getWarmedIsNotNull() ? (irrigantDetail.getWarmed().equals(YesNo.YES) ? IrrigantDetailWarmedEnumeration.rdoIrrigantDetailWarmedYes : IrrigantDetailWarmedEnumeration.rdoIrrigantDetailWarmedNo) : null);
	}

	protected ims.clinical.vo.IrrigantDetailIntraOpVo populateIrrigantDetailInstanceData(ims.clinical.vo.IrrigantDetailIntraOpVo irrigantDetail)
	{
		if (irrigantDetail == null)
			irrigantDetail = new ims.clinical.vo.IrrigantDetailIntraOpVo();

		irrigantDetail.setTotalVolumeIn(form.lyrIntra().tabIrrigation().intIrrigantDetailTotalVolume().getValue());
		irrigantDetail.setIrrigant(form.lyrIntra().tabIrrigation().cmbIrrigantDetail().getValue());
		irrigantDetail.setWarmed(form.lyrIntra().tabIrrigation().IrrigantDetailWarmed().getValue() != null ? (form.lyrIntra().tabIrrigation().IrrigantDetailWarmed().getValue().equals(IrrigantDetailWarmedEnumeration.rdoIrrigantDetailWarmedYes) ? YesNo.YES : YesNo.NO) : null);

		return irrigantDetail;
	}

	protected void clearIrrigantInstanceControls()
	{
		form.lyrIntra().tabIrrigation().intIrrigantTotalVolDiff().setValue(null);
		form.lyrIntra().tabIrrigation().intIrrigantOTotalOut().setValue(null);
		form.lyrIntra().tabIrrigation().intIrrigantOTotalIn().setValue(null);
		form.lyrIntra().tabIrrigation().intIrrigantEBloodLoss().setValue(null);
		form.lyrIntra().tabIrrigation().grdIrrigantDetail().getRows().clear();
	}

	protected void populateIrrigantScreenFromData()
	{
		clearIrrigantInstanceControls();
		IrrigantIntraOpVo irrigant = form.getLocalContext().getIrrigant();
		if (irrigant == null)
			return;

		form.lyrIntra().tabIrrigation().intIrrigantTotalVolDiff().setValue(irrigant.getTotalVolumeDifferenceIsNotNull() ? irrigant.getTotalVolumeDifference() : null);
		form.lyrIntra().tabIrrigation().intIrrigantOTotalOut().setValue(irrigant.getTotalVolumeOutIsNotNull() ? irrigant.getTotalVolumeOut() : null);
		form.lyrIntra().tabIrrigation().intIrrigantOTotalIn().setValue(irrigant.getOverallTotalVolumeInIsNotNull() ? irrigant.getOverallTotalVolumeIn() : null);
		form.lyrIntra().tabIrrigation().intIrrigantEBloodLoss().setValue(irrigant.getEstimatedBloodLossIsNotNull() ? irrigant.getEstimatedBloodLoss() : null);

		for (IrrigantDetailIntraOpVo irrigantDetail : irrigant.getIrrigationDetails())
		{
			grdIrrigantDetailRow row = form.lyrIntra().tabIrrigation().grdIrrigantDetail().getRows().newRow();
			populateIrrigantDetailRow(irrigantDetail, row);
		}
	}

	protected ims.clinical.vo.IrrigantIntraOpVo populateIrrigantDataFromScreen(ims.clinical.vo.IrrigantIntraOpVo irrigant)
	{
		if (irrigant == null)
			irrigant = new ims.clinical.vo.IrrigantIntraOpVo();

		irrigant.setTotalVolumeOut(form.lyrIntra().tabIrrigation().intIrrigantOTotalOut().getValue());
		irrigant.setEstimatedBloodLoss(form.lyrIntra().tabIrrigation().intIrrigantEBloodLoss().getValue());
		irrigant.setIrrigationDetails(form.lyrIntra().tabIrrigation().grdIrrigantDetail().getValues());
		irrigant.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		// sum of detail record volumes
		int overalTotalVolumeIn = 0;
		for (IrrigantDetailIntraOpVo irrigantDetail : irrigant.getIrrigationDetails())
		{
			overalTotalVolumeIn += irrigantDetail.getTotalVolumeIn();
		}
		irrigant.setOverallTotalVolumeIn(overalTotalVolumeIn);
		// diff between sum of detail values and Total Volumne Out
		if (overalTotalVolumeIn != 0 && irrigant.getTotalVolumeOutIsNotNull())
			irrigant.setTotalVolumeDifference(overalTotalVolumeIn - irrigant.getTotalVolumeOut());

		return irrigant;
	}

	@Override
	protected void onBtnAddDeviceClick() throws PresentationLogicException
	{
		form.lyrIntra().tabIrrigation().grdCatheters().setValue(null);
		form.getLocalContext().setCatheterMode(FormMode.EDIT);
		clearCatheterInstanceControls();
		updateCatheterInstanceControlState();
	}

	@Override
	protected void onBtnEditDeviceClick() throws PresentationLogicException
	{
		form.getLocalContext().setCatheterMode(FormMode.EDIT);
		updateCatheterInstanceControlState();
	}

	@Override
	protected void onBtnSaveDeviceClick() throws PresentationLogicException
	{
		CatheterDrainsTubeIntraOpVo catheter = populateCatheterInstanceData(form.lyrIntra().tabIrrigation().grdCatheters().getValue());
		String[] errors = catheter.validate(validateCatheterUI(catheter));

		CatheterDrainsTubeIntraOpVo savedCatheter = null;
		
		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			savedCatheter = domain.saveCatheter(catheter);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		form.getLocalContext().setCatheterMode(FormMode.VIEW);
		openCatheter();
		
		form.lyrIntra().tabIrrigation().grdCatheters().setValue(savedCatheter);
		
		populateCatheterInstanceControls(savedCatheter);
		
		updateCatheterInstanceControlState();
	}

	private String[] validateCatheterUI(CatheterDrainsTubeIntraOpVo catheter)
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		CatheterDrainsTube deviceSelection = catheter.getType();
		if (deviceSelection != null)
		{
			if (deviceSelection.equals(CatheterDrainsTube.CATHETER))
			{
				if (catheter.getLubricant() == null)
					uiErrors.add("Lubricant is a mandatory field");
				if (catheter.getVolumeInBalloon() == null)
					uiErrors.add("Volume in Balloon is a mandatory field");
			}
		}

		return uiErrors.toArray(new String[0]);
	}

	@Override
	protected void onBtnCancelDeviceClick() throws PresentationLogicException
	{
		form.getLocalContext().setCatheterMode(FormMode.VIEW);
		
		CatheterDrainsTubeIntraOpVo selectedCatheter = form.lyrIntra().tabIrrigation().grdCatheters().getValue();
		
		openCatheter();
		
		form.lyrIntra().tabIrrigation().grdCatheters().setValue(selectedCatheter);
		populateCatheterInstanceControls(form.lyrIntra().tabIrrigation().grdCatheters().getValue());
		
		updateCatheterInstanceControlState();
	}

	private void clearCatheterInstanceControls()
	{
		form.lyrIntra().tabIrrigation().txtCatheterVolInBaloon().setValue(null);
		form.lyrIntra().tabIrrigation().txtCatheterLubricant().setValue(null);
		form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().setValue(null);
		form.lyrIntra().tabIrrigation().txtCatheterBodySite().setValue(null);
		form.lyrIntra().tabIrrigation().txtCatheterLotNumber().setValue(null);
		form.lyrIntra().tabIrrigation().txtCatheterSize().setValue(null);
		form.lyrIntra().tabIrrigation().txtCatheterCollectionDevice().setValue(null);
		form.lyrIntra().tabIrrigation().CatheterType().setValue(null);

	}

	private void populateCatheterInstanceControls(ims.clinical.vo.CatheterDrainsTubeIntraOpVo catheter)
	{
		clearCatheterInstanceControls();
		if (catheter == null)
			return;

		form.lyrIntra().tabIrrigation().txtCatheterVolInBaloon().setValue(catheter.getVolumeInBalloonIsNotNull() ? catheter.getVolumeInBalloon() : null);
		form.lyrIntra().tabIrrigation().txtCatheterLubricant().setValue(catheter.getLubricantIsNotNull() ? catheter.getLubricant() : null);
		if (catheter.getInsertedByIsNotNull())
		{
			form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().newRow(catheter.getInsertedBy(), catheter.getInsertedBy().toString());
			form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().setValue(catheter.getInsertedByIsNotNull() ? catheter.getInsertedBy() : null);
		}

		form.lyrIntra().tabIrrigation().txtCatheterBodySite().setValue(catheter.getBodySiteIsNotNull() ? catheter.getBodySite() : null);
		form.lyrIntra().tabIrrigation().txtCatheterLotNumber().setValue(catheter.getLotNumberIsNotNull() ? catheter.getLotNumber() : null);
		form.lyrIntra().tabIrrigation().txtCatheterSize().setValue(catheter.getSizeIsNotNull() ? catheter.getSize() : null);
		form.lyrIntra().tabIrrigation().txtCatheterCollectionDevice().setValue(catheter.getCollectionDeviceIsNotNull() ? catheter.getCollectionDevice() : null);

		CatheterDrainsTube deviceSelection = catheter.getType();
		if (deviceSelection != null)
		{
			if (deviceSelection.equals(CatheterDrainsTube.DRAIN))
			{
				form.lyrIntra().tabIrrigation().CatheterType().setValue(CatheterTypeEnumeration.rdoDrain);
			}
			else if (deviceSelection.equals(CatheterDrainsTube.TUBE))
			{
				form.lyrIntra().tabIrrigation().CatheterType().setValue(CatheterTypeEnumeration.rdoTube);
			}
			else if (deviceSelection.equals(CatheterDrainsTube.CATHETER))
			{
				form.lyrIntra().tabIrrigation().CatheterType().setValue(CatheterTypeEnumeration.rdoCatheter);
			}
			else
			{
				form.lyrIntra().tabIrrigation().CatheterType().setValue(null);
			}
		}
	}

	private ims.clinical.vo.CatheterDrainsTubeIntraOpVo populateCatheterInstanceData(ims.clinical.vo.CatheterDrainsTubeIntraOpVo catheter)
	{
		if (catheter == null)
			catheter = new ims.clinical.vo.CatheterDrainsTubeIntraOpVo();

		catheter.setVolumeInBalloon(form.lyrIntra().tabIrrigation().txtCatheterVolInBaloon().getValue());
		catheter.setLubricant(form.lyrIntra().tabIrrigation().txtCatheterLubricant().getValue());
		catheter.setInsertedBy(form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().getValue());
		catheter.setBodySite(form.lyrIntra().tabIrrigation().txtCatheterBodySite().getValue());
		catheter.setLotNumber(form.lyrIntra().tabIrrigation().txtCatheterLotNumber().getValue());
		catheter.setSize(form.lyrIntra().tabIrrigation().txtCatheterSize().getValue());
		catheter.setCollectionDevice(form.lyrIntra().tabIrrigation().txtCatheterCollectionDevice().getValue());

		if (form.lyrIntra().tabIrrigation().CatheterType().getValue() != null)
		{
			CatheterTypeEnumeration selection = form.lyrIntra().tabIrrigation().CatheterType().getValue();
			if (selection.equals(CatheterTypeEnumeration.rdoDrain))
			{
				catheter.setType(CatheterDrainsTube.DRAIN);
			}
			else if (selection.equals(CatheterTypeEnumeration.rdoTube))
			{
				catheter.setType(CatheterDrainsTube.TUBE);
			}
			else if (selection.equals(CatheterTypeEnumeration.rdoCatheter))
			{
				catheter.setType(CatheterDrainsTube.CATHETER);
			}
		}

		catheter.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		return catheter;
	}

	@Override
	protected void onGrdCathetersSelectionChanged() throws PresentationLogicException
	{
		updateCatheterInstanceControlState();
		populateCatheterInstanceControls(form.lyrIntra().tabIrrigation().grdCatheters().getValue());
	}

	@Override
	protected void onRadioButtonCatheterTypeValueChanged() throws PresentationLogicException
	{
		if (form.getLocalContext().getCatheterMode().equals(FormMode.EDIT))
		{
			CatheterTypeEnumeration selection = form.lyrIntra().tabIrrigation().CatheterType().getValue();
			if (selection != null)
			{
				if (selection.equals(CatheterTypeEnumeration.rdoCatheter))
				{
					form.lyrIntra().tabIrrigation().txtCatheterLubricant().setRequired(true);
					form.lyrIntra().tabIrrigation().txtCatheterVolInBaloon().setRequired(true);
				}
				else
				{
					form.lyrIntra().tabIrrigation().txtCatheterLubricant().setRequired(false);
					form.lyrIntra().tabIrrigation().txtCatheterVolInBaloon().setRequired(false);
				}
			}
		}
	}

	@Override
	protected void onQmbCatheterInsertedByTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().clear();

		HcpLiteVoCollection voCollHcp;
		try
		{
			voCollHcp = domain.listCaseStaffHcps(value, form.getLocalContext().getCaseDetails());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().toString());
		}

		if (voCollHcp.size() == 0)
			engine.showMessage("No matching records found");
		else if (voCollHcp.size() == 1)
			form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().setValue(voCollHcp.get(0));
		else
			form.lyrIntra().tabIrrigation().qmbCatheterInsertedBy().showOpened();
	}

	@Override
	protected void onImbRemoveSkinClosureClick() throws PresentationLogicException
	{
		//WDEV-21829
		form.getLocalContext().setConfirmationRemoveSkinClosureMessageID(engine.showMessage("Are you sure you want to remove selected Skin Closure?", "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	@Override
	protected void onGrdSkinClosuresSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSkinClosureIntraOpVo(form.lyrIntra().tabSpecimen().grdSkinClosures().getValue());
		updateSpecimenTabControlState();
	}

	@Override
	protected void onImbRemoveSpecimenClick() throws PresentationLogicException
	{
		//WDEV-21829
		form.getLocalContext().setConfirmationRemoveSpecimenMessageID(engine.showMessage("Are you sure you want to remove selected Specimen?", "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	@Override
	protected void onGrdSpecimensSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setIntraOpSpecimenVo(form.lyrIntra().tabSpecimen().grdSpecimens().getValue());
		updateSpecimenTabControlState();
	}

	@Override
	protected void onImbRemoveWoundPackingClick() throws PresentationLogicException
	{
		//WDEV-21829
		form.getLocalContext().setConfirmationRemoveWoundPackingMessageID(engine.showMessage("Are you sure you want to remove selected Wound Packing?", "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	private void openWoundPackingIntraOp() //WDEV-21829
	{
		form.lyrIntra().tabSpecimen().grdWoundPackings().getRows().clear();
		WoundPackingIntraOpVoCollection woundPackings = domain.listWoundPackingByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (WoundPackingIntraOpVo woundPacking : woundPackings)
		{
			grdWoundPackingsRow row = form.lyrIntra().tabSpecimen().grdWoundPackings().getRows().newRow();
			if (woundPacking.getPackingTypeIsNotNull())
			{
				row.setColPackingType(woundPacking.getPackingType().getText());
				row.setTooltipForColPackingType(woundPacking.getPackingType().getText());
			}

			row.setColTypeComments(woundPacking.getPackingTypeComments());
			row.setTooltipForColTypeComments(woundPacking.getPackingTypeComments());
			
			if (woundPacking.getInPlaceOnDepartureIsNotNull())
			{
				row.setColInplaceOnDeparture(woundPacking.getInPlaceOnDeparture().getText());
				row.setTooltipForColInplaceOnDeparture(woundPacking.getInPlaceOnDeparture().getText());
			}

			row.setColPackingSite(woundPacking.getPackingSite());
			row.setTooltipForColPackingSite(woundPacking.getPackingSite());
			
			row.setColSiteComments(woundPacking.getPackingSiteComments());
			row.setTooltipForColSiteComments(woundPacking.getPackingSiteComments());

			if (woundPacking.getPatientProcedureIsNotNull())
			{
				String theatresProcedureDisplayText = woundPacking.getPatientProcedure().getTheatresProcedureDisplayText();
				row.setColProcedure(theatresProcedureDisplayText);
				row.setTooltipForColProcedure(theatresProcedureDisplayText);
			}

			row.setValue(woundPacking);
		}
	}

	@Override
	protected void onGrdWoundPackingsSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setWoundPackingIntraOpVo(form.lyrIntra().tabSpecimen().grdWoundPackings().getValue());
		updateSpecimenTabControlState();
	}

	private void updateSpecimenTabControlState()
	{
		form.lyrIntra().tabSpecimen().imbEditSpecimen().setEnabled(form.lyrIntra().tabSpecimen().grdSpecimens().getValue() != null);
		form.lyrIntra().tabSpecimen().imbRemoveSpecimen().setEnabled(form.lyrIntra().tabSpecimen().grdSpecimens().getValue() != null);

		form.lyrIntra().tabSpecimen().imbEditWoundPacking().setEnabled(form.lyrIntra().tabSpecimen().grdWoundPackings().getValue() != null);
		form.lyrIntra().tabSpecimen().imbRemoveWoundPacking().setEnabled(form.lyrIntra().tabSpecimen().grdWoundPackings().getValue() != null);

		form.lyrIntra().tabSpecimen().imbEditSkinClosures().setEnabled(form.lyrIntra().tabSpecimen().grdSkinClosures().getValue() != null);
		form.lyrIntra().tabSpecimen().imbRemoveSkinClosure().setEnabled(form.lyrIntra().tabSpecimen().grdSkinClosures().getValue() != null);
	}

	@Override
	protected void onImbEditSpecimenClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setIntraOpSpecimenVo(form.lyrIntra().tabSpecimen().grdSpecimens().getValue());
		engine.open(form.getForms().Clinical.SpecimenIntraOpDialog);
	}

	@Override
	protected void onImbEditSkinClosuresClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSkinClosureIntraOpVo(form.lyrIntra().tabSpecimen().grdSkinClosures().getValue());
		engine.open(form.getForms().Clinical.SkinClosureIntraOpDialog);
	}

	@Override
	protected void onImbEditWoundPackingClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setWoundPackingIntraOpVo(form.lyrIntra().tabSpecimen().grdWoundPackings().getValue());
		engine.open(form.getForms().Clinical.WoundPackingIntraOpDialog);
	}

	@Override
	protected void onImbRemoveOtherEquipmentClick() throws PresentationLogicException
	{
		domain.removeOtherEquipmentIntraOp(form.lyrIntra().tabImplants().grdOtherEquipment().getValue());
		openOtherEquipmentIntraOp();
		updateImplantsTabTabControlState();
	}

	private void openOtherEquipmentIntraOp()
	{
		form.lyrIntra().tabImplants().grdOtherEquipment().getRows().clear();
		EquipmentIntraOpVoCollection equipments = domain.listOtherEquipIntraOpByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (EquipmentIntraOpVo equipment : equipments)
		{
			grdOtherEquipmentRow row = form.lyrIntra().tabImplants().grdOtherEquipment().getRows().newRow();

			row.setColEquipDesc(equipment.getEquipmentDescription());
			row.setColUnitNo(equipment.getUnitNumber());
			row.setColComments(equipment.getComments());
			//WDEV-21831
			row.setCellColCommentsTooltip(equipment.getComments());

			row.setValue(equipment);
		}
	}

	private void updateImplantsTabTabControlState()
	{
		form.lyrIntra().tabImplants().imbEditImplants().setEnabled(form.lyrIntra().tabImplants().grdImplants().getValue() != null);
		form.lyrIntra().tabImplants().imbRemoveImplants().setEnabled(form.lyrIntra().tabImplants().grdImplants().getValue() != null);

		form.lyrIntra().tabImplants().imbEditArterialClamp().setEnabled(form.lyrIntra().tabImplants().grdArterialClamps().getValue() != null);
		form.lyrIntra().tabImplants().imbRemoveArterialClamps().setEnabled(form.lyrIntra().tabImplants().grdArterialClamps().getValue() != null);

		form.lyrIntra().tabImplants().imbEditOtherEquipment().setEnabled(form.lyrIntra().tabImplants().grdOtherEquipment().getValue() != null);
		form.lyrIntra().tabImplants().imbRemoveOtherEquipment().setEnabled(form.lyrIntra().tabImplants().grdOtherEquipment().getValue() != null);
	}

	@Override
	protected void onImbEditOtherEquipmentClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setOtherEquipmentIntraOpVo(form.lyrIntra().tabImplants().grdOtherEquipment().getValue());
		engine.open(form.getForms().Clinical.OtherEquipmentIntraOpDialog);
	}

	@Override
	protected void onImbRemoveArterialClampsClick() throws PresentationLogicException
	{
		domain.removeArterialClampIntraOp(form.lyrIntra().tabImplants().grdArterialClamps().getValue());
		openArterialClampIntraOp();
		updateImplantsTabTabControlState();
	}

	private void openArterialClampIntraOp()
	{
		form.lyrIntra().tabImplants().grdArterialClamps().getRows().clear();
		ArterialClampsIntraOpVoCollection clamps = domain.listAreterialClampIntraOpByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (ArterialClampsIntraOpVo arterial : clamps)
		{
			grdArterialClampsRow row = form.lyrIntra().tabImplants().grdArterialClamps().getRows().newRow();

			row.setColClampSize(arterial.getClampSite());
			if (arterial.getTimeOnIsNotNull())
				row.setColTimeOn(arterial.getTimeOn().toString());
			if (arterial.getTimeOffIsNotNull())
				row.setColTimeOff(arterial.getTimeOff().toString());

			row.setValue(arterial);
		}
	}

	@Override
	protected void onImbEditArterialClampClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setArterialClampIntraOpVo(form.lyrIntra().tabImplants().grdArterialClamps().getValue());
		engine.open(form.getForms().Clinical.ArterialClampIntraOpDialog);
	}

	@Override
	protected void onImbEditImplantsClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setImplantsIntraOpVo(form.lyrIntra().tabImplants().grdImplants().getValue());
		engine.open(form.getForms().Clinical.ImplantsIntraOpDialog);
	}

	@Override
	protected void onImbRemoveImplantsClick() throws PresentationLogicException
	{
		domain.removeImplantIntraOP(form.lyrIntra().tabImplants().grdImplants().getValue());
		openImplantsIntraOp();
		updateImplantsTabTabControlState();
	}

	private void openImplantsIntraOp()
	{
		form.lyrIntra().tabImplants().grdImplants().getRows().clear();
		ImplantsIntraOpVoCollection implants = domain.listImplantIntraOpByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		for (ImplantsIntraOpVo implant : implants)
		{
			grdImplantsRow row = form.lyrIntra().tabImplants().grdImplants().getRows().newRow();

			row.setColImplantDescription(implant.getImplantDescription());
			row.setColManufacturer(implant.getManufacturer());
			row.setColCatNo(implant.getCatalogueNumber());
			row.setColLotNo(implant.getLotNumber());
			row.setColSerialNo(implant.getSerialNumber());
			row.setColQty(String.valueOf(implant.getQuantity()));
			row.setColSize(implant.getSize());
			row.setColExpDate(implant.getExpiryDate().toString());

			row.setValue(implant);
		}
	}

	@Override
	protected void onBtnSaveTourniquetClick() throws PresentationLogicException
	{
		TourniquetIntraOpVo tourniquet = form.lyrIntra().tabTourniquet().grdTourniquet().getValue();
		tourniquet = populateTourniquetInstanceData(tourniquet);

		String[] errors = tourniquet.validate(validateTourniquetUI(tourniquet));

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveTourniquet(tourniquet);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		openTourniquet();
		form.setMode(FormMode.VIEW);
	}

	private String[] validateTourniquetUI(TourniquetIntraOpVo tourniquet)
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (tourniquet.getInflatedIsNotNull() && tourniquet.getDeflatedIsNotNull())
		{
			if (tourniquet.getInflated().isGreaterThan(tourniquet.getDeflated()))
			{
				uiErrors.add("Deflated Date/Time must be after Inflated Date/Time");
			}
		}
		return uiErrors.toArray(new String[0]);
	}

	@Override
	protected void onGrdTourniquetSelectionChanged() throws PresentationLogicException
	{
		grdTourniquetSelectionChanged();
	}

	@Override
	protected void onBtnSaveRecoveryClick() throws PresentationLogicException
	{
		PeriOpRecoveryDetailVo recovery = populateRecoveryDetailsDataFromScreen(form.getLocalContext().getRecoveryDetails());
		//WEDEV-21857 refactored and simplified code see validateRecoveryUI method
		String[] errors = recovery.validate(validateRecoveryUI(recovery));
	
		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveRecoveryDetails(recovery);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setRecoveryDetails(domain.getRecoveryDetails(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
			populateRecoveryDetailsScreenFromData();
			//WDEV-21857
			form.setMode(FormMode.VIEW);
			return;
		}

		openRecoveryDetails();
		form.setMode(FormMode.VIEW);
	}

	private PeriOpRecoveryDetailVo populateRecoveryDetailsDataFromScreen(PeriOpRecoveryDetailVo recoveryDetails)
	{
		if (recoveryDetails == null)
			recoveryDetails = new PeriOpRecoveryDetailVo();

		recoveryDetails.setMOS(form.lyrIntra().tabRecovery().ccRecoveryMemberofStaff().getValue());
		recoveryDetails.setAwaitingTemp(form.lyrIntra().tabRecovery().decRecoveryAdmTemp().getValue());
		recoveryDetails.setBloodGlucoseResult(form.lyrIntra().tabRecovery().decRecoveryBloodGlucose().getValue());
		recoveryDetails.setPainScore(form.lyrIntra().tabRecovery().cmbRecoveryPainScore().getValue());

		recoveryDetails.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		return recoveryDetails;
	}

	@Override
	protected void onBtnCancelRecoveryClick() throws PresentationLogicException
	{
		openRecoveryDetails();
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnEditRecoveryClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onImbRemoveFinalClick() throws PresentationLogicException
	{
		domain.removeFinalCountIntraOp(form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().getValue());
		openFinalCounts();
		updateHandoverTabControlState();
	}

	@Override
	protected void onImbEditFinalClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setFinalCountsIntraOpVo(form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().getValue());
		engine.open(form.getForms().Clinical.FinalAndIncorrectCountIntraOpDialog);
	}

	@Override
	protected void onImbEditHandoverClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setHandoverCountsIntraOpVo(form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().getValue());
		engine.open(form.getForms().Clinical.HandoverCountsIntraOpDialog);
	}

	@Override
	protected void onImbRemoveHandoverClick() throws PresentationLogicException
	{
		domain.removeHandoverIntraOp(form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().getValue());
		openHandoverCounts();
		updateHandoverTabControlState();
	}

	private void updateHandoverTabControlState()
	{
		form.lyrIntra().tabHandoverAndFinalCounts().imbEditHandover().setEnabled(form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().getValue() != null);
		form.lyrIntra().tabHandoverAndFinalCounts().imbRemoveHandover().setEnabled(form.lyrIntra().tabHandoverAndFinalCounts().grdHandover().getValue() != null);

		form.lyrIntra().tabHandoverAndFinalCounts().imbEditFinal().setEnabled(form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().getValue() != null);
		form.lyrIntra().tabHandoverAndFinalCounts().imbRemoveFinal().setEnabled(form.lyrIntra().tabHandoverAndFinalCounts().grdFinal().getValue() != null);
	}

	@Override
	protected void onQmbSignOutSignatureTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().clear();

		HcpLiteVoCollection voCollHcp;
		try
		{
			voCollHcp = domain.listCaseStaffHcps(value, form.getLocalContext().getCaseDetails());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		if (voCollHcp==null || voCollHcp.size()==0) //WDEV-21840
			return;
		
		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().toString());
		}

		if (voCollHcp.size() == 1)
			form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().setValue(voCollHcp.get(0));
		else
			form.lyrIntra().tabPerformedProcedures().qmbSignOutSignature().showOpened();
	}

	@Override
	protected void onBtnEditPerformedProcedureClick() throws PresentationLogicException
	{
		form.getLocalContext().setPerformedProcedureMode(FormMode.EDIT);
		updatePerformedProcedureInstanceControlState();
	}

	@Override
	protected void onBtnAddPerformedProcedureClick() throws PresentationLogicException
	{
		form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().setValue(null);
		form.getLocalContext().setPerformedProcedureMode(FormMode.EDIT);
		clearPerformedInstanceControls();
		updatePerformedProcedureInstanceControlState();
	}

	private void clearPerformedInstanceControls()
	{
		form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setValue(null);
		form.lyrIntra().tabPerformedProcedures().txtPerformedComments().setValue(null);
		form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().clear();
	}

	@Override
	protected void onBtnSavePerformedProcedureClick() throws PresentationLogicException
	{
		btnSavePerformedProcedureClick();
	}

	private void btnSavePerformedProcedureClick()
	{
		PerformedProceduresIntraOpVo performed = populatePerformedProcedureInstanceData(form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue());
		String[] errors = performed.validate(validatePerformedProcedureUI(performed.getID_PerformedProceduresIntraO()==null)); //WDEV-21840

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.savePerformedProcedure(performed, form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		form.getLocalContext().setPerformedProcedureMode(FormMode.VIEW);
		openPerformedProcedures();
		updatePerformedProcedureInstanceControlState();
	}

	//WDEV-21840
	private String[] validatePerformedProcedureUI(boolean newPerformed)
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().getVisible() && form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().isEnabled() && form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().getValue()==null)
		{
			uiErrors.add("Laterality is mandatory");
		}

		boolean isFlagingPlanedAsPerformed = form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getSelectedRow()!=null && form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getSelectedRow().getValue()==null; 
		//WDEV-21840
		if (newPerformed &&  !isFlagingPlanedAsPerformed && form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue()!=null && domain.isPlannedOrPerformedProcedureAddedAlready(form.getGlobalContext().Clinical.getTheatreAppointmentRef(), form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue()))
		{
			uiErrors.add(form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue().getProcedureName() + " is already added as Planned or Performed procedure");
		}
	
		//WDEV-22663
		if (newPerformed && isFlagingPlanedAsPerformed && form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue()!=null && domain.isPocedurePerformedAlready(form.getGlobalContext().Clinical.getTheatreAppointmentRef(), form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue()))
		{
			uiErrors.add(form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue().getProcedureName() + " is already Flagged as Performed procedure");
		}
		
		return uiErrors.toArray(new String[0]);
	}
	
	@Override
	protected void onBtnCancelPerformedProcedureClick() throws PresentationLogicException
	{
		form.getLocalContext().setPerformedProcedureMode(FormMode.VIEW);
		openPerformedProcedures();
		updatePerformedProcedureInstanceControlState();
	}

	@Override
	protected void onGrdPerformedProceduresSelectionChanged() throws PresentationLogicException
	{
		grdPerformedProceduresSelectionChanged();
	}

	private void populatePerformedProcedureInstanceControls(IntraOpPlannedProcedureVo planned, PerformedProceduresIntraOpVo performed)
	{
		// either default in planned data or show (saved) performed data
		clearPerformedInstanceControls();
		if (performed == null)
		{
			if (planned == null)
				return;
			else
			{
				if (planned.getPlannedProcedureIsNotNull())
				{
					form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setValue(planned.getPlannedProcedure().getProcLaterality());
					form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().newRow(planned.getPlannedProcedure().getProcedure(), planned.getPlannedProcedure().getProcedure().getProcedureName());
					form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().setValue(planned.getPlannedProcedure().getProcedure());
					form.lyrIntra().tabPerformedProcedures().txtPerformedComments().setValue(planned.getPlannedProcedure().getNotes());
					return;
				}
			}
		}

		if (performed.getPerformedProcedureIsNotNull())
		{
			form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setValue(performed.getPerformedProcedure().getProcLaterality());
			form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().newRow(performed.getPerformedProcedure().getProcedure(), performed.getPerformedProcedure().getProcedure().getProcedureName());
			form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().setValue(performed.getPerformedProcedure().getProcedure());
			form.lyrIntra().tabPerformedProcedures().txtPerformedComments().setValue(performed.getPerformedProcedure().getNotes());
		}
	}

	private PerformedProceduresIntraOpVo populatePerformedProcedureInstanceData(PerformedProceduresIntraOpVo performed)
	{
		if (performed == null)
			performed = new PerformedProceduresIntraOpVo();

		PatientProcedureMinVo patientPerformedProc = performed.getPerformedProcedure();
		if (patientPerformedProc == null)
			patientPerformedProc = new PatientProcedureMinVo();

		patientPerformedProc.setProcedure(form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue());
		patientPerformedProc.setNotes(form.lyrIntra().tabPerformedProcedures().txtPerformedComments().getValue());
		patientPerformedProc.setProcLaterality(form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().getValue());
		
		//WDEV-22558
		patientPerformedProc.setProcedureStatus(PatientProcedureStatus.PERFORMED); 
		patientPerformedProc.setProcDate((new DateTime()).getDate().toPartialDate());
		patientPerformedProc.setProcTime(new Time());
		
		performed.setPerformedProcedure(patientPerformedProc);
		performed.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
	
		return performed;
	}

	@Override
	protected void onBtnCancelSignOutClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		openPerformedSignOut();
		openPerformedProcedures();
	}

	@Override
	protected void onBtnEditSignOutClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSaveSignOutClick() throws PresentationLogicException //WDEV-21840
	{
		PerformedProcAndSignOutIntraOpVo perfSignOut = populatePerformedSignOutDataFromScreen(form.getLocalContext().getPerformedSignOut());
		String[] errors = perfSignOut.validate(validateSignOutUI()); 

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		if (perfSignOut.getID_PerfProcAndSignOutIntraOp()==null &&  domain.getPerformedSignOut(form.getGlobalContext().Clinical.getTheatreAppointmentRef())!=null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setPerformedSignOut(domain.getPerformedSignOut(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
			form.setMode(FormMode.VIEW);
			openPerformedSignOut();
			openPerformedProcedures();
			return;
		}
		
		try
		{
			domain.savePerformedSignOut(perfSignOut);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setPerformedSignOut(domain.getPerformedSignOut(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
			form.setMode(FormMode.VIEW);
			openPerformedSignOut();
			openPerformedProcedures();
			return;
		}

		form.setMode(FormMode.VIEW);
		openPerformedSignOut();
		openPerformedProcedures();
	}

	//WDEV-21840
	private String[] validateSignOutUI()
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (AntibioticsSurgicallyEnumeration.None.equals(form.lyrIntra().tabPerformedProcedures().AntibioticsSurgically().getValue()))
		{
			uiErrors.add("Did antibiotics become surgically indicated after knife to skin is mandatory");
		}

		//WDEV-21840
		if (form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().isVisible() && form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().isEnabled() && form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().isRequired() && form.lyrIntra().tabPerformedProcedures().dtimSignOutAntiGiven().getValue()==null)
		{
			uiErrors.add("Time intr-operative antibiotics given is mandatory");
		}
		
		if (!domain.isAnyProcedurePerormed(form.getGlobalContext().Clinical.getTheatreAppointmentRef()))
		{
			uiErrors.add("To continue saving you should have at leat one procedure performed");
		}
		
		return uiErrors.toArray(new String[0]);
	}

	@Override
	protected void onQmbPerformedProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().clear();

		ProcedureLiteVoCollection procedures;
		try
		{
			procedures = domain.listProcedures(value);
			if (procedures == null || procedures.size() == 0) //WDEV-21840
			{
				return;
			}
			for (ProcedureLiteVo procedure : procedures)
			{
				form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().newRow(procedure, procedure.getProcedureName());
			}

			if (procedures.size() == 1)
			{
				form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().setValue(procedures.get(0));
			}
			else if (procedures.size() > 1)
				form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().showOpened();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}

	}

	@Override
	protected void onRadioButtonAntibioticsSurgicallyValueChanged() throws PresentationLogicException
	{
		updatePerformedTabAntibioticsControlsState();
	}

	@Override
	protected void onQmbPlannedProcedureValueChanged() throws PresentationLogicException
	{
		qmbPlannedProcedureValueChanged();
	}

	private void qmbPlannedProcedureValueChanged()
	{
		boolean isLaterality = false;

		if (form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().getValue() != null && form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().getValue().getIsLateralityApplicableIsNotNull() && form.lyrIntra().tabPlannedProcedures().qmbPlannedProcedure().getValue().getIsLateralityApplicable())
		{
			isLaterality = true;
		}

		form.lyrIntra().tabPlannedProcedures().cmbLaterality().setVisible(isLaterality);
		form.lyrIntra().tabPlannedProcedures().lblPlannedLaterality().setVisible(isLaterality);
		if (isLaterality == false)
			form.lyrIntra().tabPlannedProcedures().cmbLaterality().setValue(null);
	}

	@Override
	protected void onQmbPerformedProcedureValueChanged() throws PresentationLogicException
	{
		qmbPerformedProcedureValueChanged();
	}

	private void qmbPerformedProcedureValueChanged()
	{
		boolean isLaterality = false;

		if (form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue() != null && form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue().getIsLateralityApplicableIsNotNull() && form.lyrIntra().tabPerformedProcedures().qmbPerformedProcedure().getValue().getIsLateralityApplicable())
		{
			isLaterality = true;
		}

		form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setVisible(isLaterality);
		form.lyrIntra().tabPerformedProcedures().lblPerformedLaterality().setVisible(isLaterality);
		if (isLaterality == false)
			form.lyrIntra().tabPerformedProcedures().cmbPerformedLaterality().setValue(null);
	}

	@Override
	protected void onBtnFlagPerformedClick() throws PresentationLogicException //WDEV-21840
	{
		form.getLocalContext().setPerformedProcedureMode(FormMode.EDIT);
		updatePerformedProcedureInstanceControlState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (menuItemID == GenForm.ContextMenus.ClinicalNamespace.IntraOpPerformedProcedures.FLAG_PERFORMED)
		{
			btnSavePerformedProcedureClick();
		}
	}

	@Override
	protected void onRadioButtonDiathermyModeValueChanged() throws PresentationLogicException
	{
		radioButtonDiathermyChanged();
	}

	private void radioButtonDiathermyChanged()
	{
		DiathermyModeEnumeration mode = form.lyrIntra().tabDiathermy().DiathermyMode().getValue();
		if (mode != null)
		{
			if (mode.equals(DiathermyModeEnumeration.rdoDiaMonopolar))
			{
				form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().setRequired(true);
				form.lyrIntra().tabDiathermy().txtDiaCoagSetting().setRequired(true);
				form.lyrIntra().tabDiathermy().cmbDiaPadSite().setRequired(true);
				form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setRequired(true);
				form.lyrIntra().tabDiathermy().txtDiaCut().setRequired(true);
				form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().setRequired(true);

			}
			else if (mode.equals(DiathermyModeEnumeration.rdoDiaBipolar))
			{
				form.lyrIntra().tabDiathermy().txtDiaCoagSetting().setRequired(true);
				form.lyrIntra().tabDiathermy().cmbDiaSerialNumber().setRequired(true);
				form.lyrIntra().tabDiathermy().qmbDiaAppliedBy().setRequired(false);
				form.lyrIntra().tabDiathermy().cmbDiaPadSite().setRequired(false);
				form.lyrIntra().tabDiathermy().txtDiaCut().setRequired(false);
				form.lyrIntra().tabDiathermy().qmbDiaRemovedBy().setRequired(false);

			}
		}
	}

	@Override
	protected void onBtnSaveAssessmentClick() throws PresentationLogicException
	{
		if (saveAssessment())
		{
			openAnaesTab();
		}
	}

	private boolean saveAssessment()
	{
		IntraOpCaseStaffDetailsVo caseStaffDetail = populateAnaesDataFromScreen(form.getLocalContext().getCaseDetails());
		String[] errors = caseStaffDetail.validate(validateAnaesUI()); //WDEV-21812

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return false;
		}

		try
		{
			domain.saveCaseStaffDetails(caseStaffDetail);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			openAnaesTab();

			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			openAnaesTab();

			return false;
		}

		return true;
	}

	private String[] validateAnaesUI() //WDEV-21812
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue()==null)
			uiErrors.add("Status is mandatory");
		
		if (PatientAssessmentStatusReason.COMPLETED.equals(form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue()) && form.lyrIntra().tabAnaestheticDetails().ccCompleted().getValue()==null)
		{
			uiErrors.add("Completing Information is mandatory");
		}
		
		return uiErrors.toArray(new String[0]);
	}
	
	private void openAnaesTab()
	{
		openCaseDetails();
		populateAnaesScreeFromData(form.getLocalContext().getCaseDetails());

		form.setMode(FormMode.VIEW);
	}

	private IntraOpCaseStaffDetailsVo populateAnaesDataFromScreen(IntraOpCaseStaffDetailsVo caseDetails)
	{
		boolean isAssessmentCompleted = form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue() != null && form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED);

		Patient_AssessmentVo voPatientAssessment = form.lyrIntra().tabAnaestheticDetails().ccAssessment().getPatient_Assessment();
		voPatientAssessment.setStatus(form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue());
		voPatientAssessment.setStatusReason(form.lyrIntra().tabAnaestheticDetails().cmbStatusReason().getValue());

		voPatientAssessment.setAuthoringInformation(form.lyrIntra().tabAnaestheticDetails().ccAuthoring().getValue());

		if (isAssessmentCompleted)
		{
			AuthoringInformationVo completedData = form.lyrIntra().tabAnaestheticDetails().ccCompleted().getValue();

			if (completedData != null)
			{
				voPatientAssessment.setCompletedDateTime(completedData.getAuthoringDateTime());
				voPatientAssessment.setCompletedHCP(completedData.getAuthoringHcp());
			}
		}
		else
		{
			voPatientAssessment.setCompletedDateTime(null);
			voPatientAssessment.setCompletedHCP(null);
		}

		if (voPatientAssessment.getPatient() == null)
			voPatientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());

		caseDetails.setPatientAssessment(voPatientAssessment);

		return caseDetails;
	}

	@Override
	protected void onBtnCancelEditAssessmentClick() throws PresentationLogicException
	{
		openAnaesTab();
	}

	@Override
	protected void onBtnEditAssessmentClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

		if (form.getLocalContext().getCaseDetails() == null || form.getLocalContext().getCaseDetails().getPatientAssessment() == null)
		{
			if (!initialiseAssessmentComponent())
				return;

			form.lyrIntra().tabAnaestheticDetails().cmbStatus().setValue(PatientAssessmentStatusReason.INPROGRESS);

			statusAssessmentValueChanged();

			form.lyrIntra().tabAnaestheticDetails().ccAuthoring().initializeComponent();
		}
		else if (form.getLocalContext().getCaseDetails().getPatientAssessment() != null)
		{
			if (domain.isPatientAssessmentCompleted(form.getLocalContext().getCaseDetails().getPatientAssessment()))
			{
				engine.showMessage("The Patient Assessment was completed by another user. The screen will be refreshed. ");
				openAnaesTab();

				return;
			}

			populateAssessmentComponent(form.getLocalContext().getCaseDetails().getPatientAssessment());
		}
	}

	@Override
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		statusAssessmentValueChanged();
		updateAnaesTabControlsState();
	}

	private void statusAssessmentValueChanged()
	{
		form.lyrIntra().tabAnaestheticDetails().cmbStatusReason().clear();

		loadReasonCombo();

		if (form.getMode().equals(FormMode.EDIT))
		{
			if (PatientAssessmentStatusReason.COMPLETED.equals(form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue()))
			{
				form.lyrIntra().tabAnaestheticDetails().ccCompleted().initializeComponent();
			}
			else
			{
				form.lyrIntra().tabAnaestheticDetails().ccCompleted().setValue(null);
			}
		}
	}

	private void loadReasonCombo()
	{
		PatientAssessmentStatusReason parentLkp = form.lyrIntra().tabAnaestheticDetails().cmbStatus().getValue();

		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());

		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getParent() != null && voColl.get(i).getParent().equals(parentLkp))
			{
				form.lyrIntra().tabAnaestheticDetails().cmbStatusReason().newRow(voColl.get(i), voColl.get(i).toString());
			}
		}
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	//WDEV-22285
	@Override
	protected void onGrdScrubNursesSelectionChanged() throws PresentationLogicException
	{
		updateCaseDetailsTabControlState();
	}

	//WDEV-22285
	@Override
	protected void onGrdAssistingSurgeonsSelectionChanged() throws PresentationLogicException
	{
		updateCaseDetailsTabControlState();
	}

	//WDEV-22032
	@Override
	protected void onImbRemovePositioningClick() throws PresentationLogicException
	{
		form.lyrIntra().tabPreparation().grdPositioningDevices().removeSelectedRow();
	}

	//WDEV-22032
	@Override
	protected void onImbAddPositioningClick() throws PresentationLogicException
	{
		form.lyrIntra().tabPreparation().grdPositioningDevices().getRows().newRow();
	}

	//WDEV-22032
	@Override
	protected void onGrdPositioningDevicesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onBtnRemoveTimesClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.RemoveIntraOpCaseTimesDialog, new Object[]{form.getLocalContext().getTimeValidationMap()});
	}

	//WDEV-21829
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getConfirmationRemoveSpecimenMessageIDIsNotNull() && form.getLocalContext().getConfirmationRemoveSpecimenMessageID() == messageBoxId && DialogResult.YES.equals(result))
		{
			domain.removeSpecimenIntraOP(form.lyrIntra().tabSpecimen().grdSpecimens().getValue());
			openSpecimenIntraOP();
			updateSpecimenTabControlState();
		}
		
		if (form.getLocalContext().getConfirmationRemoveWoundPackingMessageIDIsNotNull() && form.getLocalContext().getConfirmationRemoveWoundPackingMessageID() == messageBoxId && DialogResult.YES.equals(result))
		{
    		domain.removeWoundPackingIntraOp(form.lyrIntra().tabSpecimen().grdWoundPackings().getValue());
    		openWoundPackingIntraOp();
    		updateSpecimenTabControlState();
		}
		
		if (form.getLocalContext().getConfirmationRemoveSkinClosureMessageIDIsNotNull() && form.getLocalContext().getConfirmationRemoveSkinClosureMessageID() == messageBoxId && DialogResult.YES.equals(result))
		{
    		domain.removeSkinClosureIntraOp(form.lyrIntra().tabSpecimen().grdSkinClosures().getValue());
    		openSkinClosureIntraOp();
    		updateSpecimenTabControlState();
		}
		//WDEV-22548
		if (form.getLocalContext().getRIEPerformedProcedureConfirmationMsgIDIsNotNull() && form.getLocalContext().getRIEPerformedProcedureConfirmationMsgID() == messageBoxId && DialogResult.YES.equals(result))
		{
			engine.open(form.getForms().Core.RieConfirmationDialog);
		}
		
		//WDEV-22721
		if (form.getLocalContext().getConfirmationRemoveSkinPrepMessageIDIsNotNull() && form.getLocalContext().getConfirmationRemoveSkinPrepMessageID() == messageBoxId && DialogResult.YES.equals(result))
		{
			if (form.lyrIntra().tabPreparation().grdSkinPreparation().getValue()!=null && domain.getSkinPrep(form.lyrIntra().tabPreparation().grdSkinPreparation().getValue())==null)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				openSkinPreparation();
				updateSkinPreparationInstanceControlState();
				return;
			}
			
			domain.removeSkinPrep(form.lyrIntra().tabPreparation().grdSkinPreparation().getValue());
			openSkinPreparation();
			updateSkinPreparationInstanceControlState();
		}
	}

	//WDEV-22548
	private void riePerformedProcedure()
	{
		
		if (domain.isStale(form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue()))
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setPerformedProcedureMode(FormMode.VIEW);
			openPerformedProcedures();
			updatePerformedProcedureInstanceControlState();
			return;
		}
		
		try
		{
			domain.markAsRie(form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue(),engine.getFormName(), form.getGlobalContext().Core.getPatientShort().getID_Patient(), null, null, form.getGlobalContext().Core.getRieMessage());
			domain.markAsRie(form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue().getPerformedProcedure(),engine.getFormName(), form.getGlobalContext().Core.getPatientShort().getID_Patient(), null, null, form.getGlobalContext().Core.getRieMessage()); //WDEV-22644 
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		form.getLocalContext().setPerformedProcedureMode(FormMode.VIEW);
		openPerformedProcedures();
		updatePerformedProcedureInstanceControlState();
	}

	//WDEV-22548
	protected void onBtnRIEPerformedProcedureClick() throws PresentationLogicException
	{
		String procedureName = form.lyrIntra().tabPerformedProcedures().grdPerformedProcedures().getValue().getPerformedProcedure().getProcedure().getProcedureName();
		 
		form.getLocalContext().setRIEPerformedProcedureConfirmationMsgID(engine.showMessage( "Are you sure you wish to RIE the selected Performed Procedure: "+procedureName + " ?", "Confirmation Dialog", MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	//WDEV-21788
	@Override
	protected void onCcOperatingSurgeonValueChanged() throws PresentationLogicException
	{
		
		populateCaseServiceCombo();
		//WDEV-22305 //WDEV-21788
		if(form.getLocalContext().getTheatreSessionIsNotNull() && form.getLocalContext().getTheatreSession().getServiceIsNotNull())
		{
			form.lyrIntra().tabCaseDetails().cmbCaseService().setValue(form.getLocalContext().getTheatreSession().getService());
			form.getLocalContext().setselectedCaseService(form.getLocalContext().getTheatreSession().getService()); //WDEV-22650
		}
	}

	//WDEV-21788
	private void populateCaseServiceCombo()
	{
		form.lyrIntra().tabCaseDetails().cmbCaseService().clear();
		form.lyrIntra().tabCaseDetails().cmbCaseService().setValue(null); //WDEV-22650
		form.getLocalContext().setselectedCaseService(null); //WDEV-22650
		ServiceLiteVoCollection collService = new ServiceLiteVoCollection();
		
		if (form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().getValue()!=null)
		{
			collService = domain.listActiveService((HcpRefVo)form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().getValue());	
		}
		
		if (form.getLocalContext().getTheatreSessionIsNotNull() && form.getLocalContext().getTheatreSession().getServiceIsNotNull())
		{
			collService.add(form.getLocalContext().getTheatreSession().getService());
		}
		collService.sort(SortOrder.ASCENDING);
		
		for(ServiceLiteVo item : collService)
		{
			form.lyrIntra().tabCaseDetails().cmbCaseService().newRow(item, item.getServiceName());
		}
		
	}

	//WDEV-21788
	@Override
	protected void onChkDisplayRecoveryValueChanged() throws PresentationLogicException
	{
		updateCaseDetailsTabControlState();
	}

	//WDEV-22650
	@Override
	protected void onCmbCaseServiceValueChanged() throws PresentationLogicException
	{
		if (form.lyrIntra().tabCaseDetails().ccOperatingSurgeon().getValue()==null) //WDEV-22668
		{
			populateCaseServiceCombo();
			form.lyrIntra().tabCaseDetails().cmbCaseService().setValue(form.getLocalContext().getTheatreSession().getService());
		}
		
		form.getLocalContext().setselectedCaseService(form.lyrIntra().tabCaseDetails().cmbCaseService().getValue()); 
	
	}

	//WDEV-22721
	@Override
	protected void onBtnRemoveSkinPrepClick() throws PresentationLogicException
	{
		form.getLocalContext().setConfirmationRemoveSkinPrepMessageID(engine.showMessage("Are you sure you want to remove selected Skin Prep?", "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	//WDEV-22744
	@Override
	protected void onQmbPrepPerformedByTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.lyrIntra().tabPreparation().qmbPrepPerformedBy().clear();

		HcpLiteVoCollection voCollHcp;
		try
		{
			voCollHcp = domain.listCaseStaffHcps(value, form.getLocalContext().getCaseDetails());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.lyrIntra().tabPreparation().qmbPrepPerformedBy().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().toString());
		}

		if (voCollHcp.size() == 0)
			engine.showMessage("No matching records found");
		else if (voCollHcp.size() == 1)
			form.lyrIntra().tabPreparation().qmbPrepPerformedBy().setValue(voCollHcp.get(0));
		else
			form.lyrIntra().tabPreparation().qmbPrepPerformedBy().showOpened();
	}

}
