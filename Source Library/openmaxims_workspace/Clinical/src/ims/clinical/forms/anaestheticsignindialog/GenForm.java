//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.anaestheticsignindialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctn1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbAnaestheticTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
			{
				return super.control.removeRow(value);
			}
			public ims.clinical.vo.lookups.AnaestheticType getValue()
			{
				return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
			}
			public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdLAAnaesBlockTypeRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdLAAnaesBlockTypeRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolLAAnaesBlockTypeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolLAAnaesBlockTypeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolLAAnaesBlockTypeOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolLAAnaesBlockType()
			{
				return (String)super.row.get(0);
			}
			public void setcolLAAnaesBlockType(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolLAAnaesBlockTypeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.clinical.vo.lookups.LAAnaestheticBlockType getValue()
			{
				return (ims.clinical.vo.lookups.LAAnaestheticBlockType)super.row.getValue();
			}
			public void setValue(ims.clinical.vo.lookups.LAAnaestheticBlockType value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdLAAnaesBlockTypeRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdLAAnaesBlockTypeRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdLAAnaesBlockTypeRow get(int index)
			{
				return new grdLAAnaesBlockTypeRow(super.collection.get(index));
			}
			public grdLAAnaesBlockTypeRow newRow()
			{
				return new grdLAAnaesBlockTypeRow(super.collection.newRow());
			}
			public grdLAAnaesBlockTypeRow newRow(boolean autoSelect)
			{
				return new grdLAAnaesBlockTypeRow(super.collection.newRow(autoSelect));
			}
			public grdLAAnaesBlockTypeRow newRowAt(int index)
			{
				return new grdLAAnaesBlockTypeRow(super.collection.newRowAt(index));
			}
			public grdLAAnaesBlockTypeRow newRowAt(int index, boolean autoSelect)
			{
				return new grdLAAnaesBlockTypeRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdLAAnaesBlockTypeGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.clinical.vo.lookups.LAAnaestheticBlockType[] getValues()
			{
				ims.clinical.vo.lookups.LAAnaestheticBlockType[] listOfValues = new ims.clinical.vo.lookups.LAAnaestheticBlockType[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.clinical.vo.lookups.LAAnaestheticBlockType getValue()
			{
				return (ims.clinical.vo.lookups.LAAnaestheticBlockType)super.grid.getValue();
			}
			public void setValue(ims.clinical.vo.lookups.LAAnaestheticBlockType value)
			{
				super.grid.setValue(value);
			}
			public grdLAAnaesBlockTypeRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdLAAnaesBlockTypeRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdLAAnaesBlockTypeRowCollection getRows()
			{
				return new grdLAAnaesBlockTypeRowCollection(super.grid.getRows());
			}
			public grdLAAnaesBlockTypeRow getRowByValue(ims.clinical.vo.lookups.LAAnaestheticBlockType value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdLAAnaesBlockTypeRow(row);
			}
			public void setcolLAAnaesBlockTypeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolLAAnaesBlockTypeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
	
		public static class LeftAndRightSideCheckedRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 448, 928, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Bilateral", startTabIndex.intValue() + 54);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 376, 928, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Right", startTabIndex.intValue() + 53);
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 304, 928, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Left", startTabIndex.intValue() + 52);
			}
			public void setText(LeftAndRightSideCheckedEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public LeftAndRightSideCheckedEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return LeftAndRightSideCheckedEnumeration.None;
					case 0: return LeftAndRightSideCheckedEnumeration.rdoBilateral;
					case 1: return LeftAndRightSideCheckedEnumeration.rdoRight;
					case 2: return LeftAndRightSideCheckedEnumeration.rdoLeft;
				}
				return null;
			}
			public void setValue(LeftAndRightSideCheckedEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(LeftAndRightSideCheckedEnumeration.None.id);
			}
			public boolean isEnabled(LeftAndRightSideCheckedEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(LeftAndRightSideCheckedEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(LeftAndRightSideCheckedEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(LeftAndRightSideCheckedEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class LeftAndRightSideCheckedEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static LeftAndRightSideCheckedEnumeration None = new LeftAndRightSideCheckedEnumeration(-1);
			public static LeftAndRightSideCheckedEnumeration rdoBilateral = new LeftAndRightSideCheckedEnumeration(0);
			public static LeftAndRightSideCheckedEnumeration rdoRight = new LeftAndRightSideCheckedEnumeration(1);
			public static LeftAndRightSideCheckedEnumeration rdoLeft = new LeftAndRightSideCheckedEnumeration(2);
			private LeftAndRightSideCheckedEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((LeftAndRightSideCheckedEnumeration)o).id;
			}
			private int id;
		}
	
		public static class OperationSiteMarkedRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 376, 272, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "N/A", startTabIndex.intValue() + 19);
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 304, 272, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "Yes", startTabIndex.intValue() + 18);
			}
			public void setText(OperationSiteMarkedEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public OperationSiteMarkedEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return OperationSiteMarkedEnumeration.None;
					case 0: return OperationSiteMarkedEnumeration.rdoOpSiteMarkedNA;
					case 1: return OperationSiteMarkedEnumeration.rdoOpSiteMarkedYes;
				}
				return null;
			}
			public void setValue(OperationSiteMarkedEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(OperationSiteMarkedEnumeration.None.id);
			}
			public boolean isEnabled(OperationSiteMarkedEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(OperationSiteMarkedEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(OperationSiteMarkedEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(OperationSiteMarkedEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class OperationSiteMarkedEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static OperationSiteMarkedEnumeration None = new OperationSiteMarkedEnumeration(-1);
			public static OperationSiteMarkedEnumeration rdoOpSiteMarkedNA = new OperationSiteMarkedEnumeration(0);
			public static OperationSiteMarkedEnumeration rdoOpSiteMarkedYes = new OperationSiteMarkedEnumeration(1);
			private OperationSiteMarkedEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((OperationSiteMarkedEnumeration)o).id;
			}
			private int id;
		}
	
		public static class ProcedureAndSiteConfirmedByPractitionerRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 376, 248, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "N/A", startTabIndex.intValue() + 17);
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 304, 248, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Yes", startTabIndex.intValue() + 16);
			}
			public void setText(ProcedureAndSiteConfirmedByPractitionerEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public ProcedureAndSiteConfirmedByPractitionerEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return ProcedureAndSiteConfirmedByPractitionerEnumeration.None;
					case 0: return ProcedureAndSiteConfirmedByPractitionerEnumeration.rdoPractitionerConfirmedNA;
					case 1: return ProcedureAndSiteConfirmedByPractitionerEnumeration.rdoPractitionerConfirmedYes;
				}
				return null;
			}
			public void setValue(ProcedureAndSiteConfirmedByPractitionerEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(ProcedureAndSiteConfirmedByPractitionerEnumeration.None.id);
			}
			public boolean isEnabled(ProcedureAndSiteConfirmedByPractitionerEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(ProcedureAndSiteConfirmedByPractitionerEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(ProcedureAndSiteConfirmedByPractitionerEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(ProcedureAndSiteConfirmedByPractitionerEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class ProcedureAndSiteConfirmedByPractitionerEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static ProcedureAndSiteConfirmedByPractitionerEnumeration None = new ProcedureAndSiteConfirmedByPractitionerEnumeration(-1);
			public static ProcedureAndSiteConfirmedByPractitionerEnumeration rdoPractitionerConfirmedNA = new ProcedureAndSiteConfirmedByPractitionerEnumeration(0);
			public static ProcedureAndSiteConfirmedByPractitionerEnumeration rdoPractitionerConfirmedYes = new ProcedureAndSiteConfirmedByPractitionerEnumeration(1);
			private ProcedureAndSiteConfirmedByPractitionerEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((ProcedureAndSiteConfirmedByPractitionerEnumeration)o).id;
			}
			private int id;
		}
	
		public static class ProcedureAndSiteConfirmedByPatientRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 376, 224, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Unable", startTabIndex.intValue() + 15);
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 304, 224, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "Yes", startTabIndex.intValue() + 14);
			}
			public void setText(ProcedureAndSiteConfirmedByPatientEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public ProcedureAndSiteConfirmedByPatientEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return ProcedureAndSiteConfirmedByPatientEnumeration.None;
					case 0: return ProcedureAndSiteConfirmedByPatientEnumeration.rdoPatientConfirmedUnable;
					case 1: return ProcedureAndSiteConfirmedByPatientEnumeration.rdoPatientConfirmedYes;
				}
				return null;
			}
			public void setValue(ProcedureAndSiteConfirmedByPatientEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(ProcedureAndSiteConfirmedByPatientEnumeration.None.id);
			}
			public boolean isEnabled(ProcedureAndSiteConfirmedByPatientEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(ProcedureAndSiteConfirmedByPatientEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(ProcedureAndSiteConfirmedByPatientEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(ProcedureAndSiteConfirmedByPatientEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class ProcedureAndSiteConfirmedByPatientEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static ProcedureAndSiteConfirmedByPatientEnumeration None = new ProcedureAndSiteConfirmedByPatientEnumeration(-1);
			public static ProcedureAndSiteConfirmedByPatientEnumeration rdoPatientConfirmedUnable = new ProcedureAndSiteConfirmedByPatientEnumeration(0);
			public static ProcedureAndSiteConfirmedByPatientEnumeration rdoPatientConfirmedYes = new ProcedureAndSiteConfirmedByPatientEnumeration(1);
			private ProcedureAndSiteConfirmedByPatientEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((ProcedureAndSiteConfirmedByPatientEnumeration)o).id;
			}
			private int id;
		}
	
		public static class IsPatientDiabeticRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 376, 173, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "No", startTabIndex.intValue() + 12);
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 304, 173, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "Yes", startTabIndex.intValue() + 11);
			}
			public void setText(IsPatientDiabeticEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public IsPatientDiabeticEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return IsPatientDiabeticEnumeration.None;
					case 0: return IsPatientDiabeticEnumeration.rdoDiabeticNo;
					case 1: return IsPatientDiabeticEnumeration.rdoDiabeticYes;
				}
				return null;
			}
			public void setValue(IsPatientDiabeticEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(IsPatientDiabeticEnumeration.None.id);
			}
			public boolean isEnabled(IsPatientDiabeticEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(IsPatientDiabeticEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(IsPatientDiabeticEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(IsPatientDiabeticEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class IsPatientDiabeticEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static IsPatientDiabeticEnumeration None = new IsPatientDiabeticEnumeration(-1);
			public static IsPatientDiabeticEnumeration rdoDiabeticNo = new IsPatientDiabeticEnumeration(0);
			public static IsPatientDiabeticEnumeration rdoDiabeticYes = new IsPatientDiabeticEnumeration(1);
			private IsPatientDiabeticEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((IsPatientDiabeticEnumeration)o).id;
			}
			private int id;
		}
	
		public static class AllergiesConfirmedByPatientRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 376, 123, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Unable", startTabIndex.intValue() + 9);
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 304, 123, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "Yes", startTabIndex.intValue() + 8);
			}
			public void setText(AllergiesConfirmedByPatientEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public AllergiesConfirmedByPatientEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return AllergiesConfirmedByPatientEnumeration.None;
					case 0: return AllergiesConfirmedByPatientEnumeration.rdoAllergiesUnable;
					case 1: return AllergiesConfirmedByPatientEnumeration.rdoAllergiesYes;
				}
				return null;
			}
			public void setValue(AllergiesConfirmedByPatientEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(AllergiesConfirmedByPatientEnumeration.None.id);
			}
			public boolean isEnabled(AllergiesConfirmedByPatientEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(AllergiesConfirmedByPatientEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(AllergiesConfirmedByPatientEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(AllergiesConfirmedByPatientEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class AllergiesConfirmedByPatientEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static AllergiesConfirmedByPatientEnumeration None = new AllergiesConfirmedByPatientEnumeration(-1);
			public static AllergiesConfirmedByPatientEnumeration rdoAllergiesUnable = new AllergiesConfirmedByPatientEnumeration(0);
			public static AllergiesConfirmedByPatientEnumeration rdoAllergiesYes = new AllergiesConfirmedByPatientEnumeration(1);
			private AllergiesConfirmedByPatientEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((AllergiesConfirmedByPatientEnumeration)o).id;
			}
			private int id;
		}
	
		public static class IdentityConsentRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 304, 73, 344, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "ID bracelet checked against consent as patient unable to confirm", startTabIndex.intValue() + 6);
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 304, 48, 344, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper15.getX(), anchoringHelper15.getY(), anchoringHelper15.getWidth(), "Patient confirmed his/her identity against consent and ID bracelet", startTabIndex.intValue() + 5);
			}
			public void setText(IdentityConsentEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public IdentityConsentEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return IdentityConsentEnumeration.None;
					case 0: return IdentityConsentEnumeration.rdoIdBracelet;
					case 1: return IdentityConsentEnumeration.rdoPatientConfirmed;
				}
				return null;
			}
			public void setValue(IdentityConsentEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(IdentityConsentEnumeration.None.id);
			}
			public boolean isEnabled(IdentityConsentEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(IdentityConsentEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(IdentityConsentEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(IdentityConsentEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class IdentityConsentEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static IdentityConsentEnumeration None = new IdentityConsentEnumeration(-1);
			public static IdentityConsentEnumeration rdoIdBracelet = new IdentityConsentEnumeration(0);
			public static IdentityConsentEnumeration rdoPatientConfirmed = new IdentityConsentEnumeration(1);
			private IdentityConsentEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((IdentityConsentEnumeration)o).id;
			}
			private int id;
		}
	
		public static class IntraOperativeFluidsRequiredRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 376, 599, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "No", startTabIndex.intValue() + 43);
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 304, 599, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "Yes", startTabIndex.intValue() + 42);
			}
			public void setText(IntraOperativeFluidsRequiredEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public IntraOperativeFluidsRequiredEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return IntraOperativeFluidsRequiredEnumeration.None;
					case 0: return IntraOperativeFluidsRequiredEnumeration.rdoIntraFluidsNo;
					case 1: return IntraOperativeFluidsRequiredEnumeration.rdoIntraFluidsYes;
				}
				return null;
			}
			public void setValue(IntraOperativeFluidsRequiredEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(IntraOperativeFluidsRequiredEnumeration.None.id);
			}
			public boolean isEnabled(IntraOperativeFluidsRequiredEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(IntraOperativeFluidsRequiredEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(IntraOperativeFluidsRequiredEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(IntraOperativeFluidsRequiredEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class IntraOperativeFluidsRequiredEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static IntraOperativeFluidsRequiredEnumeration None = new IntraOperativeFluidsRequiredEnumeration(-1);
			public static IntraOperativeFluidsRequiredEnumeration rdoIntraFluidsNo = new IntraOperativeFluidsRequiredEnumeration(0);
			public static IntraOperativeFluidsRequiredEnumeration rdoIntraFluidsYes = new IntraOperativeFluidsRequiredEnumeration(1);
			private IntraOperativeFluidsRequiredEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((IntraOperativeFluidsRequiredEnumeration)o).id;
			}
			private int id;
		}
	
		public static class KnownDifficultAirwayRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 376, 513, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper18.getX(), anchoringHelper18.getY(), anchoringHelper18.getWidth(), "No", startTabIndex.intValue() + 38);
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 304, 513, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper19.getX(), anchoringHelper19.getY(), anchoringHelper19.getWidth(), "Yes", startTabIndex.intValue() + 37);
			}
			public void setText(KnownDifficultAirwayEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public KnownDifficultAirwayEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return KnownDifficultAirwayEnumeration.None;
					case 0: return KnownDifficultAirwayEnumeration.rdoPatientDifficultNo;
					case 1: return KnownDifficultAirwayEnumeration.rdoPatientDifficultYes;
				}
				return null;
			}
			public void setValue(KnownDifficultAirwayEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(KnownDifficultAirwayEnumeration.None.id);
			}
			public boolean isEnabled(KnownDifficultAirwayEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(KnownDifficultAirwayEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(KnownDifficultAirwayEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(KnownDifficultAirwayEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class KnownDifficultAirwayEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static KnownDifficultAirwayEnumeration None = new KnownDifficultAirwayEnumeration(-1);
			public static KnownDifficultAirwayEnumeration rdoPatientDifficultNo = new KnownDifficultAirwayEnumeration(0);
			public static KnownDifficultAirwayEnumeration rdoPatientDifficultYes = new KnownDifficultAirwayEnumeration(1);
			private KnownDifficultAirwayEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((KnownDifficultAirwayEnumeration)o).id;
			}
			private int id;
		}
	
		public static class ASAClassRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 480, 435, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper20.getX(), anchoringHelper20.getY(), anchoringHelper20.getWidth(), "5", startTabIndex.intValue() + 34);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 344, 435, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper21.getX(), anchoringHelper21.getY(), anchoringHelper21.getWidth(), "2", startTabIndex.intValue() + 28);
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 432, 435, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(2, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "4", startTabIndex.intValue() + 32);
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 392, 435, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(3, anchoringHelper23.getX(), anchoringHelper23.getY(), anchoringHelper23.getWidth(), "3", startTabIndex.intValue() + 30);
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 304, 435, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(4, anchoringHelper24.getX(), anchoringHelper24.getY(), anchoringHelper24.getWidth(), "1", startTabIndex.intValue() + 26);
			}
			public void setText(ASAClassEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public ASAClassEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return ASAClassEnumeration.None;
					case 0: return ASAClassEnumeration.rdoASA5;
					case 1: return ASAClassEnumeration.rdoASA2;
					case 2: return ASAClassEnumeration.rdoASA4;
					case 3: return ASAClassEnumeration.rdoASA3;
					case 4: return ASAClassEnumeration.rdoASA1;
				}
				return null;
			}
			public void setValue(ASAClassEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(ASAClassEnumeration.None.id);
			}
			public boolean isEnabled(ASAClassEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(ASAClassEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(ASAClassEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(ASAClassEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class ASAClassEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static ASAClassEnumeration None = new ASAClassEnumeration(-1);
			public static ASAClassEnumeration rdoASA5 = new ASAClassEnumeration(0);
			public static ASAClassEnumeration rdoASA2 = new ASAClassEnumeration(1);
			public static ASAClassEnumeration rdoASA4 = new ASAClassEnumeration(2);
			public static ASAClassEnumeration rdoASA3 = new ASAClassEnumeration(3);
			public static ASAClassEnumeration rdoASA1 = new ASAClassEnumeration(4);
			private ASAClassEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((ASAClassEnumeration)o).id;
			}
			private int id;
		}
	
		public static class PatientStarvedRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 448, 409, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper25.getX(), anchoringHelper25.getY(), anchoringHelper25.getWidth(), "N/A", startTabIndex.intValue() + 25);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 376, 409, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper26.getX(), anchoringHelper26.getY(), anchoringHelper26.getWidth(), "No", startTabIndex.intValue() + 24);
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 304, 409, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(2, anchoringHelper27.getX(), anchoringHelper27.getY(), anchoringHelper27.getWidth(), "Yes", startTabIndex.intValue() + 23);
			}
			public void setText(PatientStarvedEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public PatientStarvedEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return PatientStarvedEnumeration.None;
					case 0: return PatientStarvedEnumeration.rdoStarvedNA;
					case 1: return PatientStarvedEnumeration.rdoStarvedNo;
					case 2: return PatientStarvedEnumeration.rdoStarvedYes;
				}
				return null;
			}
			public void setValue(PatientStarvedEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(PatientStarvedEnumeration.None.id);
			}
			public boolean isEnabled(PatientStarvedEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(PatientStarvedEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(PatientStarvedEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(PatientStarvedEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class PatientStarvedEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static PatientStarvedEnumeration None = new PatientStarvedEnumeration(-1);
			public static PatientStarvedEnumeration rdoStarvedNA = new PatientStarvedEnumeration(0);
			public static PatientStarvedEnumeration rdoStarvedNo = new PatientStarvedEnumeration(1);
			public static PatientStarvedEnumeration rdoStarvedYes = new PatientStarvedEnumeration(2);
			private PatientStarvedEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((PatientStarvedEnumeration)o).id;
			}
			private int id;
		}
	
		public static class RiskOrGeaterThan500mlBloodLossRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 376, 539, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper28.getX(), anchoringHelper28.getY(), anchoringHelper28.getWidth(), "No", startTabIndex.intValue() + 40);
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 304, 539, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper29.getX(), anchoringHelper29.getY(), anchoringHelper29.getWidth(), "Yes", startTabIndex.intValue() + 39);
			}
			public void setText(RiskOrGeaterThan500mlBloodLossEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public RiskOrGeaterThan500mlBloodLossEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return RiskOrGeaterThan500mlBloodLossEnumeration.None;
					case 0: return RiskOrGeaterThan500mlBloodLossEnumeration.rdoRisk500No;
					case 1: return RiskOrGeaterThan500mlBloodLossEnumeration.rdoRisk500Yes;
				}
				return null;
			}
			public void setValue(RiskOrGeaterThan500mlBloodLossEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(RiskOrGeaterThan500mlBloodLossEnumeration.None.id);
			}
			public boolean isEnabled(RiskOrGeaterThan500mlBloodLossEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(RiskOrGeaterThan500mlBloodLossEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(RiskOrGeaterThan500mlBloodLossEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(RiskOrGeaterThan500mlBloodLossEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class RiskOrGeaterThan500mlBloodLossEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static RiskOrGeaterThan500mlBloodLossEnumeration None = new RiskOrGeaterThan500mlBloodLossEnumeration(-1);
			public static RiskOrGeaterThan500mlBloodLossEnumeration rdoRisk500No = new RiskOrGeaterThan500mlBloodLossEnumeration(0);
			public static RiskOrGeaterThan500mlBloodLossEnumeration rdoRisk500Yes = new RiskOrGeaterThan500mlBloodLossEnumeration(1);
			private RiskOrGeaterThan500mlBloodLossEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((RiskOrGeaterThan500mlBloodLossEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 728, 788, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Sign", new Integer(0), ""}));
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 808, 788, 174, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Stop before you block", new Integer(0), ""}));
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 788, 312, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"ID, Allergies & OP Site Checks", new Integer(0), ""}));
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 328, 788, 392, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Anaesthetic Checks", new Integer(0), ""}));
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 304, 760, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_ccRegsteredPractitionerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper34.getSize(), instance1, startTabIndex.intValue() + 49, skipContextValidation);
			//ims.framework.Control m_ccRegsteredPractitionerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(304), new Integer(760), new Integer(320), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 49), m_ccRegsteredPractitionerForm, instance1 } );
			ims.framework.Control m_ccRegsteredPractitionerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 49), m_ccRegsteredPractitionerForm, instance1, Boolean.TRUE } );
			super.addControl(m_ccRegsteredPractitionerControl);
			Menu[] menus1 = m_ccRegsteredPractitionerForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 304, 952, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_ccAnaesthetistSignForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper35.getSize(), instance2, startTabIndex.intValue() + 55, skipContextValidation);
			//ims.framework.Control m_ccAnaesthetistSignControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(304), new Integer(952), new Integer(320), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 55), m_ccAnaesthetistSignForm, instance2 } );
			ims.framework.Control m_ccAnaesthetistSignControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 55), m_ccAnaesthetistSignForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccAnaesthetistSignControl);
			Menu[] menus2 = m_ccAnaesthetistSignForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 640, 762, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 123, 760, 185, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Signature by registered practitioner:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 536, 928, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 640, 954, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 392, 840, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 41, 928, 273, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Left and Right Side checked and correct side marked?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 211, 954, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist sign:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 704, 64, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 440, 272, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 440, 248, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 440, 224, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 440, 173, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 440, 123, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 464, 98, 170, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(Check for Alert Icon on PID Bar)", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 185, 272, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Operation Site Marked?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 76, 248, 235, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure and Site Confirmed by Practitioner?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 97, 224, 213, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure and Site Confirmed by Patient?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 187, 173, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is the Patient Diabetic?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 151, 123, 158, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Allergies confirmed by patient?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 213, 48, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Identity Consent:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 400, 653, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Celsius", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 448, 599, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 448, 539, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 448, 513, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 528, 409, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 528, 435, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 163, 684, 146, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre-op Blood Glucose result:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 130, 653, 178, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Pre-induction temperature:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 147, 599, 159, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Intra-operative fluids required?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 84, 539, 233, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is there a risk of >500ml blood loss (7ml/kg):", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 210, 352, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Type:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 15, 501, 288, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Does this patient have a known difficult airway/aspiration\n risk and is the appropriate equipment/assistance available?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 245, 435, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ASA Class:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 214, 409, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " Patient Starved?", new Integer(0), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 488, 621, 296, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Antibiotics given and administration record completed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Orange, ims.framework.utils.Color.Black }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 520, 294, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 504, 198, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 600, 144, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 424, 96, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 304, 352, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbAnaestheticTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbAnaestheticTypeTemp);
			cmbAnaestheticTypeComboBox cmbAnaestheticType = (cmbAnaestheticTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticTypeComboBox.class, m_cmbAnaestheticTypeTemp);
			super.addComboBox(cmbAnaestheticType);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 304, 148, 264, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Allergies bracelet present and correct, if required", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 304, 98, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Allergies Checked", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 304, 296, 200, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Relevant Charts and Notes Present", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 304, 200, 192, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Anticoagulant Status Confirmed", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 304, 625, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Antibiotics Required", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 304, 565, 408, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"G & S / Electronic Issues or cross matched/cell salvage with operator is available", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 304, 487, 280, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Dentures, Implants or Loose Teeth Check Complete", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 304, 461, 280, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Anaesthetic machines and medication check complete", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 304, 383, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Regional Block Required", Boolean.TRUE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 112, 840, 272, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdLAAnaesBlockTypeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdLAAnaesBlockTypeTemp);
			grdLAAnaesBlockTypeGrid grdLAAnaesBlockType = (grdLAAnaesBlockTypeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdLAAnaesBlockTypeGrid.class, m_grdLAAnaesBlockTypeTemp);
			grdLAAnaesBlockType.addStringColumn("LA Anaesthetic Block Type", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdLAAnaesBlockType.addBoolColumn("Select", 0, 0, -1, false, false, 0, true);
			super.addGrid(grdLAAnaesBlockType);
	
			// Time Controls
			RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 440, 623, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
	
			// DecimalBox Controls
			RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 304, 651, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
			RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 304, 682, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.TRUE}));
	
			// RadioButton Controls
			RadioButton tmpLeftAndRightSideChecked = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpLeftAndRightSideChecked);
			LeftAndRightSideCheckedRadioButton LeftAndRightSideChecked = (LeftAndRightSideCheckedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(LeftAndRightSideCheckedRadioButton.class, tmpLeftAndRightSideChecked);
			LeftAndRightSideChecked.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(LeftAndRightSideChecked);
			RadioButton tmpOperationSiteMarked = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpOperationSiteMarked);
			OperationSiteMarkedRadioButton OperationSiteMarked = (OperationSiteMarkedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(OperationSiteMarkedRadioButton.class, tmpOperationSiteMarked);
			OperationSiteMarked.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(OperationSiteMarked);
			RadioButton tmpProcedureAndSiteConfirmedByPractitioner = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpProcedureAndSiteConfirmedByPractitioner);
			ProcedureAndSiteConfirmedByPractitionerRadioButton ProcedureAndSiteConfirmedByPractitioner = (ProcedureAndSiteConfirmedByPractitionerRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(ProcedureAndSiteConfirmedByPractitionerRadioButton.class, tmpProcedureAndSiteConfirmedByPractitioner);
			ProcedureAndSiteConfirmedByPractitioner.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(ProcedureAndSiteConfirmedByPractitioner);
			RadioButton tmpProcedureAndSiteConfirmedByPatient = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpProcedureAndSiteConfirmedByPatient);
			ProcedureAndSiteConfirmedByPatientRadioButton ProcedureAndSiteConfirmedByPatient = (ProcedureAndSiteConfirmedByPatientRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(ProcedureAndSiteConfirmedByPatientRadioButton.class, tmpProcedureAndSiteConfirmedByPatient);
			ProcedureAndSiteConfirmedByPatient.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(ProcedureAndSiteConfirmedByPatient);
			RadioButton tmpIsPatientDiabetic = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpIsPatientDiabetic);
			IsPatientDiabeticRadioButton IsPatientDiabetic = (IsPatientDiabeticRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(IsPatientDiabeticRadioButton.class, tmpIsPatientDiabetic);
			IsPatientDiabetic.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(IsPatientDiabetic);
			RadioButton tmpAllergiesConfirmedByPatient = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpAllergiesConfirmedByPatient);
			AllergiesConfirmedByPatientRadioButton AllergiesConfirmedByPatient = (AllergiesConfirmedByPatientRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(AllergiesConfirmedByPatientRadioButton.class, tmpAllergiesConfirmedByPatient);
			AllergiesConfirmedByPatient.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(AllergiesConfirmedByPatient);
			RadioButton tmpIdentityConsent = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpIdentityConsent);
			IdentityConsentRadioButton IdentityConsent = (IdentityConsentRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(IdentityConsentRadioButton.class, tmpIdentityConsent);
			IdentityConsent.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(IdentityConsent);
			RadioButton tmpIntraOperativeFluidsRequired = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpIntraOperativeFluidsRequired);
			IntraOperativeFluidsRequiredRadioButton IntraOperativeFluidsRequired = (IntraOperativeFluidsRequiredRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(IntraOperativeFluidsRequiredRadioButton.class, tmpIntraOperativeFluidsRequired);
			IntraOperativeFluidsRequired.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(IntraOperativeFluidsRequired);
			RadioButton tmpKnownDifficultAirway = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpKnownDifficultAirway);
			KnownDifficultAirwayRadioButton KnownDifficultAirway = (KnownDifficultAirwayRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(KnownDifficultAirwayRadioButton.class, tmpKnownDifficultAirway);
			KnownDifficultAirway.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(KnownDifficultAirway);
			RadioButton tmpASAClass = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpASAClass);
			ASAClassRadioButton ASAClass = (ASAClassRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(ASAClassRadioButton.class, tmpASAClass);
			ASAClass.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(ASAClass);
			RadioButton tmpPatientStarved = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpPatientStarved);
			PatientStarvedRadioButton PatientStarved = (PatientStarvedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(PatientStarvedRadioButton.class, tmpPatientStarved);
			PatientStarved.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(PatientStarved);
			RadioButton tmpRiskOrGeaterThan500mlBloodLoss = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpRiskOrGeaterThan500mlBloodLoss);
			RiskOrGeaterThan500mlBloodLossRadioButton RiskOrGeaterThan500mlBloodLoss = (RiskOrGeaterThan500mlBloodLossRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(RiskOrGeaterThan500mlBloodLossRadioButton.class, tmpRiskOrGeaterThan500mlBloodLoss);
			RiskOrGeaterThan500mlBloodLoss.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(RiskOrGeaterThan500mlBloodLoss);
		}
		public Panel pnlStop()
		{
			return (Panel)super.getControl(1);
		}
		public ims.core.forms.mosquery.IComponent ccRegsteredPractitioner()
		{
			return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
		}
		public void setccRegsteredPractitionerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
		}
		public void setccRegsteredPractitionerVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(4)).setVisible(value);
		}
		public boolean isccRegsteredPractitionerVisible()
		{
			return ((ims.framework.Control)super.getControl(4)).isVisible();
		}
		public void setccRegsteredPractitionerEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(4)).setEnabled(value);
		}
		public boolean isccRegsteredPractitionerEnabled()
		{
			return ((ims.framework.Control)super.getControl(4)).isEnabled();
		}
		public ims.core.forms.mosquery.IComponent ccAnaesthetistSign()
		{
			return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(5)).getLogic();
		}
		public void setccAnaesthetistSignValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(5)).setValueChangedEvent(delegate);
		}
		public void setccAnaesthetistSignVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(5)).setVisible(value);
		}
		public boolean isccAnaesthetistSignVisible()
		{
			return ((ims.framework.Control)super.getControl(5)).isVisible();
		}
		public void setccAnaesthetistSignEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(5)).setEnabled(value);
		}
		public boolean isccAnaesthetistSignEnabled()
		{
			return ((ims.framework.Control)super.getControl(5)).isEnabled();
		}
		public Label lblRequired14()
		{
			return (Label)super.getControl(6);
		}
		public Label lblLeftAndRightRequired()
		{
			return (Label)super.getControl(8);
		}
		public Label lblAnaesSignRequired()
		{
			return (Label)super.getControl(9);
		}
		public Label lblLABlockTypeRequired()
		{
			return (Label)super.getControl(10);
		}
		public Label lblLeftAndRight()
		{
			return (Label)super.getControl(11);
		}
		public Label lblAnaesSign()
		{
			return (Label)super.getControl(12);
		}
		public Label lblIdentityConsent()
		{
			return (Label)super.getControl(13);
		}
		public Label lblRequired7()
		{
			return (Label)super.getControl(14);
		}
		public Label lblRequired6()
		{
			return (Label)super.getControl(15);
		}
		public Label lblRequired5()
		{
			return (Label)super.getControl(16);
		}
		public Label lblRequired4()
		{
			return (Label)super.getControl(17);
		}
		public Label lblRequired1()
		{
			return (Label)super.getControl(18);
		}
		public Label lblSeeBannerBar()
		{
			return (Label)super.getControl(19);
		}
		public Label lblRequired13()
		{
			return (Label)super.getControl(27);
		}
		public Label lblRequired12()
		{
			return (Label)super.getControl(28);
		}
		public Label lblRequired11()
		{
			return (Label)super.getControl(29);
		}
		public Label lblPStarvedRequired()
		{
			return (Label)super.getControl(30);
		}
		public Label lblRequired8()
		{
			return (Label)super.getControl(31);
		}
		public Label lblBloodGlucose()
		{
			return (Label)super.getControl(32);
		}
		public Label lblPatientTemp()
		{
			return (Label)super.getControl(33);
		}
		public Label lblIntraOpFluids()
		{
			return (Label)super.getControl(34);
		}
		public Label lblBloodLoss()
		{
			return (Label)super.getControl(35);
		}
		public Label lblKnownDiff()
		{
			return (Label)super.getControl(37);
		}
		public Label lbl1ASAClass()
		{
			return (Label)super.getControl(38);
		}
		public Label lblPStarved()
		{
			return (Label)super.getControl(39);
		}
		public Button btnAntiobioticsGiven()
		{
			return (Button)super.getControl(40);
		}
		public TextBox txtRelevantChartsMandatory()
		{
			return (TextBox)super.getControl(41);
		}
		public TextBox txtAnticoagulantStausConfirmedMandatory()
		{
			return (TextBox)super.getControl(42);
		}
		public TextBox txtAllergiesBraceletMandatory()
		{
			return (TextBox)super.getControl(43);
		}
		public TextBox txtAllergiesCheckedMandatory()
		{
			return (TextBox)super.getControl(44);
		}
		public cmbAnaestheticTypeComboBox cmbAnaestheticType()
		{
			return (cmbAnaestheticTypeComboBox)super.getComboBox(0);
		}
		public CheckBox chkAllergiesBracelet()
		{
			return (CheckBox)super.getControl(46);
		}
		public CheckBox chkAllergies()
		{
			return (CheckBox)super.getControl(47);
		}
		public CheckBox chkRelevantChartsNotes()
		{
			return (CheckBox)super.getControl(48);
		}
		public CheckBox chkAnticoagulant()
		{
			return (CheckBox)super.getControl(49);
		}
		public CheckBox chkAntibiotics()
		{
			return (CheckBox)super.getControl(50);
		}
		public CheckBox chkGandSElectronic()
		{
			return (CheckBox)super.getControl(51);
		}
		public CheckBox chkAnyDentures()
		{
			return (CheckBox)super.getControl(52);
		}
		public CheckBox chkAnaestheticMachines()
		{
			return (CheckBox)super.getControl(53);
		}
		public CheckBox chkRegionalBlock()
		{
			return (CheckBox)super.getControl(54);
		}
		public grdLAAnaesBlockTypeGrid grdLAAnaesBlockType()
		{
			return (grdLAAnaesBlockTypeGrid)super.getGrid(0);
		}
		public TimeControl timAntibioticsGiven()
		{
			return (TimeControl)super.getControl(56);
		}
		public DecimalBox decPreInductionTemperature()
		{
			return (DecimalBox)super.getControl(57);
		}
		public DecimalBox decPreOPBloodGlucose()
		{
			return (DecimalBox)super.getControl(58);
		}
		public LeftAndRightSideCheckedRadioButton LeftAndRightSideChecked()
		{
			return (LeftAndRightSideCheckedRadioButton)super.getRadioButton(0);
		}
		public OperationSiteMarkedRadioButton OperationSiteMarked()
		{
			return (OperationSiteMarkedRadioButton)super.getRadioButton(1);
		}
		public ProcedureAndSiteConfirmedByPractitionerRadioButton ProcedureAndSiteConfirmedByPractitioner()
		{
			return (ProcedureAndSiteConfirmedByPractitionerRadioButton)super.getRadioButton(2);
		}
		public ProcedureAndSiteConfirmedByPatientRadioButton ProcedureAndSiteConfirmedByPatient()
		{
			return (ProcedureAndSiteConfirmedByPatientRadioButton)super.getRadioButton(3);
		}
		public IsPatientDiabeticRadioButton IsPatientDiabetic()
		{
			return (IsPatientDiabeticRadioButton)super.getRadioButton(4);
		}
		public AllergiesConfirmedByPatientRadioButton AllergiesConfirmedByPatient()
		{
			return (AllergiesConfirmedByPatientRadioButton)super.getRadioButton(5);
		}
		public IdentityConsentRadioButton IdentityConsent()
		{
			return (IdentityConsentRadioButton)super.getRadioButton(6);
		}
		public IntraOperativeFluidsRequiredRadioButton IntraOperativeFluidsRequired()
		{
			return (IntraOperativeFluidsRequiredRadioButton)super.getRadioButton(7);
		}
		public KnownDifficultAirwayRadioButton KnownDifficultAirway()
		{
			return (KnownDifficultAirwayRadioButton)super.getRadioButton(8);
		}
		public ASAClassRadioButton ASAClass()
		{
			return (ASAClassRadioButton)super.getRadioButton(9);
		}
		public PatientStarvedRadioButton PatientStarved()
		{
			return (PatientStarvedRadioButton)super.getRadioButton(10);
		}
		public RiskOrGeaterThan500mlBloodLossRadioButton RiskOrGeaterThan500mlBloodLoss()
		{
			return (RiskOrGeaterThan500mlBloodLossRadioButton)super.getRadioButton(11);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Clinical.TheatreBookingRef", "_cv_Clinical.TheatreBookingRef").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Clinical.TheatreBookingRef' is not available.");
		if(new ims.framework.ContextVariable("Clinical.TheatreAppointmentRef", "_cv_Clinical.TheatreAppointmentRef").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Clinical.TheatreAppointmentRef' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(896, 760);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 32, 96, 826, 600, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Container m_ctn1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, new Boolean(false)});
		addControl(m_ctn1);
		ctn1Container ctn1 = (ctn1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctn1Container.class, m_ctn1, factory);
		ims.framework.utils.SizeInfo m_ctn1DesignSize = new ims.framework.utils.SizeInfo(826, 600);
		ims.framework.utils.SizeInfo m_ctn1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper89.getWidth(), anchoringHelper89.getHeight());
		ctn1.setContext(form, appForm, m_ctn1, loader, startControlID, m_ctn1DesignSize, m_ctn1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctn1);

		// Label Controls
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 856, 64, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 216, 40, 152, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<proc 2 name and laterality>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 216, 16, 152, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<proc 1 name and laterality>", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 32, 40, 190, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Planned Procedure details:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned Procedure details:", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 32, 61, 136, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Chartable Occurrences", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 544, 56, 128, 34, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Sign In", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Peru, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 722, 720, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 802, 720, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 696, 64, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// Time Controls
		RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 808, 64, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ctn1Container ctn1()
	{
		return (ctn1Container)super.getContainer(0);
	}
	public Label lblSignInTimeRequired()
	{
		return (Label)super.getControl(1);
	}
	public Label lblAdditionalPlannedProcedureDetails()
	{
		return (Label)super.getControl(2);
	}
	public Label lblPlannedDetails()
	{
		return (Label)super.getControl(3);
	}
	public Button btnChartableOccurences()
	{
		return (Button)super.getControl(6);
	}
	public Button btnAnaestheticSignIn()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public DateControl dteAnestheticSignIn()
	{
		return (DateControl)super.getControl(10);
	}
	public TimeControl timAnaestheticSignIn()
	{
		return (TimeControl)super.getControl(11);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ChartableOccurencesDialog = new LocalFormName(123306);
				AcuteTheatreCaseTimesDialog = new LocalFormName(123307);
			}
			public final FormName ChartableOccurencesDialog;
			public final FormName AcuteTheatreCaseTimesDialog;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PeriOpAnaesthticSignInTimVo = new ims.framework.ContextVariable("PeriOpAnaesthticSignInTimVo", prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__PeriOpAnaesthticSignInTimVo_" + componentIdentifier + "");
			cxl_AnaestheticSignIn = new ims.framework.ContextVariable("AnaestheticSignIn", prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier + "");
			cxl_NoAnaesthetistPresent = new ims.framework.ContextVariable("NoAnaesthetistPresent", prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__NoAnaesthetistPresent_" + componentIdentifier + "");
			cxl_TimeValidationMap = new ims.framework.ContextVariable("TimeValidationMap", prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__TimeValidationMap_" + componentIdentifier + "");
			cxl_IsAnaesthetistAddedToCase = new ims.framework.ContextVariable("IsAnaesthetistAddedToCase", prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__IsAnaesthetistAddedToCase_" + componentIdentifier + "");
		}
		
		public boolean getPeriOpAnaesthticSignInTimVoIsNotNull()
		{
			return !cxl_PeriOpAnaesthticSignInTimVo.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpAnaesthticSignInTimVo getPeriOpAnaesthticSignInTimVo()
		{
			return (ims.clinical.vo.PeriOpAnaesthticSignInTimVo)cxl_PeriOpAnaesthticSignInTimVo.getValue(context);
		}
		public void setPeriOpAnaesthticSignInTimVo(ims.clinical.vo.PeriOpAnaesthticSignInTimVo value)
		{
			cxl_PeriOpAnaesthticSignInTimVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PeriOpAnaesthticSignInTimVo = null;
		public boolean getAnaestheticSignInIsNotNull()
		{
			return !cxl_AnaestheticSignIn.getValueIsNull(context);
		}
		public ims.clinical.vo.AnaestheticSignInVo getAnaestheticSignIn()
		{
			return (ims.clinical.vo.AnaestheticSignInVo)cxl_AnaestheticSignIn.getValue(context);
		}
		public void setAnaestheticSignIn(ims.clinical.vo.AnaestheticSignInVo value)
		{
			cxl_AnaestheticSignIn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnaestheticSignIn = null;
		public boolean getNoAnaesthetistPresentIsNotNull()
		{
			return !cxl_NoAnaesthetistPresent.getValueIsNull(context);
		}
		public Boolean getNoAnaesthetistPresent()
		{
			return (Boolean)cxl_NoAnaesthetistPresent.getValue(context);
		}
		public void setNoAnaesthetistPresent(Boolean value)
		{
			cxl_NoAnaesthetistPresent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NoAnaesthetistPresent = null;
		public boolean getTimeValidationMapIsNotNull()
		{
			return !cxl_TimeValidationMap.getValueIsNull(context);
		}
		public java.util.Map<Integer,ims.framework.utils.DateTime> getTimeValidationMap()
		{
			return (java.util.Map<Integer,ims.framework.utils.DateTime>)cxl_TimeValidationMap.getValue(context);
		}
		public void setTimeValidationMap(java.util.Map<Integer,ims.framework.utils.DateTime> value)
		{
			cxl_TimeValidationMap.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeValidationMap = null;
		public boolean getIsAnaesthetistAddedToCaseIsNotNull()
		{
			return !cxl_IsAnaesthetistAddedToCase.getValueIsNull(context);
		}
		public Boolean getIsAnaesthetistAddedToCase()
		{
			return (Boolean)cxl_IsAnaesthetistAddedToCase.getValue(context);
		}
		public void setIsAnaesthetistAddedToCase(Boolean value)
		{
			cxl_IsAnaesthetistAddedToCase.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsAnaesthetistAddedToCase = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[187];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Clinical.AcuteTheatreCaseTimes.SignIn", "BO-1072100121-ID", "ID_PeriOpAnaesthticSignInTim");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Clinical.AcuteTheatreCaseTimes.SignIn", "BO-1072100121-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Clinical.AcuteTheatreCaseTimes.SignIn", "BO-1072100121-ANAESTHETICSTARTTIME", "AnaestheticStartTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Clinical.AcuteTheatreCaseTimes.SignIn", "BO-1072100121-RECORDEDBY", "RecordedBy");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Clinical.TheatreBookingRef", "BO-1090100011-ID", "ID_TheatreBooking");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Clinical.TheatreAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__PeriOpAnaesthticSignInTimVo_" + componentIdentifier, "BO-1072100121-ID", "ID_PeriOpAnaesthticSignInTim");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__PeriOpAnaesthticSignInTimVo_" + componentIdentifier, "BO-1072100121-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__PeriOpAnaesthticSignInTimVo_" + componentIdentifier, "BO-1072100121-ANAESTHETICSTARTTIME", "AnaestheticStartTime");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__PeriOpAnaesthticSignInTimVo_" + componentIdentifier, "BO-1072100121-RECORDEDBY", "RecordedBy");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ID", "ID_AnaestheticSignIn");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-PATIENTCONFIRMEDIDENTITY", "PatientConfirmedIdentity");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-IDBRACELETCHECKED", "IdBraceletChecked");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ALLERGIESCHECKED", "AllergiesChecked");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ALLERGYBRACELETPRESEN", "AllergyBraceletPresen");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ISPATIENTDIABETIC", "IsPatientDiabetic");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-PROCEDUREANDSITECONFIRMEDBYPATIENT", "ProcedureAndSiteConfirmedByPatient");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-PROCEDUREANDSITECONFIRMEDBYPRACTITIONER", "ProcedureAndSiteConfirmedByPractitioner");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-OPERATIONSITEMARKED", "OperationSiteMarked");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-PATIENTSTARVED", "PatientStarved");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ANAESTHETICTYPE", "AnaestheticType");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-REGIONALBLOCKREQUIRED", "RegionalBlockRequired");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ANTICOAGULANTSTATUSCONFIRMED", "AnticoagulantStatusConfirmed");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ASACLASS", "ASAClass");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ANAESTHESIAMACHINEANDMEDICATIONCHECKCOMPLETE", "AnaesthesiaMachineAndMedicationCheckComplete");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-KNOWNDIFFICULTAIRWAY", "KnownDifficultAirway");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-RISKORGREATERTHAN500MLBLOODLOSS", "RiskOrGreaterThan500mlBloodLoss");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-GANDSELECTRONICISSUES", "GandSElectronicIssues");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-INTRAOPERATIVEFLUIDSREQUIRED", "IntraoperativeFluidsRequired");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ANTIBIOTICSREQUIRED", "AntibioticsRequired");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ANTIBIOTICSGIVENDATETIME", "AntibioticsGivenDateTime");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-PATIENTPREINDUCTIONTEMPERATURE", "PatientPreinductionTemperature");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-PREOPBLOODGLUCOSERESULT", "PreopBloodGlucoseResult");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-SIGNATUREBYREGISTEREDPRACTITIONER", "SignatureByRegisteredPractitioner");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-INTERSCALENE", "Interscalene");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-AXILLARY", "Axillary");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-LEFTANDRIGHTSIDECHECKEDANDSORRECTSIDEMARKED", "LeftAndRightSideCheckedAndSorrectSideMarked");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ANAESTHETISTSIGN", "AnaesthetistSign");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-DENTURESIMPLANTSLOOSETEETH", "DenturesImplantsLooseTeeth");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-RELEVANTCHARTSNOTESPRESENT", "RelevantChartsNotesPresent");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AnaestheticSignInDialog.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100129-ALLERGIESCONFIRMEDBYPATIENT", "AllergiesConfirmedByPatient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
