//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.anaestheticsignindialog;

import ims.RefMan.vo.PatientElectiveListBookTheatreVo;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.ASAClassEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.AllergiesConfirmedByPatientEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.IdentityConsentEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.IntraOperativeFluidsRequiredEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.IsPatientDiabeticEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.KnownDifficultAirwayEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.LeftAndRightSideCheckedEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.OperationSiteMarkedEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.PatientStarvedEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.ProcedureAndSiteConfirmedByPatientEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.ProcedureAndSiteConfirmedByPractitionerEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.RiskOrGeaterThan500mlBloodLossEnumeration;
import ims.clinical.forms.anaestheticsignindialog.GenForm.ctn1Container.grdLAAnaesBlockTypeRow;
import ims.clinical.vo.AnaestheticSignInVo;
import ims.clinical.vo.IntraOpPlannedProcedureVo;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.clinical.vo.PeriOpAnaesthticSignInTimVo;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.clinical.vo.lookups.LAAnaestheticBlockType;
import ims.clinical.vo.lookups.LAAnaestheticBlockTypeCollection;
import ims.clinical.vo.lookups.LeftAndRightSideCheckedAndCorrectSideMarked;
import ims.clinical.vo.lookups.LookupHelper;
import ims.core.vo.Hcp;
import ims.core.vo.MedicVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LateralityLRB;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoNotApplicable;
import ims.core.vo.lookups.YesNotApplicable;
import ims.core.vo.lookups.YesUnable;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.TheatreBookingLiteVo;
import ims.scheduling.vo.lookups.AcuteTheateListBookingState;

import java.util.Map;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	/**
	 * This dialog expects a TimeValidationMap
	 */
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null && args.length == 1)
		{
			form.getLocalContext().setTimeValidationMap((Map<Integer, DateTime>) args[0]);
		}
		else
		{
			throw new CodingRuntimeException("Mandatory args missing");
		}
		
		initialize();
		open();

		displayPlannedProcedures();
	}

	//WDEV-21780
	private void defaultAnaestheticTypeCombo()
	{
		PatientElectiveListBookTheatreVo patElectiveList = domain.getElectiveListByTheatreAppt(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		
		if (patElectiveList!=null && patElectiveList.getPreAssessmentOutcomeIsNotNull() && patElectiveList.getPreAssessmentOutcome().getAnaestheticTypeIsNotNull())
		{
			form.ctn1().cmbAnaestheticType().setValue(AnaestheticType.LA_PRE_ASSESSMENT.equals(patElectiveList.getPreAssessmentOutcome().getAnaestheticType()) ? AnaestheticType.LA : patElectiveList.getPreAssessmentOutcome().getAnaestheticType());
		}
		else if (patElectiveList!=null && patElectiveList.getAnaestheticTypeIsNotNull())
		{
			form.ctn1().cmbAnaestheticType().setValue(AnaestheticType.LA_PRE_ASSESSMENT.equals(patElectiveList.getAnaestheticType()) ? AnaestheticType.LA : patElectiveList.getAnaestheticType());
		}
	}

	private void open()
	{
		clearScreen();
		form.getLocalContext().setPeriOpAnaesthticSignInTimVo(domain.getPeriOpAnaestheticSignInByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
		form.getLocalContext().setAnaestheticSignIn(domain.getAnaestheticSignInByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef()));
		
		boolean noAnaethetistPresent = domain.isNoAnaesthetistPresentForLACases(form.getGlobalContext().Scheduling.getTheatreSession());
		form.getLocalContext().setNoAnaesthetistPresent(noAnaethetistPresent);
		
		boolean isAnaesthetistAddedToCase = domain.isAnaesthetistValueInCase(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.getLocalContext().setIsAnaesthetistAddedToCase(isAnaesthetistAddedToCase);
		
		populateScreenFromData();
		updateControlState();
	}

	private void updateControlState()
	{
		updateOptionalFieldsState();
		updateStopBeforeYouBlockControlsState();
	}

	private void updateOptionalFieldsState()
	{
		boolean unavailable = checkOptionalFiledsState();

		form.ctn1().PatientStarved().setVisible(!unavailable);
		form.ctn1().ASAClass().setVisible(!unavailable);
		form.ctn1().chkAnaestheticMachines().setVisible(!unavailable);
		form.ctn1().chkAnyDentures().setVisible(!unavailable);
		form.ctn1().KnownDifficultAirway().setVisible(!unavailable);
		form.ctn1().RiskOrGeaterThan500mlBloodLoss().setVisible(!unavailable);
		form.ctn1().chkGandSElectronic().setVisible(!unavailable);
		form.ctn1().IntraOperativeFluidsRequired().setVisible(!unavailable);
		form.ctn1().chkAntibiotics().setVisible(!unavailable);
		form.ctn1().timAntibioticsGiven().setVisible(!unavailable);
		form.ctn1().btnAntiobioticsGiven().setVisible(!unavailable);
		form.ctn1().decPreInductionTemperature().setVisible(!unavailable);
		form.ctn1().decPreOPBloodGlucose().setVisible(!unavailable  && form.ctn1().IsPatientDiabetic().getValue().equals(IsPatientDiabeticEnumeration.rdoDiabeticYes));

		form.ctn1().lblRequired8().setVisible(!unavailable);
		form.ctn1().lblRequired11().setVisible(!unavailable);
		form.ctn1().lblRequired12().setVisible(!unavailable);
		form.ctn1().lblRequired13().setVisible(!unavailable);
		form.ctn1().lblPStarvedRequired().setVisible(!unavailable);

		form.ctn1().lblPStarved().setVisible(!unavailable);
		form.ctn1().lbl1ASAClass().setVisible(!unavailable);
		form.ctn1().lblKnownDiff().setVisible(!unavailable);
		form.ctn1().lblBloodLoss().setVisible(!unavailable);
		form.ctn1().lblIntraOpFluids().setVisible(!unavailable);
		form.ctn1().lblPatientTemp().setVisible(!unavailable);
		form.ctn1().lblBloodGlucose().setVisible(!unavailable && form.ctn1().IsPatientDiabetic().getValue().equals(IsPatientDiabeticEnumeration.rdoDiabeticYes));
		
		if (unavailable)
		{
			form.ctn1().PatientStarved().setValue(null);
			form.ctn1().ASAClass().setValue(null);
			form.ctn1().chkAnaestheticMachines().setValue(null);
			form.ctn1().chkAnyDentures().setValue(null);
			form.ctn1().KnownDifficultAirway().setValue(null);
			form.ctn1().RiskOrGeaterThan500mlBloodLoss().setValue(null);
			form.ctn1().chkGandSElectronic().setValue(null);
			form.ctn1().IntraOperativeFluidsRequired().setValue(null);
			form.ctn1().chkAntibiotics().setValue(null);
			form.ctn1().timAntibioticsGiven().setValue(null);
			form.ctn1().decPreInductionTemperature().setValue(null);
			form.ctn1().decPreOPBloodGlucose().setValue(null);
		}
		else
		{
			AnaestheticType anaesType = form.ctn1().cmbAnaestheticType().getValue();
			form.ctn1().decPreInductionTemperature().setRequired( 
					anaesType != null 
					&& (anaesType.equals(AnaestheticType.GA) 
					|| anaesType.equals(AnaestheticType.SEDATION) 
					|| (anaesType.equals(AnaestheticType.LA) && form.ctn1().chkRegionalBlock().getValue()))); //WDEV-22637
			
			form.ctn1().timAntibioticsGiven().setVisible(form.ctn1().chkAntibiotics().getValue());
			form.ctn1().btnAntiobioticsGiven().setVisible(form.ctn1().chkAntibiotics().getValue());
		}
		
		//WDEV-22241
		form.ctn1().txtAllergiesBraceletMandatory().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.ctn1().txtAllergiesCheckedMandatory().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.ctn1().txtAnticoagulantStausConfirmedMandatory().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.ctn1().txtRelevantChartsMandatory().setVisible(FormMode.EDIT.equals(form.getMode()));
		
		
	}

	private boolean checkOptionalFiledsState()
	{
		boolean unavailable = form.getLocalContext().getNoAnaesthetistPresent() && (form.ctn1().cmbAnaestheticType().getValue() != null && form.ctn1().cmbAnaestheticType().getValue().equals(AnaestheticType.LA));
		if(unavailable)
		{
			if((form.getLocalContext().getIsAnaesthetistAddedToCaseIsNotNull() && form.getLocalContext().getIsAnaesthetistAddedToCase()))
			{
				unavailable = false;
			}
		}
		return unavailable;
	}

	private void updateStopBeforeYouBlockControlsState()
	{
		boolean regionalBlock = form.ctn1().chkRegionalBlock().getValue();

		form.ctn1().pnlStop().setVisible(regionalBlock);
		form.ctn1().grdLAAnaesBlockType().setVisible(regionalBlock);
		form.ctn1().ccAnaesthetistSign().setVisible(regionalBlock);
		form.ctn1().lblLeftAndRight().setVisible(regionalBlock);
		form.ctn1().lblAnaesSign().setVisible(regionalBlock);
		form.ctn1().LeftAndRightSideChecked().setVisible(regionalBlock);
		form.ctn1().lblLABlockTypeRequired().setVisible(regionalBlock);
		form.ctn1().lblAnaesSignRequired().setVisible(regionalBlock);
		form.ctn1().lblLeftAndRightRequired().setVisible(regionalBlock);

		// default the anaesthetist only on a new record
		if (regionalBlock && (form.getLocalContext().getAnaestheticSignIn() == null || form.getLocalContext().getAnaestheticSignIn().getID_AnaestheticSignIn() == null))
		{
			defaultInstanceControls();
		}

		if (!regionalBlock)
		{
			// clear regional block selection if checkbox is unchecked
			for (int i = 0; i < form.ctn1().grdLAAnaesBlockType().getRows().size(); i++)
			{
				form.ctn1().grdLAAnaesBlockType().getRows().get(i).setcolSelect(false);
			}
			
			form.ctn1().ccAnaesthetistSign().setValue(null);
			form.ctn1().LeftAndRightSideChecked().setValue(null);
		}
	}

	//WDEV-21788
	private void displayPlannedProcedures()
	{
		ProcedureLiteVo first = null;
		LateralityLRB firstLaterality = null;
		ProcedureLiteVo additional = null;
		LateralityLRB additionalLaterality = null;
	
		form.lblPlannedDetails().setVisible(false);
		form.lblAdditionalPlannedProcedureDetails().setVisible(false);
		
		IntraOpPlannedProcedureVoCollection plannedProcedures = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());;
		if (plannedProcedures != null && plannedProcedures.size() > 0)
		{
			for (IntraOpPlannedProcedureVo item : plannedProcedures)
			{
				if (item.getPlannedProcedure().getIsPrimary())
				{
					first = item.getPlannedProcedure().getProcedure();
					firstLaterality = item.getPlannedProcedure().getProcLaterality();
					break;
				}
			}
				
			if (plannedProcedures.size() > 1)
			{
				if (first!=null && !first.equals(plannedProcedures.get(0).getPlannedProcedure().getProcedure()))
				{
					additional = plannedProcedures.get(0).getPlannedProcedure().getProcedure();
					additionalLaterality = plannedProcedures.get(1).getPlannedProcedure().getProcLaterality();
				}
				else
				{
					additional = plannedProcedures.get(1).getPlannedProcedure().getProcedure();
					additionalLaterality = plannedProcedures.get(0).getPlannedProcedure().getProcLaterality();
				}
			}
										
		}
		
		if(first == null || additional == null)
		{
			TheatreBookingLiteVo booking = domain.getTheatreBooking(form.getGlobalContext().Clinical.getTheatreAppointmentRef());;

			if(first == null)
			{
    			first = booking.getProcedure();
    			firstLaterality = booking.getProcLaterality();
			}
			
			if(additional == null)
			{
    			additional = booking.getSecondaryProcedure();
    			additionalLaterality = booking.getSecondaryProcLaterality();
			}
		}
		
		if (first!=null)
		{
			String primaryProc = first.getProcedureName();
    		if (firstLaterality != null)
    		{
    			primaryProc += " - " + firstLaterality.getText();
    		}
    		
    		form.lblPlannedDetails().setValue(primaryProc.length() > 85 ? primaryProc.substring(0, 85) + "..." : primaryProc);
    		form.lblPlannedDetails().setTooltip(primaryProc);
    		form.lblPlannedDetails().setVisible(true);
		}
		
		
		if (additional!=null)
		{
			String additionalProc = additional.getProcedureName();
    		if (additionalLaterality != null)
    		{
    			additionalProc += " - " + additionalLaterality.getText();
    		}
    
    		form.lblAdditionalPlannedProcedureDetails().setValue(additionalProc.length() > 85 ? additionalProc.substring(0, 85) + "..." : additionalProc);
    		form.lblAdditionalPlannedProcedureDetails().setTooltip(additionalProc);
    		form.lblAdditionalPlannedProcedureDetails().setVisible(true);
		}
	}

	private String constructProcDetailsLabel(ProcedureLiteVo procedureLiteVo, LateralityLRB lateralityLRB) //WDEV-21780
	{
		String display = "";
		
		if (procedureLiteVo!=null)
		{
			display += procedureLiteVo.getProcedureName();
		}
		
		if (lateralityLRB!=null)
		{
			display += " - " + lateralityLRB.getText();
		}
		return display;
	}

	private void clearScreen()
	{
		form.dteAnestheticSignIn().setValue(null);
		form.timAnaestheticSignIn().setValue(null);

		form.ctn1().ccAnaesthetistSign().clear();
		form.ctn1().ccRegsteredPractitioner().clear();
		form.ctn1().cmbAnaestheticType().setValue(null);

		for (int i = 0; i < form.ctn1().grdLAAnaesBlockType().getRows().size(); i++)
		{
			grdLAAnaesBlockTypeRow row = form.ctn1().grdLAAnaesBlockType().getRows().get(i);
			row.setcolSelect(false);
		}
	
		form.ctn1().AllergiesConfirmedByPatient().setValue(AllergiesConfirmedByPatientEnumeration.None);
		form.ctn1().ASAClass().setValue(ASAClassEnumeration.None);
		Boolean preAssessment = domain.isDiabeticFromPreAssessmentOutcome(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		form.ctn1().IsPatientDiabetic().setValue(preAssessment == null
					? IsPatientDiabeticEnumeration.None :
						Boolean.TRUE.equals(preAssessment)
							?IsPatientDiabeticEnumeration.rdoDiabeticYes :IsPatientDiabeticEnumeration.rdoDiabeticNo);//WDEV-22206
		
		form.ctn1().IdentityConsent().setValue(IdentityConsentEnumeration.None);
		form.ctn1().IntraOperativeFluidsRequired().setValue(IntraOperativeFluidsRequiredEnumeration.None);
		form.ctn1().LeftAndRightSideChecked().setValue(LeftAndRightSideCheckedEnumeration.None);
		form.ctn1().OperationSiteMarked().setValue(OperationSiteMarkedEnumeration.None);
		form.ctn1().ProcedureAndSiteConfirmedByPatient().setValue(ProcedureAndSiteConfirmedByPatientEnumeration.None);
		form.ctn1().KnownDifficultAirway().setValue(KnownDifficultAirwayEnumeration.None);
		form.ctn1().PatientStarved().setValue(PatientStarvedEnumeration.None);
		form.ctn1().ProcedureAndSiteConfirmedByPractitioner().setValue(ProcedureAndSiteConfirmedByPractitionerEnumeration.None);
		form.ctn1().RiskOrGeaterThan500mlBloodLoss().setValue(RiskOrGeaterThan500mlBloodLossEnumeration.None);
		form.ctn1().decPreInductionTemperature().setValue(null);

		form.ctn1().chkAllergiesBracelet().setValue(false);
		form.ctn1().chkAllergies().setValue(false);
		form.ctn1().decPreOPBloodGlucose().setValue(null);
		form.ctn1().chkAntibiotics().setValue(false);
		form.ctn1().chkGandSElectronic().setValue(false);
		form.ctn1().chkRelevantChartsNotes().setValue(false);
		form.ctn1().chkAnyDentures().setValue(false);
		form.ctn1().chkAnticoagulant().setValue(false);
		form.ctn1().cmbAnaestheticType().setValue(null);
		form.ctn1().chkAnaestheticMachines().setValue(false);
		form.ctn1().chkRegionalBlock().setValue(false);

	}

	private void populateScreenFromData()
	{
		PeriOpAnaesthticSignInTimVo signInTime = form.getLocalContext().getPeriOpAnaesthticSignInTimVo();
		if (signInTime != null)
		{
			if (signInTime.getAnaestheticStartTimeIsNotNull())
			{
				form.dteAnestheticSignIn().setValue(signInTime.getAnaestheticStartTime().getDate());
				form.timAnaestheticSignIn().setValue(signInTime.getAnaestheticStartTime().getTime());
			}
		}

		AnaestheticSignInVo signIn = form.getLocalContext().getAnaestheticSignIn();
		if (signIn != null)
		{
			form.ctn1().IdentityConsent().setValue(signIn.getPatientConfirmedIdentityIsNotNull() ? (signIn.getPatientConfirmedIdentity().equals(Boolean.TRUE) ? IdentityConsentEnumeration.rdoPatientConfirmed : IdentityConsentEnumeration.rdoIdBracelet) : null);
			if (signIn.getAllergiesCheckedIsNotNull())
			{
				form.ctn1().chkAllergies().setValue(signIn.getAllergiesChecked().booleanValue());
			}
			form.ctn1().AllergiesConfirmedByPatient().setValue(signIn.getAllergiesConfirmedByPatientIsNotNull() ? (signIn.getAllergiesConfirmedByPatient().equals(YesUnable.YES) ? AllergiesConfirmedByPatientEnumeration.rdoAllergiesYes : AllergiesConfirmedByPatientEnumeration.rdoAllergiesUnable) : null);
			if (signIn.getAllergyBraceletPresenIsNotNull())
			{
				form.ctn1().chkAllergiesBracelet().setValue(signIn.getAllergyBraceletPresen().booleanValue());
			}
			form.ctn1().IsPatientDiabetic().setValue(signIn.getIsPatientDiabeticIsNotNull() ? (signIn.getIsPatientDiabetic().equals(YesNo.YES) ? IsPatientDiabeticEnumeration.rdoDiabeticYes : IsPatientDiabeticEnumeration.rdoDiabeticNo) : null);
			form.ctn1().ProcedureAndSiteConfirmedByPatient().setValue(signIn.getProcedureAndSiteConfirmedByPatientIsNotNull() ? (signIn.getProcedureAndSiteConfirmedByPatient().equals(YesUnable.YES) ? ProcedureAndSiteConfirmedByPatientEnumeration.rdoPatientConfirmedYes : ProcedureAndSiteConfirmedByPatientEnumeration.rdoPatientConfirmedUnable) : null);
			form.ctn1().ProcedureAndSiteConfirmedByPractitioner().setValue(signIn.getProcedureAndSiteConfirmedByPractitionerIsNotNull() ? (signIn.getProcedureAndSiteConfirmedByPractitioner().equals(YesNotApplicable.YES) ? ProcedureAndSiteConfirmedByPractitionerEnumeration.rdoPractitionerConfirmedYes : ProcedureAndSiteConfirmedByPractitionerEnumeration.rdoPractitionerConfirmedNA) : null);
			form.ctn1().OperationSiteMarked().setValue(signIn.getOperationSiteMarkedIsNotNull() ? (signIn.getOperationSiteMarked().equals(YesNotApplicable.YES) ? OperationSiteMarkedEnumeration.rdoOpSiteMarkedYes : OperationSiteMarkedEnumeration.rdoOpSiteMarkedNA) : null);

			YesNoNotApplicable starvedSelection = signIn.getPatientStarved();
			if (starvedSelection != null)
			{
				if (starvedSelection.equals(YesNoNotApplicable.YES))
				{
					form.ctn1().PatientStarved().setValue(PatientStarvedEnumeration.rdoStarvedYes);
				}
				else if (starvedSelection.equals(YesNoNotApplicable.NO))
				{
					form.ctn1().PatientStarved().setValue(PatientStarvedEnumeration.rdoStarvedNo);
				}
				else if (starvedSelection.equals(YesNoNotApplicable.NOTAPPLICABLE))
				{
					form.ctn1().PatientStarved().setValue(PatientStarvedEnumeration.rdoStarvedNA);
				}
				else
				{
					form.ctn1().PatientStarved().setValue(null);
				}
			}

			form.ctn1().cmbAnaestheticType().setValue(signIn.getAnaestheticTypeIsNotNull() ? signIn.getAnaestheticType() : null);
			if (signIn.getRegionalBlockRequiredIsNotNull())
			{
				form.ctn1().chkRegionalBlock().setValue(signIn.getRegionalBlockRequired().booleanValue());
			}
			if (signIn.getAnticoagulantStatusConfirmedIsNotNull())
			{
				form.ctn1().chkAnticoagulant().setValue(signIn.getAnticoagulantStatusConfirmed().booleanValue());
			}

			if (signIn.getASAClassIsNotNull())
			{
				int asaSelection = signIn.getASAClass();
				if (asaSelection == 1)
				{
					form.ctn1().ASAClass().setValue(ASAClassEnumeration.rdoASA1);
				}
				else if (asaSelection == 2)
				{
					form.ctn1().ASAClass().setValue(ASAClassEnumeration.rdoASA2);
				}
				else if (asaSelection == 3)
				{
					form.ctn1().ASAClass().setValue(ASAClassEnumeration.rdoASA3);
				}
				else if (asaSelection == 4)
				{
					form.ctn1().ASAClass().setValue(ASAClassEnumeration.rdoASA4);
				}
				else if (asaSelection == 5)
				{
					form.ctn1().ASAClass().setValue(ASAClassEnumeration.rdoASA5);
				}
				else
				{
					form.ctn1().ASAClass().setValue(null);
				}
			}
			if (signIn.getAnaesthesiaMachineAndMedicationCheckCompleteIsNotNull())
			{
				form.ctn1().chkAnaestheticMachines().setValue(signIn.getAnaesthesiaMachineAndMedicationCheckComplete().booleanValue());
			}
			if (signIn.getDenturesImplantsLooseTeethIsNotNull())
			{
				form.ctn1().chkAnyDentures().setValue(signIn.getDenturesImplantsLooseTeeth().booleanValue());
			}
			if (signIn.getRelevantChartsNotesPresentIsNotNull())
			{
				form.ctn1().chkRelevantChartsNotes().setValue(signIn.getRelevantChartsNotesPresent().booleanValue());
			}
			form.ctn1().KnownDifficultAirway().setValue(signIn.getKnownDifficultAirwayIsNotNull() ? (signIn.getKnownDifficultAirway().equals(YesNo.YES) ? KnownDifficultAirwayEnumeration.rdoPatientDifficultYes : KnownDifficultAirwayEnumeration.rdoPatientDifficultNo) : null);
			form.ctn1().RiskOrGeaterThan500mlBloodLoss().setValue(signIn.getRiskOrGreaterThan500mlBloodLossIsNotNull() ? (signIn.getRiskOrGreaterThan500mlBloodLoss().equals(YesNo.YES) ? RiskOrGeaterThan500mlBloodLossEnumeration.rdoRisk500Yes : RiskOrGeaterThan500mlBloodLossEnumeration.rdoRisk500No) : null);
			if (signIn.getGandSElectronicIssuesIsNotNull())
			{
				form.ctn1().chkGandSElectronic().setValue(signIn.getGandSElectronicIssues().booleanValue());
			}
			form.ctn1().IntraOperativeFluidsRequired().setValue(signIn.getIntraoperativeFluidsRequiredIsNotNull() ? (signIn.getIntraoperativeFluidsRequired().equals(YesNo.YES) ? IntraOperativeFluidsRequiredEnumeration.rdoIntraFluidsYes : IntraOperativeFluidsRequiredEnumeration.rdoIntraFluidsNo) : null);
			if (signIn.getAntibioticsRequiredIsNotNull())
			{
				form.ctn1().chkAntibiotics().setValue(signIn.getAntibioticsRequired().booleanValue());
			}
			if (signIn.getAntibioticsGivenDateTimeIsNotNull())
			{
				form.ctn1().timAntibioticsGiven().setValue(signIn.getAntibioticsGivenDateTime().getTime());
			}
			form.ctn1().decPreInductionTemperature().setValue(signIn.getPatientPreinductionTemperatureIsNotNull() ? signIn.getPatientPreinductionTemperature() : null);
			form.ctn1().decPreOPBloodGlucose().setValue(signIn.getPreopBloodGlucoseResultIsNotNull() ? signIn.getPreopBloodGlucoseResult() : null);
			form.ctn1().ccRegsteredPractitioner().setValue(signIn.getSignatureByRegisteredPractitioner());
			if (signIn.getLAAnaestheticBlockTypeIsNotNull())
			{
				for (int i = 0; i < signIn.getLAAnaestheticBlockType().size(); i++)
				{
					LAAnaestheticBlockType item = signIn.getLAAnaestheticBlockType().get(i);
					grdLAAnaesBlockTypeRow row = form.ctn1().grdLAAnaesBlockType().getRowByValue(item);
					if (row != null)
					{
						row.setcolSelect(true);
					}
					else
					{
						row = form.ctn1().grdLAAnaesBlockType().getRows().newRow();
						row.setcolLAAnaesBlockType(item.getIItemText());
						row.setcolSelect(true);
						row.setValue(item);
					}
				}
			}
		
			//WDEV-22482
			LeftAndRightSideCheckedAndCorrectSideMarked leftRightBilateral = signIn.getLeftAndRightSideCheckedAndSorrectSideMarked();
			if (leftRightBilateral != null)
			{
				if (leftRightBilateral.equals(LeftAndRightSideCheckedAndCorrectSideMarked.LEFT))
				{
					form.ctn1().LeftAndRightSideChecked().setValue(LeftAndRightSideCheckedEnumeration.rdoLeft);
				}
				else if (leftRightBilateral.equals(LeftAndRightSideCheckedAndCorrectSideMarked.RIGHT))
				{
					form.ctn1().LeftAndRightSideChecked().setValue(LeftAndRightSideCheckedEnumeration.rdoRight);
				}
				else if (leftRightBilateral.equals(LeftAndRightSideCheckedAndCorrectSideMarked.BILATERAL))
				{
					form.ctn1().LeftAndRightSideChecked().setValue(LeftAndRightSideCheckedEnumeration.rdoBilateral);
				}
				else
				{
					form.ctn1().LeftAndRightSideChecked().setValue(null);
				}
			}
			
			form.ctn1().ccAnaesthetistSign().setValue(signIn.getAnaesthetistSign());
		}
		else //WDEV-22459
		{
			defaultAnaestheticTypeCombo();  //WDEV-21780
		}
	}

	private AnaestheticSignInVo populateDataFromScreen()
	{
		AnaestheticSignInVo signIn = form.getLocalContext().getAnaestheticSignIn();
		if (signIn == null)
		{
			signIn = new AnaestheticSignInVo();
		}
		signIn.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());

		if (form.ctn1().IdentityConsent().getValue() != null)
		{
			if (form.ctn1().IdentityConsent().getValue().equals(IdentityConsentEnumeration.rdoIdBracelet))
			{
				signIn.setIdBraceletChecked(true);
				signIn.setPatientConfirmedIdentity(false);
			}
			else if (form.ctn1().IdentityConsent().getValue().equals(IdentityConsentEnumeration.rdoPatientConfirmed))
			{
				signIn.setPatientConfirmedIdentity(true);
				signIn.setIdBraceletChecked(false);
			}
		}
		signIn.setAllergiesChecked(new Boolean(form.ctn1().chkAllergies().getValue()));
		signIn.setAllergiesConfirmedByPatient(form.ctn1().AllergiesConfirmedByPatient().getValue() != AllergiesConfirmedByPatientEnumeration.None ? (form.ctn1().AllergiesConfirmedByPatient().getValue().equals(AllergiesConfirmedByPatientEnumeration.rdoAllergiesYes) ? YesUnable.YES : YesUnable.UNABLE) : null);
		signIn.setAllergyBraceletPresen(new Boolean(form.ctn1().chkAllergiesBracelet().getValue()));
		signIn.setIsPatientDiabetic(form.ctn1().IsPatientDiabetic().getValue() != IsPatientDiabeticEnumeration.None ? (form.ctn1().IsPatientDiabetic().getValue().equals(IsPatientDiabeticEnumeration.rdoDiabeticYes) ? YesNo.YES : YesNo.NO) : null);
		signIn.setProcedureAndSiteConfirmedByPatient(form.ctn1().ProcedureAndSiteConfirmedByPatient().getValue() != ProcedureAndSiteConfirmedByPatientEnumeration.None ? (form.ctn1().ProcedureAndSiteConfirmedByPatient().getValue().equals(ProcedureAndSiteConfirmedByPatientEnumeration.rdoPatientConfirmedYes) ? YesUnable.YES : YesUnable.UNABLE) : null);
		signIn.setProcedureAndSiteConfirmedByPractitioner(form.ctn1().ProcedureAndSiteConfirmedByPractitioner().getValue() != ProcedureAndSiteConfirmedByPractitionerEnumeration.None ? (form.ctn1().ProcedureAndSiteConfirmedByPractitioner().getValue().equals(ProcedureAndSiteConfirmedByPractitionerEnumeration.rdoPractitionerConfirmedYes) ? YesNotApplicable.YES : YesNotApplicable.NOTAPPLICABLE) : null);
		signIn.setOperationSiteMarked(form.ctn1().OperationSiteMarked().getValue() != OperationSiteMarkedEnumeration.None ? (form.ctn1().OperationSiteMarked().getValue().equals(OperationSiteMarkedEnumeration.rdoOpSiteMarkedYes) ? YesNotApplicable.YES : YesNotApplicable.NOTAPPLICABLE) : null);

		if (form.ctn1().PatientStarved().getValue() != PatientStarvedEnumeration.None)
		{
			PatientStarvedEnumeration selection = form.ctn1().PatientStarved().getValue();
			if (selection.equals(PatientStarvedEnumeration.rdoStarvedYes))
			{
				signIn.setPatientStarved(YesNoNotApplicable.YES);
			}
			else if (selection.equals(PatientStarvedEnumeration.rdoStarvedNo))
			{
				signIn.setPatientStarved(YesNoNotApplicable.NO);
			}
			else if (selection.equals(PatientStarvedEnumeration.rdoStarvedNA))
			{
				signIn.setPatientStarved(YesNoNotApplicable.NOTAPPLICABLE);
			}
		}
		signIn.setAnaestheticType(form.ctn1().cmbAnaestheticType().getValue());
		signIn.setRegionalBlockRequired(new Boolean(form.ctn1().chkRegionalBlock().getValue()));
		signIn.setAnticoagulantStatusConfirmed(new Boolean(form.ctn1().chkAnticoagulant().getValue()));
		if (form.ctn1().ASAClass().getValue() != ASAClassEnumeration.None)
		{
			ASAClassEnumeration selection = form.ctn1().ASAClass().getValue();
			if (selection.equals(ASAClassEnumeration.rdoASA1))
			{
				signIn.setASAClass(1);
			}
			else if (selection.equals(ASAClassEnumeration.rdoASA2))
			{
				signIn.setASAClass(2);
			}
			else if (selection.equals(ASAClassEnumeration.rdoASA3))
			{
				signIn.setASAClass(3);
			}
			else if (selection.equals(ASAClassEnumeration.rdoASA4))
			{
				signIn.setASAClass(4);
			}
			else if (selection.equals(ASAClassEnumeration.rdoASA5))
			{
				signIn.setASAClass(5);
			}
		}
		signIn.setAnaesthesiaMachineAndMedicationCheckComplete(new Boolean(form.ctn1().chkAnaestheticMachines().getValue()));
		signIn.setDenturesImplantsLooseTeeth(new Boolean(form.ctn1().chkAnyDentures().getValue()));
		signIn.setRelevantChartsNotesPresent(new Boolean(form.ctn1().chkRelevantChartsNotes().getValue()));
		signIn.setKnownDifficultAirway(form.ctn1().KnownDifficultAirway().getValue() != KnownDifficultAirwayEnumeration.None ? (form.ctn1().KnownDifficultAirway().getValue().equals(KnownDifficultAirwayEnumeration.rdoPatientDifficultYes) ? YesNo.YES : YesNo.NO) : null);
		signIn.setRiskOrGreaterThan500mlBloodLoss(form.ctn1().RiskOrGeaterThan500mlBloodLoss().getValue() != RiskOrGeaterThan500mlBloodLossEnumeration.None ? (form.ctn1().RiskOrGeaterThan500mlBloodLoss().getValue().equals(RiskOrGeaterThan500mlBloodLossEnumeration.rdoRisk500Yes) ? YesNo.YES : YesNo.NO) : null);
		signIn.setGandSElectronicIssues(new Boolean(form.ctn1().chkGandSElectronic().getValue()));
		signIn.setIntraoperativeFluidsRequired(form.ctn1().IntraOperativeFluidsRequired().getValue() != IntraOperativeFluidsRequiredEnumeration.None ? (form.ctn1().IntraOperativeFluidsRequired().getValue().equals(IntraOperativeFluidsRequiredEnumeration.rdoIntraFluidsYes) ? YesNo.YES : YesNo.NO) : null);
		signIn.setAntibioticsRequired(new Boolean(form.ctn1().chkAntibiotics().getValue()));
		if (form.ctn1().timAntibioticsGiven().getValue() != null)
		{
			signIn.setAntibioticsGivenDateTime(new DateTime(new Date(), form.ctn1().timAntibioticsGiven().getValue()));
		}
		else
		{
			signIn.setAntibioticsGivenDateTime(null);
		}

		signIn.setPatientPreinductionTemperature(form.ctn1().decPreInductionTemperature().getValue());
		signIn.setPreopBloodGlucoseResult(form.ctn1().decPreOPBloodGlucose().getValue());
		signIn.setSignatureByRegisteredPractitioner(form.ctn1().ccRegsteredPractitioner().getValue());
		LAAnaestheticBlockTypeCollection coll = new LAAnaestheticBlockTypeCollection();
		if (form.ctn1().grdLAAnaesBlockType().getRows().size() > 0)
		{
			for (int i = 0; i < form.ctn1().grdLAAnaesBlockType().getRows().size(); i++)
			{
				grdLAAnaesBlockTypeRow row = form.ctn1().grdLAAnaesBlockType().getRows().get(i);
				if (row.getcolSelect() == true)
				{
					coll.add(row.getValue());
				}
			}
		}
		signIn.setLAAnaestheticBlockType(coll);
		signIn.setLeftAndRightSideCheckedAndSorrectSideMarked(form.ctn1().LeftAndRightSideChecked().getValue() != LeftAndRightSideCheckedEnumeration.None ? (form.ctn1().LeftAndRightSideChecked().getValue().equals(LeftAndRightSideCheckedEnumeration.rdoLeft) ? LeftAndRightSideCheckedAndCorrectSideMarked.LEFT : LeftAndRightSideCheckedAndCorrectSideMarked.RIGHT) : null);
		
		//WDEV-22482
		if (form.ctn1().LeftAndRightSideChecked().getValue() != LeftAndRightSideCheckedEnumeration.None)
		{
			LeftAndRightSideCheckedEnumeration selection = form.ctn1().LeftAndRightSideChecked().getValue();
			if (selection.equals(LeftAndRightSideCheckedEnumeration.rdoLeft))
			{
				signIn.setLeftAndRightSideCheckedAndSorrectSideMarked(LeftAndRightSideCheckedAndCorrectSideMarked.LEFT);
			}
			else if (selection.equals(LeftAndRightSideCheckedEnumeration.rdoRight))
			{
				signIn.setLeftAndRightSideCheckedAndSorrectSideMarked(LeftAndRightSideCheckedAndCorrectSideMarked.RIGHT);
			}
			else if (selection.equals(LeftAndRightSideCheckedEnumeration.rdoBilateral))
			{
				signIn.setLeftAndRightSideCheckedAndSorrectSideMarked(LeftAndRightSideCheckedAndCorrectSideMarked.BILATERAL);
			}
		}
		
		signIn.setAnaesthetistSign(form.ctn1().ccAnaesthetistSign().getValue());
		return signIn;
	}

	private void defaultInstanceControls()
	{
		// TODO Review further to default logged in Medic...
		if (domain.getHcpUser() instanceof Hcp)
		{
			Hcp hcp = (Hcp) domain.getHcpUser();
			if (hcp != null)
			{
				HcpDisType hcptype = hcp.getHcpType();
				if (hcptype.equals(HcpDisType.MEDICAL))
				{
					form.ctn1().ccAnaesthetistSign().setValue((MedicVo) domain.getHcpUser());
				}
			}
		}
	}

	private void initialize() //WDEV-22459
	{
		form.ctn1().lblRequired1().setTextColor(Color.Red);
		form.ctn1().lblRequired4().setTextColor(Color.Red);
		form.ctn1().lblRequired5().setTextColor(Color.Red);
		form.ctn1().lblRequired6().setTextColor(Color.Red);
		form.ctn1().lblRequired7().setTextColor(Color.Red);
		form.ctn1().lblRequired8().setTextColor(Color.Red);
		form.ctn1().lblPStarvedRequired().setTextColor(Color.Red);
		form.ctn1().lblRequired11().setTextColor(Color.Red);
		form.ctn1().lblRequired12().setTextColor(Color.Red);
		form.ctn1().lblRequired13().setTextColor(Color.Red);
		form.ctn1().lblRequired14().setTextColor(Color.Red);
		form.ctn1().lblSeeBannerBar().setTextColor(Color.Red);
		form.ctn1().lblLABlockTypeRequired().setTextColor(Color.Red);
		form.ctn1().lblAnaesSignRequired().setTextColor(Color.Red);
		form.ctn1().lblLeftAndRightRequired().setTextColor(Color.Red);
		form.ctn1().lblIdentityConsent().setTextColor(Color.Red);//WDEV-22241
		initialiseLookupGrid();

		form.ctn1().ccAnaesthetistSign().initialize(MosType.MEDIC);
		form.ctn1().ccRegsteredPractitioner().initialize(MosType.MEDIC);
		form.ctn1().cmbAnaestheticType().removeRow(AnaestheticType.LA_PRE_ASSESSMENT);
		//WDEV-22446
		form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.setPersistAnaestheticTime(false);
		form.lblSignInTimeRequired().setTextColor(Color.Red);
	}

	private void initialiseLookupGrid()
	{
		form.ctn1().grdLAAnaesBlockType().getRows().clear();
		LAAnaestheticBlockTypeCollection coll = LookupHelper.getLAAnaestheticBlockType(domain.getLookupService());
		for (int i = 0; i < coll.size(); i++)
		{
			LAAnaestheticBlockType item = coll.get(i);
			grdLAAnaesBlockTypeRow row = form.ctn1().grdLAAnaesBlockType().getRows().newRow();
			row.setcolLAAnaesBlockType(item.getIItemText());
			row.setValue(item);
		}
		form.ctn1().grdLAAnaesBlockType().setReadOnly(false);
	}

	@Override
	protected void onBtnChartableOccurencesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Clinical.ChartableOccurencesDialog);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AnaestheticSignInVo signIn = populateDataFromScreen();

		String[] errors = signIn.validate(validateUI(signIn));

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-22446 removed code here implemented for WDEV-21780
		
		try
		{
			domain.saveAnaestheticSignInDetails(signIn, form.getLocalContext().getPeriOpAnaesthticSignInTimVo(), form.getGlobalContext().Clinical.getTheatreBookingRef());
		}
		catch (StaleObjectException e)
		{
			refreshData();
			return;
		}
		catch(DomainInterfaceException e)
		{
			refreshData();
			return;
		}
		
		//WDEV-22446
		form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.setSignIn(null);
		engine.close(DialogResult.OK);
	}

	private void refreshData()
	{
		engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		open();
	}

	private String[] validateUI(AnaestheticSignInVo signIn) //WDEV-21780
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		//WDEV-22446
		if (form.getLocalContext().getPeriOpAnaesthticSignInTimVo() == null)
			uiErrors.add("Anaesthetic Sign In Date Time is mandatory ");
		if(form.getLocalContext().getPeriOpAnaesthticSignInTimVoIsNotNull())
			form.getLocalContext().getPeriOpAnaesthticSignInTimVo().validate();
		
		if (signIn.getPatientConfirmedIdentity() == null && signIn.getIdBraceletChecked() == null)
			uiErrors.add("Identity Consent is mandatory ");

		boolean unavailable = checkOptionalFiledsState(); 
			
		if (!unavailable)
		{
			//WDEV-22241
			if(!form.ctn1().chkAllergies().getValue())
			{
				uiErrors.add("Allergies Checked is mandatory ");
			}
			
			if(!form.ctn1().chkAllergiesBracelet().getValue())
			{
				uiErrors.add("Allergies bracelet present and correct, if required is mandatory ");
			}
			
			if(!form.ctn1().chkAnticoagulant().getValue())
			{
				uiErrors.add("Anticoagulant Status Confirmed is mandatory ");
			}
			
			if(!form.ctn1().chkRelevantChartsNotes().getValue())
			{
				uiErrors.add("Relevant Charts and Notes Present is mandatory ");
			}
			
			if(signIn.getPatientStarved() == null)
			{
				uiErrors.add("Patient Starved is mandatory ");
			}
			
			if(signIn.getASAClass() == null)
			{
				uiErrors.add("ASA Class is mandatory ");
			}
			if(signIn.getKnownDifficultAirway() == null)
			{
				uiErrors.add("Known Difficult Airway is mandatory ");
			}
			if(signIn.getRiskOrGreaterThan500mlBloodLoss() == null)
			{
				uiErrors.add("Risk of Blood Loss is mandatory ");
			}
			if(signIn.getIntraoperativeFluidsRequired() == null)
			{
				uiErrors.add("Intra-operative fluids required is mandatory ");
			}
			
			if (signIn.getAntibioticsRequired())
			{
				if (signIn.getAntibioticsGivenDateTime() == null)
				{
					uiErrors.add("Antibiotics given date time is mandatory ");
				}
			}

			AnaestheticType anaesType = signIn.getAnaestheticType();
			if (anaesType != null)
			{
				if (anaesType.equals(AnaestheticType.GA) || anaesType.equals(AnaestheticType.SEDATION) || (anaesType.equals(AnaestheticType.LA) && form.ctn1().chkRegionalBlock().getValue())) //WDEV-22637
				{
					if (signIn.getPatientPreinductionTemperature() == null)
					{
						uiErrors.add("Patient Pre-induction temperature is mandatory ");
					}
				}
			}
			
			if(signIn.getIsPatientDiabeticIsNotNull() && signIn.getIsPatientDiabetic().equals(YesNo.YES))
			{
				if(signIn.getPreopBloodGlucoseResult() == null)
					uiErrors.add("Pre-op Blood Glucose is mandatory ");
			}
		}

		// block section - only validate if block required
		if (signIn.getRegionalBlockRequiredIsNotNull() && signIn.getRegionalBlockRequired())
		{
			int selectionCount = 0;
			for (int i = 0; i < form.ctn1().grdLAAnaesBlockType().getRows().size(); i++)
			{
				if (form.ctn1().grdLAAnaesBlockType().getRows().get(i).getcolSelect())
				{
					selectionCount++;
				}
			}
			if (selectionCount == 0)
			{
				uiErrors.add("LA Anaesthetic Block type is mandatory ");
			}

			if (form.ctn1().LeftAndRightSideChecked().getValue().equals(LeftAndRightSideCheckedEnumeration.None))
			{
				uiErrors.add("Left and Right Side checked is mandatory ");
			}
			if (form.ctn1().ccAnaesthetistSign().getValue() == null)
			{
				uiErrors.add("Anaesthetist Sign is mandatory ");
			}
		}

		return uiErrors.toArray(new String[0]);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.getSignInIsNotNull())
		{
			engine.showMessage("Anaesthetic Sign In Date and Time has not been saved as Cancel was clicked on the 'Anaesthetic Sign-In'");
		}
		
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV-22240 
		//WDEV-22406
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().Clinical.AcuteTheatreCaseTimesDialog))
		{
			//WDEV-22446 sign in will be rendered from the non persisted data where it exists 
			PeriOpAnaesthticSignInTimVo signInTime = null;
			if(form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.getSignInIsNotNull())
				signInTime = form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.getSignIn();
			else
				signInTime = domain.getPeriOpAnaestheticSignInByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			form.getLocalContext().setPeriOpAnaesthticSignInTimVo(signInTime);
			
			if (signInTime != null)
			{
				if (signInTime.getAnaestheticStartTimeIsNotNull())
				{
					form.dteAnestheticSignIn().setValue(signInTime.getAnaestheticStartTime().getDate());
					form.timAnaestheticSignIn().setValue(signInTime.getAnaestheticStartTime().getTime());
				}
			}
		}
	}

	@Override
	protected void onChkAntibioticsValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onBtnAntiobioticsGivenClick() throws PresentationLogicException
	{
		form.ctn1().timAntibioticsGiven().setValue(new Time());
		form.ctn1().timAntibioticsGiven().setEnabled(true);
	}

	@Override
	protected void onCmbAnaestheticTypeValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onChkRegionalBlockValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onBtnAnaestheticSignInClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.AcuteTheatreCaseTimesDialog, new Object[] { form.getLocalContext().getPeriOpAnaesthticSignInTimVo(), AcuteTheateListBookingState.ANAESTHETIC_SIGNIN, form.getLocalContext().getTimeValidationMap() }, AcuteTheateListBookingState.ANAESTHETIC_SIGNIN.getIItemText());
	}

	@Override
	protected void onRadioButtonIsPatientDiabeticValueChanged() throws PresentationLogicException
	{
		updateOptionalFieldsState();
	}
}
