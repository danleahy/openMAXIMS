//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.internalreferralsincominglistcomponent;

import ims.clinical.vo.ClinicalReferralsForIncomingReferralListVo;
import ims.clinical.vo.ClinicalReferralsForIncomingReferralListVoCollection;
import ims.clinical.vo.IncomingReferralListCriteriaVo;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVo;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVoCollection;
import ims.clinical.vo.ServiceConfigIntReferralForIncomingListVo;
import ims.clinical.vo.ServiceConfigIntReferralForIncomingListVoCollection;
import ims.clinical.vo.enums.InternalReferralGridComponentAction;
import ims.clinical.vo.lookups.InternalReferralsGridColumn;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.enums.InternalReferralStatusAction;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void initialise(Boolean isReferralsIhaveReceivedAlias)
	{
		initialise(isReferralsIhaveReceivedAlias, null);
	}
	
	private void open() 
	{
		if((Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()) && form.getGlobalContext().Clinical.getReferralIHaveReceivedCriteria() != null) 
				|| (!Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()) && form.getGlobalContext().Clinical.getIncomingReferralListCriteriaIsNotNull()) 
				|| (Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()) && form.getLocalContext().getCurrentHcpUser() != null))
		{
			if(!Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()) && form.getGlobalContext().Clinical.getIncomingReferralListCriteriaIsNotNull())
				populateSearchCriteriaScreenFromData(form.getGlobalContext().Clinical.getIncomingReferralListCriteria());
			
			if((Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()) && form.getGlobalContext().Clinical.getReferralIHaveReceivedCriteria() != null))
				populateSearchCriteriaScreenFromData(form.getGlobalContext().Clinical.getReferralIHaveReceivedCriteria());
				
			if(search(false))
			{
				if(Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()))
				{
					form.getGlobalContext().Clinical.setReferralIHaveReceivedCriteria(populateSearchCriteriaDataFromScreen());
				}
				else
				{
					form.getGlobalContext().Clinical.setIncomingReferralListCriteria(populateSearchCriteriaDataFromScreen());
				}
			}
		}
		
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.qmbHcp().setEnabled(!(Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()) && form.getLocalContext().getCurrentHcpUser() != null));
		
		form.lblWard().setVisible(form.chkInpatient().getValue());
		form.cmbWard().setVisible(form.chkInpatient().getValue());
	}
	
	private IncomingReferralListCriteriaVo populateSearchCriteriaDataFromScreen() 
	{
		IncomingReferralListCriteriaVo criteria = new IncomingReferralListCriteriaVo();
		
		criteria.setAwaitingAcceptance(form.chkAwaitingAcceptance().getValue());
		criteria.setRequires2ndOpinion(form.chkRequires2ndOpinion().getValue());
		criteria.setAccepted(form.chkAccepted().getValue());
		criteria.setRequiringAppointment(form.chkRequiringAppointment().getValue());
		criteria.setAppointmentBooked(form.chkAppointmentBooked().getValue());
		criteria.setRejected(form.chkRejected().getValue());
		criteria.setCompleted(form.chkCompleted().getValue());
		criteria.setReferralToService(form.qmbService().getValue());
		criteria.setReferralToHcp(form.qmbHcp().getValue());
		criteria.setReferralDateFrom(form.dteFrom().getValue());
		criteria.setReferralDateTo(form.dteTo().getValue());
		criteria.setInpatient(form.chkInpatient().getValue());
		criteria.setOutpatient(form.chkOutpatient().getValue());
		criteria.setWard(form.cmbWard().getValue());
		criteria.setServices(form.getGlobalContext().Clinical.getServiceConfigSearchList());
		
		return criteria;
	}

	private boolean search(boolean fromButton) 
	{
		if(fromButton)
		{
			form.ccReferrals().setValue(null);
		}
		
		if(isSearchCriteriaValid())
		{
			ClinicalReferralsForIncomingReferralListVoCollection referrals = domain.listClinicalReferrals(populateSearchCriteriaDataFromScreen());
			
			if(referrals == null || referrals.size() == 0)
			{
				engine.showMessage("No records found.");
				form.ccReferrals().setValue(null);
				return true;
			}
			
			boolean sortAfterReferralType = false;
			
			if(form.qmbService().getValue() != null || (form.getGlobalContext().Clinical.getServiceConfigSearchList() != null && form.getGlobalContext().Clinical.getServiceConfigSearchList().size() > 0))
			{
				sortAfterReferralType = true;
			}
			
			referrals.sort(new InternalReferralsInpatientUrgentDateComparator(sortAfterReferralType));
			populateScreenFromData(referrals);

			return true;
		}
		else
		{
			form.ccReferrals().setValue(null);
		}
		
		return false;
	}

	private void populateScreenFromData(ClinicalReferralsForIncomingReferralListVoCollection referrals) 
	{
		form.ccReferrals().setValue(referrals);
	}

	private boolean isSearchCriteriaValid() 
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();
		
		if(dateFrom == null)
		{
			uiErrors.add("Referral Date From is mandatory.");
		}
		
		if(dateTo == null)
		{
			uiErrors.add("Referral Date To is mandatory.");
		}
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add("Referral Date From cannot be greater than Referral Date To");
		}
		
		if (uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			return false;
		}
		
		return true;
	}

	private void populateSearchCriteriaScreenFromData(IncomingReferralListCriteriaVo criteria) 
	{
		clearScreen();
		
		if(criteria == null)
			return;
		
		form.chkAwaitingAcceptance().setValue(criteria.getAwaitingAcceptance());
		form.chkRequires2ndOpinion().setValue(criteria.getRequires2ndOpinion());
		form.chkAccepted().setValue(criteria.getAccepted());
		form.chkRequiringAppointment().setValue(criteria.getRequiringAppointment());
		form.chkAppointmentBooked().setValue(criteria.getAppointmentBooked());
		form.chkRejected().setValue(criteria.getRejected());
		form.chkCompleted().setValue(criteria.getCompleted());
		if(criteria.getReferralToService() != null)
		{
			form.qmbService().newRow(criteria.getReferralToService(), criteria.getReferralToService().getService().getServiceName());
		}
		form.qmbService().setValue(criteria.getReferralToService());
		
		if(criteria.getReferralToHcp() != null)
		{
			form.qmbHcp().newRow(criteria.getReferralToHcp(), criteria.getReferralToHcp().getIMosName());
		}
		
		form.qmbHcp().setValue(criteria.getReferralToHcp());
		
		form.dteFrom().setValue(criteria.getReferralDateFrom());
		form.dteTo().setValue(criteria.getReferralDateTo());
		form.chkInpatient().setValue(criteria.getInpatient());
		form.chkOutpatient().setValue(criteria.getOutpatient());
		form.cmbWard().setValue(criteria.getWard());
		form.getGlobalContext().Clinical.setServiceConfigSearchList(criteria.getServices());
		setServiceLabelValue(listServices());
	}

	private void clearScreen() 
	{
		form.chkAwaitingAcceptance().setValue(null);
		form.chkRequires2ndOpinion().setValue(null);
		form.chkAccepted().setValue(null);
		form.chkRequiringAppointment().setValue(null);
		form.chkAppointmentBooked().setValue(null);
		form.chkRejected().setValue(null);
		form.chkCompleted().setValue(null);
		form.qmbService().clear();
		
		if(!(Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()) && form.getLocalContext().getCurrentHcpUser() != null))
		{
			form.qmbHcp().clear();
		}
		
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.chkInpatient().setValue(null);
		form.chkOutpatient().setValue(null);
		form.cmbWard().setValue(null);
		
		form.getGlobalContext().Clinical.setServiceConfigSearchList(null);
		setServiceLabelValue(null);
	}

	private void initialiseForm(Boolean isReferralsIhaveReceivedAlias, List<InternalReferralStatusAction> deniedActions) 
	{
		form.getLocalContext().setIsReferralIHaveReceivedMode(isReferralsIhaveReceivedAlias);
		form.getLocalContext().setInternalReferralSettings(domain.getInternalReferralSettings());
		
		form.chkAwaitingAcceptance().setValue(Boolean.TRUE);
		form.chkRequires2ndOpinion().setValue(Boolean.TRUE);
		
		form.dteTo().setValue(new Date());
		
		if(form.getLocalContext().getInternalReferralSettings() != null && form.getLocalContext().getInternalReferralSettings().getSearchNumberOfDays() != null)
		{
			Date dateFrom = new Date();
			dateFrom.addDay(-form.getLocalContext().getInternalReferralSettings().getSearchNumberOfDays());
			form.dteFrom().setValue(dateFrom);
		}
		
		Object hcpUser = domain.getHcpLiteUser();
		
		if(hcpUser instanceof HcpLiteVo)
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()))
			{
				form.qmbHcp().newRow((HcpLiteVo) hcpUser, ((HcpLiteVo) hcpUser).getIMosName());
				form.qmbHcp().setValue((HcpLiteVo) hcpUser);
			}
			
			form.getLocalContext().setCurrentHcpUser((HcpLiteVo) hcpUser);
			form.getLocalContext().setCurrentMosUser(((HcpLiteVo) hcpUser).getMos());
		}
		else
		{
			Object mosUser = domain.getMosUser();
			
			if(mosUser instanceof MemberOfStaffLiteVo)
			{
				form.getLocalContext().setCurrentMosUser((MemberOfStaffLiteVo) mosUser);
			}
		}
		
		if(Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()))
		{
			form.chkInpatient().setValue(true);
			form.chkOutpatient().setValue(true);
			form.chkAccepted().setValue(true); //WDEV-19425
		}		

		populateWardCombo();
		
		form.ccReferrals().initialise(null, createIncomingReferralWorklistColumns(), deniedActions, getAllowedActions());
		
		form.getLocalContext().setInternalReferralHelper(domain.getInternalReferralHelper());
	}

	private List<InternalReferralStatusAction> getAllowedActions() 
	{
		List<InternalReferralStatusAction> allowedActions = new ArrayList<InternalReferralStatusAction>();
		
		/*
		allowedActions.add(InternalReferralStatusAction.SIGN_OFF);
		allowedActions.add(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION);
		allowedActions.add(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION);
		allowedActions.add(InternalReferralStatusAction.VIEW);
		allowedActions.add(InternalReferralStatusAction.EDIT);
		allowedActions.add(InternalReferralStatusAction.APPOINTMENT_BOOKED);
		*/
		
		return allowedActions;
	}

	private void populateWardCombo() 
	{
		form.cmbWard().clear();
		
		LocationLiteVoCollection wards = domain.listWards(domain.getCurrentLocation());
		
		if (wards == null || wards.size() == 0)
			return;
		
		for(LocationLiteVo ward : wards)
		{
			if(ward == null)
				continue;
			
			form.cmbWard().newRow(ward, ward.getName());
		}
	}

	private InternalReferralsGridColumnDetailsVoCollection createIncomingReferralWorklistColumns() 
	{
		InternalReferralsGridColumnDetailsVoCollection columns = new InternalReferralsGridColumnDetailsVoCollection();
		
		InternalReferralsGridColumnDetailsVo referralDate = new InternalReferralsGridColumnDetailsVo();
		referralDate.setColumn(InternalReferralsGridColumn.REFERRAL_DATE);
		referralDate.setWidth(68);
		columns.add(referralDate);
		
		InternalReferralsGridColumnDetailsVo urgent = new InternalReferralsGridColumnDetailsVo();
		urgent.setColumn(InternalReferralsGridColumn.URGENT);
		urgent.setWidth(35);
		columns.add(urgent);
		
		InternalReferralsGridColumnDetailsVo referringHcp = new InternalReferralsGridColumnDetailsVo();
		referringHcp.setColumn(InternalReferralsGridColumn.REFERRIING_HCP);
		referringHcp.setWidth(95);
		columns.add(referringHcp);
		
		InternalReferralsGridColumnDetailsVo iPOrOP = new InternalReferralsGridColumnDetailsVo();
		iPOrOP.setColumn(InternalReferralsGridColumn.IP_OR_OP);
		iPOrOP.setWidth(40);
		columns.add(iPOrOP);
		
		InternalReferralsGridColumnDetailsVo nhs = new InternalReferralsGridColumnDetailsVo();
		nhs.setColumn(InternalReferralsGridColumn.PATIENT_ID);
		nhs.setWidth(82);
		columns.add(nhs);
		
		InternalReferralsGridColumnDetailsVo surname = new InternalReferralsGridColumnDetailsVo();
		surname.setColumn(InternalReferralsGridColumn.PATIENT_NAME);
		surname.setWidth(112);
		columns.add(surname);
		
		InternalReferralsGridColumnDetailsVo dob = new InternalReferralsGridColumnDetailsVo();
		dob.setColumn(InternalReferralsGridColumn.DOB);
		dob.setWidth(64);
		columns.add(dob);
		
		InternalReferralsGridColumnDetailsVo service = new InternalReferralsGridColumnDetailsVo();
		service.setColumn(InternalReferralsGridColumn.SERVICE);
		service.setWidth(102);
		columns.add(service);
		
		InternalReferralsGridColumnDetailsVo refTo = new InternalReferralsGridColumnDetailsVo();
		refTo.setColumn(InternalReferralsGridColumn.REFERRAL_TO);
		refTo.setWidth(95);
		columns.add(refTo);
		
		InternalReferralsGridColumnDetailsVo apptStatus = new InternalReferralsGridColumnDetailsVo();
		apptStatus.setColumn(InternalReferralsGridColumn.APPOINTMENT_STATUS);
		apptStatus.setWidth(23);
		columns.add(apptStatus);
		
		InternalReferralsGridColumnDetailsVo status = new InternalReferralsGridColumnDetailsVo();
		status.setColumn(InternalReferralsGridColumn.STATUS);
		status.setWidth(-1);
		columns.add(status);
		
		return columns;
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		
		form.ccReferrals().setValue(null);
		
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setPatientDocumentsCollectionForClinicalReferral(null);
		
		if(Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()))
		{
			form.getGlobalContext().Clinical.setReferralIHaveReceivedCriteria(null);
		}
		else
		{
			form.getGlobalContext().Clinical.setIncomingReferralListCriteria(null);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(search(true))
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getIsReferralIHaveReceivedMode()))
			{
				form.getGlobalContext().Clinical.setReferralIHaveReceivedCriteria(populateSearchCriteriaDataFromScreen());
			}
			else
			{
				form.getGlobalContext().Clinical.setIncomingReferralListCriteria(populateSearchCriteriaDataFromScreen());
			}
		}
		
		updateControlsState();
	}

	@Override
	protected void onCcReferralsValueChanged() throws PresentationLogicException 
	{
		if(InternalReferralGridComponentAction.REFRESH.equals(form.ccReferrals().getAction()))
		{
			open();
		}
	}

	@Override
	protected void onChkInpatientValueChanged()	throws PresentationLogicException 
	{
		if(!form.chkInpatient().getValue())
		{
			form.cmbWard().setValue(null);
		}
		//WDEV-19425
		if (Boolean.TRUE.equals(form.chkInpatient().getValue()))
		{		
			form.chkAccepted().setValue(true);
		}
		updateControlsState();
	}

	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException 
	{
		bindServiceQueryCombo(value);
	}

	private void bindServiceQueryCombo(String value) 
	{
		form.qmbService().clear();
		
		if (value == null || value.length() == 0)
			return;
		
		ServiceConfigIntReferralForIncomingListVoCollection services = domain.listServices(value);
		
		if(services != null)
		{
			for(ServiceConfigIntReferralForIncomingListVo service : services)
			{
				if(service == null)
					continue;
				
				form.qmbService().newRow(service, service.getService().getServiceName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbService().showOpened();
	}

	@Override
	protected void onImbServiceSearchClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Clinical.InternalReferralsServicesSearch, new Object[] {Boolean.TRUE});
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(form.getForms().Clinical.InternalReferralsServicesSearch.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				setServiceLabelValue(listServices());
				form.qmbService().clear();
			}
		}
	}

	private String listServices() 
	{
		if(form.getGlobalContext().Clinical.getServiceConfigSearchList() == null || form.getGlobalContext().Clinical.getServiceConfigSearchList().size() == 0)
			return null;
		
		StringBuffer displayText = new StringBuffer();
		
		for(ServiceConfigIntReferralForIncomingListVo serviceConfig : form.getGlobalContext().Clinical.getServiceConfigSearchList())
		{
			if(serviceConfig == null)
				continue;
			
			if(displayText.length() > 0)
				displayText.append(", ");
			
			displayText.append(serviceConfig.getService().getServiceName());
		}
		
		if(displayText.length() > 0)
			displayText.insert(0, "Service(s):  ");
		
		return displayText.toString();
	}

	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException 
	{
		if(form.qmbService().getValue() != null)
		{
			form.getGlobalContext().Clinical.setServiceConfigSearchList(null);
			setServiceLabelValue(listServices());
		}
	}

	private void setServiceLabelValue(String services) 
	{
		form.lblSevices().setValue(null);
		form.lblSevices().setTooltip(null);
		
		if(services == null || services.length() == 0)
			return;
		
		form.lblSevices().setValue(services.toString().length() > 70 ? services.toString().substring(0, 70) + "..." : services.toString());
		form.lblSevices().setTooltip(services);
	}
	
	public class InternalReferralsInpatientUrgentDateComparator implements Comparator<ClinicalReferralsForIncomingReferralListVo>
	{
		private boolean bOrderByReferralType;
		
		public InternalReferralsInpatientUrgentDateComparator()
		{
			bOrderByReferralType = false;
		}
		
		public InternalReferralsInpatientUrgentDateComparator(boolean bOrderByReferralType)
		{
			this.bOrderByReferralType = bOrderByReferralType;
		}
		
		public int compare(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2)
		{
			if(bOrderByReferralType)
			{
				if(o1 != null && o1.getReferralTypeText() != null && o2 != null && o2.getReferralTypeText() != null)
				{
					int orderByReferralType = o1.getReferralTypeText().compareTo(o2.getReferralTypeText());
					
					if(orderByReferralType == 0)
					{
						return compareByUrgent(o1, o2);
					}
					
					return orderByReferralType;
				}
				
				if((o1 == null || o1.getReferralTypeText() == null) && (o2 == null || o2.getReferralTypeText() == null))
					return compareByUrgent(o1, o2);
				
				if(o1 == null || o1.getReferralTypeText() == null) 
					return 1;
				
				if(o2 == null || o2.getReferralTypeText() == null) 
					return -1;	
			}
			else
			{
				return compareByUrgent(o1, o2);
			}
			
			return 0;
		}

		private int compareByUrgent(ClinicalReferralsForIncomingReferralListVo o1,	ClinicalReferralsForIncomingReferralListVo o2) 
		{
			if(o1 != null && o1.getUrgentReferral() != null && o2 != null && o2.getUrgentReferral() != null)
			{
				int orderByUrgent = -1 * o1.getUrgentReferral().compareTo(o2.getUrgentReferral());
				
				if(orderByUrgent == 0)
				{
					return compareByReferralDate(o1, o2);
				}
				
				return orderByUrgent;
			}
			
			if((o1 == null || o1.getUrgentReferral() == null) && (o2 == null || o2.getUrgentReferral() == null))
				return compareByReferralDate(o1, o2);
			
			if(o1 == null || o1.getUrgentReferral() == null) 
				return 1;
			
			if(o2 == null || o2.getUrgentReferral() == null) 
				return -1;
			
			return 0;
		}

		private int compareByReferralDate(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2) 
		{
			if(o1 != null && o1.getDateDecisionToRefer() != null && o2 != null && o2.getDateDecisionToRefer() != null)
			{
				int orderByReferralDate = -1 * o1.getDateDecisionToRefer().compareTo(o2.getDateDecisionToRefer());
				
				if(orderByReferralDate == 0)
				{
					return compareByReferralName(o1, o2);
				}
				
				return orderByReferralDate;
			}
			
			if((o1 == null || o1.getDateDecisionToRefer() == null) && (o2 == null || o2.getDateDecisionToRefer() == null))
				return compareByReferralName(o1, o2);
			
			if(o1 == null || o1.getDateDecisionToRefer() == null) 
				return 1;
			
			if(o2 == null || o2.getDateDecisionToRefer() == null) 
				return -1;
			
			return 0;
		}

		private int compareByReferralName(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2) 
		{
			if(o1 != null && o1.getPatient().getName() != null && o2 != null && o2.getPatient().getName() != null)
			{
				return o1.getPatient().getName().compareTo(o2.getPatient().getName());
			}
			
			if(o1 == null || o1.getPatient().getName() == null) 
				return 1;
			
			if(o2 == null || o2.getPatient().getName() == null) 
				return -1;
			
			return 0;
		}
	}

	public void initialise(Boolean isReferralsIhaveReceivedAlias,	List<InternalReferralStatusAction> deniedActions) 
	{
		initialiseForm(isReferralsIhaveReceivedAlias, deniedActions);
		open();
	}

	@Override
	protected void onQmbHcpTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbHcp().clear();
		
		if (value == null || value.length() == 0)
			return;

		HcpLiteVoCollection hcpColl = domain.listHCPs(value);

		if (hcpColl != null)
		{
			for (int i = 0; i < hcpColl.size(); i++)
			{
				form.qmbHcp().newRow(hcpColl.get(i), hcpColl.get(i).getMos().getIMosName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbHcp().showOpened();
	}
}
