//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5527.24259)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.outpatientcliniclist;

import ims.admin.vo.PDSConfigurationVo;
import ims.RefMan.vo.CatsReferralCurrentStatusVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralManualAssembledForAppointmentOutcomeListVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListForDNAAppointmentsVo;
import ims.RefMan.vo.TCIForPatientElectiveListAppointmentDNAVo;
import ims.RefMan.vo.TCIOutcomeForAppointmentDNAVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.vo.OutpatientClinicListSearchCriteriaVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.helper.PdsException;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MissingMappingVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PdsErrorVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.Language;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;
import ims.scheduling.vo.AppointmentForOutpatientClinicListManualCustomClassVo;
import ims.scheduling.vo.AppointmentForOutpatientClinicListManualCustomClassVoCollection;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVo;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.LateTimeArrivalRecordVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo;
import ims.scheduling.vo.SessionMoveVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.enums.AppointmentOutcomeAction;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.scheduling.vo.lookups.ProfileListType;
import ims.scheduling.vo.lookups.ProfileListTypeCollection;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.LookupTypeVo;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import sun.misc.Sort;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	private static final String	COLUMN_OUTCOME			    = "0";
	private static final String	COLUMN_ICAB                 = "1";
	private static final String	COLUMN_IDENTIFIER     	    = "2";
	//private static final String	COLUMN_CLINIC_NAME		    = "3";
	private static final String	COLUMN_SURNAME     		    = "3";
	private static final String	COLUMN_FORENAME   		    = "4";
	private static final String COLUMN_SEX 		            = "5";
	private static final String	COLUMN_DOB                  = "6";
	private static final String	COLUMN_CLINIC_NAME		    = "7";
	private static final String	COLUMN_ACTIVITY_IMAGE     	= "8";
	private static final String	COLUMN_ACTIVITY_TYPE     	= "9";
	private static final String	COLUMN_APPT_TIME   		    = "10";
	private static final String COLUMN_BOOKING_COMMENTS 	= "11";
	private static final String	COLUMN_APPT_LETTER_PRINTED  = "12";
	private static final String	COLUMN_INTERPRETER_REQUIRED = "13";
	private static final String	COLUMN_STATUS           	= "14";
	private static final String	COLUMN_CONTACT_DETAILS  	= "15";
	private static final String	COLUMN_LINKED_APPOINTMENT  	= "16";
	
	
	//---------------------------------------------------------------------------------------------------------------------------
	//	Form Events handlers
	//---------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			form.dyngrdResults().setRowSelectionChangedEventRequirePdsAuthentication(true);
		
		initialise();
		open();
	}
	
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if (cancelAndRebook() == false)
					search(false);
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingAppointment(null);
			}

			form.getLocalContext().setAppointmentToCancel(null);
			return;

		}
		else if (formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog) && DialogResult.OK.equals(result))
		{
			if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() == 1)
			{
				form.lblListOwnersSel().setValue(null);
				form.ccListOwner().setValue(form.getGlobalContext().Scheduling.getSelectedHCPs().get(0));
			}
			else
			{
				form.ccListOwner().clear();
				populateListOwnersLabel(form.getGlobalContext().Scheduling.getSelectedHCPs());
			}
			
		}
		else if ((formName.equals(form.getForms().Scheduling.AppointmentArrivalDialog) || formName.equals(form.getForms().RefMan.ArrivalSeenTimeDialog)) && result.equals(DialogResult.OK))
		{
			arrivalHandler();
		}
		else if (formName.equals(form.getForms().Core.PDSDemographicsDialog))
		{
			arriveBookingHandler();
		}
		else if ((formName.equals(form.getForms().Scheduling.AppointmentOutcomeDialog) && result.equals(DialogResult.OK))
				|| formName.equals(form.getForms().RefMan.ReferralDetailsDialog)//WDEV-22921
				|| formName.equals(form.getForms().RefMan.BookAppointmentDialog))//WDEV-22996
		{
			search(false);//WDEV-23007
		}
		
		//WDEV-22848
		else if (form.getForms().Core.SelectLookupInstances.equals(formName) && DialogResult.OK.equals(result))
		{
			listTypeMultipleSelectionChanged();
			updateControlsState();
		}
	}


	private void listTypeMultipleSelectionChanged()
	{
		populateListTypeSelectionToScreen((ProfileListTypeCollection) form.getGlobalContext().Core.getSelectedLookupInstances());
	
		if (form.dteDate().getValue() == null)//WDEV-23273
		{
			form.dyngrdResults().getRows().clear();
		}
		form.qmbClinic().setTooltip(null);//WDEV-23273
		form.qmbClinic().clear();//WDEV-23273
		
	}

	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getUndoArrivalMessageBoxIdIsNotNull() && form.getLocalContext().getUndoArrivalMessageBoxId().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			form.getLocalContext().setUndoArrivalMessageBoxId(null);
			updateBooking(Status_Reason.BOOKED, AppointmentTrackingStatus.UNDO_ARRIVAL, false);
			search(false);//WDEV-23007
		}
		else if (form.getLocalContext().getUndoSeenMessageBoxId() != null && form.getLocalContext().getUndoSeenMessageBoxId().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			form.getLocalContext().setUndoSeenMessageBoxId(null);
			updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.UNDO_SEEN, false);
			search(false);
		}
	}

	
	
	private void initialise()
	{
		form.dteDate().setValue(new Date());
		form.ccListOwner().initialize(MosType.HCP);
		form.lblListOwnersSel().setValue(null);
		form.lblListOwnersSel().setTooltip(null);
		
		form.lblListTypeSel().setValue(null);
		form.lblListTypeSel().setTooltip(null);
		
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);
		
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.CLINICLISTWITHICP_TIMER_INTERVAL.getValue());
		form.getGlobalContext().Core.setSelectLookupType(new LookupTypeVo(ProfileListType.TYPE_ID));
		form.getGlobalContext().Core.setSelectedLookupInstances(null);
		form.imbAutoRefresh().setEnabled(false);
		form.getLocalContext().setWasTimerEnabled(false);
		

		populateHospitalsCombo();

		if( form.cmbHospital().getValue() != null)
			populateOutpatientLocationCombo(form.cmbHospital().getValue());	
		
		createDynamicGrid();

		populateSearchCriteriaFromGC();
		
	}

	private void populateHospitalsCombo()
	{
		form.cmbHospital().clear();

		MemberOfStaffRefVo mosUser = (MemberOfStaffRefVo) domain.getMosUser();
		ILocation currentLocation = engine.getCurrentLocation();
		LocationLiteVo parentHospital = currentLocation != null ? domain.getParentHospital(currentLocation) : null;
		LocationLiteVoCollection hospitals = domain.getActiveHospitals(mosUser);

		if (hospitals!=null)
		{
			for (LocationLiteVo item: hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());

				if (currentLocation != null  && form.dteDate().getValue() != null)
				{					
					form.cmbHospital().setValue(currentLocation.getID() == item.getID_Location().intValue()  ? item : parentHospital);
					populateOutpatientLocationCombo(form.cmbHospital().getValue());
				}
			}
		}
	}

	private void loadClinics(String clinicText)//WDEV-23273
	{
		
		Boolean fromEventSearch = true;
		if(clinicText== null)//WDEV-23273
		{
			fromEventSearch = false;
			clinicText = "%%%";
		}
		form.qmbClinic().clear();//WDEV-23273
		form.qmbClinic().setTooltip(null); //WDEV-22660 

		if (form.cmbHospital().getValue() == null || form.dteDate().getValue() == null)
			return;

		SessionShortVoCollection clinics = domain.listClinics(form.cmbHospital().getValue(), form.dteDate().getValue(),getListTypeSelection(),clinicText);

		if (clinics == null)
			return;

		for (SessionShortVo item: clinics)
		{
			StringBuffer sb = new StringBuffer();

			sb.append(item.getName());
			sb.append(" - ");
			sb.append(item.getSessionDate());

			form.qmbClinic().newRow(item, sb.toString());//WDEV-23273
		}
		//WDEV-23022
		defaultClinicIfApplicable(clinics,fromEventSearch);

		form.qmbClinic().setTooltip(form.qmbClinic().getValue() != null ? form.qmbClinic().getValue().getDescription() : null);//WDEV-23273

	}


	private void defaultClinicIfApplicable(SessionShortVoCollection clinics , Boolean fromEventSearch)
	{
		int size = clinics == null ? 0 : clinics.size();
		if (size == 0)
			return;
		if (size == 1)
		{	
			form.qmbClinic().setValue(clinics.get(0));//WDEV-23273
			return;
		}	
		else if(Boolean.TRUE.equals(fromEventSearch))
		{
			form.qmbClinic().showOpened();//WDEV-23273
		}
		SessionShortVoCollection clinicsForCurrentLocation = new SessionShortVoCollection();
		ILocation currentLocation = engine.getCurrentLocation();
		if (currentLocation != null)
		{	
			for (int i=0;i<size;i++)
			{	
				if (clinics.get(i).getSchLocation() != null && currentLocation.getID() == clinics.get(i).getSchLocation().getID_Location())
				{
					clinicsForCurrentLocation.add(clinics.get(i));
				}		
			}
		}	
		if (clinicsForCurrentLocation.size() == 1)
			form.qmbClinic().setValue(clinicsForCurrentLocation.get(0));//WDEV-23273	
		else if(Boolean.TRUE.equals(fromEventSearch))
			form.qmbClinic().showOpened();//WDEV-23273
		
	}


	private void populateOutpatientLocationCombo(LocationLiteVo hospital)
	{
		form.cmbOutpatientLocation().clear();
		if (hospital == null)
			return;
		
		LocationLiteVoCollection outplocs = domain.listOutpatientLocationsByHospital(hospital);
		if( outplocs != null && outplocs.size() > 0)
		{
			for( LocationLiteVo outploc : outplocs)
			{
				if( outploc == null)
					continue;

				form.cmbOutpatientLocation().newRow(outploc, outploc.getName());
			}
		}
		
	}

	private void createDynamicGrid()
	{
		form.dyngrdResults().getColumns().clear();
		form.dyngrdResults().setHeaderHeight(45);
		form.dyngrdResults().setSelectable(true);

		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		DynamicGridColumn column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_OUTCOME);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_ICAB);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);

			
		column = form.dyngrdResults().getColumns().newColumn(dispIdType.getText(), COLUMN_IDENTIFIER);

		column.setWidth(90);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593
		
		column = form.dyngrdResults().getColumns().newColumn("Surname", COLUMN_SURNAME);

		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593

		column = form.dyngrdResults().getColumns().newColumn("Forename", COLUMN_FORENAME);

		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593

		column = form.dyngrdResults().getColumns().newColumn("Sex", COLUMN_SEX);

		column.setWidth(40);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593

		column = form.dyngrdResults().getColumns().newColumn("D.O.B", COLUMN_DOB);

		column.setWidth(60);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn("Clinic", COLUMN_CLINIC_NAME);

		column.setWidth(120);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_ACTIVITY_IMAGE);

		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		column.setSortMode(SortMode.NONE);

		column = form.dyngrdResults().getColumns().newColumn("Activity\nType", COLUMN_ACTIVITY_TYPE);

		column.setWidth(85);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593

		column = form.dyngrdResults().getColumns().newColumn("Appt.\nTime", COLUMN_APPT_TIME);

		column.setWidth(40);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_BOOKING_COMMENTS);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_APPT_LETTER_PRINTED);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_INTERPRETER_REQUIRED);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_LINKED_APPOINTMENT);

		column.setWidth(25);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dyngrdResults().getColumns().newColumn("Status", COLUMN_STATUS);

		column.setWidth(52);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-23593

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_CONTACT_DETAILS);

		column.setWidth(-1);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.NONE);
		
	}

	
	private void populateSearchCriteriaFromGC()
	{
		OutpatientClinicListSearchCriteriaVo searchCriteria = form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria();

		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue(searchCriteria.getHospital());

		if (form.cmbHospital().getValue() != null)
		{
			populateOutpatientLocationCombo(form.cmbHospital().getValue());
		}	

		if (searchCriteria.getService() != null)
		{
			form.qmbService().newRow(searchCriteria.getService(), searchCriteria.getService().getServiceName());
			form.qmbService().setValue(searchCriteria.getService());
		}

		form.dteDate().setValue(searchCriteria.getDate());
		form.timFrom().setValue(searchCriteria.getTimeFrom());
		form.timTo().setValue(searchCriteria.getTimeTo());

		if(searchCriteria.getClinic() != null)//WDEV-23273
		{
			loadClinics(null);
			form.qmbClinic().setValue(searchCriteria.getClinic());
		}
			
		
		if (searchCriteria.getListOwners() != null && searchCriteria.getListOwners().size() > 0)
		{
			form.getGlobalContext().Scheduling.setSelectedHCPs(searchCriteria.getListOwners());
			
			if (searchCriteria.getListOwners().size() == 1)
			{
				form.ccListOwner().setValue(searchCriteria.getListOwners().get(0));
			}
			else
			{
				populateListOwnersLabel(searchCriteria.getListOwners());

			}
		}
		
		if (searchCriteria.getListType() != null)
		{
			populateListTypeSelectionToScreen(searchCriteria.getListType());
			listTypeValueChanged();
			form.getGlobalContext().Core.setSelectedLookupInstances(searchCriteria.getListType()); //WDEV-22848
		}
		form.qmbClinic().setValue(searchCriteria.getClinic());//WDEV-23273
		form.cmbOutpatientLocation().setValue(searchCriteria.getOutPatientLocation());
		
	}

	
	private void populateListTypeSelectionToScreen(ProfileListTypeCollection listTypes)
	{
		form.cmbListType().setValue(null);
		form.lblListTypeSel().setValue(null);
		form.lblListTypeSel().setTooltip(null);
		
		if (listTypes.size() == 0)
			return;
		if (listTypes.size() == 1)
		{
			form.cmbListType().setValue(listTypes.get(0));
			return;
		}
		populateListTypeLabel(listTypes);
	}


	private void populateListTypeLabel(ProfileListTypeCollection listTypes)
	{
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listTypes.size(); i++)
		{
			ProfileListType listType = listTypes.get(i);

			if (listType != null)
			{				
				namesString.append((i == 0 ? "" : ", " ) + listType.getText());				
			}
		}
		if (namesString.length() > 60)
		{
			form.lblListTypeSel().setValue(namesString.substring(0, 60) + "...");
		}
		else
			form.lblListTypeSel().setValue(namesString.toString());

		form.lblListTypeSel().setTooltip(namesString.toString());
		
	}


	private void populateListOwnersLabel(HcpLiteVoCollection listOwners)
	{
		if (listOwners == null || listOwners.size() ==0)
		{	
			form.lblListOwnersSel().setValue(null);
			return;
		}
		
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner != null && listOwner.getName() != null)
			{
				if (i == 0)
					namesString.append(listOwner.getName());
				else
					namesString.append(", " + listOwner.getName());
			}
		}

		if (namesString.length() > 60)
		{
			form.lblListOwnersSel().setValue(namesString.substring(0, 60) + "...");
		}
		else
			form.lblListOwnersSel().setValue(namesString.toString());

		form.lblListOwnersSel().setTooltip(namesString.toString());
		
	}

	private void open()
	{
		if (form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria() != null)
		{
			Boolean wasTimerOn = form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria() != null && form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria().getWasTimerOn();

			search(wasTimerOn ? false : true);

			if (Boolean.TRUE.equals(wasTimerOn))
			{
				form.getLocalContext().setWasTimerEnabled(true);
				toggleTimer(false);
			}
		}

		updateControlsState();
	}

	private void search(boolean isFromButton)
	{
		form.imbAutoRefresh().setEnabled(false);
		clearGlobalContexts();

		if (!validateSearch())
		{
			form.dyngrdResults().getRows().clear();
			updateControlsState();
			return;
		}
		form.getGlobalContext().Clinical.setOutpatientClinicListSearchCriteria(populateSearchCriteriaVo());

		AppointmentForOutpatientClinicListManualCustomClassVoCollection appointments = domain.listAppointmentsManualAssemblerClass(form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria());
		
		//WDEV-23593
		Object[] sortColumnOrder = null;
		sortColumnOrder = new Object[]{COLUMN_APPT_TIME,SortOrder.ASCENDING};
		if(isFromButton)
			form.getLocalContext().setSortOrderCol_ApptTime(SortOrder.ASCENDING);

		if(form.getLocalContext().getSortColumnOrder() != null)
			sortColumnOrder = form.getLocalContext().getSortColumnOrder();
		
		sortByColums(sortColumnOrder,appointments,true);
		populateResults(appointments, isFromButton);
		//WDEV-23593 end

		updateControlsState();
	}
	

	private void populateResults(AppointmentForOutpatientClinicListManualCustomClassVoCollection appointments, boolean isFromButton)
	{
		Object previosGridValue = form.dyngrdResults().getValue();
		form.dyngrdResults().getRows().clear();
		
		
		if (isFromButton && (appointments == null || appointments.size() == 0))
		{
			engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
			
		form.imbAutoRefresh().setEnabled(true);
		form.imbAutoRefresh().setTooltip("Click button to Start the Automatic Refresh");
		
		if (appointments == null)
			return;
		

		StringBuffer strTooltip = new StringBuffer();
		
		for (int i = 0; i < appointments.size(); i++)
		{
			AppointmentForOutpatientClinicListManualCustomClassVo appointment = appointments.get(i);

			if (appointment == null)
				continue;

			DynamicGridRow newDynamicRow = form.dyngrdResults().getRows().newRow();

			boolean hasBookingComments = appointment != null && appointment.getBookingCommentsIsNotNull() && appointment.getBookingComments().length() > 0;

			strTooltip.delete(0, strTooltip.length());

			if (hasBookingComments)
				strTooltip.append("<br><b>Booking Comments:</b> ").append(appointment.getBookingComments());
			
			if (appointment != null && appointment.getServiceFunction() != null)
				strTooltip.append("<br><b>Service Function:</b> ").append(appointment.getServiceFunction());

			if(appointment != null && appointment.getOutcomeText() != null)
				strTooltip.append("<br><b>Appointment Outcome:</b> " + appointment.getOutcomeText());

			if (appointment != null && appointment.getOutcomeComments() != null)
				strTooltip.append("<br><b>Outcome Comment:</b> " + appointment.getOutcomeComments());

			if(appointment != null && appointment.getComments() != null)
				strTooltip.append("<br><b>Appointment Comments:</b> " + appointment.getComments());

			if (appointment.getReferral() != null)
			{
				if (appointment.getReferral().getCurrentRTTStatus() != null)
				{
					strTooltip.append("<br><b>RTT Status:</b> ").append(appointment.getReferral().getCurrentRTTStatus());
				}

				if(appointment.getReferral().getEnd18WW() != null)
				{
					strTooltip.append("<br><b>RTT Breach Date:</b> " + appointment.getReferral().getEnd18WW());
				}

				if (appointment.getReferral().getCodeUBRN() != null)
					strTooltip.append("<br><b>UBRN:</b> " + appointment.getReferral().getCodeUBRN());
			}			

			//WDEV-22497
			if (appointment.getReferral() != null && appointment.getReferral().getCodeUBRN() != null)
			{
				strTooltip.append("<br><b>UBRN:</b> " + appointment.getReferral().getCodeUBRN());
			}

			DynamicGridCell cellOutcome = newDynamicRow.getCells().newCell(getColumnById(COLUMN_OUTCOME), DynamicCellType.IMAGE);
			cellOutcome.setReadOnly(true);

			if (Boolean.TRUE.equals(appointment.getHasElectiveList()))
			{
				cellOutcome.setValue(form.getImages().Core.UI16);
				cellOutcome.setTooltip("Waiting list entry");
			}
			else if (appointment.getOutcomeText() != null)
			{
				cellOutcome.setValue(form.getImages().Scheduling.appointment_outcome_16);
				cellOutcome.setTooltip("Appointment Outcome: " + appointment.getOutcomeText());
			}

			DynamicGridCell cellICAB = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ICAB), DynamicCellType.IMAGE);
			cellICAB.setReadOnly(true);
			cellICAB.setValue(appointment.getReferral() != null && Boolean.TRUE.equals(appointment.getIsCABBooking()) ? form.getImages().OCRR.LetterC : null);

			DynamicGridCell cellClinic = newDynamicRow.getCells().newCell(getColumnById(COLUMN_CLINIC_NAME), DynamicCellType.STRING);
			cellClinic.setReadOnly(true);

			if (appointment.getSessionName() != null)
				cellClinic.setValue(appointment.getSessionName());
			
			cellClinic.setTooltip(cellClinic.getValue() + "<br>" + strTooltip.toString());
			
			DynamicGridCell cellIdentifier = newDynamicRow.getCells().newCell(getColumnById(COLUMN_IDENTIFIER), DynamicCellType.STRING);
			cellIdentifier.setReadOnly(true);

			if (appointment.getPatient() != null && appointment.getPatient().getDisplayID() != null)
				cellIdentifier.setValue(appointment.getPatient().getDisplayID());
			
			cellIdentifier.setTooltip(cellIdentifier.getValue() != null ? cellIdentifier.getValue() + "<br>" + strTooltip.toString() : strTooltip.toString());

			DynamicGridCell cellSurname = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SURNAME), DynamicCellType.STRING);
			cellSurname.setReadOnly(true);
			cellSurname.setValue(appointment.getPatient() != null ? appointment.getPatient().getSurname() : "");
			cellSurname.setTooltip(cellSurname.getValue() + "<br>" + strTooltip.toString());

			DynamicGridCell cellForename = newDynamicRow.getCells().newCell(getColumnById(COLUMN_FORENAME), DynamicCellType.STRING);
			cellForename.setReadOnly(true);
			cellForename.setValue(appointment.getPatient() != null ? appointment.getPatient().getForename() : "");
			cellForename.setTooltip(cellForename.getValue() + "<br>" + strTooltip.toString());

			DynamicGridCell cellSex = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SEX), DynamicCellType.STRING);
			cellSex.setReadOnly(true);
			cellSex.setValue(appointment.getPatient() != null && appointment.getPatient().getSex() != null  ? appointment.getPatient().getSex() : "");
			cellSex.setTooltip(appointment.getPatient() != null && appointment.getPatient().getSex() != null ? appointment.getPatient().getSex() + "<br>" + strTooltip : strTooltip.toString());

			DynamicGridCell cellDOB = newDynamicRow.getCells().newCell(getColumnById(COLUMN_DOB), DynamicCellType.STRING);
			cellDOB.setReadOnly(true);
			cellDOB.setValue(appointment.getPatient() != null && appointment.getPatient().getDob() != null  ? appointment.getPatient().getDob().toString() : "");
			cellDOB.setTooltip(strTooltip.toString());

			//DynamicGridCell cellConsultant = newDynamicRow.getCells().newCell(getColumnById(COLUMN_CONSULTANT), DynamicCellType.STRING);
			//cellConsultant.setReadOnly(true);

//			if (appointment.getSession() != null && appointment.getSession().getListOwners() != null && appointment.getSession().getListOwners().size() > 0  
//					&& appointment.getSession().getListOwners().get(0).getHcp() != null && appointment.getSession().getListOwners().get(0).getHcp().getName() != null)
//			{
//				cellConsultant.setValue(appointment.getSession().getListOwners().get(0).getHcp().getName().toString());
//				cellConsultant.setTooltip(appointment.getSession().getListOwners().get(0).getHcp().getName().toString() + "<br>" + strTooltip);
//			}
//			else
//				cellConsultant.setTooltip(strTooltip.toString());

			DynamicGridCell cellActivityImage = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITY_IMAGE), DynamicCellType.IMAGE);
			cellActivityImage.setReadOnly(true);
			cellActivityImage.setValue(appointment.getAppointmentActivityImage() != null ? engine.getRegisteredImage(appointment.getAppointmentActivityImage()) : null);

			DynamicGridCell cellActivityType = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITY_TYPE), DynamicCellType.STRING);
			cellActivityType.setReadOnly(true);
			cellActivityType.setValue(appointment.getAppointmentActivityName() != null  ? appointment.getAppointmentActivityName() : null);
			cellActivityType.setTooltip(appointment.getAppointmentActivityName() != null ? appointment.getAppointmentActivityName() + "<br>" + strTooltip : strTooltip.toString());

			DynamicGridCell cellApptTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_TIME), DynamicCellType.TIME);
			cellApptTime.setReadOnly(true);
			cellApptTime.setValue(appointment.getApptStartTime() != null ? appointment.getApptStartTime() : null);
			cellApptTime.setTooltip(strTooltip.toString());

			DynamicGridCell cellBookingComments = newDynamicRow.getCells().newCell(getColumnById(COLUMN_BOOKING_COMMENTS), DynamicCellType.IMAGE);
			cellBookingComments.setReadOnly(true);
			cellBookingComments.setValue(hasBookingComments ? form.getImages().Emergency.CommentNotes16x16 : null);
			cellBookingComments.setTooltip(hasBookingComments ? "Booking Comments: <b>" + appointment.getBookingComments().trim() : "");

			DynamicGridCell cellApptLetterPrinted = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_LETTER_PRINTED), DynamicCellType.IMAGE);
			cellApptLetterPrinted.setReadOnly(true);
			cellApptLetterPrinted.setValue(Boolean.TRUE.equals(appointment.getWasPrinted()) ? form.getImages().Correspondence.Printer : null);
			cellApptLetterPrinted.setTooltip(getTooltipForColAppLetterPrinted(appointment));

			DynamicGridCell cellInterpreterReq = newDynamicRow.getCells().newCell(getColumnById(COLUMN_INTERPRETER_REQUIRED), DynamicCellType.IMAGE);
			cellInterpreterReq.setReadOnly(true);

			if (appointment.getReferral() != null && Boolean.TRUE.equals(appointment.getReferral().getInterpreterRequired()))
			{
				cellInterpreterReq.setValue(form.getImages().RefMan.interpreter18x18);
				cellInterpreterReq.setTooltip(getInterpreterDetailsDisplay(appointment.getReferral()));
			}

			if (Boolean.TRUE.equals(appointment.getHasLinkedAppointments())) //WDEV-21752
			{
				DynamicGridCell cellLinkedAppt = newDynamicRow.getCells().newCell(getColumnById(COLUMN_LINKED_APPOINTMENT), DynamicCellType.IMAGEBUTTON);
				cellLinkedAppt.setReadOnly(false);
				cellLinkedAppt.setAutoPostBack(true);
				cellLinkedAppt.setValue(form.getImages().Admin.link);
//				cellLinkedAppt.setTooltip(getTooltipForColLinkedAppt(appointment.getLinkedAppointments()));//WDEV-21752
			}
			
			DynamicGridCell cellStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_STATUS), DynamicCellType.STRING);
			cellStatus.setReadOnly(true);
			cellStatus.setValue(appointment.getAppointmentStatusText() != null ? appointment.getAppointmentStatusText() : "");
			cellStatus.setTooltip(appointment.getAppointmentStatusText() != null ? appointment.getAppointmentStatusText() + "<br>" + strTooltip : strTooltip.toString());


			if (Boolean.TRUE.equals(appointment.getPatient().getHasCommunicationChannel()))
			{
				DynamicGridCell cellContactDetails = newDynamicRow.getCells().newCell(getColumnById(COLUMN_CONTACT_DETAILS), DynamicCellType.IMAGEBUTTON);
				cellContactDetails.setReadOnly(false);
				cellContactDetails.setAutoPostBack(true);
				cellContactDetails.setValue(form.getImages().RefMan.HandSet16);
			}

			
			if (appointment.getAppointmentStatusIDIsNotNull())//WDEV-22730
			{
				Status_Reason status_ReasonInstance = ims.scheduling.vo.lookups.LookupHelper.getStatus_ReasonInstance(this.domain.getLookupService(), appointment.getAppointmentStatusID());
				newDynamicRow.setBackColor(status_ReasonInstance != null ? status_ReasonInstance.getColor(): null);
			}

			newDynamicRow.setValue(appointment);
			if(previosGridValue!=null && previosGridValue.equals(appointment) && Boolean.FALSE.equals(isFromButton))//WDEV-23007
			{
				form.dyngrdResults().setValue(previosGridValue);
				onGridSelectionChange();
			}		
		}
	}
	
	private String getTooltipForColAppLetterPrinted(AppointmentForOutpatientClinicListManualCustomClassVo appointment)
	{
		if (appointment==null || !Boolean.TRUE.equals(appointment.getWasPrinted()))
		{
			return null;
		}

		String str="Appointment Letter was printed ";

		str+=(appointment.getBookingLetterRecordingUserSurname() != null ? "<br><b>User:  </b>" + appointment.getBookingLetterRecordingUserSurname() : "");  

		str+=(appointment.getBookingLetterRecordingDateTime() != null ? "<br><b>Date/Time: </b>" + appointment.getBookingLetterRecordingDateTime() : "");  

		return str;

	}
	
	private String getInterpreterDetailsDisplay(CatsReferralManualAssembledForAppointmentOutcomeListVo referral)
	{
		if (referral == null)
			return null;

		StringBuilder tooltip = new StringBuilder();

		if (YesNo.YES.equals(referral.getInterpreterRequired()))
		{
			if (referral.getLanguageID() != null || referral.getOtherLanguage() != null)
			{
				tooltip.append("<b/>Requires Interpreter<br/> Language:</b> ");
				
				if (referral.getLanguageID() != null && Language.OTHER.getID() == referral.getLanguageID())
				{
					tooltip.append(referral.getOtherLanguage());
				}
				else
				{
					tooltip.append(referral.getLanguageText());
				}
			}
		}

		return tooltip.toString();
	}
	
	
	private OutpatientClinicListSearchCriteriaVo populateSearchCriteriaVo()
	{
		OutpatientClinicListSearchCriteriaVo searchCriteria = new OutpatientClinicListSearchCriteriaVo();
		
		if (form.cmbHospital().getValue() != null)
			searchCriteria.setHospital(form.cmbHospital().getValue());

		if (form.qmbClinic().getValue() != null)////WDEV-23273
			searchCriteria.setClinic(form.qmbClinic().getValue());

		if (form.dteDate().getValue() != null)
			searchCriteria.setDate(form.dteDate().getValue());
		
		searchCriteria.setTimeFrom(form.timFrom().getValue());
		searchCriteria.setTimeTo(form.timTo().getValue());
		
		if (form.qmbService().getValue() != null)
			searchCriteria.setService(form.qmbService().getValue());
		
		if (form.ccListOwner().getValue() != null)
		{
			HcpLiteVoCollection hcpCollection = new HcpLiteVoCollection();
			hcpCollection.add(form.ccListOwner().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccListOwner().getValue() : null);
			searchCriteria.setListOwners(hcpCollection);
		}
		else if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() > 0)
		{
			searchCriteria.setListOwners(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}

		searchCriteria.setListType(getListTypeSelection());
		searchCriteria.setOutPatientLocation(form.cmbOutpatientLocation().getValue());
		searchCriteria.setWasTimerOn(form.getLocalContext().getWasTimerEnabled());
		
		return searchCriteria;
	}

	private ProfileListTypeCollection getListTypeSelection()
	{
		ProfileListTypeCollection selectedListTypes = new ProfileListTypeCollection();
		if (form.getGlobalContext().Core.getSelectedLookupInstances() != null)
			selectedListTypes = (ProfileListTypeCollection) form.getGlobalContext().Core.getSelectedLookupInstances();
		if (form.cmbListType().getValue() != null)
			selectedListTypes.add(form.cmbListType().getValue());
		
		if (selectedListTypes.size() == 0)
			return null;
		
		return selectedListTypes;	
	}


	private void clearGlobalContexts()
	{
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null);
		
	}


	private void arrivalHandler() 
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getWasArrivedSelected()))
			updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
		else
			updateBooking(Status_Reason.SEEN, AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT, false);

		search(false);//WDEV-23007
	}
	
	private boolean cancelAndRebook()
	{
		Booking_AppointmentVo voAppt = cancelAppt(false);

		if( voAppt == null)
		{
			return false;
		}

		// rebook
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
		{	
			if( voAppt.getTheatreBooking() == null)
			{
				rebookAppt(voAppt, null);
				return true;
			}

			return false;
		}
		return false;

	}
	
	private void rebookAppt(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voFromGrid)
	{		

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;

		if (voAppt != null && voAppt.getApptStatus() != null && voFromGrid != null && voFromGrid.getApptStatus() != null
				&& ! voAppt.getApptStatus().equals(voFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
		}
		else if ( voAppt != null && Boolean.TRUE.equals(voAppt.getRequiresRebook()) && !isTheatreAppt
				&& (Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) || Status_Reason.DNA.equals(voAppt.getApptStatus())))
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
			form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
			form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);

			bookAppt();
		}
	}
	
	private void bookAppt()
	{
		if (isReferralEndOfCare())
			return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
	}
	
	private boolean isReferralEndOfCare()
	{
		CatsReferralCurrentStatusVo referral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		if (referral != null && referral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(referral.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}
	
	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				AppointmentForOutpatientClinicListManualCustomClassVo voAppt = form.getLocalContext().getAppointmentToCancel();

				if(voAppt == null)
					return null;

				Booking_AppointmentVo voApptFull = domain.getBookingAppt(voAppt);

				if (voApptFull.getApptStatus() != null && voAppt.getAppointmentStatusID() != null
						&&  !voAppt.getAppointmentStatusID().equals(voApptFull.getApptStatus().getId()))
				{
					engine.showMessage("The Status of the appointment has already been changed.");
					return null;
				}

				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					// wdev-6034
					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
					if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
					{
						voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
						if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
							voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
					}

					if(Status_Reason.HOSPITALCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numProviderCancellations = 0;

						if(voApptFull.getNumProviderCancellations() != null)
						{
							numProviderCancellations = voApptFull.getNumProviderCancellations();
						}
						numProviderCancellations += 1;

						voApptFull.setNumProviderCancellations(numProviderCancellations);
					}

					if(Status_Reason.PATIENTCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numPatientCancellations = 0;

						if(voApptFull.getNumPatientCancellations() != null)
						{
							numPatientCancellations = voApptFull.getNumPatientCancellations();
						}
						numPatientCancellations += 1;

						voApptFull.setNumPatientCancellations(numPatientCancellations);
					}
				}

				if (voApptFull.getSessionSlotIsNotNull() && voApptFull.getSessionIsNotNull())
					voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus());

				voApptFull.setLinkedApptsToBeCancelled(form.getGlobalContext().RefMan.getLinkedAppointmentsCollection());

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return null;
				}

				if (tciCancelation)
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
				else
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Referral Appointment Details");

				domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull);

				if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI())) //WDEV-18249
				{
					domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason(), form.getGlobalContext().Scheduling.getApptCancelStatus().getComment(), Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
				}

				return voApptFull;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
		return null;
	}

	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}

		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}
		
		voApptStatus.setSession(voAppt.getSessionIsNotNull() ? voAppt.getSession() : null); //WDEV-23185


		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();

		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();


		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	private void updateBooking(Status_Reason stat, AppointmentTrackingStatus trackingStatus, boolean requiresNewTCI)
	{
		Booking_AppointmentVo voBooking = domain.getBookingAppt((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue());

		if (voBooking == null)
		{
			engine.showMessage("No Booking Found.");
			return;
		}

		if(((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()).getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		CatsReferralListVo voCats = domain.getCatsReferral((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue());

		if (voCats == null)
		{
			engine.showMessage("No Referral Found.");
			return;
		}

		PatientElectiveListForDNAAppointmentsVo patientElectiveList = null;

		Boolean isUndoDNA = Status_Reason.DNA.equals(voBooking.getApptStatus()) && Status_Reason.BOOKED.equals(stat);
		Boolean isUndoArrival = Status_Reason.ARRIVAL.equals(voBooking.getApptStatus()) && Status_Reason.BOOKED.equals(stat);

		form.getGlobalContext().Core.getPatientShort().calculateAge();
		boolean isPaediatricPatient = form.getGlobalContext().Core.getPatientShort().getAgeIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAge()<= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue();
		
		SessionSlotVo sessionSlot = null;

		if (stat.equals(Status_Reason.DNA))
		{
			if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			{

				patientElectiveList = domain.getPatientElectiveList((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue());

				if (patientElectiveList != null)
				{
					TCIForPatientElectiveListAppointmentDNAVo currentTCI = patientElectiveList.getTCIDetails();

					// Update the TCI record
					if (currentTCI != null)
					{
						TCIOutcomeForAppointmentDNAVo outcomeDNA = new TCIOutcomeForAppointmentDNAVo();

						outcomeDNA.setOutcome(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4);
						outcomeDNA.setStatusDateTime(new DateTime());
						outcomeDNA.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());

						currentTCI.setCurrentOutcome(outcomeDNA);
						currentTCI.getOutcomeHistory().add(outcomeDNA);
						currentTCI.setIsActive(Boolean.FALSE);

						patientElectiveList.getTCIHistory().add(currentTCI);
					}

					// Update the status for PatientElective
					if (requiresNewTCI == true)
					{
						ElectiveListStatusVo requiresNewTCIStatus = new ElectiveListStatusVo();

						requiresNewTCIStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
						requiresNewTCIStatus.setStatusDateTime(new DateTime());
						requiresNewTCIStatus.setStatusComment(null);
						requiresNewTCIStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
						requiresNewTCIStatus.setRemovalReason(null);
						requiresNewTCIStatus.setRemovalOtherReason(null);    					

						patientElectiveList.setElectiveListStatus(requiresNewTCIStatus);
						patientElectiveList.getElectiveListStatusHistory().add(requiresNewTCIStatus);
					}
				}
			}

			if(voBooking.getIsCABBooking() == null || Boolean.FALSE.equals(voBooking.getIsCABBooking()))
			{
				voBooking.setRequiresRebook(true);

				if(voBooking.getSessionSlotIsNotNull())
				{

					sessionSlot = (SessionSlotVo) voBooking.getSessionSlot();
					sessionSlot.setStatus(Status_Reason.DNA);
					sessionSlot.validate();
				}
			}
		}

		voBooking.setApptStatus(stat);
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		
		LateTimeArrivalRecordVo lateArrivalRecord = form.getGlobalContext().Scheduling.getLateArrivalRecord();
		
		if(lateArrivalRecord != null)
		{
			voStatus.setCareProfessionalNotReadyToSee(lateArrivalRecord.getCareProfessionalNotReadyToSee());
			voStatus.setCareProfessionalReadyToSee(lateArrivalRecord.getCareProfessionalReadyToSee());
			voStatus.setCouldnotbeseen(lateArrivalRecord.getCouldNotBeSeen());
		}
		
		voStatus.setApptDate(voBooking.getAppointmentDate());
		voStatus.setApptTime(voBooking.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setSession(voBooking.getSessionIsNotNull() ? voBooking.getSession() : null); //WDEV-23185
		voStatus.setStatus(stat);

		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();

		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();

		voCollStatusHistory.add(voStatus);
		voBooking.setCurrentStatusRecord(voStatus); 
		voBooking.setApptStatusHistory(voCollStatusHistory);

		if (stat.equals(Status_Reason.ARRIVAL))
		{	
			//WDEV-21088
			if(lateArrivalRecord!=null)
				voBooking.setArrivalTime(lateArrivalRecord.getArrivalTime());
			else
				voBooking.setArrivalTime(form.getGlobalContext().RefMan.getChosenTime());
			
			form.getGlobalContext().Scheduling.setLateArrivalRecord(null);

			voBooking.setSeenBy(null);
			voBooking.setSeenTime(null);
		}
		else if (stat.equals(Status_Reason.SEEN))
		{

			voBooking.setSeenBy((HcpRefVo) domain.getHcpLiteUser());
			voBooking.setSeenTime(form.getGlobalContext().RefMan.getChosenTime());
		}
		else if (stat.equals(Status_Reason.BOOKED))
		{
			voBooking.setArrivalTime(null);
			voBooking.setOutcome(null);
			voBooking.setOutcomeComments(null);
			voBooking.setRequiresRebook(false);
		}

		populateAppointmentWithTrackingStatus(voBooking, trackingStatus);

		String[] error = voBooking.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		error = voCats.validate(error);
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		try 
		{
			domain.saveOPEpisode(voBooking, voCats, sessionSlot, patientElectiveList, false, isUndoDNA, isUndoArrival);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}

	}
	
	private boolean canBeDNAed(Status_Reason apptStatus, Date dateSession) 
	{
		if (Status_Reason.BOOKED.equals(apptStatus) && dateSession != null) 
		{
			if(new Date().isGreaterOrEqualThan(dateSession))
			{
				return true;
			}
		}

		return false;
	}
	
	private void populateAppointmentWithTrackingStatus(Booking_AppointmentVo voBooking, AppointmentTrackingStatus trackingStatus) 
	{
		if(voBooking == null || trackingStatus == null)
			return;

		Appt_Tracking_Status_HistoryVoCollection trackingCollection = voBooking.getApptTrackingStatusHistory();

		if(trackingCollection == null)
			trackingCollection = new Appt_Tracking_Status_HistoryVoCollection();

		Appt_Tracking_Status_HistoryVo newTrackingStatus = new Appt_Tracking_Status_HistoryVo();
		newTrackingStatus.setTrackingStatus(trackingStatus);
		newTrackingStatus.setApptDate(voBooking.getAppointmentDate());
		newTrackingStatus.setApptTime(voBooking.getApptStartTime());
		newTrackingStatus.setStatusChangeDateTime(new DateTime());

		Object mosUser = domain.getMosUser();
		newTrackingStatus.setChangedBy(mosUser instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mosUser : null);

		trackingCollection.add(newTrackingStatus);
		voBooking.setApptTrackingStatusHistory(trackingCollection);
	}
	
	@Override
	protected void onCcListOwnerValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.ccListOwner().getValue() != null)
		{	
			form.lblListOwnersSel().setValue(null);

			HcpLiteVoCollection owners = new HcpLiteVoCollection();
			owners.add((HcpLiteVo) form.ccListOwner().getValue());
			form.getGlobalContext().Scheduling.setSelectedHCPs(owners);
		}
		else
		{
			form.getGlobalContext().Scheduling.setSelectedHCPs(null);
		}
	}

	@Override
	protected void onDyngrdResultsCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		if( cell.getColumn().equals(getColumnById(COLUMN_CONTACT_DETAILS)))
		{
			if( form.dyngrdResults().getValue() != null && form.dyngrdResults().getValue() instanceof AppointmentForOutpatientClinicListManualCustomClassVo)
			{
				engine.open(form.getForms().Clinical.PatientContactDlg, new Object[] {domain.getPatientShort(((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()).getPatient())});
			}
		}
		else if (cell.getColumn().equals(getColumnById(COLUMN_LINKED_APPOINTMENT)))
		{
			// TODO Set the appointment to view linked appointments
			engine.open(form.getForms().Scheduling.LinkedAppointmentsSummary, new Object[] {(AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()});
		}
	}

	@Override
	protected void onDyngrdResultsRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		onGridSelectionChange();
		updateControlsState();
	}


	private void onGridSelectionChange()
	{
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		
		if (((AppointmentForOutpatientClinicListManualCustomClassVo) form.dyngrdResults().getValue()).getReferral() != null)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()).getReferral()));
		} 

		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()).getPatient()));
		form.getGlobalContext().Scheduling.setBookingAppointmentRef((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getSelectedRow().getValue());
		form.getGlobalContext().RefMan.setCatsReferral(((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()).getReferral());
	}
	private void sortOrderToggle(Object identifier)//WDEV-23593
	{
		SortOrder sort= null;
		if (COLUMN_DOB.equals(identifier))
		{
			sort= form.getLocalContext().getSortOrderDOB();
			form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING.equals(sort)
													? SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}	
		else if(COLUMN_LINKED_APPOINTMENT.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderLinkedAppt();
			form.getLocalContext().setSortOrderLinkedAppt(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_APPT_TIME.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderCol_ApptTime();
			form.getLocalContext().setSortOrderCol_ApptTime(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_IDENTIFIER.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderCol_Identifier();
			form.getLocalContext().setSortOrderCol_Identifier(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_SURNAME.equals(identifier))
		{
			sort =	form.getLocalContext().getSortOrderCol_Surname();
			form.getLocalContext().setSortOrderCol_Surname(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_FORENAME.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderCol_Forename();
			form.getLocalContext().setSortOrderCol_Forename(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_SEX.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderCol_Sex();
			form.getLocalContext().setSortOrderCol_Sex(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_CLINIC_NAME.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderCol_ClinicName();
			form.getLocalContext().setSortOrderCol_ClinicName(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_STATUS.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderCol_Status();
			form.getLocalContext().setSortOrderCol_Status(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		else if(COLUMN_ACTIVITY_TYPE.equals(identifier))
		{
			sort = form.getLocalContext().getSortOrderCol_Activity();
			form.getLocalContext().setSortOrderCol_Activity(SortOrder.ASCENDING.equals(sort)
													?SortOrder.DESCENDING
													:SortOrder.ASCENDING);
		}
		Object[] sortColumnOrder = new Object[]{identifier,sort != null && SortOrder.ASCENDING.equals(sort) ? SortOrder.DESCENDING: SortOrder.ASCENDING};
		form.getLocalContext().setSortColumnOrder(sortColumnOrder);		
	}
	
	private AppointmentForOutpatientClinicListManualCustomClassVoCollection sortByColums(Object identifier, AppointmentForOutpatientClinicListManualCustomClassVoCollection results, Boolean automaticSort)//WDEV-23593
	{
		if(results == null)
			return null;
		
		SortOrder sort = SortOrder.ASCENDING;
		if(automaticSort && identifier instanceof Object[])
		{
			Object[] objects = (Object[])identifier;
			if(objects.length>1 && objects[1] instanceof SortOrder)
				sort = (SortOrder)objects[1];
			identifier = objects[0];
		}
			
		
		if (COLUMN_DOB.equals(identifier))
			results.sort(new DOBComparator(automaticSort ? sort: form.getLocalContext().getSortOrderDOB()));
			
		else if(COLUMN_LINKED_APPOINTMENT.equals(identifier))
			results.sort(new LinkAppointmentComparator(automaticSort ? sort:form.getLocalContext().getSortOrderLinkedAppt()));
		
		else if(COLUMN_APPT_TIME.equals(identifier))
			results.sort(new ApptTimeComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_ApptTime()));
		
		else if(COLUMN_IDENTIFIER.equals(identifier))
			results.sort(new IdentifierComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_Identifier()));
			
		
		else if(COLUMN_SURNAME.equals(identifier))
			results.sort(new SurnameComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_Surname()));
			
		else if(COLUMN_FORENAME.equals(identifier))
			results.sort(new ForenameComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_Forename()));
			
		else if(COLUMN_SEX.equals(identifier))
			results.sort(new SexComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_Sex()));
			
		else if(COLUMN_CLINIC_NAME.equals(identifier))
			results.sort(new ClinicNameComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_ClinicName()));
		
		else if(COLUMN_STATUS.equals(identifier))
			results.sort(new ApptStatusComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_Status()));
		
		else if(COLUMN_ACTIVITY_TYPE.equals(identifier))
			results.sort(new ActivityTypeComparator(automaticSort ? sort:form.getLocalContext().getSortOrderCol_Activity()));
		
		return results;
	
	}
	@Override
	protected void onDyngrdResultsColumnHeaderClicked(ims.framework.controls.DynamicGridColumn column)
	{
		sortAppointmentsRecords(column.getIdentifier(),false);//WDEV-23593
	}


	private void sortAppointmentsRecords(Object column,Boolean automaticSort)//WDEV-23593
	{
		if(column == null)
			return;
		
		AppointmentForOutpatientClinicListManualCustomClassVoCollection results = getGridCollection();
		if(results==null)
			return;
		sortOrderToggle(column);
		sortByColums(column,results,automaticSort);
		
		Object value = form.dyngrdResults().getValue();
		populateResults(results,false);
		form.dyngrdResults().setValue(value);
	}


	private AppointmentForOutpatientClinicListManualCustomClassVoCollection getGridCollection()
	{
		if(form.dyngrdResults().getRows().size()<2)
			return null;
		
		AppointmentForOutpatientClinicListManualCustomClassVoCollection results = new AppointmentForOutpatientClinicListManualCustomClassVoCollection();

		for (int i = 0 ; i < form.dyngrdResults().getRows().size(); i++)
			results.add(((AppointmentForOutpatientClinicListManualCustomClassVo) form.dyngrdResults().getRows().get(i).getValue()));	
		
		return results;
	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.dyngrdResults().getColumns().getByIdentifier(identifier);
	}
	
	@Override
	protected void onCmbListTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		listTypeValueChanged();
		updateControlsState();
	}

	private void listTypeValueChanged()
	{		
		if (form.cmbListType().getValue() != null)
		{
			form.lblListTypeSel().setValue(null);
			form.lblListTypeSel().setTooltip(null);
			
			ProfileListTypeCollection values = new ProfileListTypeCollection();
			values.add(form.cmbListType().getValue());
			form.getGlobalContext().Core.setSelectedLookupInstances(values);			
		}
		else
		{
			form.getGlobalContext().Core.setSelectedLookupInstances(null);
		}
		
	
		if (form.dteDate().getValue() == null)
		{
			form.dyngrdResults().getRows().clear();
		}
		form.qmbClinic().clear();//WDEV-23273

		
		
	}

	@Override
	protected void onQmbServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateServices(value);
	}

	private void populateServices(String value)
	{
		form.qmbService().clear();

		ServiceLiteVoCollection coll = domain.listServices(value);

		if(coll == null || coll.size() == 0)
			return;

		for (int i = 0; i < coll.size(); i++)
		{
			if (coll.get(i) == null)
				continue;

			form.qmbService().newRow(coll.get(i), coll.get(i).getServiceName());

			if (coll.size() == 1)
			{	
				form.qmbService().setValue(coll.get(0));
			}
			else
			{	
				form.qmbService().showOpened();
			}
		}
	}

	@Override
	protected void onImbAddListOwnersClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.HcpMultipleSelectDialog);
	}

	@Override
	protected void onImbAutoRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(true);
	}

	private void toggleTimer(boolean fromButton)
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			if(!validateSearch())
				return;
		}

		boolean reinstateTimer = form.getLocalContext().getWasTimerEnabled();

		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to Start the Automatic Refresh");	

			form.getLocalContext().setWasTimerEnabled(false);

			if(form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria() != null )
				form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				form.imbAutoRefresh().setTooltip("Click button to Stop the Automatic Refresh");
				form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);

				form.getLocalContext().setWasTimerEnabled(true);

				if(form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria() != null )
					form.getGlobalContext().Clinical.getOutpatientClinicListSearchCriteria().setWasTimerOn(true);

				form.imbAutoRefresh().setEnabled(true);
			}
		}


		boolean enableControls = !form.getTimers().gettimerSearch().isEnabled();

		form.cmbHospital().setEnabled(enableControls);
		form.qmbClinic().setEnabled(enableControls);////WDEV-23273
		form.qmbService().setEnabled(enableControls);
		form.dteDate().setEnabled(enableControls);
		form.cmbListType().setEnabled(enableControls);
		form.cmbOutpatientLocation().setEnabled(enableControls);
		form.ccListOwner().setEnabled(enableControls);
		form.imbAddListOwners().setEnabled(enableControls);
		form.imbAddListType().setEnabled(enableControls);
		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);
		
	}

	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();

		if(form.dteDate().getValue() == null)
			uiErrors.add("Please enter a Date");
				
		if(form.cmbHospital().getValue() == null)
			uiErrors.add("Please select a Hospital");
			
		if(uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}
			
		return true;
	}

	@Override
	protected void onDteDateValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.dteDate().getValue() == null)//WDEV-23273
		{
			form.dyngrdResults().getRows().clear();
		}
		form.qmbClinic().setTooltip(null); //WDEV-22660 
		form.qmbClinic().clear();//WDEV-23273
		updateControlsState();
	}

	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		LocationLiteVo selectedHosp = form.cmbHospital().getValue();
		cleanClinics();//WDEV-23273	
		
		if (selectedHosp == null)
		{
			form.dyngrdResults().getRows().clear();
		}
		else
			populateOutpatientLocationCombo(selectedHosp);
		
		updateControlsState();
	}

	
	private void updateControlsState()
	{
		form.getContextMenus().Clinical.hideAllOutpatientClinicListMenuItems();

		AppointmentForOutpatientClinicListManualCustomClassVo appointment = (AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue();
		
		boolean hasAppointmentOutcome = appointment != null && appointment.getOutcomeText() != null;
		boolean apptStatusBooked = appointment != null && appointment.getAppointmentStatusID() != null && Status_Reason.BOOKED.getID() == appointment.getAppointmentStatusID();
		boolean apptStatusDNA = appointment != null && appointment.getAppointmentStatusID() != null && Status_Reason.DNA.getID() == appointment.getAppointmentStatusID();
		boolean apptStatusArrival = appointment != null && appointment.getAppointmentStatusID() != null && Status_Reason.ARRIVAL.getID() == appointment.getAppointmentStatusID();
		boolean apptStatusSeen = appointment != null && appointment.getAppointmentStatusID() != null && Status_Reason.SEEN.getID() == appointment.getAppointmentStatusID();
		boolean apptStatusNotSeen = appointment != null && appointment.getAppointmentStatusID() != null && Status_Reason.NOT_SEEN.getID() == appointment.getAppointmentStatusID();
		boolean showArrivedMenuItem = appointment != null && apptStatusBooked && appointment.getAppointmentDate() != null && appointment.getAppointmentDate().isLessOrEqualThan(new Date());
		boolean showSeenMenuItem = appointment != null && apptStatusArrival && appointment.getAppointmentDate() != null && appointment.getAppointmentDate().isLessOrEqualThan(new Date());	
		boolean showUndoSeenMenuItem = appointment != null && appointment.getAppointmentStatusID() != null && Status_Reason.SEEN.getID() == appointment.getAppointmentStatusID() && !hasAppointmentOutcome;
		boolean showUndoArrivalMenuItem = appointment != null && apptStatusArrival && !hasAppointmentOutcome;
		boolean hasElectiveList = appointment != null && appointment.getHasElectiveList() != null;
		
		
		form.getContextMenus().Clinical.getOutpatientClinicListOUTCOMEItem().setVisible(appointment!=null && appointment.getAppointmentDate() != null && appointment.getAppointmentDate().isLessOrEqualThan(new Date()) && Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue()) && (apptStatusBooked || apptStatusArrival || apptStatusSeen) && !hasAppointmentOutcome && (!hasElectiveList || (hasElectiveList && apptStatusBooked))); //WDEV-21616
		form.getContextMenus().Clinical.getOutpatientClinicListVIEW_READONLY_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue()) && (apptStatusDNA || apptStatusArrival || apptStatusSeen || apptStatusNotSeen) && hasAppointmentOutcome && !hasElectiveList);
		form.getContextMenus().Clinical.getOutpatientClinicListVIEW_EDIT_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue()) && (apptStatusDNA || apptStatusArrival || apptStatusSeen || apptStatusNotSeen) && hasAppointmentOutcome && !hasElectiveList);		
		
		form.getContextMenus().Clinical.getOutpatientClinicListARRIVEDItem().setVisible(showArrivedMenuItem);
		form.getContextMenus().Clinical.getOutpatientClinicListSEENItem().setVisible(showSeenMenuItem);

		form.getContextMenus().Clinical.getOutpatientClinicListCANCEL_REBOOKItem().setVisible(appointment != null && apptStatusBooked);

		form.getContextMenus().Clinical.getOutpatientClinicListUNDO_ARRIVALItem().setVisible(showUndoArrivalMenuItem);
		form.getContextMenus().Clinical.getOutpatientClinicListUNDO_SEENItem().setVisible(showUndoSeenMenuItem);
		
		form.getContextMenus().Clinical.getOutpatientClinicListVIEW_REFERRAL_DETAILItem().setVisible(appointment != null);
		
		Boolean view_editPreAssessementVisible = appointment != null && appointment.getElectiveListIsNotNull() && Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue())
				 								&& (apptStatusDNA || apptStatusSeen || apptStatusNotSeen);
		form.getContextMenus().Clinical.getOutpatientClinicListEDIT_PRE_ASSESSMENT_OUTCOMEItem().setVisible(view_editPreAssessementVisible);//WDEV-22835
		form.getContextMenus().Clinical.getOutpatientClinicListVIEW_PRE_ASSESSMENT_OUTCOMEItem().setVisible(view_editPreAssessementVisible);//WDEV-22835
		
		//WDEV-22944
		form.imbSessionMoveDetails().setVisible(form.qmbClinic().getValue()!=null && (form.qmbClinic().getValue().getSessionCommentIsNotNull() || (form.qmbClinic().getValue().getSessionMoveIsNotNull() && form.qmbClinic().getValue().getSessionMove().size()>0)));////WDEV-23273 
		form.imbSessionMoveDetails().setEnabled(false);
				
	}

	
	private void cleanClinics()
	{
		form.qmbClinic().setTooltip(null);//WDEV-23273
		form.qmbClinic().clear();//WDEV-23273
	}

	

	//WDEV-22944
	private String getTooltipForSessionMoveDetailsButton(SessionShortVo selectedSession)
	{
		String strTooltip = "";
		if (selectedSession==null)
		{
			return strTooltip;
		}
		
		strTooltip += selectedSession.getSessionCommentIsNotNull() ? "<b>Session Comment: </b>" + selectedSession.getSessionComment() : "";
		if (strTooltip.length()>0)
		{
			strTooltip+="<br>";
		}
		
		//SessionMoveDetails
		for  (int i=0; selectedSession.getSessionMove()!=null && i<selectedSession.getSessionMove().size(); i++)
		{
			strTooltip +="---------------------------------";
			SessionMoveVo sessionMoveItem = selectedSession.getSessionMove().get(i);
			
			strTooltip += sessionMoveItem.getMoveDateIsNotNull() ? "<br><b>Moved Date: </b>" +  sessionMoveItem.getMoveDate() : "";
			strTooltip += sessionMoveItem.getSystemInformationIsNotNull() && sessionMoveItem.getSystemInformation().getCreationUser()!=null ? "<br><b>Moved By: </b>" +  sessionMoveItem.getSystemInformation().getCreationUser().toString() : "";
			strTooltip += sessionMoveItem.getReasonIsNotNull() ? "<br><b>Moved Reason: </b>" +  sessionMoveItem.getReason() : "";
			strTooltip += sessionMoveItem.getCommentIsNotNull() ? "<br><b>Moved Comment: </b>" +  sessionMoveItem.getComment() : "";
			strTooltip+="<br>";
		}
		
		return strTooltip;
	}


	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		form.dyngrdResults().getRows().clear();
		
		form.qmbClinic().clear();//WDEV-23273
		form.qmbClinic().setTooltip(null); //WDEV-22660 //WDEV-23273
		form.qmbService().clear();
		form.cmbHospital().setValue(null);
		form.dteDate().setValue(null);
		form.timFrom().setValue(null);
		form.timTo().setValue(null);
		form.cmbListType().setValue(null);		
		form.cmbOutpatientLocation().clear();
		form.ccListOwner().clear();
		
		form.imbAutoRefresh().setEnabled(false);
		
		form.lblListOwnersSel().setValue(null);
		form.lblListOwnersSel().setTooltip(null);
				
		form.lblListTypeSel().setValue(null);
		form.lblListTypeSel().setTooltip(null);
		
		form.getGlobalContext().Clinical.setOutpatientClinicListSearchCriteria(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);
		form.getGlobalContext().Core.setSelectedLookupInstances(null);
		form.getLocalContext().setSortColumnOrder(null);//WDEV-23593
		
		clearGlobalContexts();
		
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSortColumnOrder(null);//WDEV-23593
		search(true);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.ARRIVED:
				arriveBooking();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.UNDO_ARRIVAL:
				form.getLocalContext().setUndoArrivalMessageBoxId(engine.showMessage("Are you sure you want to Undo this Arrival ?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.SEEN:
				markAsSeen();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.UNDO_SEEN:
				form.getLocalContext().setUndoSeenMessageBoxId(engine.showMessage("Are you sure you want to Undo the Seen status ?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.CANCEL_REBOOK:
				cancelAppointment((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue());
			break;
			
			//WDEV-22835
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.VIEW_PRE_ASSESSMENT_OUTCOME:
				engine.open(form.getForms().RefMan.PreAssessmentOutcomeDlg , new Object[] {((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()).getElectiveList(),Boolean.TRUE});
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.EDIT_PRE_ASSESSMENT_OUTCOME:
				engine.open(form.getForms().RefMan.PreAssessmentOutcomeDlg , new Object[] {((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue()).getElectiveList()});
			break;
			//WDEV-22835 end
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.VIEW_REFERRAL_DETAIL:
				engine.open(form.getForms().RefMan.ReferralDetailsDialog);
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.OUTCOME:
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.EDIT}, false);
			break;
			
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.VIEW_READONLY_OUTCOME:
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW, AppointmentOutcomeAction.VIEW_READ_ONLY}, false);
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OutpatientClinicList.VIEW_EDIT_OUTCOME:
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW}, false);
			break;
			
		}
	}

	private void markAsSeen()
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue());

		if (Status_Reason.ARRIVAL.equals(voBook.getApptStatus()))
		{
			form.getLocalContext().setWasArrivedSelected(false);
			engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Seen Time"} );
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search(false);//WDEV-23007
		}
		
	}

	private void cancelAppointment(AppointmentForOutpatientClinicListManualCustomClassVo  appointment) 
	{
		Booking_AppointmentVo voAppt = domain.getBookingAppt((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue());

		if (voAppt != null && voAppt.getApptStatus() != null && appointment != null && appointment.getAppointmentStatusID() != null && !appointment.getAppointmentStatusID().equals(voAppt.getApptStatus().getId()))
		{
			engine.showMessage("The appointment's status has already been changed.");
			search(false);//WDEV-23007
			return;
		}

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;

		if (voAppt != null && Status_Reason.BOOKED.equals(voAppt.getApptStatus()) && !isTheatreAppt)
		{
			form.getLocalContext().setAppointmentToCancel(appointment);
			SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt);

			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
			form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity != null ? voServiceAndActivity.getSlotActivity() : null);
			form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity != null ? voServiceAndActivity.getSessionService() : null);
			form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
			form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());

			engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
		}

	}
	
	private void arriveBooking()
	{
		
		//WDEV-20534
		PDSConfigurationVo config = domain.getPDSConfiguration();
		if (config!=null && config.getTP_AnyApptArrivalIsNotNull() && config.getTP_AnyApptArrival())
		{
			if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			{
				// PDS AUTHENTICATION
				PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
				if(pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
				{
					form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
					if (Boolean.FALSE.equals(ConfigFlag.GEN.BOOKING_APPOINTMENT_PERFORM_AUTO_PDS_LOOKUP.getValue()))
					{
						engine.open(form.getForms().Core.PDSDemographicsDialog);
						return;
					}
					else
					{
						pdsLookup();
					}
				}
				// END PDS AUTHENTICATION
	
				arriveBookingHandler();
			}
			else
			{
				engine.open(form.getForms().Core.PDSDemographicsDialog);
				return;
			}
		}
		else
			//no demographics display
			arriveBookingHandler();		
		//WDEV-22023		

	}

	private void arriveBookingHandler()
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt((AppointmentForOutpatientClinicListManualCustomClassVo)form.dyngrdResults().getValue());

		if (Status_Reason.BOOKED.equals(voBook.getApptStatus()))
		{
			Date appointmentDate =  voBook.getAppointmentDate()!= null ? voBook.getAppointmentDate(): new Date();
			Time apptStartTime = voBook.getApptStartTime()!= null ? voBook.getApptStartTime(): new Time();
			
			DateTime apptDataTime = new DateTime(appointmentDate, apptStartTime);
			DateTime nowDateTime = new DateTime();
			
			if(nowDateTime.isGreaterThan(apptDataTime))
			{
				form.getLocalContext().setWasArrivedSelected(true);
				engine.open(form.getForms().Scheduling.AppointmentArrivalDialog,new Object[]{apptDataTime});
			}
			else if(appointmentDate.isGreaterOrEqualThan(new Date()))
			{
				form.getLocalContext().setWasArrivedSelected(true);
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog,new Object[]{"Arrival Time"});
			}
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search(false);//WDEV-23007
		}
	}

	@Override
	protected void onTimer(ims.framework.controls.Timer timer) throws ims.framework.exceptions.PresentationLogicException
	{
		search(false);
	}
	
	public static class DOBComparator implements Comparator
	{
		private int direction = 1;

		public DOBComparator ()
		{
			this(SortOrder.ASCENDING);
		}

		public DOBComparator (ims.framework.enumerations.SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}

		public int compare(Object ob1, Object ob2)
		{
			PartialDate rez1 = null;
			PartialDate rez2 = null;

			if(ob1 instanceof AppointmentForOutpatientClinicListManualCustomClassVo )
			{
				AppointmentForOutpatientClinicListManualCustomClassVo ps1 = (AppointmentForOutpatientClinicListManualCustomClassVo)ob1;
				rez1 = (ps1.getPatient() != null && ps1.getPatient().getDob() != null ) ? ps1.getPatient().getDob() : null;
			}

			if(ob2 instanceof AppointmentForOutpatientClinicListManualCustomClassVo)
			{
				AppointmentForOutpatientClinicListManualCustomClassVo ps2 = (AppointmentForOutpatientClinicListManualCustomClassVo)ob2;
				rez2 = (ps2.getPatient() != null && ps2.getPatient().getDob() != null) ? ps2.getPatient().getDob() : null;
			}

			if(rez1 != null && rez2 != null)
				return  rez1.compareTo(rez2)*direction;

			if(rez1 != null && rez2 == null)
				return  direction;

			if(rez2 != null && rez1 == null)
				return (-1)*direction;

			return 0;

		}

	}
	
	private void pdsLookup()
	{
		PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
		PatientShort pat = form.getGlobalContext().Core.getPatientShort();
		PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());
		Patient pdsPatient = null;
		Patient initialPatient = null;

		try
		{
			initialPatient = domain.getPatient(pat);
		}
		catch (StaleObjectException e2)
		{
			e2.printStackTrace();

			engine.showMessage("Error getting the patient record: " + e2.toString());
			return;
		}

		if(initialPatient.getSCN() == null)
		{
			if(initialPatient.getNhsn() == null)
			{
				try
				{
					helper.setPatientInContext(initialPatient);
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PDS_SYNC_REQUIRED,  "The current patient doesn not have an NHS number", PDSBackOfficeWorkPriority.P1);
					return;
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}

			}
		}

		if (pat.getNhsn() != null)
		{

			try
			{
				pdsPatient = helper.makeRequest(params, pat.getNhsn() != null ? pat.getNhsn().getIdValue() : "", PdsRetrievalQueryHelper.HistoricDataIndicator.ON);

				if(pdsPatient == null)
				{
					//spine returned an error
					PdsErrorVo pdsError = helper.getLastErrorDetails();
					String err = "";

					if(PdsQuery.NO_MATCH.equals(pdsError.getQueryResponseCode()))
					{
						engine.showMessage("This record is found to be invalid. Please treat all demographic and clinical data on the record with caution.");

						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.GENERAL, "Review Invalid record", PDSBackOfficeWorkPriority.P1);
							return;
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
					else
					{
						err = "Error calling PdsRetrievalQuery, query response code: " + pdsError.getQueryResponseCode();
						engine.showMessage(err);

						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  err, PDSBackOfficeWorkPriority.P1);
							return;
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
				}
			}
			catch (PdsException e)
			{
				e.printStackTrace();

				engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString());

				helper.setPdsErrorFromException(e);
				try
				{
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  e.toString(), PDSBackOfficeWorkPriority.P1);
					return;
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}
			}
		}
		updateLocalPatientWithPds(initialPatient, pdsPatient, params, helper.getMissingMappings());
	}

	private Patient updateLocalPatientWithPds(Patient initialPatient, Patient pdsPatient, PdsRequestParameters params, MissingMappingVoCollection missingMappings)
	{
		ArrayList errors = new ArrayList();
		Patient pat = null; 

		if(missingMappings != null && missingMappings.size() > 0)
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(this.domain);
			helper.displayMissingMappings(missingMappings, engine);
		}
		
		try
		{
			pat = domain.updateLocalPatientWithPds(initialPatient, pdsPatient, errors, form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole(), missingMappings);
		}
		catch (DomainInterfaceException e1)
		{
			e1.printStackTrace();
		}
		catch (StaleObjectException e1)
		{
			e1.printStackTrace();
		}
		catch (ForeignKeyViolationException e1)
		{
			e1.printStackTrace();
		}

		if(errors.size() > 0)
		{
			String[] template = new String[] {""};
			String[] patErrors = (String[]) errors.toArray(template);
			if (patErrors != null)
			{
				engine.showErrors(patErrors);
				return null;
			}
		}

		return pat;
	}

	private static class ApptTimeComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public ApptTimeComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
			if (o1.getApptStartTimeIsNotNull() && o2.getApptStartTimeIsNotNull())
			{
				return o1.getApptStartTime().compareTo(o2.getApptStartTime()) * direction;
			}
			
			if (o1.getApptStartTimeIsNotNull() && !o2.getApptStartTimeIsNotNull())
			{
				return direction;
			}
			
			if (o2.getApptStartTimeIsNotNull() && !o1.getApptStartTimeIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}
	private static class IdentifierComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public IdentifierComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
	
			if (o1.getPatient().getDisplayIDIsNotNull() && o2.getPatient().getDisplayIDIsNotNull())
			{
				return o1.getPatient().getDisplayID().compareTo(o2.getPatient().getDisplayID()) * direction;
			}
			
			if (o1.getPatient().getDisplayIDIsNotNull() && !o2.getPatient().getDisplayIDIsNotNull())
			{
				return direction;
			}
			
			if (o2.getPatient().getDisplayIDIsNotNull() && !o1.getPatient().getDisplayIDIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}
	private static class SurnameComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public SurnameComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
	
			if (o1.getPatient().getSurnameIsNotNull() && o2.getPatient().getSurnameIsNotNull())
			{
				return o1.getPatient().getSurname().toLowerCase().compareTo(o2.getPatient().getSurname().toLowerCase()) * direction;
			}
			
			if (o1.getPatient().getSurnameIsNotNull() && !o2.getPatient().getSurnameIsNotNull())
			{
				return direction;
			}
			
			if (o2.getPatient().getSurnameIsNotNull() && !o1.getPatient().getSurnameIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}
	private static class ForenameComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public ForenameComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
	
			if (o1.getPatient().getForenameIsNotNull() && o2.getPatient().getForenameIsNotNull())
			{
				return o1.getPatient().getForename().toLowerCase().compareTo(o2.getPatient().getForename().toLowerCase()) * direction;
			}
			
			if (o1.getPatient().getForenameIsNotNull() && !o2.getPatient().getForenameIsNotNull())
			{
				return direction;
			}
			
			if (o2.getPatient().getForenameIsNotNull() && !o1.getPatient().getForenameIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
		
	}
	private static class SexComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public SexComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
	
			if (o1.getPatient().getSexIsNotNull() && o2.getPatient().getSexIsNotNull())
			{
				return o1.getPatient().getSex().compareTo(o2.getPatient().getSex()) * direction;
			}
			
			if (o1.getPatient().getSexIsNotNull() && !o2.getPatient().getSexIsNotNull())
			{
				return direction;
			}
			
			if (o2.getPatient().getSexIsNotNull() && !o1.getPatient().getSexIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
		
	}
	
	private static class ClinicNameComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public ClinicNameComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
	
			if (o1.getSessionNameIsNotNull() && o2.getSessionNameIsNotNull())
			{
				return o1.getSessionName().toLowerCase().compareTo(o2.getSessionName().toLowerCase()) * direction;
			}
			
			if (o1.getSessionNameIsNotNull() && !o2.getSessionNameIsNotNull())
			{
				return direction;
			}
			
			if (o2.getSessionNameIsNotNull() && !o1.getSessionNameIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
		
	}
	private static class ActivityTypeComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public ActivityTypeComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
	
			if (o1.getAppointmentActivityNameIsNotNull() && o2.getAppointmentActivityNameIsNotNull())
			{
				return o1.getAppointmentActivityName().toLowerCase().compareTo(o2.getAppointmentActivityName().toLowerCase()) * direction;
			}
			
			if (o1.getAppointmentActivityNameIsNotNull() && !o2.getAppointmentActivityNameIsNotNull())
			{
				return direction;
			}
			
			if (o2.getAppointmentActivityNameIsNotNull() && !o1.getAppointmentActivityNameIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
		
	}
	private static class ApptStatusComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>//WDEV-23593
	{
		private int direction = 1;

		public ApptStatusComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}
		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo o1, AppointmentForOutpatientClinicListManualCustomClassVo o2)
		{
	
			if (o1.getAppointmentStatusTextIsNotNull() && o2.getAppointmentStatusTextIsNotNull())
			{
				return o1.getAppointmentStatusText().toLowerCase().compareTo(o2.getAppointmentStatusText().toLowerCase()) * direction;
			}
			
			if (o1.getAppointmentStatusTextIsNotNull() && !o2.getAppointmentStatusTextIsNotNull())
			{
				return direction;
			}
			
			if (o2.getAppointmentStatusTextIsNotNull() && !o1.getAppointmentStatusTextIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
		
	}
	private static class LinkAppointmentComparator implements Comparator<AppointmentForOutpatientClinicListManualCustomClassVo>
	{
		private int direction;

		public LinkAppointmentComparator(SortOrder sortOrderComments)
		{
			if (SortOrder.ASCENDING.equals(sortOrderComments))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(AppointmentForOutpatientClinicListManualCustomClassVo c1, AppointmentForOutpatientClinicListManualCustomClassVo c2)
		{
			Boolean hasFirstRecord = Boolean.TRUE.equals(c1.getHasLinkedAppointments());
			Boolean hasSecondRecord = Boolean.TRUE.equals(c2.getHasLinkedAppointments());
			if (hasFirstRecord || hasSecondRecord)
			{
				Integer val1 = Boolean.FALSE.equals(hasFirstRecord) ? 1 : 0;
				Integer val2 = Boolean.FALSE.equals(hasSecondRecord) ? 1 : 0;
				
				if (val1 != 0 && val2 != 0)
				{
					return val1.compareTo(val2) * direction;
				}

				if (val1 != 0 && val2 == 0)
				{
					return direction;
				}

				if (val2 != 0 && val1 == 0)
				{
					return -1 * direction;
				}	
			}

		return 0;
		}
	}

	@Override
	protected void onImbAddListTypeClick() throws PresentationLogicException
	{
		addListTypes();
		
	}


	private void addListTypes()
	{
		form.getGlobalContext().Core.setSelectedLookupInstances(getListTypeSelection());
		engine.open(form.getForms().Core.SelectLookupInstances);
	}


	@Override
	protected void onQmbClinicValueChanged() throws PresentationLogicException//WDEV-23273
	{
		form.qmbClinic().setTooltip(form.qmbClinic().getValue()!=null ? form.qmbClinic().getValue().getDescription():null);
		form.imbSessionMoveDetails().setTooltip(getTooltipForSessionMoveDetailsButton(form.qmbClinic().getValue())); //WDEV-22944
		updateControlsState();
	}


	@Override
	protected void onQmbClinicTextSubmited(String value)throws PresentationLogicException//WDEV-23273
	{
		if(value!=null)//WDEV-23273
			loadClinics(value);
	}	
}
