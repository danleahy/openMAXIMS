//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.vteriskassessmentworklist;

import ims.clinical.forms.vteriskassessmentworklist.GenForm.GroupPatientsEnumeration;
import ims.clinical.vo.VTERemoveDeclineReasonVo;
import ims.clinical.vo.VTERiskAssessmentTCIVo;
import ims.clinical.vo.VTERiskAssessmentTCIVoCollection;
import ims.clinical.vo.VTERiskAssessmentWorklistCriteriaVo;
import ims.clinical.vo.WasVTERiskAssessmentStatusChangedVo;
import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.clinical.vo.lookups.VTEAsessmentStatusCollection;
import ims.clinical.vo.lookups.VTEAssessmentStatusReason;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientForVTERiskAssessmentVo;
import ims.core.vo.PatientShort;
import ims.core.vo.VTEAssessmentColourConfigVoCollection;
import ims.core.vo.VTEAssessmentConfigVo;
import ims.core.vo.WardStayVo;
import ims.core.vo.WardStayVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IVTERiskAssessment;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_IDENTIFIER = 0;
	private static final int COL_SURNAME = 1;
	private static final int COL_FORENAME = 2;
	private static final int COL_DOB = 3;
	private static final int COL_ADM_WARD = 4;
	private static final int COL_WARD = 5;
	private static final int COL_CONSULTANT = 6;
	private static final int COL_SPECIALTY = 7;
	private static final int COL_ADMISSION_DATE = 8;
	private static final int COL_VTE_STATUS = 9;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	private void initialize() 
	{
		populateHospitalCombo();
		
		ILocation currentLocation = engine.getCurrentLocation();
		LocSiteLiteVo currentHospiptal = domain.getCurrentHospital(currentLocation);
		
		form.cmbHospital().setValue(currentHospiptal);
		if(form.cmbHospital().getValue() != null && currentLocation instanceof LocationLiteVo)
		{
			listCurrentWards(form.cmbHospital().getValue(), null, false);
			form.qmbCurrentWard().setValue((LocationLiteVo) currentLocation);
		}
		
		form.ccConsultant().initialize(MosType.MEDIC);
		
		bindVTEAssessmentStatusCombo();
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.cmbIDType().setValue(dispIdType);
		
		form.getLocalContext().setWasTimerOn(false);
		form.getTimers().gettimerRefresh().setInterval(ConfigFlag.UI.VTE_RISK_ASSESSMENT_AUTO_REFRESH_TIME_SECONDS.getValue());
		
		form.GroupPatients().setValue(GroupPatientsEnumeration.rdoCurrentInpatients);
		
		form.getLocalContext().setVTEConfiguration(domain.getVteConfig());
		initializePatientDynamicGrid();
		
	}

	private void initializePatientDynamicGrid()
	{
		form.dyngrdPatients().getRows().clear();
		form.dyngrdPatients().setSelectable(true);
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		DynamicGridColumn column = form.dyngrdPatients().getColumns().newColumn(dispIdType.getText());
		column.setIdentifier(COL_IDENTIFIER);
		column.setWidth(80);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPatients().getColumns().newColumn("Surname");
		column.setIdentifier(COL_SURNAME);
		column.setWidth(80);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPatients().getColumns().newColumn("Forename");
		column.setIdentifier(COL_FORENAME);
		column.setWidth(80);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPatients().getColumns().newColumn("DOB");
		column.setIdentifier(COL_DOB);
		column.setWidth(65);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dyngrdPatients().getColumns().newColumn("Adm. Ward");
		column.setIdentifier(COL_ADM_WARD);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPatients().getColumns().newColumn("Ward");
		column.setIdentifier(COL_WARD);
		column.setWidth(90);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPatients().getColumns().newColumn("Consultant");
		column.setIdentifier(COL_CONSULTANT);
		column.setWidth(90);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dyngrdPatients().getColumns().newColumn("Specialty");
		column.setIdentifier(COL_SPECIALTY);
		column.setWidth(70);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPatients().getColumns().newColumn("Adm. Date");
		column.setIdentifier(COL_ADMISSION_DATE);
		column.setWidth(90);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dyngrdPatients().getColumns().newColumn("VTE Status");
		column.setIdentifier(COL_VTE_STATUS);
		column.setWidth(-1);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);
	}

	private void bindVTEAssessmentStatusCombo() 
	{
		form.cmbVTEStatus().clear();
		
		VTEAsessmentStatusCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getVTEAsessmentStatus(this.domain.getLookupService());
		for(int i = 0; i < lookupCollection.size(); i++)
		{
			if(VTEAsessmentStatus.INPROGRESS.equals(lookupCollection.get(i)) || VTEAsessmentStatus.VALIDATED.equals(lookupCollection.get(i)) || VTEAsessmentStatus.VALIDATION_DECLINED.equals(lookupCollection.get(i)))
				continue;
			
			form.cmbVTEStatus().newRow(lookupCollection.get(i), lookupCollection.get(i).getText(), lookupCollection.get(i).getImage(), lookupCollection.get(i).getTextColor());
		}
	}

	private void open() 
	{
		if(form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteriaIsNotNull())
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteria());
			
			if(form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteria().getWasTimerOnIsNotNull() && form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteria().getWasTimerOn())
			{
				form.getLocalContext().setWasTimerOn(true);
				toggleTimer(false);
			}
		}
		
		if(search())
		{
			form.getGlobalContext().Clinical.setVTERiskAssessmentWorklistCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}
	
	private void populateSearchCriteriaScreenFromData(VTERiskAssessmentWorklistCriteriaVo criteria) 
	{
		clearScreen();
		
		if(criteria == null)
			return;
		
		form.cmbHospital().setValue(criteria.getHospital());
		
		if(criteria.getWardIsNotNull())
		{
			form.qmbWard().newRow(criteria.getWard(), criteria.getWard().getName());
		}
		form.qmbWard().setValue(criteria.getWard());
		
		if(criteria.getCurrentWardIsNotNull())
		{
			form.qmbCurrentWard().newRow(criteria.getCurrentWard(), criteria.getCurrentWard().getName());
		}
		form.qmbCurrentWard().setValue(criteria.getCurrentWard());
		
		form.dtimFrom().setValue(criteria.getAdmissionDateFrom());
		form.dtimTo().setValue(criteria.getAdmissionDateTo());
		form.ccConsultant().setValue(criteria.getConsultant());
		form.cmbSpecialty().setValue(criteria.getSpecialty());
		form.cmbVTEStatus().setValue(criteria.getVTEStatus());
		form.txtSurname().setValue(criteria.getSurname());
		form.txtForename().setValue(criteria.getForename());
		form.cmbIDType().setValue(criteria.getPatIdType() != null ? criteria.getPatIdType() : PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		form.txtIDValue().setValue(criteria.getPatIdValue());
		form.pdtDOB().setValue(criteria.getDOB());
		form.chkOver24Hours().setValue(criteria.getOver24Hours());
		form.GroupPatients().setValue(Boolean.TRUE.equals(criteria.getCurrentInpatients()) ? GroupPatientsEnumeration.rdoCurrentInpatients : Boolean.TRUE.equals(criteria.getDischargedPatients()) ? GroupPatientsEnumeration.rdoDischargedPatients : GroupPatientsEnumeration.None);
		form.chkTciForToday().setValue(criteria.getTciForToday());
		
		form.dyngrdPatients().getRows().clear();
	}

	private void clearScreen() 
	{
		form.cmbHospital().setValue(null);
		form.qmbWard().clear();
		form.qmbCurrentWard().clear();
		form.dtimFrom().setValue(null);
		form.dtimTo().setValue(null);
		form.ccConsultant().clear();
		form.cmbSpecialty().setValue(null);
		form.cmbVTEStatus().setValue(null);
		form.txtSurname().setValue(null);
		form.txtForename().setValue(null);
		form.cmbIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		form.txtIDValue().setValue(null);
		form.pdtDOB().setValue(null);
		form.chkOver24Hours().setValue(null);
		form.GroupPatients().setValue(GroupPatientsEnumeration.rdoCurrentInpatients);
		form.chkTciForToday().setValue(null);
		
		form.dyngrdPatients().getRows().clear();
	}

	private void populateHospitalCombo() 
	{
		LocSiteLiteVoCollection hospitals = domain.listHospitals();
		
		if(hospitals == null || hospitals.size() == 0)
			return;
		
		for(LocSiteLiteVo hospital : hospitals)
		{
			if(hospital == null)
				continue;
			
			form.cmbHospital().newRow(hospital, hospital.getName());
		}
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException 
	{
		clearScreen();
		
		form.getLocalContext().setSelectedInstance(null);
		form.getGlobalContext().Clinical.setVTERiskAssessmentWorklistCriteria(null);
		
		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException 
	{
		form.getLocalContext().setSelectedInstance(null);
		
		if(search())
		{
			form.getGlobalContext().Clinical.setVTERiskAssessmentWorklistCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}
	
	private VTERiskAssessmentWorklistCriteriaVo populateSearchCriteriaDataFromScreen() 
	{
		VTERiskAssessmentWorklistCriteriaVo criteria = new VTERiskAssessmentWorklistCriteriaVo();
		
		criteria.setHospital(form.cmbHospital().getValue());
		criteria.setWard(form.qmbWard().getValue());
		criteria.setCurrentWard(form.qmbCurrentWard().getValue());
		criteria.setAdmissionDateFrom(form.dtimFrom().getValue());
		criteria.setAdmissionDateTo(form.dtimTo().getValue());
		criteria.setConsultant(form.ccConsultant().getValue());
		criteria.setSpecialty(form.cmbSpecialty().getValue());
		criteria.setVTEStatus(form.cmbVTEStatus().getValue());
		criteria.setSurname(form.txtSurname().getValue());
		criteria.setForename(form.txtForename().getValue());
		
		if(form.txtIDValue().getValue() != null)
		{
			criteria.setPatIdType(form.cmbIDType().getValue());
			criteria.setPatIdValue(form.txtIDValue().getValue());
		}
		
		criteria.setDOB(form.pdtDOB().getValue());
		criteria.setOver24Hours(form.chkOver24Hours().getValue());
		criteria.setCurrentInpatients(form.GroupPatients().getValue().equals(GroupPatientsEnumeration.rdoCurrentInpatients));
		criteria.setDischargedPatients(form.GroupPatients().getValue().equals(GroupPatientsEnumeration.rdoDischargedPatients));
		criteria.setTciForToday(form.chkTciForToday().getValue());
		criteria.setWasTimerOn(form.getLocalContext().getWasTimerOn());
		
		return criteria;
	}

	private boolean search() 
	{
		form.dyngrdPatients().getRows().clear();
		
		if(isSearchCriteriaValid())
		{
			form.getLocalContext().setConsultantSortOrder(SortOrder.DESCENDING);
			form.getLocalContext().setAdmissionDateSortOrder(SortOrder.ASCENDING);//WDEV-15414 
			
			if (Boolean.TRUE.equals(form.chkTciForToday().getValue()))
			{
				VTERiskAssessmentTCIVoCollection tciList = domain.listFromTCI(populateSearchCriteriaDataFromScreen());
				populateScreenWithTCIs(tciList);
			}
			else
			{	
				List<IVTERiskAssessment> list = domain.listPatients(populateSearchCriteriaDataFromScreen());//WDEV-15414
				
				if (list != null) //WDEV-19790
					Collections.sort(list, new VTEAssessmentAdmissionDateComparator(form.getLocalContext().getAdmissionDateSortOrder()));//WDEV-15414 
				
				populateScreenWithVTEs(list);//WDEV-15414
			}
			
			if(form.dyngrdPatients().getRows().size() == 0)
			{
				engine.showMessage("No records found.");
			}
			
			return true;
		}
		
		return false;
	}

	private void populateScreenWithTCIs(VTERiskAssessmentTCIVoCollection tciList)
	{
		form.dyngrdPatients().getRows().clear();
		
		if(tciList == null || tciList.size() == 0)
			return;
		
		for(int i=0; i < tciList.size(); i++)
		{
			if( tciList.get(i) == null )
				continue;
			
			addTCIRow(tciList.get(i));
		}
		
		form.dyngrdPatients().setValue(form.getLocalContext().getSelectedInstance());
		
	}

	private void populateScreenWithVTEs(List<IVTERiskAssessment> vteList)
	{
		form.dyngrdPatients().getRows().clear();
		
		if(vteList == null || vteList.size() == 0)
			return;
		
		for(int i=0; i < vteList.size(); i++)
		{
			if( vteList.get(i) == null )
				continue;
			
			addEpisodeRow(vteList.get(i));
		}
		
		form.dyngrdPatients().setValue(form.getLocalContext().getSelectedInstance());
		
	}

	private void addTCIRow(VTERiskAssessmentTCIVo tci)
	{
		if(tci == null)
			return;
		
		DynamicGridRow newRow = form.dyngrdPatients().getRows().newRow();
		
		if(tci.getPatient() != null) 
		{
			DynamicGridCell cellId = newRow.getCells().newCell(getColumn(COL_IDENTIFIER), DynamicCellType.STRING);
			
			if (tci.getPatient().getIdentifiers() != null)
			{
				PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
				
				for (int i = 0; i < tci.getPatient().getIdentifiers().size(); i++)
				{
					if (dispIdType.equals(tci.getPatient().getIdentifiers().get(i).getType()))
					{
						cellId.setValue(tci.getPatient().getIdentifiers().get(i).getValue());
						cellId.setTooltip(tci.getPatient().getIdentifiers().get(i).getValue());
						cellId.getColumn().setAlignment(Alignment.LEFT);
						break;
					}
				}
				
				DynamicGridCell cellSurname = newRow.getCells().newCell(getColumn(COL_SURNAME), DynamicCellType.STRING);
				cellSurname.setValue(tci.getPatient().getName().getSurname());
				cellSurname.setTooltip(tci.getPatient().getName().getSurname());
				cellSurname.getColumn().setAlignment(Alignment.LEFT);

				DynamicGridCell cellForename = newRow.getCells().newCell(getColumn(COL_FORENAME), DynamicCellType.STRING);
				cellForename.setValue(tci.getPatient().getName().getForename());
				cellForename.setTooltip(tci.getPatient().getName().getForename());
				cellForename.getColumn().setAlignment(Alignment.LEFT);
				
				DynamicGridCell cellDOB = newRow.getCells().newCell(getColumn(COL_DOB), DynamicCellType.STRING);
				
				if (tci.getPatient().getDob() != null)
				{
					cellDOB.setValue(tci.getPatient().getDob().toString()); 
					cellDOB.setTooltip(tci.getPatient().getDob().toString());
					cellDOB.getColumn().setAlignment(Alignment.LEFT);
				}
			}
		}
		
		if(tci.getTCI() != null) 
		{
			DynamicGridCell cellWard = newRow.getCells().newCell(getColumn(COL_WARD), DynamicCellType.STRING);
			cellWard.setValue(tci.getTCI().getAllocatedWard() != null ? tci.getTCI().getAllocatedWard().getName() : ""); 
			cellWard.setTooltip(tci.getTCI().getAllocatedWard() != null ? tci.getTCI().getAllocatedWard().getName() : "");
			cellWard.getColumn().setAlignment(Alignment.LEFT);
		
			DynamicGridCell cellConsultant = newRow.getCells().newCell(getColumn(COL_CONSULTANT), DynamicCellType.STRING);
			cellConsultant.setValue(tci.getTCI().getReferringConsultant() != null ? tci.getTCI().getReferringConsultant().getIHcpName() : ""); 
			cellConsultant.setTooltip(tci.getTCI().getReferringConsultant() != null ? tci.getTCI().getReferringConsultant().getIHcpName() : "");
			cellConsultant.getColumn().setAlignment(Alignment.LEFT);
		}
		
		DynamicGridCell cellVTEStatus = newRow.getCells().newCell(getColumn(COL_VTE_STATUS), DynamicCellType.IMAGE);
		cellVTEStatus.getColumn().setAlignment(Alignment.LEFT);
		
		
		if (tci.getPatientSummaryRecord() != null)
		{
			VTEAssessmentConfigVo vteConfig = form.getLocalContext().getVTEConfiguration();
			Date completedDate = tci.getPatientSummaryRecord().getPreOpVTECompletedDate();

			if (completedDate != null && vteConfig != null && vteConfig.getPreOpAssessmentValidPeriod() != null)
			{
				completedDate.addDay(vteConfig.getPreOpAssessmentValidPeriod());
			}

			// make sure PatientSummaryRecord is valid
			if (tci.getPatientSummaryRecord().getPreOpVTECompletedDate() != null && completedDate != null && completedDate.isGreaterOrEqualThan(new Date()))
			{
				if (tci.getPatientSummaryRecord().getPreOpVTEAssessment() != null)
				{

					if (tci.getPatientSummaryRecord().getPreOpVTEValidationDate() == null)
					{
						cellVTEStatus.setValue(form.getImages().Correspondence.DocumentCompleted16);
						cellVTEStatus.setTooltip("Requires Validation");
					}
					else
					{
						cellVTEStatus.setValue(form.getImages().Core.Tick);
						cellVTEStatus.setTooltip(VTEAsessmentStatus.VALIDATED.getText());
					}
				}
				else if (tci.getPatientSummaryRecord().getInpatientVTEAssessment() != null && VTEAsessmentStatus.COMPLETED.equals(tci.getPatientSummaryRecord().getInpatientVTEAssessment().getVTEAssessmentStatus()))
				{
					cellVTEStatus.setValue(form.getImages().Core.Tick);
					cellVTEStatus.setTooltip(VTEAsessmentStatus.COMPLETED.getText());
				}
			}
			else
				tci.setPatientSummaryRecord(null);

		}
		
		newRow.setValue(tci);
		newRow.setReadOnly(true);
	}

	private boolean isSearchCriteriaValid() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		DateTime dateFrom = form.dtimFrom().getValue();
		DateTime dateTo = form.dtimTo().getValue();
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add("Admission Date From cannot be greater than Admission Date To.");
		}
		
		if (dateFrom != null && dateFrom.isGreaterThan(new DateTime()))
		{
			uiErrors.add("Admission Date From cannot be in the future.");
		}
		
		if (dateTo != null && dateTo.isGreaterThan(new DateTime()))
		{
			uiErrors.add("Admission Date To cannot be in the future.");
		}
		
		if (dateFrom == null && form.GroupPatients().getValue().equals(GroupPatientsEnumeration.rdoDischargedPatients))
		{
			uiErrors.add("Admission Date From is mandatory when Discharged Patients is selected.");
		}
		
		if (dateTo == null && form.GroupPatients().getValue().equals(GroupPatientsEnumeration.rdoDischargedPatients))
		{
			uiErrors.add("Admission Date To is mandatory when Discharged Patients is selected.");
		}
		
		if(!isAtLeastOneSearchFieldCompleted())
			uiErrors.add("Complete at least one search field.");
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		if (uiResults.length > 0)
		{
			engine.showErrors(uiResults);
			return false;
		}
		
		return true;
	}

	private boolean isAtLeastOneSearchFieldCompleted() 
	{
		return form.cmbHospital().getValue() != null || form.qmbWard().getValue() != null || form.qmbCurrentWard().getValue() != null || form.dtimFrom().getValue() != null || form.dtimTo().getValue() != null
				|| form.ccConsultant().getValue() != null || form.cmbSpecialty().getValue() != null || form.cmbVTEStatus().getValue() != null || form.txtSurname().getValue() != null
				|| form.txtForename().getValue() != null || form.txtIDValue().getValue() != null || form.pdtDOB().getValue() != null || Boolean.TRUE.equals(form.chkOver24Hours().getValue()
				|| !form.GroupPatients().getValue().equals(GroupPatientsEnumeration.None) || Boolean.TRUE.equals(form.chkTciForToday().getValue()));
	}

	private void populateScreenFromData(List<Object> list) //WDEV-15414 
	{
		form.dyngrdPatients().getRows().clear();
		
		if(list == null || list.size() == 0)
			return;
		
		for(int i=0; i<list.size(); i++)
		{
			if(list.get(i) == null)
				continue;
			
			if (list.get(i) instanceof IVTERiskAssessment)
			{
				addEpisodeRow((IVTERiskAssessment)list.get(i));//WDEV-15414
			}
			else if (list.get(i) instanceof VTERiskAssessmentTCIVo)
			{
				addTCIRow((VTERiskAssessmentTCIVo)list.get(i));
			}
		}
		
		form.dyngrdPatients().setValue(form.getLocalContext().getSelectedInstance());
	}

	private void addEpisodeRow(IVTERiskAssessment ivteRiskAssessments) //WDEV-15414 
	{
		if(ivteRiskAssessments == null)
			return;
		
		DynamicGridRow newRow = form.dyngrdPatients().getRows().newRow();
		
		if(ivteRiskAssessments.getPasEvent() != null)//WDEV-15414 
		{
			DynamicGridCell cellId = newRow.getCells().newCell(getColumn(COL_IDENTIFIER), DynamicCellType.STRING);
			
			if (ivteRiskAssessments.getPasEvent().getPatient().getIdentifiers() != null)
			{
				PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
				
				for (int i = 0; i < ivteRiskAssessments.getPasEvent().getPatient().getIdentifiers().size(); i++)
				{
					if (dispIdType.equals(ivteRiskAssessments.getPasEvent().getPatient().getIdentifiers().get(i).getType()))
					{
						cellId.setValue(ivteRiskAssessments.getPasEvent().getPatient().getIdentifiers().get(i).getValue());
						cellId.setTooltip(ivteRiskAssessments.getPasEvent().getPatient().getIdentifiers().get(i).getValue());
						cellId.getColumn().setAlignment(Alignment.LEFT);
						break;
					}
				}
			}
			
			DynamicGridCell cellSurname = newRow.getCells().newCell(getColumn(COL_SURNAME), DynamicCellType.STRING);
			cellSurname.setValue(ivteRiskAssessments.getPasEvent().getPatient().getName().getSurname());
			cellSurname.setTooltip(ivteRiskAssessments.getPasEvent().getPatient().getName().getSurname());
			cellSurname.getColumn().setAlignment(Alignment.LEFT);

			DynamicGridCell cellForename = newRow.getCells().newCell(getColumn(COL_FORENAME), DynamicCellType.STRING);
			cellForename.setValue(ivteRiskAssessments.getPasEvent().getPatient().getName().getForename());
			cellForename.setTooltip(ivteRiskAssessments.getPasEvent().getPatient().getName().getForename());
			cellForename.getColumn().setAlignment(Alignment.LEFT);
			
			DynamicGridCell cellDOB = newRow.getCells().newCell(getColumn(COL_DOB), DynamicCellType.STRING);
			
			if (ivteRiskAssessments.getPasEvent().getPatient().getDob() != null)
			{
				cellDOB.setValue(ivteRiskAssessments.getPasEvent().getPatient().getDob().toString()); 
				cellDOB.setTooltip(ivteRiskAssessments.getPasEvent().getPatient().getDob().toString());
				cellDOB.getColumn().setAlignment(Alignment.LEFT);
			}
			
			WardStayVo admWard =  getMinById(ivteRiskAssessments.getWardStays()); //wdev-14992, WDEV-15414 
			
			DynamicGridCell cellAdmWard = newRow.getCells().newCell(getColumn(COL_ADM_WARD), DynamicCellType.STRING);
			cellAdmWard.setValue(admWard != null && admWard.getWard() != null ? admWard.getWard().getName() : ""); 
			cellAdmWard.setTooltip(admWard != null && admWard.getWard() != null ? admWard.getWard().getName() : "");
			cellAdmWard.getColumn().setAlignment(Alignment.LEFT);
			
			DynamicGridCell cellWard = newRow.getCells().newCell(getColumn(COL_WARD), DynamicCellType.STRING);
			cellWard.setValue(ivteRiskAssessments.getPasEvent().getPatient().getWard() != null ? ivteRiskAssessments.getPasEvent().getPatient().getWard().getName() : ""); 
			cellWard.setTooltip(ivteRiskAssessments.getPasEvent().getPatient().getWard() != null ? ivteRiskAssessments.getPasEvent().getPatient().getWard().getName() : "");
			cellWard.getColumn().setAlignment(Alignment.LEFT);
			
			DynamicGridCell cellConsultant = newRow.getCells().newCell(getColumn(COL_CONSULTANT), DynamicCellType.STRING);
			cellConsultant.setValue(ivteRiskAssessments.getPasEvent().getConsultant() != null ? ivteRiskAssessments.getPasEvent().getConsultant().getIHcpName() : ""); 
			cellConsultant.setTooltip(ivteRiskAssessments.getPasEvent().getConsultant() != null ? ivteRiskAssessments.getPasEvent().getConsultant().getIHcpName() : "");
			cellConsultant.getColumn().setAlignment(Alignment.LEFT);
			
			DynamicGridCell cellSpecialty = newRow.getCells().newCell(getColumn(COL_SPECIALTY), DynamicCellType.STRING);
			cellSpecialty.setValue(ivteRiskAssessments.getPasEvent().getSpecialty() != null ? ivteRiskAssessments.getPasEvent().getSpecialty().getText() : ""); 
			cellSpecialty.setTooltip(ivteRiskAssessments.getPasEvent().getSpecialty() != null ? ivteRiskAssessments.getPasEvent().getSpecialty().getText() : "");
			cellSpecialty.getColumn().setAlignment(Alignment.LEFT);
			
		}
		
		DynamicGridCell cellAdmissionDate = newRow.getCells().newCell(getColumn(COL_ADMISSION_DATE), DynamicCellType.STRING);
		cellAdmissionDate.setValue(ivteRiskAssessments.getAdmissionDateTime() != null ? ivteRiskAssessments.getAdmissionDateTime().toString() : ""); 
		cellAdmissionDate.setTooltip(ivteRiskAssessments.getAdmissionDateTime() != null ? ivteRiskAssessments.getAdmissionDateTime().toString() : "");
		cellAdmissionDate.getColumn().setAlignment(Alignment.LEFT);
		
		DynamicGridCell cellVTEStatus = newRow.getCells().newCell(getColumn(COL_VTE_STATUS), DynamicCellType.IMAGE);
		
		if (VTEAsessmentStatus.REQUIRED.equals(ivteRiskAssessments.getVTEAssessmentStatus()))
			cellVTEStatus.setValue(form.getImages().OCRR.Requested);
		else if (VTEAsessmentStatus.VALIDATED.equals(ivteRiskAssessments.getVTEAssessmentStatus()) || VTEAsessmentStatus.COMPLETED.equals(ivteRiskAssessments.getVTEAssessmentStatus()))
			cellVTEStatus.setValue(form.getImages().Core.Tick);
		else if (VTEAsessmentStatus.VALIDATION_REQUIRED.equals(ivteRiskAssessments.getVTEAssessmentStatus()))
			cellVTEStatus.setValue(form.getImages().Correspondence.DocumentCompleted16);
		
		if (VTEAsessmentStatus.COMPLETED.equals(ivteRiskAssessments.getVTEAssessmentStatus()) && VTEAssessmentStatusReason.EXCLUDED.equals(ivteRiskAssessments.getVTEAssessmentStatusReason()))
			cellVTEStatus.setTooltip(ivteRiskAssessments.getVTEAssessmentStatusReason().getText());
		else
			cellVTEStatus.setTooltip(ivteRiskAssessments.getVTEAssessmentStatus() != null ? ivteRiskAssessments.getVTEAssessmentStatus().getText() : "");
		
		cellVTEStatus.getColumn().setAlignment(Alignment.LEFT);
		
		if(ivteRiskAssessments.getAdmissionDateTime() != null)//WDEV-15414 
		{
			if (VTEAsessmentStatus.REQUIRED.equals(ivteRiskAssessments.getVTEAssessmentStatus()) || VTEAsessmentStatus.VALIDATION_REQUIRED.equals(ivteRiskAssessments.getVTEAssessmentStatus()))
			{
				DateTime admissionDate = (DateTime) ivteRiskAssessments.getAdmissionDateTime().clone();
				
				newRow.setBackColor(getColourForRecord(admissionDate));
			}
		}
		
		newRow.setValue(ivteRiskAssessments);//WDEV-15414
		newRow.setReadOnly(true);
	}
	
	private Color getColourForRecord(DateTime admissionDate)
	{
		if (admissionDate == null || form.getLocalContext().getVTEConfiguration() == null)
			return null;
		
		VTEAssessmentColourConfigVoCollection vteColourConfiguration = form.getLocalContext().getVTEConfiguration().getColourConfiguration();
	
		if (vteColourConfiguration == null || vteColourConfiguration.size() == 0)
			return null;
		
		int hoursDiff = (int) (DateTime.minutesDiff(new DateTime(), admissionDate) / 60);
		
		for (int i = 0; i <  vteColourConfiguration.size(); i++)
		{
			
			if (vteColourConfiguration.get(i) == null)
				continue;
			
			if (vteColourConfiguration.get(i).getFromHours() <= hoursDiff &&  vteColourConfiguration.get(i).getToHours() >= hoursDiff)
				return  vteColourConfiguration.get(i).getWorklistEntryColour();
			
		}
		
		return null;
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdPatients().getColumns().getByIdentifier(identifier);
	}

	//wdev-14992
	private WardStayVo getMinById(WardStayVoCollection coll)
	{
		WardStayVo tempVo = null;
		if(	coll == null || coll.size() == 0 )
			return null;
		for(int i = 0; i < coll.size();i++)
		{
			if( i == 0)
				tempVo = coll.get(i);
			else if( i > 0 )
			{
				if( tempVo != null && coll.get(i) != null && tempVo.getID_WardStay() > coll.get(i).getID_WardStay())
					tempVo = coll.get(i); 
			}
		}
		
		return tempVo;
	}
	//-----------

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException 
	{
		form.qmbCurrentWard().clear();
		form.qmbWard().clear();//WDEV-19754 
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		
		boolean enableControls = !form.getTimers().gettimerRefresh().isEnabled();
		boolean isTciSelected = Boolean.TRUE.equals(form.chkTciForToday().getValue());
		boolean recordRequiresVte = form.dyngrdPatients().getValue() != null && VTEAsessmentStatus.REQUIRED.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus());
		boolean recordHasExcludedVte = form.dyngrdPatients().getValue() != null && VTEAsessmentStatus.COMPLETED.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus()) && VTEAssessmentStatusReason.EXCLUDED.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatusReason());
		boolean hideViewVteCM =  recordRequiresVte || recordHasExcludedVte;
		
		form.cmbHospital().setEnabled(enableControls);
		form.qmbWard().setEnabled(!isTciSelected && form.cmbHospital().getValue() != null && enableControls);
		form.qmbCurrentWard().setEnabled(form.cmbHospital().getValue() != null && enableControls);
		
		form.dtimFrom().setEnabled(!isTciSelected && enableControls);
		form.dtimTo().setEnabled(!isTciSelected && enableControls);
		
		form.ccConsultant().setEnabled(enableControls);
		form.cmbSpecialty().setEnabled(!isTciSelected && enableControls);
		form.cmbVTEStatus().setEnabled(!isTciSelected && enableControls);
		
		form.txtSurname().setEnabled(enableControls);
		form.txtForename().setEnabled(enableControls);
		form.cmbIDType().setEnabled(enableControls);
		form.txtIDValue().setEnabled(enableControls);
		form.pdtDOB().setEnabled(enableControls);
		form.chkOver24Hours().setEnabled(enableControls);
		form.GroupPatients().setEnabled(enableControls);
		form.chkTciForToday().setEnabled(enableControls);
		
		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);
		
		form.getContextMenus().Clinical.hideAllVTERiskAssessmentWorklistMenuMenuItems();
		
		if (form.dyngrdPatients().getValue() instanceof IVTERiskAssessment)
		{
			form.getContextMenus().Clinical.getVTERiskAssessmentWorklistMenuCREATE_VTEASSESSMENTItem().setVisible(form.dyngrdPatients().getValue() != null && VTEAsessmentStatus.REQUIRED.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus()));
			form.getContextMenus().Clinical.getVTERiskAssessmentWorklistMenuVIEW_EDIT_VTEASSESSMENTItem().setVisible(!hideViewVteCM);
			form.getContextMenus().Clinical.getVTERiskAssessmentWorklistMenuREMOVEItem().setVisible(form.dyngrdPatients().getValue() != null && VTEAsessmentStatus.REQUIRED.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus()));
		}
	}

	private void listWards(LocSiteLiteVo locSiteLiteVo, String wardName, boolean showOpened) 
	{
		form.qmbWard().clear();
		
		if(locSiteLiteVo == null || locSiteLiteVo.getID_Location() == null)
			return;
		
		LocationLiteVoCollection wards = domain.listWards(locSiteLiteVo, wardName);
		
		if(wards == null || wards.size() == 0)
			return;
		
		for(LocationLiteVo ward : wards)
		{
			if(ward == null)
				continue;
			
			form.qmbWard().newRow(ward, ward.getName());
		}
		
		if(showOpened)
		{
			if(wards.size() == 1)
			{
				form.qmbWard().setValue(wards.get(0));
				return;
			}
		
			form.qmbWard().showOpened();
		}
	}

	@Override
	protected void onQmbWardTextSubmited(String value) throws PresentationLogicException 
	{
		if(form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital");
			form.cmbHospital().setFocus();
			return;
		}
		
		listWards(form.cmbHospital().getValue(), value, true);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		disableRefreshTemporarily();
		
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.VTERiskAssessmentWorklistMenu.CREATE_VTEASSESSMENT:
				createOrViewVTEAssessment(FormMode.EDIT);
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.VTERiskAssessmentWorklistMenu.VIEW_EDIT_VTEASSESSMENT:
				createOrViewVTEAssessment(FormMode.VIEW);
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.VTERiskAssessmentWorklistMenu.REMOVE:
			{
				selectPatient();
				engine.open(form.getForms().Clinical.VTERemoveDeclineReasonDialog, new Object[] {"Remove From VTE Worklist", Boolean.FALSE});
				
			}
			break;
		}
		
		toggleTimer(false);
		updateControlsState();
	}

	private boolean saveVTEAssessment(VTERemoveDeclineReasonVo reason) 
	{
		if(form.dyngrdPatients().getValue() == null || ((IVTERiskAssessment)form.dyngrdPatients().getValue()).getId() ==  null)//WDEV-15414 
			return false;
		
		IVTERiskAssessment vteAssessment = (IVTERiskAssessment) form.dyngrdPatients().getValue();//WDEV-15414 
//		String[] errors = null;//WDEV-15414 
//		if(vteAssessment instanceof VTERiskAssessmentWorklistVo)//WDEV-15414 
//		{
//			((VTERiskAssessmentWorklistVo) vteAssessment).setVTEAssessmentStatus(null);
//			errors = ((VTERiskAssessmentWorklistVo) vteAssessment).validate();
//		}
//		else if(vteAssessment instanceof DischargedEpisodeForVTERiskAssessmentWorklistVo)//WDEV-15414 
//		{
//			((DischargedEpisodeForVTERiskAssessmentWorklistVo) vteAssessment).setVTEAssessmentStatus(null);
//			errors = ((DischargedEpisodeForVTERiskAssessmentWorklistVo) vteAssessment).validate();
//		}
//		
//		if(errors != null && errors.length > 0)
//		{
//			engine.showErrors(errors);
//			return false;
//		}
		
		try 
		{
			domain.saveEpisode(vteAssessment, reason);//WDEV-15414 
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			if(search())
			{
				form.getGlobalContext().Clinical.setVTERiskAssessmentWorklistCriteria(populateSearchCriteriaDataFromScreen());
			}
			
			return false;
		}
		
		return true;
	}

	private void createOrViewVTEAssessment(FormMode dialogMode) 
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		
		//WDEV-15986 - starts here
		WasVTERiskAssessmentStatusChangedVo wasChanged = domain.wasStatusChanged((IVTERiskAssessment)form.dyngrdPatients().getValue(), ((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus());
		
		if(wasChanged != null && wasChanged.getWasStatusChanged())
		{
			String message = "";
			
			if(wasChanged.getVTEStatus() == null)
			{
				message = "Selected Episode has been removed from VTE Worklist";
			}
			else if(VTEAsessmentStatus.REQUIRED.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus()))
			{
				message = "A new VTE Assessment has been created for this Episode";
			}
			else if(VTEAsessmentStatus.INPROGRESS.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus()))
			{
				if(VTEAsessmentStatus.COMPLETED.equals(wasChanged.getVTEStatus()))
				{
					message = "The VTE Assessment linked to this Episode has been completed";
				}
				else if(VTEAsessmentStatus.REQUIRED.equals(wasChanged.getVTEStatus()))
				{
					message = "The VTE Assessment linked to this Episode has been marked as Recorded in Error";
				}
			}
			
			if(message.length() > 0)
				engine.showMessage(message);
			
			if(wasChanged.getVTEStatus() == null || VTEAsessmentStatus.REQUIRED.equals(((IVTERiskAssessment)form.dyngrdPatients().getValue()).getVTEAssessmentStatus()))
			{
				open();
				return;
			}
		}
		//WDEV-15986 - ends here
		
		selectPatient();
		
		form.getGlobalContext().Core.setInpatientEpisodeForVTERiskAssessmentWorklistVo((IVTERiskAssessment)form.dyngrdPatients().getValue());
		engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {dialogMode});
	}

	private void selectPatient() 
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		
		PatientForVTERiskAssessmentVo patient = null;
		
		if (form.dyngrdPatients().getValue() instanceof IVTERiskAssessment && ((IVTERiskAssessment)form.dyngrdPatients().getValue()).getPasEvent() != null)
			patient = ((IVTERiskAssessment)form.dyngrdPatients().getValue()).getPasEvent().getPatient();
		else if (form.dyngrdPatients().getValue() instanceof VTERiskAssessmentTCIVo)
			patient = ((VTERiskAssessmentTCIVo)form.dyngrdPatients().getValue()).getPatient();
		
		PatientShort patientShort = new PatientShort(patient.getID_Patient(), patient.getVersion_Patient());
		form.getGlobalContext().Core.setPatientShort(patientShort);
	}

	private void disableRefreshTemporarily() 
	{
		if(form.getTimers().gettimerRefresh().isEnabled())
		{
			form.getTimers().gettimerRefresh().setEnabled(false);
			form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbRefresh().setTooltip("Click button to start the automatic refresh");	
			form.getLocalContext().setWasTimerOn(true);
		}
		else
			form.getLocalContext().setWasTimerOn(false);
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException 
	{
		if(search())
		{
			form.getGlobalContext().Clinical.setVTERiskAssessmentWorklistCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}

	@Override
	protected void onImbRefreshClick() throws PresentationLogicException 
	{
		toggleTimer(true);
		updateControlsState();
	}

	private void toggleTimer(boolean fromButton) 
	{
		if(fromButton && !form.getTimers().gettimerRefresh().isEnabled())
		{
			if(!isSearchCriteriaValid())
				return;
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().gettimerRefresh().isEnabled())
		{
			form.getTimers().gettimerRefresh().setEnabled(false);
			
			form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbRefresh().setTooltip("Click button to start the automatic refresh");
			
			form.getLocalContext().setWasTimerOn(false);
			if(form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteriaIsNotNull())
				form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerRefresh().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerRefresh().setEnabled(true);
				
				form.imbRefresh().setTooltip("Click button to stop the automatic refresh");
				form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
				form.imbRefresh().setEnabled(true);
				
				form.getLocalContext().setWasTimerOn(true);
				if(form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteriaIsNotNull())
					form.getGlobalContext().Clinical.getVTERiskAssessmentWorklistCriteria().setWasTimerOn(true);
			}
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Clinical.VTERemoveDeclineReasonDialog) && DialogResult.OK.equals(result))
		{
			saveVTEAssessment(form.getGlobalContext().Clinical.getVTERemoveDeclineReason());
		}
		
		
		form.getGlobalContext().Core.setPatientShort(null);
		
		if(search())
		{
			form.getGlobalContext().Clinical.setVTERiskAssessmentWorklistCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}
	
	//WDEV-15414 
	private List<Object> getValuesFromGrid() 
	{
		if(form.dyngrdPatients().getRows().size() == 0)
			return null;
		
		List<Object> values = new ArrayList<Object>();
		
		for(int i=0; i<form.dyngrdPatients().getRows().size(); i++)
		{
			if (form.dyngrdPatients().getRows().get(i).getValue() instanceof IVTERiskAssessment)
				values.add((IVTERiskAssessment)form.dyngrdPatients().getRows().get(i).getValue());
			else if (form.dyngrdPatients().getRows().get(i).getValue() instanceof VTERiskAssessmentTCIVo)
				values.add((VTERiskAssessmentTCIVo)form.dyngrdPatients().getRows().get(i).getValue());
				
		}
		
		return values;
	}

	class VTEAssessmentAdmissionDateComparator implements Comparator<Object>//WDEV-15414 
	{
		private int order =1;
		public VTEAssessmentAdmissionDateComparator()
		{
			order = 1;
		}
		public VTEAssessmentAdmissionDateComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}

		public int compare(Object o1, Object o2)// WDEV-15414
		{
			if (o1 instanceof IVTERiskAssessment && o2 instanceof IVTERiskAssessment)
			{
				IVTERiskAssessment o1Vo = (IVTERiskAssessment) o1;
				IVTERiskAssessment o2Vo = (IVTERiskAssessment) o2;
				
				if (o1Vo != null && o1Vo.getAdmissionDateTime() != null && o2Vo != null && o2Vo.getAdmissionDateTime() != null)// WDEV-15414
				{
					return order * o1Vo.getAdmissionDateTime().compareTo(o2Vo.getAdmissionDateTime());
				}
				
				if (o1 == null || !(o1Vo.getAdmissionDateTime() != null))// WDEV-15414
					return -1 * order;
				
				if (o2 == null || !(o2Vo.getAdmissionDateTime() != null))// WDEV-15414
					return order;
			}

			return 0;
		}
	}
	
	class VTEAssessmentConsultantComparator implements Comparator<Object>//WDEV-15414 
	{
		private int order = 1;
		public VTEAssessmentConsultantComparator()
		{
			order = 1;
		}
		public VTEAssessmentConsultantComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}

		public int compare(Object o1, Object o2)// WDEV-15414
		{
			if (o1 instanceof IVTERiskAssessment && o2 instanceof IVTERiskAssessment)
			{
				IVTERiskAssessment o1Vo = (IVTERiskAssessment) o1;
				IVTERiskAssessment o2Vo = (IVTERiskAssessment) o2;

				if (o1Vo != null && o1Vo.getPasEvent() != null && o1Vo.getPasEvent().getConsultantIsNotNull() && o1Vo.getPasEvent().getConsultant().getName() != null && o1Vo.getPasEvent().getConsultant().getName().getSurnameIsNotNull() && o2 != null && o2Vo.getPasEvent() != null && o2Vo.getPasEvent().getConsultantIsNotNull() && o2Vo.getPasEvent().getConsultant().getName() != null && o2Vo.getPasEvent().getConsultant().getName().getSurnameIsNotNull())// WDEV-15414																																																																																																												 																																																																																																						 // WDEV-18740
					return order * o1Vo.getPasEvent().getConsultant().getName().getSurname().compareToIgnoreCase(o2Vo.getPasEvent().getConsultant().getName().getSurname()); // WDEV-18740

				if (o1Vo == null || !(o1Vo.getPasEvent() != null) || !o1Vo.getPasEvent().getConsultantIsNotNull())// WDEV-15414
					return -1 * order;

				if (o2Vo == null || !(o2Vo.getPasEvent() != null) || !o2Vo.getPasEvent().getConsultantIsNotNull())// WDEV-15414
					return order;
			}
			else if (o1 instanceof VTERiskAssessmentTCIVo && o2 instanceof VTERiskAssessmentTCIVo)
			{
				VTERiskAssessmentTCIVo o1Vo = (VTERiskAssessmentTCIVo) o1;
				VTERiskAssessmentTCIVo o2Vo = (VTERiskAssessmentTCIVo) o2;

				if (o1Vo != null && o1Vo.getTCI() != null && o1Vo.getTCI().getReferringConsultantIsNotNull() && o1Vo.getTCI().getReferringConsultant().getName() != null && o1Vo.getTCI().getReferringConsultant().getName().getSurnameIsNotNull() && o2 != null && o2Vo.getTCI() != null && o2Vo.getTCI().getReferringConsultantIsNotNull() && o2Vo.getTCI().getReferringConsultant().getName() != null && o2Vo.getTCI().getReferringConsultant().getName().getSurnameIsNotNull())
					return order * o1Vo.getTCI().getReferringConsultant().getName().getSurname().compareToIgnoreCase(o2Vo.getTCI().getReferringConsultant().getName().getSurname()); // WDEV-18740

				if (o1Vo == null || !(o1Vo.getTCI() != null) || !o1Vo.getTCI().getReferringConsultantIsNotNull())
					return -1 * order;

				if (o2Vo == null || !(o2Vo.getTCI() != null) || !o2Vo.getTCI().getReferringConsultantIsNotNull())
					return order;
			}

			return 0;
		}
	}
	
	public class VTEAssessmentDOBComparator implements Comparator<Object>//WDEV-15414 
	{
		private int order = 1;
		
		public VTEAssessmentDOBComparator()
		{
			order = 1;
		}
		
		public VTEAssessmentDOBComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(Object o1, Object o2) // WDEV-15414
		{
			if (o1 instanceof IVTERiskAssessment && o2 instanceof IVTERiskAssessment)
			{
				IVTERiskAssessment o1Vo = (IVTERiskAssessment) o1;
				IVTERiskAssessment o2Vo = (IVTERiskAssessment) o2;

				if (o1Vo != null && o1Vo.getPasEvent() != null && o1Vo.getPasEvent().getPatient().getDobIsNotNull() && o2Vo != null && o2Vo.getPasEvent() != null && o2Vo.getPasEvent().getPatient().getDobIsNotNull())// WDEV-15414
					return order * o1Vo.getPasEvent().getPatient().getDob().compareTo(o2Vo.getPasEvent().getPatient().getDob());

				if (o1Vo == null || !(o1Vo.getPasEvent() != null) || !o1Vo.getPasEvent().getPatient().getDobIsNotNull())// WDEV-15414
					return -1 * order;

				if (o2Vo == null || !(o2Vo.getPasEvent() != null) || !o2Vo.getPasEvent().getPatient().getDobIsNotNull())// WDEV-15414
					return order;
			}
			else if (o1 instanceof VTERiskAssessmentTCIVo && o2 instanceof VTERiskAssessmentTCIVo)
			{
				VTERiskAssessmentTCIVo o1Vo = (VTERiskAssessmentTCIVo) o1;
				VTERiskAssessmentTCIVo o2Vo = (VTERiskAssessmentTCIVo) o2;

				if (o1Vo != null && o1Vo.getPatient().getDobIsNotNull() && o2Vo != null && o2Vo.getPatient().getDobIsNotNull())// WDEV-15414
					return order * o1Vo.getPatient().getDob().compareTo(o2Vo.getPatient().getDob());

				if (o1Vo == null || !o1Vo.getPatient().getDobIsNotNull())// WDEV-15414
					return -1 * order;

				if (o2Vo == null || !o2Vo.getPatient().getDobIsNotNull())// WDEV-15414
					return order;
			}
			return 0;
		}
	}
	
	class VTEAssessmentVTEStatusComparator implements Comparator<Object>//WDEV-15414 
	{
		private int order =1;
		public VTEAssessmentVTEStatusComparator()
		{
			order = 1;
		}
		public VTEAssessmentVTEStatusComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}

		public int compare(Object o1, Object o2)// WDEV-15414
		{
			if (o1 instanceof IVTERiskAssessment && o2 instanceof IVTERiskAssessment)
			{
				IVTERiskAssessment o1Vo = (IVTERiskAssessment) o1;
				IVTERiskAssessment o2Vo = (IVTERiskAssessment) o2;

				if (o1Vo != null && o1Vo.getVTEAssessmentStatus() != null && o2Vo != null && o2Vo.getVTEAssessmentStatus() != null)// WDEV-15414
				{
					return order * o1Vo.getVTEAssessmentStatus().getText().compareToIgnoreCase(o2Vo.getVTEAssessmentStatus().getText());
				}
				if (o1Vo == null || !(o1Vo.getVTEAssessmentStatus() != null))
					return -1 * order;
				if (o2Vo == null || !(o2Vo.getVTEAssessmentStatus() != null))
					return order;
			}
			else if (o1 instanceof VTERiskAssessmentTCIVo && o2 instanceof VTERiskAssessmentTCIVo)
			{
				VTERiskAssessmentTCIVo o1Vo = (VTERiskAssessmentTCIVo) o1;
				VTERiskAssessmentTCIVo o2Vo = (VTERiskAssessmentTCIVo) o2;

				if (o1Vo != null && o1Vo.getPatientSummaryRecord() != null && o1Vo.getPatientSummaryRecord().getPreOpVTEAssessment() != null && o1Vo.getPatientSummaryRecord().getPreOpVTEAssessment().getVTEAssessmentStatus() != null && o2Vo != null && o2Vo.getPatientSummaryRecord() != null && o2Vo.getPatientSummaryRecord().getPreOpVTEAssessment() != null && o2Vo.getPatientSummaryRecord().getPreOpVTEAssessment().getVTEAssessmentStatus() != null)
				{
					return order * o1Vo.getPatientSummaryRecord().getPreOpVTEAssessment().getVTEAssessmentStatus().getText().compareToIgnoreCase(o2Vo.getPatientSummaryRecord().getPreOpVTEAssessment().getVTEAssessmentStatus().getText());
				}

				if (o1Vo == null || o1Vo.getPatientSummaryRecord() == null || o1Vo.getPatientSummaryRecord().getPreOpVTEAssessment() == null || o1Vo.getPatientSummaryRecord().getPreOpVTEAssessment().getVTEAssessmentStatus() == null)
					return -1 * order;

				if (o2Vo == null || o2Vo.getPatientSummaryRecord() == null || o2Vo.getPatientSummaryRecord().getPreOpVTEAssessment() == null || o2Vo.getPatientSummaryRecord().getPreOpVTEAssessment().getVTEAssessmentStatus() == null)
					return order;
			}
			return 0;
		}
	}

	@Override
	protected void onQmbCurrentWardTextSubmited(String value) throws PresentationLogicException 
	{
		if(form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital");
			form.cmbHospital().setFocus();
			return;
		}
		
		listCurrentWards(form.cmbHospital().getValue(), value, true);
	}
	
	private void listCurrentWards(LocSiteLiteVo locSiteLiteVo, String wardName, boolean showOpened) 
	{
		form.qmbCurrentWard().clear();
		
		if(locSiteLiteVo == null || locSiteLiteVo.getID_Location() == null)
			return;
		
		LocationLiteVoCollection wards = domain.listWards(locSiteLiteVo, wardName);
		
		if(wards == null || wards.size() == 0)
			return;
		
		for(LocationLiteVo ward : wards)
		{
			if(ward == null)
				continue;
			
			form.qmbCurrentWard().newRow(ward, ward.getName());
		}
		
		if(showOpened)
		{
			if(wards.size() == 1)
			{
				form.qmbCurrentWard().setValue(wards.get(0));
				return;
			}
		
			form.qmbCurrentWard().showOpened();
		}
	}

	@Override
	protected void onDyngrdPatientsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if (form.dyngrdPatients().getValue() instanceof VTERiskAssessmentTCIVo)
		{
			VTERiskAssessmentTCIVo vteForTci = (VTERiskAssessmentTCIVo)form.dyngrdPatients().getValue();
			
			form.getGlobalContext().Core.setInpatientEpisodeForVTERiskAssessmentWorklistVo(null);
			
			if (vteForTci.getPatientSummaryRecord() != null)
				form.getGlobalContext().Clinical.setVTERiskAssessmentRefVo(vteForTci.getPatientSummaryRecord().getPreOpVTEAssessment() != null ? vteForTci.getPatientSummaryRecord().getPreOpVTEAssessment() : vteForTci.getPatientSummaryRecord().getInpatientVTEAssessment());
			
			selectPatient();
			
			if (vteForTci.getPatientSummaryRecord() == null)
				engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {FormMode.EDIT});
			else
				engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {FormMode.VIEW});
			
			return;
		}
			
		
		form.getLocalContext().setSelectedInstance((IVTERiskAssessment)form.dyngrdPatients().getValue());
		updateControlsState();
		
	}

	@Override
	protected void onDyngrdPatientsColumnHeaderClicked(DynamicGridColumn column)
	{
		List<Object> values = getValuesFromGrid();//WDEV-15414 
		
		if (values == null) //WDEV-18160
			return;
		
		switch((Integer)column.getIdentifier())
		{
			case COL_DOB:
				form.getLocalContext().setDOBSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getDOBSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				Collections.sort(values, new VTEAssessmentDOBComparator(form.getLocalContext().getDOBSortOrder()));//WDEV-15414 
			break;
			
			case COL_CONSULTANT:
				Collections.sort(values, new VTEAssessmentConsultantComparator(form.getLocalContext().getConsultantSortOrder()));//WDEV-15414 
				form.getLocalContext().setConsultantSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getConsultantSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			break;
			
			case COL_ADMISSION_DATE:
				form.getLocalContext().setAdmissionDateSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getAdmissionDateSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				Collections.sort(values, new VTEAssessmentAdmissionDateComparator(form.getLocalContext().getAdmissionDateSortOrder()));//WDEV-15414 
			break;
			
			case COL_VTE_STATUS:
				form.getLocalContext().setVTEStatusSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getVTEStatusSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				Collections.sort(values, new VTEAssessmentVTEStatusComparator(form.getLocalContext().getVTEStatusSortOrder()));//WDEV-15414 
			break;
		}
		
		populateScreenFromData(values);
		
	}

	@Override
	protected void onChkTciForTodayValueChanged() throws PresentationLogicException
	{
		form.GroupPatients().setValue(form.chkTciForToday().getValue() ? GroupPatientsEnumeration.None : GroupPatientsEnumeration.rdoCurrentInpatients);
		
		form.chkOver24Hours().setValue(null);
		
		form.cmbHospital().setValue(null);
		form.qmbCurrentWard().clear();
		form.qmbWard().clear();
		form.dtimFrom().setValue(null);
		form.dtimTo().setValue(null);
		form.ccConsultant().clear();
		form.cmbSpecialty().setValue(null);
		form.cmbVTEStatus().setValue(null);
		
		updateControlsState();
		
	}

	@Override
	protected void onChkOver24HoursValueChanged() throws PresentationLogicException
	{
		form.chkTciForToday().setValue(null);
		
		if (form.chkOver24Hours().getValue())
			form.GroupPatients().setValue(GroupPatientsEnumeration.rdoCurrentInpatients);
		
		updateControlsState();
		
	}

	@Override
	protected void onRadioButtonGroupPatientsValueChanged() throws PresentationLogicException
	{
		
		form.chkTciForToday().setValue(null);
		form.chkOver24Hours().setValue(null);
		updateControlsState();
		
	}
}
