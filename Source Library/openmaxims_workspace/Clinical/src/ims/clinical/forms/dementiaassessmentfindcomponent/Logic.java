//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.dementiaassessmentfindcomponent;

import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion1Enumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2DCEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2aEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2bEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2cEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion2dEnumeration;
import ims.clinical.forms.dementiaassessmentfindcomponent.GenForm.GroupQuestion3Enumeration;
import ims.clinical.vo.DementiaFindVo;
import ims.clinical.vo.DementiaVo;
import ims.clinical.vo.DementiaWorklistStatusVo;
import ims.clinical.vo.DementiaWorklistStatusVoCollection;
import ims.clinical.vo.enums.DementiaEventEnumeration;
import ims.clinicaladmin.vo.DementiaTermConfigVo;
import ims.clinicaladmin.vo.lookups.DementiaTermConfig;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.DementiaWorklistStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface functions
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	public void initialize(Boolean isDialog)
	{
		populateHelpIcon();
		
		form.getLocalContext().setisParentFormDialog(isDialog);
	}

	
	public void setValue(DementiaVo dementia)
	{
		form.getLocalContext().setselectedDementia(dementia);
		
		populateScreenFromData(dementia);
	}

	public DementiaVo getValue()
	{
		return form.getLocalContext().getselectedDementia();
	}

	
	public DementiaEventEnumeration getSelectedEvent()
	{

		return form.getLocalContext().getSelectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}


	//-------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormModeChanged()
	{
		if (FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getselectedDementia() != null && form.getLocalContext().getselectedDementia().getStepOneFind() == null)
		{
			initializeAuthoringControls();
		}
		
		updateControlsState();
	}
	

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName != null && formName.equals(form.getForms().Core.RieConfirmationDialog) && result != null && result.equals(DialogResult.OK))
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.MARK_RIE);
			form.fireCustomControlValueChanged();
		}
	}

	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{	
		form.getLocalContext().setselectedDementia(domain.getDementia(form.getLocalContext().getselectedDementia()));
		populateScreenFromData(form.getLocalContext().getselectedDementia());

		form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.NEW);
		form.fireCustomControlValueChanged();
//		form.setMode(FormMode.EDIT);
	}


	@Override
	protected void onBtnRIEClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}


	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (domain.getHcpUser() == null)
		{
			engine.showMessage("Logged in user is not HCP!");
			return;
		}
		
		if (save())
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.SAVE);
			form.fireCustomControlValueChanged();
		}
	}


	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getselectedDementiaIsNotNull() && form.getLocalContext().getselectedDementia().getStepOneFindIsNotNull())
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.CANCEL);
			form.fireCustomControlValueChanged();
		}
		else
		{
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.CLOSE);
			form.fireCustomControlValueChanged();
		}
	}
	

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.CLOSE);
		form.fireCustomControlValueChanged();
	}

	
	@Override
	protected void onRadioButtonGroupQuestion1ValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (GroupQuestion1Enumeration.rdoQuestion1Yes.equals(form.GroupQuestion1().getValue()))
		{
			clearQuestion2Controls();
			clearQuestion3Controls();
		}
		
		updateControlsState();
	}

	
	@Override
	protected void onRadioButtonGroupQuestion2aValueChanged() throws PresentationLogicException
	{
		if (GroupQuestion2DCEnumeration.rdoQuestion2DCNo.equals(form.GroupQuestion2DC().getValue()))
			clearQuestion3Controls();

		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupQuestion2bValueChanged() throws PresentationLogicException
	{
		if (GroupQuestion2DCEnumeration.rdoQuestion2DCNo.equals(form.GroupQuestion2DC().getValue()))
			clearQuestion3Controls();
		
		updateControlsState();
	}

	
	@Override
	protected void onRadioButtonGroupQuestion2cValueChanged() throws PresentationLogicException
	{
		if (GroupQuestion2DCEnumeration.rdoQuestion2DCNo.equals(form.GroupQuestion2DC().getValue()))
			clearQuestion3Controls();
		
		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupQuestion2dValueChanged() throws PresentationLogicException
	{
		if (GroupQuestion2DCEnumeration.rdoQuestion2DCNo.equals(form.GroupQuestion2DC().getValue()))
			clearQuestion3Controls();
		
		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupQuestion2DCValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupQuestion3ValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}



	//-------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	/**
	 * 
	 */
	private boolean save()
	{
		try
		{
			DementiaVo dementiaToSave = populateDataFromScreen((DementiaVo) form.getLocalContext().getselectedDementia().clone());

			String[] errors = dementiaToSave.validate(getUIErrors());
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			form.getLocalContext().setselectedDementia(domain.saveDementia(dementiaToSave,form.getForms().Clinical.DementiaAssessmentFINDComponent));//WDEV-16247

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedEvent(DementiaEventEnumeration.SOE);
			form.fireCustomControlValueChanged();
			return false;
		}
	}

	
	/**
	 * Function used to update the state of controls on screen based on context (FormMode, on-screen values)
	 */
	private void updateControlsState()
	{
		// Questions enabled/disabled state
		form.GroupQuestion1().setEnabled(form.getMode().equals(FormMode.EDIT));

		form.GroupQuestion2a().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2b().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2c().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2d().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.GroupQuestion2DC().setEnabled(false);
		
		form.GroupQuestion3().setEnabled(form.getMode().equals(FormMode.EDIT));


		// Help icon is disabled
		form.imbHelpIcon().setEnabled(false);
		
		
		// Show / hide Section 2 questions 
		showQuery2(GroupQuestion1Enumeration.rdoQuestion1No.equals(form.GroupQuestion1().getValue()) 
							|| (FormMode.VIEW.equals(form.getMode()) && GroupQuestion1Enumeration.None.equals(form.GroupQuestion1().getValue())));


		boolean section2Controls = !form.GroupQuestion2a().getValue().equals(GroupQuestion2aEnumeration.None) && !form.GroupQuestion2b().getValue().equals(GroupQuestion2bEnumeration.None) && !form.GroupQuestion2c().getValue().equals(GroupQuestion2cEnumeration.None) && !form.GroupQuestion2d().getValue().equals(GroupQuestion2dEnumeration.None);
		
		// Update Delirium Confirmed value
		if (section2Controls
				&& form.GroupQuestion2a().getValue().equals(GroupQuestion2aEnumeration.rdoQuestion2aYes) 
				&& form.GroupQuestion2b().getValue().equals(GroupQuestion2bEnumeration.rdoQuestion2bYes) 
				&& (form.GroupQuestion2c().getValue().equals(GroupQuestion2cEnumeration.rdoQuestion2cYes) 
						|| form.GroupQuestion2d().getValue().equals(GroupQuestion2dEnumeration.rdoQuestion2dYes)))
		{
			form.GroupQuestion2DC().setValue(GroupQuestion2DCEnumeration.rdoQuestion2DCYes);
		}
		else if (section2Controls)
		{
			form.GroupQuestion2DC().setValue(GroupQuestion2DCEnumeration.rdoQuestion2DCNo);
		}


		// Show / hide Section 3 questions
		showQuery3((GroupQuestion1Enumeration.rdoQuestion1No.equals(form.GroupQuestion1().getValue()) 
							&& section2Controls 
							&& GroupQuestion2DCEnumeration.rdoQuestion2DCNo.equals(form.GroupQuestion2DC().getValue()))
						// In VIEW mode if the record is not started yet
						|| (FormMode.VIEW.equals(form.getMode()) && GroupQuestion1Enumeration.None.equals(form.GroupQuestion1().getValue())));
		
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnSave().setVisible(true);
			form.btnSave().setEnabled(form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes)
										|| form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) 
										|| form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes)
										|| form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3No));
		}
		
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();


		// Dementia record
		DementiaVo dementia = form.getLocalContext().getselectedDementia();
		
		// State of EDIT button
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && hcpUser != null && dementia != null
										&& (engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA)
												|| dementia.getStepOneFind() == null						
												|| (dementia.getStepOneFind() != null && dementia.getStepOneFind().getAuthoringInformation().getAuthoringHcp() != null && dementia.getStepOneFind().getAuthoringInformation().getAuthoringHcp().equals(hcpUser))));

		// State of RIE button
		form.btnRIE().setVisible(FormMode.VIEW.equals(form.getMode()) && dementia != null && dementia.getStepOneFind() != null
										&& engine.hasRight(AppRight.CAN_EDIT_AND_RIE_DEMENTIA));

		// State of CLOSE button
		form.btnClose().setVisible(form.getMode().equals(FormMode.VIEW) && Boolean.TRUE.equals(form.getLocalContext().getisParentFormDialog()));
	}
	

	private void showQuery2(Boolean hideshow)
	{
		form.lblCAMa().setVisible(hideshow);
		form.GroupQuestion2a().setVisible(hideshow);
		form.lblCAMb().setVisible(hideshow);
		form.GroupQuestion2b().setVisible(hideshow);
		form.lblCAMc().setVisible(hideshow);
		form.GroupQuestion2c().setVisible(hideshow);
		form.lblCAMd().setVisible(hideshow);
		form.GroupQuestion2d().setVisible(hideshow);
		form.lblDeliriumConfirmed().setVisible(hideshow);
		form.GroupQuestion2DC().setVisible(hideshow);
		form.pnlCAMSScreening().setVisible(hideshow);
		form.hzlQuestion2().setVisible(hideshow);
		form.imbHelpIcon().setVisible(hideshow);	//wdev-16420
	}
	

	private void showQuery3(Boolean hideshow)
	{
		form.lblQ31().setVisible(hideshow);
		form.lblQ32().setVisible(hideshow);
		form.lblQ33().setVisible(hideshow);
		form.GroupQuestion3().setVisible(hideshow);
		form.hzlQuestion3().setVisible(hideshow);
	}
	

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form data exchange functions
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------


	private void initializeAuthoringControls()
	{
		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();

		voAuthoring.setAuthoringDateTime(new DateTime());
		if (domain.getHcpUser() != null)
			voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());

		populateAuthoringControls(voAuthoring);
	}


	/**
	 *	Function used to clear the screen
	 */
	private void clearAllControls()
	{
		clearAuthoringInfoControls();
		
		form.GroupQuestion1().setValue(null);
		
		clearQuestion2Controls();
		clearQuestion3Controls();
	}

	/**
	 * Clear Authoring Information labels
	 */
	private void clearAuthoringInfoControls()
	{
		form.lblAuthoringHcpValue().setValue(null);
		form.lblAuthoringDateTimeValue().setValue(null);
	}
	
	/**
	 * Clear Authoring Information labels
	 */
	private void clearQuestion2Controls()
	{
		form.GroupQuestion2a().setValue(null);
		form.GroupQuestion2b().setValue(null);
		form.GroupQuestion2c().setValue(null);
		form.GroupQuestion2d().setValue(null);
		form.GroupQuestion2DC().setValue(null);
	}

	/**
	 * Clear Authoring Information labels
	 */
	private void clearQuestion3Controls()
	{
		form.GroupQuestion3().setValue(null);
	}

	
	/**
	 * 
	 * @param dementia
	 */
	private void populateScreenFromData(DementiaVo dementia)
	{
		clearAllControls();
		
		if (dementia == null || dementia.getStepOneFind() == null)
			return;
		
		// Set Authoring information value
		populateAuthoringControls(dementia.getStepOneFind().getAuthoringInformation());
		
		// Set Question 1 value
		boolean answerQuestion1 = YesNo.YES.equals(dementia.getStepOneFind().getHasFormalDiagnosisOfDementia());
		form.GroupQuestion1().setValue(answerQuestion1 ? GroupQuestion1Enumeration.rdoQuestion1Yes : GroupQuestion1Enumeration.rdoQuestion1No);
		
		// Set Query 2 value
		if (!answerQuestion1)
		{
			form.GroupQuestion2a().setValue(YesNo.YES.equals(dementia.getStepOneFind().getCAMSAcuteOnset()) ? GroupQuestion2aEnumeration.rdoQuestion2aYes : GroupQuestion2aEnumeration.rdoQuestion2aNo);
			form.GroupQuestion2b().setValue(YesNo.YES.equals(dementia.getStepOneFind().getCAMSInattention()) ? GroupQuestion2bEnumeration.rdoQuestion2bYes : GroupQuestion2bEnumeration.rdoQuestion2bNo);
			form.GroupQuestion2c().setValue(YesNo.YES.equals(dementia.getStepOneFind().getCAMSDisorganisedThinking()) ? GroupQuestion2cEnumeration.rdoQuestion2cYes : GroupQuestion2cEnumeration.rdoQuestion2cNo);
			form.GroupQuestion2d().setValue(YesNo.YES.equals(dementia.getStepOneFind().getCAMSAlteredLevel()) ? GroupQuestion2dEnumeration.rdoQuestion2dYes : GroupQuestion2dEnumeration.rdoQuestion2dNo);
			
			boolean answerQuestionDC = YesNo.YES.equals(dementia.getStepOneFind().getDeliriumConfirmed());
			form.GroupQuestion2DC().setValue(answerQuestionDC ? GroupQuestion2DCEnumeration.rdoQuestion2DCYes : GroupQuestion2DCEnumeration.rdoQuestion2DCNo);
		
			// Set Query 3 value
			if (!answerQuestionDC)
			{
				form.GroupQuestion3().setValue(YesNo.YES.equals(dementia.getStepOneFind().getAwarenessQuestion()) ? GroupQuestion3Enumeration.rdoQuestion3Yes : GroupQuestion3Enumeration.rdoQuestion3No);
			}
		}
	}
	
	
	/**
	 *	Function used to populate Authoring information from Dementia -> Step One record
	 * 	@param authoring - Authoring Information to be populated
	 */
	private void populateAuthoringControls(AuthoringInformationVo authoring)
	{
		clearAuthoringInfoControls();

		form.getLocalContext().setAuthoringInfo(authoring);

		if (authoring == null)
			return;

		
		form.lblAuthoringDateTimeValue().setValue(authoring.getAuthoringDateTime().toString());

		if (authoring.getAuthoringHcpIsNotNull())
		{
			if (authoring.getAuthoringHcp().getIHcpName().length() > 65)
			{
				form.lblAuthoringHcpValue().setTooltip(authoring.getAuthoringHcp().getIHcpName());
				form.lblAuthoringHcpValue().setValue(authoring.getAuthoringHcp().getIHcpName().substring(0, 65));
			}
			else
				form.lblAuthoringHcpValue().setValue(authoring.getAuthoringHcp().getIHcpName());
		}
	}


	private String[] getUIErrors()
	{
		// TODO Auto-generated method stub
		return null;
	}

	private DementiaVo populateDataFromScreen(DementiaVo dementiaVo)
	{
		DementiaFindVo dementiaFindVo = populateDataFromStep1Tab(dementiaVo.getStepOneFind());
		dementiaVo.setStepOneFind(dementiaFindVo);
		DementiaWorklistStatusVo tempCurrentStatus = null;
		// temporary used to set status to a specific type
		/*
		 * tempCurrentStatus = populateStatus(DementiaWorklistStatus.STEP_ONE_FIND_OUTSTANDING,form.getLocalContext().getAuthoringInfo());
		 * 
		 * dementiaVo.setCurrentWorklistStatus(tempCurrentStatus);
		 * 
		 * DementiaWorklistStatusVoCollection tempStatusHistory = dementiaVo.getHistoricalWorklistStatus(); tempStatusHistory.add(tempCurrentStatus); dementiaVo.setHistoricalWorklistStatus(tempStatusHistory);
		 */
		dementiaVo.setDementiaConfirmed(form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes));
		dementiaVo.setDeliriumConfirmed(form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) || (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) && form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes)));

		if (dementiaFindVo != null)
		{
			AuthoringInformationVo voAuthor = new AuthoringInformationVo();
			voAuthor.setAuthoringDateTime(new DateTime());
			if (domain.getHcpLiteUser() != null)
				voAuthor.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());

			if (form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes) || (form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1No) && form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo) && form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3No)))
			{
				if (dementiaVo.getCurrentWorklistStatusIsNotNull() && !DementiaWorklistStatus.COMPLETED.equals(dementiaVo.getCurrentWorklistStatus().getStatus()))
				{
					tempCurrentStatus = populateStatus(DementiaWorklistStatus.COMPLETED, voAuthor);
					//wdev-18784
					if( dementiaVo.getPatientIsNotNull())
					{
						dementiaVo.getPatient().setDementiaWorklistStatus(null);
						dementiaVo.getPatient().setDementiaBreachDateTime(null);
						
					}
				}
			}
			else if (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes) || (form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCNo) && form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes)))
			{
				if (dementiaVo.getCurrentWorklistStatusIsNotNull() && !DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING.equals(dementiaVo.getCurrentWorklistStatus().getStatus()) && dementiaVo.getStepTwoAssess()==null)
				{
					tempCurrentStatus = populateStatus(DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING, voAuthor);
					//wdev-18784
					if( dementiaVo.getPatientIsNotNull())
					{
						dementiaVo.getPatient().setDementiaWorklistStatus(DementiaWorklistStatus.STEP_TWO_ASSESS_INVESTIGATE_OUTSTANDING);
						dementiaVo.getPatient().setDementiaBreachDateTime(dementiaVo.getBreachDateTime());
						
					}
				}
			}

			if (tempCurrentStatus != null)
			{
				dementiaVo.setCurrentWorklistStatus(tempCurrentStatus);

				DementiaWorklistStatusVoCollection tempStatusHistory = dementiaVo.getHistoricalWorklistStatus();
				tempStatusHistory.add(tempCurrentStatus);
				dementiaVo.setHistoricalWorklistStatus(tempStatusHistory);
			}

		}
		return dementiaVo;
	}

	private DementiaWorklistStatusVo populateStatus(DementiaWorklistStatus status, AuthoringInformationVo authoringInfo)
	{
		DementiaWorklistStatusVo statusRecord = new DementiaWorklistStatusVo();

		statusRecord.setStatus(status);
		statusRecord.setAuthoringInformation(authoringInfo);

		return statusRecord;
	}

	private DementiaFindVo populateDataFromStep1Tab(DementiaFindVo stepOneFindVo)
	{
		if (stepOneFindVo == null)
			stepOneFindVo = new DementiaFindVo();
		else
			stepOneFindVo = (DementiaFindVo) stepOneFindVo.clone();

		if (stepOneFindVo.getAuthoringInformation() == null)
		{
			stepOneFindVo.setAuthoringInformation(form.getLocalContext().getAuthoringInfo());
		}

		boolean answerQuest1 = form.GroupQuestion1().getValue().equals(GroupQuestion1Enumeration.rdoQuestion1Yes);
		stepOneFindVo.setHasFormalDiagnosisOfDementia(form.GroupQuestion1().getValue() != null ? (answerQuest1 ? YesNo.YES : YesNo.NO) : null);

		stepOneFindVo.setCAMSAcuteOnset(answerQuest1 ? null : (form.GroupQuestion2a().getValue().equals(GroupQuestion2aEnumeration.rdoQuestion2aYes) ? YesNo.YES : YesNo.NO));

		stepOneFindVo.setCAMSInattention(answerQuest1 ? null : (form.GroupQuestion2b().getValue().equals(GroupQuestion2bEnumeration.rdoQuestion2bYes) ? YesNo.YES : YesNo.NO));
		stepOneFindVo.setCAMSDisorganisedThinking(answerQuest1 ? null : (form.GroupQuestion2c().getValue().equals(GroupQuestion2cEnumeration.rdoQuestion2cYes) ? YesNo.YES : YesNo.NO));
		stepOneFindVo.setCAMSAlteredLevel(answerQuest1 ? null : (form.GroupQuestion2d().getValue().equals(GroupQuestion2dEnumeration.rdoQuestion2dYes) ? YesNo.YES : YesNo.NO));

		boolean answerQuestDC = form.GroupQuestion2DC().getValue().equals(GroupQuestion2DCEnumeration.rdoQuestion2DCYes);
		stepOneFindVo.setDeliriumConfirmed(answerQuest1 ? null : (answerQuestDC ? YesNo.YES : YesNo.NO));

		stepOneFindVo.setAwarenessQuestion(answerQuestDC ? null : (form.GroupQuestion3().getValue().equals(GroupQuestion3Enumeration.rdoQuestion3Yes) ? YesNo.YES : YesNo.NO));

		return stepOneFindVo;
	}



	private void populateHelpIcon()
	{
		DementiaTermConfigVo voHint = domain.getHintByLookupID(DementiaTermConfig.FIND_FORM_HELP);
		if (voHint != null)
			form.imbHelpIcon().setTooltip(voHint.getHelpText());
	}

}
