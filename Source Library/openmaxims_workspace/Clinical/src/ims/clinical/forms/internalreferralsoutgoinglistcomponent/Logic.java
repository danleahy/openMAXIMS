//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.internalreferralsoutgoinglistcomponent;

import ims.clinical.vo.ClinicalReferralsForIncomingReferralListVo;
import ims.clinical.vo.ClinicalReferralsForIncomingReferralListVoCollection;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVo;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVoCollection;
import ims.clinical.vo.OutgoingReferralListSearchCriteriaVo;
import ims.clinical.vo.ServiceConfigIntReferralForIncomingListVoCollection;
import ims.clinical.vo.ServiceForIncomingReferralListVo;
import ims.clinical.vo.ServiceForIncomingReferralListVoCollection;
import ims.clinical.vo.enums.InternalReferralGridComponentAction;
import ims.clinical.vo.lookups.InternalReferralsGridColumn;
import ims.clinicaladmin.vo.InternalReferralSettingsVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.InternalReferralStatusAction;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();

		if (Boolean.TRUE.equals(form.getLocalContext().getSearchAllOutgoingReferrals()))
		{
			form.getGlobalContext().Clinical.setOutgoingReferralListSearchCriteria(null);
		}
		else
			form.getGlobalContext().Clinical.setOutgoingReferralImadeListSearchCriteria(null);

		form.getGlobalContext().Core.setPatientShort(null);

	}

	private void clearScreen()
	{
		form.chkAwaitingRefLetter().setValue(null);
		form.chkAwaitingSignOff().setValue(null);
		form.chkReqFurtherInfo().setValue(null);
		form.chkAwaitingAcceptance().setValue(null);
		form.chkReqSecondOpinion().setValue(null);

		form.chkAccepted().setValue(null);
		form.chkReqAppt().setValue(null);
		form.chkApptBooked().setValue(null);

		form.chkRejectionAcknowledged().setValue(null);
		form.chkRejectionNotAcknowledged().setValue(null);

		form.chkCompleted().setValue(null);
		form.chkInpatient().setValue(null);
		form.chkOutpatient().setValue(null);

		form.qmbServiceBy().clear();
		form.qmbServiceTo().clear();
		
		if (form.qmbHcpBy().isEnabled())
		{
			form.qmbHcpBy().clear();
		}
		
		form.qmbHcpTo().clear();

		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);

		form.ccReferrals().setValue(null);
		
		form.lblServicesList().setValue("");
		form.getGlobalContext().Clinical.setServiceSearchList(null);

	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch(true);
	}

	private void doSearch(boolean fromButton)
	{
		if (search(fromButton))
		{
			if (Boolean.TRUE.equals(form.getLocalContext().getSearchAllOutgoingReferrals()))
				form.getGlobalContext().Clinical.setOutgoingReferralListSearchCriteria(populateSearchCriteriaFromScreen());
			else
				form.getGlobalContext().Clinical.setOutgoingReferralImadeListSearchCriteria(populateSearchCriteriaFromScreen());
		}
	}

	private OutgoingReferralListSearchCriteriaVo populateSearchCriteriaFromScreen()
	{
		OutgoingReferralListSearchCriteriaVo searchCriteria = new OutgoingReferralListSearchCriteriaVo();

		searchCriteria.setAwaitingReferralLetter(form.chkAwaitingRefLetter().getValue());
		searchCriteria.setAwaitingSignOff(form.chkAwaitingSignOff().getValue());
		searchCriteria.setRequiringFurtherInfo(form.chkReqFurtherInfo().getValue());
		searchCriteria.setAwaitingAcceptance(form.chkAwaitingAcceptance().getValue());
		searchCriteria.setRequiresSecondOpinion(form.chkReqSecondOpinion().getValue());

		searchCriteria.setAccepted(form.chkAccepted().getValue());
		searchCriteria.setRequiresAppt(form.chkReqAppt().getValue());
		searchCriteria.setAppointmentBooked(form.chkApptBooked().getValue());

		searchCriteria.setRejectionAcknowledged(form.chkRejectionAcknowledged().getValue());
		searchCriteria.setRejectionNotAcknowledged(form.chkRejectionNotAcknowledged().getValue());

		searchCriteria.setCompleted(form.chkCompleted().getValue());

		searchCriteria.setInpatient(form.chkInpatient().getValue());
		searchCriteria.setOutpatient(form.chkOutpatient().getValue());

		searchCriteria.setServiceBy(form.qmbServiceBy().getValue());
		searchCriteria.setServicesByCollection(form.getGlobalContext().Clinical.getServiceSearchList());
		searchCriteria.setHcpBy(form.qmbHcpBy().getValue());
		
		searchCriteria.setServiceTo(form.qmbServiceTo().getValue());
		searchCriteria.setHcpTo(form.qmbHcpTo().getValue());
		

		searchCriteria.setDateFrom(form.dteFrom().getValue());
		searchCriteria.setDateTo(form.dteTo().getValue());

		return searchCriteria;
	}

	private boolean search(boolean fromButton)
	{
		if (fromButton)
			form.ccReferrals().setValue(null);
		
		if (isSearchCriteriaValid())
		{
			ClinicalReferralsForIncomingReferralListVoCollection referrals = domain.listClinicalReferrals(populateSearchCriteriaFromScreen());
			populateScreenFromData(referrals);

			if (referrals == null || referrals.size() == 0)
			{
				engine.showMessage("No records found.");
			}

			return true;
		}
		else
			form.ccReferrals().setValue(null);

		return false;
	}

	private void populateScreenFromData(ClinicalReferralsForIncomingReferralListVoCollection referrals)
	{

		if (referrals == null)
			return;
		
		form.ccReferrals().setValue(referrals.sort(new InternalReferralsInpatientUrgentDateComparator(form.qmbServiceBy().getValue() != null || (form.getGlobalContext().Clinical.getServiceSearchList() != null && form.getGlobalContext().Clinical.getServiceSearchList().size() > 0))));

	}

	private boolean isSearchCriteriaValid()
	{
		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();

		ArrayList<String> listOfErrors = new ArrayList<String>();
		
		if (dateFrom == null )
		{
			listOfErrors.add("Date From is mandatory");
		}
		
		if (dateTo == null )
		{
			listOfErrors.add("Date To is mandatory");
		}
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			listOfErrors.add("Referral Date From cannot be greater than Referral Date To");
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);
		
		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onQmbHcpToTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbHcpTo().clear();
		
		if (value == null || value.length() == 0)
			return;

		HcpLiteVoCollection hcpColl = domain.listHCPs(value);

		if (hcpColl != null)
		{
			for (int i = 0; i < hcpColl.size(); i++)
			{
				form.qmbHcpTo().newRow(hcpColl.get(i), hcpColl.get(i).getMos().getIMosName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbHcpTo().showOpened();
	}

	@Override
	protected void onQmbHCPByTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbHcpBy().clear();
		
		if (value == null || value.length() == 0)
			return;

		HcpLiteVoCollection hcpColl = domain.listHCPs(value);

		if (hcpColl != null)
		{
			for (int i = 0; i < hcpColl.size(); i++)
			{
				form.qmbHcpBy().newRow(hcpColl.get(i), hcpColl.get(i).getMos().getIMosName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbHcpBy().showOpened();
	}

	public void initialise(Boolean allReferrals, List<InternalReferralStatusAction> deniedActions)
	{
		form.getLocalContext().setSearchAllOutgoingReferrals(allReferrals);
		initialiseForm(deniedActions);
		open();

	}

	private void open()
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getSearchAllOutgoingReferrals()))
		{
			if (form.getGlobalContext().Clinical.getOutgoingReferralListSearchCriteria() != null)
			{
				populateSearchCriteriaFromData(form.getGlobalContext().Clinical.getOutgoingReferralListSearchCriteria());

				if (search(false))
				{
					form.getGlobalContext().Clinical.setOutgoingReferralListSearchCriteria(populateSearchCriteriaFromScreen());
				}
			}
		}
		else if (form.getGlobalContext().Clinical.getOutgoingReferralImadeListSearchCriteria() != null)
		{
			populateSearchCriteriaFromData(form.getGlobalContext().Clinical.getOutgoingReferralImadeListSearchCriteria());

			if (search(false))
			{
				form.getGlobalContext().Clinical.setOutgoingReferralImadeListSearchCriteria(populateSearchCriteriaFromScreen());
			}
		}
		else
			doSearch(false);
	}

	private void populateSearchCriteriaFromData(OutgoingReferralListSearchCriteriaVo searchCriteria)
	{
		form.chkAwaitingRefLetter().setValue(searchCriteria.getAwaitingReferralLetter());
		form.chkAwaitingSignOff().setValue(searchCriteria.getAwaitingSignOff());
		form.chkReqFurtherInfo().setValue(searchCriteria.getRequiringFurtherInfo());
		form.chkAwaitingAcceptance().setValue(searchCriteria.getAwaitingAcceptance());
		form.chkReqSecondOpinion().setValue(searchCriteria.getRequiresSecondOpinion());

		form.chkAccepted().setValue(searchCriteria.getAccepted());
		form.chkReqAppt().setValue(searchCriteria.getRequiresAppt());
		form.chkApptBooked().setValue(searchCriteria.getAppointmentBooked());

		form.chkRejectionAcknowledged().setValue(searchCriteria.getRejectionAcknowledged());
		form.chkRejectionNotAcknowledged().setValue(searchCriteria.getRejectionNotAcknowledged());

		form.chkInpatient().setValue(searchCriteria.getInpatient());
		form.chkOutpatient().setValue(searchCriteria.getOutpatient());

		if (searchCriteria.getServiceBy() != null)
		{
			form.qmbServiceBy().newRow(searchCriteria.getServiceBy(), searchCriteria.getServiceBy().getServiceName());
			form.qmbServiceBy().setValue(searchCriteria.getServiceBy());
		}
		
		if (searchCriteria.getServiceTo() != null && searchCriteria.getServiceTo().getService() != null)
		{
			form.qmbServiceTo().newRow(searchCriteria.getServiceTo(), searchCriteria.getServiceTo().getService().getServiceName());
			form.qmbServiceTo().setValue(searchCriteria.getServiceTo());
		}

		if (searchCriteria.getHcpTo() != null)
		{
			form.qmbHcpTo().newRow(searchCriteria.getHcpTo(), searchCriteria.getHcpTo().getMos().getIMosName());
			form.qmbHcpTo().setValue(searchCriteria.getHcpTo());
		}

		if (searchCriteria.getHcpBy() != null)
		{
			form.qmbHcpBy().newRow(searchCriteria.getHcpBy(), searchCriteria.getHcpBy().getMos().getIMosName());
			form.qmbHcpBy().setValue(searchCriteria.getHcpBy());
		}

		form.dteFrom().setValue(searchCriteria.getDateFrom());
		form.dteTo().setValue(searchCriteria.getDateTo());
		
		populateServiceListLabel(searchCriteria.getServicesByCollection());

	}

	private void initialiseForm(List<InternalReferralStatusAction> deniedActions)
	{
		setDefaults();
		
		form.ccReferrals().initialise(null, createIncomingReferralWorklistColumns(), deniedActions, getAllowedActions());
		
		updateControlsState();

	}

	private void setDefaults()
	{
		form.chkAwaitingRefLetter().setValue(Boolean.TRUE);
		form.chkAwaitingSignOff().setValue(Boolean.TRUE);
		form.chkReqFurtherInfo().setValue(Boolean.TRUE);

		form.chkInpatient().setValue(Boolean.TRUE);
		form.chkOutpatient().setValue(Boolean.TRUE);
		form.chkRejectionNotAcknowledged().setValue(Boolean.TRUE);

		if (!Boolean.TRUE.equals(form.getLocalContext().getSearchAllOutgoingReferrals()))
		{
			HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();

			if (hcpUser != null)
			{
				form.qmbHcpBy().newRow(hcpUser, hcpUser.getMos().getIMosName());
				form.qmbHcpBy().setValue(hcpUser);
				
				form.qmbHcpBy().setEnabled(Boolean.FALSE);
			}
		}
		else
			form.getGlobalContext().Clinical.setServiceSearchList(null);
		
		InternalReferralSettingsVo referralSettings = domain.getInternalReferralsSettings();
		
		if (referralSettings != null && referralSettings.getSearchNumberOfDays() != null)
		{
			form.dteFrom().setValue(new Date().addDay( - referralSettings.getSearchNumberOfDays()));
		}

		form.dteTo().setValue(new Date());
	}
	
	private List<InternalReferralStatusAction> getAllowedActions() 
	{
		List<InternalReferralStatusAction> allowedActions = new ArrayList<InternalReferralStatusAction>();
		
		/*
		allowedActions.add(InternalReferralStatusAction.SIGN_OFF);
		allowedActions.add(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION);
		allowedActions.add(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION);
		allowedActions.add(InternalReferralStatusAction.APPOINTMENT_BOOKED);
		allowedActions.add(InternalReferralStatusAction.VIEW);
		allowedActions.add(InternalReferralStatusAction.EDIT);
		*/
		return allowedActions;
	}

	private void updateControlsState()
	{
		boolean showServiceByControls = Boolean.TRUE.equals(form.getLocalContext().getSearchAllOutgoingReferrals());
		
		form.lblServiceBy().setVisible(showServiceByControls);
		form.qmbServiceBy().setVisible(showServiceByControls);
		form.imbServiceBy().setVisible(showServiceByControls);
		form.lblServicesList().setVisible(showServiceByControls && form.getGlobalContext().Clinical.getServiceSearchList() != null);
		
	}

	private InternalReferralsGridColumnDetailsVoCollection createIncomingReferralWorklistColumns()
	{
		InternalReferralsGridColumnDetailsVoCollection columns = new InternalReferralsGridColumnDetailsVoCollection();

		InternalReferralsGridColumnDetailsVo referralDate = new InternalReferralsGridColumnDetailsVo();
		referralDate.setColumn(InternalReferralsGridColumn.REFERRAL_DATE);
		referralDate.setWidth(68);
		columns.add(referralDate);

		InternalReferralsGridColumnDetailsVo referringHcp = new InternalReferralsGridColumnDetailsVo();
		referringHcp.setColumn(InternalReferralsGridColumn.REFERRIING_HCP);
		referringHcp.setWidth(90);
		columns.add(referringHcp);

		InternalReferralsGridColumnDetailsVo urgent = new InternalReferralsGridColumnDetailsVo();
		urgent.setColumn(InternalReferralsGridColumn.URGENT);
		urgent.setWidth(40);
		columns.add(urgent);

		InternalReferralsGridColumnDetailsVo iPOrOP = new InternalReferralsGridColumnDetailsVo();
		iPOrOP.setColumn(InternalReferralsGridColumn.IP_OR_OP);
		iPOrOP.setWidth(40);
		columns.add(iPOrOP);

		InternalReferralsGridColumnDetailsVo patientId = new InternalReferralsGridColumnDetailsVo();
		patientId.setColumn(InternalReferralsGridColumn.PATIENT_ID);
		patientId.setWidth(80);
		columns.add(patientId);

		InternalReferralsGridColumnDetailsVo patientName = new InternalReferralsGridColumnDetailsVo();
		patientName.setColumn(InternalReferralsGridColumn.PATIENT_NAME);
		patientName.setWidth(100);
		columns.add(patientName);

		InternalReferralsGridColumnDetailsVo dob = new InternalReferralsGridColumnDetailsVo();
		dob.setColumn(InternalReferralsGridColumn.DOB);
		dob.setWidth(65);
		columns.add(dob);

		InternalReferralsGridColumnDetailsVo service = new InternalReferralsGridColumnDetailsVo();
		service.setColumn(InternalReferralsGridColumn.SERVICE);
		service.setWidth(100);
		columns.add(service);

		InternalReferralsGridColumnDetailsVo refTo = new InternalReferralsGridColumnDetailsVo();
		refTo.setColumn(InternalReferralsGridColumn.REFERRAL_TO);
		refTo.setWidth(90);
		columns.add(refTo);
		
		InternalReferralsGridColumnDetailsVo apptReq = new InternalReferralsGridColumnDetailsVo();
		apptReq.setColumn(InternalReferralsGridColumn.APPOINTMENT_STATUS);
		apptReq.setWidth(23);
		columns.add(apptReq);

		InternalReferralsGridColumnDetailsVo status = new InternalReferralsGridColumnDetailsVo();
		status.setColumn(InternalReferralsGridColumn.STATUS);
		status.setWidth(-1);
		columns.add(status);

		return columns;
	}

	@Override
	protected void onCcReferralsValueChanged() throws PresentationLogicException
	{
		if (InternalReferralGridComponentAction.REFRESH.equals(form.ccReferrals().getAction()))
			open();

	}

	@Override
	protected void onQmbServiceToTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbServiceTo().clear();
		
		if (value == null || value.length() == 0)
			return;

		ServiceConfigIntReferralForIncomingListVoCollection services = domain.listReferralServicesConfig(value);

		if (services != null)
		{
			for (int i = 0; i < services.size(); i++)
			{
				if (services.get(i) != null && services.get(i).getService() != null)
					form.qmbServiceTo().newRow(services.get(i), services.get(i).getService().getServiceName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbServiceTo().showOpened();
	}

	@Override
	protected void onQmbServiceByTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbServiceBy().clear();
		form.getGlobalContext().Clinical.setServiceSearchList(null);
		
		if (value == null || value.length() == 0)
			return;

		ServiceLiteVoCollection services = domain.listServices(value);

		if (services != null)
		{
			for (int i = 0; i < services.size(); i++)
			{
				if (services.get(i) != null)
					form.qmbServiceBy().newRow(services.get(i), services.get(i).getServiceName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbServiceBy().showOpened();
		
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Clinical.InternalReferralsServicesSearch.equals(formName) && DialogResult.OK.equals(result))
		{
			form.qmbServiceBy().clear();
			populateServiceListLabel(form.getGlobalContext().Clinical.getServiceSearchList());
			updateControlsState();
		}
		
	}

	private void populateServiceListLabel(ServiceForIncomingReferralListVoCollection servicesColl)
	{
		if (servicesColl == null)
			return;
		
		form.getGlobalContext().Clinical.setServiceSearchList(servicesColl);
		
		StringBuffer services = new StringBuffer();
		
		for (int i = 0; i < servicesColl.size(); i++)
		{
			ServiceForIncomingReferralListVo service = servicesColl.get(i);
			services.append(i < servicesColl.size() - 1 ? service.getServiceName() + ", " :  service.getServiceName());
		}
		
		services.insert(0, "Service(s): ");
		
		form.lblServicesList().setTooltip(services.toString());
		form.lblServicesList().setValue(services.toString().length() > 125 ? services.toString().substring(0, 125) + "..." : services.toString());
		
		updateControlsState(); 
	}

	@Override
	protected void onImbServiceByClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.InternalReferralsServicesSearch);
		
	}

	public class InternalReferralsInpatientUrgentDateComparator implements Comparator<ClinicalReferralsForIncomingReferralListVo>
	{
		private boolean bOrderByReferralType;
		
		public InternalReferralsInpatientUrgentDateComparator()
		{
			bOrderByReferralType = false;
		}
		
		public InternalReferralsInpatientUrgentDateComparator(boolean bOrderByReferralType)
		{
			this.bOrderByReferralType = bOrderByReferralType;
		}
		
		public int compare(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2)
		{
			if(bOrderByReferralType)
			{
				if(o1 != null && o1.getReferralTypeText() != null && o2 != null && o2.getReferralTypeText() != null)
				{
					int orderByReferralType = o1.getReferralTypeText().compareTo(o2.getReferralTypeText());
					
					if(orderByReferralType == 0)
					{
						return compareByUrgent(o1, o2);
					}
					
					return orderByReferralType;
				}
				
				if((o1 == null || o1.getReferralTypeText() == null) && (o2 == null || o2.getReferralTypeText() == null))
					return compareByUrgent(o1, o2);
				
				if(o1 == null || o1.getReferralTypeText() == null) 
					return 1;
				
				if(o2 == null || o2.getReferralTypeText() == null) 
					return -1;	
			}
			else
			{
				return compareByUrgent(o1, o2);
			}
			
			return 0;
		}

		private int compareByUrgent(ClinicalReferralsForIncomingReferralListVo o1,	ClinicalReferralsForIncomingReferralListVo o2) 
		{
			if(o1 != null && o1.getUrgentReferral() != null && o2 != null && o2.getUrgentReferral() != null)
			{
				int orderByUrgent = -1 * o1.getUrgentReferral().compareTo(o2.getUrgentReferral());
				
				if(orderByUrgent == 0)
				{
					return compareByReferralDate(o1, o2);
				}
				
				return orderByUrgent;
			}
			
			if((o1 == null || o1.getUrgentReferral() == null) && (o2 == null || o2.getUrgentReferral() == null))
				return compareByReferralDate(o1, o2);
			
			if(o1 == null || o1.getUrgentReferral() == null) 
				return 1;
			
			if(o2 == null || o2.getUrgentReferral() == null) 
				return -1;
			
			return 0;
		}

		private int compareByReferralDate(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2) 
		{
			if(o1 != null && o1.getDateDecisionToRefer() != null && o2 != null && o2.getDateDecisionToRefer() != null)
			{
				int orderByReferralDate = -1 * o1.getDateDecisionToRefer().compareTo(o2.getDateDecisionToRefer());
				
				if(orderByReferralDate == 0)
				{
					return compareByReferralName(o1, o2);
				}
				
				return orderByReferralDate;
			}
			
			if((o1 == null || o1.getDateDecisionToRefer() == null) && (o2 == null || o2.getDateDecisionToRefer() == null))
				return compareByReferralName(o1, o2);
			
			if(o1 == null || o1.getDateDecisionToRefer() == null) 
				return 1;
			
			if(o2 == null || o2.getDateDecisionToRefer() == null) 
				return -1;
			
			return 0;
		}

		private int compareByReferralName(ClinicalReferralsForIncomingReferralListVo o1, ClinicalReferralsForIncomingReferralListVo o2) 
		{
			if(o1 != null && o1.getPatient().getName() != null && o2 != null && o2.getPatient().getName() != null)
			{
				return o1.getPatient().getName().compareTo(o2.getPatient().getName());
			}
			
			if(o1 == null || o1.getPatient().getName() == null) 
				return 1;
			
			if(o2 == null || o2.getPatient().getName() == null) 
				return -1;
			
			return 0;
		}
	}
	
}
