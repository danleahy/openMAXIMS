//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.vteremovedeclinereasondialog;

import ims.clinical.vo.VTERemoveDeclineReasonVo;
import ims.clinical.vo.lookups.VTEAssessmentStatusReasonCollection;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null && args.length > 0 && (args[0] instanceof String))
		{
			engine.setCaption((String) args[0]);
		}
		
		if(args != null && args.length > 1 && (args[1] instanceof Boolean))
		{
			form.getLocalContext().setShowAuthoringDetails((Boolean) args[1]);
		}
		else
			form.getLocalContext().setShowAuthoringDetails(Boolean.TRUE);
		
		initialise();
		open();
		
	}

	private void initialise()
	{
		form.setccAuthoringInfoVisible(Boolean.TRUE.equals(form.getLocalContext().getShowAuthoringDetails()));
		
		form.lblReason().setValue(Boolean.TRUE.equals(form.getLocalContext().getShowAuthoringDetails()) ? "Reason declined: " : "Reason for removal: ");
		
		form.ccAuthoringInfo().initializeComponent();
		form.ccAuthoringInfo().setEnabledAuthoringHCP(false);
		form.ccAuthoringInfo().setEnabledDateTime(false);
		
		form.btnOK().setImage(form.getImages().Core.Tick);
		form.btnCancel().setImage(form.getImages().Core.Remove);
		
	}

	private void open()
	{
		populateReasonCombo();
		
	}

	private void populateReasonCombo()
	{
		form.cmbReason().clear();
		
		
		VTEAssessmentStatusReasonCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getVTEAssessmentStatusReason(this.domain.getLookupService());
		
		for(int i = 0; i < lookupCollection.size(); i++)
		{
			if (lookupCollection.get(i) == null  || lookupCollection.get(i).getID() < 0)
				continue;
			
			form.cmbReason().newRow(lookupCollection.get(i), lookupCollection.get(i).getText(), lookupCollection.get(i).getImage(), lookupCollection.get(i).getTextColor());
		}
		
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbReason().getValue() == null)
		{
			engine.showErrors(new String[]{("Reason is mandatory.")});
			return;
		}
		
		VTERemoveDeclineReasonVo reason = new VTERemoveDeclineReasonVo();
		reason.setReason(form.cmbReason().getValue());
		
		form.getGlobalContext().Clinical.setVTERemoveDeclineReason(reason);
		
		engine.close(DialogResult.OK);
	}
}
