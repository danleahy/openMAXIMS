//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargediagnosisetccomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnCurrentDiagnosesContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class grdComplicationsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdComplicationsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColDiagnosisReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColDiagnosisReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColDiagnosisOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColDiagnosis(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getColDiagnosis()
			{
				return (String)super.row.get(0);
			}
			public void setColDiagnosis(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColDiagnosisTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColAuthoringHCPDateTimeReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColAuthoringHCPDateTimeReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColAuthoringHCPDateTimeOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForColAuthoringHCPDateTime(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getColAuthoringHCPDateTime()
			{
				return (String)super.row.get(1);
			}
			public void setColAuthoringHCPDateTime(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColAuthoringHCPDateTimeTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColAuditReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColAuditReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColAuditOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForColAudit(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.framework.utils.Image getColAudit()
			{
				return (ims.framework.utils.Image)super.row.get(2);
			}
			public void setColAudit(ims.framework.utils.Image value)
			{
				super.row.set(2, value);
			}
			public void setCellColAuditTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColIncludeReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColIncludeReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColIncludeOpened()
			{
				super.row.showOpened(3);
			}
			public void setTooltipForColInclude(String value)
			{
				super.row.setTooltip(3, value);
			}
			public boolean getColInclude()
			{
				return ((Boolean)super.row.get(3)).booleanValue();
			}
			public void setColInclude(boolean value)
			{
				super.row.set(3, new Boolean(value));
			}
			public void setCellColIncludeTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
			{
				return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdComplicationsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdComplicationsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdComplicationsRow get(int index)
			{
				return new grdComplicationsRow(super.collection.get(index));
			}
			public grdComplicationsRow newRow()
			{
				return new grdComplicationsRow(super.collection.newRow());
			}
			public grdComplicationsRow newRow(boolean autoSelect)
			{
				return new grdComplicationsRow(super.collection.newRow(autoSelect));
			}
			public grdComplicationsRow newRowAt(int index)
			{
				return new grdComplicationsRow(super.collection.newRowAt(index));
			}
			public grdComplicationsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdComplicationsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdComplicationsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
			{
				super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVoCollection getValues()
			{
				ims.core.vo.PatientDiagnosisEDischargeListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisEDischargeListVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
			{
				return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				super.grid.setValue(value);
			}
			public grdComplicationsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdComplicationsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdComplicationsRowCollection getRows()
			{
				return new grdComplicationsRowCollection(super.grid.getRows());
			}
			public grdComplicationsRow getRowByValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdComplicationsRow(row);
			}
			public void setColDiagnosisHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColDiagnosisHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColAuthoringHCPDateTimeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColAuthoringHCPDateTimeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColAuditHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColAuditHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColIncludeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColIncludeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
		}
		public static class grdComorbidityRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdComorbidityRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColDiagnosisReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColDiagnosisReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColDiagnosisOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColDiagnosis(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getColDiagnosis()
			{
				return (String)super.row.get(0);
			}
			public void setColDiagnosis(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColDiagnosisTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColAuthoringHCPDateTimeReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColAuthoringHCPDateTimeReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColAuthoringHCPDateTimeOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForColAuthoringHCPDateTime(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getColAuthoringHCPDateTime()
			{
				return (String)super.row.get(1);
			}
			public void setColAuthoringHCPDateTime(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColAuthoringHCPDateTimeTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColAuditReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColAuditReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColAuditOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForColAudit(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.framework.utils.Image getColAudit()
			{
				return (ims.framework.utils.Image)super.row.get(2);
			}
			public void setColAudit(ims.framework.utils.Image value)
			{
				super.row.set(2, value);
			}
			public void setCellColAuditTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColRelevantForEpisodeReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColRelevantForEpisodeReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColRelevantForEpisodeOpened()
			{
				super.row.showOpened(3);
			}
			public void setTooltipForColRelevantForEpisode(String value)
			{
				super.row.setTooltip(3, value);
			}
			public boolean getColRelevantForEpisode()
			{
				return ((Boolean)super.row.get(3)).booleanValue();
			}
			public void setColRelevantForEpisode(boolean value)
			{
				super.row.set(3, new Boolean(value));
			}
			public void setCellColRelevantForEpisodeTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setColIncludeReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isColIncludeReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showColIncludeOpened()
			{
				super.row.showOpened(4);
			}
			public void setTooltipForColInclude(String value)
			{
				super.row.setTooltip(4, value);
			}
			public boolean getColInclude()
			{
				return ((Boolean)super.row.get(4)).booleanValue();
			}
			public void setColInclude(boolean value)
			{
				super.row.set(4, new Boolean(value));
			}
			public void setCellColIncludeTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
			{
				return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdComorbidityRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdComorbidityRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdComorbidityRow get(int index)
			{
				return new grdComorbidityRow(super.collection.get(index));
			}
			public grdComorbidityRow newRow()
			{
				return new grdComorbidityRow(super.collection.newRow());
			}
			public grdComorbidityRow newRow(boolean autoSelect)
			{
				return new grdComorbidityRow(super.collection.newRow(autoSelect));
			}
			public grdComorbidityRow newRowAt(int index)
			{
				return new grdComorbidityRow(super.collection.newRowAt(index));
			}
			public grdComorbidityRow newRowAt(int index, boolean autoSelect)
			{
				return new grdComorbidityRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdComorbidityGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
			{
				super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVoCollection getValues()
			{
				ims.core.vo.PatientDiagnosisEDischargeListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisEDischargeListVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
			{
				return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				super.grid.setValue(value);
			}
			public grdComorbidityRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdComorbidityRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdComorbidityRowCollection getRows()
			{
				return new grdComorbidityRowCollection(super.grid.getRows());
			}
			public grdComorbidityRow getRowByValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdComorbidityRow(row);
			}
			public void setColDiagnosisHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColDiagnosisHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColAuthoringHCPDateTimeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColAuthoringHCPDateTimeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColAuditHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColAuditHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColRelevantForEpisodeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColRelevantForEpisodeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setColIncludeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getColIncludeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
		}
		public static class grdDiagnosesRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdDiagnosesRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColDiagnosisReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColDiagnosisReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColDiagnosisOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColDiagnosis(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getColDiagnosis()
			{
				return (String)super.row.get(0);
			}
			public void setColDiagnosis(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColDiagnosisTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColAuthoringHCPDateTimeReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColAuthoringHCPDateTimeReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColAuthoringHCPDateTimeOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForColAuthoringHCPDateTime(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getColAuthoringHCPDateTime()
			{
				return (String)super.row.get(1);
			}
			public void setColAuthoringHCPDateTime(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColAuthoringHCPDateTimeTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColAuditReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColAuditReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColAuditOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForColAudit(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.framework.utils.Image getColAudit()
			{
				return (ims.framework.utils.Image)super.row.get(2);
			}
			public void setColAudit(ims.framework.utils.Image value)
			{
				super.row.set(2, value);
			}
			public void setCellColAuditTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColPrimaryReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColPrimaryReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColPrimaryOpened()
			{
				super.row.showOpened(3);
			}
			public void setTooltipForColPrimary(String value)
			{
				super.row.setTooltip(3, value);
			}
			public boolean getColPrimary()
			{
				return ((Boolean)super.row.get(3)).booleanValue();
			}
			public void setColPrimary(boolean value)
			{
				super.row.set(3, new Boolean(value));
			}
			public void setCellColPrimaryTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setColIncludeReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isColIncludeReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showColIncludeOpened()
			{
				super.row.showOpened(4);
			}
			public void setTooltipForColInclude(String value)
			{
				super.row.setTooltip(4, value);
			}
			public boolean getColInclude()
			{
				return ((Boolean)super.row.get(4)).booleanValue();
			}
			public void setColInclude(boolean value)
			{
				super.row.set(4, new Boolean(value));
			}
			public void setCellColIncludeTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
			{
				return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdDiagnosesRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdDiagnosesRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdDiagnosesRow get(int index)
			{
				return new grdDiagnosesRow(super.collection.get(index));
			}
			public grdDiagnosesRow newRow()
			{
				return new grdDiagnosesRow(super.collection.newRow());
			}
			public grdDiagnosesRow newRow(boolean autoSelect)
			{
				return new grdDiagnosesRow(super.collection.newRow(autoSelect));
			}
			public grdDiagnosesRow newRowAt(int index)
			{
				return new grdDiagnosesRow(super.collection.newRowAt(index));
			}
			public grdDiagnosesRow newRowAt(int index, boolean autoSelect)
			{
				return new grdDiagnosesRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdDiagnosesGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
			{
				super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVoCollection getValues()
			{
				ims.core.vo.PatientDiagnosisEDischargeListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisEDischargeListVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
			{
				return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				super.grid.setValue(value);
			}
			public grdDiagnosesRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdDiagnosesRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdDiagnosesRowCollection getRows()
			{
				return new grdDiagnosesRowCollection(super.grid.getRows());
			}
			public grdDiagnosesRow getRowByValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdDiagnosesRow(row);
			}
			public void setColDiagnosisHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColDiagnosisHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColAuthoringHCPDateTimeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColAuthoringHCPDateTimeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColAuditHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColAuditHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColPrimaryHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColPrimaryHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setColIncludeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getColIncludeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 192, 6, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No diagnosis to record", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 448, 133, 247, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No relevant co-morbidities for this episode", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 192, 133, 193, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No complications for this episode", new Integer(1), null, new Integer(0)}));
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 168, 6, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 424, 133, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 168, 133, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 820, 104, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdComplicationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdComplicationsTemp);
			grdComplicationsGrid grdComplications = (grdComplicationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdComplicationsGrid.class, m_grdComplicationsTemp);
			grdComplications.addStringColumn("Complication Description", 0, 0, 340, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdComplications.addStringColumn("Authoring HCP, Date/Time", 0, 0, 365, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdComplications.addImageColumn(" ", 1, 1, 40, true, 2);
			grdComplications.addBoolColumn("Include", 0, 0, -1, false, true, 1, true);
			super.addGrid(grdComplications);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 820, 104, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdComorbidityTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdComorbidityTemp);
			grdComorbidityGrid grdComorbidity = (grdComorbidityGrid)GridFlyweightFactory.getInstance().createGridBridge(grdComorbidityGrid.class, m_grdComorbidityTemp);
			grdComorbidity.addStringColumn("Co-Morbidity Description", 0, 0, 340, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdComorbidity.addStringColumn("Authoring HCP, Date/Time", 0, 0, 230, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdComorbidity.addImageColumn(" ", 1, 1, 40, true, 2);
			grdComorbidity.addBoolColumn("Relevant for this episode", 0, 0, 135, false, true, 1, true);
			grdComorbidity.addBoolColumn("Include", 0, 0, -1, false, true, 1, true);
			super.addGrid(grdComorbidity);
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 820, 104, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdDiagnosesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdDiagnosesTemp);
			grdDiagnosesGrid grdDiagnoses = (grdDiagnosesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosesGrid.class, m_grdDiagnosesTemp);
			grdDiagnoses.addStringColumn("Diagnosis Description", 0, 0, 340, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDiagnoses.addStringColumn("Authoring HCP, Date/Time", 0, 0, 300, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDiagnoses.addImageColumn(" ", 1, 1, 40, true, 2);
			grdDiagnoses.addBoolColumn("Primary", 0, 0, 65, true, false, 1, true);
			grdDiagnoses.addBoolColumn("Include", 0, 0, -1, false, true, 1, true);
			super.addGrid(grdDiagnoses);
		}
		public CheckBox chkNoDiagnosis()
		{
			return (CheckBox)super.getControl(3);
		}
		public CheckBox chkNoComor()
		{
			return (CheckBox)super.getControl(4);
		}
		public CheckBox chkNoComp()
		{
			return (CheckBox)super.getControl(5);
		}
		public grdComplicationsGrid grdComplications()
		{
			return (grdComplicationsGrid)super.getGrid(0);
		}
		public grdComorbidityGrid grdComorbidity()
		{
			return (grdComorbidityGrid)super.getGrid(1);
		}
		public grdDiagnosesGrid grdDiagnoses()
		{
			return (grdDiagnosesGrid)super.getGrid(2);
		}
	}
	public static class ctnDiagnosisControlsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbDiagLateralityComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRB getValue()
			{
				return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRB value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbDivisionComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.DiagnosisDivisions value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.DiagnosisDivisions value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.DiagnosisDivisions value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.DiagnosisDivisions value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.DiagnosisDivisions value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.DiagnosisDivisions getValue()
			{
				return (ims.core.vo.lookups.DiagnosisDivisions)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.DiagnosisDivisions value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class GroupSelectionRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 416, 79, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 5);
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 536, 79, 127, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "Diagnoses Database", startTabIndex.intValue() + 6);
			}
			public void setText(GroupSelectionEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupSelectionEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupSelectionEnumeration.None;
					case 0: return GroupSelectionEnumeration.rdoDiagSpec;
					case 1: return GroupSelectionEnumeration.rdoDiagDatabase;
				}
				return null;
			}
			public void setValue(GroupSelectionEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupSelectionEnumeration.None.id);
			}
			public boolean isEnabled(GroupSelectionEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupSelectionEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupSelectionEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupSelectionEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupSelectionEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupSelectionEnumeration None = new GroupSelectionEnumeration(-1);
			public static GroupSelectionEnumeration rdoDiagSpec = new GroupSelectionEnumeration(0);
			public static GroupSelectionEnumeration rdoDiagDatabase = new GroupSelectionEnumeration(1);
			private GroupSelectionEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupSelectionEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Diagnosis", new Integer(1), ""}));
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 0, 232, 504, 60, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccDiagAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper13.getSize(), instance1, startTabIndex.intValue() + 15, skipContextValidation);
			//ims.framework.Control m_ccDiagAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), new Integer(232), new Integer(504), new Integer(60), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 15), m_ccDiagAuthoringForm, instance1 } );
			ims.framework.Control m_ccDiagAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 15), m_ccDiagAuthoringForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccDiagAuthoringControl);
			Menu[] menus1 = m_ccDiagAuthoringForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 28, 104, 774, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccDiagnosisClinicalTermForm = loader.loadComponent(123133, appForm, startControlID * 10 + 2000, anchoringHelper14.getSize(), instance2, startTabIndex.intValue() + 7, skipContextValidation);
			//ims.framework.Control m_ccDiagnosisClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(28), new Integer(104), new Integer(774), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_ccDiagnosisClinicalTermForm, instance2 } );
			ims.framework.Control m_ccDiagnosisClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_ccDiagnosisClinicalTermForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccDiagnosisClinicalTermControl);
			Menu[] menus2 = m_ccDiagnosisClinicalTermForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 344, 184, 147, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosed on Admission:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 35, 213, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 35, 262, 85, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring\nDate/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 35, 241, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 144, 80, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Division:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 205, 184, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Co-Morbidity:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 35, 184, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Diagnosis:", new Integer(1), null, new Integer(0)}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 141, 211, 186, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbDiagLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbDiagLateralityTemp);
			cmbDiagLateralityComboBox cmbDiagLaterality = (cmbDiagLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiagLateralityComboBox.class, m_cmbDiagLateralityTemp);
			super.addComboBox(cmbDiagLaterality);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 200, 78, 186, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbDivisionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbDivisionTemp);
			cmbDivisionComboBox cmbDivision = (cmbDivisionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDivisionComboBox.class, m_cmbDivisionTemp);
			super.addComboBox(cmbDivision);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 496, 185, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 296, 185, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 152, 185, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
	
			// Image Buttons Controls
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 38, 48, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled16, form_images_local.Core.InfoEnabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	
			// RadioButton Controls
			RadioButton tmpGroupSelection = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupSelection);
			GroupSelectionRadioButton GroupSelection = (GroupSelectionRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSelectionRadioButton.class, tmpGroupSelection);
			GroupSelection.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupSelection);
	
			// Link Controls
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 696, 16, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
		}
		public ims.core.forms.authoringinfo.IComponent ccDiagAuthoring()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setccDiagAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setccDiagAuthoringVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean isccDiagAuthoringVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setccDiagAuthoringEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean isccDiagAuthoringEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public ims.clinical.forms.clinicalcoding.IComponent ccDiagnosisClinicalTerm()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
		}
		public void setccDiagnosisClinicalTermValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
		}
		public void setccDiagnosisClinicalTermVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setVisible(value);
		}
		public boolean isccDiagnosisClinicalTermVisible()
		{
			return ((ims.framework.Control)super.getControl(2)).isVisible();
		}
		public void setccDiagnosisClinicalTermEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setEnabled(value);
		}
		public boolean isccDiagnosisClinicalTermEnabled()
		{
			return ((ims.framework.Control)super.getControl(2)).isEnabled();
		}
		public cmbDiagLateralityComboBox cmbDiagLaterality()
		{
			return (cmbDiagLateralityComboBox)super.getComboBox(0);
		}
		public cmbDivisionComboBox cmbDivision()
		{
			return (cmbDivisionComboBox)super.getComboBox(1);
		}
		public CheckBox chkDiagnosedOnAdmission()
		{
			return (CheckBox)super.getControl(12);
		}
		public CheckBox chkCoMorbidity()
		{
			return (CheckBox)super.getControl(13);
		}
		public CheckBox chkDiagPrimaryDiagnosis()
		{
			return (CheckBox)super.getControl(14);
		}
		public ImageButton imbInfoDiagnosis()
		{
			return (ImageButton)super.getControl(15);
		}
		public GroupSelectionRadioButton GroupSelection()
		{
			return (GroupSelectionRadioButton)super.getRadioButton(0);
		}
		public Link lnkReturnToList()
		{
			return (Link)super.getControl(17);
		}
	}
	public static class ctnCoMorbidityControlsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbComorbLateralityComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRB getValue()
			{
				return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRB value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class GroupSelectionComorRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 144, 56, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper29.getX(), anchoringHelper29.getY(), anchoringHelper29.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 18);
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 280, 56, 127, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper30.getX(), anchoringHelper30.getY(), anchoringHelper30.getWidth(), "All Diagnoses", startTabIndex.intValue() + 19);
			}
			public void setText(GroupSelectionComorEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupSelectionComorEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupSelectionComorEnumeration.None;
					case 0: return GroupSelectionComorEnumeration.rdoComorbHotlist;
					case 1: return GroupSelectionComorEnumeration.rdoComorbAll;
				}
				return null;
			}
			public void setValue(GroupSelectionComorEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupSelectionComorEnumeration.None.id);
			}
			public boolean isEnabled(GroupSelectionComorEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupSelectionComorEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupSelectionComorEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupSelectionComorEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupSelectionComorEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupSelectionComorEnumeration None = new GroupSelectionComorEnumeration(-1);
			public static GroupSelectionComorEnumeration rdoComorbHotlist = new GroupSelectionComorEnumeration(0);
			public static GroupSelectionComorEnumeration rdoComorbAll = new GroupSelectionComorEnumeration(1);
			private GroupSelectionComorEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupSelectionComorEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Co-Morbidity", new Integer(1), ""}));
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 0, 192, 600, 60, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccComorbAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper32.getSize(), instance1, startTabIndex.intValue() + 26, skipContextValidation);
			//ims.framework.Control m_ccComorbAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(0), new Integer(192), new Integer(600), new Integer(60), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 26), m_ccComorbAuthoringForm, instance1 } );
			ims.framework.Control m_ccComorbAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1031),  new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 26), m_ccComorbAuthoringForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccComorbAuthoringControl);
			Menu[] menus1 = m_ccComorbAuthoringForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 28, 80, 774, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccComorbClinicalTermForm = loader.loadComponent(123133, appForm, startControlID * 10 + 4000, anchoringHelper33.getSize(), instance2, startTabIndex.intValue() + 20, skipContextValidation);
			//ims.framework.Control m_ccComorbClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(28), new Integer(80), new Integer(774), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 20), m_ccComorbClinicalTermForm, instance2 } );
			ims.framework.Control m_ccComorbClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1033),  new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 20), m_ccComorbClinicalTermForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccComorbClinicalTermControl);
			Menu[] menus2 = m_ccComorbClinicalTermForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 352, 160, 147, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosed on Admission:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 36, 160, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 36, 222, 100, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring\nDate/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 36, 201, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 141, 158, 188, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbComorbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbComorbLateralityTemp);
			cmbComorbLateralityComboBox cmbComorbLaterality = (cmbComorbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbComorbLateralityComboBox.class, m_cmbComorbLateralityTemp);
			super.addComboBox(cmbComorbLaterality);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 504, 161, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
	
			// Image Buttons Controls
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 36, 48, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled16, form_images_local.Core.InfoEnabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	
			// RadioButton Controls
			RadioButton tmpGroupSelectionComor = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupSelectionComor);
			GroupSelectionComorRadioButton GroupSelectionComor = (GroupSelectionComorRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSelectionComorRadioButton.class, tmpGroupSelectionComor);
			GroupSelectionComor.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupSelectionComor);
	
			// Link Controls
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 696, 16, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
		}
		public ims.core.forms.authoringinfo.IComponent ccComorbAuthoring()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setccComorbAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setccComorbAuthoringVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean isccComorbAuthoringVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setccComorbAuthoringEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean isccComorbAuthoringEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public ims.clinical.forms.clinicalcoding.IComponent ccComorbClinicalTerm()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
		}
		public void setccComorbClinicalTermValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
		}
		public void setccComorbClinicalTermVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setVisible(value);
		}
		public boolean isccComorbClinicalTermVisible()
		{
			return ((ims.framework.Control)super.getControl(2)).isVisible();
		}
		public void setccComorbClinicalTermEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setEnabled(value);
		}
		public boolean isccComorbClinicalTermEnabled()
		{
			return ((ims.framework.Control)super.getControl(2)).isEnabled();
		}
		public cmbComorbLateralityComboBox cmbComorbLaterality()
		{
			return (cmbComorbLateralityComboBox)super.getComboBox(0);
		}
		public CheckBox chkDiagnosedOnAdmissionComorb()
		{
			return (CheckBox)super.getControl(8);
		}
		public ImageButton imbInfoCoMorbidity()
		{
			return (ImageButton)super.getControl(9);
		}
		public GroupSelectionComorRadioButton GroupSelectionComor()
		{
			return (GroupSelectionComorRadioButton)super.getRadioButton(0);
		}
		public Link lnkComorReturn()
		{
			return (Link)super.getControl(11);
		}
	}
	public static class ctnComplicationsControlsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbCompLateralityComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRB getValue()
			{
				return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRB value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class GroupSelectionCompRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 144, 56, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper42.getX(), anchoringHelper42.getY(), anchoringHelper42.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 29);
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 280, 56, 127, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper43.getX(), anchoringHelper43.getY(), anchoringHelper43.getWidth(), "All Complications", startTabIndex.intValue() + 30);
			}
			public void setText(GroupSelectionCompEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupSelectionCompEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupSelectionCompEnumeration.None;
					case 0: return GroupSelectionCompEnumeration.rdoCompHotlist;
					case 1: return GroupSelectionCompEnumeration.rdoCompAll;
				}
				return null;
			}
			public void setValue(GroupSelectionCompEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupSelectionCompEnumeration.None.id);
			}
			public boolean isEnabled(GroupSelectionCompEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupSelectionCompEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupSelectionCompEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupSelectionCompEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupSelectionCompEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupSelectionCompEnumeration None = new GroupSelectionCompEnumeration(-1);
			public static GroupSelectionCompEnumeration rdoCompHotlist = new GroupSelectionCompEnumeration(0);
			public static GroupSelectionCompEnumeration rdoCompAll = new GroupSelectionCompEnumeration(1);
			private GroupSelectionCompEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupSelectionCompEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Complication", new Integer(1), ""}));
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 28, 80, 774, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccCompClinicalTermForm = loader.loadComponent(123133, appForm, startControlID * 10 + 5000, anchoringHelper45.getSize(), instance1, startTabIndex.intValue() + 31, skipContextValidation);
			//ims.framework.Control m_ccCompClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(28), new Integer(80), new Integer(774), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 31), m_ccCompClinicalTermForm, instance1 } );
			ims.framework.Control m_ccCompClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1045),  new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 31), m_ccCompClinicalTermForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccCompClinicalTermControl);
			Menu[] menus1 = m_ccCompClinicalTermForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 0, 164, 600, 60, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccCompAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 6000, anchoringHelper46.getSize(), instance2, startTabIndex.intValue() + 37, skipContextValidation);
			//ims.framework.Control m_ccCompAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(0), new Integer(164), new Integer(600), new Integer(60), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 37), m_ccCompAuthoringForm, instance2 } );
			ims.framework.Control m_ccCompAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1047),  new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 37), m_ccCompAuthoringForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccCompAuthoringControl);
			Menu[] menus2 = m_ccCompAuthoringForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 416, 144, 147, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosed on Admission:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 36, 144, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 36, 194, 92, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring\nDate/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 36, 173, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 140, 142, 196, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbCompLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbCompLateralityTemp);
			cmbCompLateralityComboBox cmbCompLaterality = (cmbCompLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCompLateralityComboBox.class, m_cmbCompLateralityTemp);
			super.addComboBox(cmbCompLaterality);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 568, 145, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
	
			// Image Buttons Controls
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 36, 48, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled16, form_images_local.Core.InfoEnabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	
			// RadioButton Controls
			RadioButton tmpGroupSelectionComp = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupSelectionComp);
			GroupSelectionCompRadioButton GroupSelectionComp = (GroupSelectionCompRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSelectionCompRadioButton.class, tmpGroupSelectionComp);
			GroupSelectionComp.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupSelectionComp);
	
			// Link Controls
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 696, 16, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
		}
		public ims.clinical.forms.clinicalcoding.IComponent ccCompClinicalTerm()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setccCompClinicalTermValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setccCompClinicalTermVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean isccCompClinicalTermVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setccCompClinicalTermEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean isccCompClinicalTermEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public ims.core.forms.authoringinfo.IComponent ccCompAuthoring()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
		}
		public void setccCompAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
		}
		public void setccCompAuthoringVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setVisible(value);
		}
		public boolean isccCompAuthoringVisible()
		{
			return ((ims.framework.Control)super.getControl(2)).isVisible();
		}
		public void setccCompAuthoringEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setEnabled(value);
		}
		public boolean isccCompAuthoringEnabled()
		{
			return ((ims.framework.Control)super.getControl(2)).isEnabled();
		}
		public cmbCompLateralityComboBox cmbCompLaterality()
		{
			return (cmbCompLateralityComboBox)super.getComboBox(0);
		}
		public CheckBox chkDiagnosedOnAdmissionComp()
		{
			return (CheckBox)super.getControl(8);
		}
		public ImageButton imbInfoComplication()
		{
			return (ImageButton)super.getControl(9);
		}
		public GroupSelectionCompRadioButton GroupSelectionComp()
		{
			return (GroupSelectionCompRadioButton)super.getRadioButton(0);
		}
		public Link lnkComplicationReturn()
		{
			return (Link)super.getControl(11);
		}
	}
	public static class grdPreviousRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPreviousRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDCDescReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDCDescReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDCDescOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDCDesc(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColDCDesc()
		{
			return (String)super.row.get(0);
		}
		public void setColDCDesc(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDCDescTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDCDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDCDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDCDateOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColDCDate(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColDCDate()
		{
			return (String)super.row.get(1);
		}
		public void setColDCDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDCDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDCCoMorbidReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDCCoMorbidReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDCCoMorbidOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColDCCoMorbid(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getColDCCoMorbid()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setColDCCoMorbid(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellColDCCoMorbidTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDCCompReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDCCompReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDCCompOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColDCComp(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.framework.utils.Image getColDCComp()
		{
			return (ims.framework.utils.Image)super.row.get(3);
		}
		public void setColDCComp(ims.framework.utils.Image value)
		{
			super.row.set(3, value);
		}
		public void setCellColDCCompTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColIncludeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColIncludeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColIncludeOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColInclude(String value)
		{
			super.row.setTooltip(4, value);
		}
		public boolean getColInclude()
		{
			return ((Boolean)super.row.get(4)).booleanValue();
		}
		public void setColInclude(boolean value)
		{
			super.row.set(4, new Boolean(value));
		}
		public void setCellColIncludeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPreviousRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPreviousRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPreviousRow get(int index)
		{
			return new grdPreviousRow(super.collection.get(index));
		}
		public grdPreviousRow newRow()
		{
			return new grdPreviousRow(super.collection.newRow());
		}
		public grdPreviousRow newRow(boolean autoSelect)
		{
			return new grdPreviousRow(super.collection.newRow(autoSelect));
		}
		public grdPreviousRow newRowAt(int index)
		{
			return new grdPreviousRow(super.collection.newRowAt(index));
		}
		public grdPreviousRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPreviousRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPreviousGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVoCollection getValues()
		{
			ims.core.vo.PatientDiagnosisEDischargeListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisEDischargeListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			super.grid.setValue(value);
		}
		public grdPreviousRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPreviousRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPreviousRowCollection getRows()
		{
			return new grdPreviousRowCollection(super.grid.getRows());
		}
		public grdPreviousRow getRowByValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPreviousRow(row);
		}
		public void setColDCDescHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDCDescHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDCDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDCDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColDCCoMorbidHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDCCoMorbidHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColDCCompHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDCCompHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColIncludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColIncludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 576);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuPastMedicalHistory = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuPastMedicalHistoryNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryNewItem);
		contextMenus.contextMenuPastMedicalHistoryEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryEditItem);
		contextMenus.contextMenuPastMedicalHistoryViewItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), false, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewItem);
		contextMenus.contextMenuPastMedicalHistoryLinkingItem = factory.createMenuItem(startControlID.intValue() + 4, "Link Procedure to Diagnosis", true, false, new Integer(102211), true, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryLinkingItem);
		contextMenus.contextMenuPastMedicalHistorySupersedeItem = factory.createMenuItem(startControlID.intValue() + 5, "Supersede Diagnosis", true, false, new Integer(103108), true, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistorySupersedeItem);
		contextMenus.contextMenuPastMedicalHistoryRIEItem = factory.createMenuItem(startControlID.intValue() + 6, "Recorded in Error", true, false, new Integer(102140), true, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryRIEItem);
		contextMenus.contextMenuPastMedicalHistoryViewAllCDIItem = factory.createMenuItem(startControlID.intValue() + 7, "View All Clinical Data Items", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewAllCDIItem);
		contextMenus.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem = factory.createMenuItem(startControlID.intValue() + 8, "View All Unlinked Clinical Data Items", true, false, new Integer(102223), false, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem);
		contextMenus.contextMenuPastMedicalHistoryViewAssociationsItem = factory.createMenuItem(startControlID.intValue() + 9, "View Associations", true, false, new Integer(102266), false, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewAssociationsItem);
		form.registerMenu(contextMenus.contextMenuPastMedicalHistory);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem = factory.createMenuItem(startControlID.intValue() + 10, "New Complication", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3110001)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit Complication", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3110002)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem = factory.createMenuItem(startControlID.intValue() + 12, "View Complication", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3110003)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 13, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3110004)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenuRIEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcComplicationMenu);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem = factory.createMenuItem(startControlID.intValue() + 14, "New CoMorbidity", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3100001)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem = factory.createMenuItem(startControlID.intValue() + 15, "Edit CoMorbidity", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3100002)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem = factory.createMenuItem(startControlID.intValue() + 16, "View CoMorbidity", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3100003)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 17, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3100004)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuRIEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcCoMorbidityMenu);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 18, "New Diagnosis", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090001)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 19, "Edit Diagnosis", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090002)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 20, "View Diagnosis", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090003)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 21, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090004)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 400, 836, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Previous Diagnoses and Complications", new Integer(1), ""}));

		// Container Clasess
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 384, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnCurrentDiagnoses = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, new Boolean(false)});
		addControl(m_ctnCurrentDiagnoses);
		ctnCurrentDiagnosesContainer ctnCurrentDiagnoses = (ctnCurrentDiagnosesContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnCurrentDiagnosesContainer.class, m_ctnCurrentDiagnoses, factory);
		ims.framework.utils.SizeInfo m_ctnCurrentDiagnosesDesignSize = new ims.framework.utils.SizeInfo(832, 384);
		ims.framework.utils.SizeInfo m_ctnCurrentDiagnosesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper56.getWidth(), anchoringHelper56.getHeight());
		ctnCurrentDiagnoses.setContext(form, appForm, m_ctnCurrentDiagnoses, loader, this.getImages(), contextMenus, startControlID, m_ctnCurrentDiagnosesDesignSize, m_ctnCurrentDiagnosesRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnCurrentDiagnoses);
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 328, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnDiagnosisControls = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, new Boolean(false)});
		addControl(m_ctnDiagnosisControls);
		ctnDiagnosisControlsContainer ctnDiagnosisControls = (ctnDiagnosisControlsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDiagnosisControlsContainer.class, m_ctnDiagnosisControls, factory);
		ims.framework.utils.SizeInfo m_ctnDiagnosisControlsDesignSize = new ims.framework.utils.SizeInfo(832, 328);
		ims.framework.utils.SizeInfo m_ctnDiagnosisControlsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper57.getWidth(), anchoringHelper57.getHeight());
		ctnDiagnosisControls.setContext(form, appForm, m_ctnDiagnosisControls, loader, this.getImages(), contextMenus, startControlID, m_ctnDiagnosisControlsDesignSize, m_ctnDiagnosisControlsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDiagnosisControls);
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 320, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnCoMorbidityControls = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, new Boolean(false)});
		addControl(m_ctnCoMorbidityControls);
		ctnCoMorbidityControlsContainer ctnCoMorbidityControls = (ctnCoMorbidityControlsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnCoMorbidityControlsContainer.class, m_ctnCoMorbidityControls, factory);
		ims.framework.utils.SizeInfo m_ctnCoMorbidityControlsDesignSize = new ims.framework.utils.SizeInfo(832, 320);
		ims.framework.utils.SizeInfo m_ctnCoMorbidityControlsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
		ctnCoMorbidityControls.setContext(form, appForm, m_ctnCoMorbidityControls, loader, this.getImages(), contextMenus, startControlID, m_ctnCoMorbidityControlsDesignSize, m_ctnCoMorbidityControlsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnCoMorbidityControls);
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 296, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnComplicationsControls = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, new Boolean(false)});
		addControl(m_ctnComplicationsControls);
		ctnComplicationsControlsContainer ctnComplicationsControls = (ctnComplicationsControlsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnComplicationsControlsContainer.class, m_ctnComplicationsControls, factory);
		ims.framework.utils.SizeInfo m_ctnComplicationsControlsDesignSize = new ims.framework.utils.SizeInfo(832, 296);
		ims.framework.utils.SizeInfo m_ctnComplicationsControlsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper59.getWidth(), anchoringHelper59.getHeight());
		ctnComplicationsControls.setContext(form, appForm, m_ctnComplicationsControls, loader, this.getImages(), contextMenus, startControlID, m_ctnComplicationsControlsDesignSize, m_ctnComplicationsControlsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnComplicationsControls);

		// Button Controls
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 691, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 769, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 16, 432, 820, 96, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPreviousTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuPastMedicalHistory, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPreviousTemp);
		grdPreviousGrid grdPrevious = (grdPreviousGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPreviousGrid.class, m_grdPreviousTemp);
		grdPrevious.addStringColumn("Description", 0, 0, 535, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPrevious.addStringColumn("Date of Admission", 0, 0, 130, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPrevious.addImageColumn(" ", 0, 0, 40, true, 2);
		grdPrevious.addImageColumn(" ", 0, 0, 40, true, 2);
		grdPrevious.addBoolColumn("Include", 0, 0, -1, false, true, 1, true);
		super.addGrid(grdPrevious);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnCurrentDiagnosesContainer ctnCurrentDiagnoses()
	{
		return (ctnCurrentDiagnosesContainer)super.getContainer(0);
	}
	public ctnDiagnosisControlsContainer ctnDiagnosisControls()
	{
		return (ctnDiagnosisControlsContainer)super.getContainer(1);
	}
	public ctnCoMorbidityControlsContainer ctnCoMorbidityControls()
	{
		return (ctnCoMorbidityControlsContainer)super.getContainer(2);
	}
	public ctnComplicationsControlsContainer ctnComplicationsControls()
	{
		return (ctnComplicationsControlsContainer)super.getContainer(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public grdPreviousGrid grdPrevious()
	{
		return (grdPreviousGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				EDischargeDiagnosisEtcComponent = new LocalFormName(123156);
			}
			public final FormName EDischargeDiagnosisEtcComponent;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				InfoEnabled16 = new ImageHelper(102532, "Images/Core/info_enabled_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image EditDisabled;
			public final ims.framework.utils.Image Pin;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image InfoEnabled16;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedPatientDiagnosisVo = new ims.framework.ContextVariable("SelectedPatientDiagnosisVo", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier + "");
			cxl_CodedItemTextSubmitted = new ims.framework.ContextVariable("CodedItemTextSubmitted", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CodedItemTextSubmitted_" + componentIdentifier + "");
			cxl_bInitialised = new ims.framework.ContextVariable("bInitialised", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__bInitialised_" + componentIdentifier + "");
			cxl_CurrentDiagIncluded = new ims.framework.ContextVariable("CurrentDiagIncluded", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDiagIncluded_" + componentIdentifier + "");
			cxl_PreviousDiagIncluded = new ims.framework.ContextVariable("PreviousDiagIncluded", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__PreviousDiagIncluded_" + componentIdentifier + "");
			cxl_EDischargeStarted = new ims.framework.ContextVariable("EDischargeStarted", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__EDischargeStarted_" + componentIdentifier + "");
			cxl_WhatsBeingEdited = new ims.framework.ContextVariable("WhatsBeingEdited", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__WhatsBeingEdited_" + componentIdentifier + "");
			cxl_CurrentDischargeDetails = new ims.framework.ContextVariable("CurrentDischargeDetails", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier + "");
			cxl_isReadonly = new ims.framework.ContextVariable("isReadonly", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__isReadonly_" + componentIdentifier + "");
			cxl_bExistingPrimaryDiagnosis = new ims.framework.ContextVariable("bExistingPrimaryDiagnosis", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__bExistingPrimaryDiagnosis_" + componentIdentifier + "");
			cxl_bExistingPrimaryComMorbidity = new ims.framework.ContextVariable("bExistingPrimaryComMorbidity", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__bExistingPrimaryComMorbidity_" + componentIdentifier + "");
			cxl_STHKSummary = new ims.framework.ContextVariable("STHKSummary", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__STHKSummary_" + componentIdentifier + "");
			cxl_LastEvent = new ims.framework.ContextVariable("LastEvent", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__LastEvent_" + componentIdentifier + "");
			cxl_DiagnosisConfirmed = new ims.framework.ContextVariable("DiagnosisConfirmed", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagnosisConfirmed_" + componentIdentifier + "");
			cxl_ConfirmDiagnosisMsgBoxId = new ims.framework.ContextVariable("ConfirmDiagnosisMsgBoxId", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__ConfirmDiagnosisMsgBoxId_" + componentIdentifier + "");
			cxl_IsSummaryUsed = new ims.framework.ContextVariable("IsSummaryUsed", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__IsSummaryUsed_" + componentIdentifier + "");
			cxl_SortOrderComplicationDateTme = new ims.framework.ContextVariable("SortOrderComplicationDateTme", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderComplicationDateTme_" + componentIdentifier + "");
			cxl_SortOrderComplicationAuthoring = new ims.framework.ContextVariable("SortOrderComplicationAuthoring", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderComplicationAuthoring_" + componentIdentifier + "");
			cxl_SortOrderDiagnosisDateTme = new ims.framework.ContextVariable("SortOrderDiagnosisDateTme", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderDiagnosisDateTme_" + componentIdentifier + "");
			cxl_SortOrderDiagnosisAuthoring = new ims.framework.ContextVariable("SortOrderDiagnosisAuthoring", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderDiagnosisAuthoring_" + componentIdentifier + "");
			cxl_SortOrderCoMorbidityDateTme = new ims.framework.ContextVariable("SortOrderCoMorbidityDateTme", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderCoMorbidityDateTme_" + componentIdentifier + "");
			cxl_SortOrderCoMorbidityAuthoring = new ims.framework.ContextVariable("SortOrderCoMorbidityAuthoring", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderCoMorbidityAuthoring_" + componentIdentifier + "");
			cxl_SortOrderPreviousDateTme = new ims.framework.ContextVariable("SortOrderPreviousDateTme", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderPreviousDateTme_" + componentIdentifier + "");
			cxl_SortOrderPreviousAuthoring = new ims.framework.ContextVariable("SortOrderPreviousAuthoring", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderPreviousAuthoring_" + componentIdentifier + "");
			cxl_SortOrderComplicationAudit = new ims.framework.ContextVariable("SortOrderComplicationAudit", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderComplicationAudit_" + componentIdentifier + "");
			cxl_SortOrderCoMorbidityAudit = new ims.framework.ContextVariable("SortOrderCoMorbidityAudit", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderCoMorbidityAudit_" + componentIdentifier + "");
			cxl_SortOrderDiagnosisAudit = new ims.framework.ContextVariable("SortOrderDiagnosisAudit", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderDiagnosisAudit_" + componentIdentifier + "");
			cxl_SortOrderPreviousAudit = new ims.framework.ContextVariable("SortOrderPreviousAudit", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderPreviousAudit_" + componentIdentifier + "");
			cxl_SortOrderPreviousIsCoMorbidity = new ims.framework.ContextVariable("SortOrderPreviousIsCoMorbidity", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderPreviousIsCoMorbidity_" + componentIdentifier + "");
			cxl_SortOrderPreviousIsComplication = new ims.framework.ContextVariable("SortOrderPreviousIsComplication", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SortOrderPreviousIsComplication_" + componentIdentifier + "");
			cxl_DiagToBeRied = new ims.framework.ContextVariable("DiagToBeRied", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier + "");
			cxl_DischargeClinicalInformation = new ims.framework.ContextVariable("DischargeClinicalInformation", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier + "");
			cxl_bExistingRelevantCoMorbidity = new ims.framework.ContextVariable("bExistingRelevantCoMorbidity", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__bExistingRelevantCoMorbidity_" + componentIdentifier + "");
			cxl_CurrentComorbidityRelevant = new ims.framework.ContextVariable("CurrentComorbidityRelevant", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentComorbidityRelevant_" + componentIdentifier + "");
			cxl_PreviousFormMode = new ims.framework.ContextVariable("PreviousFormMode", prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__PreviousFormMode_" + componentIdentifier + "");
		}
		
		public boolean getSelectedPatientDiagnosisVoIsNotNull()
		{
			return !cxl_SelectedPatientDiagnosisVo.getValueIsNull(context);
		}
		public ims.core.vo.PatientDiagnosisEDischargeVo getSelectedPatientDiagnosisVo()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeVo)cxl_SelectedPatientDiagnosisVo.getValue(context);
		}
		public void setSelectedPatientDiagnosisVo(ims.core.vo.PatientDiagnosisEDischargeVo value)
		{
			cxl_SelectedPatientDiagnosisVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPatientDiagnosisVo = null;
		public boolean getCodedItemTextSubmittedIsNotNull()
		{
			return !cxl_CodedItemTextSubmitted.getValueIsNull(context);
		}
		public String getCodedItemTextSubmitted()
		{
			return (String)cxl_CodedItemTextSubmitted.getValue(context);
		}
		public void setCodedItemTextSubmitted(String value)
		{
			cxl_CodedItemTextSubmitted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CodedItemTextSubmitted = null;
		public boolean getbInitialisedIsNotNull()
		{
			return !cxl_bInitialised.getValueIsNull(context);
		}
		public Boolean getbInitialised()
		{
			return (Boolean)cxl_bInitialised.getValue(context);
		}
		public void setbInitialised(Boolean value)
		{
			cxl_bInitialised.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bInitialised = null;
		public boolean getCurrentDiagIncludedIsNotNull()
		{
			return !cxl_CurrentDiagIncluded.getValueIsNull(context);
		}
		public Boolean getCurrentDiagIncluded()
		{
			return (Boolean)cxl_CurrentDiagIncluded.getValue(context);
		}
		public void setCurrentDiagIncluded(Boolean value)
		{
			cxl_CurrentDiagIncluded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDiagIncluded = null;
		public boolean getPreviousDiagIncludedIsNotNull()
		{
			return !cxl_PreviousDiagIncluded.getValueIsNull(context);
		}
		public Boolean getPreviousDiagIncluded()
		{
			return (Boolean)cxl_PreviousDiagIncluded.getValue(context);
		}
		public void setPreviousDiagIncluded(Boolean value)
		{
			cxl_PreviousDiagIncluded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousDiagIncluded = null;
		public boolean getEDischargeStartedIsNotNull()
		{
			return !cxl_EDischargeStarted.getValueIsNull(context);
		}
		public Boolean getEDischargeStarted()
		{
			return (Boolean)cxl_EDischargeStarted.getValue(context);
		}
		public void setEDischargeStarted(Boolean value)
		{
			cxl_EDischargeStarted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EDischargeStarted = null;
		public boolean getWhatsBeingEditedIsNotNull()
		{
			return !cxl_WhatsBeingEdited.getValueIsNull(context);
		}
		public Integer getWhatsBeingEdited()
		{
			return (Integer)cxl_WhatsBeingEdited.getValue(context);
		}
		public void setWhatsBeingEdited(Integer value)
		{
			cxl_WhatsBeingEdited.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WhatsBeingEdited = null;
		public boolean getCurrentDischargeDetailsIsNotNull()
		{
			return !cxl_CurrentDischargeDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.DischargeDetailsVo getCurrentDischargeDetails()
		{
			return (ims.clinical.vo.DischargeDetailsVo)cxl_CurrentDischargeDetails.getValue(context);
		}
		public void setCurrentDischargeDetails(ims.clinical.vo.DischargeDetailsVo value)
		{
			cxl_CurrentDischargeDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDischargeDetails = null;
		public boolean getisReadonlyIsNotNull()
		{
			return !cxl_isReadonly.getValueIsNull(context);
		}
		public Boolean getisReadonly()
		{
			return (Boolean)cxl_isReadonly.getValue(context);
		}
		public void setisReadonly(Boolean value)
		{
			cxl_isReadonly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isReadonly = null;
		public boolean getbExistingPrimaryDiagnosisIsNotNull()
		{
			return !cxl_bExistingPrimaryDiagnosis.getValueIsNull(context);
		}
		public Boolean getbExistingPrimaryDiagnosis()
		{
			return (Boolean)cxl_bExistingPrimaryDiagnosis.getValue(context);
		}
		public void setbExistingPrimaryDiagnosis(Boolean value)
		{
			cxl_bExistingPrimaryDiagnosis.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bExistingPrimaryDiagnosis = null;
		public boolean getbExistingPrimaryComMorbidityIsNotNull()
		{
			return !cxl_bExistingPrimaryComMorbidity.getValueIsNull(context);
		}
		public Boolean getbExistingPrimaryComMorbidity()
		{
			return (Boolean)cxl_bExistingPrimaryComMorbidity.getValue(context);
		}
		public void setbExistingPrimaryComMorbidity(Boolean value)
		{
			cxl_bExistingPrimaryComMorbidity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bExistingPrimaryComMorbidity = null;
		public boolean getSTHKSummaryIsNotNull()
		{
			return !cxl_STHKSummary.getValueIsNull(context);
		}
		public ims.edischarge.vo.SummaryRefVo getSTHKSummary()
		{
			return (ims.edischarge.vo.SummaryRefVo)cxl_STHKSummary.getValue(context);
		}
		public void setSTHKSummary(ims.edischarge.vo.SummaryRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'STHKSummary' RefVo context variable.");
			if(value == null)
				cxl_STHKSummary.setValue(context, null);
			else
				cxl_STHKSummary.setValue(context, new ims.edischarge.vo.SummaryRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_STHKSummary = null;
		public boolean getLastEventIsNotNull()
		{
			return !cxl_LastEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.EDischargeLastEvent getLastEvent()
		{
			return (ims.clinical.vo.enums.EDischargeLastEvent)cxl_LastEvent.getValue(context);
		}
		public void setLastEvent(ims.clinical.vo.enums.EDischargeLastEvent value)
		{
			cxl_LastEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastEvent = null;
		public boolean getDiagnosisConfirmedIsNotNull()
		{
			return !cxl_DiagnosisConfirmed.getValueIsNull(context);
		}
		public Boolean getDiagnosisConfirmed()
		{
			return (Boolean)cxl_DiagnosisConfirmed.getValue(context);
		}
		public void setDiagnosisConfirmed(Boolean value)
		{
			cxl_DiagnosisConfirmed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DiagnosisConfirmed = null;
		public boolean getConfirmDiagnosisMsgBoxIdIsNotNull()
		{
			return !cxl_ConfirmDiagnosisMsgBoxId.getValueIsNull(context);
		}
		public Integer getConfirmDiagnosisMsgBoxId()
		{
			return (Integer)cxl_ConfirmDiagnosisMsgBoxId.getValue(context);
		}
		public void setConfirmDiagnosisMsgBoxId(Integer value)
		{
			cxl_ConfirmDiagnosisMsgBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmDiagnosisMsgBoxId = null;
		public boolean getIsSummaryUsedIsNotNull()
		{
			return !cxl_IsSummaryUsed.getValueIsNull(context);
		}
		public Boolean getIsSummaryUsed()
		{
			return (Boolean)cxl_IsSummaryUsed.getValue(context);
		}
		public void setIsSummaryUsed(Boolean value)
		{
			cxl_IsSummaryUsed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsSummaryUsed = null;
		public boolean getSortOrderComplicationDateTmeIsNotNull()
		{
			return !cxl_SortOrderComplicationDateTme.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderComplicationDateTme()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderComplicationDateTme.getValue(context);
		}
		public void setSortOrderComplicationDateTme(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderComplicationDateTme.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderComplicationDateTme = null;
		public boolean getSortOrderComplicationAuthoringIsNotNull()
		{
			return !cxl_SortOrderComplicationAuthoring.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderComplicationAuthoring()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderComplicationAuthoring.getValue(context);
		}
		public void setSortOrderComplicationAuthoring(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderComplicationAuthoring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderComplicationAuthoring = null;
		public boolean getSortOrderDiagnosisDateTmeIsNotNull()
		{
			return !cxl_SortOrderDiagnosisDateTme.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDiagnosisDateTme()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDiagnosisDateTme.getValue(context);
		}
		public void setSortOrderDiagnosisDateTme(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDiagnosisDateTme.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDiagnosisDateTme = null;
		public boolean getSortOrderDiagnosisAuthoringIsNotNull()
		{
			return !cxl_SortOrderDiagnosisAuthoring.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDiagnosisAuthoring()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDiagnosisAuthoring.getValue(context);
		}
		public void setSortOrderDiagnosisAuthoring(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDiagnosisAuthoring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDiagnosisAuthoring = null;
		public boolean getSortOrderCoMorbidityDateTmeIsNotNull()
		{
			return !cxl_SortOrderCoMorbidityDateTme.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderCoMorbidityDateTme()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderCoMorbidityDateTme.getValue(context);
		}
		public void setSortOrderCoMorbidityDateTme(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderCoMorbidityDateTme.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderCoMorbidityDateTme = null;
		public boolean getSortOrderCoMorbidityAuthoringIsNotNull()
		{
			return !cxl_SortOrderCoMorbidityAuthoring.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderCoMorbidityAuthoring()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderCoMorbidityAuthoring.getValue(context);
		}
		public void setSortOrderCoMorbidityAuthoring(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderCoMorbidityAuthoring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderCoMorbidityAuthoring = null;
		public boolean getSortOrderPreviousDateTmeIsNotNull()
		{
			return !cxl_SortOrderPreviousDateTme.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPreviousDateTme()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPreviousDateTme.getValue(context);
		}
		public void setSortOrderPreviousDateTme(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPreviousDateTme.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPreviousDateTme = null;
		public boolean getSortOrderPreviousAuthoringIsNotNull()
		{
			return !cxl_SortOrderPreviousAuthoring.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPreviousAuthoring()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPreviousAuthoring.getValue(context);
		}
		public void setSortOrderPreviousAuthoring(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPreviousAuthoring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPreviousAuthoring = null;
		public boolean getSortOrderComplicationAuditIsNotNull()
		{
			return !cxl_SortOrderComplicationAudit.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderComplicationAudit()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderComplicationAudit.getValue(context);
		}
		public void setSortOrderComplicationAudit(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderComplicationAudit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderComplicationAudit = null;
		public boolean getSortOrderCoMorbidityAuditIsNotNull()
		{
			return !cxl_SortOrderCoMorbidityAudit.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderCoMorbidityAudit()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderCoMorbidityAudit.getValue(context);
		}
		public void setSortOrderCoMorbidityAudit(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderCoMorbidityAudit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderCoMorbidityAudit = null;
		public boolean getSortOrderDiagnosisAuditIsNotNull()
		{
			return !cxl_SortOrderDiagnosisAudit.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDiagnosisAudit()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDiagnosisAudit.getValue(context);
		}
		public void setSortOrderDiagnosisAudit(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDiagnosisAudit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDiagnosisAudit = null;
		public boolean getSortOrderPreviousAuditIsNotNull()
		{
			return !cxl_SortOrderPreviousAudit.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPreviousAudit()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPreviousAudit.getValue(context);
		}
		public void setSortOrderPreviousAudit(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPreviousAudit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPreviousAudit = null;
		public boolean getSortOrderPreviousIsCoMorbidityIsNotNull()
		{
			return !cxl_SortOrderPreviousIsCoMorbidity.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPreviousIsCoMorbidity()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPreviousIsCoMorbidity.getValue(context);
		}
		public void setSortOrderPreviousIsCoMorbidity(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPreviousIsCoMorbidity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPreviousIsCoMorbidity = null;
		public boolean getSortOrderPreviousIsComplicationIsNotNull()
		{
			return !cxl_SortOrderPreviousIsComplication.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPreviousIsComplication()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPreviousIsComplication.getValue(context);
		}
		public void setSortOrderPreviousIsComplication(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPreviousIsComplication.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPreviousIsComplication = null;
		public boolean getDiagToBeRiedIsNotNull()
		{
			return !cxl_DiagToBeRied.getValueIsNull(context);
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVo getDiagToBeRied()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeListVo)cxl_DiagToBeRied.getValue(context);
		}
		public void setDiagToBeRied(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			cxl_DiagToBeRied.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DiagToBeRied = null;
		public boolean getDischargeClinicalInformationIsNotNull()
		{
			return !cxl_DischargeClinicalInformation.getValueIsNull(context);
		}
		public ims.core.vo.DischargeClinicalInformationSTHKVo getDischargeClinicalInformation()
		{
			return (ims.core.vo.DischargeClinicalInformationSTHKVo)cxl_DischargeClinicalInformation.getValue(context);
		}
		public void setDischargeClinicalInformation(ims.core.vo.DischargeClinicalInformationSTHKVo value)
		{
			cxl_DischargeClinicalInformation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeClinicalInformation = null;
		public boolean getbExistingRelevantCoMorbidityIsNotNull()
		{
			return !cxl_bExistingRelevantCoMorbidity.getValueIsNull(context);
		}
		public Boolean getbExistingRelevantCoMorbidity()
		{
			return (Boolean)cxl_bExistingRelevantCoMorbidity.getValue(context);
		}
		public void setbExistingRelevantCoMorbidity(Boolean value)
		{
			cxl_bExistingRelevantCoMorbidity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bExistingRelevantCoMorbidity = null;
		public boolean getCurrentComorbidityRelevantIsNotNull()
		{
			return !cxl_CurrentComorbidityRelevant.getValueIsNull(context);
		}
		public Boolean getCurrentComorbidityRelevant()
		{
			return (Boolean)cxl_CurrentComorbidityRelevant.getValue(context);
		}
		public void setCurrentComorbidityRelevant(Boolean value)
		{
			cxl_CurrentComorbidityRelevant.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentComorbidityRelevant = null;
		public boolean getPreviousFormModeIsNotNull()
		{
			return !cxl_PreviousFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getPreviousFormMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_PreviousFormMode.getValue(context);
		}
		public void setPreviousFormMode(ims.framework.enumerations.FormMode value)
		{
			cxl_PreviousFormMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousFormMode = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class PastMedicalHistory implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int Edit = 2;
			public static final int View = 3;
			public static final int Linking = 4;
			public static final int Supersede = 5;
			public static final int RIE = 6;
			public static final int ViewAllCDI = 7;
			public static final int ViewAllUnlinkedCDI = 8;
			public static final int ViewAssociations = 9;
		}
		public void disableAllPastMedicalHistoryMenuItems()
		{
			this.contextMenuPastMedicalHistoryNewItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryEditItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryLinkingItem.setEnabled(false);
			this.contextMenuPastMedicalHistorySupersedeItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryRIEItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewAllCDIItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewAssociationsItem.setEnabled(false);
		}
		public void hideAllPastMedicalHistoryMenuItems()
		{
			this.contextMenuPastMedicalHistoryNewItem.setVisible(false);
			this.contextMenuPastMedicalHistoryEditItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewItem.setVisible(false);
			this.contextMenuPastMedicalHistoryLinkingItem.setVisible(false);
			this.contextMenuPastMedicalHistorySupersedeItem.setVisible(false);
			this.contextMenuPastMedicalHistoryRIEItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewAllCDIItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewAssociationsItem.setVisible(false);
		}
		private Menu contextMenuPastMedicalHistory;
		public MenuItem getPastMedicalHistoryNewItem()
		{
			return this.contextMenuPastMedicalHistoryNewItem;
		}
		private MenuItem contextMenuPastMedicalHistoryNewItem;
		public MenuItem getPastMedicalHistoryEditItem()
		{
			return this.contextMenuPastMedicalHistoryEditItem;
		}
		private MenuItem contextMenuPastMedicalHistoryEditItem;
		public MenuItem getPastMedicalHistoryViewItem()
		{
			return this.contextMenuPastMedicalHistoryViewItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewItem;
		public MenuItem getPastMedicalHistoryLinkingItem()
		{
			return this.contextMenuPastMedicalHistoryLinkingItem;
		}
		private MenuItem contextMenuPastMedicalHistoryLinkingItem;
		public MenuItem getPastMedicalHistorySupersedeItem()
		{
			return this.contextMenuPastMedicalHistorySupersedeItem;
		}
		private MenuItem contextMenuPastMedicalHistorySupersedeItem;
		public MenuItem getPastMedicalHistoryRIEItem()
		{
			return this.contextMenuPastMedicalHistoryRIEItem;
		}
		private MenuItem contextMenuPastMedicalHistoryRIEItem;
		public MenuItem getPastMedicalHistoryViewAllCDIItem()
		{
			return this.contextMenuPastMedicalHistoryViewAllCDIItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewAllCDIItem;
		public MenuItem getPastMedicalHistoryViewAllUnlinkedCDIItem()
		{
			return this.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem;
		public MenuItem getPastMedicalHistoryViewAssociationsItem()
		{
			return this.contextMenuPastMedicalHistoryViewAssociationsItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewAssociationsItem;
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class EDischargeDiagnosisEtcComplicationMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW_COMPLICATION = 10;
				public static final int EDIT_COMPLICATION = 11;
				public static final int VIEW_COMPLICATIOn = 12;
				public static final int RIE = 13;
			}
			public void disableAllEDischargeDiagnosisEtcComplicationMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuRIEItem.setEnabled(false);
			}
			public void hideAllEDischargeDiagnosisEtcComplicationMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcComplicationMenuRIEItem.setVisible(false);
			}
			private Menu contextMenuEDischargeDiagnosisEtcComplicationMenu;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcComplicationMenuRIEItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcComplicationMenuRIEItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcComplicationMenuRIEItem;
			public final class EDischargeDiagnosisEtcCoMorbidityMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW_COMORBIDITY = 14;
				public static final int EDIT_COMORBIDITY = 15;
				public static final int VIEW_COMORBIDITY = 16;
				public static final int RIE = 17;
			}
			public void disableAllEDischargeDiagnosisEtcCoMorbidityMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuRIEItem.setEnabled(false);
			}
			public void hideAllEDischargeDiagnosisEtcCoMorbidityMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuRIEItem.setVisible(false);
			}
			private Menu contextMenuEDischargeDiagnosisEtcCoMorbidityMenu;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcCoMorbidityMenuRIEItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcCoMorbidityMenuRIEItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcCoMorbidityMenuRIEItem;
			public final class EDischargeDiagnosisEtcDiagnosisMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW_DIAGNOSIS = 18;
				public static final int EDIT_DIAGNOSIS = 19;
				public static final int VIEW_DIAGNOSIS = 20;
				public static final int RIE = 21;
			}
			public void disableAllEDischargeDiagnosisEtcDiagnosisMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem.setEnabled(false);
			}
			public void hideAllEDischargeDiagnosisEtcDiagnosisMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem.setVisible(false);
			}
			private Menu contextMenuEDischargeDiagnosisEtcDiagnosisMenu;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuRIEItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[201];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ISCOMPLICATION", "IsComplication");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ISCOMORBIDITY", "IsComorbidity");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DATERESOLVED", "DateResolved");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DIAGLATERALITY", "DiagLaterality");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-SITETEXT", "SiteText");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ISPREVRELEVANTDIAGNOSIS", "IsPrevRelevantDiagnosis");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DATEONSET", "DateOnset");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-CLINICALCONTACT", "ClinicalContact");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DIAGNOSEDONADMISSION", "DiagnosedOnAdmission");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-ID", "ID_DischargeDetails");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-CARECONTEXT", "CareContext");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DATEOFDISCHARGE", "DateOfDischarge");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGEMETHOD", "DischargeMethod");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGEDESTINATION", "DischargeDestination");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGELETTERSTATUS", "DischargeLetterStatus");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-HASNOCOMPLICATIONS", "HasNoComplications");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-HASNOCOMORBIDITIES", "HasNoComorbidities");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGINGSPECIALTY", "DischargingSpecialty");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGESUPPLEMENTARYLETTERSTATUS", "DischargeSupplementaryLetterStatus");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-HASNODIAGNOSIS", "HasNoDiagnosis");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-METHODOFDISCHARGE", "MethodOfDischarge");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-ISDIAGNOSISCOMPLETE", "IsDiagnosisComplete");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__STHKSummary_" + componentIdentifier, "BO-1099100018-ID", "ID_Summary");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-ISCOMPLICATION", "IsComplication");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-ISCOMORBIDITY", "IsComorbidity");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-DATERESOLVED", "DateResolved");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-DIAGLATERALITY", "DiagLaterality");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-SITETEXT", "SiteText");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-ISPREVRELEVANTDIAGNOSIS", "IsPrevRelevantDiagnosis");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-DATEONSET", "DateOnset");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-CLINICALCONTACT", "ClinicalContact");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DiagToBeRied_" + componentIdentifier, "BO-1003100016-DIAGNOSEDONADMISSION", "DiagnosedOnAdmission");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-ID", "ID_DischargeClinicalInformation");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-CARECONTEXT", "CareContext");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-PRESENTINGCOMPLAINTS", "PresentingComplaints");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-SUMMARYOFADMISSION", "SummaryOfAdmission");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-INVESTIGATIONCOMMENTS", "InvestigationComments");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-RELEVANTTREATMENTS", "RelevantTreatments");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-ADDITIONALCOMMENTS", "AdditionalComments");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-REASONFORADMISSIONANDPRESENTINGCOMPLAINTS", "ReasonForAdmissionAndPresentingComplaints");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-RELEVANTINFECTIONSRISKSWARNINGS", "RelevantInfectionsRisksWarnings");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-SUMMARYOFINPATIENTEPISODE", "SummaryOfInpatientEpisode");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-RELEVANTINVSANDRESULTS", "RelevantInvsAndResults");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-PENDINGRESULTSCOMMENTS", "PendingResultsComments");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-RELEVANTTREATMENTSANDCHANGES", "RelevantTreatmentsAndChanges");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-SCHOOLNURSERY", "SchoolNursery");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisEtcComponent.__internal_x_context__DischargeClinicalInformation_" + componentIdentifier, "BO-1072100071-ISCOMPLETE", "IsComplete");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
