//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3415.25513)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargediagnosisetccomponent;

import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnCoMorbidityControlsContainer.GroupSelectionComorEnumeration;
import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnComplicationsControlsContainer.GroupSelectionCompEnumeration;
import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnCurrentDiagnosesContainer;
import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnCurrentDiagnosesContainer.grdComorbidityRow;
import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnCurrentDiagnosesContainer.grdComplicationsRow;
import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnCurrentDiagnosesContainer.grdDiagnosesRow;
import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnDiagnosisControlsContainer.GroupSelectionEnumeration;
import ims.clinical.forms.edischargediagnosisetccomponent.GenForm.grdPreviousRow;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.PatientDiagnosisStatusVoCollection;
import ims.clinical.vo.RTLSummaryVo;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CSPrimaryDiagnosisVo;
import ims.core.vo.CSPrimaryDiagnosisVoCollection;
import ims.core.vo.CareContextForEdischargeDiagnosisVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.EpisodeOfCareCoMorbidityVo;
import ims.core.vo.EpisodeOfCareCoMorbidityVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.IncludeDiagnosisInDischargeReportVo;
import ims.core.vo.IncludeDiagnosisInDischargeReportVoCollection;
import ims.core.vo.PatientDiagnosisEDischargeListVo;
import ims.core.vo.PatientDiagnosisEDischargeListVoCollection;
import ims.core.vo.PatientDiagnosisEDischargeVo;
import ims.core.vo.PatientNoDiagInfoForCCVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.PatientDiagnosisStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public static final Integer ITS_DIAGNOSIS = new Integer(-1);
	public static final Integer ITS_COMPLICATION = new Integer(-2);
	public static final Integer ITS_COMORBIDITY = new Integer(-3);
	//WDEV-20098
	public static final Integer COL_RELEVANT = 3;
	public static final Integer COL_INCLUDE = 4;
	//----------------
	private String comma = "";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurrentDiagIncluded(false);
		form.getLocalContext().setCurrentComorbidityRelevant(false); //WDEV-20098
		form.getLocalContext().setPreviousDiagIncluded(false);
		form.getLocalContext().setIsSummaryUsed(false);

		initializeComponent();
		initializeDiagnosisCustomControl();
		initializeComplicationCustomControl();
		initializeComorbidityCustomControl();

		form.getLocalContext().setSTHKSummary(null);

		open();
		form.setMode(FormMode.VIEW);
		updateControlsState();

		showHideContainersCurrDiagComrComp(true, false, false, false);
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.RieConfirmationDialog))
		{	
			if (DialogResult.OK.equals(result))
			{
				doRIE();
			}
			else //WDEV-20322
			{
				form.getLocalContext().setDiagToBeRied(null);
				form.getLocalContext().setWhatsBeingEdited(null);
			}
		}
	}
	

	private void doRIE()
	{
		if (form.getLocalContext().getDiagToBeRiedIsNotNull())
		{
			try
			{
				
				domain.rieDiagnosis(form.getLocalContext().getDiagToBeRied(), form.getForms().Clinical.EDischargeDiagnosisEtcComponent, 
						form.getGlobalContext().Core.getPatientShort(), 
						form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()?form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact():null,
						form.getGlobalContext().Core.getCurrentCareContext(),
						form.getGlobalContext().Core.getRieMessage(),
						form.getLocalContext().getSTHKSummary(),form.getLocalContext().getWhatsBeingEdited(),form.getGlobalContext().Core.getEpisodeofCareShort());//WDEV-12784  //WDEV-18622
			}
			catch (StaleObjectException e)
			{
				form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
				form.fireCustomControlValueChanged();
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			}
			catch (UnqViolationUncheckedException e)		// WDEV-12722
			{
				form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
				form.fireCustomControlValueChanged();
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			}
			openAfterDiagnosisDetailsSave();
	
		}
		
	}

	@Override
	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			PatientDiagnosisEDischargeListVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			boolean newRecord = voPatientDiagnosis == null || voPatientDiagnosis.getID_PatientDiagnosis() == null;
			form.ctnDiagnosisControls().setccDiagAuthoringEnabled(newRecord);

			if (form.getLocalContext().getCurrentDiagIncluded().booleanValue() || form.getLocalContext().getPreviousDiagIncluded().booleanValue())
				form.ctnDiagnosisControls().setccDiagAuthoringEnabled(false);
		}

		updateControlsState();
	}

	@Override
	protected void onCcClinicalTermValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().getSelectedItem() != null)
		{
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setParentEditing(Boolean.TRUE);
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setParentEditing(Boolean.TRUE, Boolean.FALSE);
		}
		else
		{
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setParentEditing(Boolean.TRUE);
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setParentEditing(Boolean.FALSE, Boolean.TRUE);
			
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setDescription(null);
		}
		
		if (Boolean.TRUE.equals(form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().isAllSelected()))
		{
			form.ctnDiagnosisControls().GroupSelection().setValue(GroupSelectionEnumeration.rdoDiagDatabase);
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setHotlist(new Boolean(false));
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().search();
		}
		else if (Boolean.TRUE.equals(form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().isDiagnosesDatabaseSelected()))
		{
			form.ctnDiagnosisControls().GroupSelection().setValue(GroupSelectionEnumeration.rdoDiagDatabase);
			form.ctnDiagnosisControls().cmbDivision().setValue(null);
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setDivisionOrDiagnosesDatabase(null, true);
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().search();
		}

	}

	@Override
	protected void onRadioButtonGroupSelectionValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.ctnDiagnosisControls().cmbDivision().setValue(null);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setHotlist(form.ctnDiagnosisControls().GroupSelection().getValue().equals(GroupSelectionEnumeration.rdoDiagSpec));
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setDivisionOrDiagnosesDatabase(form.ctnDiagnosisControls().cmbDivision().getValue(), form.ctnDiagnosisControls().GroupSelection().getValue().equals(GroupSelectionEnumeration.rdoDiagDatabase));
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.NEW_COMORBIDITY:
				newComorbidityInstance();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.EDIT_COMORBIDITY:
				updateViewCoMorbidityInstance(true);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.VIEW_COMORBIDITY:
				form.getLocalContext().setPreviousFormMode(form.getMode()); //WDEV-20282
				updateViewCoMorbidityInstance(false);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcCoMorbidityMenu.RIE:
				form.getLocalContext().setWhatsBeingEdited(ITS_COMORBIDITY);//WDEV-18622
				markAsRie(form.ctnCurrentDiagnoses().grdComorbidity().getValue());
				break;

			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.NEW_COMPLICATION:
				newComplicationInstance();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.EDIT_COMPLICATION:
				updateViewComplicationInstance(true);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.VIEW_COMPLICATIOn:
				updateViewComplicationInstance(false);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcComplicationMenu.RIE:
				form.getLocalContext().setWhatsBeingEdited(ITS_COMPLICATION);//WDEV-18622
				markAsRie(form.ctnCurrentDiagnoses().grdComplications().getValue());
				break;

			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.NEW_DIAGNOSIS:
				newDiagnosisInstance();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.EDIT_DIAGNOSIS:
				updateViewDiagnosisInstance(true);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.VIEW_DIAGNOSIS:
				updateViewDiagnosisInstance(false);
				break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisEtcDiagnosisMenu.RIE:
				form.getLocalContext().setWhatsBeingEdited(ITS_DIAGNOSIS);//WDEV-18622
				markAsRie(form.ctnCurrentDiagnoses().grdDiagnoses().getValue());
				break;
		}
		updateControlsState();
	}

	private void markAsRie(PatientDiagnosisEDischargeListVo value)
	{
		if (value == null)
			return;
		
		form.getLocalContext().setDiagToBeRied(value);
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	private void updateViewCoMorbidityInstance(boolean bEdit)
	{
		if(grdComorbiditySelectionChanged()) //WDEV-20511
		{
			showHideContainersCurrDiagComrComp(false, false, true, false);

			form.setMode(bEdit ? FormMode.EDIT : FormMode.VIEW);

			if (form.getMode().equals(FormMode.EDIT))
			{
				form.ctnCoMorbidityControls().GroupSelectionComor().setEnabled(true);
				form.getLocalContext().setWhatsBeingEdited(ITS_COMORBIDITY);
			}
			form.ctnCoMorbidityControls().GroupSelectionComor().setValue(null);

			form.ctnCoMorbidityControls().lnkComorReturn().setVisible(!bEdit);



			updateContextMenus();

			enableDisableComorbidityInstanceControls(bEdit);

			//		WDEV-20098

			//		if ( bEdit 
			//				&& ( form.getLocalContext().getbExistingPrimaryComMorbidity() 
			//					&& ! form.ctnCoMorbidityControls().chkPrimCoMorbidity().getValue()  ) )
			//				form.ctnCoMorbidityControls().chkPrimCoMorbidity().setEnabled(false);
			//------------------------


			if (bEdit)
			{
				form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

				form.getLocalContext().setLastEvent(null);
				form.fireCustomControlValueChanged();
			}
		}
		else //WDEV-20511
		{
			open();
		}
	}

	private boolean grdComorbiditySelectionChanged() //WDEV-20511
	{
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);

		if (form.ctnCurrentDiagnoses().grdComorbidity().getValue() != null)
		{
			PatientDiagnosisEDischargeVo voPatDiag = domain.getDiagnosisVo(form.ctnCurrentDiagnoses().grdComorbidity().getValue());

			//WDEV-20511
			if (voPatDiag == null)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
			// --
			
			if (voPatDiag != null && voPatDiag.getStatusHistoryIsNotNull())
				setTooltip(voPatDiag);
			else
				setTooltip(null);

			populateComorbidityInstanceControls(voPatDiag);
			
//			WDEV-20098
			
//			boolean isPrimaryDiagnosis = isPrimaryDiagnosisActive(voPatDiag);
//			form.ctnCoMorbidityControls().chkPrimCoMorbidity().setValue(isPrimaryDiagnosis);

//------------------------------

			
			form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

			updateControlsState();
			updateContextMenus();
		}
		return true; //WDEV-20511
	}

	private void populateComorbidityInstanceControls(PatientDiagnosisEDischargeVo voPatDiag)
	{
		clearComorbidityInstanceControls();

		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setValue(voPatDiag);

		form.ctnCoMorbidityControls().cmbComorbLaterality().setValue(voPatDiag.getDiagLateralityIsNotNull() ? voPatDiag.getDiagLaterality() : null);	//wdev-18841
		StringBuffer tooltip = new StringBuffer(); 
		
		//tooltip.append(voPatDiag.getDiagLateralityIsNotNull() ? "<b>Laterality: </b>" + voPatDiag.getDiagLaterality().getText() + "<br>" : "");
		tooltip.append(voPatDiag.getSiteTextIsNotNull() ? "<b>Site: </b>" + voPatDiag.getSiteText() + "<br>" : "");
		tooltip.append(voPatDiag.getDiagnosedDateIsNotNull() ? "<b>Date Diagnosed: </b>" + voPatDiag.getDiagnosedDate().toString() + "<br>" : "");
		tooltip.append(voPatDiag.getDateOnsetIsNotNull() ? "<b>Onset Date: </b>" + voPatDiag.getDateOnset().toString() + "<br>" : "");
		
		form.ctnCoMorbidityControls().imbInfoCoMorbidity().setTooltip(tooltip.toString());
		
		form.ctnCoMorbidityControls().ccComorbAuthoring().setValue(voPatDiag.getAuthoringInfo());

//		WDEV-20098
//		form.ctnCoMorbidityControls().chkPrimCoMorbidity().setValue(false);
		
		form.ctnCoMorbidityControls().chkDiagnosedOnAdmissionComorb().setValue(voPatDiag.getDiagnosedOnAdmissionIsNotNull() ? voPatDiag.getDiagnosedOnAdmission() : false); //WDEV-19860

//		WDEV-20098
//		if (voPatDiag.getPrimaryForCareSpellsIsNotNull())
//		{
//			for (int i = 0; i < voPatDiag.getPrimaryForCareSpells().size(); i++)
//			{
//				if ((voPatDiag.getPrimaryForCareSpells().get(i).getCareContextIsNotNull()) && (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCareIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull()) && (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCare().getID_EpisodeOfCare().equals(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getID_EpisodeOfCare())))
//					form.ctnCoMorbidityControls().chkPrimCoMorbidity().setValue(true);
//			}
//		}
//------------------------------------
				
		form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

		updateContextMenus();
	}

	private void updateViewComplicationInstance(boolean bEdit)
	{
		if (grdComplicationSelectionChanged()) //WDEV-20511
		{
			showHideContainersCurrDiagComrComp(false, false, false, true);
			form.setMode(bEdit ? FormMode.EDIT : FormMode.VIEW);

			if (form.getMode().equals(FormMode.EDIT))
			{
				form.ctnComplicationsControls().GroupSelectionComp().setEnabled(true);
				form.getLocalContext().setWhatsBeingEdited(ITS_COMPLICATION);
			}
			form.ctnComplicationsControls().GroupSelectionComp().setValue(null);

			form.ctnComplicationsControls().lnkComplicationReturn().setVisible(!bEdit);
			
			updateContextMenus();
			enableDisableComplicationInstanceControls(bEdit);

			if (bEdit)
			{
				form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

				form.getLocalContext().setLastEvent(null);
				form.fireCustomControlValueChanged();
			}
		}
		else //WDEV-20511
		{
			open();
		}
	}

	private boolean grdComplicationSelectionChanged() //WDEV-20511
	{
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);

		if (form.ctnCurrentDiagnoses().grdComplications().getValue() != null)
		{
			PatientDiagnosisEDischargeVo voPatDiag = domain.getDiagnosisVo(form.ctnCurrentDiagnoses().grdComplications().getValue());
			
			//WDEV-20511
			if (voPatDiag == null)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
			// -- 

			if (voPatDiag != null && voPatDiag.getStatusHistoryIsNotNull())
				setTooltip(voPatDiag);
			else
				setTooltip(null);

			populateComplicationInstanceControls(voPatDiag);
			form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

			updateControlsState();
			updateContextMenus();
		}
		return true; //WDEV-20511
	}

	private void populateComplicationInstanceControls(PatientDiagnosisEDischargeVo voPatDiag)
	{
		clearComplicationInstanceControls();

		form.ctnComplicationsControls().ccCompClinicalTerm().setValue(voPatDiag);

		form.ctnComplicationsControls().cmbCompLaterality().setValue(voPatDiag.getDiagLateralityIsNotNull() ? voPatDiag.getDiagLaterality() : null);	//wdev-18841
		form.ctnComplicationsControls().chkDiagnosedOnAdmissionComp().setValue(voPatDiag.getDiagnosedOnAdmissionIsNotNull() ? voPatDiag.getDiagnosedOnAdmission() : false); //WDEV-19860
		StringBuffer tooltip = new StringBuffer(); 
		
		//tooltip.append(voPatDiag.getDiagLateralityIsNotNull() ? "<b>Laterality: </b>" + voPatDiag.getDiagLaterality().getText() + "<br>" : "");
		tooltip.append(voPatDiag.getSiteTextIsNotNull() ? "<b>Site: </b>" + voPatDiag.getSiteText() + "<br>" : "");
		tooltip.append(voPatDiag.getDiagnosedDateIsNotNull() ? "<b>Date Diagnosed: </b>" + voPatDiag.getDiagnosedDate().toString() + "<br>" : "");
		tooltip.append(voPatDiag.getDateOnsetIsNotNull() ? "<b>Onset Date: </b>" + voPatDiag.getDateOnset().toString() + "<br>" : "");
		
		form.ctnComplicationsControls().imbInfoComplication().setTooltip(tooltip.toString());

		form.ctnComplicationsControls().ccCompAuthoring().setValue(voPatDiag.getAuthoringInfo());
		
		form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

		updateContextMenus();
	}

	private void newComplicationInstance()
	{
		showHideContainersCurrDiagComrComp(false, false, false, true);

		clearComplicationInstanceControls();
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);
		form.getLocalContext().setWhatsBeingEdited(ITS_COMPLICATION);

		form.setMode(FormMode.EDIT);
		enableDisableComplicationInstanceControls(true);

		form.ctnComplicationsControls().GroupSelectionComp().setEnabled(true);
		form.ctnComplicationsControls().GroupSelectionComp().setValue(ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnComplicationsControlsContainer.GroupSelectionCompEnumeration.rdoCompHotlist);
		setInitialCustomControlCodingComplicationSettings();
		form.ctnComplicationsControls().ccCompAuthoring().initializeComponent();

		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	private void clearComplicationInstanceControls()
	{
		form.ctnComplicationsControls().cmbCompLaterality().setValue(null);		//wdev-18841
		form.ctnComplicationsControls().ccCompClinicalTerm().clear();
		form.ctnComplicationsControls().ccCompAuthoring().setValue(null);
		form.ctnComplicationsControls().chkDiagnosedOnAdmissionComp().setValue(false); //WDEV-19860
		form.ctnComplicationsControls().imbInfoComplication().setTooltip("");
	}

	private void showHideContainersCurrDiagComrComp(boolean bCurr, boolean bDiag, boolean bComorb, boolean bComp)
	{
		form.ctnCurrentDiagnoses().setVisible(bCurr);
		form.ctnDiagnosisControls().setVisible(bDiag);
		form.ctnCoMorbidityControls().setVisible(bComorb);
		form.ctnComplicationsControls().setVisible(bComp);
	}

	private void newComorbidityInstance()
	{
		showHideContainersCurrDiagComrComp(false, false, true, false);

		clearComorbidityInstanceControls();
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);
		form.getLocalContext().setWhatsBeingEdited(ITS_COMORBIDITY);

		form.setMode(FormMode.EDIT);
		enableDisableComorbidityInstanceControls(true);

//		WDEV-20098
//		if ( form.getLocalContext().getbExistingPrimaryComMorbidity())
//			form.ctnCoMorbidityControls().chkPrimCoMorbidity().setEnabled(false);

		form.ctnCoMorbidityControls().GroupSelectionComor().setEnabled(true);
		form.ctnCoMorbidityControls().GroupSelectionComor().setValue(GroupSelectionComorEnumeration.rdoComorbHotlist);
		setInitialCustomControlCodingCoMorbiditySettings();
		form.ctnCoMorbidityControls().ccComorbAuthoring().initializeComponent();

//		WDEV-20098
//		if ( form.getLocalContext().getbExistingPrimaryComMorbidity())
//			form.ctnCoMorbidityControls().chkPrimCoMorbidity().setEnabled(false);
		
		updateContextMenus();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	private void enableDisableComplicationInstanceControls(boolean bEnable)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.grdPrevious().setEnabled(!bEnable);

			form.ctnComplicationsControls().ccCompClinicalTerm().setEnabled(bEnable);
			form.ctnComplicationsControls().cmbCompLaterality().setEnabled(bEnable);	//wdev-18841

			form.ctnComplicationsControls().ccCompAuthoring().setEnabledAuthoringHCP(bEnable);
			form.ctnComplicationsControls().ccCompAuthoring().setEnabledDateTime(bEnable);
			form.ctnComplicationsControls().chkDiagnosedOnAdmissionComp().setEnabled(bEnable && form.getLocalContext().getSelectedPatientDiagnosisVo() == null && ITS_COMPLICATION.equals(form.getLocalContext().getWhatsBeingEdited()));

			form.ctnComplicationsControls().GroupSelectionComp().setEnabled(bEnable);
			form.ctnComplicationsControls().setccCompClinicalTermEnabled(bEnable);
			form.ctnComplicationsControls().ccCompClinicalTerm().setParentEditing(bEnable);
		}
		else
		{
			form.ctnComplicationsControls().cmbCompLaterality().setEnabled(bEnable);	//wdev-19028
			form.ctnComplicationsControls().ccCompClinicalTerm().setEnabled(bEnable);
			form.ctnComplicationsControls().ccCompAuthoring().setEnabledAuthoringHCP(bEnable);
			form.ctnComplicationsControls().ccCompAuthoring().setEnabledDateTime(bEnable);
			form.ctnComplicationsControls().setccCompClinicalTermEnabled(bEnable);
		}
	}

	private void enableDisableComorbidityInstanceControls(boolean bEnable)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.grdPrevious().setEnabled(!bEnable);

			form.ctnCoMorbidityControls().cmbComorbLaterality().setEnabled(bEnable);	//wdev-18841
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setEnabled(bEnable);
			form.ctnCoMorbidityControls().ccComorbAuthoring().setEnabledAuthoringHCP(bEnable);
			form.ctnCoMorbidityControls().ccComorbAuthoring().setEnabledDateTime(bEnable);
//			form.ctnCoMorbidityControls().chkPrimCoMorbidity().setEnabled(bEnable); WDEV-20098
			form.ctnCoMorbidityControls().chkDiagnosedOnAdmissionComorb().setEnabled(bEnable && form.getLocalContext().getSelectedPatientDiagnosisVo() == null && ITS_COMORBIDITY.equals(form.getLocalContext().getWhatsBeingEdited()));

			form.ctnCoMorbidityControls().GroupSelectionComor().setEnabled(bEnable);
			form.ctnCoMorbidityControls().setccComorbClinicalTermEnabled(bEnable);
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setParentEditing(bEnable);
		}
		else
		{
			form.grdPrevious().setEnabled(bEnable);
			form.ctnCoMorbidityControls().cmbComorbLaterality().setEnabled(bEnable);	//wdev-19028
			form.ctnCoMorbidityControls().ccComorbAuthoring().setEnabledAuthoringHCP(bEnable);
			form.ctnCoMorbidityControls().ccComorbAuthoring().setEnabledDateTime(bEnable);
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setEnabled(bEnable);
			form.ctnCoMorbidityControls().setccComorbClinicalTermEnabled(bEnable);
		}
	}

	private void clearComorbidityInstanceControls()
	{
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().clear();
		form.ctnCoMorbidityControls().cmbComorbLaterality().setValue(null);	//wdev-18841
		form.ctnCoMorbidityControls().ccComorbAuthoring().setValue(null);
//		form.ctnCoMorbidityControls().chkPrimCoMorbidity().setValue(false); WDEV-20098
		form.ctnCoMorbidityControls().imbInfoCoMorbidity().setTooltip("");
		form.ctnCoMorbidityControls().chkDiagnosedOnAdmissionComorb().setValue(false); //WDEV-19860
	}

	public void initialise()
	{
		form.getLocalContext().setisReadonly(false);//	WDEV-13597
		
		open();
	}

	public void updateControlsState()
	{
		ctnCurrentDiagnosesContainer ctnCurrentDiagnoses = form.ctnCurrentDiagnoses();
		boolean isFormReadOnly = !form.getLocalContext().getCurrentDischargeDetailsIsNotNull();
		isFormReadOnly = isFormReadOnly || (form.getLocalContext().getisReadonlyIsNotNull() && form.getLocalContext().getisReadonly());
		
		if (form.getMode().equals(FormMode.VIEW))
		{

			form.ctnCoMorbidityControls().lnkComorReturn().setEnabled(true);
			form.ctnComplicationsControls().lnkComplicationReturn().setEnabled(true);
			form.ctnDiagnosisControls().lnkReturnToList().setEnabled(true);

			form.ctnDiagnosisControls().setccDiagnosisClinicalTermEnabled(false);
			form.ctnDiagnosisControls().setccDiagAuthoringEnabled(false);

			ctnCurrentDiagnoses.grdDiagnoses().setEnabled(true);
			ctnCurrentDiagnoses.grdDiagnoses().setReadOnly(isFormReadOnly);

			ctnCurrentDiagnoses.grdComorbidity().setEnabled(true);
			ctnCurrentDiagnoses.grdComorbidity().setReadOnly(isFormReadOnly);

			ctnCurrentDiagnoses.grdComplications().setEnabled(true);
			ctnCurrentDiagnoses.grdComplications().setReadOnly(isFormReadOnly);

			form.grdPrevious().setEnabled(true);
			form.grdPrevious().setReadOnly(isFormReadOnly );
		}
		else
		{
			form.ctnCoMorbidityControls().lnkComorReturn().setEnabled(false);
			form.ctnComplicationsControls().lnkComplicationReturn().setEnabled(false);
			form.ctnDiagnosisControls().lnkReturnToList().setEnabled(false);
		}

		
		
		updateGrdComorbidityRlevantColumnState();//WDEV-20282
		
		form.ctnDiagnosisControls().cmbDivision().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getSelectedPatientDiagnosisVo() == null);
		form.ctnDiagnosisControls().GroupSelection().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getSelectedPatientDiagnosisVo() == null);
		ctnCurrentDiagnoses.chkNoComor().setEnabled(!isFormReadOnly && !isAtLeastOneCoMorbidityRelevant() && !(DischargeLetterStatus.ARCHIVED.equals(form.getLocalContext().getCurrentDischargeDetails().getDischargeLetterStatus()) || DischargeLetterStatus.GENERATED.equals(form.getLocalContext().getCurrentDischargeDetails().getDischargeLetterStatus()))); //WDEV-19287 //WDEV-20282
		ctnCurrentDiagnoses.chkNoComp().setEnabled(!isFormReadOnly && !(ctnCurrentDiagnoses.grdComplications().getValues() != null && ctnCurrentDiagnoses.grdComplications().getValues().size() > 0));
		ctnCurrentDiagnoses.chkNoDiagnosis().setEnabled(!isFormReadOnly && !(ctnCurrentDiagnoses.grdDiagnoses().getValues() != null && ctnCurrentDiagnoses.grdDiagnoses().getValues().size() > 0));
		
		updateContextMenus();
	}

	private void initializeDiagnosisCustomControl()
	{
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setCodingItemType(CodingItemType.DIAGNOSIS);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setHotlist(new Boolean(true));
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setSpecialty(getSpecialty());
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setClinicalTermMandatory(true);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setDescriptionMandatory(true);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setParentEditing(Boolean.TRUE);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setParentEditing(Boolean.TRUE, Boolean.TRUE);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().hideTaxonomySearch();
		form.ctnDiagnosisControls().ccDiagAuthoring().setLabels(null); //WDEV-18827
	}

	private void initializeComplicationCustomControl()
	{
		form.ctnComplicationsControls().ccCompClinicalTerm().setCodingItemType(CodingItemType.DIAGNOSIS);
		form.ctnComplicationsControls().ccCompClinicalTerm().setHotlist(new Boolean(true));
		form.ctnComplicationsControls().ccCompClinicalTerm().setSpecialty(getSpecialty());
		form.ctnComplicationsControls().ccCompClinicalTerm().setClinicalTermMandatory(true);
		form.ctnComplicationsControls().ccCompClinicalTerm().setDescriptionMandatory(true);
		form.ctnComplicationsControls().ccCompClinicalTerm().setParentEditing(Boolean.TRUE);
		form.ctnComplicationsControls().ccCompClinicalTerm().setParentEditing(Boolean.TRUE, Boolean.TRUE);
		form.ctnComplicationsControls().ccCompAuthoring().setLabels(null);
	}

	private void initializeComorbidityCustomControl()
	{
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setCodingItemType(CodingItemType.DIAGNOSIS);
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setHotlist(new Boolean(true));
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setSpecialty(getSpecialty());
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setClinicalTermMandatory(true);
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setDescriptionMandatory(true);
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setParentEditing(Boolean.TRUE);
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setParentEditing(Boolean.TRUE, Boolean.TRUE);
		form.ctnCoMorbidityControls().ccComorbAuthoring().setLabels(null);
	}

	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) && (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}

	public void open()
	{
		form.ctnCurrentDiagnoses().grdDiagnoses().getRows().clear();
		form.ctnCurrentDiagnoses().grdComorbidity().getRows().clear();
		form.ctnCurrentDiagnoses().grdComplications().getRows().clear();

		form.getLocalContext().setWhatsBeingEdited(null);

		DischargeDetailsVo voDD = domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext());
		populateDD(voDD);

		// Get Discharge Clinical Information - it might be null
		form.getLocalContext().setDischargeClinicalInformation(domain.getDischargeClinicalInformation(form.getGlobalContext().Core.getCurrentCareContext()));
		
		if (form.getLocalContext().getCurrentDischargeDetails() == null)
		{
			disableScreen();
			return;
		}
		else
		{
			form.ctnCurrentDiagnoses().chkNoComor().setEnabled(true);
			form.ctnCurrentDiagnoses().chkNoComp().setEnabled(true);
			form.ctnCurrentDiagnoses().chkNoDiagnosis().setEnabled(true);
		}
		
		//Also retain ignored records
		
		StringBuilder ignored = new StringBuilder();
		comma = "";
		
		// First list Diagnosis records that were created in this care context
		PatientDiagnosisEDischargeListVoCollection voPatDiagColl = domain.listDiagnosis(form.getGlobalContext().Core.getEpisodeofCareShort());
		populateDiagnosisGrid(voPatDiagColl);
		constructIgnored(ignored, voPatDiagColl);//WDEV-12105

		PatientDiagnosisEDischargeListVoCollection voPatCommorbidColl = domain.listComorbidity(form.getGlobalContext().Core.getEpisodeofCareShort());
		constructIgnored(ignored, voPatCommorbidColl);//WDEV-12105
		
		PatientDiagnosisEDischargeListVoCollection previousComorbidity = domain.listPreviousComorbidity(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort().getStartDate(), ignored.length() > 0 ? ignored.toString() : null);
		populateComorbidityGrid(previousComorbidity, voPatCommorbidColl);
		
		PatientDiagnosisEDischargeListVoCollection voPatCompColl = domain.listComplications(form.getGlobalContext().Core.getEpisodeofCareShort());
		populateComplicationsGrid(voPatCompColl);
		constructIgnored(ignored, voPatCompColl);//WDEV-12105
		

		reselectSavedRecord();

		// Now list all Diagnoses for Previous Care Contexts for the bottom grid.
		PatientDiagnosisEDischargeListVoCollection voPreviousColl = domain.listPreviousRecordsForPatient(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort().getStartDate(),ignored.length()>0?ignored.toString():null);
		populatePreviousDiagnosisGrid(voPreviousColl);

		showHideContainersCurrDiagComrComp(true, false, false, false);
		updateContextMenus();

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);

		form.fireCustomControlValueChanged();
		updateControlsState();
	}

	private void constructIgnored(StringBuilder ignored, PatientDiagnosisEDischargeListVoCollection voPatDiagColl)//WDEV-12105
	{
		if (voPatDiagColl !=null && voPatDiagColl.size()>0)
		{
			for (int i = 0 ; i < voPatDiagColl.size() ; i++)
			{
				if (voPatDiagColl.get(i)!= null && voPatDiagColl.get(i).getID_PatientDiagnosisIsNotNull())
				{
					ignored.append(comma);
					comma=" ,";
					ignored.append(voPatDiagColl.get(i).getID_PatientDiagnosis());
					
				}
			}
		}
	}

	private void disableScreen()
	{
		updateContextMenus();

		form.ctnCurrentDiagnoses().grdComorbidity().setEnabled(false);
		form.ctnCurrentDiagnoses().grdComplications().setEnabled(false);
		form.ctnCurrentDiagnoses().grdDiagnoses().setEnabled(false);
		form.grdPrevious().setEnabled(false);

		form.ctnCurrentDiagnoses().chkNoComor().setEnabled(false);
		form.ctnCurrentDiagnoses().chkNoComp().setEnabled(false);
		form.ctnCurrentDiagnoses().chkNoDiagnosis().setEnabled(false);

		form.setMode(FormMode.VIEW);
	}

	private void populateDD(DischargeDetailsVo voDD)
	{
		form.getLocalContext().setCurrentDischargeDetails(voDD);

		if (voDD != null)
		{
			form.ctnCurrentDiagnoses().chkNoComor().setValue(voDD.getHasNoComorbidities());
			form.ctnCurrentDiagnoses().chkNoComp().setValue(voDD.getHasNoComplications());
			
			PatientNoDiagInfoForCCVo patientNoDiagInfo = domain.getPatientNoDiagInfoForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (patientNoDiagInfo != null)
			{
				form.ctnCurrentDiagnoses().chkNoDiagnosis().setValue(PatientDiagnosisStatus.NOKNOWNDIAGNOSISFOREPISODE.equals(patientNoDiagInfo.getDiagnosisStatus()));
			}
			else
				form.ctnCurrentDiagnoses().chkNoDiagnosis().setValue(voDD.getHasNoDiagnosis());
		}
	}

	private void populatePreviousDiagnosisGrid(PatientDiagnosisEDischargeListVoCollection voPreviousColl)
	{
		form.grdPrevious().getRows().clear();
		if (voPreviousColl != null)
		{
			for (int i = 0; i < voPreviousColl.size(); i++)
			{
				/* Remove in WDEV-12105
				boolean bAddrow = false;
				for (int j = 0; j < form.ctnCurrentDiagnoses().grdDiagnoses().getRows().size(); j++)
				{
					if (form.ctnCurrentDiagnoses().grdDiagnoses().getRows().get(j).getValue().equals(voPreviousColl.get(i)))
						bAddrow = true;
				}
				/*WDEV-12042 - Start
				 * While this method of not showing previous diagnosis/comorbidities/complications 
				 * due to time constraint will implement like this. 
				 * Will also raise a new issue to remove all 3 fors
				 */
				/*
				if (!bAddrow)
				{
					for (int j = 0; j < form.ctnCurrentDiagnoses().grdComplications().getRows().size(); j++)
					{
						if (form.ctnCurrentDiagnoses().grdComplications().getRows().get(j).getValue().equals(voPreviousColl.get(i)))
							bAddrow = true;
					}
				}
				if (!bAddrow)
				{
					for (int j = 0; j < form.ctnCurrentDiagnoses().grdComorbidity().getRows().size(); j++)
					{
						if (form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(j).getValue().equals(voPreviousColl.get(i)))
							bAddrow = true;
					}
				}
				//WDEV-12042 -End
				if (!bAddrow)
				{*/
					grdPreviousRow row = form.grdPrevious().getRows().newRow();
					PatientDiagnosisEDischargeListVo patientDiagnosisListVo = voPreviousColl.get(i);

					setPreviousPatientDiagnosisRowData(row, patientDiagnosisListVo);
				//}
			}
		}

	}

	private void setPreviousPatientDiagnosisRowData(grdPreviousRow row, PatientDiagnosisEDischargeListVo patientDiagnosisListVo)
	{
		row.setColDCDesc(patientDiagnosisListVo.getDiagnosisDescriptionIsNotNull() ? patientDiagnosisListVo.getDiagnosisDescription() : "");
		

		row.setColDCCoMorbid(patientDiagnosisListVo.getIsComorbidityIsNotNull() ? (patientDiagnosisListVo.getIsComorbidity().booleanValue() ? form.getImages().Core.Pin : null) : null);
		row.setTooltipForColDCCoMorbid(patientDiagnosisListVo.getIsComorbidityIsNotNull() ? (patientDiagnosisListVo.getIsComorbidity().booleanValue() ? "Co-morbidity" : "") : "");

		row.setColDCDate(patientDiagnosisListVo.getCareContextIsNotNull() && patientDiagnosisListVo.getCareContext().getStartDateTimeIsNotNull() ? patientDiagnosisListVo.getCareContext().getStartDateTime().toString(): null);
		row.setTooltipForColDCDate(patientDiagnosisListVo.getCareContextIsNotNull() && patientDiagnosisListVo.getCareContext().getStartDateTimeIsNotNull() ? patientDiagnosisListVo.getCareContext().getStartDateTime().toString() : null);
		
		row.setColDCComp(patientDiagnosisListVo.getIsComplicationIsNotNull() ? (patientDiagnosisListVo.getIsComplication().booleanValue() ? form.getImages().Core.Tick : null) : null);
		row.setTooltipForColDCComp(patientDiagnosisListVo.getIsComplicationIsNotNull() ? (patientDiagnosisListVo.getIsComplication().booleanValue() ? "Complication" : "") : "");

		row.setColInclude(findIfIncludeSetForThisCareContext(patientDiagnosisListVo.getIncludeDiagnosisInDiscReports()) ? Boolean.TRUE : Boolean.FALSE);

		row.setValue(patientDiagnosisListVo);
	}

	private boolean findIfIncludeSetForThisCareContext(IncludeDiagnosisInDischargeReportVoCollection includeDiagnosisInDiscReports)
	{
		for (int i = 0; includeDiagnosisInDiscReports != null && i < includeDiagnosisInDiscReports.size(); i++)
		{
			if (includeDiagnosisInDiscReports.get(i).getCareContextIsNotNull() && includeDiagnosisInDiscReports.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()) && includeDiagnosisInDiscReports.get(i).getIncludeInReport())
				return true;
		}
		return false;
	}
	
	//WDEV-20098
	
	private boolean findIfRelevanteSetForThisCareContext(EpisodeOfCareCoMorbidityVoCollection relevantCoMorbidity)
	{
		for (int i = 0; relevantCoMorbidity != null && i < relevantCoMorbidity.size(); i++)
		{
			if (relevantCoMorbidity.get(i).getCareContextIsNotNull() && relevantCoMorbidity.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()) && Boolean.TRUE.equals(relevantCoMorbidity.get(i).getIsActive()))
				return true;
		}
		return false;
	}
	//---------------
	

	public void clearDiagnosisInstanceControls()
	{
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().clear();
		form.ctnDiagnosisControls().cmbDiagLaterality().setValue(null);			//wdev-18841
		form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setValue(false);
		form.ctnDiagnosisControls().ccDiagAuthoring().setValue(null);
		form.ctnDiagnosisControls().cmbDivision().setValue(null);
		form.ctnDiagnosisControls().chkCoMorbidity().setValue(false);
		form.ctnDiagnosisControls().imbInfoDiagnosis().setTooltip("");
		form.ctnDiagnosisControls().chkDiagnosedOnAdmission().setValue(false); //WDEV-19860
	}

	public void enableDisableDiagnosisInstanceControls(boolean bEnable)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnCurrentDiagnoses().grdDiagnoses().setEnabled(!bEnable);
			form.ctnCurrentDiagnoses().grdDiagnoses().setEnabled(!bEnable);

			form.ctnDiagnosisControls().cmbDiagLaterality().setEnabled(bEnable);	//wdev-18841
			form.grdPrevious().setEnabled(!bEnable);
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setEnabled(bEnable);
			form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setEnabled(bEnable);
			form.ctnDiagnosisControls().chkCoMorbidity().setEnabled(bEnable); //WDEV-20282
			form.ctnDiagnosisControls().chkDiagnosedOnAdmission().setEnabled(bEnable && form.getLocalContext().getSelectedPatientDiagnosisVo() == null && ITS_DIAGNOSIS.equals(form.getLocalContext().getWhatsBeingEdited()));
			
			form.ctnDiagnosisControls().setccDiagAuthoringEnabled(bEnable); // WDEV-18868 
			
			form.ctnDiagnosisControls().ccDiagAuthoring().setEnabledAuthoringHCP(bEnable);
			form.ctnDiagnosisControls().ccDiagAuthoring().setEnabledDateTime(bEnable);
			form.ctnDiagnosisControls().GroupSelection().setEnabled(bEnable);
			form.ctnDiagnosisControls().setccDiagnosisClinicalTermEnabled(bEnable);

			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setParentEditing(bEnable);
		}
		else
		{
			form.ctnDiagnosisControls().cmbDiagLaterality().setEnabled(bEnable);	//wdev-wdev-19028
			form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setEnabled(bEnable);//WDEV-13897 
			form.ctnDiagnosisControls().ccDiagAuthoring().setEnabledAuthoringHCP(bEnable);
			form.ctnDiagnosisControls().ccDiagAuthoring().setEnabledDateTime(bEnable);
		}

	}

	private void populateDiagnosisGrid(PatientDiagnosisEDischargeListVoCollection voPatDiagColl)
	{
		form.getLocalContext().setbExistingPrimaryDiagnosis(Boolean.FALSE);

		if (voPatDiagColl != null)
		{
			for (int i = 0; i < voPatDiagColl.size(); i++)
			{
				grdDiagnosesRow row = form.ctnCurrentDiagnoses().grdDiagnoses().getRows().newRow();
				PatientDiagnosisEDischargeListVo patientDiagnosisListVo = voPatDiagColl.get(i);

				setPatientDiagnosisRowData(row, patientDiagnosisListVo);
			}
		}
	}

	private void populateComorbidityGrid(PatientDiagnosisEDischargeListVoCollection previousComorbidity, PatientDiagnosisEDischargeListVoCollection voPatComorbColl)
	{
		form.getLocalContext().setbExistingPrimaryComMorbidity(Boolean.FALSE);
		boolean hasAtleastOnePreviousOrCurrentComorbidity = false; //WDEV-19287
		
		// Populate previous comorbidity
		if (previousComorbidity != null && previousComorbidity.size() > 0)
		{
			for (PatientDiagnosisEDischargeListVo comorbidity : previousComorbidity)
			{
				grdComorbidityRow row = form.ctnCurrentDiagnoses().grdComorbidity().getRows().newRow();
				setPatientComorbRowData(row, comorbidity);
				
				if (!comorbidity.getEpisodeOfCare().equals(form.getGlobalContext().Core.getEpisodeofCareShort()))
					row.setTextColor(Color.Gray);
			}
			
			if (isAtLeastOneCoMorbidityRelevant()) //WDEV-20282
				hasAtleastOnePreviousOrCurrentComorbidity = true;
		}
		
		if (voPatComorbColl != null && voPatComorbColl.size() > 0)
		{
			 
			for (int i = 0; i < voPatComorbColl.size(); i++)
			{
				grdComorbidityRow row = form.ctnCurrentDiagnoses().grdComorbidity().getRows().newRow();
				PatientDiagnosisEDischargeListVo patientComorbidListVo = voPatComorbColl.get(i);
				
				if (!patientComorbidListVo.getEpisodeOfCare().equals(form.getGlobalContext().Core.getEpisodeofCareShort()))
					row.setTextColor(Color.Gray);

				setPatientComorbRowData(row, patientComorbidListVo);			
			}
			if (isAtLeastOneCoMorbidityRelevant()) //WDEV-20282
				hasAtleastOnePreviousOrCurrentComorbidity = true;
		}		
		if (hasAtleastOnePreviousOrCurrentComorbidity && form.ctnCurrentDiagnoses().chkNoComor().getValue()) //WDEV-19287
			form.ctnCurrentDiagnoses().chkNoComor().setValue(Boolean.FALSE);
	}

	private void populateComplicationsGrid(PatientDiagnosisEDischargeListVoCollection voPatComorbColl)
	{
		if (voPatComorbColl != null)
		{
			for (int i = 0; i < voPatComorbColl.size(); i++)
			{
				grdComplicationsRow row = form.ctnCurrentDiagnoses().grdComplications().getRows().newRow();
				PatientDiagnosisEDischargeListVo patientCompListVo = voPatComorbColl.get(i);

				setPatientComplicationRowData(row, patientCompListVo);
			}
		}

	}

	private void setTooltip(PatientDiagnosisEDischargeVo voPatDiag)
	{
		if (voPatDiag != null && voPatDiag.getStatusHistoryIsNotNull() && voPatDiag.getStatusHistory().size() > 0)
		{
			PatientDiagnosisStatusVoCollection collVo = voPatDiag.getStatusHistory();

			String tooltip = "";
			String setFont = "<FONT FACE='Times New Roman' SIZE='2'>";
			String endFont = "</FONT>";
			String table = "<TABLE CELLPADDING='1' CELLSPACING='1' BORDER='3' ><TR><TD BGCOLOR=\'#BBBBFF\' ALIGN='LEFT'>";
			String endStatus = endFont + "<B></TD></TR><TR>";
			String dateTime = "<TD colspan=1 width=60% align=\'LEFT\'> " + setFont;
			String hcp = endFont + "</TD><TD colspan=1 width=60% align=\'LEFT\'>" + setFont;
			String end = endFont + "</TD></TR><TR></TABLE>";

			for (int i = 0; i < collVo.size(); i++)
			{
				tooltip += table + setFont + "<B>" + (i + 1) + ". " + collVo.get(i).getStatus() + endStatus + endFont + dateTime + collVo.get(i).getAuthoringDateTime() + hcp + collVo.get(i).getAuthoringHCP() + end;
			}

		}
	}

	private void setPatientDiagnosisRowData(grdDiagnosesRow row, PatientDiagnosisEDischargeListVo patientDiagnosisListVo)
	{
		row.setColDiagnosis(patientDiagnosisListVo.getDiagnosisDescriptionIsNotNull() ? patientDiagnosisListVo.getDiagnosisDescription() : "");
		row.setColAuthoringHCPDateTime(patientDiagnosisListVo.getAuthoringInfoIsNotNull() ? patientDiagnosisListVo.getAuthoringInfo().toString() : null);

		if (patientDiagnosisListVo.getSysInfoIsNotNull() && patientDiagnosisListVo.getSysInfo().getLastupdateUser() != null)
			row.setColAudit(form.getImages().Core.EditDisabled);

		boolean isPrimaryDiagnosis = isPrimaryDiagnosisActive(patientDiagnosisListVo);
		row.setColPrimary(isPrimaryDiagnosis ? Boolean.TRUE : Boolean.FALSE);
		
		if (isPrimaryDiagnosis)
			form.getLocalContext().setbExistingPrimaryDiagnosis(Boolean.TRUE);

		row.setColInclude(findIfIncludeSetForThisCareContext(patientDiagnosisListVo.getIncludeDiagnosisInDiscReports()) ? Boolean.TRUE : Boolean.FALSE);

		row.setValue(patientDiagnosisListVo);
	}

	private void setPatientComorbRowData(grdComorbidityRow row, PatientDiagnosisEDischargeListVo patientComorbidityListVo)
	{
		row.setColDiagnosis(patientComorbidityListVo.getDiagnosisDescriptionIsNotNull() ? patientComorbidityListVo.getDiagnosisDescription() : "");
		row.setColAuthoringHCPDateTime(patientComorbidityListVo.getAuthoringInfoIsNotNull() ? patientComorbidityListVo.getAuthoringInfo().toString() : null);

		if (patientComorbidityListVo.getSysInfoIsNotNull() && patientComorbidityListVo.getSysInfo().getLastupdateUser() != null)
			row.setColAudit(form.getImages().Core.EditDisabled);
		
//		WDEV-20098
//		boolean isPrimaryDiagnosis = isPrimaryDiagnosisActive(patientComorbidityListVo);
//		row.setColPrimary(isPrimaryDiagnosis ? Boolean.TRUE : Boolean.FALSE);
//
//		if (isPrimaryDiagnosis)
//			form.getLocalContext().setbExistingPrimaryComMorbidity(Boolean.TRUE);
//------------------------------

		row.setColRelevantForEpisode(findIfRelevanteSetForThisCareContext(patientComorbidityListVo.getCoMorbidityForEpisodeOfCares()) ? Boolean.TRUE : Boolean.FALSE);//WDEV-20098
		row.setColInclude(findIfIncludeSetForThisCareContext(patientComorbidityListVo.getIncludeDiagnosisInDiscReports()) ? Boolean.TRUE : Boolean.FALSE);

		row.setValue(patientComorbidityListVo);
	}

	private void setPatientComplicationRowData(grdComplicationsRow row, PatientDiagnosisEDischargeListVo patientCompListVo)
	{
		row.setColDiagnosis(patientCompListVo.getDiagnosisDescriptionIsNotNull() ? patientCompListVo.getDiagnosisDescription() : "");
		row.setColAuthoringHCPDateTime(patientCompListVo.getAuthoringInfoIsNotNull() ? patientCompListVo.getAuthoringInfo().toString() : null);

		if (patientCompListVo.getSysInfoIsNotNull() && patientCompListVo.getSysInfo().getLastupdateUser() != null)
			row.setColAudit(form.getImages().Core.EditDisabled);

		row.setColInclude(findIfIncludeSetForThisCareContext(patientCompListVo.getIncludeDiagnosisInDiscReports()) ? Boolean.TRUE : Boolean.FALSE);

		row.setValue(patientCompListVo);
	}

	private void reselectSavedRecord()
	{
		if (form.getLocalContext().getSelectedPatientDiagnosisVoIsNotNull())
		{
			PatientDiagnosisEDischargeVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			if (voPatientDiagnosis != null)
			{
				form.ctnCurrentDiagnoses().grdDiagnoses().setValue(voPatientDiagnosis);
				grdDiagnosisSelectionChanged();
			}
		}
	}

	public void updateViewDiagnosisInstance(boolean bEdit)
	{
		if (grdDiagnosisSelectionChanged()) //WDEV-20511
		{
			showHideContainersCurrDiagComrComp(false, true, false, false);

			form.setMode(bEdit ? FormMode.EDIT : FormMode.VIEW);

			if (form.getMode().equals(FormMode.EDIT))
			{
				form.ctnDiagnosisControls().GroupSelection().setEnabled(true);
				form.getLocalContext().setWhatsBeingEdited(ITS_DIAGNOSIS);
			}
			form.ctnDiagnosisControls().GroupSelection().setValue(null);
			form.ctnDiagnosisControls().cmbDivision().setValue(null);
			form.ctnDiagnosisControls().lnkReturnToList().setVisible(!bEdit);



			updateContextMenus();

			enableDisableDiagnosisInstanceControls(bEdit);

			if ( bEdit 
					&& ( form.getLocalContext().getbExistingPrimaryDiagnosis() 
							&& ! form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().getValue()  ) )
				form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setEnabled(false);

			if (bEdit)
			{
				form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

				form.getLocalContext().setLastEvent(null);
				form.fireCustomControlValueChanged();
			}
		}
		else //WDEV-20511
		{
			open();
		}
	}

	public void initializeComponent() throws ims.framework.exceptions.FormOpenException
	{
		updateContextMenus();

		form.getLocalContext().setbInitialised(null);
		form.getLocalContext().setisReadonly(false);

		form.getLocalContext().setEDischargeStarted(false);
		form.getLocalContext().setLastEvent(null);

	}

	
	private CSPrimaryDiagnosisVo populatePrimaryDiagnosisDataFromScreen(CSPrimaryDiagnosisVo primaryDiagnosisVo, PatientDiagnosisRefVo patientDiagnosisRef, boolean isPrimary, boolean diagnosisContainer)
	{
		if (primaryDiagnosisVo == null)
			primaryDiagnosisVo = new CSPrimaryDiagnosisVo();
		
		if (diagnosisContainer)
			primaryDiagnosisVo.setAuthoringInformation(form.ctnDiagnosisControls().ccDiagAuthoring().getValue());
		else
			primaryDiagnosisVo.setAuthoringInformation(form.ctnCoMorbidityControls().ccComorbAuthoring().getValue());
			
		primaryDiagnosisVo.setDiagnosis(patientDiagnosisRef);
		
		//WDEV-11910
		primaryDiagnosisVo.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		primaryDiagnosisVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		primaryDiagnosisVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		primaryDiagnosisVo.setIsActive(new Boolean(isPrimary));
		return primaryDiagnosisVo;
	}

	public void newDiagnosisInstance() throws PresentationLogicException
	{
		showHideContainersCurrDiagComrComp(false, true, false, false);

		clearDiagnosisInstanceControls();
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);
		form.getLocalContext().setWhatsBeingEdited(ITS_DIAGNOSIS);

		form.setMode(FormMode.EDIT);
		enableDisableDiagnosisInstanceControls(true);

		if ( form.getLocalContext().getbExistingPrimaryDiagnosis())
			form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setEnabled(false);

		form.ctnDiagnosisControls().GroupSelection().setEnabled(true);
		form.ctnDiagnosisControls().GroupSelection().setValue(ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnDiagnosisControlsContainer.GroupSelectionEnumeration.rdoDiagSpec);
		setInitialCustomControlCodingDiagnosisSettings();
		form.ctnDiagnosisControls().ccDiagAuthoring().initializeComponent();

		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	private void setInitialCustomControlCodingDiagnosisSettings()
	{
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setSearchAllSelected(Boolean.FALSE);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setHotlist(Boolean.TRUE);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setDivisionOrDiagnosesDatabase(form.ctnDiagnosisControls().cmbDivision().getValue(), form.ctnDiagnosisControls().GroupSelection().getValue().equals(GroupSelectionEnumeration.rdoDiagDatabase));
	}

	private void setInitialCustomControlCodingComplicationSettings()
	{
		form.ctnComplicationsControls().ccCompClinicalTerm().setSearchAllSelected(Boolean.FALSE);
		form.ctnComplicationsControls().ccCompClinicalTerm().setHotlist(Boolean.TRUE);
	}

	private void setInitialCustomControlCodingCoMorbiditySettings()
	{
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setSearchAllSelected(Boolean.FALSE);
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setHotlist(Boolean.TRUE);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save(false,false))
		{
			openAfterDiagnosisDetailsSave();//WDEV-11817
			/*WDEV-11817 Created a method as I need to call this twice 
			//WDEV-11414 SelectedPatientDiagnosisVo value not to be nulled until check for completion
			form.getLocalContext().setSelectedPatientDiagnosisVo(null);
			form.setMode(FormMode.VIEW);
			open();*/
		}
	}

	private boolean save(boolean diagnosisConfirmed,boolean questionAsked)
	{
		DischargeDetailsVo dd = getDiagnosisDetails(diagnosisConfirmed,questionAsked);
		if (dd == null)
			return false;
		
		PatientDiagnosisEDischargeListVoCollection toSave = new PatientDiagnosisEDischargeListVoCollection();
		PatientDiagnosisEDischargeListVo temp = null;
		if (form.getLocalContext().getWhatsBeingEditedIsNotNull())
		{
			if (form.getLocalContext().getWhatsBeingEdited().equals(ITS_DIAGNOSIS))
			{
				temp  = saveDiagnosis();
				if (temp == null)
					return false;
				//WDEV-19287 
				if (temp.getIsComorbidityIsNotNull() && Boolean.TRUE.equals(temp.getIsComorbidity()))
					dd = updateDischargeComorbidityComplicationRecorded(dd, true, false);
				toSave.add(temp);
				enableDisableDiagnosisInstanceControls(false);
			}
			else if (form.getLocalContext().getWhatsBeingEdited().equals(ITS_COMPLICATION))
				{
					
					temp  = saveComplication();
					if (temp == null)
						return false;
					//WDEV-19287 
					if (temp.getIsComplicationIsNotNull() && Boolean.TRUE.equals(temp.getIsComplication()))
						dd = updateDischargeComorbidityComplicationRecorded(dd, false,true);
					toSave.add(temp);
					enableDisableComplicationInstanceControls(false);
					
				}
				else if (form.getLocalContext().getWhatsBeingEdited().equals(ITS_COMORBIDITY))
				{
					temp  = saveComorbidity();
					if (temp == null)
						return false;
					//WDEV-19287 
					if (temp.getIsComorbidityIsNotNull() && Boolean.TRUE.equals(temp.getIsComorbidity()))
						dd = updateDischargeComorbidityComplicationRecorded(dd, true,false);
					toSave.add(temp);
					enableDisableComorbidityInstanceControls(false);
				}
		}
		
		// Validate UI Rules
		// errors = validateUIRulesDiagnosis(voDD);
		// Validate Vo
		String[] ddErrors = dd.validate();

		if (ddErrors != null)
		{
			engine.showErrors(ddErrors);
			return false;
		}
				
		if (form.getLocalContext().getCurrentDiagIncluded().booleanValue() || form.getLocalContext().getPreviousDiagIncluded().booleanValue())
		{
			 addIncludeInfo(toSave);
			 
			 String[] errors = null;
			 for (int i = 0 ; i < toSave.size() ; i++)
			 {
				 errors = toSave.validate(errors);
			 }
			 if (errors!=null && errors.length > 0)
			 {
				 engine.showErrors(errors);
				 return false;
			 }
		}
		//WDEV-20098
		if (form.getLocalContext().getCurrentComorbidityRelevant().booleanValue())
		{
			addRelevant(toSave);
			 String[] errors = null;
			 for (int i = 0 ; i < toSave.size() ; i++)
			 {
				 errors = toSave.validate(errors);
			 }
			 if (errors!=null && errors.length > 0)
			 {
				 engine.showErrors(errors);
				 return false;
			 }
		}
		//------
		
		RTLSummaryVo rTLSummary = populateRTLSummary(form.getGlobalContext().Core.getCurrentCareContext(),temp); //WDEV-18622
		PatientNoDiagInfoForCCVo patientNoDiagInfo = populatePatientNoDiagInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getPatientShort(),temp);
		
		try
		{
			form.getLocalContext().setCurrentDischargeDetails(domain.save(dd, toSave, form.getLocalContext().getSTHKSummary(), rTLSummary, patientNoDiagInfo));
		}
		
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedPatientDiagnosisVo(null);
			form.setMode(FormMode.VIEW);
			form.getLocalContext().setCurrentDiagIncluded(false);
			form.getLocalContext().setCurrentComorbidityRelevant(false); //WDEV-20098
			form.getLocalContext().setPreviousDiagIncluded(false);
			enableDisableDiagnosisInstanceControls(false);
			open();
			form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		form.getLocalContext().setCurrentDiagIncluded(false);
		form.getLocalContext().setCurrentComorbidityRelevant(false);//WDEV-20098
		form.getLocalContext().setPreviousDiagIncluded(false);
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);
		enableDisableDiagnosisInstanceControls(false);
		return true;
	}
	//WDEV-19287
	private DischargeDetailsVo updateDischargeComorbidityComplicationRecorded(DischargeDetailsVo dd, boolean comorbidityAdded, boolean complicationAdded)
	{
		if (dd == null)
			return null;
		if (comorbidityAdded)
			dd.setHasNoComorbidities(Boolean.FALSE);
		if (complicationAdded)
			dd.setHasNoComplications(Boolean.FALSE);

		return dd;
	}

	private PatientNoDiagInfoForCCVo populatePatientNoDiagInfo(CareContextShortVo careContext, PatientShort patientShort, PatientDiagnosisEDischargeListVo temp)
	{
		if (careContext == null)
			return null;

		boolean wereDiagnosisDetailsEntered = Boolean.TRUE.equals(form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue()) || (form.ctnCurrentDiagnoses().grdDiagnoses().getValues() != null && form.ctnCurrentDiagnoses().grdDiagnoses().getValues().size() >0) || (temp != null && !Boolean.TRUE.equals(temp.getIsComorbidity()) && !Boolean.TRUE.equals(temp.getIsComplication()));
		
		PatientNoDiagInfoForCCVo patientNoDiagInfo = domain.getPatientNoDiagInfoForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if (wereDiagnosisDetailsEntered)
		{
			if (patientNoDiagInfo == null)
			{
				patientNoDiagInfo = new PatientNoDiagInfoForCCVo();
			}
			
			AuthoringInformationVo authoringInformation = new AuthoringInformationVo();
			
			authoringInformation.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			authoringInformation.setAuthoringDateTime(new DateTime());
			
			patientNoDiagInfo.setAuthoringInformation(authoringInformation);
			patientNoDiagInfo.setCareContext(careContext);
			patientNoDiagInfo.setPatient(patientShort);
			
			if (Boolean.TRUE.equals(form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue()))
			{
				patientNoDiagInfo.setDiagnosisStatus(PatientDiagnosisStatus.NOKNOWNDIAGNOSISFOREPISODE);
			}
			else 
				patientNoDiagInfo.setDiagnosisStatus(PatientDiagnosisStatus.HASDIAGNOSISFOREPISODE);
				
		}
		else if (patientNoDiagInfo != null) //no Known Diagnosis was unchecked
		{
			AuthoringInformationVo authoringInformation = new AuthoringInformationVo();
			
			authoringInformation.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			authoringInformation.setAuthoringDateTime(new DateTime());
			
			patientNoDiagInfo.setAuthoringInformation(authoringInformation);
			patientNoDiagInfo.setCareContext(careContext);
			patientNoDiagInfo.setPatient(patientShort);
			
			patientNoDiagInfo.setDiagnosisStatus(PatientDiagnosisStatus.NOLONGERRELEVANT); 
		}
		
		return patientNoDiagInfo;
	}

	//WDEV-18622
	private RTLSummaryVo populateRTLSummary(CareContextShortVo careContext, PatientDiagnosisEDischargeListVo temp)
	{
		if (careContext == null)
			return null;
		//WDEV-19856
		PatientDiagnosisEDischargeListVoCollection gridDiagnosesColl = form.ctnCurrentDiagnoses().grdDiagnoses().getValues();
		if (form.getLocalContext().getWhatsBeingEditedIsNotNull() && form.getLocalContext().getWhatsBeingEdited() == ITS_DIAGNOSIS)
		{	
			if (temp != null && Boolean.TRUE.equals(temp.getIsComorbidity()) && gridDiagnosesColl.contains(temp))
				gridDiagnosesColl.remove(temp);
		}
		boolean wereDiagnosisDetailsEntered = Boolean.TRUE.equals(form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue()) || (gridDiagnosesColl != null && gridDiagnosesColl.size() >0) || (temp!=null && !Boolean.TRUE.equals(temp.getIsComorbidity()) && !Boolean.TRUE.equals(temp.getIsComplication()));
		//WDEV-19856 ----ends here
		
		//WDEV-20098
		//boolean wereCoMorbiditiesEntered = (form.ctnCurrentDiagnoses().grdComorbidity().getValues() != null && isAtLeastOneCoMorbidityIncluded(form.ctnCurrentDiagnoses().grdComorbidity().getValues()) || Boolean.TRUE.equals(form.ctnCurrentDiagnoses().chkNoComor().getValue()) || (temp!=null && Boolean.TRUE.equals(temp.getIsComorbidity()))); //WDEV-19820
		boolean wereCoMorbiditiesEntered = (form.ctnCurrentDiagnoses().grdComorbidity().getValues() != null && isAtLeastOneCoMorbidityRelevant() || Boolean.TRUE.equals(form.ctnCurrentDiagnoses().chkNoComor().getValue()) || (temp!=null && Boolean.TRUE.equals(temp.getIsComorbidity()))); //WDEV-20282
		//-------------------
		boolean wereComplicationsEntered = Boolean.TRUE.equals(form.ctnCurrentDiagnoses().chkNoComp().getValue()) || form.ctnCurrentDiagnoses().grdComplications().getValues() != null && form.ctnCurrentDiagnoses().grdComplications().getValues().size() > 0 || (temp!=null && Boolean.TRUE.equals(temp.getIsComplication()));
		
		RTLSummaryVo rTLSummary = domain.getRTLSummaryForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if (rTLSummary == null)
		{
			rTLSummary = new RTLSummaryVo();
		}
		
		rTLSummary.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		rTLSummary.setWereDiagnosisDetailsEntered(wereDiagnosisDetailsEntered);
		rTLSummary.setWereCoMorbiditiesEntered(wereCoMorbiditiesEntered);
		rTLSummary.setWereComplicationsEntered(wereComplicationsEntered);

		return rTLSummary;
	}
	//WDEV-19820
	private boolean isAtLeastOneCoMorbidityIncluded(PatientDiagnosisEDischargeListVoCollection values)
	{
		int rowCount = values.size();
		if (rowCount == 0)
			return false;
		for (int i=0;i<rowCount;i++)
		{
			if (values.get(i) == null)
				continue;
			if (form.ctnCurrentDiagnoses().grdComorbidity().getRowByValue(values.get(i)).getColInclude())
				return true;
		}
		return false;
	}
	
	//WDEV-20098 //WDEV-20282
	private boolean isAtLeastOneCoMorbidityRelevant()
	{
		for(int i=0; i<form.ctnCurrentDiagnoses().grdComorbidity().getRows().size(); i++) 
		{
			if (form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(i).getColRelevantForEpisode())
				return true;
		}
		return false;
	}
	//-------------
	
	//WDEV-20282
	private void updateGrdComorbidityRlevantColumnState()
	{
			for (int i=0;i<form.ctnCurrentDiagnoses().grdComorbidity().getRows().size(); i++)
			{
				form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(i).setColRelevantForEpisodeReadOnly(form.ctnCurrentDiagnoses().chkNoComor().getValue());
			}
	}
	//----------------

	//WDEV-11817
	private void openAfterDiagnosisDetailsSave()
	{
		resetPIDBarText(); //WDEV-14653
		
		//WDEV-11414 SelectedPatientDiagnosisVo value not to be nulled until check for completion
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);
		form.setMode(FormMode.VIEW);
		open();
	}
	
	//WDEV-14653
	private void resetPIDBarText()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
		return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()));
	
	}
	
	private DischargeDetailsVo getDiagnosisDetails(boolean diagnosisConfirmed,boolean questionAsked )//WDEV-11817
	{
		DischargeDetailsVo voDD = form.getLocalContext().getCurrentDischargeDetails();
		if (voDD == null)
		{
			throw new CodingRuntimeException("Saved is tried when edischarge has not been started");
		}
		voDD.setHasNoComorbidities(form.ctnCurrentDiagnoses().chkNoComor().getValue());
		voDD.setHasNoComplications(form.ctnCurrentDiagnoses().chkNoComp().getValue());
		
		/* WDEV-18627
		voDD.setHasNoDiagnosis(form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue());*/
		
		//WDEV-11414
		boolean hasComplicationsComorbiditiesInfo = hasComplicationsComorbiditiesInfo();
		boolean diagnosisCompleted = diagnosisCompleted();
		
		//WDEV-12847 voDD.setIsDiagnosisComplete((diagnosisCompleted && hasComplicationsComorbiditiesInfo) || (questionAsked && diagnosisConfirmed));//WDEV-11817
		
		//WDEV-11924
		if(form.getLocalContext().getIsSummaryUsed())	
		{
			
			//WDEV-11817 If diagnosis info are entered, and we don't have 
			//info on comorbidity or complications , ask, maybe diagnosis is complete
			if (diagnosisCompleted && !hasComplicationsComorbiditiesInfo )
			{
				if (!questionAsked)
				{

					//ask 
					form.getLocalContext().setConfirmDiagnosisMsgBoxId(engine.showMessage("Is diagnosis complete ?", "Question", MessageButtons.YESNO,MessageIcon.QUESTION));
					return null;

				}
				else
				{
					voDD.setIsDiagnosisComplete(diagnosisConfirmed);
				}
			}
		}
		return voDD;
	}

	/* WDEV-18627
	private String[] validateUIRulesDiagnosis(DischargeDetailsVo voDD)
	{
		ArrayList<String> errorList = new ArrayList<String>();

		PartialDate diagnosedate = form.ctnDiagnosisControls().pdtDiagnosed().getValue();
		PartialDate dobPatient = form.getGlobalContext().Core.getPatientShort().getDob();

		if (diagnosedate != null && dobPatient != null)
		{
			if (diagnosedate.getDay() == null && diagnosedate.getMonth() == null)
			{
				diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
				// form.ctnDiagnosisControls().pdtDiagnosed().setValue(diagnosedate);

			}
			else if (diagnosedate.getDay() == null)
			{
				diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
				// form.ctnDiagnosisControls().pdtDiagnosed().setValue(diagnosedate);

			}
			if (diagnosedate.isLessThan(dobPatient))
			{
				errorList.add("Date Diagnosted entered is before Patient's DOB");
			}
		}

		if (form.ctnDiagnosisControls().dteDiagOnset().getValue() != null && form.ctnDiagnosisControls().dteDiagOnset().getValue().isGreaterThan(new Date()))
		{
			errorList.add("Onset Date cannot be set into future");
		}

		int errorCount = errorList.size();
		if (errorCount == 0)
		{
			return null;
		}

		String[] errors = new String[errorCount];

		for (int i = 0; i < errors.length; i++)
		{
			errors[i] = errorList.get(i);
		}

		return errors;
	}
	*/
	
	private PatientDiagnosisEDischargeListVo saveComplication()
	{
		StringBuffer sb = new StringBuffer();

		IClinicalCodingValue voResult = form.ctnComplicationsControls().ccCompClinicalTerm().getValue();

		if (voResult == null)
			sb.append("Complication Term and Description are mandatory");

		if (voResult != null && voResult.getIClinicalCodingValueDescription() == null)
			sb.append("Complication Term and Description are mandatory");

		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString());
			return null;
		}
		
		/*
		String[] errors = null;
		PartialDate diagnosedate = form.ctnComplicationsControls().pdtCompDDiagnosed().getValue();
		PartialDate dobPatient = form.getGlobalContext().Core.getPatientShort().getDob();

		
		if (diagnosedate != null && dobPatient != null)
		{
			if (diagnosedate.getDay() == null && diagnosedate.getMonth() == null)
			{
				diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
				// form.ctnComplicationsControls().pdtCompDDiagnosed().setValue(diagnosedate);

			}
			else if (diagnosedate.getDay() == null)
			{
				diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
				// form.ctnComplicationsControls().pdtCompDDiagnosed().setValue(diagnosedate);

			}
			if (diagnosedate.isLessThan(dobPatient))
			{
				errors = new String[] { " Date Diagnosed entered is before Patient's DOB" };
			}
		}
		
		
		if (errors != null)

		{
			engine.showErrors(errors);
			return null;
		}
		*/
		
		PatientDiagnosisEDischargeListVo voPatientComplication = populateDataFromScreen(ITS_COMPLICATION);

		if (voPatientComplication.getDiagnosedDate() != null)
		{
			if (voPatientComplication.getDiagnosedDate().isGreaterThan(new Date()))
			{
				engine.showMessage("The Date Diagnosed cannot be in the future"); //WDEV-17969 
				//form.ctnComplicationsControls().pdtCompDDiagnosed().setFocus();
				return null;
			}
		}

		if (voPatientComplication.getDateOnset() != null)
		{
			if (voPatientComplication.getDateOnset().isGreaterThan(new Date()))
			{
				engine.showMessage("The onset date cannot be in the future");
				//form.ctnComplicationsControls().dteCompOnset().setValue(null);
				//form.ctnComplicationsControls().dteCompOnset().setFocus();

				return null;
			}
		}
		
		String[] errs = voPatientComplication.validate();
		if (errs !=null && errs.length>0)
		{
			engine.showErrors(errs);
			return null;
		}
		return voPatientComplication;
	}

	private PatientDiagnosisEDischargeListVo saveComorbidity()
	{
		StringBuffer sb = new StringBuffer();

		IClinicalCodingValue voResult = form.ctnCoMorbidityControls().ccComorbClinicalTerm().getValue();

		if (voResult == null)
			sb.append("Comorbidity Term and Description are mandatory");

		if (voResult != null && voResult.getIClinicalCodingValueDescription() == null)
			sb.append("Comorbidity Term and Description are mandatory");

		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString());
			return null;
		}
		
		
		PatientDiagnosisEDischargeListVo voPatientComorbidity = populateDataFromScreen(ITS_COMORBIDITY);

		if (voPatientComorbidity.getDiagnosedDate() != null)
		{
			if (voPatientComorbidity.getDiagnosedDate().isGreaterThan(new Date()))
			{
				engine.showMessage("The Date Diagnosed cannot be in the future"); //WDEV-17969 
				//form.ctnCoMorbidityControls().pdtComorbDateDiagnosed().setFocus();
				return null;
			}
		}

		if (voPatientComorbidity.getDateOnset() != null)
		{
			if (voPatientComorbidity.getDateOnset().isGreaterThan(new Date()))
			{
				engine.showMessage("The onset date cannot be in the future");
				//form.ctnCoMorbidityControls().pdtComorbDateDiagnosed().setValue(null);
				//form.ctnCoMorbidityControls().pdtComorbDateDiagnosed().setFocus();

				return null;
			}
		}
		String[] errs = voPatientComorbidity.validate();
		if (errs !=null && errs.length>0)
		{
			engine.showErrors(errs);
			return null;
		}
		return voPatientComorbidity;
	}
	//WDEV-20098
	private void addRelevant(PatientDiagnosisEDischargeListVoCollection toSave)
	{
		if (toSave == null)
			throw new CodingRuntimeException("Add Relevant to what ? Null collection!");
		for (int i = 0; i < form.ctnCurrentDiagnoses().grdComorbidity().getRows().size(); i++)
		{
			PatientDiagnosisEDischargeListVo voPatientComorb = form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(i).getValue();
			// Get value from toSave
			int index = toSave.indexOf(voPatientComorb);
			if (index != -1)
				voPatientComorb = toSave.get(index);

			voPatientComorb = relevant(voPatientComorb, form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(i).getColRelevantForEpisode());
			if (voPatientComorb != null)
			{
				
				
				if (index == -1)
				{
					toSave.add(voPatientComorb);
				}
				else
				{
					toSave.set(index, voPatientComorb);
				}
			}
			
			
		}
	}
	
	//----------------------
	

	private void addIncludeInfo(PatientDiagnosisEDischargeListVoCollection toSave)
	{
		if (toSave == null)
			throw new CodingRuntimeException("Add include info to what ? Null collection!");
		// Current Diagnoses in this Care Context
		for (int i = 0; i < form.ctnCurrentDiagnoses().grdDiagnoses().getRows().size(); i++)
		{
			//WDEV-20098
			PatientDiagnosisEDischargeListVo voPatientDiagnosis = form.ctnCurrentDiagnoses().grdDiagnoses().getRows().get(i).getValue(); //WDEV-20511
			voPatientDiagnosis = includeValueChangedForCareContext(voPatientDiagnosis, form.ctnCurrentDiagnoses().grdDiagnoses().getRows().get(i).getColInclude());

			if (voPatientDiagnosis != null)
			{
				int index = toSave.indexOf(voPatientDiagnosis);
				
				if (index == -1)
				{	
					toSave.add(voPatientDiagnosis);
				}
				else
				{
					toSave.set(index, voPatientDiagnosis);
				}
			}
			//-------------
		}

		// Current Co-Morbidities in this Care Context
		for (int i = 0; i < form.ctnCurrentDiagnoses().grdComorbidity().getRows().size(); i++)
		{
			PatientDiagnosisEDischargeListVo voPatientComorb = form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(i).getValue(); //WDEV-20511
			//WDEV-20098
			voPatientComorb = includeValueChangedForCareContext(voPatientComorb, form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(i).getColInclude());
			if (voPatientComorb != null)
			{
				int index = toSave.indexOf(voPatientComorb);
				
				if (index == -1)
				{	
					toSave.add(voPatientComorb);
				}
				else
				{
					toSave.set(index, voPatientComorb);
				}
			}
			//-----
		}

		// Current Complications in this Care Context
		for (int i = 0; i < form.ctnCurrentDiagnoses().grdComplications().getRows().size(); i++)
		{
			PatientDiagnosisEDischargeListVo voPatientComplication = form.ctnCurrentDiagnoses().grdComplications().getRows().get(i).getValue(); //WDEV-20511
			//WDEV-20098
			voPatientComplication = includeValueChangedForCareContext(voPatientComplication, form.ctnCurrentDiagnoses().grdComplications().getRows().get(i).getColInclude());
			if (voPatientComplication != null)
			{
				int index = toSave.indexOf(voPatientComplication);

				if (index == -1)
				{	
					toSave.add(voPatientComplication);
				}
				else
				{
					toSave.set(index, voPatientComplication);
				}
			}
		}
			//----

		// Previous Diagnoses
		for (int i = 0; i < form.grdPrevious().getRows().size(); i++)
		{
			PatientDiagnosisEDischargeListVo voPatientDiagnosis = form.grdPrevious().getRows().get(i).getValue(); //WDEV-20511
			//WDEV-20098
			PatientDiagnosisEDischargeListVo voUpdatedPatientDiagnosis = includeValueChangedForCareContext(voPatientDiagnosis, form.grdPrevious().getRows().get(i).getColInclude());
			if (voUpdatedPatientDiagnosis != null)
			{
				int index = toSave.indexOf(voUpdatedPatientDiagnosis);
				if (index == -1)
				{
					toSave.add(voUpdatedPatientDiagnosis);
				}
				else
				{
					toSave.set(index, voUpdatedPatientDiagnosis);
				}
			}
			//------
		}
	}

	//WDEV-20098
	private PatientDiagnosisEDischargeListVo relevant(PatientDiagnosisEDischargeListVo voPatientComorb, boolean bRelevant)
	{
		boolean bFound = false;
		for (int i = 0; voPatientComorb.getCoMorbidityForEpisodeOfCaresIsNotNull() && i < voPatientComorb.getCoMorbidityForEpisodeOfCares().size(); i++)
		{
			EpisodeOfCareCoMorbidityVo voRelevant = voPatientComorb.getCoMorbidityForEpisodeOfCares().get(i);
			if (voRelevant.getCareContextIsNotNull() && voRelevant.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
			{
				if (voRelevant.getIsActiveIsNotNull() && voRelevant.getIsActive().equals(bRelevant))
					return null;
				
				bFound = true;
				voRelevant.setIsActive(bRelevant);
				voPatientComorb.getCoMorbidityForEpisodeOfCares().set(i,voRelevant);
			}
		}
		if (!bFound)
		{
			EpisodeOfCareCoMorbidityVo voNewRelevant = new EpisodeOfCareCoMorbidityVo();
			voNewRelevant.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNewRelevant.setAuthoringInformation(voPatientComorb.getAuthoringInfo());
			voNewRelevant.setDiagnosis(voPatientComorb);
			voNewRelevant.setIsActive(bRelevant);
			if (voPatientComorb.getCoMorbidityForEpisodeOfCares() == null)
				voPatientComorb.setCoMorbidityForEpisodeOfCares(new EpisodeOfCareCoMorbidityVoCollection());
			voPatientComorb.getCoMorbidityForEpisodeOfCares().add(voNewRelevant);
		}
		return voPatientComorb;
	}
	//-------------
	
	private PatientDiagnosisEDischargeListVo includeValueChangedForCareContext(PatientDiagnosisEDischargeListVo voPatientDiagnosis, boolean bInclude) //WDEV-20511
	{
		boolean bFound = false;
		for (int i = 0; voPatientDiagnosis.getIncludeDiagnosisInDiscReportsIsNotNull() && i < voPatientDiagnosis.getIncludeDiagnosisInDiscReports().size(); i++)
		{
			IncludeDiagnosisInDischargeReportVo voInclude = voPatientDiagnosis.getIncludeDiagnosisInDiscReports().get(i);
			if (voInclude.getCareContextIsNotNull() && voInclude.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
			{
				// Include info exists and has not changed.
				if (voInclude.getIncludeInReportIsNotNull() && voInclude.getIncludeInReport().equals(bInclude))
					return null;

				bFound = true;
				voInclude.setIncludeInReport(bInclude);
				
				
				voPatientDiagnosis.getIncludeDiagnosisInDiscReports().set(i, voInclude);//Don't think this is necessary as we modify the object that is already in the List 
			}

		}
		if (!bFound)
		{
			IncludeDiagnosisInDischargeReportVo voNewInclude = new IncludeDiagnosisInDischargeReportVo();
			voNewInclude.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNewInclude.setDiagnosis(voPatientDiagnosis);
			voNewInclude.setIncludeInReport(bInclude);

			if (voPatientDiagnosis.getIncludeDiagnosisInDiscReports() == null)
				voPatientDiagnosis.setIncludeDiagnosisInDiscReports(new IncludeDiagnosisInDischargeReportVoCollection());

			voPatientDiagnosis.getIncludeDiagnosisInDiscReports().add(voNewInclude);
		}

		return voPatientDiagnosis;
	}

	public PatientDiagnosisEDischargeListVo saveDiagnosis()
	{
		StringBuffer sb = new StringBuffer();

		IClinicalCodingValue voResult = form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().getValue();

		if (voResult == null)
			sb.append("Diagnosis Term and Description are mandatory");

		if (voResult != null && voResult.getIClinicalCodingValueDescription() == null)
			sb.append("Diagnosis Term and Description are mandatory");

		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString());
			return null;
		}

		PatientDiagnosisEDischargeListVo voPatientDiagnosis = populateDataFromScreen(form.getLocalContext().getWhatsBeingEdited());

		if (voPatientDiagnosis.getDiagnosedDate() != null)
		{
			if (voPatientDiagnosis.getDiagnosedDate().isGreaterThan(new Date()))
			{
				engine.showMessage("The Date Diagnosed cannot be in the future"); //WDEV-17969 
				//form.ctnDiagnosisControls().pdtDiagnosed().setFocus();
				return null;
			}
			//wdev-12197
			PartialDate diagnosedate = voPatientDiagnosis.getDiagnosedDate();
			PartialDate dobPatient = form.getGlobalContext().Core.getPatientShort().getDob();

			if (diagnosedate != null && dobPatient != null)
			{
				if (diagnosedate.getDay() == null && diagnosedate.getMonth() == null)
				{
					diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
					// form.ctnDiagnosisControls().pdtDiagnosed().setValue(diagnosedate);

				}
				else if (diagnosedate.getDay() == null)
				{
					diagnosedate = new PartialDate(diagnosedate.getYear() != null ? diagnosedate.getYear() : new Integer(2000), diagnosedate.getMonth() != null ? diagnosedate.getMonth() : new Integer(1), diagnosedate.getDay() != null ? diagnosedate.getDay() : new Integer(1));
					// form.ctnDiagnosisControls().pdtDiagnosed().setValue(diagnosedate);

				}
				if (diagnosedate.isLessThan(dobPatient))
				{
					engine.showMessage("Date Diagnosted entered is before Patient's DOB");
					return null;
				}
			}
			//------------------------
		}

		if (voPatientDiagnosis.getDateOnset() != null)
		{
			if (voPatientDiagnosis.getDateOnset().isGreaterThan(new Date()))
			{
				engine.showMessage("The onset date cannot be in the future");
				//form.ctnDiagnosisControls().dteDiagOnset().setValue(null);
				//form.ctnDiagnosisControls().pdtDiagnosed().setFocus();
				return null;
			}
			
		}
		String[] errs = voPatientDiagnosis.validate();
		if (errs !=null && errs.length>0)
		{
			engine.showErrors(errs);
			return null;
		}

		return voPatientDiagnosis;
	}

	private PatientDiagnosisEDischargeListVo populateDataFromScreen(Integer whatsBeingEdited)
	{
		PatientDiagnosisEDischargeListVo voPatDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();

		if (voPatDiagnosis == null)
		{
			voPatDiagnosis = new PatientDiagnosisEDischargeListVo();

			// For newly created PatientDiagnosis set the EpisodeOfCare, CareContext and ClinicalContact
			voPatDiagnosis.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			voPatDiagnosis.setCareContext(getCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			voPatDiagnosis.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}

		IClinicalCodingValue voResult = null;
		if (whatsBeingEdited == ITS_DIAGNOSIS)
			voResult = form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().getValue();
		else if (whatsBeingEdited == ITS_COMPLICATION)
			voResult = form.ctnComplicationsControls().ccCompClinicalTerm().getValue();
		else if (whatsBeingEdited == ITS_COMORBIDITY)
			voResult = form.ctnCoMorbidityControls().ccComorbClinicalTerm().getValue();

		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof DiagLiteVo)
			{
				DiagLiteVo voDiagnosis = (DiagLiteVo) voResult.getIClinicalCodingValue();
				if (voDiagnosis.getID_Diagnosis() != null && voDiagnosis.getID_Diagnosis().intValue() < 0)
					voPatDiagnosis.setDiagnosis(null);
				else
					voPatDiagnosis.setDiagnosis(voDiagnosis);

				voPatDiagnosis.setDiagnosisDescription(voResult.getIClinicalCodingValueDescription());
			}
			else
				throw new CodingRuntimeException("DiagLiteVo expected from component");
		}
		else
		{
			voPatDiagnosis.setDiagnosisDescription(null);
		}

		if (whatsBeingEdited == ITS_DIAGNOSIS)
			voPatDiagnosis = populateDiagnosisSpecificItems(voPatDiagnosis);
		else if (whatsBeingEdited == ITS_COMPLICATION)
			voPatDiagnosis = populateComplicationSpecificItems(voPatDiagnosis);
		else if (whatsBeingEdited == ITS_COMORBIDITY)
			voPatDiagnosis = populateCoMorbiditySpecificItems(voPatDiagnosis);

		if (voPatDiagnosis.getSourceofInformation() == null)
			voPatDiagnosis.setSourceofInformation(SourceofInformation.CLINICALCONTACT);
		//WDEV-19856 - change of logic -  when changing an existing diagnosis to co-morbidity automatically include it
		if (voPatDiagnosis.getID_PatientDiagnosis() == null || (whatsBeingEdited == ITS_DIAGNOSIS && Boolean.TRUE.equals(voPatDiagnosis.getIsComorbidity())))
		{
			IncludeDiagnosisInDischargeReportVo voNewInclude = new IncludeDiagnosisInDischargeReportVo();
			EpisodeOfCareCoMorbidityVo voNewRelevant = new EpisodeOfCareCoMorbidityVo();//WDEV-20098
			
			if (whatsBeingEdited == ITS_DIAGNOSIS && Boolean.TRUE.equals(voPatDiagnosis.getIsComorbidity()))
			{
				IncludeDiagnosisInDischargeReportVoCollection includedColl = voPatDiagnosis.getIncludeDiagnosisInDiscReports();
				EpisodeOfCareCoMorbidityVoCollection relevantColl = voPatDiagnosis.getCoMorbidityForEpisodeOfCares();//WDEV-20098
				
				if (includedColl != null && includedColl.size() > 0)
				{	
					for (int i=0; i<includedColl.size();i++)
					{
						if (includedColl.get(i) == null)
							continue;
						if (includedColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()) && Boolean.TRUE.equals(includedColl.get(i).getIncludeInReport()))
						{	
							voNewInclude = includedColl.get(i);
							break;
						}
					}
				}
				//WDEV-20098
				if (relevantColl != null && relevantColl.size() > 0)
				{	
					for (int i=0; i<relevantColl.size();i++)
					{
						if (relevantColl.get(i) == null)
							continue;
						if (relevantColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()) && Boolean.TRUE.equals(relevantColl.get(i).getIsActive()))
						{	
							voNewRelevant = relevantColl.get(i);
							break;
						}
					}
				}
				//----
			}	
			//WDEV-19856 -- ends here	
			voNewInclude.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNewInclude.setDiagnosis(voPatDiagnosis);
			voNewInclude.setIncludeInReport(true);
			
			//WDEV-20098
			voNewRelevant.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
			authoringInfo.setAuthoringDateTime(new DateTime());
			authoringInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			voNewRelevant.setAuthoringInformation(authoringInfo);
			voNewRelevant.setDiagnosis(voPatDiagnosis);
			voNewRelevant.setIsActive(true);
			//----

			if (voPatDiagnosis.getIncludeDiagnosisInDiscReports() == null)
				voPatDiagnosis.setIncludeDiagnosisInDiscReports(new IncludeDiagnosisInDischargeReportVoCollection());

			//WDEV-20098
			if (voPatDiagnosis.getCoMorbidityForEpisodeOfCares() == null)
				voPatDiagnosis.setCoMorbidityForEpisodeOfCares(new EpisodeOfCareCoMorbidityVoCollection());
			
			//-------
			voPatDiagnosis.getIncludeDiagnosisInDiscReports().add(voNewInclude);
			voPatDiagnosis.getCoMorbidityForEpisodeOfCares().add(voNewRelevant);//WDEV-20098
		}
		return voPatDiagnosis;
	}

	private PatientDiagnosisEDischargeListVo populateCoMorbiditySpecificItems(PatientDiagnosisEDischargeListVo voPatDiagnosis)
	{
		voPatDiagnosis.setDiagLaterality(form.ctnCoMorbidityControls().cmbComorbLaterality().getValue() != null ? form.ctnCoMorbidityControls().cmbComorbLaterality().getValue():null);	//wdev-18841
		voPatDiagnosis.setIsComorbidity(true);
		voPatDiagnosis.setIsComplication(false);

		// Primary Diagnosis
		
//		WDEV-20098		
//		setCsPrimaryDiagnosis(voPatDiagnosis, form.ctnCoMorbidityControls().chkPrimCoMorbidity().getValue(), false);
		//setCoMorbidityForEpisodeOfCares(voPatDiagnosis, form.ctnCoMorbidityControls().chkRelevantForEpisodeCoMorbidity().getValue(), false);
//---------------
		
		voPatDiagnosis.setAuthoringInfo(form.ctnCoMorbidityControls().ccComorbAuthoring().getValue());
		voPatDiagnosis.setDiagnosedOnAdmission(form.ctnCoMorbidityControls().chkDiagnosedOnAdmissionComorb().getValue()); //WDEV-19860

		return voPatDiagnosis;
	}

	private PatientDiagnosisEDischargeListVo populateComplicationSpecificItems(PatientDiagnosisEDischargeListVo voPatDiagnosis)
	{
		voPatDiagnosis.setDiagLaterality(form.ctnComplicationsControls().cmbCompLaterality().getValue() != null ? form.ctnComplicationsControls().cmbCompLaterality().getValue():null);	//wdev-18841
		voPatDiagnosis.setIsComorbidity(false);
		voPatDiagnosis.setIsComplication(true);

		voPatDiagnosis.setAuthoringInfo(form.ctnComplicationsControls().ccCompAuthoring().getValue());
		voPatDiagnosis.setDiagnosedOnAdmission(form.ctnComplicationsControls().chkDiagnosedOnAdmissionComp().getValue()); //WDEV-19860

		return voPatDiagnosis;
	}

	private PatientDiagnosisEDischargeListVo populateDiagnosisSpecificItems(PatientDiagnosisEDischargeListVo voPatDiagnosis)
	{
		voPatDiagnosis.setDiagLaterality(form.ctnDiagnosisControls().cmbDiagLaterality().getValue() != null ? form.ctnDiagnosisControls().cmbDiagLaterality().getValue():null);		//wdev-18841,wdev-19028
		voPatDiagnosis.setIsComorbidity(Boolean.TRUE.equals(form.ctnDiagnosisControls().chkCoMorbidity().getValue()) ? true : false);
		voPatDiagnosis.setIsComplication(false);

		voPatDiagnosis.setAuthoringInfo(form.ctnDiagnosisControls().ccDiagAuthoring().getValue());
		voPatDiagnosis.setDiagnosedOnAdmission(form.ctnDiagnosisControls().chkDiagnosedOnAdmission().getValue()); //WDEV-19860

		// Primary Diagnosis
		setCsPrimaryDiagnosis(voPatDiagnosis, form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().getValue(), true);

		return voPatDiagnosis;
	}

	//WDEV-11817
	private boolean diagnosisCompleted()
	{
		PatientDiagnosisEDischargeVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
		
		boolean diagnosisExists= form.ctnCurrentDiagnoses().grdDiagnoses().getRows().size() > 0 
								|| (voPatientDiagnosis!=null && !Boolean.TRUE.equals(voPatientDiagnosis.getIsComorbidity()) && !Boolean.TRUE.equals(voPatientDiagnosis.getIsComplication())); //WDEV-19880
			
		return (form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue() || diagnosisExists);
	}
	
	//WDEV-11817
	private boolean hasComplicationsComorbiditiesInfo()
	{
		PatientDiagnosisEDischargeVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
		boolean comorbidityExists= false;
		boolean complicationsExists= false;
		comorbidityExists = form.ctnCurrentDiagnoses().grdComorbidity().getRows().size()>0  || (voPatientDiagnosis!=null && Boolean.TRUE.equals(voPatientDiagnosis.getIsComorbidity()));//WDEV-13475
		complicationsExists = form.ctnCurrentDiagnoses().grdComplications().getRows().size()>0 || (voPatientDiagnosis!=null && Boolean.TRUE.equals(voPatientDiagnosis.getIsComplication()));//WDEV-13475
		return (form.ctnCurrentDiagnoses().chkNoComor().getValue() || comorbidityExists)
			&& (form.ctnCurrentDiagnoses().chkNoComp().getValue() || complicationsExists);
	}
	
	
	
	/*WDEV-11817
	private boolean diagnosisCompleted() {
		
		boolean diagnosisExists= false;
		boolean comorbidityExists= false;
		boolean complicationsExists= false;
		
		PatientDiagnosisEDischargeVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
		if(voPatientDiagnosis==null){
			diagnosisExists = form.ctnCurrentDiagnoses().grdDiagnoses().getRows().size()>0;
			comorbidityExists = form.ctnCurrentDiagnoses().grdComorbidity().getRows().size()>0;
			complicationsExists = form.ctnCurrentDiagnoses().grdComplications().getRows().size()>0;
		}
		else{
			diagnosisExists = form.ctnCurrentDiagnoses().grdDiagnoses().getRows().size()>0 
								|| (!voPatientDiagnosis.getIsComorbidity() && !voPatientDiagnosis.getIsComplication());
			comorbidityExists = form.ctnCurrentDiagnoses().grdComorbidity().getRows().size()>0
								|| voPatientDiagnosis.getIsComorbidity();
			complicationsExists = form.ctnCurrentDiagnoses().grdComplications().getRows().size()>0
								|| voPatientDiagnosis.getIsComplication();
		}
				
		if((form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue() || diagnosisExists)
				&& (form.ctnCurrentDiagnoses().chkNoComor().getValue() || comorbidityExists)
				&& (form.ctnCurrentDiagnoses().chkNoComp().getValue() || complicationsExists))
			return true;
		
		return false;
	}*/

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		clearDiagnosisInstanceControls();
		clearComorbidityInstanceControls();
		clearComplicationInstanceControls();
		
		showHideContainersCurrDiagComrComp(true, false, false, false);

		if (form.getLocalContext().getCurrentDiagIncluded().booleanValue() || form.getLocalContext().getPreviousDiagIncluded().booleanValue())
		{
			form.getLocalContext().setCurrentDiagIncluded(false);
			form.getLocalContext().setPreviousDiagIncluded(false);
		}
		//WDEV-20098
		if (form.getLocalContext().getCurrentComorbidityRelevant().booleanValue())
			form.getLocalContext().setCurrentComorbidityRelevant(false);
		//-----
		open();
		form.setMode(FormMode.VIEW);
	}

	private CSPrimaryDiagnosisVo getPrimaryDiagnosisRecord(PatientDiagnosisEDischargeListVo voPatDiagnosis)
	{
		if (voPatDiagnosis == null || voPatDiagnosis.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryDiagnosisVoCollection voColl = voPatDiagnosis.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagnosis);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (sameDiagnosis && sameCareContext)
				return voColl.get(i);
		}

		return null;
	}
	
	private void setCsPrimaryDiagnosis(PatientDiagnosisEDischargeListVo voPatDiagnosis, boolean isChkPrimaryChecked, boolean bDiagnosisContainer)
	{
		CSPrimaryDiagnosisVo voCSPrimaryDiagnosis = getPrimaryDiagnosisRecord(voPatDiagnosis);
		if (voCSPrimaryDiagnosis != null || isChkPrimaryChecked)
		{
			if (voCSPrimaryDiagnosis == null)
			{
				voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(new CSPrimaryDiagnosisVo(), voPatDiagnosis, isChkPrimaryChecked, bDiagnosisContainer);
				if (voPatDiagnosis.getPrimaryForCareSpells() == null)
					voPatDiagnosis.setPrimaryForCareSpells(new CSPrimaryDiagnosisVoCollection());
				voPatDiagnosis.getPrimaryForCareSpells().add(voCSPrimaryDiagnosis);
			}
			else
			{
				int index = voPatDiagnosis.getPrimaryForCareSpells().indexOf(voCSPrimaryDiagnosis);
				if (index >= 0)
				{
					voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(voCSPrimaryDiagnosis, voPatDiagnosis, isChkPrimaryChecked, bDiagnosisContainer);
					voPatDiagnosis.getPrimaryForCareSpells().set(index, voCSPrimaryDiagnosis);
				}
			}
		}
	}

	@Override
	protected void onGrdPreviousSelectionChanged() throws PresentationLogicException
	{
	// TODO Auto-generated method stub

	}

	@Override
	protected void onGrdPreviousGridCheckBoxClicked(int column, grdPreviousRow row, boolean isChecked) throws PresentationLogicException
	{
		form.getLocalContext().setPreviousDiagIncluded(true);
		form.setMode(FormMode.EDIT);

		// enableDisableInstanceControls(false);
		updateContextMenus();
	}

	private boolean grdDiagnosisSelectionChanged() //WDEV-20511
	{
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);

		if (form.ctnCurrentDiagnoses().grdDiagnoses().getValue() != null)
		{
			PatientDiagnosisEDischargeVo voPatDiag = domain.getDiagnosisVo(form.ctnCurrentDiagnoses().grdDiagnoses().getValue());
			
			//WDEV-20511
			if (voPatDiag == null)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
			//--

			if (voPatDiag != null && voPatDiag.getStatusHistoryIsNotNull())
				setTooltip(voPatDiag);
			else
				setTooltip(null);

			populateDiagnosisInstanceControls(voPatDiag);
			boolean isPrimaryDiagnosis = isPrimaryDiagnosisActive(voPatDiag);
			form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setValue(isPrimaryDiagnosis);
			form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

			updateControlsState();
			updateContextMenus();
		}
		return true; //WDEV-20511
	}

	private void populateDiagnosisInstanceControls(PatientDiagnosisEDischargeVo voPatDiag)
	{
		clearDiagnosisInstanceControls();

		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setValue(voPatDiag);

		form.ctnDiagnosisControls().cmbDiagLaterality().setValue(voPatDiag.getDiagLateralityIsNotNull() ? voPatDiag.getDiagLaterality() : null);	//wdev-18841
		StringBuffer tooltip = new StringBuffer(); 
		
		//tooltip.append(voPatDiag.getDiagLateralityIsNotNull() ? "<b>Laterality: </b>" + voPatDiag.getDiagLaterality().getText() + "<br>" : "");
		tooltip.append(voPatDiag.getSiteTextIsNotNull() ? "<b>Site: </b>" + voPatDiag.getSiteText() + "<br>" : "");
		tooltip.append(voPatDiag.getDiagnosedDateIsNotNull() ? "<b>Date Diagnosed: </b>" + voPatDiag.getDiagnosedDate().toString() + "<br>" : "");
		tooltip.append(voPatDiag.getDateOnsetIsNotNull() ? "<b>Onset Date: </b>" + voPatDiag.getDateOnset().toString() + "<br>" : "");
		tooltip.append(Boolean.TRUE.equals(voPatDiag.getIsPrevRelevantDiagnosis()) ? "<b>Has Previous Relevant Diagnosis</b>" : "");
		
		form.ctnDiagnosisControls().imbInfoDiagnosis().setTooltip(tooltip.toString());
		
		form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setValue(false);
		if (voPatDiag.getPrimaryForCareSpellsIsNotNull())
		{
			for (int i = 0; i < voPatDiag.getPrimaryForCareSpells().size(); i++)
			{
				if ((voPatDiag.getPrimaryForCareSpells().get(i).getCareContextIsNotNull()) && (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCareIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull()) && (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCare().getID_EpisodeOfCare().equals(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getID_EpisodeOfCare())))
					form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setValue(true);
			}
		}
		form.ctnDiagnosisControls().chkDiagnosedOnAdmission().setValue(voPatDiag.getDiagnosedOnAdmissionIsNotNull() ? voPatDiag.getDiagnosedOnAdmission() : false); //WDEV-19860
		form.ctnDiagnosisControls().ccDiagAuthoring().setValue(voPatDiag.getAuthoringInfo());

		form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);
				
		updateContextMenus();
	}

	protected void updateContextMenus()
	{
		form.getContextMenus().hideAllPastMedicalHistoryMenuItems();
		form.getContextMenus().Clinical.hideAllEDischargeDiagnosisEtcDiagnosisMenuMenuItems();
		form.getContextMenus().Clinical.hideAllEDischargeDiagnosisEtcComplicationMenuMenuItems();
		form.getContextMenus().Clinical.hideAllEDischargeDiagnosisEtcCoMorbidityMenuMenuItems();
		
		//WDEV-19029
		boolean showInfoButton = form.getLocalContext().getSelectedPatientDiagnosisVo() != null && (form.getLocalContext().getSelectedPatientDiagnosisVo().getSiteText() != null 
				|| form.getLocalContext().getSelectedPatientDiagnosisVo().getDiagnosedDate() != null || form.getLocalContext().getSelectedPatientDiagnosisVo().getDateOnset() != null
				|| Boolean.TRUE.equals(form.getLocalContext().getSelectedPatientDiagnosisVo().getIsPrevRelevantDiagnosis()));
		
		
		form.ctnDiagnosisControls().imbInfoDiagnosis().setVisible(showInfoButton);
		form.ctnDiagnosisControls().imbInfoDiagnosis().setEnabled(false);
		
		form.ctnCoMorbidityControls().imbInfoCoMorbidity().setVisible(showInfoButton);
		form.ctnCoMorbidityControls().imbInfoCoMorbidity().setEnabled(false);
		
		
		
		form.ctnComplicationsControls().imbInfoComplication().setVisible(showInfoButton);
		form.ctnComplicationsControls().imbInfoComplication().setEnabled(false);
		
		if (form.getLocalContext().getCurrentDiagIncluded().booleanValue() || form.getLocalContext().getPreviousDiagIncluded().booleanValue())
			return;
		
		//WDEV-20098
		if (form.getLocalContext().getCurrentComorbidityRelevant().booleanValue())
			return;
		//----
		
		if (form.getLocalContext().getCurrentDischargeDetails() == null)
			return;

		if (form.getLocalContext().getisReadonlyIsNotNull() && form.getLocalContext().getisReadonly())
		{
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem().setVisible(form.ctnCurrentDiagnoses().grdDiagnoses().getSelectedRow() != null && FormMode.VIEW.equals(form.getMode()));
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem().setVisible(form.ctnCurrentDiagnoses().grdComorbidity().getSelectedRow() != null && FormMode.VIEW.equals(form.getMode())); //WDEV-20282
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem().setVisible(form.ctnCurrentDiagnoses().grdComplications().getSelectedRow() != null&& FormMode.VIEW.equals(form.getMode()));
			return;
		}

		//WDEV-12847 boolean isDiagCompleted = form.getLocalContext().getCurrentDischargeDetailsIsNotNull() && form.getLocalContext().getCurrentDischargeDetails().getIsDiagnosisCompleteIsNotNull() && form.getLocalContext().getCurrentDischargeDetails().getIsDiagnosisComplete().booleanValue();
		
		form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuNEW_COMORBIDITYItem().setVisible(true && !form.ctnCurrentDiagnoses().chkNoComor().getValue());
		form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuNEW_COMPLICATIONItem().setVisible(true && !form.ctnCurrentDiagnoses().chkNoComp().getValue());
		form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem().setVisible(true && !form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue());

		if (form.ctnCurrentDiagnoses().grdDiagnoses().getSelectedRowIndex() >= 0)
		{
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem().setVisible(true && !form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue());
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem().setVisible(true  && FormMode.VIEW.equals(form.getMode())); //WDEV-20282
			// WDEV-12584 - Display RIE context menu if the Discharge Clinical Info is null or Discharge Clinical Info isCompleted is FALSE
			
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcDiagnosisMenuRIEItem().setVisible(!form.ctnCurrentDiagnoses().chkNoDiagnosis().getValue());//WDEV-12784
		}

		if (form.ctnCurrentDiagnoses().grdComorbidity().getSelectedRowIndex() >= 0)
		{
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuEDIT_COMORBIDITYItem().setVisible(true && !form.ctnCurrentDiagnoses().chkNoComor().getValue());
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuVIEW_COMORBIDITYItem().setVisible(true  && FormMode.VIEW.equals(form.getMode())); //WDEV-20282
			// WDEV-12584 - Display RIE context menu if the Discharge Clinical Info is null or Discharge Clinical Info isCompleted is FALSE
			//form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuRIEItem().setVisible(!isDiagCompleted && (!form.getLocalContext().getDischargeClinicalInformationIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getDischargeClinicalInformation().getIsComplete())));
			
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcCoMorbidityMenuRIEItem().setVisible(!form.ctnCurrentDiagnoses().chkNoComor().getValue());	//WDEV-12847
		}

		if (form.ctnCurrentDiagnoses().grdComplications().getSelectedRowIndex() >= 0)
		{
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuEDIT_COMPLICATIONItem().setVisible(true && !form.ctnCurrentDiagnoses().chkNoComp().getValue());
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuVIEW_COMPLICATIOnItem().setVisible(true  && FormMode.VIEW.equals(form.getMode())); //WDEV-20282
			// WDEV-12584 - Display RIE context menu if the Discharge Clinical Info is null or Discharge Clinical Info isCompleted is FALSE
			//form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuRIEItem().setVisible(!isDiagCompleted && (!form.getLocalContext().getDischargeClinicalInformationIsNotNull() || !Boolean.TRUE.equals(form.getLocalContext().getDischargeClinicalInformation().getIsComplete())));
			
			form.getContextMenus().Clinical.getEDischargeDiagnosisEtcComplicationMenuRIEItem().setVisible(!form.ctnCurrentDiagnoses().chkNoComp().getValue()); //WDEV-12847
		}
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisEDischargeListVo voPatientDiagnosisList)
	{
		if (voPatientDiagnosisList == null)
			return false;

		return isPrimaryDiagnosisActive(voPatientDiagnosisList, voPatientDiagnosisList.getPrimaryForCareSpells());
	}
	

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisRefVo voPatDiagRef, CSPrimaryDiagnosisVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			boolean isActive = voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue();
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagRef);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (isActive && sameDiagnosis && sameCareContext)
				return true;
		}
		return false;
	}

	protected void onGrdDiagnosesGridCheckBoxClicked(int column, grdDiagnosesRow row, boolean isChecked) throws PresentationLogicException
	{
		form.getLocalContext().setCurrentDiagIncluded(true);
		form.setMode(FormMode.EDIT);
		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	public Boolean getbStartEDischarge()
	{
		return form.getLocalContext().getEDischargeStarted();
	}

	@Override
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		showHideContainersCurrDiagComrComp(true, false, false, false);

		form.setMode(FormMode.VIEW);
		updateControlsState();
	}

	@Override
	protected void onGrdComplicationsSelectionChanged() throws PresentationLogicException
	{
		updateContextMenus();
	}

	@Override
	protected void onGrdComplicationsGridCheckBoxClicked(int column, grdComplicationsRow row, boolean isChecked) throws PresentationLogicException
	{
		form.getLocalContext().setCurrentDiagIncluded(true);
		form.setMode(FormMode.EDIT);
		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onGrdComorbiditySelectionChanged() throws PresentationLogicException
	{
		updateContextMenus();
	}

	@Override
	protected void onGrdComorbidityGridCheckBoxClicked(int column, grdComorbidityRow row, boolean isChecked) throws PresentationLogicException
	{
		//WDEV-20446
		if (column == COL_RELEVANT && isChecked)
		{
			row.setColInclude(true); //WDEV-20510
		}
		//WDEV-20446 - ends here
		
		//WDEV-20098
		form.getLocalContext().setCurrentDiagIncluded(true);
		form.getLocalContext().setCurrentComorbidityRelevant(true);
		//------
		form.setMode(FormMode.EDIT);
		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onGrdDiagnosesSelectionChanged() throws PresentationLogicException
	{
		updateContextMenus();
	}

	@Override
	protected void onLnkComorReturnClick() throws PresentationLogicException
	{
		showHideContainersCurrDiagComrComp(true, false, false, false);

		form.setMode(form.getLocalContext().getPreviousFormMode()); //WDEV-20282
		updateControlsState();
	}

	@Override
	protected void onLnkComplicationReturnClick() throws PresentationLogicException
	{
		showHideContainersCurrDiagComrComp(true, false, false, false);

		form.setMode(FormMode.VIEW);
		updateControlsState();
	}

	@Override
	protected void onChkNoComorValueChanged() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onChkNoCompValueChanged() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	public void setReadOnly()
	{

		form.getLocalContext().setisReadonly(true);
		updateContextMenus();
		form.ctnCurrentDiagnoses().chkNoComor().setEnabled(!form.getLocalContext().getisReadonly());
		form.ctnCurrentDiagnoses().chkNoComp().setEnabled(!form.getLocalContext().getisReadonly());
		form.ctnCurrentDiagnoses().chkNoDiagnosis().setEnabled(!form.getLocalContext().getisReadonly());

		form.ctnCurrentDiagnoses().grdDiagnoses().setReadOnly(form.getLocalContext().getisReadonly());
		form.ctnCurrentDiagnoses().grdDiagnoses().setReadOnly(form.getLocalContext().getisReadonly());
		form.ctnCurrentDiagnoses().grdComplications().setReadOnly(form.getLocalContext().getisReadonly());
		form.ctnCurrentDiagnoses().grdComorbidity().setReadOnly(form.getLocalContext().getisReadonly());
		form.grdPrevious().setReadOnly(true);

	}

	protected void onCcComorbClinicalTermValueChanged() throws PresentationLogicException 
	{
		if (form.ctnCoMorbidityControls().ccComorbClinicalTerm().getSelectedItem() != null)
		{
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setParentEditing(Boolean.TRUE);
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setParentEditing(Boolean.TRUE, Boolean.FALSE);
		}
		else
		{
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setParentEditing(Boolean.TRUE);
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setParentEditing(Boolean.FALSE, Boolean.TRUE);
			
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setDescription(null);
		}
		
		if (Boolean.TRUE.equals(form.ctnCoMorbidityControls().ccComorbClinicalTerm().isAllSelected()))
		{
			form.ctnCoMorbidityControls().GroupSelectionComor().setValue(GroupSelectionComorEnumeration.rdoComorbAll);
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().setHotlist(new Boolean(false));
			form.ctnCoMorbidityControls().ccComorbClinicalTerm().search();
		}
	}

	protected void onCcCompClinicalTermValueChanged() throws PresentationLogicException 
	{
		if (form.ctnComplicationsControls().ccCompClinicalTerm().getSelectedItem() != null)
		{
			form.ctnComplicationsControls().ccCompClinicalTerm().setParentEditing(Boolean.TRUE);
			form.ctnComplicationsControls().ccCompClinicalTerm().setParentEditing(Boolean.TRUE, Boolean.FALSE);
		}
		else
		{
			form.ctnComplicationsControls().ccCompClinicalTerm().setParentEditing(Boolean.TRUE);
			form.ctnComplicationsControls().ccCompClinicalTerm().setParentEditing(Boolean.FALSE, Boolean.TRUE);
			
			form.ctnComplicationsControls().ccCompClinicalTerm().setDescription(null);
		}

		if (form.ctnComplicationsControls().ccCompClinicalTerm().isAllSelected() != null 
			&& form.ctnComplicationsControls().ccCompClinicalTerm().isAllSelected().booleanValue())
		{
			form.ctnComplicationsControls().GroupSelectionComp().setValue(GroupSelectionCompEnumeration.rdoCompAll);
			form.ctnComplicationsControls().ccCompClinicalTerm().setHotlist(new Boolean(false));
			form.ctnComplicationsControls().ccCompClinicalTerm().search();
		}

	}

	@Override
	protected void onRadioButtonGroupSelectionComorValueChanged() throws PresentationLogicException
	{
		form.ctnCoMorbidityControls().ccComorbClinicalTerm().setHotlist(form.ctnCoMorbidityControls().GroupSelectionComor().getValue().equals(ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnCoMorbidityControlsContainer.GroupSelectionComorEnumeration.rdoComorbAll) ? new Boolean(false) : new Boolean(true));
	}

	@Override
	protected void onRadioButtonGroupSelectionCompValueChanged() throws PresentationLogicException 
	{
		form.ctnComplicationsControls().ccCompClinicalTerm().setHotlist(form.ctnComplicationsControls().GroupSelectionComp().getValue().equals(ims.clinical.forms.edischargediagnosisetccomponent.GenForm.ctnComplicationsControlsContainer.GroupSelectionCompEnumeration.rdoCompAll) ? new Boolean(false) : new Boolean(true));
	}

	@Override
	protected void onChkNoDiagnosisValueChanged() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		updateContextMenus();
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);

		form.getLocalContext().setLastEvent(null);
		form.fireCustomControlValueChanged();
	}

	public void refresh(EDischargeSTHKSummaryVo voSummary) {
		// TODO Auto-generated method stub
		
	}

	public void initialise(SummaryRefVo voSummareyRef) 
	{
		form.getLocalContext().setSTHKSummary(voSummareyRef);
		initialise();
	}

	public EDischargeLastEvent getLastEvent() 
	{
		return form.getLocalContext().getLastEvent();
	}
	public void clearLastEvent() 
	{
		form.getLocalContext().setLastEvent(null);
	}

	@Override//WDEV-11817
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getConfirmDiagnosisMsgBoxIdIsNotNull() && 
				form.getLocalContext().getConfirmDiagnosisMsgBoxId().intValue()==messageBoxId )
		{
			if (save(result.equals(DialogResult.YES)?true:false,true))
				openAfterDiagnosisDetailsSave();
		}
		
	}

	@Override
	protected void onGrdPreviousGridHeaderClicked(int column) throws PresentationLogicException 
	{
		
		PatientDiagnosisEDischargeListVoCollection voPatCompColl = new PatientDiagnosisEDischargeListVoCollection();
		
		for (int i = 0 ; i < form.grdPrevious().getRows().size() ; i++)
			voPatCompColl.add(form.grdPrevious().getRows().get(i).getValue());	
		
		
		if (column == 1) //DateTime
		{
			if(form.getLocalContext().getSortOrderPreviousDateTme() == null)
				form.getLocalContext().setSortOrderPreviousDateTme(SortOrder.ASCENDING);
						
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getCareContextStartDateTimeComparator(form.getLocalContext().getSortOrderPreviousDateTme()));

			if(form.getLocalContext().getSortOrderPreviousDateTme().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderPreviousDateTme(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderPreviousDateTme().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderPreviousDateTme(SortOrder.ASCENDING);
				
			
		}
		else if (column == 2)//IsComorbidity
		{
			if(form.getLocalContext().getSortOrderPreviousIsCoMorbidity() == null)
				form.getLocalContext().setSortOrderPreviousIsCoMorbidity(SortOrder.ASCENDING);
						
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getIsComorbidityComparator(form.getLocalContext().getSortOrderPreviousIsCoMorbidity()));

			if(form.getLocalContext().getSortOrderPreviousIsCoMorbidity().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderPreviousIsCoMorbidity(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderPreviousIsCoMorbidity().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderPreviousIsCoMorbidity(SortOrder.ASCENDING);
		
		}
		else if (column == 3)//IsComplication
		{
			if(form.getLocalContext().getSortOrderPreviousIsComplication() == null)
				form.getLocalContext().setSortOrderPreviousIsComplication(SortOrder.ASCENDING);
			
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getIsComplicationComparator(form.getLocalContext().getSortOrderPreviousIsComplication()));

			if(form.getLocalContext().getSortOrderPreviousIsComplication().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderPreviousIsComplication(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderPreviousIsComplication().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderPreviousIsComplication(SortOrder.ASCENDING);
				
			
		}
		PatientDiagnosisEDischargeListVo selected = form.grdPrevious().getValue();
		form.grdPrevious().getRows().clear();
		
		populatePreviousDiagnosisGrid(voPatCompColl);
		form.grdPrevious().setValue(selected);
	}

	@Override
	protected void onGrdComplicationsGridHeaderClicked(int column) throws PresentationLogicException 
	{

		PatientDiagnosisEDischargeListVoCollection voPatCompColl = new PatientDiagnosisEDischargeListVoCollection();
		
		for (int i = 0 ; i < form.ctnCurrentDiagnoses().grdComplications().getRows().size() ; i++)
			voPatCompColl.add(form.ctnCurrentDiagnoses().grdComplications().getRows().get(i).getValue());	
		
		if (column == 1) //DateTime
		{
			if(form.getLocalContext().getSortOrderComplicationDateTme() == null)
				form.getLocalContext().setSortOrderComplicationDateTme(SortOrder.ASCENDING);
			
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getDateTimeComparator(form.getLocalContext().getSortOrderComplicationDateTme()));

			if(form.getLocalContext().getSortOrderComplicationDateTme().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderComplicationDateTme(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderComplicationDateTme().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderComplicationDateTme(SortOrder.ASCENDING);
				
			
		}
		else if (column == 2)//hcp and DateTime
		{
			if(form.getLocalContext().getSortOrderComplicationAuthoring() == null)
				form.getLocalContext().setSortOrderComplicationAuthoring(SortOrder.ASCENDING);
			
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getAuthoringComparator(form.getLocalContext().getSortOrderComplicationAuthoring()));

			if(form.getLocalContext().getSortOrderComplicationAuthoring().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderComplicationAuthoring(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderComplicationAuthoring().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderComplicationAuthoring(SortOrder.ASCENDING);
				
		}
		else if (column == 3)//Audit
		{
			if(form.getLocalContext().getSortOrderComplicationAudit() == null)
				form.getLocalContext().setSortOrderComplicationAudit(SortOrder.ASCENDING);
			
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getAuditComparator(form.getLocalContext().getSortOrderComplicationAudit()));

			if(form.getLocalContext().getSortOrderComplicationAudit().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderComplicationAudit(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderComplicationAudit().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderComplicationAudit(SortOrder.ASCENDING);
				
		}
		PatientDiagnosisEDischargeListVo selected = form.ctnCurrentDiagnoses().grdComplications().getValue();
		form.ctnCurrentDiagnoses().grdComplications().getRows().clear();
		
		populateComplicationsGrid(voPatCompColl);
		form.ctnCurrentDiagnoses().grdComplications().setValue(selected);
	}
	@Override
	protected void onGrdComorbidityGridHeaderClicked(int column) throws PresentationLogicException 
	{
		

		PatientDiagnosisEDischargeListVoCollection voPatCompColl = new PatientDiagnosisEDischargeListVoCollection();
		
		for (int i = 0 ; i < form.ctnCurrentDiagnoses().grdComorbidity().getRows().size() ; i++)
			voPatCompColl.add(form.ctnCurrentDiagnoses().grdComorbidity().getRows().get(i).getValue());
		
		if (column == 1) //DateTime
		{
			if(form.getLocalContext().getSortOrderCoMorbidityDateTme() == null)
				form.getLocalContext().setSortOrderCoMorbidityDateTme(SortOrder.ASCENDING);
				
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getDateTimeComparator(form.getLocalContext().getSortOrderCoMorbidityDateTme()));

			if(form.getLocalContext().getSortOrderCoMorbidityDateTme().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderCoMorbidityDateTme(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderCoMorbidityDateTme().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderCoMorbidityDateTme(SortOrder.ASCENDING);
				
			
		}
		else if (column == 2)//hcp and DateTime
		{
			if(form.getLocalContext().getSortOrderCoMorbidityAuthoring() == null)
				form.getLocalContext().setSortOrderCoMorbidityAuthoring(SortOrder.ASCENDING);
			
			
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getAuthoringComparator(form.getLocalContext().getSortOrderCoMorbidityAuthoring()));

			if(form.getLocalContext().getSortOrderCoMorbidityAuthoring().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderCoMorbidityAuthoring(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderCoMorbidityAuthoring().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderCoMorbidityAuthoring(SortOrder.ASCENDING);

		}
		else if (column == 3)//Audit
		{
			if(form.getLocalContext().getSortOrderCoMorbidityAudit() == null)
				form.getLocalContext().setSortOrderCoMorbidityAudit(SortOrder.ASCENDING);
			
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getAuditComparator(form.getLocalContext().getSortOrderCoMorbidityAudit()));

			if(form.getLocalContext().getSortOrderCoMorbidityAudit().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderCoMorbidityAudit(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderCoMorbidityAudit().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderCoMorbidityAudit(SortOrder.ASCENDING);
			
		}
		PatientDiagnosisEDischargeListVo selected = form.ctnCurrentDiagnoses().grdComorbidity().getValue();
		form.ctnCurrentDiagnoses().grdComorbidity().getRows().clear();
		
		populateComorbidityGrid(null, voPatCompColl);
		form.ctnCurrentDiagnoses().grdComorbidity().setValue(selected);
	}

	@Override
	protected void onGrdDiagnosesGridHeaderClicked(int column) throws PresentationLogicException 
	{
		PatientDiagnosisEDischargeListVoCollection voPatCompColl = new PatientDiagnosisEDischargeListVoCollection();
		
		for (int i = 0 ; i < form.ctnCurrentDiagnoses().grdDiagnoses().getRows().size() ; i++)
			voPatCompColl.add(form.ctnCurrentDiagnoses().grdDiagnoses().getRows().get(i).getValue());	
		
		if (column == 1) //DateTime
		{
			if(form.getLocalContext().getSortOrderDiagnosisDateTme() == null)
				form.getLocalContext().setSortOrderDiagnosisDateTme(SortOrder.ASCENDING);
						
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getDateTimeComparator(form.getLocalContext().getSortOrderDiagnosisDateTme()));

			if(form.getLocalContext().getSortOrderDiagnosisDateTme().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDiagnosisDateTme(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderDiagnosisDateTme().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderDiagnosisDateTme(SortOrder.ASCENDING);
		}
		else if (column == 2)//hcp and DateTime
		{
			if(form.getLocalContext().getSortOrderDiagnosisAuthoring() == null)
				form.getLocalContext().setSortOrderDiagnosisAuthoring(SortOrder.ASCENDING);
			
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getAuthoringComparator(form.getLocalContext().getSortOrderDiagnosisAuthoring()));

			if(form.getLocalContext().getSortOrderDiagnosisAuthoring().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDiagnosisAuthoring(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderDiagnosisAuthoring().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderDiagnosisAuthoring(SortOrder.ASCENDING);
			
		}
		else if (column == 3)//Audit
		{
			if(form.getLocalContext().getSortOrderDiagnosisAudit() == null)
				form.getLocalContext().setSortOrderDiagnosisAudit(SortOrder.ASCENDING);
						
			voPatCompColl.sort(PatientDiagnosisEDischargeListVo.getAuditComparator(form.getLocalContext().getSortOrderDiagnosisAudit()));

			if(form.getLocalContext().getSortOrderDiagnosisAudit().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDiagnosisAudit(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderDiagnosisAudit().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderDiagnosisAudit(SortOrder.ASCENDING);
		
		}
		
		PatientDiagnosisEDischargeListVo selected = form.ctnCurrentDiagnoses().grdDiagnoses().getValue();
		form.ctnCurrentDiagnoses().grdDiagnoses().getRows().clear();
		
		populateDiagnosisGrid(voPatCompColl);
		form.ctnCurrentDiagnoses().grdDiagnoses().setValue(selected);
	}

	//WDEV-11924
	public void setIsSummaryUsed()
	{
		form.getLocalContext().setIsSummaryUsed(true);
	}
	
	private static CareContextForEdischargeDiagnosisVo getCareContext(CareContextShortVo careContextShort)
	{
		if (careContextShort == null)
			return null;
		CareContextForEdischargeDiagnosisVo result = new CareContextForEdischargeDiagnosisVo(careContextShort.getID_CareContext(), careContextShort.getVersion_CareContext());
		result.setIsRIE(careContextShort.getIsRIE());
		result.setStartDateTime(careContextShort.getStartDateTime());
		return result;
	}

	@Override
	protected void onCmbDivisionValueChanged() throws PresentationLogicException
	{
		form.ctnDiagnosisControls().GroupSelection().setValue(null);
		form.ctnDiagnosisControls().ccDiagnosisClinicalTerm().setDivisionOrDiagnosesDatabase(form.ctnDiagnosisControls().cmbDivision().getValue(), false);
		
	}

	@Override
	protected void onChkCoMorbidityValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.ctnDiagnosisControls().chkCoMorbidity().getValue()))
			form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().setValue(false);
		
	}

	@Override
	protected void onChkDiagPrimaryDiagnosisValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.ctnDiagnosisControls().chkDiagPrimaryDiagnosis().getValue()))
			form.ctnDiagnosisControls().chkCoMorbidity().setValue(false);
		
	}

}
