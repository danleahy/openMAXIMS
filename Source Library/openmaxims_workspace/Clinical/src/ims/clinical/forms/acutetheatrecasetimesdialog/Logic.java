//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.acutetheatrecasetimesdialog;

import ims.clinical.helper.TheatreCaseTimeHelper;
import ims.clinical.vo.PeriOpAnaesthticSignInTimVo;
import ims.clinical.vo.PeriOpPatientArrivedTimeVo;
import ims.clinical.vo.PeriOpPatientLeftTheatreVo;
import ims.clinical.vo.PeriOpPatientSentTimeVo;
import ims.clinical.vo.PeriOpReadyForDischargeVo;
import ims.clinical.vo.PeriOpReadyForSurgeryTimeVo;
import ims.clinical.vo.PeriOpSafetyBriefTimeVo;
import ims.clinical.vo.PeriOpSurgeryStartTimeVo;
import ims.clinical.vo.PeriOpSurgeryStopTimeVo;
import ims.clinical.vo.PeriOpTimeIntoRecoveryVo;
import ims.clinical.vo.PeriOpTimeOutCompleteVo;
import ims.clinical.vo.PeriOpTimeOutOfRecoveryVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.lookups.AcuteTheateListBookingState;
import ims.vo.ValueObject;

import java.util.Map;


public class Logic extends BaseLogic
{
	/**
	 * This dialog expects:
	 * 1)PeriOPTimeVo ValueObject instance (mandatory)
	 * 2)AcuteTheatreListBookingState lookup instance (mandatory)
	 * 3)TimeValidation Map (optional) 
	 * and
	 * The caption to be set from the calling form
	 * 
	 * If the ValueObject Instance passed is null - dialog will create a new record on save
	 * 
	 */
	
	private static final long serialVersionUID = 1L;
	private static final int SAFETY_BRIEF_DELAY_MINS = -15;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args == null || args.length < 2)
			throw new CodingRuntimeException("Mandatory args missing");
		
		form.getLocalContext().setCaseTimeVo((ValueObject) args[0]);
		form.getLocalContext().setBookingState((AcuteTheateListBookingState) args[1]);
		if(args.length == 3)
			form.getLocalContext().setTimeValidationMap((Map<Integer, DateTime>) args[2]);
	
		populateScreenFromData();
	}
	private void populateScreenFromData()
	{
		DateTime caseDateTime = null;
		AcuteTheateListBookingState state = form.getLocalContext().getBookingState();

		if(state.equals(AcuteTheateListBookingState.ANAESTHETIC_SIGNIN)) {
			PeriOpAnaesthticSignInTimVo signIn = (PeriOpAnaesthticSignInTimVo) form.getLocalContext().getCaseTimeVo();
			if(signIn == null)
			{
				signIn = new PeriOpAnaesthticSignInTimVo();
				form.getLocalContext().setCaseTimeVo(signIn);
			}
			caseDateTime = signIn.getAnaestheticStartTime();
			form.lblCaseTime().setValue("Anaesthetic Start Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.ANAESTHETIC_RFS)) {
			PeriOpReadyForSurgeryTimeVo readyForSurgery = (PeriOpReadyForSurgeryTimeVo) form.getLocalContext().getCaseTimeVo();
			if(readyForSurgery == null)
			{
				readyForSurgery = new PeriOpReadyForSurgeryTimeVo();
				form.getLocalContext().setCaseTimeVo(readyForSurgery);
			}
			caseDateTime = readyForSurgery.getAnaesthetisedReadyForSurgeryTime();
			form.lblCaseTime().setValue("Ready For Surgery Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.PATIENT_ARRIVED)) {
			PeriOpPatientArrivedTimeVo arrived = (PeriOpPatientArrivedTimeVo) form.getLocalContext().getCaseTimeVo();
			if(arrived == null)
			{
				arrived = new PeriOpPatientArrivedTimeVo();
				form.getLocalContext().setCaseTimeVo(arrived);
			}
			caseDateTime = arrived.getPatientArrivedTime();
			form.lblCaseTime().setValue("Patient Arrived Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.PATIENT_LEFT_THEATRE)) {
			PeriOpPatientLeftTheatreVo patientLeft = (PeriOpPatientLeftTheatreVo) form.getLocalContext().getCaseTimeVo();
			if(patientLeft == null)
			{
				patientLeft = new PeriOpPatientLeftTheatreVo();
				form.getLocalContext().setCaseTimeVo(patientLeft);
			}
			caseDateTime = patientLeft.getPatientLeftTheatreTime();
			form.lblCaseTime().setValue("Patient Left Theatre Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.PATIENT_SENT_FOR)) {
			PeriOpPatientSentTimeVo sent = (PeriOpPatientSentTimeVo) form.getLocalContext().getCaseTimeVo();
			if(sent == null)
			{
				sent = new PeriOpPatientSentTimeVo();
				form.getLocalContext().setCaseTimeVo(sent);
			}
			caseDateTime = sent.getPatientSentTime();
			form.lblCaseTime().setValue("Patient Sent Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.READY_FOR_DISCHARGE)) {
			PeriOpReadyForDischargeVo discharge = (PeriOpReadyForDischargeVo) form.getLocalContext().getCaseTimeVo();
			if(discharge == null)
			{
				discharge = new PeriOpReadyForDischargeVo();
				form.getLocalContext().setCaseTimeVo(discharge);
			}
			caseDateTime = discharge.getReadyForDischargeTime();
			form.lblCaseTime().setValue("Ready For Discharge Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.SAFETY_BRIEF)) {
			PeriOpSafetyBriefTimeVo safety = (PeriOpSafetyBriefTimeVo) form.getLocalContext().getCaseTimeVo();
			if(safety == null)
			{
				safety = new PeriOpSafetyBriefTimeVo();
				form.getLocalContext().setCaseTimeVo(safety);
			}
			caseDateTime = safety.getSafetyBriefTime();
			form.lblCaseTime().setValue("Safety Brief Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.SURGERY_START_TIME)) {
			PeriOpSurgeryStartTimeVo start = (PeriOpSurgeryStartTimeVo) form.getLocalContext().getCaseTimeVo();
			if(start == null)
			{
				start = new PeriOpSurgeryStartTimeVo();
				form.getLocalContext().setCaseTimeVo(start);
			}
			caseDateTime = start.getSurgeryStartTime();
			form.lblCaseTime().setValue("Surgery Start Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.SURGERY_STOP)) {
			PeriOpSurgeryStopTimeVo stop = (PeriOpSurgeryStopTimeVo) form.getLocalContext().getCaseTimeVo();
			if(stop == null)
			{
				stop = new PeriOpSurgeryStopTimeVo();
				form.getLocalContext().setCaseTimeVo(stop);
			}
			caseDateTime = stop.getSurgeryStopTime();
			form.lblCaseTime().setValue("Surgery Stop Time:");
		} 
		else if(state.equals(AcuteTheateListBookingState.TIME_OUT_OF_RECOVERY)) {
			PeriOpTimeOutOfRecoveryVo timeOut = (PeriOpTimeOutOfRecoveryVo) form.getLocalContext().getCaseTimeVo();
			if(timeOut == null)
			{
				timeOut = new PeriOpTimeOutOfRecoveryVo();
				form.getLocalContext().setCaseTimeVo(timeOut);
			}
			caseDateTime = timeOut.getTimeOutOfRecovery();
			form.lblCaseTime().setValue("Time Out of Recovery:");
		} 
		else if(state.equals(AcuteTheateListBookingState.TIMEOUT_COMPLETE)) {
			PeriOpTimeOutCompleteVo timeComplete = (PeriOpTimeOutCompleteVo) form.getLocalContext().getCaseTimeVo();
			if(timeComplete == null)
			{
				timeComplete = new PeriOpTimeOutCompleteVo();
				form.getLocalContext().setCaseTimeVo(timeComplete);
			}
			caseDateTime = timeComplete.getTimeOutCompleted();
			form.lblCaseTime().setValue("Time Out Completed:");
		}
		else if(state.equals(AcuteTheateListBookingState.INTO_RECOVERY)) {
			PeriOpTimeIntoRecoveryVo timeInto = (PeriOpTimeIntoRecoveryVo) form.getLocalContext().getCaseTimeVo();
			if(timeInto == null)
			{
				timeInto = new PeriOpTimeIntoRecoveryVo();
				form.getLocalContext().setCaseTimeVo(timeInto);
			}
			caseDateTime = timeInto.getTimeIntoRecovery();
			form.lblCaseTime().setValue("Time Into Recovery:");
		}  
	
		if(caseDateTime != null) 
		{			
			form.dteCase().setValue(caseDateTime.getDate());
			form.timCase().setValue(caseDateTime.getTime());
		} 
		else
		{
			form.dteCase().setValue(new Date());
			form.timCase().setValue(new Time());
		}
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = validateUI();
		if(errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		AcuteTheateListBookingState state = form.getLocalContext().getBookingState();
		if(state.equals(AcuteTheateListBookingState.ANAESTHETIC_SIGNIN)) {
			PeriOpAnaesthticSignInTimVo signIn = (PeriOpAnaesthticSignInTimVo) form.getLocalContext().getCaseTimeVo();
			signIn.setAnaestheticStartTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			signIn.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			signIn.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveSignIn(signIn);
		}		
		else if(state.equals(AcuteTheateListBookingState.ANAESTHETIC_RFS)) {
			PeriOpReadyForSurgeryTimeVo readyForSurgery = (PeriOpReadyForSurgeryTimeVo) form.getLocalContext().getCaseTimeVo();
			readyForSurgery.setAnaesthetisedReadyForSurgeryTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			readyForSurgery.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			readyForSurgery.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveReadyForSurgery(readyForSurgery);
		} 
		else if(state.equals(AcuteTheateListBookingState.PATIENT_ARRIVED)) {
			PeriOpPatientArrivedTimeVo arrived = (PeriOpPatientArrivedTimeVo) form.getLocalContext().getCaseTimeVo();
			arrived.setPatientArrivedTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			arrived.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			arrived.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			savePatientArrived(arrived);
		} 
		else if(state.equals(AcuteTheateListBookingState.PATIENT_LEFT_THEATRE)) {
			PeriOpPatientLeftTheatreVo patientLeft = (PeriOpPatientLeftTheatreVo) form.getLocalContext().getCaseTimeVo();
			patientLeft.setPatientLeftTheatreTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			patientLeft.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			patientLeft.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			savePatientLeft(patientLeft);			
		} 
		else if(state.equals(AcuteTheateListBookingState.PATIENT_SENT_FOR)) {
			PeriOpPatientSentTimeVo sent = (PeriOpPatientSentTimeVo) form.getLocalContext().getCaseTimeVo();
			sent.setPatientSentTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			sent.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			sent.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			savePatientSentFor(sent);			
		} 
		else if(state.equals(AcuteTheateListBookingState.READY_FOR_DISCHARGE)) {
			PeriOpReadyForDischargeVo discharge = (PeriOpReadyForDischargeVo) form.getLocalContext().getCaseTimeVo();
			discharge.setReadyForDischargeTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			discharge.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			discharge.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveReadyForDischarge(discharge);
		} 
		else if(state.equals(AcuteTheateListBookingState.SAFETY_BRIEF)) {
			PeriOpSafetyBriefTimeVo safety = (PeriOpSafetyBriefTimeVo) form.getLocalContext().getCaseTimeVo();
			safety.setSafetyBriefTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			safety.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			safety.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveSafetyBrief(safety);
		} 
		else if(state.equals(AcuteTheateListBookingState.SURGERY_START_TIME)) {
			PeriOpSurgeryStartTimeVo start = (PeriOpSurgeryStartTimeVo) form.getLocalContext().getCaseTimeVo();
			start.setSurgeryStartTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			start.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			start.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveSurgeryStart(start);
		} 
		else if(state.equals(AcuteTheateListBookingState.SURGERY_STOP)) {
			PeriOpSurgeryStopTimeVo stop = (PeriOpSurgeryStopTimeVo) form.getLocalContext().getCaseTimeVo();
			stop.setSurgeryStopTime(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			stop.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			stop.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveSurgeryStop(stop);
		} 
		else if(state.equals(AcuteTheateListBookingState.TIME_OUT_OF_RECOVERY)) {
			PeriOpTimeOutOfRecoveryVo timeOut = (PeriOpTimeOutOfRecoveryVo) form.getLocalContext().getCaseTimeVo();
			timeOut.setTimeOutOfRecovery(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			timeOut.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			timeOut.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveTimeOut(timeOut);
		} 
		else if(state.equals(AcuteTheateListBookingState.TIMEOUT_COMPLETE)) {
			PeriOpTimeOutCompleteVo timeComplete = (PeriOpTimeOutCompleteVo) form.getLocalContext().getCaseTimeVo();
			timeComplete.setTimeOutCompleted(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			timeComplete.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			timeComplete.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveTimeOutComplete(timeComplete);
		} 
		else if(state.equals(AcuteTheateListBookingState.INTO_RECOVERY)) {
			PeriOpTimeIntoRecoveryVo timeInto = (PeriOpTimeIntoRecoveryVo) form.getLocalContext().getCaseTimeVo();
			timeInto.setTimeIntoRecovery(new DateTime(form.dteCase().getValue(), form.timCase().getValue()));
			timeInto.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			timeInto.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
			
			saveTimeIntoRecovery(timeInto);
		} 
	}
	private String[] validateUI()
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();
		if(form.dteCase().getValue() == null)
		{
			uiErrors.add(form.lblCaseTime().getValue() + " is a mandatory field");
		}
		//WDEV-22481
		else
		{
			if(form.dteCase().getValue().isGreaterThan(new Date()))
				uiErrors.add("Date cannot be in the future");
		}
		if(form.timCase().getValue() == null)
		{
			uiErrors.add(form.lblCaseTime().getValue() + " is a mandatory field");
		}
		
		
		return  uiErrors.size() > 0 ? uiErrors.toArray(new String[0]) : null;
	}
	private void saveTimeIntoRecovery(PeriOpTimeIntoRecoveryVo timeInto)
	{
		String[] errors = timeInto.validate(validateTime(TheatreCaseTimeHelper.INTO_RECOVERY, timeInto.getTimeIntoRecovery())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (timeInto!=null && timeInto.getID_PeriOpTimeIntoRecoveryIsNotNull() && domain.getTimeIntoRecovery(timeInto)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.saveTimeIntoRecovery(timeInto, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getTimeIntoRecovery(timeInto));
			populateScreenFromData();
			return;
		}
		//WDEV-21857 //WDEV-23825
		catch (DomainInterfaceException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	
	private void saveTimeOutComplete(PeriOpTimeOutCompleteVo timeComplete)
	{
		//WDEV-22481
		String[] errors = timeComplete.validate(validateTime(TheatreCaseTimeHelper.TIMEOUT_COMPLTED, timeComplete.getTimeOutCompleted())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (timeComplete!=null && timeComplete.getID_PeriOpTimeOutCompleteIsNotNull() && domain.getTimeOutCompleted(timeComplete)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.saveTimeOutCompleted(timeComplete, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getTimeOutCompleted(timeComplete));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	private void saveTimeOut(PeriOpTimeOutOfRecoveryVo timeOut)
	{
		String[] errors = timeOut.validate(validateTime(TheatreCaseTimeHelper.TIME_OUT_RECOVERY, timeOut.getTimeOutOfRecovery())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (timeOut!=null && timeOut.getID_PeriOpTimeOutOfRecoveryTiIsNotNull() && domain.getTimeOutOfRecovery(timeOut)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.saveTimeOutOfRecovery(timeOut, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getTimeOutOfRecovery(timeOut));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	
	private void saveSurgeryStop(PeriOpSurgeryStopTimeVo stop)
	{
		String[] errors = stop.validate(validateTime(TheatreCaseTimeHelper.SURGERY_STOP, stop.getSurgeryStopTime())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (stop!=null && stop.getID_PeriOpSurgeryStopTimeIsNotNull() && domain.getSurgeryStop(stop)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.saveSurgeryStop(stop, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getSurgeryStop(stop));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	private void saveSurgeryStart(PeriOpSurgeryStartTimeVo start)
	{
		String[] errors = start.validate(validateTime(TheatreCaseTimeHelper.SURGERY_START, start.getSurgeryStartTime())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (start!=null && start.getID_PeriOpSurgeryStartTimeIsNotNull() && domain.getSurgeryStart(start)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
		
		try
		{
			domain.saveSurgeryStart(start, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getSurgeryStart(start));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	private void saveSafetyBrief(PeriOpSafetyBriefTimeVo safety)
	{	
		String[] errors = safety.validate(validateTime(TheatreCaseTimeHelper.SAFETY_BRIEF, safety.getSafetyBriefTime()));  
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (safety!=null && safety.getID_PeriOpSafetyBriefTimeIsNotNull() && domain.getSafetyBrief(safety)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.saveSafetyBrief(safety, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getSafetyBrief(safety));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		//safety brief delay
		if(form.getGlobalContext().Clinical.getTheatreSessionStartDateTime() != null)
		{
			
			DateTime sessionDateTime = form.getGlobalContext().Clinical.getTheatreSessionStartDateTime();
			DateTime safetyBriefDateTime = (DateTime) safety.getSafetyBriefTime().clone();
			
			safetyBriefDateTime.addMinutes(SAFETY_BRIEF_DELAY_MINS);
			
			if(safetyBriefDateTime.isGreaterThan(sessionDateTime))
			{
				int delayedMins = DateTime.minutesDiff(safetyBriefDateTime, sessionDateTime);
				
				engine.open(form.getForms().Clinical.TheatreSafeyBriefDelayDialog, new Object[] {delayedMins});
				return;
			}
		}
		
		engine.close(DialogResult.OK);	
	}
	private void saveReadyForDischarge(PeriOpReadyForDischargeVo discharge)
	{
		String[] errors = discharge.validate(validateTime(TheatreCaseTimeHelper.READY_FOR_DISCHARGE, discharge.getReadyForDischargeTime())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (discharge!=null && discharge.getID_PeriOpReadyForDischargeTiIsNotNull() && domain.getReadyForDischarge(discharge)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.savePatientReadyForDischarge(discharge, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getReadyForDischarge(discharge));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	
	private void savePatientSentFor(PeriOpPatientSentTimeVo sent)
	{
		String[] errors = sent.validate(validateTime(TheatreCaseTimeHelper.PATIENT_SENT, sent.getPatientSentTime())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (sent!=null && sent.getID_PeriOpPatientSentTimeIsNotNull() && domain.getPatientSentFor(sent)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.savePatientSentFor(sent, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getPatientSentFor(sent));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);
	}
	private void savePatientLeft(PeriOpPatientLeftTheatreVo patientLeft)
	{
		String[] errors = patientLeft.validate(validateTime(TheatreCaseTimeHelper.PATIENT_LEFT, patientLeft.getPatientLeftTheatreTime())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (patientLeft!=null && patientLeft.getID_PeriOpPatientLeftTheatreIsNotNull() && domain.getPatientLeftTheatre(patientLeft)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.savePatientLeftTheatre(patientLeft, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getPatientLeftTheatre(patientLeft));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	private void savePatientArrived(PeriOpPatientArrivedTimeVo arrived)
	{
		String[] errors = arrived.validate(validateTime(TheatreCaseTimeHelper.PATIENT_ARRIVED, arrived.getPatientArrivedTime())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (arrived!=null && arrived.getID_PeriOpPatientArrivedTimeIsNotNull() && domain.getPatientArrived(arrived)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.savePatientArrived(arrived, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getPatientArrived(arrived));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);	
	}
	
	private void saveReadyForSurgery(PeriOpReadyForSurgeryTimeVo readyForSurgery)
	{
		String[] errors = readyForSurgery.validate(validateTime(TheatreCaseTimeHelper.ANAES_RFS, readyForSurgery.getAnaesthetisedReadyForSurgeryTime())); 
		
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		
		//WDEV-23825
		if (readyForSurgery!=null && readyForSurgery.getID_PeriOpReadyForSurgeryTimeIsNotNull() && domain.getAnaesRFS(readyForSurgery)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.OK);
			return;
		}
				
		try
		{
			domain.saveAnaesthetisedRFS(readyForSurgery, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCaseTimeVo(domain.getAnaesRFS(readyForSurgery));
			populateScreenFromData();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);
	}
	private void saveSignIn(PeriOpAnaesthticSignInTimVo signIn)
	{
		String[] arrErrors = signIn.validate(validateTime(TheatreCaseTimeHelper.ANAES_SIGN_IN, signIn.getAnaestheticStartTime()));
	
		if(arrErrors != null)
		{	
			engine.showErrors("Validation Errors", arrErrors);
			return;
		}
		
		//WDEV-22446
		boolean delaySave = form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.getPersistAnaestheticTimeIsNotNull() && !form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.getPersistAnaestheticTime();
		if(!delaySave)
		{
			try
			{
				domain.saveAnaestheticSignIn(signIn, form.getGlobalContext().Clinical.getTheatreBookingRef()); 
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCaseTimeVo(domain.getAnaestheticSignIn(signIn));
				populateScreenFromData();
				return;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCaseTimeVo(domain.getAnaestheticSignIn(signIn));
				populateScreenFromData();
				return;
			}
			
		}
		else
		{
			form.getGlobalContext().Clinical.AcuteTheatreCaseTimes.setSignIn(signIn);
		}
		
		engine.close(DialogResult.OK);
	}
	
	private String[] validateTime(Integer state, DateTime dateTime)
	{
		if(form.getLocalContext().getTimeValidationMapIsNotNull())
		{
			return TheatreCaseTimeHelper.validateTime(state, dateTime, form.getLocalContext().getTimeValidationMap());			
		}
		
		return new String[]{};
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
}
