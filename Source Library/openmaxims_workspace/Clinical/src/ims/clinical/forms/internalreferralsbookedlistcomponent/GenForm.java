//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.internalreferralsbookedlistcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class qmbHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo getValue()
		{
			return (ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.ServiceShortForClinicalInternalReferralsVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdReferralsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdReferralsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolReferralDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolReferralDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolReferralDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getcolReferralDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setcolReferralDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellcolReferralDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolReferringHCPReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolReferringHCPReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolReferringHCPOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolReferringHCP()
		{
			return (String)super.row.get(1);
		}
		public void setcolReferringHCP(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolReferringHCPTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolUrgentReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolUrgentReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolUrgentOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolUrgent()
		{
			return (String)super.row.get(2);
		}
		public void setcolUrgent(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolUrgentTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolNHSReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolNHSReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolNHSOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolNHS()
		{
			return (String)super.row.get(3);
		}
		public void setcolNHS(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolNHSTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolName()
		{
			return (String)super.row.get(4);
		}
		public void setcolName(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolDOBReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolDOBReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolDOBOpened()
		{
			super.row.showOpened(5);
		}
		public String getcolDOB()
		{
			return (String)super.row.get(5);
		}
		public void setcolDOB(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolDOBTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolRequestToServiceReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolRequestToServiceReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolRequestToServiceOpened()
		{
			super.row.showOpened(6);
		}
		public String getcolRequestToService()
		{
			return (String)super.row.get(6);
		}
		public void setcolRequestToService(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolRequestToServiceTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolRefToReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolRefToReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolRefToOpened()
		{
			super.row.showOpened(7);
		}
		public String getcolRefTo()
		{
			return (String)super.row.get(7);
		}
		public void setcolRefTo(String value)
		{
			super.row.set(7, value);
		}
		public void setCellcolRefToTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setcolApptReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean iscolApptReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showcolApptOpened()
		{
			super.row.showOpened(8);
		}
		public ims.framework.utils.Image getcolAppt()
		{
			return (ims.framework.utils.Image)super.row.get(8);
		}
		public void setcolAppt(ims.framework.utils.Image value)
		{
			super.row.set(8, value);
		}
		public void setCellcolApptTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setcolStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean iscolStatusReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showcolStatusOpened()
		{
			super.row.showOpened(9);
		}
		public String getcolStatus()
		{
			return (String)super.row.get(9);
		}
		public void setcolStatus(String value)
		{
			super.row.set(9, value);
		}
		public void setCellcolStatusTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo getValue()
		{
			return (ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdReferralsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdReferralsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdReferralsRow get(int index)
		{
			return new grdReferralsRow(super.collection.get(index));
		}
		public grdReferralsRow newRow()
		{
			return new grdReferralsRow(super.collection.newRow());
		}
		public grdReferralsRow newRow(boolean autoSelect)
		{
			return new grdReferralsRow(super.collection.newRow(autoSelect));
		}
		public grdReferralsRow newRowAt(int index)
		{
			return new grdReferralsRow(super.collection.newRowAt(index));
		}
		public grdReferralsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdReferralsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdReferralsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setcolNHSCaption(String value)
		{
			this.grid.setColumnCaption(3, value);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVoCollection getValues()
		{
			ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVoCollection listOfValues = new ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo getValue()
		{
			return (ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo value)
		{
			super.grid.setValue(value);
		}
		public grdReferralsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdReferralsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdReferralsRowCollection getRows()
		{
			return new grdReferralsRowCollection(super.grid.getRows());
		}
		public grdReferralsRow getRowByValue(ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdReferralsRow(row);
		}
		public void setcolReferralDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolReferralDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolReferringHCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolReferringHCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolUrgentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolUrgentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolNHSHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolNHSHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolDOBHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolDOBHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolRequestToServiceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolRequestToServiceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolRefToHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolRefToHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setcolApptHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getcolApptHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setcolStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getcolStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
	}

	public static class grpAppointmentDetailsRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 568, 64, 274, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Both Requiring appointment and<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Appointment Made", startTabIndex.intValue() + 7);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 568, 28, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Requiring appointment", startTabIndex.intValue() + 5);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 568, 46, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Appointment booked", startTabIndex.intValue() + 6);
		}
		public void setText(grpAppointmentDetailsEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpAppointmentDetailsEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpAppointmentDetailsEnumeration.None;
				case 0: return grpAppointmentDetailsEnumeration.rdoBothRequiredandBooked;
				case 1: return grpAppointmentDetailsEnumeration.rdoRequiringAppointment;
				case 2: return grpAppointmentDetailsEnumeration.rdoAppointmentBooked;
			}
			return null;
		}
		public void setValue(grpAppointmentDetailsEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpAppointmentDetailsEnumeration.None.id);
		}
		public boolean isEnabled(grpAppointmentDetailsEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpAppointmentDetailsEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpAppointmentDetailsEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpAppointmentDetailsEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpAppointmentDetailsEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpAppointmentDetailsEnumeration None = new grpAppointmentDetailsEnumeration(-1);
		public static grpAppointmentDetailsEnumeration rdoBothRequiredandBooked = new grpAppointmentDetailsEnumeration(0);
		public static grpAppointmentDetailsEnumeration rdoRequiringAppointment = new grpAppointmentDetailsEnumeration(1);
		public static grpAppointmentDetailsEnumeration rdoAppointmentBooked = new grpAppointmentDetailsEnumeration(2);
		private grpAppointmentDetailsEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpAppointmentDetailsEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.clinical.vo.OutpatientBookingWorklistSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.clinical.vo.OutpatientBookingWorklistSearchCriteriaVo' of the global context variable 'Clinical.OutpatientBookingWorklistSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(90);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuClinicalReferralBookList = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuClinicalReferralBookListVIEWItem = factory.createMenuItem(startControlID.intValue() + 1, "View Referral", true, false, new Integer(118107), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5620001)))
			contextMenus.Clinical.contextMenuClinicalReferralBookList.add(contextMenus.Clinical.contextMenuClinicalReferralBookListVIEWItem);
		contextMenus.Clinical.contextMenuClinicalReferralBookListAPPT_BOOKEDItem = factory.createMenuItem(startControlID.intValue() + 2, "Appointment Booked", true, false, new Integer(103137), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5620002)))
			contextMenus.Clinical.contextMenuClinicalReferralBookList.add(contextMenus.Clinical.contextMenuClinicalReferralBookListAPPT_BOOKEDItem);
		contextMenus.Clinical.contextMenuClinicalReferralBookListADMIN_EVENTItem = factory.createMenuItem(startControlID.intValue() + 3, "Internal Referral Admin Event", true, false, new Integer(102187), true, false);
		contextMenus.Clinical.contextMenuClinicalReferralBookList.add(contextMenus.Clinical.contextMenuClinicalReferralBookListADMIN_EVENTItem);
		form.registerMenu(contextMenus.Clinical.contextMenuClinicalReferralBookList);


		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 91, 606, 33, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 606, 83, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total records:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 392, 56, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 30, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 384, 8, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Dates", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 30, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referred To", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 560, 8, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Status", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 432, 54, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 432, 28, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 72, 54, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(2), null, Boolean.FALSE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbHCPTemp);
		qmbHCPComboBox qmbHCP = (qmbHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHCPComboBox.class, m_qmbHCPTemp);
		super.addComboBox(qmbHCP);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 72, 28, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(2), null, Boolean.FALSE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbServiceTemp);
		qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
		super.addComboBox(qmbService);

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 496, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdReferralsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuClinicalReferralBookList, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdReferralsTemp);
		grdReferralsGrid grdReferrals = (grdReferralsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdReferralsGrid.class, m_grdReferralsTemp);
		grdReferrals.addDateColumn("Ref. Date", 0, 0, 71, true, true, null, false, 1, true);
		grdReferrals.setcolReferralDateHeaderTooltip("Referral Date");
		grdReferrals.addStringColumn("Referring HCP", 0, 0, 110, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.setcolReferringHCPHeaderTooltip("Referring HCP");
		grdReferrals.addStringColumn("Urg.?", 0, 0, 45, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.setcolUrgentHeaderTooltip("Urgent?");
		grdReferrals.addStringColumn("NHS No.", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.addStringColumn("Patient Name", 0, 0, 140, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.setcolNameHeaderTooltip("Patient Name");
		grdReferrals.addStringColumn("DOB", 0, 0, 70, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.setcolDOBHeaderTooltip("DOB");
		grdReferrals.addStringColumn("Ref. To Service", 0, 0, 105, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.setcolRequestToServiceHeaderTooltip("Ref. To Service");
		grdReferrals.addStringColumn("Ref. To", 0, 0, 110, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.setcolRefToHeaderTooltip("Ref. To");
		grdReferrals.addImageColumn(" ", 0, 0, 25, true, 2);
		grdReferrals.addStringColumn("Status", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdReferrals.setcolStatusHeaderTooltip("Status");
		super.addGrid(grdReferrals);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 808, 8, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 773, 8, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for referrals matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpgrpAppointmentDetails = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
		super.addControl(tmpgrpAppointmentDetails);
		grpAppointmentDetailsRadioButton grpAppointmentDetails = (grpAppointmentDetailsRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpAppointmentDetailsRadioButton.class, tmpgrpAppointmentDetails);
		grpAppointmentDetails.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpAppointmentDetails);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblTotlRecords()
	{
		return (Label)super.getControl(0);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(9);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(10);
	}
	public qmbHCPComboBox qmbHCP()
	{
		return (qmbHCPComboBox)super.getComboBox(0);
	}
	public qmbServiceComboBox qmbService()
	{
		return (qmbServiceComboBox)super.getComboBox(1);
	}
	public grdReferralsGrid grdReferrals()
	{
		return (grdReferralsGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(14);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(15);
	}
	public grpAppointmentDetailsRadioButton grpAppointmentDetails()
	{
		return (grpAppointmentDetailsRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				InternalReferralDialog = new LocalFormName(123287);
				InternalReferralAdminEventDialog = new LocalFormName(123292);
			}
			public final FormName InternalReferralDialog;
			public final FormName InternalReferralAdminEventDialog;
		}

		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Scheduling = new SchedulingImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Calendar16 = new ImageHelper(102336, "Images/Core/Calendar_schedule.bmp", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Calendar16;
		}
		public final class SchedulingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingImages()
			{
				session_16 = new ImageHelper(114137, "Images/Scheduling/session16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image session_16;
		}
		public final CoreImages Core;
		public final SchedulingImages Scheduling;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_lcSelectedReferral = new ims.framework.ContextVariable("lcSelectedReferral", prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcSelectedReferral_" + componentIdentifier + "");
			cxl_lcDOBSortOrder = new ims.framework.ContextVariable("lcDOBSortOrder", prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcDOBSortOrder_" + componentIdentifier + "");
			cxl_lcInternalReferralSettings = new ims.framework.ContextVariable("lcInternalReferralSettings", prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcInternalReferralSettings_" + componentIdentifier + "");
			cxl_lcRefferingHCPSortOrder = new ims.framework.ContextVariable("lcRefferingHCPSortOrder", prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcRefferingHCPSortOrder_" + componentIdentifier + "");
			cxl_lcPatientNameSortOrder = new ims.framework.ContextVariable("lcPatientNameSortOrder", prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcPatientNameSortOrder_" + componentIdentifier + "");
			cxl_lcRefToSortOrder = new ims.framework.ContextVariable("lcRefToSortOrder", prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcRefToSortOrder_" + componentIdentifier + "");
			cxl_lcImageSortOrder = new ims.framework.ContextVariable("lcImageSortOrder", prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcImageSortOrder_" + componentIdentifier + "");
		}
		
		public boolean getlcSelectedReferralIsNotNull()
		{
			return !cxl_lcSelectedReferral.getValueIsNull(context);
		}
		public ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo getlcSelectedReferral()
		{
			return (ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo)cxl_lcSelectedReferral.getValue(context);
		}
		public void setlcSelectedReferral(ims.clinical.vo.ClinicalReferralForOutpatientBookingWorklistVo value)
		{
			cxl_lcSelectedReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcSelectedReferral = null;
		public boolean getlcDOBSortOrderIsNotNull()
		{
			return !cxl_lcDOBSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getlcDOBSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_lcDOBSortOrder.getValue(context);
		}
		public void setlcDOBSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_lcDOBSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcDOBSortOrder = null;
		public boolean getlcInternalReferralSettingsIsNotNull()
		{
			return !cxl_lcInternalReferralSettings.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.InternalReferralSettingsForBookingWorklistVo getlcInternalReferralSettings()
		{
			return (ims.clinicaladmin.vo.InternalReferralSettingsForBookingWorklistVo)cxl_lcInternalReferralSettings.getValue(context);
		}
		public void setlcInternalReferralSettings(ims.clinicaladmin.vo.InternalReferralSettingsForBookingWorklistVo value)
		{
			cxl_lcInternalReferralSettings.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcInternalReferralSettings = null;
		public boolean getlcRefferingHCPSortOrderIsNotNull()
		{
			return !cxl_lcRefferingHCPSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getlcRefferingHCPSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_lcRefferingHCPSortOrder.getValue(context);
		}
		public void setlcRefferingHCPSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_lcRefferingHCPSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcRefferingHCPSortOrder = null;
		public boolean getlcPatientNameSortOrderIsNotNull()
		{
			return !cxl_lcPatientNameSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getlcPatientNameSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_lcPatientNameSortOrder.getValue(context);
		}
		public void setlcPatientNameSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_lcPatientNameSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcPatientNameSortOrder = null;
		public boolean getlcRefToSortOrderIsNotNull()
		{
			return !cxl_lcRefToSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getlcRefToSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_lcRefToSortOrder.getValue(context);
		}
		public void setlcRefToSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_lcRefToSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcRefToSortOrder = null;
		public boolean getlcImageSortOrderIsNotNull()
		{
			return !cxl_lcImageSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getlcImageSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_lcImageSortOrder.getValue(context);
		}
		public void setlcImageSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_lcImageSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcImageSortOrder = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ClinicalReferralBookList implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW = 1;
				public static final int APPT_BOOKED = 2;
				public static final int ADMIN_EVENT = 3;
			}
			public void disableAllClinicalReferralBookListMenuItems()
			{
				this.contextMenuClinicalReferralBookListVIEWItem.setEnabled(false);
				this.contextMenuClinicalReferralBookListAPPT_BOOKEDItem.setEnabled(false);
				this.contextMenuClinicalReferralBookListADMIN_EVENTItem.setEnabled(false);
			}
			public void hideAllClinicalReferralBookListMenuItems()
			{
				this.contextMenuClinicalReferralBookListVIEWItem.setVisible(false);
				this.contextMenuClinicalReferralBookListAPPT_BOOKEDItem.setVisible(false);
				this.contextMenuClinicalReferralBookListADMIN_EVENTItem.setVisible(false);
			}
			private Menu contextMenuClinicalReferralBookList;
			public ReadOnlyMenuItem getClinicalReferralBookListVIEWItem()
			{
				return this.contextMenuClinicalReferralBookListVIEWItem;
			}
			private MenuItem contextMenuClinicalReferralBookListVIEWItem;
			public ReadOnlyMenuItem getClinicalReferralBookListAPPT_BOOKEDItem()
			{
				return this.contextMenuClinicalReferralBookListAPPT_BOOKEDItem;
			}
			private MenuItem contextMenuClinicalReferralBookListAPPT_BOOKEDItem;
			public ReadOnlyMenuItem getClinicalReferralBookListADMIN_EVENTItem()
			{
				return this.contextMenuClinicalReferralBookListADMIN_EVENTItem;
			}
			private MenuItem contextMenuClinicalReferralBookListADMIN_EVENTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[152];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Clinical.ClinicalReferralRef", "BO-1072100112-ID", "ID_ClinicalReferrals");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcSelectedReferral_" + componentIdentifier, "BO-1072100112-ID", "ID_ClinicalReferrals");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcSelectedReferral_" + componentIdentifier, "BO-1072100112-URGENTREFERRAL", "UrgentReferral");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcSelectedReferral_" + componentIdentifier, "BO-1072100112-DATEDECISIONTOREFER", "DateDecisionToRefer");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcSelectedReferral_" + componentIdentifier, "BO-1072100112-REFERRALTYPE", "ReferralType");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcInternalReferralSettings_" + componentIdentifier, "BO-1073100036-ID", "ID_InternalReferralSettings");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcInternalReferralSettings_" + componentIdentifier, "BO-1073100036-URGENTREFERRALBACKGROUNDCOLOUR", "UrgentReferralBackgroundColour");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.InternalReferralsBookedListComponent.__internal_x_context__lcInternalReferralSettings_" + componentIdentifier, "BO-1073100036-SEARCHNUMBEROFDAYS", "SearchNumberOfDays");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
