//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.patientinternalreferralslist;

import ims.clinical.vo.ClinicalReferralsForIncomingReferralListVoCollection;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVo;
import ims.clinical.vo.InternalReferralsGridColumnDetailsVoCollection;
import ims.clinical.vo.PatientClinicalReferralsListFilterVo;
import ims.clinical.vo.ServiceConfigIntReferralForIncomingListVoCollection;
import ims.clinical.vo.enums.InternalReferralGridComponentAction;
import ims.clinical.vo.lookups.InternalReferralsGridColumn;
import ims.clinicaladmin.helper.InternalReferralActionsHelper;
import ims.core.vo.enums.InternalReferralStatusAction;
import ims.core.vo.lookups.InternalReferralStatus;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		InternalReferralActionsHelper helper = domain.getInternalReferralsHelper(engine.getFormName().getID());
		form.getLocalContext().setFormAllowedActions(getAllowedActions());
		form.ccListGrid().initialise(form.getGlobalContext().Core.getPatientShort(), defineGridColumns(),  helper.listDeniedActionForCurrentUser(engine.getLoggedInRole()),form.getLocalContext().getFormAllowedActions());
		form.cmbStatus().removeRow(InternalReferralStatus.ABANDONED); //WDEV-19033
		
	}
	private List<InternalReferralStatusAction> getAllowedActions() 
	{
		List<InternalReferralStatusAction> allowedActions = new ArrayList<InternalReferralStatusAction>();
		
		allowedActions.add(InternalReferralStatusAction.NEW);
		allowedActions.add(InternalReferralStatusAction.VIEW);
		allowedActions.add(InternalReferralStatusAction.EDIT);
		allowedActions.add(InternalReferralStatusAction.RIE);
		allowedActions.add(InternalReferralStatusAction.SIGN_OFF);
	//	allowedActions.add(InternalReferralStatusAction.REQUIRES_FURTHER_INFORMATION);
	//	allowedActions.add(InternalReferralStatusAction.RECORD_FURTHER_INFORMATION);
						
		return allowedActions;
	}
	private InternalReferralsGridColumnDetailsVoCollection defineGridColumns()
	{
		InternalReferralsGridColumnDetailsVoCollection columns = new InternalReferralsGridColumnDetailsVoCollection();

		InternalReferralsGridColumnDetailsVo columnRefDate = new InternalReferralsGridColumnDetailsVo();
		columnRefDate.setColumn(InternalReferralsGridColumn.REFERRAL_DATE);
		columnRefDate.setWidth(100);
		columns.add(columnRefDate);

		InternalReferralsGridColumnDetailsVo columnUrgentRef = new InternalReferralsGridColumnDetailsVo();
		columnUrgentRef.setWidth(75);
		columnUrgentRef.setColumn(InternalReferralsGridColumn.URGENT);
		columns.add(columnUrgentRef);

		InternalReferralsGridColumnDetailsVo columnRefType = new InternalReferralsGridColumnDetailsVo();
		columnRefType.setWidth(150);
		columnRefType.setColumn(InternalReferralsGridColumn.IP_OR_OP);
		columns.add(columnRefType);

		InternalReferralsGridColumnDetailsVo columnRefToService = new InternalReferralsGridColumnDetailsVo();
		columnRefToService.setWidth(175);
		columnRefToService.setColumn(InternalReferralsGridColumn.SERVICE);
		columns.add(columnRefToService);

		InternalReferralsGridColumnDetailsVo columnRefToHCP = new InternalReferralsGridColumnDetailsVo();
		columnRefToHCP.setWidth(225);
		columnRefToHCP.setColumn(InternalReferralsGridColumn.REFERRAL_TO);
		columns.add(columnRefToHCP);
		
		//WDEV-18978
		InternalReferralsGridColumnDetailsVo apptStatus = new InternalReferralsGridColumnDetailsVo();
		apptStatus.setColumn(InternalReferralsGridColumn.APPOINTMENT_STATUS);
		apptStatus.setWidth(23);
		columns.add(apptStatus);
		
		InternalReferralsGridColumnDetailsVo columnRefStatus = new InternalReferralsGridColumnDetailsVo();
		columnRefStatus.setWidth(-1);
		columnRefStatus.setColumn(InternalReferralsGridColumn.STATUS);
		columns.add(columnRefStatus);

		return columns;
	}
	
	private void open()
	{
		clearScreen();
		if (form.getGlobalContext().Clinical.getPatientClinicalReferralsListSearchCriteria() == null || (form.getGlobalContext().Clinical.getPatientClinicalReferralsListSearchCriteria() != null && !form.getGlobalContext().Clinical.getPatientClinicalReferralsListSearchCriteria().getPatient().equals(form.getGlobalContext().Core.getPatientShort())))
			form.getGlobalContext().Clinical.setPatientClinicalReferralsListSearchCriteria(populateSearchFilter());	
		populateSearchCriteria(form.getGlobalContext().Clinical.getPatientClinicalReferralsListSearchCriteria());
		if (searchIsValid())
		{	
			doSearch(false);
		}

	}

	private void populateSearchCriteria(PatientClinicalReferralsListFilterVo patientClinicalReferralsListSearchCriteria)
	{
		clearSearchControls();

		if (patientClinicalReferralsListSearchCriteria == null)
			return;
		if (patientClinicalReferralsListSearchCriteria.getService() != null)  //WDEV-18966
		{	
			form.qmbServiceTo().newRow(patientClinicalReferralsListSearchCriteria.getService(), patientClinicalReferralsListSearchCriteria.getService().getService().getServiceName());
			form.qmbServiceTo().setValue(patientClinicalReferralsListSearchCriteria.getService());
		}	
		form.cmbStatus().setValue(patientClinicalReferralsListSearchCriteria.getReferralStatus());
		form.dteFrom().setValue(patientClinicalReferralsListSearchCriteria.getReferralDateFrom());
		form.dteTo().setValue(patientClinicalReferralsListSearchCriteria.getReferralDateTo());
	}
	private void clearScreen()
	{
		clearSearchControls();		
	}
	private void clearSearchControls()
	{
		form.qmbServiceTo().clear(); //WDEV-18966
		form.cmbStatus().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (searchIsValid())
		{	
			form.getGlobalContext().Clinical.setPatientClinicalReferralsListSearchCriteria(populateSearchFilter());
			doSearch(true);
		}
		else
			form.ccListGrid().setValue(null);
	}
	private void doSearch(boolean fromBtn)
	{	
		if (fromBtn)
		{	
			form.ccListGrid().setValue(null);
		}	
		ClinicalReferralsForIncomingReferralListVoCollection results = domain.listPatientReferrals(form.getGlobalContext().Clinical.getPatientClinicalReferralsListSearchCriteria());
		if (results == null || results.size() == 0)
		{	
			engine.showMessage("No patient referral records have been found.", "No Data Found", MessageButtons.OK, MessageIcon.WARNING);
			form.ccListGrid().setValue(null);
			return;
		}	

		form.ccListGrid().setValue(results);
	}

	private PatientClinicalReferralsListFilterVo populateSearchFilter()
	{
		PatientClinicalReferralsListFilterVo filter = new PatientClinicalReferralsListFilterVo();
		
		filter.setPatient(form.getGlobalContext().Core.getPatientShort());
		filter.setService(form.qmbServiceTo().getValue()); //WDEV-18966
		filter.setReferralStatus(form.cmbStatus().getValue());
		filter.setReferralDateFrom(form.dteFrom().getValue());
		filter.setReferralDateTo(form.dteTo().getValue());

		return filter;
	}
	private boolean searchIsValid()
	{
		PatientClinicalReferralsListFilterVo searchcriteria = populateSearchFilter();

		if (searchcriteria == null || searchcriteria.getPatient() == null || (searchcriteria.getPatient() != null && searchcriteria.getPatient().getID_Patient() == null))
			return false;
		if (searchcriteria.getReferralDateFromIsNotNull() && searchcriteria.getReferralDateToIsNotNull() && searchcriteria.getReferralDateFrom().isGreaterThan(searchcriteria.getReferralDateTo()))
		{
			engine.showMessage("'Referral Date From' cannot be later than 'Referral Date To'.", "Invalid Search Criteria", MessageButtons.OK, MessageIcon.ERROR);
			return false;
		}
		return true;
	}
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		form.ccListGrid().setValue(null);
		form.getGlobalContext().Clinical.setPatientClinicalReferralsListSearchCriteria(null);
	}

	@Override
	protected void onCcListGridValueChanged() throws PresentationLogicException
	{
		if (InternalReferralGridComponentAction.REFRESH.equals(form.ccListGrid().getAction()))
		{	
			open();
		}
	}
	//WDEV-18966
	protected void onQmbServiceToTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbServiceTo().clear();
		
		if (value == null || value.length() == 0)
			return;
		
		ServiceConfigIntReferralForIncomingListVoCollection serviceColl = domain.listServices(value);
		
		if (serviceColl != null)
		{
			for (int i = 0; i < serviceColl.size(); i++)
			{
				if (serviceColl.get(i) == null || serviceColl.get(i).getService() == null)
					continue;

				form.qmbServiceTo().newRow(serviceColl.get(i), serviceColl.get(i).getService().getServiceName());
			}
		}
		
		if (value != null && value.length() > 0)
			form.qmbServiceTo().showOpened();
	}
}
