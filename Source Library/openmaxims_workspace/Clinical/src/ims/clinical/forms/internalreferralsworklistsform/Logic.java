//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.internalreferralsworklistsform;

import ims.clinicaladmin.helper.InternalReferralActionsHelper;
import ims.core.vo.HcpLiteVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		InternalReferralActionsHelper helper1 = new InternalReferralActionsHelper();
		helper1 = domain.getInternalReferralHelper(form.getForms().Clinical.InternalReferralsOutgoingListAlias.getID());
				
		form.lyrworklist().tabOutgoingReferrals().setHeaderVisible(true);
		form.lyrworklist().tabIncomingReferrals().setHeaderVisible(true);
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		if( hcpUser != null && hcpUser instanceof HcpLiteVo)
		{
			form.lyrworklist().tabReferralsIveMade().setHeaderVisible(true);
			form.lyrworklist().tabReferralsIveReceived().setHeaderVisible(true);
			form.lyrworklist().tabOutpatientBookingWorklist().setHeaderVisible(false);
		}
		else
		{
			form.lyrworklist().tabReferralsIveMade().setHeaderVisible(false);
			form.lyrworklist().tabReferralsIveReceived().setHeaderVisible(false);
			form.lyrworklist().tabOutpatientBookingWorklist().setHeaderVisible(true);
			
		}
		
		if( helper1 != null)
			form.lyrworklist().tabOutgoingReferrals().ccOutgoingReferrals().initialise(true,helper1.listDeniedActionForCurrentUser(engine.getLoggedInRole()));
		
	}
	
	protected void onlyrworklistTabChanged(ims.framework.LayerBridge tab)
	{
		if( tab.equals(form.lyrworklist().tabOutgoingReferrals()) )
		{
			InternalReferralActionsHelper helper1 = domain.getInternalReferralHelper(form.getForms().Clinical.InternalReferralsOutgoingListAlias.getID());
			if( helper1 != null)
				form.lyrworklist().tabOutgoingReferrals().ccOutgoingReferrals().initialise(true,helper1.listDeniedActionForCurrentUser(engine.getLoggedInRole()));
		}
		else if( tab.equals(form.lyrworklist().tabReferralsIveMade()))
		{
			InternalReferralActionsHelper helper2 = domain.getInternalReferralHelper(form.getForms().Clinical.InternalReferralsOutgoingList.getID());
			if( helper2 != null)
			{
				form.lyrworklist().tabReferralsIveMade().ccReferralsIveMade().initialise(false,helper2.listDeniedActionForCurrentUser(engine.getLoggedInRole()));
			}
		}
		else if( tab.equals(form.lyrworklist().tabIncomingReferrals()) )
		{
			InternalReferralActionsHelper helper3 = new InternalReferralActionsHelper(); 
			helper3 = domain.getInternalReferralHelper(form.getForms().Clinical.InternalReferralsIncomingListForm.getID());
			if( helper3 != null)
			{
				form.lyrworklist().tabIncomingReferrals().ccIncommingReferrals().initialise(Boolean.FALSE,helper3.listDeniedActionForCurrentUser(engine.getLoggedInRole()));
			}
			
		}
		else if( tab.equals(form.lyrworklist().tabReferralsIveReceived()) )
		{
			InternalReferralActionsHelper helper4 = new InternalReferralActionsHelper();
			helper4 = domain.getInternalReferralHelper(form.getForms().Clinical.InternalReferralsReferralsIHaveRecieved.getID());
			if( helper4 != null )
			{
				form.lyrworklist().tabReferralsIveReceived().ccReferralsIveReceived().initialise(Boolean.TRUE,helper4.listDeniedActionForCurrentUser(engine.getLoggedInRole()));
			}
		}
		else if( tab.equals(form.lyrworklist().tabOutpatientBookingWorklist()) )
		{
			form.lyrworklist().tabOutpatientBookingWorklist().ccOutpatientBookingWorklist().initialize();
		}
		
	}

	
}
