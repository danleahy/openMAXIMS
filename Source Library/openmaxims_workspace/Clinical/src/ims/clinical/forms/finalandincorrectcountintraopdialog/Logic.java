//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.finalandincorrectcountintraopdialog;

import ims.clinical.forms.finalandincorrectcountintraopdialog.GenForm.InstrumentsCorrectEnumeration;
import ims.clinical.forms.finalandincorrectcountintraopdialog.GenForm.SharpsOtherEnumeration;
import ims.clinical.forms.finalandincorrectcountintraopdialog.GenForm.SwabsAccountableEnumeration;
import ims.clinical.vo.FinalCountsIntraOpVo;
import ims.clinical.vo.IntraOpPlannedProcedureVo;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.NurseLiteVo;
import ims.core.vo.NurseLiteVoCollection;
import ims.core.vo.PatientProcedureMinVo;
import ims.core.vo.lookups.YesNoNotApplicable;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		loadProcedures();
		open();
	}

	private void initialise()
	{
		try
		{
			HcpLiteVoCollection hcps = domain.listCaseStaffHcps(form.getGlobalContext().Clinical.getIntraOpCaseStaffDetailRefVo());
			for (HcpLiteVo hcp : hcps)
			{
				form.cmbVerfiedBy2().newRow(hcp, hcp.getMos().toString());
				form.cmbVerifiedBy().newRow(hcp, hcp.getMos().toString());
			}
		}
		catch (DomainInterfaceException ex)
		{
			engine.showMessage(ex.getMessage());
			engine.close(DialogResult.CANCEL);
			return;
		}
		NurseLiteVoCollection scrubPractitioners = domain.listCaseScrubPractitioners(form.getGlobalContext().Clinical.getIntraOpCaseStaffDetailRefVo());

		for (NurseLiteVo scrubPractitioner : scrubPractitioners)
		{
			form.cmbVerfiedBy1().newRow(scrubPractitioner, scrubPractitioner.getMos().toString());
		}

	}

	private void loadProcedures()
	{
		IntraOpPlannedProcedureVoCollection items = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (items != null && items.size() >= 1)
		{
			for (IntraOpPlannedProcedureVo plannedProc : items)
			{
				if (plannedProc.getPlannedProcedureIsNotNull() && plannedProc.getPlannedProcedure().getProcedureIsNotNull())
					form.cmbProcedure().newRow(plannedProc.getPlannedProcedure(), plannedProc.getPlannedProcedure().getProcedure().getProcedureName());
			}
		}
		else
		{
			engine.showMessage("A Planned Procedure must be recorded");
			engine.close(DialogResult.CANCEL);
		}
	}

	private void open()
	{
		FinalCountsIntraOpVo finalCount = form.getGlobalContext().Clinical.getFinalCountsIntraOpVo();
		populateScreenFromData(finalCount);
		if (finalCount == null)
		{
			defaultSelectedProcedure();
			form.getLocalContext().setIsIncorrectVisible(false);
		}
		updateControlState();
	}

	private void defaultSelectedProcedure()
	{
		if (form.cmbProcedure().getValues().size() == 1)
		{
			form.cmbProcedure().setValue((PatientProcedureMinVo) form.cmbProcedure().getValues().get(0));
		}
	}

	private void updateControlState()
	{
		showIncorrectControls(false);

		boolean swabsAccountableNo = form.SwabsAccountable().getValue() != null && form.SwabsAccountable().getValue().equals(SwabsAccountableEnumeration.rdoNoSwabAccount);
		boolean instrumentsCorrectNo = form.InstrumentsCorrect().getValue() != null && form.InstrumentsCorrect().getValue().equals(InstrumentsCorrectEnumeration.rdoNoInstrumentsCorrect);
		boolean sharpsNo = form.SharpsOther().getValue() != null && form.SharpsOther().getValue().equals(SharpsOtherEnumeration.rdoNoSharpsOther);

		if (swabsAccountableNo || instrumentsCorrectNo || sharpsNo)
		{
			showIncorrectControls(true);

			form.txtOtherActions().setRequired(form.chklistActionsTaken().getValues() == null || form.chklistActionsTaken().getValues().size() == 0);
			form.txtMissingItems().setRequired(form.chklistMissingItems().getValues() == null || form.chklistMissingItems().getValues().size() == 0);
		}
		else
		{
			clearIncorrectControls();
			showIncorrectControls(false);
		}
	}

	private void showIncorrectControls(boolean showControls)
	{
		form.lblIncorrectCount().setVisible(showControls);
		form.lblMissingItems().setVisible(showControls);
		form.chklistMissingItems().setVisible(showControls);
		form.lblOtherMissingItems().setVisible(showControls);
		form.txtMissingItems().setVisible(showControls);

		form.lblActionsTaken().setVisible(showControls);
		form.chklistActionsTaken().setVisible(showControls);
		form.lblOtherActions().setVisible(showControls);
		form.txtOtherActions().setVisible(showControls);
		form.lblVerifiedBy().setVisible(showControls);
		form.cmbVerifiedBy().setVisible(showControls);
		form.getLocalContext().setIsIncorrectVisible(showControls);
	}

	private void clearIncorrectControls()
	{
		form.chklistMissingItems().setValues(null);
		form.txtMissingItems().setValue(null);
		form.chklistActionsTaken().setValues(null);
		form.txtOtherActions().setValue(null);
		form.cmbVerifiedBy().setValue(null);
	}

	@Override
	protected void onChklistActionsTakenValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onChklistMissingItemsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onRadioButtonSharpsOtherValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onRadioButtonInstrumentsCorrectValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onRadioButtonSwabsAccountableValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		FinalCountsIntraOpVo finalCount = populateDataFromScreen(form.getGlobalContext().Clinical.getFinalCountsIntraOpVo());
		String[] errors = finalCount.validate(validateUI(finalCount));

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveFinalCountIntraOp(finalCount);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Clinical.setFinalCountsIntraOpVo(domain.getFinalCountIntraOp(finalCount));
			engine.close(DialogResult.CANCEL);
			return;
		}
		
		engine.close(DialogResult.OK);
	}

	private String[] validateUI(FinalCountsIntraOpVo finalCount)
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (form.getLocalContext().getIsIncorrectVisible())
		{
			if (finalCount.getVerifiedBy() == null)
			{
				uiErrors.add("Verified By is mandatory");
			}
			if (finalCount.getActionsTaken() == null || finalCount.getActionsTaken().getItems().length == 0)
			{
				if (finalCount.getOtherActionsTaken() == null || finalCount.getOtherActionsTaken().isEmpty())
					uiErrors.add("Other Actions are mandatory");
			}
			if (finalCount.getMissingItems() == null || finalCount.getMissingItems().getItems().length == 0)
			{
				if (finalCount.getOtherMissingItems() == null || finalCount.getOtherMissingItems().isEmpty())
					uiErrors.add("Other Missing Items are mandatory");
			}
		}

		return uiErrors.toArray(new String[0]);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	private void clearScreen()
	{
		form.cmbVerifiedBy().setValue(null);
		form.chklistActionsTaken().setValues(null);
		form.chklistMissingItems().setValues(null);
		form.txtOtherActions().setValue(null);
		form.txtMissingItems().setValue(null);
		form.cmbVerfiedBy2().setValue(null);
		form.cmbVerfiedBy1().setValue(null);
		form.cmbProcedure().setValue(null);
		form.SwabsAccountable().setValue(null);
		form.InstrumentsCorrect().setValue(null);
		form.SharpsOther().setValue(null);
	}

	private void populateScreenFromData(ims.clinical.vo.FinalCountsIntraOpVo finalCount)
	{
		clearScreen();
		if (finalCount == null)
			return;

		form.cmbVerifiedBy().setValue(finalCount.getVerifiedByIsNotNull() ? finalCount.getVerifiedBy() : null);
		form.chklistActionsTaken().setValues(finalCount.getActionsTakenIsNotNull() ? finalCount.getActionsTaken() : null);
		form.chklistMissingItems().setValues(finalCount.getMissingItemsIsNotNull() ? finalCount.getMissingItems() : null);
		form.txtOtherActions().setValue(finalCount.getOtherActionsTakenIsNotNull() ? finalCount.getOtherActionsTaken() : null);
		form.txtMissingItems().setValue(finalCount.getOtherMissingItemsIsNotNull() ? finalCount.getOtherMissingItems() : null);
		form.cmbVerfiedBy2().setValue(finalCount.getVerifiedBy2IsNotNull() ? finalCount.getVerifiedBy2() : null);
		form.cmbVerfiedBy1().setValue(finalCount.getVerifiedBy1IsNotNull() ? finalCount.getVerifiedBy1() : null);
		form.cmbProcedure().setValue(finalCount.getProcedureIsNotNull() ? finalCount.getProcedure() : null);
		form.SwabsAccountable().setValue(null);
		YesNoNotApplicable swabAccountable = finalCount.getSwabsAccountableItemscorrect();
		if (swabAccountable != null)
		{
			if (swabAccountable.equals(YesNoNotApplicable.YES))
			{
				form.SwabsAccountable().setValue(SwabsAccountableEnumeration.rdoYesSwabAccount);
			}
			else if (swabAccountable.equals(YesNoNotApplicable.NO))
			{
				form.SwabsAccountable().setValue(SwabsAccountableEnumeration.rdoNoSwabAccount);
			}
			else if (swabAccountable.equals(YesNoNotApplicable.NOTAPPLICABLE))
			{
				form.SwabsAccountable().setValue(SwabsAccountableEnumeration.rdoNASwabAccount);
			}
		}

		form.InstrumentsCorrect().setValue(null);
		YesNoNotApplicable instrumentsCorrect = finalCount.getInstrumentsCorrect();
		if (instrumentsCorrect != null)
		{
			if (instrumentsCorrect.equals(YesNoNotApplicable.YES))
			{
				form.InstrumentsCorrect().setValue(InstrumentsCorrectEnumeration.rdoYesInstrumentsCorrect);
			}
			else if (instrumentsCorrect.equals(YesNoNotApplicable.NO))
			{
				form.InstrumentsCorrect().setValue(InstrumentsCorrectEnumeration.rdoNoInstrumentsCorrect);
			}
			else if (instrumentsCorrect.equals(YesNoNotApplicable.NOTAPPLICABLE))
			{
				form.InstrumentsCorrect().setValue(InstrumentsCorrectEnumeration.rdoNAInstrumentsCorrect);
			}
		}

		form.SharpsOther().setValue(null);
		YesNoNotApplicable sharpsOther = finalCount.getSharpsOtherCorrectAndRemovedFromSet();
		if (sharpsOther != null)
		{
			if (sharpsOther.equals(YesNoNotApplicable.YES))
			{
				form.SharpsOther().setValue(SharpsOtherEnumeration.rdoYesSharpsOther);
			}
			else if (sharpsOther.equals(YesNoNotApplicable.NO))
			{
				form.SharpsOther().setValue(SharpsOtherEnumeration.rdoNoSharpsOther);
			}
			else if (sharpsOther.equals(YesNoNotApplicable.NOTAPPLICABLE))
			{
				form.SharpsOther().setValue(SharpsOtherEnumeration.rdoNASharpsOther);
			}
		}
	}

	private ims.clinical.vo.FinalCountsIntraOpVo populateDataFromScreen(ims.clinical.vo.FinalCountsIntraOpVo finalCount)
	{
		if (finalCount == null)
			finalCount = new ims.clinical.vo.FinalCountsIntraOpVo();

		finalCount.setVerifiedBy(form.cmbVerifiedBy().getValue());
		finalCount.setActionsTaken(form.chklistActionsTaken().getValues());
		finalCount.setMissingItems(form.chklistMissingItems().getValues());
		finalCount.setOtherActionsTaken(form.txtOtherActions().getValue());
		finalCount.setOtherMissingItems(form.txtMissingItems().getValue());
		finalCount.setVerifiedBy2(form.cmbVerfiedBy2().getValue());
		finalCount.setVerifiedBy1(form.cmbVerfiedBy1().getValue());
		finalCount.setProcedure(form.cmbProcedure().getValue());

		if (form.SwabsAccountable().getValue() != null)
		{
			SwabsAccountableEnumeration selection = form.SwabsAccountable().getValue();
			if (selection.equals(SwabsAccountableEnumeration.rdoYesSwabAccount))
			{
				finalCount.setSwabsAccountableItemscorrect(YesNoNotApplicable.YES);
			}
			else if (selection.equals(SwabsAccountableEnumeration.rdoNoSwabAccount))
			{
				finalCount.setSwabsAccountableItemscorrect(YesNoNotApplicable.NO);
			}
			else if (selection.equals(SwabsAccountableEnumeration.rdoNASwabAccount))
			{
				finalCount.setSwabsAccountableItemscorrect(YesNoNotApplicable.NOTAPPLICABLE);
			}
		}

		if (form.InstrumentsCorrect().getValue() != null)
		{
			InstrumentsCorrectEnumeration selection = form.InstrumentsCorrect().getValue();
			if (selection.equals(InstrumentsCorrectEnumeration.rdoYesInstrumentsCorrect))
			{
				finalCount.setInstrumentsCorrect(YesNoNotApplicable.YES);
			}
			else if (selection.equals(InstrumentsCorrectEnumeration.rdoNoInstrumentsCorrect))
			{
				finalCount.setInstrumentsCorrect(YesNoNotApplicable.NO);
			}
			else if (selection.equals(InstrumentsCorrectEnumeration.rdoNAInstrumentsCorrect))
			{
				finalCount.setInstrumentsCorrect(YesNoNotApplicable.NOTAPPLICABLE);
			}
		}

		if (form.SharpsOther().getValue() != null)
		{
			SharpsOtherEnumeration selection = form.SharpsOther().getValue();
			if (selection.equals(SharpsOtherEnumeration.rdoYesSharpsOther))
			{
				finalCount.setSharpsOtherCorrectAndRemovedFromSet(YesNoNotApplicable.YES);
			}
			else if (selection.equals(SharpsOtherEnumeration.rdoNoSharpsOther))
			{
				finalCount.setSharpsOtherCorrectAndRemovedFromSet(YesNoNotApplicable.NO);
			}
			else if (selection.equals(SharpsOtherEnumeration.rdoNASharpsOther))
			{
				finalCount.setSharpsOtherCorrectAndRemovedFromSet(YesNoNotApplicable.NOTAPPLICABLE);
			}
		}

		finalCount.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		return finalCount;
	}

}
