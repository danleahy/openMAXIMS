//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.otherequipmentintraopdialog;

import ims.clinical.vo.EquipmentIntraOpVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open()
	{
		EquipmentIntraOpVo equipment = form.getGlobalContext().Clinical.getOtherEquipmentIntraOpVo();

		populateScreenFromData(equipment);
		//binding doesn't prepopulate data
		if(equipment != null && equipment.getEquipmentCheckedByIsNotNull())
		{
			form.qmbEquipCheckedBy().newRow(equipment.getEquipmentCheckedBy(), equipment.getEquipmentCheckedBy().getMos().toString());
			form.qmbEquipCheckedBy().setValue(equipment.getEquipmentCheckedBy());
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		EquipmentIntraOpVo equipment = populateDataFromScreen(form.getGlobalContext().Clinical.getOtherEquipmentIntraOpVo());
		equipment.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		
		String[] errors = equipment.validate();

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveOtherEquipment(equipment);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Clinical.setOtherEquipmentIntraOpVo(domain.getOtherEquipment(equipment));
			populateScreenFromData(form.getGlobalContext().Clinical.getOtherEquipmentIntraOpVo());
			return;
		}
		//WDEV-21831
		catch (DomainInterfaceException e)
		{
			if(e.getCause() instanceof IllegalArgumentException)
			{
				engine.showMessage("The data has been removed by another user, the screen will be closed");
				engine.close(DialogResult.CANCEL);
				return;				
			}
		}
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onQmbEquipCheckedByTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter a minimum of 3 characters to search by");
			return;
		}
		form.qmbEquipCheckedBy().clear();

		HcpLiteVoCollection voCollHcp;
		try
		{
			voCollHcp = domain.listCaseStaffHcps(value, form.getGlobalContext().Clinical.getIntraOpCaseStaffDetailRefVo());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.qmbEquipCheckedBy().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().toString());
		}

		if (voCollHcp.size() == 0)
			engine.showMessage("No matching records found");
		else if (voCollHcp.size() == 1)
			form.qmbEquipCheckedBy().setValue(voCollHcp.get(0));
		else
			form.qmbEquipCheckedBy().showOpened();
	}
}
