//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.woundpackingintraopdialog;

import ims.clinical.forms.specimenintraopdialog.GenForm.DirectIndirectEnumeration;
import ims.clinical.forms.woundpackingintraopdialog.GenForm.InPlaceYesNoEnumeration;
import ims.clinical.vo.IntraOpPlannedProcedureVo;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.clinical.vo.SpecimenIntraOpVo;
import ims.clinical.vo.WoundPackingIntraOpVo;
import ims.core.vo.PatientProcedureMinVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		loadProcedures();

		initialise();
		open();
	}

	private void initialise()
	{
		form.txtInPlaceOnDepartmandatory().setVisible(true); //WDEV-21829
		form.InPlaceYesNo().setValue(InPlaceYesNoEnumeration.rdoYes);
	}
	
	private void loadProcedures()
	{
		IntraOpPlannedProcedureVoCollection items = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (items != null && items.size() >= 1)
		{
			for (IntraOpPlannedProcedureVo plannedProc : items)
			{
				if (plannedProc.getPlannedProcedureIsNotNull() && plannedProc.getPlannedProcedure().getProcedureIsNotNull())
					form.cmbProcedure().newRow(plannedProc.getPlannedProcedure(), plannedProc.getPlannedProcedure().getProcedure().getProcedureName());
			}
		}
		else
		{
			engine.showMessage("A Planned Procedure must be recorded");
			engine.close(DialogResult.CANCEL);
		}
	}

	private void open()
	{
		WoundPackingIntraOpVo woundPackingIntraOp = form.getGlobalContext().Clinical.getWoundPackingIntraOpVo();
		populateScreenFromData(woundPackingIntraOp);
		if(woundPackingIntraOp == null)
		{
			defaultSelectedProcedure();
		}
	}

	private void defaultSelectedProcedure()
	{
		if(form.cmbProcedure().getValues().size() == 1)
		{
			form.cmbProcedure().setValue((PatientProcedureMinVo) form.cmbProcedure().getValues().get(0));
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WoundPackingIntraOpVo woundPacking = populateDataFromScreen(form.getGlobalContext().Clinical.getWoundPackingIntraOpVo());

		String[] errors = woundPacking.validate(validateUI());

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		//WDEV-21829
		if (woundPacking.getID_WoundPackingIntraOpIsNotNull() && domain.getWoundPackingIntraOp(woundPacking)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return;
		}
				
		try
		{
			domain.saveWoundPackingIntraOp(woundPacking);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Clinical.setWoundPackingIntraOpVo(domain.getWoundPackingIntraOp(woundPacking));
			populateScreenFromData(form.getGlobalContext().Clinical.getWoundPackingIntraOpVo());
			return;
		}
		engine.close(DialogResult.OK);
	}
	
	//WDEV-21829
	private String[] validateUI() 
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();
		
		if(InPlaceYesNoEnumeration.None.equals(form.InPlaceYesNo().getValue()))
		{
			uiErrors.add("In-place on departure is mandatory");
		}
		
		return uiErrors.toArray(new String[0]);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void clearScreen()
	{
		form.txtPackingTypeComments().setValue(null);
		form.cmbPackingType().setValue(null);
		form.txtPackingSite().setValue(null);
		form.txtPackingSiteComments().setValue(null);
		form.cmbProcedure().setValue(null);
		form.InPlaceYesNo().setValue(null);
	}
	protected void populateScreenFromData(ims.clinical.vo.WoundPackingIntraOpVo woundPacking)
	{
		clearScreen();
		if(woundPacking == null)
			return;

		form.txtPackingTypeComments().setValue(woundPacking.getPackingTypeCommentsIsNotNull() ? woundPacking.getPackingTypeComments(): null);
		form.cmbPackingType().setValue(woundPacking.getPackingTypeIsNotNull() ? woundPacking.getPackingType() : null);
		form.txtPackingSite().setValue(woundPacking.getPackingSiteIsNotNull() ? woundPacking.getPackingSite(): null);
		form.txtPackingSiteComments().setValue(woundPacking.getPackingSiteCommentsIsNotNull() ? woundPacking.getPackingSiteComments(): null);
		form.cmbProcedure().setValue(woundPacking.getPatientProcedureIsNotNull() ? woundPacking.getPatientProcedure() : null);
		form.InPlaceYesNo().setValue(woundPacking.getInPlaceOnDepartureIsNotNull() ? (woundPacking.getInPlaceOnDeparture().equals(YesNo.YES) ? InPlaceYesNoEnumeration.rdoYes : InPlaceYesNoEnumeration.rdoNo ) : null);
	}
	protected ims.clinical.vo.WoundPackingIntraOpVo populateDataFromScreen(ims.clinical.vo.WoundPackingIntraOpVo woundPacking)
	{
		if(woundPacking == null)
			woundPacking = new ims.clinical.vo.WoundPackingIntraOpVo();

		woundPacking.setPackingTypeComments(form.txtPackingTypeComments().getValue());
		woundPacking.setPackingType(form.cmbPackingType().getValue());
		woundPacking.setPackingSite(form.txtPackingSite().getValue());
		woundPacking.setPackingSiteComments(form.txtPackingSiteComments().getValue());
		woundPacking.setPatientProcedure(form.cmbProcedure().getValue());
		woundPacking.setInPlaceOnDeparture(form.InPlaceYesNo().getValue() != null ? (form.InPlaceYesNo().getValue().equals(InPlaceYesNoEnumeration.rdoYes) ? YesNo.YES : YesNo.NO) : null);
		woundPacking.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		
		return woundPacking;
	}
}
