//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.wardselectionforvteconfig;

import ims.clinical.forms.wardselectionforvteconfig.GenForm.grdWardsRow;
import ims.core.vo.LocationForVTEAssessmentVo;
import ims.core.vo.LocationForVTEAssessmentVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		populateHospitalCombo();

	}

	private void populateHospitalCombo()
	{
		LocationLiteVoCollection hospitals = domain.listHospitals();

		if (hospitals == null || hospitals.size() == 0)
			return;

		for (LocationLiteVo hospital : hospitals)
		{
			if (hospital == null)
				continue;

			form.cmbHospital().newRow(hospital, hospital.getName());
		}
	}

	@Override
	protected void onBtnAddClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onGrdWardsGridCheckBoxClicked(int column, GenForm.grdWardsRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Core.getSelectedWardsForVTEConfig() == null)
			form.getGlobalContext().Core.setSelectedWardsForVTEConfig(new LocationForVTEAssessmentVoCollection());

		if (isChecked)
			form.getGlobalContext().Core.getSelectedWardsForVTEConfig().add(row.getValue());
		else
			form.getGlobalContext().Core.getSelectedWardsForVTEConfig().remove(row.getValue());
	}

	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		listWards(form.cmbHospital().getValue());
		markAlreadyAddedValues();
	}

	private void markAlreadyAddedValues()
	{
		if (form.getGlobalContext().Core.getSelectedWardsForVTEConfig() == null || form.getGlobalContext().Core.getSelectedWardsForVTEConfig().size() == 0)
			return;

		LocationForVTEAssessmentVoCollection addedWards = form.getGlobalContext().Core.getSelectedWardsForVTEConfig();

		for (int i = 0; i < addedWards.size(); i++)
		{
			for (int j = 0; j < form.grdWards().getRows().size(); j++)
			{
				if (addedWards.get(i).equals(form.grdWards().getRows().get(j).getValue()))
				{
					form.grdWards().getRows().get(j).setColSelect(true);

				}
			}
		}

	}

	private void listWards(LocationLiteVo hospital)
	{
		form.grdWards().getRows().clear();

		if (hospital == null || hospital.getID_Location() == null)
			return;

		LocationForVTEAssessmentVoCollection wards = domain.listWards(hospital);

		if (wards == null || wards.size() == 0)
			return;

		for (LocationForVTEAssessmentVo ward : wards)
		{
			if (ward == null)
				continue;

			addWardRow(ward);
		}
	}

	private void addWardRow(LocationForVTEAssessmentVo ward)
	{
		if (ward == null)
			return;

		grdWardsRow row = form.grdWards().getRows().newRow();

		row.setColWard(ward.getName());
		row.setColSelect(false);

		row.setValue(ward);
	}

}
