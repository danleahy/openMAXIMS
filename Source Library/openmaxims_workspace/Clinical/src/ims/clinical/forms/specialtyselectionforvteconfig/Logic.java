//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.specialtyselectionforvteconfig;

import ims.clinical.forms.specialtyselectionforvteconfig.GenForm.grdSpecialtyRow;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open()
	{
		populateScreenWithLookups();
		markAlreadyAddedValues();
	}

	private void markAlreadyAddedValues()
	{
		if (form.getGlobalContext().Clinical.getSelectedSpecialtiesForVteConfig() == null || form.getGlobalContext().Clinical.getSelectedSpecialtiesForVteConfig().size() == 0)
			return;

		SpecialtyCollection addedSpecialties = form.getGlobalContext().Clinical.getSelectedSpecialtiesForVteConfig();

		for (int i = 0; i < addedSpecialties.size(); i++)
		{
			for (int j = 0; j < form.grdSpecialty().getRows().size(); j++)
			{
				if (addedSpecialties.get(i).equals(form.grdSpecialty().getRows().get(j).getValue()))
				{
					form.grdSpecialty().getRows().get(j).setColSelect(true);

				}
			}
		}
	}

	private void populateScreenWithLookups()
	{
		form.grdSpecialty().getRows().clear();

		SpecialtyCollection lkpSpecialtyCollection = LookupHelper.getSpecialty(domain.getLookupService());

		if (lkpSpecialtyCollection == null)
			return;

		for (int i = 0; i < lkpSpecialtyCollection.size(); i++)
		{

			grdSpecialtyRow newAreaColumn = form.grdSpecialty().getRows().newRow();

			newAreaColumn.setColSpecialty(lkpSpecialtyCollection.get(i).getText());
			newAreaColumn.setColSelect(false);
			newAreaColumn.setValue(lkpSpecialtyCollection.get(i));
		}

	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnAddClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateDataFromScreen();
		engine.close(DialogResult.OK);
	}

	private void populateDataFromScreen()
	{
		form.getGlobalContext().Clinical.setSelectedSpecialtiesForVteConfig(new SpecialtyCollection());

		for (int i = 0; i < form.grdSpecialty().getRows().size(); i++)
		{
			if (form.grdSpecialty().getRows().get(i).getColSelect())
			{
				form.getGlobalContext().Clinical.getSelectedSpecialtiesForVteConfig().add(form.grdSpecialty().getRows().get(i).getValue());
			}
		}
	}

}
