//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.multiplesafetybriefdialog;

import ims.clinical.forms.multiplesafetybriefdialog.GenForm.grdAppointmentsRow;
import ims.clinical.vo.AcuteTheatreListBookingAppointmentVo;
import ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection;
import ims.clinical.vo.PeriOpSafetyBriefTimeVo;
import ims.clinical.vo.PeriOpSafetyBriefTimeVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentRefVoCollection;

public class Logic extends BaseLogic
{
	private static final int SAFETY_BRIEF_DELAY_MINS = -15;
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Clinical.getAvailableSafetyBriefAppointments() == null || form.getGlobalContext().Clinical.getAvailableSafetyBriefAppointments().size() == 0)
		{
			engine.showMessage("No Appointments available for Multiple Safety Brief"); //WDEV-22606
			engine.close(DialogResult.CANCEL);
			return;
		}

		initialise();
		loadAppointments();
	}

	private void initialise()
	{
		form.dtimDateTime().setValue(new DateTime());
	}

	private void loadAppointments()
	{
		AcuteTheatreListBookingAppointmentVoCollection data = form.getGlobalContext().Clinical.getAvailableSafetyBriefAppointments();
		data = domain.filterAlreadySafetyBriefedAppointments(data);

		if (data.size() == 0)
		{
			engine.showMessage("No Appointments available for Multiple Safety Brief"); //WDEV-22606
			engine.close(DialogResult.CANCEL);
			return;
		}

		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		form.grdAppointments().setcolHospnumCaption(dispIdType.getText());
		
		for (AcuteTheatreListBookingAppointmentVo appt : data)
		{
			grdAppointmentsRow row = form.grdAppointments().getRows().newRow();

			PatientShort voPatShort = appt.getPatient();
			if (voPatShort.getDisplayId() != null)
			{
				row.setcolHospnum(voPatShort.getDisplayId().getValue());
			}
			
			row.setcolSurname(voPatShort.getName().getSurname());
			row.setcolForename(voPatShort.getName().getForename());

			row.setcolSelect(true);
			row.setValue(appt);
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = validateUI();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		//safety brief delay
		if(form.getGlobalContext().Clinical.getTheatreSessionStartDateTime() != null)
		{
			
			DateTime sessionDateTime = form.getGlobalContext().Clinical.getTheatreSessionStartDateTime();
			DateTime safetyBriefDateTime = (DateTime) form.dtimDateTime().getValue().clone();
			
			safetyBriefDateTime.addMinutes(SAFETY_BRIEF_DELAY_MINS);
			
			if(safetyBriefDateTime.isGreaterThan(sessionDateTime))
			{
				int delayedMins = DateTime.minutesDiff(safetyBriefDateTime, sessionDateTime);
				
				engine.open(form.getForms().Clinical.TheatreSafeyBriefDelayDialog, new Object[] {delayedMins});
				return;
			}
		}
		
		saveSafetyBriefs();
	}

	private void saveSafetyBriefs()
	{
		Booking_AppointmentRefVoCollection appts = new Booking_AppointmentRefVoCollection();
		
		for (int i = 0; i < form.grdAppointments().getRows().size(); i++)
		{
			grdAppointmentsRow row = form.grdAppointments().getRows().get(i);
			if (row.getcolSelect())
			{
				appts.add(row.getValue());
			}
		}

		PeriOpSafetyBriefTimeVoCollection safetyBriefs = new PeriOpSafetyBriefTimeVoCollection();
		for (Booking_AppointmentRefVo appt : appts)
		{
			PeriOpSafetyBriefTimeVo safetyBrief = new PeriOpSafetyBriefTimeVo();
			safetyBrief.setTheatreAppointment(appt);
			safetyBrief.setSafetyBriefTime(form.dtimDateTime().getValue());
			safetyBrief.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
			safetyBriefs.add(safetyBrief);
		}

		try
		{
			domain.saveSafetyBriefs(safetyBriefs);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return;
		}
		catch (UniqueKeyViolationException ex)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return;
		}

		engine.close(DialogResult.OK);
		
	}

	private String[] validateUI()
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();

		if (form.dtimDateTime().getValue() == null)
			uiErrors.add("Date and Time is mandatory");

		int count = 0;
		
		for (int i = 0; i < form.grdAppointments().getRows().size(); i++)
		{
			grdAppointmentsRow row = form.grdAppointments().getRows().get(i);
			count += row.getcolSelect() == true ? 1 : 0;
		}

		if (count == 0)
			uiErrors.add("At least 1 appointment must be selected");

		return uiErrors.toArray(new String[0]);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.TheatreSafeyBriefDelayDialog) && result.equals(DialogResult.OK))
		{
			saveSafetyBriefs();
		}
	}
}
