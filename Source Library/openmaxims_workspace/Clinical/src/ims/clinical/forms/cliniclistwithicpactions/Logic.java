//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3399.26368)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.cliniclistwithicpactions;

import ims.admin.vo.AppointmentTrackingstatusColourConfigVo;
import ims.admin.vo.PDSConfigurationVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListForDNAAppointmentsVo;
import ims.RefMan.vo.ReferralLetterDetailsClinicListListVo;
import ims.RefMan.vo.TCIForPatientElectiveListAppointmentDNAVo;
import ims.RefMan.vo.TCIOutcomeForAppointmentDNAVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.forms.cliniclistwithicpactions.GenForm.grdResultsRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.helper.PdsException;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.ActivityWithImageLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.IPandOPSearchCriteriaVo;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MissingMappingVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PdsErrorVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.Language;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVo;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVo;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.LateTimeArrivalRecordVo;
import ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVo;
import ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.enums.AppointmentOutcomeAction;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;
	private static final int CURRENT_TRACKING_DATETIME_COL_INDEX = 10;
	private static final int APPT_BOOKING_COMMENTS_IMG_COL_INDEX = 13;
	private static final int APPT_LETTER_PRINTED_COL_INDEX 		 = 14; //WDEV-19381
	private static final int INTERPRETER_DETAILS_COL_INDEX 		 = 16;	//wdev-20071private static final int INTERPRETER_DETAILS_COL_INDEX 		 = 16;
	private static final int LINKED_APPOINTMENTS_COL_INDEX 		 = 17;
	private static final int COL_CONTACT_DETAILS 		 		 = 19;	//wdev-19505
	

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			form.grdResults().setRowSelectionChangedEventRequirePdsAuthentication(true);
		
		initialise();
		if (form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteriaIsNotNull())
			refreshSearchCriteria();
	}
	
	private void initialise() 
	{
		form.dteDate().setValue(new Date());
		form.getLocalContext().setbDNACalled(false);
		form.getLocalContext().setbSeenByPreOp(false);
		form.ccListOwner().initialize(MosType.HCP);
		form.lblListOwnersSel().setValue(null);
		form.lblListOwnersSel().setTooltip(null);
		if (form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteriaIsNotNull())
			form.getGlobalContext().Scheduling.setSelectedHCPs(form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteria().getListOwners());

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		form.grdResults().setcolHospnumCaption(dispIdType.getText());

		loadHospitals();
		
		if (form.cmbHospital().getValue() == null && engine.getCurrentLocation() != null)
		{
			//Try and load the logged in location
			LocationLiteVo hospital = domain.getHospitalLiteForLocation(engine.getCurrentLocation()); //WDEV-21222
			if(hospital!=null)
			{
				form.cmbHospital().setValue(hospital);
				searchForClinics();
			}
		}
		
		if( form.cmbHospital().getValue() != null)	//wdev-19503
			populateOutpatientLocationCombo();	
		
		//WDEV-13354
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.CLINICLISTWITHICP_TIMER_INTERVAL.getValue());
		form.imbAutoRefresh().setEnabled(false);
		form.getLocalContext().setWasTimerEnabled(false);
		
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);//WDEV-19543
	}

	private void refreshSearchCriteria() 
	{
		IPandOPSearchCriteriaVo voCriteria = form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteria();
		
		form.cmbHospital().setValue((LocationLiteVo) voCriteria.getHospital());
		
		if( form.cmbHospital().getValue() != null)	//wdev-19503
			populateOutpatientLocationCombo();	
		
		if (voCriteria.getServiceIsNotNull())
		{
			form.qmbService().newRow(voCriteria.getService(), voCriteria.getService().getServiceName());
			form.qmbService().setValue(voCriteria.getService());
		}
		form.dteDate().setValue(voCriteria.getDate());
		
		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(voCriteria.getClinicIsNotNull());
		
		form.cmbClinic().setValue((SessionShortVo) voCriteria.getClinic());
		
		if (voCriteria.getListOwners() != null && voCriteria.getListOwners().size() > 0)
		{
			if (voCriteria.getListOwners().size() == 1)
			{
				form.ccListOwner().setValue(voCriteria.getListOwners().get(0));
			}
			else
			{
				form.getGlobalContext().Scheduling.setSelectedHCPs(voCriteria.getListOwners());
				populateListOwnersLabel(voCriteria.getListOwners());

			}
		}
		form.cmbListType().setValue(voCriteria.getListType());	//wdev-19419
		form.cmbOutpatientLocation().setValue(voCriteria.getOutPatientLocation());	//wdev-19503
		search();
		
		//WDEV-13354
		if(voCriteria.getWasTimerOnIsNotNull() && voCriteria.getWasTimerOn())
		{
			form.getLocalContext().setWasTimerEnabled(true);
			toggleTimer(false);
		}
	}
	
	//WDEV-13354
	private void toggleTimer(boolean fromButton)
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			if(!validateSearch())
				return;
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerEnabled();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Clinic List");	
			form.getLocalContext().setWasTimerEnabled(false);
			if(form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteriaIsNotNull())
				form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of Clinic List");
				form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
				
				//update the context state
				form.getLocalContext().setWasTimerEnabled(true);
				if(form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteriaIsNotNull())
					form.getGlobalContext().getUKSHOutPatientWardViewSearchCriteria().setWasTimerOn(true);
				
				//enable the stopping button
				form.imbAutoRefresh().setEnabled(true);
			}
		}

		
		boolean enableControls = !form.getTimers().gettimerSearch().isEnabled();
		
		form.cmbHospital().setEnabled(enableControls);
		form.cmbClinic().setEnabled(enableControls);
		form.dteDate().setEnabled(enableControls);
		form.cmbListType().setEnabled(enableControls);	//wdev-19419
		form.cmbOutpatientLocation().setEnabled(enableControls);	//wdev-19503
		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);
	}
	

	private void loadHospitals() 
	{
		LocationLiteVoCollection hospitals = domain.getActiveHospitals(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
		if (hospitals!=null)
		{
			for (LocationLiteVo item: hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());
				
				if(engine.getCurrentLocation() != null)
				{
					if (engine.getCurrentLocation().getID() == item.getID_Location().intValue()
						&& form.dteDate().getValue() != null)
					{
						form.cmbHospital().setValue(item);
						
						loadClinics(false);
					}
				}
			}
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdResults().getRows().clear();
		form.getLocalContext().setSelectedRow(null);
		
		form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		
		form.cmbClinic().clear();
		form.qmbService().clear();
		form.cmbHospital().setValue(null);
		form.dteDate().setValue(null);
		form.getLocalContext().setbDNACalled(false);
		form.getLocalContext().setbSeenByPreOp(false);
		form.cmbListType().setValue(null);		//wdev-19419
		form.cmbOutpatientLocation().setValue(null);	//wdev-19503
			
		//WDEV-13354
		form.imbAutoRefresh().setEnabled(false);
		//WDEV-19320
		form.lblListOwnersSel().setValue(null);
		form.lblListOwnersSel().setTooltip(null);
		form.getGlobalContext().setUKSHOutPatientWardViewSearchCriteria(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);
		
		//WDEV-20415 Ensure that global contexts are cleared
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null); //WDEV-20415
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}
	
	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();
		
	//	if(form.cmbClinic().getValue() == null)
	//		uiErrors.add("Please select a Clinic");

		if(form.dteDate().getValue() == null)
			uiErrors.add("Please enter a Date");
			
		if(form.cmbHospital().getValue() == null)
			uiErrors.add("Please select a Hospital");
		
		if(uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}
		
		return true;
	}
	
	private void search() 
	{
		//WDEV-13354
		form.imbAutoRefresh().setEnabled(false);
		
		if ( ! validateSearch())
			return;
		
		IPandOPSearchCriteriaVo filterVo = new IPandOPSearchCriteriaVo();
		
		filterVo = populateSearchFilter(filterVo);
		if (filterVo ==null)
			return;
		
		form.getLocalContext().setbDNACalled(false);
		form.getLocalContext().setbSeenByPreOp(false);

		form.getGlobalContext().setUKSHOutPatientWardViewSearchCriteria(filterVo);
		form.grdResults().getRows().clear();
		form.getLocalContext().setSelectedRow(null);
		form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();

		OutpatientEpisodeWithICPInfoVoCollection list = domain.listOPEpisodes(filterVo);
		if (list == null || list.size() == 0)
		{
			engine.showMessage("No records match your search criteria.", "No Data Found", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}

		//WDEV-11771 - starts here
		list.sort(OutpatientEpisodeWithICPInfoVo.getTimeComparator(SortOrder.ASCENDING));
		form.getLocalContext().setSortOrderTime(SortOrder.DESCENDING);
		//WDEV-11771 - ends here
		
		populateGrid(list);
				
		//WDEV-13354
		form.imbAutoRefresh().setEnabled(true);
	}

	private void populateGrid(OutpatientEpisodeWithICPInfoVoCollection list) 
	{
		form.grdResults().getRows().clear();
		form.getLocalContext().setSelectedRow(null);
		StringBuffer strTooltip = new StringBuffer();
		
		for (int i = 0 ; list != null && i < list.size() ; i++)
		{
			grdResultsRow row = form.grdResults().getRows().newRow();
								
			OutpatientEpisodeWithICPInfoVo outpatientEpisode = list.get(i);
			boolean hasBookingComments = outpatientEpisode != null && outpatientEpisode.getBookingCommentsIsNotNull() && outpatientEpisode.getBookingComments().length() > 0;
			
			strTooltip.delete(0, strTooltip.length());

			row.setcolICP(outpatientEpisode.getICPInfoIsNotNull() ? form.getImages().ICP.ICP : null);
			row.setcolICAB(outpatientEpisode.getReferral() != null && Boolean.TRUE.equals(outpatientEpisode.getReferral().getIsCAB()) ? form.getImages().OCRR.LetterC : null);
			
			// WDEV-15944
			Booking_AppointmentVo voBook = domain.getBookingAppt(outpatientEpisode);

			PatientShort voPatShort = outpatientEpisode.getPatient();
			strTooltip.append("<b>Booking Details:</b> " + voPatShort.getPatientNameAndIdInfo());
			//WDEV-19207
			if (hasBookingComments)
				strTooltip.append("<br><b>Booking Comments:</b> " + outpatientEpisode.getBookingComments());
			
			if(voBook != null && voBook.getOutcomeIsNotNull())
				strTooltip.append("<br><b>Appointment Outcome:</b> " + voBook.getOutcome().getText());
			
			if (voBook != null && voBook.getOutcomeCommentsIsNotNull())
				strTooltip.append("<br><b>Outcome Comments:</b> " + voBook.getOutcomeComments());
				
			if(voBook != null && voBook.getCommentsIsNotNull())
				strTooltip.append("<br><b>Appointment Comments:</b> " + voBook.getComments());

			if (outpatientEpisode.getReferral() != null && outpatientEpisode.getReferral().getReferralDetails() != null)
			{
				if (outpatientEpisode.getReferral().getCurrentRTTStatus() != null && outpatientEpisode.getReferral().getCurrentRTTStatus().getRTTStatus() != null)
				{
					strTooltip.append("<br><b>RTT Status:</b> ").append(outpatientEpisode.getReferral().getCurrentRTTStatus().getRTTStatus().getDescription());
				}
				
				if(outpatientEpisode.getReferral().getReferralDetails().getEnd18WW() != null)
				{
					strTooltip.append("<br><b>RTT Breach Date:</b> " + outpatientEpisode.getReferral().getReferralDetails().getEnd18WW().toString());
				}
				
				if (outpatientEpisode.getReferral().getReferralDetails().getDadUbrn() != null)
					strTooltip.append("<br><b>UBRN:</b> " + outpatientEpisode.getReferral().getReferralDetails().getDadUbrn());
			}			
			
			if (outpatientEpisode.getPatient().getDisplayId() != null)
				row.setcolHospnum(outpatientEpisode.getPatient().getDisplayId().getValue());
				row.setTooltipForcolHospnum(strTooltip.toString());
			
			row.setcolSurname(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getSurname() : "");
			row.setTooltipForcolSurname(strTooltip.toString());
			
			row.setcolForename(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getForename() : "");
			row.setTooltipForcolForename(strTooltip.toString());
			
			row.setcolSex(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() : "");
			//WDEV-11893
			row.setTooltipForcolSex(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() + "<br><br>" + strTooltip : strTooltip.toString());
			
			row.setcolDob(outpatientEpisode.getPatient().getDobIsNotNull() ? outpatientEpisode.getPatient().getDob().toString() : "");
			row.setTooltipForcolDob(strTooltip.toString());
			
			if (outpatientEpisode.getSessionIsNotNull() 
				&& outpatientEpisode.getSession().getListOwnersIsNotNull()
				&& outpatientEpisode.getSession().getListOwners().size() > 0 
				&& outpatientEpisode.getSession().getListOwners().get(0).getHcpIsNotNull()
				&& outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName() != null)
			{
				row.setcolConsultant(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName().toString());
				//WDEV-11893
				row.setTooltipForcolConsultant(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName().toString() + "<br><br>" + strTooltip);
			}
			else
				row.setTooltipForcolConsultant(strTooltip.toString());
			
			row.setColStatus(outpatientEpisode.getApptStatusIsNotNull() ? outpatientEpisode.getApptStatus().toString() : "");
			row.setTooltipForColStatus(outpatientEpisode.getApptStatusIsNotNull() ? outpatientEpisode.getApptStatus().toString() + "<br><br>" + strTooltip : strTooltip.toString());
			
			if (outpatientEpisode.getApptStatusIsNotNull() && outpatientEpisode.getApptStatus().equals(Status_Reason.ARRIVAL))
				row.setBackColor(ConfigFlag.UI.CLINIC_LIST_ARRIVED_COLOUR.getValue());
			
			row.setcolApptTime(outpatientEpisode.getAppointmentTimeIsNotNull() ? outpatientEpisode.getAppointmentTime().toString() : null);
			row.setTooltipForcolApptTime(strTooltip.toString());
			
			//WDEV-11665 - starts here
			String IcpTooltip = "";
			
			if (outpatientEpisode.getICPInfoIsNotNull())
			{
				if(outpatientEpisode.getICPInfo().getHasOutstandingNursingActionsIsNotNull() 
				&& outpatientEpisode.getICPInfo().getHasOutstandingNursingActions())
				{
					IcpTooltip += "Nursing Action Required for ICP: " + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}
			
				if (outpatientEpisode.getICPInfo().getHasOutstandingClinicalActionsIsNotNull() 
					&& outpatientEpisode.getICPInfo().getHasOutstandingClinicalActions())
				{
					IcpTooltip += "Medical Action Required for ICP: "  + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}

				if (outpatientEpisode.getICPInfo().getHasOutstandingPhysioActionsIsNotNull() 
					&& outpatientEpisode.getICPInfo().getHasOutstandingPhysioActions())
				{
					IcpTooltip += "Physiotherapy Action Required for ICP: "  + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}

				if(outpatientEpisode.getICPInfo().getHasOutstandingAdminActionsIsNotNull()
					&& outpatientEpisode.getICPInfo().getHasOutstandingAdminActions())
				{
					IcpTooltip += "Admin Action Required for ICP: "  + (outpatientEpisode.getICPInfo().getICPIsNotNull() ? outpatientEpisode.getICPInfo().getICP().getName().toString() : "")+ "<br>";
				}
			}
			
			row.setTooltipForcolICP(IcpTooltip.length() > 0 ? IcpTooltip + "<br/>" + strTooltip : strTooltip.toString());
			row.setTooltipForcolICAB(strTooltip.toString());
			
			row.setcolTracking(outpatientEpisode.getCurrentApptTrakingStatus() != null ? outpatientEpisode.getCurrentApptTrakingStatus().getTrackingStatus().getIItemText() : null);
			row.setTooltipForcolTracking(outpatientEpisode.getCurrentApptTrakingStatus() != null ? outpatientEpisode.getCurrentApptTrakingStatus().getTrackingStatus().getIItemText() + "<br><br>" + strTooltip : strTooltip.toString());
			//WDEV-19207
			if (hasBookingComments)
			{
				row.setcolBookingComments(form.getImages().Emergency.CommentNotes16x16);
				row.setCellcolBookingCommentsTooltip("Booking Comments: <b>" + outpatientEpisode.getBookingComments().trim());
			}
			if(outpatientEpisode.getCurrentApptTrakingStatus() != null && outpatientEpisode.getCurrentApptTrakingStatus().getTrackingStatusIsNotNull())
			{
				AppointmentTrackingstatusColourConfigVo colorConfig = outpatientEpisode.getAppointmentTrackingStatus();
				
				if (colorConfig != null)
				{
					// WDEV-12745
					// If status was changed more than 'idle' minutes (configured for AppointmentTrackingStatusConfig) ago,
					// then set row to idle colour
					if (outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTimeIsNotNull() && outpatientEpisode.getAppointmentTrackingStatus().getIdleTimeInMinsIsNotNull()
							&& ((DateTime) outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().clone()).addMinutes(colorConfig.getIdleTimeInMins()).isLessOrEqualThan(new DateTime()))
					{
						row.setBackColor(colorConfig.getIdleColour());
					}
					else
					{
    					row.setBackColor(colorConfig.getColour());
					}
				}
			}
			
			row.setcolActivityType(outpatientEpisode.getActivityIsNotNull() ? outpatientEpisode.getActivity().getName() : null);
			//----wdev-19496
			if( outpatientEpisode.getActivityIsNotNull() )
			{
				ActivityWithImageLiteVo tempVo = domain.getActivityWithImage(outpatientEpisode.getActivity());
				if( tempVo != null && tempVo.getActivityImageIsNotNull() )
				{
					row.setColActivityImage(engine.getRegisteredImage(tempVo.getActivityImage().getID_AppImage().intValue()));
				}
			}
			//---------------
			row.setTooltipForcolActivityType(outpatientEpisode.getActivityIsNotNull() ? outpatientEpisode.getActivity().getName() + "<br><br>" + strTooltip : strTooltip.toString());
			//WDEV-11665 - ends here
			
			//WDEV-11893 - starts here
			row.setColTrackingTime((outpatientEpisode.getCurrentApptTrakingStatus() != null && outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime() != null && outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().getTime() != null) ? outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().getTime().toString() : null);
			row.setTooltipForColTrackingTime((outpatientEpisode.getCurrentApptTrakingStatus() != null && outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime() != null) ? outpatientEpisode.getCurrentApptTrakingStatus().getStatusChangeDateTime().toString() + "<br><br>" + strTooltip : strTooltip.toString());
			//WDEV-11893 - ends here
			
			//WDEV-18220 - starts here
			if (Boolean.TRUE.equals(outpatientEpisode.getHasElectiveList()))
			{
				row.setcolOutcomeElective(form.getImages().Core.UI16);
				row.setCellcolOutcomeElectiveTooltip("Waiting List Entry");//WDEV-18345
			}
			else if (Boolean.TRUE.equals(outpatientEpisode.getOutcomeIsNotNull()))
			{
				row.setcolOutcomeElective(form.getImages().Scheduling.appointment_outcome_16);
				row.setCellcolOutcomeElectiveTooltip("Appointment Outcome: " + outpatientEpisode.getOutcome().getText());
			}
			//WDEV-18220 - ends here
			
			//WDEV-19381
			row.setcolAppLetterPrinted(Boolean.TRUE.equals(outpatientEpisode.getWasPrinted()) ? form.getImages().Correspondence.Printer : null);
			row.setTooltipForcolAppLetterPrinted(getTooltipForColAppLetterPrinted(outpatientEpisode));
			
			//wdev-19505
			if( outpatientEpisode != null )
			{
				
				if( outpatientEpisode.getPatientIsNotNull() )
				{
					CommChannelVoCollection voCommChannelColl = outpatientEpisode.getPatient().getCommChannels();
					if( voCommChannelColl != null)
					{
						String ContactDetTooltip = "";
						if( voCommChannelColl.size() > 0)
						{
    						
    						row.setColContactDetails(form.getImages().RefMan.HandSet16);
    						for( int k = 0; k < voCommChannelColl.size(); k++)
    						{
    							CommChannelVo voCommChannel = voCommChannelColl.get(k);
    
    							if( voCommChannel.getChannelTypeIsNotNull())
    							{
    								ContactDetTooltip += "<b>Contact Type: </b>" + voCommChannel.getChannelType() + ", <b>Contact Value: </b>" + voCommChannel.getCommValue() + "<br>";
    								
    							}
    						}
						}
						else
							row.setColContactDetailsEmpty(true);
							
						row.setTooltipForColContactDetails(ContactDetTooltip);

					}
					
				}
				
			}
			//-----------
			//WDEV-20071 
			if (outpatientEpisode.getReferralIsNotNull() &&  outpatientEpisode.getReferral().getReferralDetailsIsNotNull() && YesNo.YES.equals(outpatientEpisode.getReferral().getReferralDetails().getInterpreterRequired()))
			{
				row.setcolInterpreterRequired(form.getImages().RefMan.interpreter18x18);
				row.setCellcolInterpreterRequiredTooltip(getInterpreterDetailsDisplay(outpatientEpisode.getReferral().getReferralDetails()));
			}
			//WDEV-20071 --- ends here
			
			if (outpatientEpisode.getLinkedAppointmentsIsNotNull() && outpatientEpisode.getLinkedAppointments().size()>0)
			{
				row.setColLinkedAppointment(form.getImages().Admin.link);
				row.setTooltipForColLinkedAppointment(getTooltipForColLinkedAppt(outpatientEpisode.getLinkedAppointments()));
			}
			
			row.setValue(outpatientEpisode);
		}
	}
	
	private String getTooltipForColLinkedAppt(LinkedAppointmentsForClinicListWithICPActionsVoCollection linkedAppointmentsForClinicListWithICPActionsVoCollection)
	{
		if (linkedAppointmentsForClinicListWithICPActionsVoCollection==null || linkedAppointmentsForClinicListWithICPActionsVoCollection.size()==0)
			return "";
			
		StringBuffer tooltip = new StringBuffer();
		
		tooltip.append("<table style=\"border :1px solid black; border-collapse:collapse;\">");
		tooltip.append("<tr><td style=\" border:1px solid black;\"><b>Date Time  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>Service &nbsp &nbsp </b></td><td style=\" border:1px solid black;\"><b>Clinic &nbsp &nbsp </b></td> <td style=\" border:1px solid black;\"><b>Status &nbsp &nbsp </b></td> </tr>");
		
		for (int i = 0; i < linkedAppointmentsForClinicListWithICPActionsVoCollection.size(); i++)
		{
			LinkedAppointmentsForClinicListWithICPActionsVo linkedAppt = linkedAppointmentsForClinicListWithICPActionsVoCollection.get(i);
			
			if (linkedAppt==null)
				continue;
	
			String dateTimeStr = "";
			if(linkedAppt.getAppointmentDateIsNotNull())
				dateTimeStr += linkedAppt.getAppointmentDate().toString() + " ";
			if(linkedAppt.getApptStartTimeIsNotNull())
				dateTimeStr += linkedAppt.getApptStartTime().toString();
			
			tooltip.append("<tr>");
			tooltip.append("<td style=\" border:1px solid black;\"><b>" +dateTimeStr 
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(linkedAppt.getSessionIsNotNull()&& linkedAppt.getSession().getServiceIsNotNull()? linkedAppt.getSession().getService().getServiceName() : "" )
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(linkedAppt.getSessionIsNotNull() && linkedAppt.getSession().getNameIsNotNull() ? linkedAppt.getSession().getName() : "") + "</b></td>"
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(linkedAppt.getApptStatusIsNotNull() ? linkedAppt.getApptStatus() : "") + "</b></td></tr>");
		}
		tooltip.append("</table>");

		return tooltip.toString();
		
	}
	
	//WDEV-20071
	private String getInterpreterDetailsDisplay(ReferralLetterDetailsClinicListListVo referralDetails)
	{
		if (referralDetails == null)
			return null;
		String szTooltip = "";
		if (YesNo.YES.equals(referralDetails.getInterpreterRequired()))
		{
			szTooltip += referralDetails.getLanguageIsNotNull() || referralDetails.getOtherLanguageIsNotNull() ? "<b/>Requires Interpreter<br/> Language:</b> " + (referralDetails.getLanguage() != null ?  (Language.OTHER.equals(referralDetails.getLanguage()) ?  (referralDetails.getOtherLanguage() != null ? referralDetails.getOtherLanguage() : "") : referralDetails.getLanguage().getText()): "") : "";
			
		}
		return szTooltip;
	}

	//WDEV-19381
	private String getTooltipForColAppLetterPrinted(OutpatientEpisodeWithICPInfoVo outpatientEpisode)
	{
		if (outpatientEpisode == null || !Boolean.TRUE.equals(outpatientEpisode.getWasPrinted()))
		{
			return null;
		}
		
		String str = "Appointment Letter Was Printed";
		
		str+=(outpatientEpisode.getBookingLetterIsNotNull() && outpatientEpisode.getBookingLetter().getRecordingUser()!=null ? "<br/><b>User:  </b>" + outpatientEpisode.getBookingLetter().getRecordingUser().getIMosName() : "");  
		
		str+=(outpatientEpisode.getBookingLetterIsNotNull() && outpatientEpisode.getBookingLetter().getRecordingDateTime()!=null ? "<br/><b>Date/Time: </b>" + outpatientEpisode.getBookingLetter().getRecordingDateTime() : "");  
		
		return str;
		
	}

	private IPandOPSearchCriteriaVo populateSearchFilter(IPandOPSearchCriteriaVo filterVo) 
	{
		if (form.cmbHospital().getValue() != null)
			filterVo.setHospital(form.cmbHospital().getValue());

		if (form.cmbClinic().getValue() != null)
			filterVo.setClinic(form.cmbClinic().getValue());

		if (form.dteDate().getValue() != null)
			filterVo.setDate(form.dteDate().getValue());
		
		if (form.qmbService().getValue() != null)
			filterVo.setService(form.qmbService().getValue());
		
		if (form.ccListOwner().getValue() != null)
		{
			HcpLiteVoCollection hcpCollection = new HcpLiteVoCollection();
			hcpCollection.add(form.ccListOwner().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccListOwner().getValue() : null);
			filterVo.setListOwners(hcpCollection);
		}
		else if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() > 0)
		{
			filterVo.setListOwners(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}

		filterVo.setListType(form.cmbListType().getValue());		//wdev-19419
		filterVo.setOutPatientLocation(form.cmbOutpatientLocation().getValue());	//wdev-19503
		//WDEV-13354
		filterVo.setWasTimerOn(form.getLocalContext().getWasTimerEnabled());
		
		return filterVo;
	}

	@Override
	protected void onGrdResultsSelectionChanged() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		
		form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
		form.getGlobalContext().Core.setSelectedLocationForOrdering(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getSchLocation() : null);
		
		form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		form.getLocalContext().setbLessThenTodaysDate(null);
		form.getLocalContext().setbSeenByPreOp(false);
	
		if (form.grdResults().getSelectedRow() != null 
				&& form.grdResults().getSelectedRow().getValue() != null) 
		{
			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.BOOKED)
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDateIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDate().isLessOrEqualThan(new Date()) )
			{
				form.getContextMenus().Clinical.getOPClinicViewListARRIVEItem().setVisible(true);
				form.getContextMenus().Clinical.getOPClinicViewListARRIVEItem().setEnabled(true);
				
				form.getLocalContext().setbLessThenTodaysDate(! form.grdResults().getSelectedRow().getValue().getAppointmentDate().getDate().equals(new Date().getDate()));
			}
		
			//WDEV-9657
			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull() && form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.BOOKED))
			{			
				//WDEV-11580
				//if appt was today or in the past
				if(form.grdResults().getValue().getAppointmentDateIsNotNull() && new Date().isGreaterOrEqualThan(form.grdResults().getValue().getAppointmentDate()))
				{
					if(new Date().equals(form.grdResults().getValue().getAppointmentDate()))
					{
						//check time as same day
						if(form.grdResults().getValue().getAppointmentTimeIsNotNull() && new Time().isGreaterThan(form.grdResults().getValue().getAppointmentTime())) //wdev-10557
						{
							form.getContextMenus().Clinical.getOPClinicViewListDNAItem().setVisible(true);
						}
					}
					else //in the past disregard time of day
						form.getContextMenus().Clinical.getOPClinicViewListDNAItem().setVisible(true);
				}
			}
				
			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.ARRIVAL) 
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDateIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDate().isLessOrEqualThan(new Date()) )
			{
				//WDEV-11665 - starts here
				/*
				if (form.grdResults().getSelectedRow().getValue().getICPInfo() == null)
				{
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_NO_ICPItem().setVisible(true);
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_NO_ICPItem().setEnabled(true);
				}
				
				else
				{	
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_ICPItem().setVisible(true);
					form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_ICPItem().setEnabled(true);
				}*/
				//WDEV-11665 - ends here

				form.getLocalContext().setbLessThenTodaysDate(! form.grdResults().getSelectedRow().getValue().getAppointmentDate().getDate().equals(new Date().getDate()));
			}

			if (form.grdResults().getSelectedRow().getValue().getICPInfoIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getICPInfo().getID_PatientICPIsNotNull())
			{
				form.getContextMenus().Clinical.getOPClinicViewListEditViewICPActionsItem().setVisible(true);
				form.getContextMenus().Clinical.getOPClinicViewListEditViewICPActionsItem().setEnabled(true);
				
			}

			//WDEV-20672
			/*
			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.SEEN)
				&& domain.isNotACurrentInpatient(form.grdResults().getSelectedRow().getValue().getPatient()))
			{
				form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setVisible(true);
				form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setEnabled(true);
			}
			*/

			// This is not to bring the Inpatient episode when doing the query
			// There might be an optimum way of doing this if we bring all the data we need at search
			if (form.grdResults().getValue() != null)
			{
    			CatsReferralListVo catsReferral = domain.getCatsReferral(form.grdResults().getValue());
    			
    			if (catsReferral != null && catsReferral.getCareContextIsNotNull())
    			{
        			if (form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
        				&& (form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.SEEN)
        					|| form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.ADMITTED))
        				&& domain.isInpatientCareContext(form.grdResults().getValue().getPatient(), catsReferral.getCareContext())
        				/*! domain.isNotACurrentInpatient(form.grdResults().getSelectedRow().getValue().getPatient())*/)
        			{
        				form.getContextMenus().Clinical.getOPClinicViewListDISCHARGEItem().setVisible(true);
        				form.getContextMenus().Clinical.getOPClinicViewListDISCHARGEItem().setEnabled(true);
        			}			

        			if (catsReferral.getCurrentStatusIsNotNull()
        				&& catsReferral.getCurrentStatus().getReferralStatusIsNotNull()
        				&& ! catsReferral.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_ACCEPTED))
        				{
        					form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setVisible(false);
        					form.getContextMenus().Clinical.getOPClinicViewListADMITItem().setEnabled(false);
        				}
 
        			//http://jira/browse/WDEV-20415 Set Global Contexts once an Appointment is selected
        			CareContextShortVo careContextShortVo = domain.getCareContext(catsReferral.getCareContext());
        			if(careContextShortVo != null)
        			{
        				form.getGlobalContext().Core.setCurrentCareContext(careContextShortVo);
        			} //WDEV-20415
    			
    			}
    			
    			
    			
    			
			}
		}
		
		if (form.grdResults().getSelectedRow() != null
			&& form.grdResults().getSelectedRow().getValue() != null)
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdResults().getSelectedRow().getValue().getPatient()));

		// Added as requested by JNS - WDEV-15944
		form.getGlobalContext().ICP.setPatientICPRecord(form.grdResults().getSelectedRow().getValue().getICPInfo());
		form.getGlobalContext().RefMan.setCatsReferral(form.grdResults().getSelectedRow().getValue().getReferral());
		
		form.getLocalContext().setSelectedRow(form.grdResults().getSelectedRow() != null ? form.grdResults().getSelectedRow().getValue() : null); //WDEV-22297 
		//WDEV-11665
		updateControlsState();
	}
	
	//WDEV-11665 starts here
	private void updateControlsState() 
	{
		boolean showArrivedMenuItem = form.grdResults().getSelectedRow()!=null 
									  && form.grdResults().getSelectedRow().getValue() instanceof OutpatientEpisodeWithICPInfoVo
									  && form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
									  && form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.BOOKED)
									  && form.grdResults().getSelectedRow().getValue().getAppointmentDateIsNotNull()
									  && form.grdResults().getSelectedRow().getValue().getAppointmentDate().isLessOrEqualThan(new Date());
		
		boolean showSeenMenuItem = form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo
							   && form.grdResults().getValue().getApptStatusIsNotNull()
							   && form.grdResults().getValue().getApptStatus().equals(Status_Reason.ARRIVAL) 
							   && form.grdResults().getValue().getAppointmentDateIsNotNull()
							   && form.grdResults().getValue().getAppointmentDate().isLessOrEqualThan(new Date());
		

		boolean showUndoDNAMenuItem = form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo
										&& Status_Reason.DNA.equals(form.grdResults().getValue().getApptStatus())
										&& form.grdResults().getValue().getOutcome() == null;
		
		boolean showUndoArrivalMenuItem = form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo
		   								&& Status_Reason.ARRIVAL.equals(form.grdResults().getValue().getApptStatus())
		   								&& form.grdResults().getValue().getOutcome() == null;
		
		boolean showUndoNotSeenMenuItem = form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo
										&& Status_Reason.NOT_SEEN.equals(form.grdResults().getValue().getApptStatus())
										&& form.grdResults().getValue().getOutcome() == null;
		
		boolean showUndoSeenMenuItem = form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo
										&& Status_Reason.SEEN.equals(form.grdResults().getValue().getApptStatus())
										&& form.grdResults().getValue().getOutcome() == null;
		
		Boolean showOption = getCurrentTrackingStatus() != null || form.grdResults().getValue().getApptStatus().equals(Status_Reason.ARRIVAL);//WDEV-21147
		
		form.getContextMenus().Clinical.getOPClinicViewListARRIVEItem().setVisible(showArrivedMenuItem);
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_ICPItem().setVisible(showSeenMenuItem && showOption && !AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_EDIT_NO_ICPItem().setVisible(showSeenMenuItem && showOption && !AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListWAIT_FOR_NEXTItem().setVisible(showOption && !AppointmentTrackingStatus.PATIENT_WAITING_FOR_NEXT.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_BY_ANAESTHETISTItem().setVisible(showOption && !AppointmentTrackingStatus.PATIENT_SEEN_BY_ANAESTHETIST.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListWITH_PHYSIOTHERAPYItem().setVisible(showOption && !AppointmentTrackingStatus.PATIENT_WITH_PHYSIOTHERAPY.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListSEEN_BY_PREOP_NURSEItem().setVisible(showOption && !AppointmentTrackingStatus.PATIENT_SEEN_BY_PREOP_NURSE.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem().setVisible(showOption && !AppointmentTrackingStatus.PATIENT_WITH_DIAGNOSTIC_SERVICES.equals(getCurrentTrackingStatus()) && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		form.getContextMenus().Clinical.getOPClinicViewListVISIT_COMPLETEItem().setVisible(showOption && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));
		
		
		form.getContextMenus().Clinical.getOPClinicViewListUNDO_DNAItem().setVisible(showUndoDNAMenuItem);
		form.getContextMenus().Clinical.getOPClinicViewListUNDO_ARRIVALItem().setVisible(showUndoArrivalMenuItem);
		form.getContextMenus().Clinical.getOPClinicViewListUNDO_NOT_SEENItem().setVisible(showUndoNotSeenMenuItem);
		form.getContextMenus().Clinical.getOPClinicViewListUNDO_SEENItem().setVisible(showUndoSeenMenuItem);
		
		
		form.getContextMenus().Clinical.getOPClinicViewListVIEW_EDIT_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue())
				&& form.grdResults().getValue() != null															// WDEV-18584 
				&& form.grdResults().getValue().getApptStatusIsNotNull()										// WDEV-18584 
				&& (Status_Reason.DNA.equals(form.grdResults().getValue().getApptStatus())
						|| Status_Reason.ARRIVAL.equals(form.grdResults().getValue().getApptStatus()) 
						|| Status_Reason.SEEN.equals(form.grdResults().getValue().getApptStatus())
						|| Status_Reason.NOT_SEEN.equals(form.grdResults().getValue().getApptStatus()))			// WDEV-18584
				&& form.grdResults().getValue().getOutcome() != null && form.grdResults().getValue().getElectiveList()==null);	//WDEV-20589	 									// WDEV-18584 

		form.getContextMenus().Clinical.getOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue())
				&& form.grdResults().getValue() != null															
				&& form.grdResults().getValue().getApptStatusIsNotNull()										 
				&& (Status_Reason.DNA.equals(form.grdResults().getValue().getApptStatus())
						|| Status_Reason.ARRIVAL.equals(form.grdResults().getValue().getApptStatus()) 
						|| Status_Reason.SEEN.equals(form.grdResults().getValue().getApptStatus())
						|| Status_Reason.NOT_SEEN.equals(form.grdResults().getValue().getApptStatus()))			
				&& form.grdResults().getValue().getOutcome() != null && form.grdResults().getValue().getElectiveList()==null);
		
		form.getContextMenus().Clinical.getOPClinicViewListOUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue())
				&& form.grdResults().getValue() != null
				&& (Status_Reason.BOOKED.equals(form.grdResults().getValue().getApptStatus()) || Status_Reason.ARRIVAL.equals(form.grdResults().getValue().getApptStatus()) || Status_Reason.SEEN.equals(form.grdResults().getValue().getApptStatus()))
				&& form.grdResults().getValue().getOutcome() == null && form.grdResults().getValue().getElectiveList()==null
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDateIsNotNull()
				&& form.grdResults().getSelectedRow().getValue().getAppointmentDate().isLessOrEqualThan(new Date())); //WDEV-20589 //WDEV-21616

		//WDEV-20589
		form.getContextMenus().Clinical.getOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue())
				&& form.grdResults().getValue() != null															 
				&& form.grdResults().getValue().getApptStatusIsNotNull()										 
				&& (Status_Reason.DNA.equals(form.grdResults().getValue().getApptStatus())
						//|| Status_Reason.ARRIVAL.equals(form.grdResults().getValue().getApptStatus()) 
						|| Status_Reason.SEEN.equals(form.grdResults().getValue().getApptStatus())
						|| Status_Reason.NOT_SEEN.equals(form.grdResults().getValue().getApptStatus()))			
				&& form.grdResults().getValue().getElectiveListIsNotNull());											

//		// WDEV-15944 - Outcome enabled if status is arrived or seen and APPOINTMENT_OUTCOME_ENABLED = true
//		if (Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue()) && form.grdResults().getSelectedRow().getValue().getApptStatusIsNotNull()
//				&& (form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.ARRIVAL) ||
//					form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.SEEN)) && form.grdResults().getSelectedRow().getValue().getOutcome() == null)
//			{
//				form.getContextMenus().Clinical.getOPClinicViewListOUTCOMEItem().setVisible(true);
//				form.getContextMenus().Clinical.getOPClinicViewListOUTCOMEItem().setEnabled(true);
//			}

		form.getContextMenus().Clinical.getOPClinicViewListCANCEL_REBOOKItem().setVisible(form.grdResults().getValue() != null && form.grdResults().getSelectedRow().getValue() instanceof OutpatientEpisodeWithICPInfoVo && form.grdResults().getValue().getApptStatusIsNotNull() && form.grdResults().getSelectedRow().getValue().getApptStatus().equals(Status_Reason.BOOKED)); //wdev-19504
		
		form.getContextMenus().Clinical.getOPClinicViewListVIEW_REFERRAL_DETAILItem().setVisible(form.grdResults().getValue() != null);
	}

	
	private AppointmentTrackingStatus getCurrentTrackingStatus() 
	{
		//WDEV-17987
		if(form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo && form.grdResults().getValue().getCurrentApptTrakingStatusIsNotNull() && !AppointmentTrackingStatus.UNDO_ARRIVAL.equals( form.grdResults().getValue().getCurrentApptTrakingStatus().getTrackingStatus()))
			return form.grdResults().getValue().getCurrentApptTrakingStatus().getTrackingStatus();
		
		return null;
	}
	//WDEV-11665 - ends here

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		//WDEV-13354
		disableRefreshTemporarily();
		form.getLocalContext().setbSeenByPreOp(false);
		
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.EditViewICPActions:
				engine.clearPatientContextInformation();//wdev-8668
				form.getGlobalContext().ICP.setPatientICPRecord(form.grdResults().getSelectedRow().getValue().getICPInfo());
				engine.open(form.getForms().ICP.PatientICP);
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.ARRIVE:
				arriveBookingMenuOption();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_EDIT_ICP:
				toggleTimer(false);
				markasSeenMenuOption(true, false);
				return;

			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_EDIT_NO_ICP:
				markasSeenMenuOption(false, false);
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.ADMIT:
				admitPatient();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.DISCHARGE:
				dischargePatient();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.DNA:
				dnaPatientMenuItem();
			break;
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.OUTCOME:
				form.getGlobalContext().RefMan.setCatsReferral(form.grdResults().getSelectedRow().getValue().getReferral());	//wdev-19930,wdev-19933
				recordApptOutcome();
			break;
			
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.UNDO_DNA:
				form.getLocalContext().setUndoDNAMessageBoxId(engine.showMessage("Are you sure you want to Undo the DNA status?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;
			
			//WDEV-17987
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.UNDO_ARRIVAL:
				form.getLocalContext().setUndoArrivalMessageBoxId(engine.showMessage("Are you sure you want to Undo this Arrival?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.UNDO_NOT_SEEN:
				form.getLocalContext().setUndoNotSeenMessageBoxId(engine.showMessage("Are you sure you want to Undo the Not Seen status?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.UNDO_SEEN:
				form.getLocalContext().setUndoSeenMessageBoxId(engine.showMessage("Are you sure you want to Undo the Seen status?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;
			
			
			//WDEV-11665 - starts here
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.WAIT_FOR_NEXT:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_WAITING_FOR_NEXT);
				search();
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_BY_ANAESTHETIST:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_SEEN_BY_ANAESTHETIST);
				search();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.WITH_PHYSIOTHERAPY:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_WITH_PHYSIOTHERAPY);
				search();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.SEEN_BY_PREOP_NURSE:
				/*updateTrackingStatus(AppointmentTrackingStatus.PATIENT_SEEN_BY_PREOP_NURSE);
				search();*/
				form.getLocalContext().setbSeenByPreOp(true);
				markasSeenMenuOption(false, true); //WDEV-20817
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.WITH_DIAGNOSTIC_SERVICES:
				updateTrackingStatus(AppointmentTrackingStatus.PATIENT_WITH_DIAGNOSTIC_SERVICES);
				search();
			break;
				
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.VISIT_COMPLETE:
				visitComplete();	//WDEV-11788
			break;
			//WDEV-11665 - ends here
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.VIEW_EDIT_OUTCOME:
				form.getGlobalContext().RefMan.setCatsReferral(form.grdResults().getSelectedRow().getValue().getReferral());	//wdev-19930,wdev-19933
				viewOutcome(false);
			break;
			
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.VIEW_READ_ONLY_OUTCOME:
				form.getGlobalContext().RefMan.setCatsReferral(form.grdResults().getSelectedRow().getValue().getReferral());	//wdev-19930,wdev-19933
				viewOutcome(true);
			break;
			
			//wdev-19504
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.CANCEL_REBOOK:
				Booking_AppointmentVo voAppt = domain.getBookingAppt((Booking_AppointmentRefVo)form.grdResults().getValue());
				cancelAppointment(voAppt, form.grdResults().getValue());
			break;
			//----------
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.VIEW_EDIT_PRE_ASSESSMENT_OUTCOME://WDEV-20589
				engine.open(form.getForms().RefMan.PreAssessmentOutcomeDlg , new Object[] {form.grdResults().getValue().getElectiveList()});
			break;
			
			case GenForm.ContextMenus.ClinicalNamespace.OPClinicViewList.VIEW_REFERRAL_DETAIL:
				engine.open(form.getForms().RefMan.ReferralDetailsDialog);
			break;
			default:
		}

		toggleTimer(false);
	}
	//wdev-19504
	private void cancelAppointment(Booking_AppointmentVo voAppt, OutpatientEpisodeWithICPInfoVo  voReferralAppointmentDetailsBookingAppointment) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null 
			&& voAppt.getApptStatusIsNotNull()
			&& voAppt.getApptStatus().equals(Status_Reason.BOOKED) 
			&& !isTheatreAppt)
		{
			form.getLocalContext().setApptToCancel(voReferralAppointmentDetailsBookingAppointment);
			SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt, null);
			if(voServiceAndActivity != null)
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
				form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
				form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
				form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
			else //WDEV-19379
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
		}
		else if (voAppt != null
				&& voAppt.getApptStatusIsNotNull()
				&& voReferralAppointmentDetailsBookingAppointment != null
				&& voReferralAppointmentDetailsBookingAppointment.getApptStatusIsNotNull()
				&& ! voAppt.getApptStatus().equals(voReferralAppointmentDetailsBookingAppointment.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			search();
			
			
		}
	}

	//----------
	

	private void dnaPatientMenuItem() 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook != null && voBook.getApptStatusIsNotNull() && canBeDNAed(voBook.getApptStatus(), voBook.getSession().getSessionDate()))
		{
//			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
//				&& domain.hasTCI(form.grdResults().getValue()))
//			{
//				form.getLocalContext().setbDNACalled(true);
//				engine.showMessage("You are about to mark this record as DNA. Is a new TCI required?", "Warning", MessageButtons.YESNOCANCEL);
//			}
//			else
//			{
//				form.getLocalContext().setbDNACalled(true);
//				engine.showMessage("Are you sure you want to mark this record as DNA?", "Warning", MessageButtons.YESNO);
//			}
			
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voBook);
			engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.EDIT, AppointmentOutcomeAction.DNA}, false);
		}
		else
		{
			engine.showMessage("This appointment's status has already changed.");
			search();
		}
	}

	// WDEV-15944 record Outcome
	private void recordApptOutcome() 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook != null)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voBook);
			engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.EDIT}, false);
		}
	}
	
	private void viewOutcome(boolean readOnly)
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook != null)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voBook);
			
			if (readOnly)
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW, AppointmentOutcomeAction.VIEW_READ_ONLY}, false);
			else
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW}, false);
		}
	}

	
	//WDEV-11788 - starts here
	private void visitComplete() 
	{
		updateTrackingStatus(AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE);
		search();
	}
	//WDEV-11788 - ends here
	
	//WDEV-11665 - starts here
	private void updateTrackingStatus(AppointmentTrackingStatus trackingStatus)
	{
		if(trackingStatus == null)
			throw new CodingRuntimeException("Cannot add a null tracking status.");
		
		Booking_AppointmentVo voBooking = domain.getOpEpisode(form.grdResults().getValue());
		
		if (voBooking == null)
		{
			engine.showMessage("No Booking Found.");
			return;
		}

		//WDEV-11786 - starts here
		if(form.grdResults().getValue().getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
		{
			//simulate SOE
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		//WDEV-11786 - ends here
		
		//WDEV-11788 - starts here
		if (trackingStatus.equals(AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE) && voBooking != null && voBooking.getApptStatusIsNotNull() && voBooking.getApptStatus().equals(Status_Reason.ARRIVAL))
		{
			updateBookingWithSeenStatus(voBooking);
		}
		//WDEV-11788 - ends here
		
		populateAppointmentWithTrackingStatus(voBooking, trackingStatus);
		
		String[] error = voBooking.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		try 
	 	{
			domain.saveBookingAppointment(voBooking);
		} 
	 	catch (StaleObjectException e) 
	 	{
	 		e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		} 
	 	catch (DomainInterfaceException e) 
	 	{
	 		e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		} 
	 	catch (UniqueKeyViolationException e) 
		{
	 		e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		}
	}
	//WDEV-11665 - ends here

	//WDEV-11788 - starts here
	private void updateBookingWithSeenStatus(Booking_AppointmentVo voBooking) 
	{
		voBooking.setApptStatus(Status_Reason.SEEN);
		
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBooking.getAppointmentDate());
		voStatus.setApptTime(voBooking.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(Status_Reason.SEEN);
		
		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voBooking.setCurrentStatusRecord(voStatus); 
		voBooking.setApptStatusHistory(voCollStatusHistory);
		
		voBooking.setSeenTime(new Time());
		
		populateAppointmentWithTrackingStatus(voBooking, AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);
	}
	//WDEV-11788 - ends here

	//WDEV-11665 - starts here
	private void populateAppointmentWithTrackingStatus(Booking_AppointmentVo voBooking, AppointmentTrackingStatus trackingStatus) 
	{
		if(voBooking == null || trackingStatus == null || AppointmentTrackingStatus.PATIENT_ARRIVED.equals(trackingStatus))//WDEV-21147
			return;
		
		Appt_Tracking_Status_HistoryVoCollection trackingCollection = voBooking.getApptTrackingStatusHistory();
		
		if(trackingCollection == null)
			trackingCollection = new Appt_Tracking_Status_HistoryVoCollection();
		
		Appt_Tracking_Status_HistoryVo newTrackingStatus = new Appt_Tracking_Status_HistoryVo();
		newTrackingStatus.setTrackingStatus(trackingStatus);
		newTrackingStatus.setApptDate(voBooking.getAppointmentDate());
		newTrackingStatus.setApptTime(voBooking.getApptStartTime());
		newTrackingStatus.setStatusChangeDateTime(new DateTime());
		
		Object mosUser = domain.getMosUser();
		newTrackingStatus.setChangedBy(mosUser instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mosUser : null);
		
		trackingCollection.add(newTrackingStatus);
		voBooking.setApptTrackingStatusHistory(trackingCollection);
	}
	//WDEV-11665 - ends here

	

	
	private boolean canBeDNAed(Status_Reason apptStatus, Date dateSession) 
	{
		if (apptStatus != null 
			&& apptStatus.equals(Status_Reason.BOOKED))
			{
				if(dateSession != null)
				{
					if(new Date().isGreaterOrEqualThan(dateSession))
					{
						return true;
					}
				}
			}
			return false;
	}


	private void markasSeenMenuOption(boolean allowEditICP, boolean seenByPreOpNurse) 
	{
		//WDEV-22023 - reviewed and lauch of pds dialog not needed here
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook.getApptStatusIsNotNull() 
			&& voBook.getApptStatus().equals(Status_Reason.ARRIVAL))
		{
			if (form.getLocalContext().getbLessThenTodaysDateIsNotNull()
				&& form.getLocalContext().getbLessThenTodaysDate())
			{
				form.getGlobalContext().RefMan.setChosenTime(null);
				form.getLocalContext().setbArrivalChosen(false);
				form.getLocalContext().setAllowEditICP(allowEditICP);
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Seen Time"} );
			}
			else
				markasSeen(allowEditICP, seenByPreOpNurse ? AppointmentTrackingStatus.PATIENT_SEEN_BY_PREOP_NURSE : AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search();
		}

	}

	private void pdsLookup()
	{
		PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
		PatientShort pat = form.getGlobalContext().Core.getPatientShort();
		PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());
		Patient pdsPatient = null;
		Patient initialPatient = null;

		try
		{
			initialPatient = domain.getPatient(pat);
		}
		catch (StaleObjectException e2)
		{
			e2.printStackTrace();

			engine.showMessage("Error getting the patient record: " + e2.toString());
			return;
		}

		if(initialPatient.getSCN() == null)
		{
			if(initialPatient.getNhsn() == null)
			{
				try
				{
					helper.setPatientInContext(initialPatient);
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PDS_SYNC_REQUIRED,  "The current patient doesn not have an NHS number", PDSBackOfficeWorkPriority.P1);
					return;
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}

			}
		}

		if (pat.getNhsn() != null)
		{

			try
			{
				pdsPatient = helper.makeRequest(params, pat.getNhsn() != null ? pat.getNhsn().getIdValue() : "", PdsRetrievalQueryHelper.HistoricDataIndicator.ON);

				if(pdsPatient == null)
				{
					//spine returned an error
					PdsErrorVo pdsError = helper.getLastErrorDetails();
					String err = "";

					if(PdsQuery.NO_MATCH.equals(pdsError.getQueryResponseCode()))
					{
						engine.showMessage("This record is found to be invalid. Please treat all demographic and clinical data on the record with caution.");

						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.GENERAL, "Review Invalid record", PDSBackOfficeWorkPriority.P1);
							return;
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
					else
					{
						err = "Error calling PdsRetrievalQuery, query response code: " + pdsError.getQueryResponseCode();
						engine.showMessage(err);

						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  err, PDSBackOfficeWorkPriority.P1);
							return;
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
				}
			}
			catch (PdsException e)
			{
				e.printStackTrace();

				engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString());

				helper.setPdsErrorFromException(e);
				try
				{
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  e.toString(), PDSBackOfficeWorkPriority.P1);
					return;
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}
			}
		}
		updateLocalPatientWithPds(initialPatient, pdsPatient, params, helper.getMissingMappings());
	}

	private Patient updateLocalPatientWithPds(Patient initialPatient, Patient pdsPatient, PdsRequestParameters params, MissingMappingVoCollection missingMappings)
	{
		ArrayList errors = new ArrayList();
		Patient pat = null; 

		if(missingMappings != null && missingMappings.size() > 0)
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(this.domain);
			helper.displayMissingMappings(missingMappings, engine);
		}
		
		try
		{
			pat = domain.updateLocalPatientWithPds(initialPatient, pdsPatient, errors, form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole(), missingMappings);
		}
		catch (DomainInterfaceException e1)
		{
			e1.printStackTrace();
		}
		catch (StaleObjectException e1)
		{
			e1.printStackTrace();
		}
		catch (ForeignKeyViolationException e1)
		{
			e1.printStackTrace();
		}

		if(errors.size() > 0)
		{
			String[] template = new String[] {""};
			String[] patErrors = (String[]) errors.toArray(template);
			if (patErrors != null)
			{
				engine.showErrors(patErrors);
				return null;
			}
		}

		return pat;
	}

	private void arriveBookingMenuOption() 
	{
		
		//WDEV-20534
		PDSConfigurationVo config = domain.getPDSConfiguration();
		if (config!=null && config.getTP_AnyApptArrivalIsNotNull() && config.getTP_AnyApptArrival())
		{
			if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			{
				// PDS AUTHENTICATION
				PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
				if(pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
				{
					form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
					if (Boolean.FALSE.equals(ConfigFlag.GEN.BOOKING_APPOINTMENT_PERFORM_AUTO_PDS_LOOKUP.getValue()))
					{
						engine.open(form.getForms().Core.PDSDemographicsDialog);
						return;
					}
					else
					{
						pdsLookup();
					}
				}
				// END PDS AUTHENTICATION
	
				arriveBookingMenuOptionHandler();
			}
			else
			{
				engine.open(form.getForms().Core.PDSDemographicsDialog);
				return;
			}
		}
		else
			//no demographics display
			arriveBookingMenuOptionHandler();		
		//WDEV-22023		
	}

	//WDEV-22023
	private void arriveBookingMenuOptionHandler() 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook.getApptStatusIsNotNull() && voBook.getApptStatus().equals(Status_Reason.BOOKED))
		{
			form.getGlobalContext().RefMan.setChosenTime(null); //WDEV-18188
			form.getGlobalContext().Scheduling.setLateArrivalRecord(null);//WDEV-21088
			Date appointmentDate =  voBook.getAppointmentDate()!= null ? voBook.getAppointmentDate(): new Date();
			Time apptStartTime = voBook.getApptStartTime()!= null ? voBook.getApptStartTime(): new Time();
			DateTime apptDataTime = new DateTime(appointmentDate, apptStartTime);
			DateTime nowDateTime = new DateTime();
			
			if(nowDateTime.isGreaterThan(apptDataTime))
			{
				form.getLocalContext().setbArrivalChosen(true);
				engine.open(form.getForms().Scheduling.AppointmentArrivalDialog, new Object[]{apptDataTime});
			}
			else
				arriveBooking();
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search();
		}

	}
	//WDEV-22023
	
	private void dnaPatient(boolean requiresTCI)
	{
		updateBooking(Status_Reason.DNA, null, requiresTCI);
		search();
	}

	private void dischargePatient()
	{
		
		OutpatientEpisodeWithICPInfoVo appointment = form.grdResults().getSelectedRow().getValue();
		if (appointment.getICPInfoIsNotNull())
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(appointment.getICPInfo().getCareContext()));
		form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralRef(appointment.getID_Booking_Appointment()));
		engine.open(form.getForms().RefMan.DischargeSummaryWardPacuDialogAlias);
	}

	private void admitPatient() 
	{
		form.getGlobalContext().RefMan.setDayCaseAdmApptTime(form.grdResults().getSelectedRow().getcolApptTime());
		form.getGlobalContext().RefMan.setDayCaseAdmApptDate(form.grdResults().getSelectedRow().getValue().getAppointmentDate());
		form.getGlobalContext().RefMan.setDayCaseAdmClinicName(form.grdResults().getSelectedRow().getValue().getSession().getName());

		form.getGlobalContext().Scheduling.setBookingAppointmentRef(form.grdResults().getSelectedRow().getValue());
		
		if (form.grdResults().getSelectedRow().getValue().getSession().getSchLocation().getTypeIsNotNull()
			&& form.grdResults().getSelectedRow().getValue().getSession().getSchLocation().getType().equals(LocationType.HOSP))
			form.getGlobalContext().Core.setHospitalLoc(form.grdResults().getSelectedRow().getValue().getSessionIsNotNull() ? form.grdResults().getSelectedRow().getValue().getSession().getSchLocation() : null);
		else 
			form.getGlobalContext().Core.setHospitalLoc(new LocMostVo(form.cmbHospital().getValue().getID_Location(), 0));

		engine.open(form.getForms().RefMan.DayCaseAdmissionDialog);
	}

	private void markasSeen(boolean allowEditICP, AppointmentTrackingStatus trackingStatus) 
	{
		//WDEV-11665
		updateBooking(Status_Reason.SEEN, trackingStatus, false);
		
		//WDEV-11665
		if (allowEditICP && form.grdResults().getSelectedRow().getValue().getICPInfoIsNotNull())
		{
			engine.clearPatientContextInformation();//wdev-8668
			form.getGlobalContext().ICP.setPatientICPRecord(form.grdResults().getSelectedRow().getValue().getICPInfo());
			engine.open(form.getForms().ICP.PatientICP);
		}
		else
		{
			//WDEV-13354
			search();
//			toggleTimer(false);
		}
	}

	private void arriveBooking()
	{
		//WDEV-11665
		updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
		search();
//		//WDEV-13354
//		toggleTimer(false);
	}

	private void updateBooking(Status_Reason stat, AppointmentTrackingStatus trackingStatus, boolean requiresNewTCI) 
	{
		Booking_AppointmentVo voBooking = domain.getOpEpisode(form.grdResults().getValue());
		if (voBooking == null)
		{
			engine.showMessage("No Booking Found.");
			return;
		}
		
		//WDEV-11786 - starts here
		if(form.grdResults().getValue().getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
		{
			//simulate SOE
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		//WDEV-11786 - ends here

		CatsReferralListVo voCats = domain.getCatsReferral(form.grdResults().getValue());
		if (voCats == null)
		{
			engine.showMessage("No Referral Found.");
			return;
		}
	
		PatientElectiveListForDNAAppointmentsVo patientElectiveList = null;

		Boolean isUndoDNA = Status_Reason.DNA.equals(voBooking.getApptStatus()) && Status_Reason.BOOKED.equals(stat);
		Boolean isUndoArrival = Status_Reason.ARRIVAL.equals(voBooking.getApptStatus()) && Status_Reason.BOOKED.equals(stat);
		
		

		//WDEV-18325
		form.getGlobalContext().Core.getPatientShort().calculateAge();
		boolean isPaediatricPatient = form.getGlobalContext().Core.getPatientShort().getAgeIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAge()<= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue();
		boolean isFirstApptActivityforDNA = !isPaediatricPatient && Boolean.TRUE.equals(form.getLocalContext().getbDNACalled()) && canBeDNAed(voBooking.getApptStatus(), voBooking.getSession().getSessionDate())&& Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && voBooking.getActivityIsNotNull() && voBooking.getActivity().getFirstAppointment() ;
		SessionSlotVo sessionSlot = null;
		
		if (stat.equals(Status_Reason.DNA))
		{
			if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			{
    			// TODO - Also set TCI to outcome 
    			patientElectiveList = domain.getPatientElectiveList(form.grdResults().getValue());
    			
    			if (patientElectiveList != null)
    			{
    				TCIForPatientElectiveListAppointmentDNAVo currentTCI = patientElectiveList.getTCIDetails();
    				
    				// Update the TCI record - should really not be null, since the query is performed after it
    				if (currentTCI != null)
    				{
        				TCIOutcomeForAppointmentDNAVo outcomeDNA = new TCIOutcomeForAppointmentDNAVo();
        				
        				outcomeDNA.setOutcome(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4);
        				outcomeDNA.setStatusDateTime(new DateTime());
        				outcomeDNA.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
        				
        				currentTCI.setCurrentOutcome(outcomeDNA);
        				currentTCI.getOutcomeHistory().add(outcomeDNA);
        				currentTCI.setIsActive(Boolean.FALSE);
        				
        				// Add current TCI to history, but do NOT remove it from current field yet.
        				// It will be removed in impl file, after it will be saved.
        				
        				patientElectiveList.getTCIHistory().add(currentTCI);
    				}
    				
    				// Update the status for PatientElective
    				if (requiresNewTCI == true)
    				{
    					ElectiveListStatusVo requiresNewTCIStatus = new ElectiveListStatusVo();
    					
    					requiresNewTCIStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
    					requiresNewTCIStatus.setStatusDateTime(new DateTime());
    					requiresNewTCIStatus.setStatusComment(null);
    					requiresNewTCIStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
    					requiresNewTCIStatus.setRemovalReason(null);
    					requiresNewTCIStatus.setRemovalOtherReason(null);    					
    					
						patientElectiveList.setElectiveListStatus(requiresNewTCIStatus);
						patientElectiveList.getElectiveListStatusHistory().add(requiresNewTCIStatus);
    				}
    			}
			}
			
			//WDEV-20643
	    	if (Boolean.TRUE.equals(voBooking.getFirstConsultationActivity()))
			{
				voCats.setConsultationActivityRequired(true);
			}
			
			//WDEV-9091 - starts here
			if(voBooking.getIsCABBooking() == null || Boolean.FALSE.equals(voBooking.getIsCABBooking()))
			{
				voBooking.setRequiresRebook(true);
				
				if(voBooking.getSessionSlotIsNotNull())
				{
					
					sessionSlot = (SessionSlotVo) voBooking.getSessionSlot();		//wdev-12090
					
					sessionSlot.setStatus(Status_Reason.DNA);
					
					sessionSlot.validate();
					
					
				}
			}
			//WDEV-9091 - ends here
		}

		voBooking.setApptStatus(stat);
		
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		
		//WDEV-21088
		LateTimeArrivalRecordVo lateArrivalRecord = form.getGlobalContext().Scheduling.getLateArrivalRecord();
		if(lateArrivalRecord != null)
			{
			voStatus.setCareProfessionalNotReadyToSee(lateArrivalRecord.getCareProfessionalNotReadyToSee());
			voStatus.setCareProfessionalReadyToSee(lateArrivalRecord.getCareProfessionalReadyToSee());
			voStatus.setCouldnotbeseen(lateArrivalRecord.getCouldNotBeSeen());
			}
		voStatus.setApptDate(voBooking.getAppointmentDate());
		voStatus.setApptTime(voBooking.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(stat);
		
		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voBooking.setCurrentStatusRecord(voStatus); 
		voBooking.setApptStatusHistory(voCollStatusHistory);

		if (stat.equals(Status_Reason.ARRIVAL))
		{
			if (lateArrivalRecord != null)
			{
				voBooking.setArrivalTime(lateArrivalRecord.getArrivalTime());
				form.getGlobalContext().Scheduling.setLateArrivalRecord(null);
			}
			else
				voBooking.setArrivalTime(form.getGlobalContext().RefMan.getChosenTimeIsNotNull()? form.getGlobalContext().RefMan.getChosenTime(): new Time());
			
			voBooking.setSeenBy(null);
			voBooking.setSeenTime(null);
		}
		else if (stat.equals(Status_Reason.SEEN))
		{
			//WDEV-18480
			voBooking.setSeenBy((HcpRefVo) domain.getHcpLiteUser());
			if (form.getGlobalContext().RefMan.getChosenTime() == null)
			{
				voBooking.setSeenTime(new Time());
			}
			else
			{
				voBooking.setSeenTime(form.getGlobalContext().RefMan.getChosenTime());
			}
		}
		else if (stat.equals(Status_Reason.BOOKED))
		{
			voBooking.setArrivalTime(null);
			voBooking.setOutcome(null);
			voBooking.setOutcomeComments(null);
			voBooking.setRequiresRebook(false);
		}
		
		//WDEV-11665
		if (trackingStatus != null)
		{
			populateAppointmentWithTrackingStatus(voBooking, trackingStatus);
		}
		
		String[] error = voBooking.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		error = voCats.validate(error);
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		try 
	 	{
			domain.saveOPEpisode(voBooking, voCats, sessionSlot, patientElectiveList, isFirstApptActivityforDNA, isUndoDNA, isUndoArrival);
		} 
	 	catch (StaleObjectException e) 
	 	{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		} 
	 	catch (DomainInterfaceException e) 
	 	{
			engine.showMessage(e.getMessage());
			return;
		}
	}

	private void loadClinics(boolean bKeepClosed) 
	{
		if (form.cmbHospital().getValue() == null)
			return;
		
		form.cmbClinic().clear();
		SessionShortVoCollection listClinics = domain.listClinics(form.cmbHospital().getValue().getID_Location(), form.dteDate().getValue(),form.cmbListType().getValue());	//wdev-19419
		if (listClinics!=null)
		{
			for (SessionShortVo item: listClinics)
			{
				StringBuffer sb = new StringBuffer();
				sb.append(item.getName());
				sb.append(" - ");
				sb.append(item.getSessionDate());
				
				form.cmbClinic().newRow(item, sb.toString());
				
				if(engine.getCurrentLocation() != null
					&& item.getSchLocationIsNotNull())
				{
					if (engine.getCurrentLocation().getID() == item.getSchLocation().getID())
						form.cmbClinic().setValue(item);
				}
			}
			if (listClinics.size() == 1)
				form.cmbClinic().setValue(listClinics.get(0));
			
			//WDEV-17933
			form.cmbClinic().setTooltip(form.cmbClinic().getValue()!=null ? form.cmbClinic().getValue().getDescription():null);
		}
	}

	@Override
	protected void onGrdResultsGridButtonClicked(int column, grdResultsRow row) throws PresentationLogicException 
	{
		if( COL_CONTACT_DETAILS == column )
		{
			if( form.grdResults().getValue() != null && form.grdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo)
			{
				form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();//WDEV-20699
				engine.open(form.getForms().Clinical.PatientContactDlg, new Object[] {form.grdResults().getValue().getPatient()});
			}
		}
	}

	@Override
	protected void onDteDateValueChanged() throws PresentationLogicException
	{
		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(false);
		else if (form.dteDate().getValue() == null){
			form.cmbClinic().clear();
			//WDEV-11624 clear grid to avoid refresh problem
			form.grdResults().getRows().clear();
			form.getLocalContext().setSelectedRow(null);
			form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		}
			
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException 
	{
		searchForClinics();
		
		//WDEV-11624 clear grid to avoid refresh problem
		if (form.cmbHospital().getValue() == null)
		{
			form.grdResults().getRows().clear();
			form.getLocalContext().setSelectedRow(null);
			form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		}
		else	//wdev-19503
			populateOutpatientLocationCombo();
	}

	private void searchForClinics() 
	{
		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(false);
		else if (form.cmbHospital().getValue() == null)
			form.cmbClinic().clear();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (result.equals(DialogResult.OK) 
				&& (formName.equals(form.getForms().RefMan.ArrivalSeenTimeDialog) || formName.equals(form.getForms().Scheduling.AppointmentArrivalDialog)))
		{
			//form.grdResults().setValue(form.getLocalContext().getSelectedRow()); //WDEV-22297
			
			if(form.getLocalContext().getbArrivalChosenIsNotNull())
			{
				if(form.getLocalContext().getbArrivalChosen())
					arriveBooking();
				else
					markasSeen(form.getLocalContext().getAllowEditICPIsNotNull() ? form.getLocalContext().getAllowEditICP().booleanValue() : false, Boolean.TRUE.equals(form.getLocalContext().getbSeenByPreOp()) ?  AppointmentTrackingStatus.PATIENT_SEEN_BY_PREOP_NURSE: AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);

				return;
			}
		}
		else if (formName.equals(form.getForms().Core.PDSDemographicsDialog))
		{
			//WDEV-22023
			arriveBookingMenuOptionHandler();
		}
		//WDEV-19320
		if (formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog) && DialogResult.OK.equals(result))
		{
			if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() == 1)
				form.ccListOwner().setValue(form.getGlobalContext().Scheduling.getSelectedHCPs().get(0));
			else
			{
				form.ccListOwner().clear();
				populateListOwnersLabel(form.getGlobalContext().Scheduling.getSelectedHCPs());
			}
			
		}
		//wdev-19504
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if( cancelAndRebook() == false)
					search();
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingAppointment(null);
			}
			form.getLocalContext().setApptToCancel(null);
			return;
			
		}
		if(formName.equals(form.getForms().RefMan.BookAppointmentDialog))
		{
			search();
			return;
		}
		
		if(formName.equals(form.getForms().RefMan.ReferralDetailsDialog))
		{
			return;
		}
		//--------------
		if (result.equals(DialogResult.OK) && !formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog))
		{
			//WDEV-13354
			search();
//			toggleTimer(false);
		}
		else if (form.getForms().RefMan.DischargeSummaryWardPacuDialogAlias.equals(formName))
		{
			//WDEV-13354
			search();
//			toggleTimer(false);
		}
		//WDEV-20699
		if(form.getForms().Clinical.PatientContactDlg.equals(formName))
				updateControlsState();
		
			
	}

	private void markAsSeenHandler(boolean allowEditICP, boolean seenByPreOpNurse)
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdResults().getValue());
		if (voBook.getApptStatusIsNotNull() 
			&& voBook.getApptStatus().equals(Status_Reason.ARRIVAL))
		{
			if (form.getLocalContext().getbLessThenTodaysDateIsNotNull()
				&& form.getLocalContext().getbLessThenTodaysDate())
			{
				form.getGlobalContext().RefMan.setChosenTime(null);
				form.getLocalContext().setbArrivalChosen(false);
				form.getLocalContext().setAllowEditICP(allowEditICP);
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Seen Time"} );
			}
			else
				markasSeen(allowEditICP, seenByPreOpNurse ? AppointmentTrackingStatus.PATIENT_SEEN_BY_PREOP_NURSE : AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search();
		}
	}
	
	//wdev-19504
	private boolean cancelAndRebook()
	{
		Booking_AppointmentVo voAppt = cancelAppt(false);
		if( voAppt == null)
		{
			return false;
		}
			
		// rebook
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
		{	
			if( !voAppt.getTheatreBookingIsNotNull())
			{
				 rebookAppt(voAppt, null);
				 return true;
			}
			
			return false;
		}
		return false;
		
	}
	private void rebookAppt(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voFromGrid)
	{		
		if (isReferralEndOfCare())
			return;

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null
			&& voAppt.getApptStatusIsNotNull()
			&& voFromGrid != null
			&& voFromGrid.getApptStatusIsNotNull()
			&& ! voAppt.getApptStatus().equals(voFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");

			//form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			//form.fireCustomControlValueChanged();	
		}
		else if ( voAppt != null 
			&& voAppt.getRequiresRebookIsNotNull() 
			&& voAppt.getRequiresRebook() 
			&& !isTheatreAppt
			&& voAppt.getApptStatusIsNotNull()
			&& (voAppt.getApptStatus().equals(Status_Reason.CANCELLED) || voAppt.getApptStatus().equals(Status_Reason.DNA)))
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
			form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
			form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);
			
			bookAppt();
		}
	}
	private void bookAppt()
	{
		if (isReferralEndOfCare())
			return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
	}
	private boolean isReferralEndOfCare()
	{
		CatsReferralVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRef.getCurrentStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.END_OF_CARE))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			//form.getLocalContext().setbReferralAccepted(Boolean.FALSE);
			//form.lyrSelect().tabAppInvs().btnBookAppt().setVisible(Boolean.FALSE);
			//form.lyrSelect().tabAppInvs().btnOrderInv().setVisible(Boolean.FALSE);
			
			//form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFERRALSTATUSCHANGED);
			//form.fireCustomControlValueChanged();	
			
			//updateControlState();
			return true;
		}
		else
			return false;
	}
	
	
	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				OutpatientEpisodeWithICPInfoVo voAppt = form.getLocalContext().getApptToCancel();
				if(voAppt == null)
					return null;

				Booking_AppointmentVo voApptFull = domain.getBookingAppt(voAppt);

				if (voApptFull.getApptStatusIsNotNull()
						&& voAppt.getApptStatusIsNotNull()
						&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
				{
					engine.showMessage("The Status of the appointment has already been changed.");
					return null;
				}

				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					// wdev-6034
					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
					if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
					{
						voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
						if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
							voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
					}

					if(Status_Reason.HOSPITALCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numProviderCancellations = 0;

						if(voApptFull.getNumProviderCancellations() != null)
						{
							numProviderCancellations = voApptFull.getNumProviderCancellations();
						}
						numProviderCancellations += 1;

						voApptFull.setNumProviderCancellations(numProviderCancellations);
					}

					if(Status_Reason.PATIENTCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numPatientCancellations = 0;

						if(voApptFull.getNumPatientCancellations() != null)
						{
							numPatientCancellations = voApptFull.getNumPatientCancellations();
						}
						numPatientCancellations += 1;

						voApptFull.setNumPatientCancellations(numPatientCancellations);
					}
				}

				if (voApptFull.getSessionSlotIsNotNull() && voApptFull.getSessionIsNotNull()) //WDEV-19379
					voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus()); //WDEV-18940 

				voApptFull.setLinkedApptsToBeCancelled(form.getGlobalContext().RefMan.getLinkedAppointmentsCollection());//WDEV-19543

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return null;
				}

				if (tciCancelation)
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
				else
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Referral Appointment Details");

				domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull);

				if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI())) //WDEV-18249
				{
					domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason(), form.getGlobalContext().Scheduling.getApptCancelStatus().getComment(),Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
				}

				return voApptFull;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");		
		return null;
	}
	
	
	/**
	 * @param status
	 * @param appointment
	 * @return
	 */
	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		//WDEV-11887
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	//------------

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getbDNACalled()))
		{
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
					&& domain.hasTCI(form.grdResults().getValue()))
			{
				form.getLocalContext().setUndoArrivalMessageBoxId(null);

				if (DialogResult.YES.equals(result))
					dnaPatient(true);
				else if (DialogResult.NO.equals(result))
					dnaPatient(false);
			}
			else if (DialogResult.YES.equals(result))
			{
				form.getLocalContext().setUndoArrivalMessageBoxId(null);
				dnaPatient(false);
			}
		}
		else if (form.getLocalContext().getUndoArrivalMessageBoxIdIsNotNull() && form.getLocalContext().getUndoArrivalMessageBoxId().equals(messageBoxId)
				&& DialogResult.YES.equals(result))
		{
			form.getLocalContext().setbDNACalled(false);
			updateBooking(Status_Reason.BOOKED, null, false);
			search();
		}
		else if (form.getLocalContext().getUndoDNAMessageBoxId() != null && form.getLocalContext().getUndoDNAMessageBoxId().equals(messageBoxId))
		{
			form.getLocalContext().setUndoDNAMessageBoxId(null);
			updateBooking(Status_Reason.BOOKED, null, false);
			search();
		}
		else if (form.getLocalContext().getUndoNotSeenMessageBoxId() != null && form.getLocalContext().getUndoNotSeenMessageBoxId().equals(messageBoxId))
		{
			form.getLocalContext().setUndoNotSeenMessageBoxId(null);
			updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
			search();
		}
		else if (form.getLocalContext().getUndoSeenMessageBoxId() != null && form.getLocalContext().getUndoSeenMessageBoxId().equals(messageBoxId))
		{
			form.getLocalContext().setUndoSeenMessageBoxId(null);
			updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
			search();
		}
	}

	@Override
	protected void onGrdResultsGridHeaderClicked(int column) throws PresentationLogicException 
	{
		OutpatientEpisodeWithICPInfoVo temp = form.grdResults().getValue();
		//WDEV-19207
		int gridRowsSize = form.grdResults().getRows() != null ? form.grdResults().getRows().size() : 0;
		if (gridRowsSize <= 1) //WDEV-20071
			return;
		
		if (column == 0)
		{
			if(form.getLocalContext().getSortOrderICPImage() == null)
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getICPImageComparator(form.getLocalContext().getSortOrderICPImage()));
			
			if(form.getLocalContext().getSortOrderICPImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderICPImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);
				
			
			form.grdResults().getRows().clear();
			
			
			populateGrid(voIPColl);
			
		}
		
		//WDEV-18220 
		else if (column == 1)
		{
			if(form.getLocalContext().getSortOrderOutcomeElectiveListImage() == null)
				form.getLocalContext().setSortOrderOutcomeElectiveListImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort( new ImageComparatorOutcomeWaitingList(form.getLocalContext().getSortOrderOutcomeElectiveListImage()));
			
			if(form.getLocalContext().getSortOrderOutcomeElectiveListImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderOutcomeElectiveListImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderOutcomeElectiveListImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderOutcomeElectiveListImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			populateGrid(voIPColl);
		}
		
		//WDEV-17912
		else if (column == 2)
		{
			if(form.getLocalContext().getSortOrderICABImage() == null)
				form.getLocalContext().setSortOrderICABImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort( new ImageComparator(form.getLocalContext().getSortOrderICABImage()));
			
			if(form.getLocalContext().getSortOrderICABImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderICABImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderICABImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderICABImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			populateGrid(voIPColl);
		}
		
		//WDEV-11665 - starts here
		/*if (column == 9)
		{
			if(form.getLocalContext().getSortOrderNurseImage() == null)
				form.getLocalContext().setSortOrderNurseImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getNurseImageComparator(form.getLocalContext().getSortOrderNurseImage()));
			
			if(form.getLocalContext().getSortOrderNurseImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderNurseImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderNurseImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderNurseImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		if (column == 10)
		{
			if(form.getLocalContext().getSortOrderMedicImage() == null)
				form.getLocalContext().setSortOrderMedicImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getMedicImageComparator(form.getLocalContext().getSortOrderMedicImage()));
			
			if(form.getLocalContext().getSortOrderMedicImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderMedicImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderMedicImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderMedicImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		if (column == 11)
		{
			if(form.getLocalContext().getSortOrderPhysioImage() == null)
				form.getLocalContext().setSortOrderPhysioImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getPhysioImageComparator(form.getLocalContext().getSortOrderPhysioImage()));
			
			if(form.getLocalContext().getSortOrderPhysioImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderPhysioImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderPhysioImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderPhysioImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		if (column == 12)
		{
			if(form.getLocalContext().getSortOrderAdminImage() == null)
				form.getLocalContext().setSortOrderAdminImage(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < form.grdResults().getRows().size() ; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getAdminImageComparator(form.getLocalContext().getSortOrderAdminImage()));
			
			if(form.getLocalContext().getSortOrderAdminImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderAdminImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderAdminImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderAdminImage(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		*/
		//WDEV-11665 - ends here
		
		//WDEV-11665
		else if (column == 12)
		{
			if(form.getLocalContext().getSortOrderTime() == null)
				form.getLocalContext().setSortOrderTime(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getTimeComparator(form.getLocalContext().getSortOrderTime()));
			
			if(form.getLocalContext().getSortOrderTime().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderTime(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderTime().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderTime(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		else if (column == 7)
		{
			if(form.getLocalContext().getSortOrderDOB() == null)
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);
			
			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	
			
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getDOBComparator(form.getLocalContext().getSortOrderDOB()));
			
			if(form.getLocalContext().getSortOrderDOB().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderDOB().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);
				
			form.grdResults().getRows().clear();
			
			populateGrid(voIPColl);
		}
		
		//WDEV-11893 - starts here
		else if(column == CURRENT_TRACKING_DATETIME_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrderTrackingTime() == null || !form.getLocalContext().getSortOrderTrackingTime().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderTrackingTime(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrderTrackingTime(SortOrder.DESCENDING);
			
			populateGrid(sortRowsByTrackingDateTime(form.grdResults().getValues()));
		}
		//WDEV-19207
		else if(column == APPT_BOOKING_COMMENTS_IMG_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrderBookingCommentsImage() == null)
				form.getLocalContext().setSortOrderBookingCommentsImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getApptBookingCommentsImageComparator(form.getLocalContext().getSortOrderBookingCommentsImage()));

			if(form.getLocalContext().getSortOrderBookingCommentsImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderBookingCommentsImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderBookingCommentsImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderBookingCommentsImage(SortOrder.ASCENDING);

			form.grdResults().getRows().clear();

			populateGrid(voIPColl);
		}
		//WDEV-19381
		else if(column == APPT_LETTER_PRINTED_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrderApptLetterPrintedImage() == null)
				form.getLocalContext().setSortOrderApptLetterPrintedImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getApptLetterPrintedImageComparator(form.getLocalContext().getSortOrderApptLetterPrintedImage()));

			if(form.getLocalContext().getSortOrderApptLetterPrintedImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderApptLetterPrintedImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderApptLetterPrintedImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderApptLetterPrintedImage(SortOrder.ASCENDING);

			form.grdResults().getRows().clear();

			populateGrid(voIPColl);
		}
		//WDEV-20071
		else if(column == INTERPRETER_DETAILS_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrderInterpreterRequiredImage() == null)
				form.getLocalContext().setSortOrderInterpreterRequiredImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getInterpreterImageComparator(form.getLocalContext().getSortOrderInterpreterRequiredImage()));

			if(form.getLocalContext().getSortOrderInterpreterRequiredImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderInterpreterRequiredImage(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderInterpreterRequiredImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderInterpreterRequiredImage(SortOrder.ASCENDING);

			form.grdResults().getRows().clear();

			populateGrid(voIPColl);
		}
		
		else if(column == LINKED_APPOINTMENTS_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrderLinkedAppoitments() == null)
				form.getLocalContext().setSortOrderLinkedAppoitments(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0 ; i < gridRowsSize; i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.grdResults().getRows().get(i).getValue()));	

			voIPColl.sort(new LinkedAppointmentImageComparator(form.getLocalContext().getSortOrderLinkedAppoitments()));

			if(form.getLocalContext().getSortOrderLinkedAppoitments().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderLinkedAppoitments(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrderLinkedAppoitments().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderLinkedAppoitments(SortOrder.ASCENDING);

			form.grdResults().getRows().clear();

			populateGrid(voIPColl);
		}

		form.grdResults().setValue(temp);
		updateControlsState();
	}

	//WDEV-11893
	private OutpatientEpisodeWithICPInfoVoCollection sortRowsByTrackingDateTime(OutpatientEpisodeWithICPInfoVoCollection outpatientEpisodeWithICPInfoVoCollection) 
	{
		if(outpatientEpisodeWithICPInfoVoCollection == null || outpatientEpisodeWithICPInfoVoCollection.size() == 0)
			return null;
		
		outpatientEpisodeWithICPInfoVoCollection.sort(new DateTimeComparator(form.getLocalContext().getSortOrderTrackingTime()));
		
		return outpatientEpisodeWithICPInfoVoCollection;
	}
	
	//WDEV-11893
	@SuppressWarnings("rawtypes")
	public class DateTimeComparator implements Comparator
	{
		private int direction = 1;
		
		public DateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateTimeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		
		public int compare(Object o1, Object o2)
		{
			DateTime startDate1 = null;
			DateTime startDate2 = null;
			
			if(o1 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo outpatient1 = ((OutpatientEpisodeWithICPInfoVo) o1);
				startDate1 = outpatient1.getCurrentApptTrakingStatus() != null ? outpatient1.getCurrentApptTrakingStatus().getStatusChangeDateTime() : null;
			}
			
			if(o2 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo outpatient2 = ((OutpatientEpisodeWithICPInfoVo) o2);
				startDate2 = outpatient2.getCurrentApptTrakingStatus() != null ? outpatient2.getCurrentApptTrakingStatus().getStatusChangeDateTime() : null;
			}
			
			if(startDate1 == null)
				return -1*direction;
			
			if(startDate2 == null)
				return direction;
			
			return startDate1.compareTo(startDate2)*direction;
		}
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		//WDEV-13354
		search();
	}

	//WDEV-13354
	private void disableRefreshTemporarily()
	{
		//kill the refresh timer if it is enabled
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Clinic List");	
			form.getLocalContext().setWasTimerEnabled(true);
		}
		else
			form.getLocalContext().setWasTimerEnabled(false);
	}
	
	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		//WDEV-13354
		toggleTimer(true);
	}

	//WDEV-17933
	@Override
	protected void onCmbClinicValueChanged() throws PresentationLogicException 
	{
		form.cmbClinic().setTooltip(form.cmbClinic().getValue()!=null ? form.cmbClinic().getValue().getDescription():null);
		
	}
	
	//WDEV-17912
	public class ImageComparator implements Comparator<Object>
	{
		private int direction = 1;

		public ImageComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public ImageComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			
			Integer isCab1 = 0;
			Integer isCab2 = 0;

			if (ob1 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o1 = (OutpatientEpisodeWithICPInfoVo) ob1;
				isCab1 = (o1.getReferral() != null && Boolean.TRUE.equals(o1.getReferral().getIsCAB()) ? 1 : 0);
			}

			if (ob2 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o2 = (OutpatientEpisodeWithICPInfoVo) ob2;
				isCab2 = (o2.getReferral() != null && Boolean.TRUE.equals(o2.getReferral().getIsCAB()) ? 1 : 0);
			}

			if (isCab1 != 0 && isCab2 != 0)
			{
				return isCab1.compareTo(isCab2) * direction;
			}

			if (isCab1 != 0 && isCab2 == 0)
			{
				return direction;
			}

			if (isCab2 != 0 && isCab1 == 0)
			{
				return -1 * direction;
			}	
			
			return 0;
		}
	}
	
	public class LinkedAppointmentImageComparator implements Comparator<Object>
	{
		private int direction = 1;

		public LinkedAppointmentImageComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public LinkedAppointmentImageComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			Integer isLinked1 = 0;
			Integer isLinked2 = 0;

			if (ob1 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o1 = (OutpatientEpisodeWithICPInfoVo) ob1;
				isLinked1 = ((o1.getLinkedAppointments() != null && o1.getLinkedAppointments().size() > 0) ? 1 : 0);
			}

			if (ob2 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o2 = (OutpatientEpisodeWithICPInfoVo) ob2;
				isLinked2 = ((o2.getLinkedAppointments() != null && o2.getLinkedAppointments().size() > 0) ? 1 : 0);
			}

			if (isLinked1 != 0 && isLinked2 != 0)
			{
				return isLinked1.compareTo(isLinked2) * direction;
			}

			if (isLinked1 != 0 && isLinked2 == 0)
			{
				return direction;
			}

			if (isLinked2 != 0 && isLinked1 == 0)
			{
				return -1 * direction;
			}	
			
			return 0;
		}
	}
	
	public class ImageComparatorOutcomeWaitingList implements Comparator<Object>
	{
		private int direction = 1;

		public ImageComparatorOutcomeWaitingList()
		{
			this(SortOrder.ASCENDING);
		}

		public ImageComparatorOutcomeWaitingList(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			
			Integer sortA = 0;
			Integer sortB = 0;

			if (ob1 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o1 = (OutpatientEpisodeWithICPInfoVo) ob1;
				if (o1.getHasElectiveListIsNotNull() && Boolean.TRUE.equals(o1.getHasElectiveList()))
					sortA = 2;
				else if (o1.getOutcomeIsNotNull() && o1.getHasElectiveList() == null)
					sortA = 1;
				else
					sortA = 0;
			}

			if (ob2 instanceof OutpatientEpisodeWithICPInfoVo)
			{
				OutpatientEpisodeWithICPInfoVo o2 = (OutpatientEpisodeWithICPInfoVo) ob2;
				if (o2.getHasElectiveListIsNotNull() && Boolean.TRUE.equals(o2.getHasElectiveList()))
					sortB = 2;
				else if (o2.getOutcomeIsNotNull() && o2.getHasElectiveList() == null)
					sortB = 1;
				else
					sortB = 0;
			}

			if (sortA != 0 && sortB != 0)
			{
				return sortA.compareTo(sortB) * direction;
			}

			if (sortA != 0 && sortB == 0)
			{
				return direction;
			}

			if (sortB != 0 && sortA == 0)
			{
				return -1 * direction;
			}	
			
			return 0;
		}
	}
	//WDEV-19320
	@Override
	protected void onCcListOwnerValueChanged() throws PresentationLogicException
	{
		if (form.ccListOwner().getValue() != null)
		{	
			form.lblListOwnersSel().setValue(null);

			HcpLiteVoCollection owners = new HcpLiteVoCollection();
			owners.add((HcpLiteVo) form.ccListOwner().getValue());
			form.getGlobalContext().Scheduling.setSelectedHCPs(owners);
		}
		else
		{
			form.getGlobalContext().Scheduling.setSelectedHCPs(null);
		}
		
	}
	
	@Override
	protected void onImbAddListOwnersClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.HcpMultipleSelectDialog);
		
	}
	
	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateServices(value);
		
	}
	
	private void populateServices(String value)
	{
		if (value == null || value.length() < 3)
			return;
		form.qmbService().clear();

		ServiceLiteVoCollection coll = domain.listServices(value);

		if(coll == null || coll.size() == 0)
			return;

		for (int i=0;i<coll.size();i++)
		{
			if (coll.get(i) == null)
				continue;
			form.qmbService().newRow(coll.get(i), coll.get(i).getServiceName());
			if (coll.size() == 1)
			{	
				form.qmbService().setValue(coll.get(0));
			}
			else
			{	
				form.qmbService().showOpened();
			}
		}
	}
	//WDEV-19320
	private void populateListOwnersLabel(HcpLiteVoCollection listOwners)
	{
		if (listOwners == null || listOwners.size() ==0)
		{	
			form.lblListOwnersSel().setValue(null);
			return;
		}
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner != null && listOwner.getName() != null)
			{
				if (i == 0)
					namesString.append(listOwner.getName());
				else
					namesString.append(", " + listOwner.getName());
			}
		}

		if (namesString.length() > 53)
		{
			form.lblListOwnersSel().setValue(namesString.substring(0, 53) + "...");
		}
		else
			form.lblListOwnersSel().setValue(namesString.toString());

		form.lblListOwnersSel().setTooltip(namesString.toString());

	}
	//WDEV-19320 --- ends here

	//wdev-19419
	protected void onCmbListTypeValueChanged() throws PresentationLogicException
	{
		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(false);
		else if (form.dteDate().getValue() == null)
		{
			form.cmbClinic().clear();
			//WDEV-11624 clear grid to avoid refresh problem
			form.grdResults().getRows().clear();
			form.getLocalContext().setSelectedRow(null); //WDEV-22297
			form.getContextMenus().Clinical.hideAllOPClinicViewListMenuItems();
		}
		
	}
	//wdev-19503
	private void populateOutpatientLocationCombo()
	{
		form.cmbOutpatientLocation().clear();
		LocationLiteVoCollection outplocs = domain.listOutpatientlocationsByHospital(form.cmbHospital().getValue());
		if( outplocs != null && outplocs.size() > 0)
		{
			for( LocationLiteVo outploc : outplocs)
			{
				if( outploc == null)
					continue;

				form.cmbOutpatientLocation().newRow(outploc, outploc.getName());
			}
		}
	}
	//---------	
}
