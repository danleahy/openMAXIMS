//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.cliniclistwithicpactions;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbOutpatientLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbListTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.ProfileListType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.ProfileListType getValue()
		{
			return (ims.scheduling.vo.lookups.ProfileListType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.ProfileListType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbClinicComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdResultsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdResultsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolICPReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolICPReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolICPOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolICP(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Image getcolICP()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolICP(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolICPTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolOutcomeElectiveReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolOutcomeElectiveReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolOutcomeElectiveOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolOutcomeElective(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.Image getcolOutcomeElective()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setcolOutcomeElective(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellcolOutcomeElectiveTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolICABReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolICABReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolICABOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolICAB(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getcolICAB()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setcolICAB(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellcolICABTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolHospnumReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolHospnumReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolHospnumOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolHospnum(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolHospnum()
		{
			return (String)super.row.get(3);
		}
		public void setcolHospnum(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolHospnumTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolSurnameReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolSurnameOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolSurname(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolSurname()
		{
			return (String)super.row.get(4);
		}
		public void setcolSurname(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolSurnameTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolForenameReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolForenameOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolForename(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolForename()
		{
			return (String)super.row.get(5);
		}
		public void setcolForename(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolForenameTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolSexReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolSexReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolSexOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolSex(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getcolSex()
		{
			return (String)super.row.get(6);
		}
		public void setcolSex(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolSexTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolDobReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolDobReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolDobOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForcolDob(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getcolDob()
		{
			return (String)super.row.get(7);
		}
		public void setcolDob(String value)
		{
			super.row.set(7, value);
		}
		public void setCellcolDobTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForcolConsultant(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(8);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(8, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setcolTrackingReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean iscolTrackingReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showcolTrackingOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForcolTracking(String value)
		{
			super.row.setTooltip(9, value);
		}
		public String getcolTracking()
		{
			return (String)super.row.get(9);
		}
		public void setcolTracking(String value)
		{
			super.row.set(9, value);
		}
		public void setCellcolTrackingTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setColTrackingTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isColTrackingTimeReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showColTrackingTimeOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForColTrackingTime(String value)
		{
			super.row.setTooltip(10, value);
		}
		public String getColTrackingTime()
		{
			return (String)super.row.get(10);
		}
		public void setColTrackingTime(String value)
		{
			super.row.set(10, value);
		}
		public void setCellColTrackingTimeTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setColActivityImageReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean isColActivityImageReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showColActivityImageOpened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForColActivityImage(String value)
		{
			super.row.setTooltip(11, value);
		}
		public ims.framework.utils.Image getColActivityImage()
		{
			return (ims.framework.utils.Image)super.row.get(11);
		}
		public void setColActivityImage(ims.framework.utils.Image value)
		{
			super.row.set(11, value);
		}
		public void setCellColActivityImageTooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setcolActivityTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean iscolActivityTypeReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showcolActivityTypeOpened()
		{
			super.row.showOpened(12);
		}
		public void setTooltipForcolActivityType(String value)
		{
			super.row.setTooltip(12, value);
		}
		public String getcolActivityType()
		{
			return (String)super.row.get(12);
		}
		public void setcolActivityType(String value)
		{
			super.row.set(12, value);
		}
		public void setCellcolActivityTypeTooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public void setcolApptTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(13, value);
		}
		public boolean iscolApptTimeReadOnly()
		{
			return super.row.isReadOnly(13);
		}
		public void showcolApptTimeOpened()
		{
			super.row.showOpened(13);
		}
		public void setTooltipForcolApptTime(String value)
		{
			super.row.setTooltip(13, value);
		}
		public String getcolApptTime()
		{
			return (String)super.row.get(13);
		}
		public void setcolApptTime(String value)
		{
			super.row.set(13, value);
		}
		public void setCellcolApptTimeTooltip(String value)
		{
			super.row.setTooltip(13, value);
		}
		public void setcolBookingCommentsReadOnly(boolean value)
		{
			super.row.setReadOnly(14, value);
		}
		public boolean iscolBookingCommentsReadOnly()
		{
			return super.row.isReadOnly(14);
		}
		public void showcolBookingCommentsOpened()
		{
			super.row.showOpened(14);
		}
		public void setTooltipForcolBookingComments(String value)
		{
			super.row.setTooltip(14, value);
		}
		public ims.framework.utils.Image getcolBookingComments()
		{
			return (ims.framework.utils.Image)super.row.get(14);
		}
		public void setcolBookingComments(ims.framework.utils.Image value)
		{
			super.row.set(14, value);
		}
		public void setCellcolBookingCommentsTooltip(String value)
		{
			super.row.setTooltip(14, value);
		}
		public void setcolAppLetterPrintedReadOnly(boolean value)
		{
			super.row.setReadOnly(15, value);
		}
		public boolean iscolAppLetterPrintedReadOnly()
		{
			return super.row.isReadOnly(15);
		}
		public void showcolAppLetterPrintedOpened()
		{
			super.row.showOpened(15);
		}
		public void setTooltipForcolAppLetterPrinted(String value)
		{
			super.row.setTooltip(15, value);
		}
		public ims.framework.utils.Image getcolAppLetterPrinted()
		{
			return (ims.framework.utils.Image)super.row.get(15);
		}
		public void setcolAppLetterPrinted(ims.framework.utils.Image value)
		{
			super.row.set(15, value);
		}
		public void setCellcolAppLetterPrintedTooltip(String value)
		{
			super.row.setTooltip(15, value);
		}
		public void setcolInterpreterRequiredReadOnly(boolean value)
		{
			super.row.setReadOnly(16, value);
		}
		public boolean iscolInterpreterRequiredReadOnly()
		{
			return super.row.isReadOnly(16);
		}
		public void showcolInterpreterRequiredOpened()
		{
			super.row.showOpened(16);
		}
		public void setTooltipForcolInterpreterRequired(String value)
		{
			super.row.setTooltip(16, value);
		}
		public ims.framework.utils.Image getcolInterpreterRequired()
		{
			return (ims.framework.utils.Image)super.row.get(16);
		}
		public void setcolInterpreterRequired(ims.framework.utils.Image value)
		{
			super.row.set(16, value);
		}
		public void setCellcolInterpreterRequiredTooltip(String value)
		{
			super.row.setTooltip(16, value);
		}
		public void setColLinkedAppointmentReadOnly(boolean value)
		{
			super.row.setReadOnly(17, value);
		}
		public boolean isColLinkedAppointmentReadOnly()
		{
			return super.row.isReadOnly(17);
		}
		public void showColLinkedAppointmentOpened()
		{
			super.row.showOpened(17);
		}
		public void setTooltipForColLinkedAppointment(String value)
		{
			super.row.setTooltip(17, value);
		}
		public ims.framework.utils.Image getColLinkedAppointment()
		{
			return (ims.framework.utils.Image)super.row.get(17);
		}
		public void setColLinkedAppointment(ims.framework.utils.Image value)
		{
			super.row.set(17, value);
		}
		public void setCellColLinkedAppointmentTooltip(String value)
		{
			super.row.setTooltip(17, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(18, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(18);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(18);
		}
		public void setTooltipForColStatus(String value)
		{
			super.row.setTooltip(18, value);
		}
		public String getColStatus()
		{
			return (String)super.row.get(18);
		}
		public void setColStatus(String value)
		{
			super.row.set(18, value);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(18, value);
		}
		public void setColContactDetailsReadOnly(boolean value)
		{
			super.row.setReadOnly(19, value);
		}
		public boolean isColContactDetailsReadOnly()
		{
			return super.row.isReadOnly(19);
		}
		public void setColContactDetailsEmpty(boolean value)
		{
			super.row.setIsEmpty(19, value);
		}
		public boolean isColContactDetailsEmpty()
		{
			return super.row.isEmpty(19);
		}
		public void showColContactDetailsOpened()
		{
			super.row.showOpened(19);
		}
		public void setTooltipForColContactDetails(String value)
		{
			super.row.setTooltip(19, value);
		}
		public ims.framework.utils.Image getColContactDetails()
		{
			return (ims.framework.utils.Image)super.row.get(19);
		}
		public void setColContactDetails(ims.framework.utils.Image value)
		{
			super.row.set(19, value);
		}
		public void setCellColContactDetailsTooltip(String value)
		{
			super.row.setTooltip(19, value);
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVo getValue()
		{
			return (ims.icp.vo.OutpatientEpisodeWithICPInfoVo)super.row.getValue();
		}
		public void setValue(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdResultsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdResultsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdResultsRow get(int index)
		{
			return new grdResultsRow(super.collection.get(index));
		}
		public grdResultsRow newRow()
		{
			return new grdResultsRow(super.collection.newRow());
		}
		public grdResultsRow newRow(boolean autoSelect)
		{
			return new grdResultsRow(super.collection.newRow(autoSelect));
		}
		public grdResultsRow newRowAt(int index)
		{
			return new grdResultsRow(super.collection.newRowAt(index));
		}
		public grdResultsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdResultsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdResultsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public void setcolHospnumCaption(String value)
		{
			this.grid.setColumnCaption(3, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addButtonColumn(String caption, int captionAlignment, int alignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addButtonColumn(caption, captionAlignment, alignment, width, bold, canGrow);
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection getValues()
		{
			ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection listOfValues = new ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVo getValue()
		{
			return (ims.icp.vo.OutpatientEpisodeWithICPInfoVo)super.grid.getValue();
		}
		public void setValue(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			super.grid.setValue(value);
		}
		public grdResultsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdResultsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdResultsRowCollection getRows()
		{
			return new grdResultsRowCollection(super.grid.getRows());
		}
		public grdResultsRow getRowByValue(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdResultsRow(row);
		}
		public void setcolICPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolICPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolOutcomeElectiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolOutcomeElectiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolICABHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolICABHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolHospnumHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolHospnumHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setcolTrackingHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getcolTrackingHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setColTrackingTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getColTrackingTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setColActivityImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getColActivityImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setcolActivityTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getcolActivityTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
		public void setcolApptTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(13, value);
		}
		public String getcolApptTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(13);
		}
		public void setcolBookingCommentsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(14, value);
		}
		public String getcolBookingCommentsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(14);
		}
		public void setcolAppLetterPrintedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(15, value);
		}
		public String getcolAppLetterPrintedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(15);
		}
		public void setcolInterpreterRequiredHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(16, value);
		}
		public String getcolInterpreterRequiredHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(16);
		}
		public void setColLinkedAppointmentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(17, value);
		}
		public String getColLinkedAppointmentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(17);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(18, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(18);
		}
		public void setColContactDetailsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(19, value);
		}
		public String getColContactDetailsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(19);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.IPandOPSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.IPandOPSearchCriteriaVo' of the global context variable 'UKSHOutPatientWardViewSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(FormName.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'FormName' of the global context variable 'Core.SelectingPatientForm' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(123);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.timerSearch = factory.createTimer(0, 10, false);
		form.addTimer(timers.timerSearch);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuOPClinicViewList = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuOPClinicViewListAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListAddItem);
		contextMenus.Clinical.contextMenuOPClinicViewListEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListEditItem);
		contextMenus.Clinical.contextMenuOPClinicViewListEditViewICPActionsItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListEditViewICPActionsItem);
		contextMenus.Clinical.contextMenuOPClinicViewListADMITItem = factory.createMenuItem(startControlID.intValue() + 4, "Admit Patient", true, false, new Integer(102311), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960003)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListADMITItem);
		contextMenus.Clinical.contextMenuOPClinicViewListDISCHARGEItem = factory.createMenuItem(startControlID.intValue() + 5, "Discharge Patient", true, false, new Integer(102324), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960004)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListDISCHARGEItem);
		contextMenus.Clinical.contextMenuOPClinicViewListDNAItem = factory.createMenuItem(startControlID.intValue() + 6, "DNA Patient", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960005)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListDNAItem);
		contextMenus.Clinical.contextMenuOPClinicViewListARRIVEItem = factory.createMenuItem(startControlID.intValue() + 7, "Arrived", true, false, new Integer(102312), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960001)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListARRIVEItem);
		contextMenus.Clinical.contextMenuOPClinicViewListSEEN_EDIT_NO_ICPItem = factory.createMenuItem(startControlID.intValue() + 8, "Seen by Consultant", true, false, new Integer(123160), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960012)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListSEEN_EDIT_NO_ICPItem);
		contextMenus.Clinical.contextMenuOPClinicViewListSEEN_EDIT_ICPItem = factory.createMenuItem(startControlID.intValue() + 9, "Seen by Consultant and View/Edit ICP", true, false, new Integer(118104), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960002)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListSEEN_EDIT_ICPItem);
		contextMenus.Clinical.contextMenuOPClinicViewListWAIT_FOR_NEXTItem = factory.createMenuItem(startControlID.intValue() + 10, "Waiting for Next", true, false, new Integer(123161), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960006)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListWAIT_FOR_NEXTItem);
		contextMenus.Clinical.contextMenuOPClinicViewListSEEN_BY_ANAESTHETISTItem = factory.createMenuItem(startControlID.intValue() + 11, "Seen by Anaesthetist", true, false, new Integer(123162), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960007)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListSEEN_BY_ANAESTHETISTItem);
		contextMenus.Clinical.contextMenuOPClinicViewListWITH_PHYSIOTHERAPYItem = factory.createMenuItem(startControlID.intValue() + 12, "Seen by Physiotherapy", true, false, new Integer(123163), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960008)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListWITH_PHYSIOTHERAPYItem);
		contextMenus.Clinical.contextMenuOPClinicViewListSEEN_BY_PREOP_NURSEItem = factory.createMenuItem(startControlID.intValue() + 13, "Seen by Pre-Op Nurse", true, false, new Integer(123164), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960009)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListSEEN_BY_PREOP_NURSEItem);
		contextMenus.Clinical.contextMenuOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem = factory.createMenuItem(startControlID.intValue() + 14, "Seen by Diagnostic services", true, false, new Integer(123165), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960010)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem);
		contextMenus.Clinical.contextMenuOPClinicViewListVISIT_COMPLETEItem = factory.createMenuItem(startControlID.intValue() + 15, "Visit complete", true, false, new Integer(123166), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960011)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListVISIT_COMPLETEItem);
		contextMenus.Clinical.contextMenuOPClinicViewListOUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 16, "Outcome", true, false, new Integer(114136), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960013)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListOUTCOMEItem);
		contextMenus.Clinical.contextMenuOPClinicViewListVIEW_EDIT_OUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 17, "View/Edit Outcome", true, false, new Integer(123175), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960015)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListVIEW_EDIT_OUTCOMEItem);
		contextMenus.Clinical.contextMenuOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 18, "View/Edit Pre-Assessment Outcome", true, false, new Integer(123175), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960021)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem);
		contextMenus.Clinical.contextMenuOPClinicViewListCANCEL_REBOOKItem = factory.createMenuItem(startControlID.intValue() + 19, "Cancel / Rebook Appointment", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960016)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListCANCEL_REBOOKItem);
		contextMenus.Clinical.contextMenuOPClinicViewListUNDO_DNAItem = factory.createMenuItem(startControlID.intValue() + 20, "Undo DNA", true, false, new Integer(102187), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960017)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListUNDO_DNAItem);
		contextMenus.Clinical.contextMenuOPClinicViewListUNDO_ARRIVALItem = factory.createMenuItem(startControlID.intValue() + 21, "Undo Arrival", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960014)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListUNDO_ARRIVALItem);
		contextMenus.Clinical.contextMenuOPClinicViewListUNDO_NOT_SEENItem = factory.createMenuItem(startControlID.intValue() + 22, "Undo Not Seen", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960018)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListUNDO_NOT_SEENItem);
		contextMenus.Clinical.contextMenuOPClinicViewListUNDO_SEENItem = factory.createMenuItem(startControlID.intValue() + 23, "Undo Seen", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960019)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListUNDO_SEENItem);
		contextMenus.Clinical.contextMenuOPClinicViewListVIEW_REFERRAL_DETAILItem = factory.createMenuItem(startControlID.intValue() + 24, "View/Edit Referral Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960022)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListVIEW_REFERRAL_DETAILItem);
		contextMenus.Clinical.contextMenuOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 25, "View Outcome (Read Only)", true, false, new Integer(123175), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2960023)))
			contextMenus.Clinical.contextMenuOPClinicViewList.add(contextMenus.Clinical.contextMenuOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuOPClinicViewList);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 82, 100, 314, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccListOwnerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
		//ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(82), new Integer(100), new Integer(314), new Integer(20), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccListOwnerForm, instance1 } );
		ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccListOwnerForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccListOwnerControl);
		Menu[] menus1 = m_ccListOwnerForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 406, 73, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 406, 60, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Outpatient", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 406, 39, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "List Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 405, 103, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<List Owners>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 102, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owners:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 71, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 406, 8, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 39, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic:", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 473, 6, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 473, 69, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbOutpatientLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOutpatientLocationTemp);
		cmbOutpatientLocationComboBox cmbOutpatientLocation = (cmbOutpatientLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutpatientLocationComboBox.class, m_cmbOutpatientLocationTemp);
		super.addComboBox(cmbOutpatientLocation);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 473, 37, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbListTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbListTypeTemp);
		cmbListTypeComboBox cmbListType = (cmbListTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeComboBox.class, m_cmbListTypeTemp);
		super.addComboBox(cmbListType);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 82, 6, 298, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 82, 37, 298, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbClinicTemp);
		cmbClinicComboBox cmbClinic = (cmbClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClinicComboBox.class, m_cmbClinicTemp);
		super.addComboBox(cmbClinic);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 82, 69, 298, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbServiceTemp);
		qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
		super.addComboBox(qmbService);

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 132, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdResultsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(44), Boolean.TRUE, contextMenus.Clinical.contextMenuOPClinicViewList, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdResultsTemp);
		grdResultsGrid grdResults = (grdResultsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdResultsGrid.class, m_grdResultsTemp);
		grdResults.addImageColumn(" ", 1, 0, 23, false, 2);
		grdResults.addImageColumn(" ", 1, 0, 23, false, 2);
		grdResults.addImageColumn(" ", 1, 0, 23, false, 2);
		grdResults.addStringColumn("Hospital No.", 0, 0, 85, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Surname", 0, 0, 70, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Forename", 0, 0, 70, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Sex", 0, 0, 40, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("D.O.B", 0, 0, 60, true, false, 2, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Consultant", 0, 0, 75, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Tracking\nStatus", 0, 0, 60, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Time", 0, 0, 40, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addImageColumn(" ", 0, 0, 30, true, 0);
		grdResults.addStringColumn("Activity\nType", 0, 0, 55, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Appt.\nTime", 0, 0, 40, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addImageColumn(" ", 1, 1, 23, false, 2);
		grdResults.addImageColumn(" ", 1, 1, 23, true, 2);
		grdResults.addImageColumn(" ", 1, 1, 23, true, 2);
		grdResults.addImageColumn(" ", 0, 0, 23, true, 2);
		grdResults.addStringColumn("Status", 0, 0, 50, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addButtonColumn(" ", 0, 0, -1, false, true);
		super.addGrid(grdResults);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 381, 97, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled16, this.getImages().Core.FindDisabled16, "Add List Owners", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 809, 2, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.TimerStartEnabled24, this.getImages().Core.TimerStartDisabled24, "Refresh", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 777, 2, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 745, 2, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccListOwner()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccListOwnerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccListOwnerVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccListOwnerVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccListOwnerEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccListOwnerEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lblListOwnersSel()
	{
		return (Label)super.getControl(4);
	}
	public Label lblClinic()
	{
		return (Label)super.getControl(9);
	}
	public DateControl dteDate()
	{
		return (DateControl)super.getControl(10);
	}
	public cmbOutpatientLocationComboBox cmbOutpatientLocation()
	{
		return (cmbOutpatientLocationComboBox)super.getComboBox(0);
	}
	public cmbListTypeComboBox cmbListType()
	{
		return (cmbListTypeComboBox)super.getComboBox(1);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(2);
	}
	public cmbClinicComboBox cmbClinic()
	{
		return (cmbClinicComboBox)super.getComboBox(3);
	}
	public qmbServiceComboBox qmbService()
	{
		return (qmbServiceComboBox)super.getComboBox(4);
	}
	public grdResultsGrid grdResults()
	{
		return (grdResultsGrid)super.getGrid(0);
	}
	public ImageButton imbAddListOwners()
	{
		return (ImageButton)super.getControl(17);
	}
	public ImageButton imbAutoRefresh()
	{
		return (ImageButton)super.getControl(18);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(20);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			ICP = new ICPForms();
			Scheduling = new SchedulingForms();
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ICPActions = new LocalFormName(123153);
				DayCaseAdmissionDialog = new LocalFormName(134177);
				DischargeSummaryWardPacuDialogAlias = new LocalFormName(134170);
				ArrivalSeenTimeDialog = new LocalFormName(134186);
				BookAppointmentDialog = new LocalFormName(134134);
				PreAssessmentOutcomeDlg = new LocalFormName(134273);
				ReferralDetailsDialog = new LocalFormName(134104);
			}
			public final FormName ICPActions;
			public final FormName DayCaseAdmissionDialog;
			public final FormName DischargeSummaryWardPacuDialogAlias;
			public final FormName ArrivalSeenTimeDialog;
			public final FormName BookAppointmentDialog;
			public final FormName PreAssessmentOutcomeDlg;
			public final FormName ReferralDetailsDialog;
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				PatientICP = new LocalFormName(118100);
			}
			public final FormName PatientICP;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				AppointmentOutcomeDialog = new LocalFormName(114171);
				HcpMultipleSelectDialog = new LocalFormName(114115);
				CancelAppointmentDialog = new LocalFormName(114160);
				AppointmentArrivalDialog = new LocalFormName(114131);
			}
			public final FormName AppointmentOutcomeDialog;
			public final FormName HcpMultipleSelectDialog;
			public final FormName CancelAppointmentDialog;
			public final FormName AppointmentArrivalDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PatientContactDlg = new LocalFormName(123290);
			}
			public final FormName PatientContactDlg;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PDSDemographicsDialog = new LocalFormName(102494);
			}
			public final FormName PDSDemographicsDialog;
		}

		public RefManForms RefMan;
		public ICPForms ICP;
		public SchedulingForms Scheduling;
		public ClinicalForms Clinical;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
			ICP = new ICPImages();
			OCRR = new OCRRImages();
			Scheduling = new SchedulingImages();
			Emergency = new EmergencyImages();
			Correspondence = new CorrespondenceImages();
			RefMan = new RefManImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
				UI16 = new ImageHelper(102571, "Images/Core/gui_16.png", new Integer(16), new Integer(16));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image TimerStartDisabled24;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
			public final ims.framework.utils.Image UI16;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image FindEnabled16;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Nurse24 = new ImageHelper(103208, "Images/Admin/nurse_24.png", new Integer(24), new Integer(24));
				Stethoscope24 = new ImageHelper(103210, "Images/Admin/stethoscope_24.png", new Integer(24), new Integer(24));
				Doctor24 = new ImageHelper(103209, "Images/Admin/doctor_24.png", new Integer(24), new Integer(24));
				AdminAction24 = new ImageHelper(103211, "Images/Admin/patient_information_24.png", new Integer(24), new Integer(24));
				link = new ImageHelper(103164, "Images/Admin/small.JPG", new Integer(23), new Integer(23));
			}
			public final ims.framework.utils.Image Nurse24;
			public final ims.framework.utils.Image Stethoscope24;
			public final ims.framework.utils.Image Doctor24;
			public final ims.framework.utils.Image AdminAction24;
			public final ims.framework.utils.Image link;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				ICP = new ImageHelper(118104, "Images/ICP/ICP.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ICP;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				LetterC = new ImageHelper(116120, "Images/OCRR/c.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image LetterC;
		}
		public final class SchedulingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingImages()
			{
				appointment_outcome_16 = new ImageHelper(114136, "Images/Scheduling/appointment_outcome_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image appointment_outcome_16;
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				CommentNotes16x16 = new ImageHelper(129186, "Images/Emergency/comment_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image CommentNotes16x16;
		}
		public final class CorrespondenceImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceImages()
			{
				Printer = new ImageHelper(111101, "Images/Correspondence/Printer.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Printer;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				HandSet16 = new ImageHelper(134142, "Images/RefMan/HandSet16.png", new Integer(16), new Integer(16));
				interpreter18x18 = new ImageHelper(134167, "Images/RefMan/interpreter_details_18.png", new Integer(18), new Integer(18));
			}
			public final ims.framework.utils.Image HandSet16;
			public final ims.framework.utils.Image interpreter18x18;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
		public final ICPImages ICP;
		public final OCRRImages OCRR;
		public final SchedulingImages Scheduling;
		public final EmergencyImages Emergency;
		public final CorrespondenceImages Correspondence;
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_bLessThenTodaysDate = new ims.framework.ContextVariable("bLessThenTodaysDate", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__bLessThenTodaysDate_" + componentIdentifier + "");
			cxl_bArrivalChosen = new ims.framework.ContextVariable("bArrivalChosen", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__bArrivalChosen_" + componentIdentifier + "");
			cxl_bDNACalled = new ims.framework.ContextVariable("bDNACalled", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__bDNACalled_" + componentIdentifier + "");
			cxl_SortOrderTime = new ims.framework.ContextVariable("SortOrderTime", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderTime_" + componentIdentifier + "");
			cxl_SortOrderDOB = new ims.framework.ContextVariable("SortOrderDOB", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderDOB_" + componentIdentifier + "");
			cxl_SortOrderICPImage = new ims.framework.ContextVariable("SortOrderICPImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderICPImage_" + componentIdentifier + "");
			cxl_SortOrderNurseImage = new ims.framework.ContextVariable("SortOrderNurseImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderNurseImage_" + componentIdentifier + "");
			cxl_SortOrderMedicImage = new ims.framework.ContextVariable("SortOrderMedicImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderMedicImage_" + componentIdentifier + "");
			cxl_SortOrderPhysioImage = new ims.framework.ContextVariable("SortOrderPhysioImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderPhysioImage_" + componentIdentifier + "");
			cxl_SortOrderAdminImage = new ims.framework.ContextVariable("SortOrderAdminImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderAdminImage_" + componentIdentifier + "");
			cxl_AllowEditICP = new ims.framework.ContextVariable("AllowEditICP", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__AllowEditICP_" + componentIdentifier + "");
			cxl_SortOrderTrackingTime = new ims.framework.ContextVariable("SortOrderTrackingTime", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderTrackingTime_" + componentIdentifier + "");
			cxl_WasTimerEnabled = new ims.framework.ContextVariable("WasTimerEnabled", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__WasTimerEnabled_" + componentIdentifier + "");
			cxl_SortOrderICABImage = new ims.framework.ContextVariable("SortOrderICABImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderICABImage_" + componentIdentifier + "");
			cxl_UndoArrivalMessageBoxId = new ims.framework.ContextVariable("UndoArrivalMessageBoxId", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__UndoArrivalMessageBoxId_" + componentIdentifier + "");
			cxl_SortOrderOutcomeElectiveListImage = new ims.framework.ContextVariable("SortOrderOutcomeElectiveListImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderOutcomeElectiveListImage_" + componentIdentifier + "");
			cxl_SortOrderBookingCommentsImage = new ims.framework.ContextVariable("SortOrderBookingCommentsImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderBookingCommentsImage_" + componentIdentifier + "");
			cxl_SortOrderApptLetterPrintedImage = new ims.framework.ContextVariable("SortOrderApptLetterPrintedImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderApptLetterPrintedImage_" + componentIdentifier + "");
			cxl_ApptToCancel = new ims.framework.ContextVariable("ApptToCancel", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier + "");
			cxl_UndoDNAMessageBoxId = new ims.framework.ContextVariable("UndoDNAMessageBoxId", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__UndoDNAMessageBoxId_" + componentIdentifier + "");
			cxl_UndoNotSeenMessageBoxId = new ims.framework.ContextVariable("UndoNotSeenMessageBoxId", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__UndoNotSeenMessageBoxId_" + componentIdentifier + "");
			cxl_UndoSeenMessageBoxId = new ims.framework.ContextVariable("UndoSeenMessageBoxId", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__UndoSeenMessageBoxId_" + componentIdentifier + "");
			cxl_UndoOutcomeMessageBoxId = new ims.framework.ContextVariable("UndoOutcomeMessageBoxId", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__UndoOutcomeMessageBoxId_" + componentIdentifier + "");
			cxl_SortOrderInterpreterRequiredImage = new ims.framework.ContextVariable("SortOrderInterpreterRequiredImage", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderInterpreterRequiredImage_" + componentIdentifier + "");
			cxl_bSeenByPreOp = new ims.framework.ContextVariable("bSeenByPreOp", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__bSeenByPreOp_" + componentIdentifier + "");
			cxl_SortOrderLinkedAppoitments = new ims.framework.ContextVariable("SortOrderLinkedAppoitments", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SortOrderLinkedAppoitments_" + componentIdentifier + "");
			cxl_SelectedRow = new ims.framework.ContextVariable("SelectedRow", prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier + "");
		}
		
		public boolean getbLessThenTodaysDateIsNotNull()
		{
			return !cxl_bLessThenTodaysDate.getValueIsNull(context);
		}
		public Boolean getbLessThenTodaysDate()
		{
			return (Boolean)cxl_bLessThenTodaysDate.getValue(context);
		}
		public void setbLessThenTodaysDate(Boolean value)
		{
			cxl_bLessThenTodaysDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bLessThenTodaysDate = null;
		public boolean getbArrivalChosenIsNotNull()
		{
			return !cxl_bArrivalChosen.getValueIsNull(context);
		}
		public Boolean getbArrivalChosen()
		{
			return (Boolean)cxl_bArrivalChosen.getValue(context);
		}
		public void setbArrivalChosen(Boolean value)
		{
			cxl_bArrivalChosen.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bArrivalChosen = null;
		public boolean getbDNACalledIsNotNull()
		{
			return !cxl_bDNACalled.getValueIsNull(context);
		}
		public Boolean getbDNACalled()
		{
			return (Boolean)cxl_bDNACalled.getValue(context);
		}
		public void setbDNACalled(Boolean value)
		{
			cxl_bDNACalled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bDNACalled = null;
		public boolean getSortOrderTimeIsNotNull()
		{
			return !cxl_SortOrderTime.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderTime()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderTime.getValue(context);
		}
		public void setSortOrderTime(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderTime = null;
		public boolean getSortOrderDOBIsNotNull()
		{
			return !cxl_SortOrderDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDOB.getValue(context);
		}
		public void setSortOrderDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDOB = null;
		public boolean getSortOrderICPImageIsNotNull()
		{
			return !cxl_SortOrderICPImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderICPImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderICPImage.getValue(context);
		}
		public void setSortOrderICPImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderICPImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderICPImage = null;
		public boolean getSortOrderNurseImageIsNotNull()
		{
			return !cxl_SortOrderNurseImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderNurseImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderNurseImage.getValue(context);
		}
		public void setSortOrderNurseImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderNurseImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderNurseImage = null;
		public boolean getSortOrderMedicImageIsNotNull()
		{
			return !cxl_SortOrderMedicImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderMedicImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderMedicImage.getValue(context);
		}
		public void setSortOrderMedicImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderMedicImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderMedicImage = null;
		public boolean getSortOrderPhysioImageIsNotNull()
		{
			return !cxl_SortOrderPhysioImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPhysioImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPhysioImage.getValue(context);
		}
		public void setSortOrderPhysioImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPhysioImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPhysioImage = null;
		public boolean getSortOrderAdminImageIsNotNull()
		{
			return !cxl_SortOrderAdminImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderAdminImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderAdminImage.getValue(context);
		}
		public void setSortOrderAdminImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderAdminImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderAdminImage = null;
		public boolean getAllowEditICPIsNotNull()
		{
			return !cxl_AllowEditICP.getValueIsNull(context);
		}
		public Boolean getAllowEditICP()
		{
			return (Boolean)cxl_AllowEditICP.getValue(context);
		}
		public void setAllowEditICP(Boolean value)
		{
			cxl_AllowEditICP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllowEditICP = null;
		public boolean getSortOrderTrackingTimeIsNotNull()
		{
			return !cxl_SortOrderTrackingTime.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderTrackingTime()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderTrackingTime.getValue(context);
		}
		public void setSortOrderTrackingTime(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderTrackingTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderTrackingTime = null;
		public boolean getWasTimerEnabledIsNotNull()
		{
			return !cxl_WasTimerEnabled.getValueIsNull(context);
		}
		public Boolean getWasTimerEnabled()
		{
			return (Boolean)cxl_WasTimerEnabled.getValue(context);
		}
		public void setWasTimerEnabled(Boolean value)
		{
			cxl_WasTimerEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasTimerEnabled = null;
		public boolean getSortOrderICABImageIsNotNull()
		{
			return !cxl_SortOrderICABImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderICABImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderICABImage.getValue(context);
		}
		public void setSortOrderICABImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderICABImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderICABImage = null;
		public boolean getUndoArrivalMessageBoxIdIsNotNull()
		{
			return !cxl_UndoArrivalMessageBoxId.getValueIsNull(context);
		}
		public Integer getUndoArrivalMessageBoxId()
		{
			return (Integer)cxl_UndoArrivalMessageBoxId.getValue(context);
		}
		public void setUndoArrivalMessageBoxId(Integer value)
		{
			cxl_UndoArrivalMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoArrivalMessageBoxId = null;
		public boolean getSortOrderOutcomeElectiveListImageIsNotNull()
		{
			return !cxl_SortOrderOutcomeElectiveListImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderOutcomeElectiveListImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderOutcomeElectiveListImage.getValue(context);
		}
		public void setSortOrderOutcomeElectiveListImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderOutcomeElectiveListImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderOutcomeElectiveListImage = null;
		public boolean getSortOrderBookingCommentsImageIsNotNull()
		{
			return !cxl_SortOrderBookingCommentsImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderBookingCommentsImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderBookingCommentsImage.getValue(context);
		}
		public void setSortOrderBookingCommentsImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderBookingCommentsImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderBookingCommentsImage = null;
		public boolean getSortOrderApptLetterPrintedImageIsNotNull()
		{
			return !cxl_SortOrderApptLetterPrintedImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderApptLetterPrintedImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderApptLetterPrintedImage.getValue(context);
		}
		public void setSortOrderApptLetterPrintedImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderApptLetterPrintedImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderApptLetterPrintedImage = null;
		public boolean getApptToCancelIsNotNull()
		{
			return !cxl_ApptToCancel.getValueIsNull(context);
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVo getApptToCancel()
		{
			return (ims.icp.vo.OutpatientEpisodeWithICPInfoVo)cxl_ApptToCancel.getValue(context);
		}
		public void setApptToCancel(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			cxl_ApptToCancel.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptToCancel = null;
		public boolean getUndoDNAMessageBoxIdIsNotNull()
		{
			return !cxl_UndoDNAMessageBoxId.getValueIsNull(context);
		}
		public Integer getUndoDNAMessageBoxId()
		{
			return (Integer)cxl_UndoDNAMessageBoxId.getValue(context);
		}
		public void setUndoDNAMessageBoxId(Integer value)
		{
			cxl_UndoDNAMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoDNAMessageBoxId = null;
		public boolean getUndoNotSeenMessageBoxIdIsNotNull()
		{
			return !cxl_UndoNotSeenMessageBoxId.getValueIsNull(context);
		}
		public Integer getUndoNotSeenMessageBoxId()
		{
			return (Integer)cxl_UndoNotSeenMessageBoxId.getValue(context);
		}
		public void setUndoNotSeenMessageBoxId(Integer value)
		{
			cxl_UndoNotSeenMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoNotSeenMessageBoxId = null;
		public boolean getUndoSeenMessageBoxIdIsNotNull()
		{
			return !cxl_UndoSeenMessageBoxId.getValueIsNull(context);
		}
		public Integer getUndoSeenMessageBoxId()
		{
			return (Integer)cxl_UndoSeenMessageBoxId.getValue(context);
		}
		public void setUndoSeenMessageBoxId(Integer value)
		{
			cxl_UndoSeenMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoSeenMessageBoxId = null;
		public boolean getUndoOutcomeMessageBoxIdIsNotNull()
		{
			return !cxl_UndoOutcomeMessageBoxId.getValueIsNull(context);
		}
		public Integer getUndoOutcomeMessageBoxId()
		{
			return (Integer)cxl_UndoOutcomeMessageBoxId.getValue(context);
		}
		public void setUndoOutcomeMessageBoxId(Integer value)
		{
			cxl_UndoOutcomeMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoOutcomeMessageBoxId = null;
		public boolean getSortOrderInterpreterRequiredImageIsNotNull()
		{
			return !cxl_SortOrderInterpreterRequiredImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderInterpreterRequiredImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderInterpreterRequiredImage.getValue(context);
		}
		public void setSortOrderInterpreterRequiredImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderInterpreterRequiredImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderInterpreterRequiredImage = null;
		public boolean getbSeenByPreOpIsNotNull()
		{
			return !cxl_bSeenByPreOp.getValueIsNull(context);
		}
		public Boolean getbSeenByPreOp()
		{
			return (Boolean)cxl_bSeenByPreOp.getValue(context);
		}
		public void setbSeenByPreOp(Boolean value)
		{
			cxl_bSeenByPreOp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bSeenByPreOp = null;
		public boolean getSortOrderLinkedAppoitmentsIsNotNull()
		{
			return !cxl_SortOrderLinkedAppoitments.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderLinkedAppoitments()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderLinkedAppoitments.getValue(context);
		}
		public void setSortOrderLinkedAppoitments(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderLinkedAppoitments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderLinkedAppoitments = null;
		public boolean getSelectedRowIsNotNull()
		{
			return !cxl_SelectedRow.getValueIsNull(context);
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVo getSelectedRow()
		{
			return (ims.icp.vo.OutpatientEpisodeWithICPInfoVo)cxl_SelectedRow.getValue(context);
		}
		public void setSelectedRow(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			cxl_SelectedRow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRow = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class OPClinicViewList implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Edit = 2;
				public static final int EditViewICPActions = 3;
				public static final int ADMIT = 4;
				public static final int DISCHARGE = 5;
				public static final int DNA = 6;
				public static final int ARRIVE = 7;
				public static final int SEEN_EDIT_NO_ICP = 8;
				public static final int SEEN_EDIT_ICP = 9;
				public static final int WAIT_FOR_NEXT = 10;
				public static final int SEEN_BY_ANAESTHETIST = 11;
				public static final int WITH_PHYSIOTHERAPY = 12;
				public static final int SEEN_BY_PREOP_NURSE = 13;
				public static final int WITH_DIAGNOSTIC_SERVICES = 14;
				public static final int VISIT_COMPLETE = 15;
				public static final int OUTCOME = 16;
				public static final int VIEW_EDIT_OUTCOME = 17;
				public static final int VIEW_EDIT_PRE_ASSESSMENT_OUTCOME = 18;
				public static final int CANCEL_REBOOK = 19;
				public static final int UNDO_DNA = 20;
				public static final int UNDO_ARRIVAL = 21;
				public static final int UNDO_NOT_SEEN = 22;
				public static final int UNDO_SEEN = 23;
				public static final int VIEW_REFERRAL_DETAIL = 24;
				public static final int VIEW_READ_ONLY_OUTCOME = 25;
			}
			public void disableAllOPClinicViewListMenuItems()
			{
				this.contextMenuOPClinicViewListAddItem.setEnabled(false);
				this.contextMenuOPClinicViewListEditItem.setEnabled(false);
				this.contextMenuOPClinicViewListEditViewICPActionsItem.setEnabled(false);
				this.contextMenuOPClinicViewListADMITItem.setEnabled(false);
				this.contextMenuOPClinicViewListDISCHARGEItem.setEnabled(false);
				this.contextMenuOPClinicViewListDNAItem.setEnabled(false);
				this.contextMenuOPClinicViewListARRIVEItem.setEnabled(false);
				this.contextMenuOPClinicViewListSEEN_EDIT_NO_ICPItem.setEnabled(false);
				this.contextMenuOPClinicViewListSEEN_EDIT_ICPItem.setEnabled(false);
				this.contextMenuOPClinicViewListWAIT_FOR_NEXTItem.setEnabled(false);
				this.contextMenuOPClinicViewListSEEN_BY_ANAESTHETISTItem.setEnabled(false);
				this.contextMenuOPClinicViewListWITH_PHYSIOTHERAPYItem.setEnabled(false);
				this.contextMenuOPClinicViewListSEEN_BY_PREOP_NURSEItem.setEnabled(false);
				this.contextMenuOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem.setEnabled(false);
				this.contextMenuOPClinicViewListVISIT_COMPLETEItem.setEnabled(false);
				this.contextMenuOPClinicViewListOUTCOMEItem.setEnabled(false);
				this.contextMenuOPClinicViewListVIEW_EDIT_OUTCOMEItem.setEnabled(false);
				this.contextMenuOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem.setEnabled(false);
				this.contextMenuOPClinicViewListCANCEL_REBOOKItem.setEnabled(false);
				this.contextMenuOPClinicViewListUNDO_DNAItem.setEnabled(false);
				this.contextMenuOPClinicViewListUNDO_ARRIVALItem.setEnabled(false);
				this.contextMenuOPClinicViewListUNDO_NOT_SEENItem.setEnabled(false);
				this.contextMenuOPClinicViewListUNDO_SEENItem.setEnabled(false);
				this.contextMenuOPClinicViewListVIEW_REFERRAL_DETAILItem.setEnabled(false);
				this.contextMenuOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem.setEnabled(false);
			}
			public void hideAllOPClinicViewListMenuItems()
			{
				this.contextMenuOPClinicViewListAddItem.setVisible(false);
				this.contextMenuOPClinicViewListEditItem.setVisible(false);
				this.contextMenuOPClinicViewListEditViewICPActionsItem.setVisible(false);
				this.contextMenuOPClinicViewListADMITItem.setVisible(false);
				this.contextMenuOPClinicViewListDISCHARGEItem.setVisible(false);
				this.contextMenuOPClinicViewListDNAItem.setVisible(false);
				this.contextMenuOPClinicViewListARRIVEItem.setVisible(false);
				this.contextMenuOPClinicViewListSEEN_EDIT_NO_ICPItem.setVisible(false);
				this.contextMenuOPClinicViewListSEEN_EDIT_ICPItem.setVisible(false);
				this.contextMenuOPClinicViewListWAIT_FOR_NEXTItem.setVisible(false);
				this.contextMenuOPClinicViewListSEEN_BY_ANAESTHETISTItem.setVisible(false);
				this.contextMenuOPClinicViewListWITH_PHYSIOTHERAPYItem.setVisible(false);
				this.contextMenuOPClinicViewListSEEN_BY_PREOP_NURSEItem.setVisible(false);
				this.contextMenuOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem.setVisible(false);
				this.contextMenuOPClinicViewListVISIT_COMPLETEItem.setVisible(false);
				this.contextMenuOPClinicViewListOUTCOMEItem.setVisible(false);
				this.contextMenuOPClinicViewListVIEW_EDIT_OUTCOMEItem.setVisible(false);
				this.contextMenuOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem.setVisible(false);
				this.contextMenuOPClinicViewListCANCEL_REBOOKItem.setVisible(false);
				this.contextMenuOPClinicViewListUNDO_DNAItem.setVisible(false);
				this.contextMenuOPClinicViewListUNDO_ARRIVALItem.setVisible(false);
				this.contextMenuOPClinicViewListUNDO_NOT_SEENItem.setVisible(false);
				this.contextMenuOPClinicViewListUNDO_SEENItem.setVisible(false);
				this.contextMenuOPClinicViewListVIEW_REFERRAL_DETAILItem.setVisible(false);
				this.contextMenuOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem.setVisible(false);
			}
			private Menu contextMenuOPClinicViewList;
			public MenuItem getOPClinicViewListAddItem()
			{
				return this.contextMenuOPClinicViewListAddItem;
			}
			private MenuItem contextMenuOPClinicViewListAddItem;
			public MenuItem getOPClinicViewListEditItem()
			{
				return this.contextMenuOPClinicViewListEditItem;
			}
			private MenuItem contextMenuOPClinicViewListEditItem;
			public MenuItem getOPClinicViewListEditViewICPActionsItem()
			{
				return this.contextMenuOPClinicViewListEditViewICPActionsItem;
			}
			private MenuItem contextMenuOPClinicViewListEditViewICPActionsItem;
			public ReadOnlyMenuItem getOPClinicViewListADMITItem()
			{
				return this.contextMenuOPClinicViewListADMITItem;
			}
			private MenuItem contextMenuOPClinicViewListADMITItem;
			public ReadOnlyMenuItem getOPClinicViewListDISCHARGEItem()
			{
				return this.contextMenuOPClinicViewListDISCHARGEItem;
			}
			private MenuItem contextMenuOPClinicViewListDISCHARGEItem;
			public ReadOnlyMenuItem getOPClinicViewListDNAItem()
			{
				return this.contextMenuOPClinicViewListDNAItem;
			}
			private MenuItem contextMenuOPClinicViewListDNAItem;
			public ReadOnlyMenuItem getOPClinicViewListARRIVEItem()
			{
				return this.contextMenuOPClinicViewListARRIVEItem;
			}
			private MenuItem contextMenuOPClinicViewListARRIVEItem;
			public ReadOnlyMenuItem getOPClinicViewListSEEN_EDIT_NO_ICPItem()
			{
				return this.contextMenuOPClinicViewListSEEN_EDIT_NO_ICPItem;
			}
			private MenuItem contextMenuOPClinicViewListSEEN_EDIT_NO_ICPItem;
			public ReadOnlyMenuItem getOPClinicViewListSEEN_EDIT_ICPItem()
			{
				return this.contextMenuOPClinicViewListSEEN_EDIT_ICPItem;
			}
			private MenuItem contextMenuOPClinicViewListSEEN_EDIT_ICPItem;
			public ReadOnlyMenuItem getOPClinicViewListWAIT_FOR_NEXTItem()
			{
				return this.contextMenuOPClinicViewListWAIT_FOR_NEXTItem;
			}
			private MenuItem contextMenuOPClinicViewListWAIT_FOR_NEXTItem;
			public ReadOnlyMenuItem getOPClinicViewListSEEN_BY_ANAESTHETISTItem()
			{
				return this.contextMenuOPClinicViewListSEEN_BY_ANAESTHETISTItem;
			}
			private MenuItem contextMenuOPClinicViewListSEEN_BY_ANAESTHETISTItem;
			public ReadOnlyMenuItem getOPClinicViewListWITH_PHYSIOTHERAPYItem()
			{
				return this.contextMenuOPClinicViewListWITH_PHYSIOTHERAPYItem;
			}
			private MenuItem contextMenuOPClinicViewListWITH_PHYSIOTHERAPYItem;
			public ReadOnlyMenuItem getOPClinicViewListSEEN_BY_PREOP_NURSEItem()
			{
				return this.contextMenuOPClinicViewListSEEN_BY_PREOP_NURSEItem;
			}
			private MenuItem contextMenuOPClinicViewListSEEN_BY_PREOP_NURSEItem;
			public ReadOnlyMenuItem getOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem()
			{
				return this.contextMenuOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem;
			}
			private MenuItem contextMenuOPClinicViewListWITH_DIAGNOSTIC_SERVICESItem;
			public ReadOnlyMenuItem getOPClinicViewListVISIT_COMPLETEItem()
			{
				return this.contextMenuOPClinicViewListVISIT_COMPLETEItem;
			}
			private MenuItem contextMenuOPClinicViewListVISIT_COMPLETEItem;
			public ReadOnlyMenuItem getOPClinicViewListOUTCOMEItem()
			{
				return this.contextMenuOPClinicViewListOUTCOMEItem;
			}
			private MenuItem contextMenuOPClinicViewListOUTCOMEItem;
			public ReadOnlyMenuItem getOPClinicViewListVIEW_EDIT_OUTCOMEItem()
			{
				return this.contextMenuOPClinicViewListVIEW_EDIT_OUTCOMEItem;
			}
			private MenuItem contextMenuOPClinicViewListVIEW_EDIT_OUTCOMEItem;
			public ReadOnlyMenuItem getOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem()
			{
				return this.contextMenuOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem;
			}
			private MenuItem contextMenuOPClinicViewListVIEW_EDIT_PRE_ASSESSMENT_OUTCOMEItem;
			public ReadOnlyMenuItem getOPClinicViewListCANCEL_REBOOKItem()
			{
				return this.contextMenuOPClinicViewListCANCEL_REBOOKItem;
			}
			private MenuItem contextMenuOPClinicViewListCANCEL_REBOOKItem;
			public ReadOnlyMenuItem getOPClinicViewListUNDO_DNAItem()
			{
				return this.contextMenuOPClinicViewListUNDO_DNAItem;
			}
			private MenuItem contextMenuOPClinicViewListUNDO_DNAItem;
			public ReadOnlyMenuItem getOPClinicViewListUNDO_ARRIVALItem()
			{
				return this.contextMenuOPClinicViewListUNDO_ARRIVALItem;
			}
			private MenuItem contextMenuOPClinicViewListUNDO_ARRIVALItem;
			public ReadOnlyMenuItem getOPClinicViewListUNDO_NOT_SEENItem()
			{
				return this.contextMenuOPClinicViewListUNDO_NOT_SEENItem;
			}
			private MenuItem contextMenuOPClinicViewListUNDO_NOT_SEENItem;
			public ReadOnlyMenuItem getOPClinicViewListUNDO_SEENItem()
			{
				return this.contextMenuOPClinicViewListUNDO_SEENItem;
			}
			private MenuItem contextMenuOPClinicViewListUNDO_SEENItem;
			public ReadOnlyMenuItem getOPClinicViewListVIEW_REFERRAL_DETAILItem()
			{
				return this.contextMenuOPClinicViewListVIEW_REFERRAL_DETAILItem;
			}
			private MenuItem contextMenuOPClinicViewListVIEW_REFERRAL_DETAILItem;
			public ReadOnlyMenuItem getOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem()
			{
				return this.contextMenuOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem;
			}
			private MenuItem contextMenuOPClinicViewListVIEW_READ_ONLY_OUTCOMEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer timerSearch;
		public Timer gettimerSearch()
		{
			return timerSearch;
		}
		public void enableAll()
		{
			timerSearch.setEnabled(true);
		}
		public void disableAll()
		{
			timerSearch.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[259];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ID", "ID_Location");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-NAME", "Name");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ISACTIVE", "IsActive");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-TYPE", "Type");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-WASLETTERPRINTED", "WasLetterPrinted");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COULDNOTBESEEN", "Couldnotbeseen");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CAREPROFESSIONALREADYTOSEE", "CareProfessionalReadyToSee");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CAREPROFESSIONALNOTREADYTOSEE", "CareProfessionalNotReadyToSee");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-SESSION", "Session");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ID", "ID_Location");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-NAME", "Name");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ISACTIVE", "IsActive");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-TYPE", "Type");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPROVIDERCANCELLATIONS", "NumProviderCancellations");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASPRINTED", "WasPrinted");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPATIENTCANCELLATIONS", "NumPatientCancellations");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTAPPTKPIDATE", "FirstApptKPIDate");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-RTTBREACHKPIDATE", "RTTBreachKPIDate");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REASONFORBREACHINGFIRSTAPPTKPI", "ReasonForBreachingFirstApptKPI");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTSFORBREACHINGFIRSTAPPTKPI", "CommentsForBreachingFirstApptKPI");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DONOTMOVE", "DoNotMove");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISFLEXIBLEAPPOINTMENT", "IsFlexibleAppointment");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISWARDATTENDANCE", "IsWardAttendance");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTCONSULTATIONACTIVITY", "FirstConsultationActivity");
			fields[220] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ELECTIVELIST", "ElectiveList");
			fields[221] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATIENTCATEGORY", "PatientCategory");
			fields[222] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTBOOKEDONSAMEDAY", "ApptBookedOnSameDay");
			fields[223] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASAPPTCOMMUNICATED", "WasApptCommunicated");
			fields[224] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISDISPLACED", "IsDisplaced");
			fields[225] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMEDATETIME", "OutcomeDateTime");
			fields[226] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[227] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientICPRecord", "BO-1100100000-ID", "ID_PatientICP");
			fields[228] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[229] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[230] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "AppointmentTime");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-HASELECTIVELIST", "HasElectiveList");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-OUTCOME", "Outcome");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-CASENOTESPULLED", "CaseNotesPulled");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-OUTCOMEREASON", "OutcomeReason");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-WASPRINTED", "WasPrinted");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-OUTCOMEHASRTTCLOCKIMPACT", "OutcomeHasRTTClockImpact");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-ELECTIVELIST", "ElectiveList");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPTBOOKEDONSAMEDAY", "ApptBookedOnSameDay");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "AppointmentTime");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-HASELECTIVELIST", "HasElectiveList");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-OUTCOME", "Outcome");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-CASENOTESPULLED", "CaseNotesPulled");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-OUTCOMEREASON", "OutcomeReason");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-WASPRINTED", "WasPrinted");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-OUTCOMEHASRTTCLOCKIMPACT", "OutcomeHasRTTClockImpact");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-ELECTIVELIST", "ElectiveList");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicListWithICPActions.__internal_x_context__SelectedRow_" + componentIdentifier, "BO-1055100007-APPTBOOKEDONSAMEDAY", "ApptBookedOnSameDay");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
