//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.handovercountsintraopdialog;

import java.util.ArrayList;

import ims.clinical.vo.HandoverCountsIntraOpVo;
import ims.clinical.vo.IntraOpPlannedProcedureVo;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.clinical.vo.lookups.HandoverCountStatusIntraOp;
import ims.core.vo.NurseLiteVo;
import ims.core.vo.NurseLiteVoCollection;
import ims.core.vo.PatientProcedureMinVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		loadProcedures();
		open();
	}
	
	private void initialise()
	{
		if (form.getGlobalContext().Clinical.getIntraOpCaseStaffDetailRefVo() == null)
		{
			engine.showMessage("There are no case staff configured, Please create a record on the Case Details tab");
			engine.close(DialogResult.CANCEL);
			return;
		}
		
		NurseLiteVoCollection scrubPractitioners = domain.listCaseScrubPractitioners(form.getGlobalContext().Clinical.getIntraOpCaseStaffDetailRefVo());
		NurseLiteVoCollection circulators = domain.listCaseCirculatorScrubNurses(form.getGlobalContext().Clinical.getIntraOpCaseStaffDetailRefVo());
		
		for(NurseLiteVo scrubPractitioner : scrubPractitioners)
		{
			form.cmbScrubPractitioner().newRow(scrubPractitioner, scrubPractitioner.getMos().toString());
		}
		
		for(NurseLiteVo circulator : circulators)
		{
			form.cmbCirculator().newRow(circulator, circulator.getMos().toString());
		}
	}

	private void loadProcedures()
	{
		IntraOpPlannedProcedureVoCollection items = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (items != null && items.size() >= 1)
		{
			for (IntraOpPlannedProcedureVo plannedProc : items)
			{
				if (plannedProc.getPlannedProcedureIsNotNull() && plannedProc.getPlannedProcedure().getProcedureIsNotNull())
					form.cmbProcedure().newRow(plannedProc.getPlannedProcedure(), plannedProc.getPlannedProcedure().getProcedure().getProcedureName());
			}
		}
		else
		{
			engine.showMessage("A Planned Procedure must be recorded");
			engine.close(DialogResult.CANCEL);
		}
	}

	private void open()
	{
		HandoverCountsIntraOpVo handover = form.getGlobalContext().Clinical.getHandoverCountsIntraOpVo();
		populateScreenFromData(handover);
		if(handover == null)
		{
			defaultSelectedProcedure();
		}
		//WDEV-22417
		updateControlState();
	}

	private void defaultSelectedProcedure()
	{
		if(form.cmbProcedure().getValues().size() == 1)
		{
			form.cmbProcedure().setValue((PatientProcedureMinVo) form.cmbProcedure().getValues().get(0));
		}
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		HandoverCountsIntraOpVo handover = populateDataFromScreen(form.getGlobalContext().Clinical.getHandoverCountsIntraOpVo());
		handover.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		
		String[] errors = handover.validate(validateUI());

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.saveHandoverIntraOp(handover);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Clinical.setHandoverCountsIntraOpVo(domain.getHandoverIntraOp(handover));
			engine.close(DialogResult.CANCEL);
			return;
		}
		
		engine.close(DialogResult.OK);
	}
	
	private String[] validateUI()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();

		if (form.cmbIncorrectCountStatus().getVisible() && form.cmbIncorrectCountStatus().getValue() == null)
		{
			uiErrors.add("Incorrect count status is mandatory");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	//WDEV-22417
	@Override
	protected void onCmbCountStatusValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	private void updateControlState()
	{
		form.lblIncorrectCountStatus().setVisible(false);
		form.cmbIncorrectCountStatus().setVisible(false);
		
		if(form.cmbCountStatus().getValue() != null)
		{
			if(form.cmbCountStatus().getValue().equals(HandoverCountStatusIntraOp.INCORRECT))
			{
				form.lblIncorrectCountStatus().setVisible(true);
				form.cmbIncorrectCountStatus().setVisible(true);
			}
		}
		//clear the incorrect selection 
		if(!form.cmbIncorrectCountStatus().getVisible())
		{
			form.cmbIncorrectCountStatus().setValue(null);
		}
	}
}
