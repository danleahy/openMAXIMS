//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.prescriptiondialog;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		RefMan = new RefManContext(context);
		Emergency = new EmergencyContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}
		public void setCurrentClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cx_CoreCurrentClinicalContact.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");
		public boolean getEpisodeofCareShortIsNotNull()
		{
			return !cx_CoreEpisodeofCareShort.getValueIsNull(context);
		}
		public ims.core.vo.EpisodeofCareShortVo getEpisodeofCareShort()
		{
			return (ims.core.vo.EpisodeofCareShortVo)cx_CoreEpisodeofCareShort.getValue(context);
		}
		public void setEpisodeofCareShort(ims.core.vo.EpisodeofCareShortVo value)
		{
			cx_CoreEpisodeofCareShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreEpisodeofCareShort = new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		private ims.framework.Context context;
	}
	public final class RefManContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private RefManContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPrescriptionMedicationIsNotNull()
		{
			return !cx_RefManPrescriptionMedication.getValueIsNull(context);
		}
		public ims.core.vo.PatientMedicationLiteVo getPrescriptionMedication()
		{
			return (ims.core.vo.PatientMedicationLiteVo)cx_RefManPrescriptionMedication.getValue(context);
		}
		public void setPrescriptionMedication(ims.core.vo.PatientMedicationLiteVo value)
		{
			cx_RefManPrescriptionMedication.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManPrescriptionMedication = new ims.framework.ContextVariable("RefMan.PrescriptionMedication", "_cv_RefMan.PrescriptionMedication");
		public boolean getDrugsAlreadyAddedToPrescriptionIsNotNull()
		{
			return !cx_RefManDrugsAlreadyAddedToPrescription.getValueIsNull(context);
		}
		public String getDrugsAlreadyAddedToPrescription()
		{
			return (String)cx_RefManDrugsAlreadyAddedToPrescription.getValue(context);
		}
		public void setDrugsAlreadyAddedToPrescription(String value)
		{
			cx_RefManDrugsAlreadyAddedToPrescription.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManDrugsAlreadyAddedToPrescription = new ims.framework.ContextVariable("RefMan.DrugsAlreadyAddedToPrescription", "_cv_RefMan.DrugsAlreadyAddedToPrescription");

		private ims.framework.Context context;
	}
	public final class EmergencyContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private EmergencyContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPrescriptionDrugIsNotNull()
		{
			return !cx_EmergencyPrescriptionDrug.getValueIsNull(context);
		}
		public ims.core.vo.PatientMedicationLiteVo getPrescriptionDrug()
		{
			return (ims.core.vo.PatientMedicationLiteVo)cx_EmergencyPrescriptionDrug.getValue(context);
		}
		public void setPrescriptionDrug(ims.core.vo.PatientMedicationLiteVo value)
		{
			cx_EmergencyPrescriptionDrug.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_EmergencyPrescriptionDrug = new ims.framework.ContextVariable("Emergency.PrescriptionDrug", "_cv_Emergency.PrescriptionDrug");
		public boolean getMedsAlreadyAddedInPrescriptionIsNotNull()
		{
			return !cx_EmergencyMedsAlreadyAddedInPrescription.getValueIsNull(context);
		}
		public java.util.ArrayList<Integer> getMedsAlreadyAddedInPrescription()
		{
			return (java.util.ArrayList<Integer>)cx_EmergencyMedsAlreadyAddedInPrescription.getValue(context);
		}
		public void setMedsAlreadyAddedInPrescription(java.util.ArrayList<Integer> value)
		{
			cx_EmergencyMedsAlreadyAddedInPrescription.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_EmergencyMedsAlreadyAddedInPrescription = new ims.framework.ContextVariable("Emergency.MedsAlreadyAddedInPrescription", "_cv_Emergency.MedsAlreadyAddedInPrescription");

		private ims.framework.Context context;
	}

	public CoreContext Core;
	public RefManContext RefMan;
	public EmergencyContext Emergency;
}
