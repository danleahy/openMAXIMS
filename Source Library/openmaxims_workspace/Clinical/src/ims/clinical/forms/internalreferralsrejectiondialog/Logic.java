//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.internalreferralsrejectiondialog;

import ims.clinical.vo.ClinicalReferralForRejectionVo;
import ims.clinical.vo.ClinicalReferralNotesVo;
import ims.clinical.vo.ClinicalReferralNotesVoCollection;
import ims.clinical.vo.ClinicalReferralStatusVo;
import ims.clinical.vo.ClinicalReferralStatusVoCollection;
import ims.clinical.vo.PatientDocumentForClinicalReferralVo;
import ims.clinical.vo.lookups.ClinicalReferralNoteType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DocumentCategoryConfigShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.InternalReferralStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
private static final long serialVersionUID = 1L;
	
	private static final int INTERNAL_REFERRAL_REJECTION_IMSID = 350; 
	private static final String INTERNAL_REFERRAL_REJECTION_DOCUMENT_NAME = "Internal Referral Rejection";
	private static final String CLINICAL_REFERRAL_SEED = "ClinicalReferrals_id";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void open() 
	{
		form.getLocalContext().setClinicalReferral(domain.getClinicalReferral(form.getGlobalContext().Clinical.getClinicalReferralRef()));
	}

	private void initialise() 
	{
		Object user = domain.getMosUser();
		
		if(user instanceof MemberOfStaffLiteVo)
		{
			MemberOfStaffLiteVo mosUser = (MemberOfStaffLiteVo) user;
			form.qmbRecordingUser().newRow(mosUser, mosUser.getIMosName());
			
			form.qmbRecordingUser().setValue(mosUser);
		}
		
		form.dtimRecordingDate().setValue(new DateTime());
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}

	private boolean save() 
	{
		ClinicalReferralForRejectionVo record = populateDataFromScreen(form.getLocalContext().getClinicalReferral());
		
		String[] errors = record.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		//wdev-20960
		try 
		{
			record = domain.saveClinicalreferral(record);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		
		
		//-------------
			
		PatientDocumentForClinicalReferralVo document = createPatientDocument();
		
		if(document == null)
			return false;
		
		errors = document.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			//domain.save(record, document);
			domain.saveDocument(document);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		
		return true;
	}

	private String[] validateUIRules() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.cmbRejectionReason().getValue() == null)
		{
			uiErrors.add("Rejection Reason is mandatory.");					
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private PatientDocumentForClinicalReferralVo createPatientDocument() 
	{
		String fileName = createAndUploadDocument();
		
		if(fileName != null)
		{
			PatientDocumentForClinicalReferralVo rejectionDocument = new PatientDocumentForClinicalReferralVo();
			
			rejectionDocument.setName(INTERNAL_REFERRAL_REJECTION_DOCUMENT_NAME);
			rejectionDocument.setPatient(form.getGlobalContext().Core.getPatientShort());
			rejectionDocument.setCreationType(DocumentCreationType.GENERATED);
			rejectionDocument.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
			rejectionDocument.setCategory(DocumentCategory.REJECTIONS);
			
			rejectionDocument.setRecordingUser(form.qmbRecordingUser().getValue());
			rejectionDocument.setRecordingDateTime(new DateTime());
		
			rejectionDocument.setDocumentDate(new Date());
			
			ServerDocumentVo doc = new ServerDocumentVo();
			doc.setFileName(fileName);
			doc.setFileType(FileType.PDF);
			
			rejectionDocument.setServerDocument(doc);
			
			return rejectionDocument;
		}
		
		return null;
	}

	private ClinicalReferralForRejectionVo populateDataFromScreen(ClinicalReferralForRejectionVo clinicalReferral) 
	{
		if(clinicalReferral instanceof ClinicalReferralForRejectionVo)
		{
			clinicalReferral = (ClinicalReferralForRejectionVo) clinicalReferral.clone();
			
			//wdev-20312
			RecordingUserInformationVo recInfo = populateRecordingUserInfo();
			
			ClinicalReferralNotesVo note = populateNoteDataFromScreen(recInfo);
			
			if( clinicalReferral.getClinicalReferralNotes() == null)
				clinicalReferral.setClinicalReferralNotes(new ClinicalReferralNotesVoCollection()); 
			clinicalReferral.getClinicalReferralNotes().add(note);

			//----------
			
			ClinicalReferralStatusVo status = createStatus();
			clinicalReferral.setCurrentReferralStatus(status);
			
			if(clinicalReferral.getHistoryOfReferralStatus() == null)
			{
				clinicalReferral.setHistoryOfReferralStatus(new ClinicalReferralStatusVoCollection());
			}
			
			clinicalReferral.getHistoryOfReferralStatus().add(status);
			
			clinicalReferral.setAcknowledgeRejection(Boolean.FALSE);
		}
		
		return clinicalReferral;
	}
	//wdev-20312
	private RecordingUserInformationVo populateRecordingUserInfo()
	{
		RecordingUserInformationVo recInfoVo = new RecordingUserInformationVo();
		recInfoVo.setRecordingUser(getRecordingUser());
		recInfoVo.setRecordingDateTime(new DateTime());
		return recInfoVo;
	}
	private MemberOfStaffLiteVo getRecordingUser()
	{
		Object user = domain.getMosUser();
		if (user == null) 
			return null;
		if (user instanceof HcpLiteVo)
			return (((HcpLiteVo) user).getMos());
		else if (user instanceof MemberOfStaffLiteVo)
			return ((MemberOfStaffLiteVo) user);
		return null;	
	}
	private ClinicalReferralNotesVo populateNoteDataFromScreen(RecordingUserInformationVo recordingInfoVo)
	{
		ClinicalReferralNotesVo note = new ClinicalReferralNotesVo();
		String noteRejection = new String();
		
		if( form.cmbRejectionReason().getValue() != null  )
		{
			noteRejection += "Rejection Reason: " +  form.cmbRejectionReason().getValue().getIItemText() ;
		}
		
		if( form.txtRejectionReason().getValue() != null && !form.txtRejectionReason().getValue().equals(""))
		{
			if( form.cmbRejectionReason().getValue() != null)
				noteRejection += " , Rejection Reason Comment: " + form.txtRejectionReason().getValue();
			else
				noteRejection += " Rejection Reason Comment: " + form.txtRejectionReason().getValue();
		}
		//else
		//{
		//	note.setNote(form.cmbRejectionReason().getValue() != null ? form.cmbRejectionReason().getValue().getIItemText():null);
		//}
		note.setNote(noteRejection);
		note.setNoteType(ClinicalReferralNoteType.REFERRAL_REJECTION);
		note.setRecordingInfo(recordingInfoVo);

		return note;
	}
	//--------------

	private ClinicalReferralStatusVo createStatus() 
	{
		ClinicalReferralStatusVo status = new ClinicalReferralStatusVo();
		
		RecordingUserInformationVo userInfo = new RecordingUserInformationVo();
		userInfo.setRecordingUser(form.qmbRecordingUser().getValue());
		userInfo.setRecordingDateTime(form.dtimRecordingDate().getValue());
		
		status.setRecordingInfo(userInfo);
		
		status.setReferralStatus(InternalReferralStatus.REJECTED);
		
		status.setRejectionReason(form.cmbRejectionReason().getValue());
		status.setRejectionReasonText(form.txtRejectionReason().getValue());
		
		return status;
	}
	
	private byte[] buildRejectionReport() 
	{
		if(!validateReportConfigFlags())
			return null;
		
		String queryServerUrl = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String reportServerUrl = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		Object[] obj = domain.getSystemReportAndTemplate(INTERNAL_REFERRAL_REJECTION_IMSID);
		
		QueryBuilderClient client = new QueryBuilderClient(queryServerUrl, engine.getSessionId()); 
		
		client.addSeed(new SeedValue(CLINICAL_REFERRAL_SEED, form.getGlobalContext().Clinical.getClinicalReferralRef().getID_ClinicalReferrals(), Integer.class));	
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return null;
		}

		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return null;
		}
		
		byte[] report = null;
		
		try
		{	
			report = client.buildReport((String)obj[0], (String)obj[1], reportServerUrl, QueryBuilderClient.PDF, "", 1);
		}
		catch (QueryBuilderClientException ex)
		{
			engine.showMessage("Error creating report: " + ex.getMessage());
			return null;
		}	
		
		return report;
	}
	
	private boolean validateReportConfigFlags() 
	{
		String queryServerUrl = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String reportServerUrl = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		ArrayList<String> errors = new ArrayList<String>();
		
		if(queryServerUrl == null || queryServerUrl.length() == 0 || queryServerUrl.equals(ConfigFlag.GEN.QUERY_SERVER_URL.getDefaultValue()))
		{
			errors.add("The config flag QUERY_SERVER_URL is not set!");
		}
		
		if(reportServerUrl == null || reportServerUrl.length() == 0 || reportServerUrl.equals(ConfigFlag.GEN.REPORT_SERVER_URL.getDefaultValue()))
		{
			errors.add("The config flag REPORT_SERVER_URL is not set !");
		}
		
		if(errors.size() == 0)
			return true;
		
		engine.showMessage(getErrors(errors.toArray(new String[errors.size()])), "Errors", MessageButtons.OK, MessageIcon.ERROR);
		
		return false;
	}
	
	private String getErrors(String[] uiErrors) 
	{
		if(uiErrors == null || uiErrors.length == 0)
			return "";
		
		String errors = "";
		
		for(int i=0; i<uiErrors.length; i++)
		{
			if(uiErrors[i] == null)
				continue;
			
			errors += uiErrors[i] + "\n";
		}
		
		return errors;
	}
	
	private String createAndUploadDocument() 
	{
		byte[] report = buildRejectionReport();
		
		if(report != null)
		{
			String pdfFileName = generateName() + ".pdf";
			
			try 
			{								
				engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), report, pdfFileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "\\");
			}
			catch (Exception e)
			{
				engine.showMessage(e.getMessage());
				return null;
			}
			
			int year  = new DateTime().getDate().getYear();
			int month = new DateTime().getDate().getMonth();
			int day   = new DateTime().getDate().getDay();
			
			if(pdfFileName != null && pdfFileName.length() > 0)
				return year + "\\" + month + "\\" + day + "\\" + pdfFileName;
		}
		
		return null;
	}
	
	private String generateName()
	{
		String str = "";

		try
		{
			// Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			// Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			// Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
}
