//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.cliniclistactionsummary;

import ims.admin.vo.enums.ElectiveListDetails;
import ims.RefMan.vo.CatsReferralBreachDatesVo;
import ims.RefMan.vo.FutureAppointmentStatusVo;
import ims.RefMan.vo.FutureAppointmentStatusVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.IPandOPSearchCriteriaVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVo;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection;
import ims.scheduling.vo.AppointmentOutcomeActionVo;
import ims.scheduling.vo.AppointmentOutcomeActionVoCollection;
import ims.scheduling.vo.BookingAppointmentOutcomeActionsToSaveVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.FutureAppointmentListVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.enums.AppointmentOutcomeAction;
import ims.scheduling.vo.lookups.AppointmentAction;
import ims.scheduling.vo.lookups.FutureAppointmentStatus;
import ims.scheduling.vo.lookups.OutcomeAction;
import ims.scheduling.vo.lookups.RequestToSchedule;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int ICP_COL_INDEX = 0;
	private static final int CAB_COL_INDEX = 1;
	private static final int HOSP_NUM_COL_INDEX = 2;
	private static final int SURNAME_COL_INDEX = 3;
	private static final int FORENAME_COL_INDEX = 4;
	private static final int SEX_COL_INDEX = 5;
	private static final int DOB_COL_INDEX = 6;
	private static final int CONSULTANT_COL_INDEX = 7;
	private static final int APPT_TIME_COL_INDEX = 8;
	private static final int OUTCOME_COL_INDEX = 9;
	private static final int OUTCOME_COMMENTS_COL_INDEX = 10;
	private static final int WL_COL_INDEX = 11;
	private static final int PL_COL_INDEX = 13;
	private static final int FUTUREAPPT_COL_INDEX = 14;
	private static final int FUTUREAPPT_DATE_COL_INDEX = 15;
	private static final int INTER_PROVIDER_TRANSFER_COL_INDEX = 16; //WDEV-20799
	private static final int REQUEST_FOR_SERVICE_COL_INDEX = 17; //WDEV-20799
	private static final int TRANSFER_COL_INDEX = 18;
	private static final int APP_LETTER_PRINTED = 19;
	

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		refreshSearchCriteria(form.getGlobalContext().Clinical.getClinicListActionSummarySearchCriteria());
	}

	private void refreshSearchCriteria(IPandOPSearchCriteriaVo searchCriteria)
	{
		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue((LocationLiteVo) searchCriteria.getHospital());
		form.dteDate().setValue(searchCriteria.getDate());

		if (form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(searchCriteria.getClinicIsNotNull());
		
		if (searchCriteria.getServiceIsNotNull())
		{
			form.qmbService().newRow(searchCriteria.getService(), searchCriteria.getService().getServiceName());
			form.qmbService().setValue(searchCriteria.getService());
		}

		form.cmbClinic().setValue((SessionShortVo) searchCriteria.getClinic());
		form.cmbAppOutcome().setValue(searchCriteria.getApptOutcome());
		form.cmbAction().setValue(searchCriteria.getAppointmentAction());
		form.chkComplete().setValue(searchCriteria.getComplete());
		form.dteFrom().setValue(searchCriteria.getApptDateFrom());
		form.dteTo().setValue(searchCriteria.getApptDateTo());
		
		if (searchCriteria.getListOwners() != null && searchCriteria.getListOwners().size() > 0)
		{
			if (searchCriteria.getListOwners().size() == 1)
			{
				form.ccListOwner().setValue(searchCriteria.getListOwners().get(0));
			}
			else
			{
				form.getGlobalContext().Scheduling.setSelectedHCPs(searchCriteria.getListOwners());
				populateListOwnersLabel(searchCriteria.getListOwners());

			}
		}
		search();

	}
	//WDEV-19322
	private void initialiseDynamicGrid(boolean showFuApptDateCol, boolean showCommentsCol) //WDEV-20799
	{
		form.dynGrdResults().clear();
		form.dynGrdResults().setSelectable(true);
		form.dynGrdResults().setHeaderHeight(44);
		form.dynGrdResults().setHeaderMaxHeight(45);
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
			
		DynamicGridColumn column = form.dynGrdResults().getColumns().newColumn("   ", ICP_COL_INDEX);
		column.setWidth(23);
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dynGrdResults().getColumns().newColumn("   ", CAB_COL_INDEX);
		column.setWidth(23);
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dynGrdResults().getColumns().newColumn(dispIdType.getText(), HOSP_NUM_COL_INDEX);
		column.setWidth(90);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dynGrdResults().getColumns().newColumn("Surname", SURNAME_COL_INDEX);
		column.setWidth(showFuApptDateCol ? 75 : 95);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dynGrdResults().getColumns().newColumn("Forename", FORENAME_COL_INDEX);
		column.setWidth(showFuApptDateCol ? 75 : 95);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dynGrdResults().getColumns().newColumn("Sex", SEX_COL_INDEX);
		column.setWidth(40);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dynGrdResults().getColumns().newColumn("D.O.B.", DOB_COL_INDEX);
		column.setWidth(65);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dynGrdResults().getColumns().newColumn("Consultant", CONSULTANT_COL_INDEX);
		column.setWidth(showFuApptDateCol ? 80 : 105);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dynGrdResults().getColumns().newColumn("Appt.\nTime", APPT_TIME_COL_INDEX);
		column.setWidth(45);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		//WDEV-19381
		column = form.dynGrdResults().getColumns().newColumn("", APP_LETTER_PRINTED);
		column.setWidth(23);
		column.setHeaderTooltip("Appointment Letter Printed");
		column.setHeaderAlignment(Alignment.CENTER);
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dynGrdResults().getColumns().newColumn("Outcome", OUTCOME_COL_INDEX);
		column.setWidth(showCommentsCol ? 70 : 93);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		if (showCommentsCol)
		{	
			DynamicGridColumn tempColumn = form.dynGrdResults().getColumns().newColumn("   ", OUTCOME_COMMENTS_COL_INDEX);
			tempColumn.setWidth(23);
			tempColumn.setCanGrow(false);
			tempColumn.setAlignment(Alignment.CENTER);
			tempColumn.setSortMode(SortMode.MANUAL);
		}
		
		column = form.dynGrdResults().getColumns().newColumn(" W ", WL_COL_INDEX);
		column.setWidth(23);
		column.setHeaderTooltip("Waiting List");
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.NONE);;
		
		column = form.dynGrdResults().getColumns().newColumn(" P ", PL_COL_INDEX);
		column.setWidth(23);
		column.setHeaderTooltip("Planned List");
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.NONE);
		
		column = form.dynGrdResults().getColumns().newColumn(" F ", FUTUREAPPT_COL_INDEX);
		column.setWidth(23);
		column.setHeaderTooltip("Future Appointment");
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.NONE);
		
		if (showFuApptDateCol)
		{
			DynamicGridColumn tempColumn = form.dynGrdResults().getColumns().newColumn("Appt. Req.\nBy Date", FUTUREAPPT_DATE_COL_INDEX);
			tempColumn.setWidth(70);
			tempColumn.setCanGrow(true);
			tempColumn.setSortMode(SortMode.MANUAL);
		}				
		column = form.dynGrdResults().getColumns().newColumn(" I ", INTER_PROVIDER_TRANSFER_COL_INDEX);
		column.setWidth(23);
		column.setHeaderTooltip("Inter Provider Transfer");
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.NONE);
		
		column = form.dynGrdResults().getColumns().newColumn(" R ", REQUEST_FOR_SERVICE_COL_INDEX);
		column.setWidth(23);
		column.setHeaderTooltip("Request for Service");
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.NONE);
		
		column = form.dynGrdResults().getColumns().newColumn(" T ", TRANSFER_COL_INDEX);
		column.setWidth(23);
		column.setHeaderTooltip("Transfer Of Care");
		column.setCanGrow(false);
		column.setAlignment(Alignment.CENTER);
		column.setSortMode(SortMode.NONE);
		
	}	
	private void initialise()
	{
		form.dteDate().setValue(new Date());
		form.ccListOwner().initialize(MosType.HCP);
		form.lblListOwnersSel().setValue(null);
		form.lblListOwnersSel().setTooltip(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(form.getGlobalContext().Clinical.getClinicListActionSummarySearchCriteriaIsNotNull() ? form.getGlobalContext().Clinical.getClinicListActionSummarySearchCriteria().getListOwners() : null);
		if (form.getGlobalContext().Clinical.getClinicListActionSummarySearchCriteria() == null)
			initialiseDynamicGrid(false, false);

		loadHospitals();

		updateControlsState();
	}

	private void searchForClinics()
	{
		if (form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(false);
		else if (form.cmbHospital().getValue() == null)
			form.cmbClinic().clear();

	}

	private void loadHospitals()
	{
		LocationLiteVoCollection hospitals = domain.getActiveHospitals(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
		if (hospitals != null)
		{
			for (LocationLiteVo item : hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());

				if (engine.getCurrentLocation() != null)
				{
					if (engine.getCurrentLocation().getID() == item.getID_Location().intValue() && form.dteDate().getValue() != null)
					{
						form.cmbHospital().setValue(item);
						loadClinics(false);
					}
				}
			}
		}
	}

	private void loadClinics(boolean bKeepClosed)
	{
		if (form.cmbHospital().getValue() == null)
			return;

		form.cmbClinic().clear();

		SessionShortVoCollection listClinics = domain.listClinics(form.cmbHospital().getValue().getID_Location(), form.dteDate().getValue());

		if (listClinics != null)
		{
			for (SessionShortVo item : listClinics)
			{
				StringBuffer sb = new StringBuffer();
				sb.append(item.getName());
				sb.append(" - ");
				sb.append(item.getSessionDate());

				form.cmbClinic().newRow(item, sb.toString());

				if (engine.getCurrentLocation() != null && item.getSchLocationIsNotNull())
				{
					if (engine.getCurrentLocation().getID() == item.getSchLocation().getID())
						form.cmbClinic().setValue(item);
				}
			}

			if (listClinics.size() == 1)
				form.cmbClinic().setValue(listClinics.get(0));

			form.cmbClinic().setTooltip(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getDescription() : null);
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getTaskCompleteMessageBoxID() != null && form.getLocalContext().getTaskCompleteMessageBoxID().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			flagTasksAsComplete();
		}
	}

	private void flagTasksAsComplete()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return;

		BookingAppointmentOutcomeActionsToSaveVo appointmentToSave = domain.getOutcomeActionsForAppointment((Booking_AppointmentRefVo) form.dynGrdResults().getSelectedRow().getValue());

		if (appointmentToSave.getOutcomeActions() == null)
			return;

		for (int i = 0; i < appointmentToSave.getOutcomeActions().size(); i++)
		{
			if (appointmentToSave.getOutcomeActions().get(i) == null)
				continue;

			OutcomeAction outcomeOfAction = appointmentToSave.getOutcomeActions().get(i).getOutcomeOfAction();

			if (!OutcomeAction.DONE_NOW.equals(outcomeOfAction))
			{
				appointmentToSave.getOutcomeActions().get(i).setOutcomeOfAction(OutcomeAction.DONE_NOW);
			}
		}

		try
		{
			domain.saveTasksAsComplete(appointmentToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			search();
			return;
		}

		search();
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().RefMan.NewElectiveListTCIErodDialog) && DialogResult.ABORT.equals(result)) //abord is actually Close button
		{
			markElectiveListAsComplete();
		}
		else if (formName.equals(form.getForms().RefMan.BookAppointmentDialog) && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentSaved()))
		{
			markAppointmentsAsComplete();

			FutureAppointmentDetailsVo gridRow = getFutureAppointment();//WDEV-23040
			if (gridRow != null && (RequestToSchedule.OPA.equals(gridRow.getRequestToSchedule())  || RequestToSchedule.OPA_AND_LINKED_DIAGNOSTICS.equals(gridRow.getRequestToSchedule())))
				updateFutureAppointmentStatus(FutureAppointmentStatus.BOOKED, gridRow);//WDEV-23040 - end

		}
		else if (formName.equals(form.getForms().Scheduling.AppointmentOutcomeDialog) && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentSaved()))
		{
			form.getGlobalContext().RefMan.setAppointmentSaved(Boolean.FALSE);	
		}
		//WDEV-19320
		if (formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog) && DialogResult.OK.equals(result))
		{
			if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() == 1)
				form.ccListOwner().setValue(form.getGlobalContext().Scheduling.getSelectedHCPs().get(0));
			else
			{
				form.ccListOwner().clear();
				populateListOwnersLabel(form.getGlobalContext().Scheduling.getSelectedHCPs());
			}
		}
		if (!formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog)) //WDEV-19322
		{
			search();
		}
	}

	private FutureAppointmentDetailsVo getFutureAppointment() 
	{
		if(form.dynGrdResults().getValue() == null)
			return null;

		if(form.dynGrdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo)
		{
			OutpatientEpisodeWithICPInfoVo gridRow = (OutpatientEpisodeWithICPInfoVo)form.dynGrdResults().getValue();//WDEV-23040

			if(gridRow.getOutcomeActionsIsNotNull() && gridRow.getOutcomeActions().size() > 0)
			{
				for(AppointmentOutcomeActionVo actionVo :gridRow.getOutcomeActions())
				{
					if(actionVo.getFutureAppointmentIsNotNull() && OutcomeAction.DO_LATER.equals(actionVo.getOutcomeOfAction()));
						return actionVo.getFutureAppointment();
				}
			}
		}
		return null;
	}

	private void updateFutureAppointmentStatus(FutureAppointmentStatus appointmentStatus,FutureAppointmentDetailsVo futureAppt)
	{
		if (futureAppt == null)
			return;

		

		FutureAppointmentDetailsVo updatedFutureAppt = domain.getFutureAppointmentDetails(futureAppt);

		if (futureAppt.getVersion_FutureAppointmentDetails() != updatedFutureAppt.getVersion_FutureAppointmentDetails())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		FutureAppointmentStatusVo status = new FutureAppointmentStatusVo();
		status.setPendingStatus(appointmentStatus);
		status.setStatusDateTime(new DateTime());

		Object mosUser = domain.getMosUser();

		if (mosUser instanceof MemberOfStaffRefVo)
		{
			status.setAuthoringUser((MemberOfStaffRefVo) mosUser);
		}

		if (FutureAppointmentStatus.REMOVED.equals(appointmentStatus) && form.getGlobalContext().Scheduling.getFutureAppointmentRemoval() != null)
		{
			status.setRemovalReason(form.getGlobalContext().Scheduling.getFutureAppointmentRemoval().getReason());
			status.setStatusComment(form.getGlobalContext().Scheduling.getFutureAppointmentRemoval().getComment());
		}
		
		updatedFutureAppt.setCurrentStatus(status);

		if (updatedFutureAppt.getStatusHistory() == null)
			updatedFutureAppt.setStatusHistory(new FutureAppointmentStatusVoCollection());

		updatedFutureAppt.getStatusHistory().add(status);

		String[] errors = updatedFutureAppt.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try
		{
			domain.saveFutureAppt(updatedFutureAppt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
	}
	private void markAppointmentsAsComplete()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return;

		BookingAppointmentOutcomeActionsToSaveVo appointmentToSave = domain.getOutcomeActionsForAppointment((Booking_AppointmentRefVo) form.dynGrdResults().getSelectedRow().getValue());

		if (appointmentToSave.getOutcomeActions() == null)
			return;

		for (int i = 0; i < appointmentToSave.getOutcomeActions().size(); i++)
		{
			if (appointmentToSave.getOutcomeActions().get(i) == null)
				continue;

			AppointmentAction appointmentAction = appointmentToSave.getOutcomeActions().get(i).getAppointmentAction();
			OutcomeAction outcomeOfAction = appointmentToSave.getOutcomeActions().get(i).getOutcomeOfAction();

			if (AppointmentAction.BOOK_APPT_ACTION.equals(appointmentAction) && !OutcomeAction.DONE_NOW.equals(outcomeOfAction))
			{
				appointmentToSave.getOutcomeActions().get(i).setOutcomeOfAction(OutcomeAction.DONE_NOW);
				break;
			}
		}
		
		appointmentToSave.setApptBookedOnSameDay(form.getGlobalContext().RefMan.getBookedOnDayOfAppointment());

		try
		{
			domain.saveTasksAsComplete(appointmentToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		form.getGlobalContext().RefMan.setAppointmentSaved(Boolean.FALSE);
	}

	private void markElectiveListAsComplete()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return;

		BookingAppointmentOutcomeActionsToSaveVo appointmentToSave = domain.getOutcomeActionsForAppointment((Booking_AppointmentRefVo) form.dynGrdResults().getSelectedRow().getValue());

		if (appointmentToSave.getOutcomeActions() == null)
			return;

		for (int i = 0; i < appointmentToSave.getOutcomeActions().size(); i++)
		{
			if (appointmentToSave.getOutcomeActions().get(i) == null)
				continue;

			AppointmentAction appointmentAction = appointmentToSave.getOutcomeActions().get(i).getAppointmentAction();
			OutcomeAction outcomeOfAction = appointmentToSave.getOutcomeActions().get(i).getOutcomeOfAction();

			if ((AppointmentAction.WAITING_LIST_ACTION.equals(appointmentAction) || AppointmentAction.BOOKED_LIST_ACTION.equals(appointmentAction) || AppointmentAction.PLANNED_LIST_ACTION.equals(appointmentAction)) && !OutcomeAction.DONE_NOW.equals(outcomeOfAction))
			{
				appointmentToSave.getOutcomeActions().get(i).setOutcomeOfAction(OutcomeAction.DONE_NOW);
				break;
			}
		}

		try
		{
			domain.saveTasksAsComplete(appointmentToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}

	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		searchForClinics();

		if (form.cmbHospital().getValue() == null)
		{
			form.dynGrdResults().getRows().clear();
		}

		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean apptHasOutcome = form.dynGrdResults().getSelectedRow() != null && ((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue()).getOutcome() != null;
		boolean atLeastOneIncompleteTask = atLeastOneIncompleteTask();
		boolean hasReferral = form.dynGrdResults().getSelectedRow() != null && form.dynGrdResults().getSelectedRow().getValue() instanceof OutpatientEpisodeWithICPInfoVo && ((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue()).getReferralIsNotNull();
		
		form.btnViewOutcome().setEnabled(apptHasOutcome);
		form.btnTaskComplete().setEnabled(atLeastOneIncompleteTask);
		
		form.getContextMenus().Clinical.hideAllClinicListActionSummaryMenuMenuItems();
		form.getContextMenus().Clinical.getClinicListActionSummaryMenuVIEW_OUTCOMEItem().setVisible(apptHasOutcome);
		form.getContextMenus().Clinical.getClinicListActionSummaryMenuFLAG_COMPLETEItem().setVisible(atLeastOneIncompleteTask);
		form.getContextMenus().Clinical.getClinicListActionSummaryMenuVIEW_REFERRALItem().setVisible(hasReferral);
		
		//form.getContextMenus().Clinical.getClinicListActionSummaryMenuADD_TO_WAITING_LISTItem().setVisible(checkOutstandingWaitingListAction());
		//form.getContextMenus().Clinical.getClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem().setVisible(checkOutstandingBookedListAction());
		//form.getContextMenus().Clinical.getClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem().setVisible(checkOutstandingPlannedListAction());
		form.getContextMenus().Clinical.getClinicListActionSummaryMenuBOOK_APPOINTMENTItem().setVisible(checkOutstandingBookAppointmentAction());
		
		boolean showApptDates = AppointmentAction.BOOK_APPT_ACTION.equals(form.cmbAction().getValue());
		
		form.lblAppReqBetwwen().setVisible(showApptDates);
		form.dteFrom().setVisible(showApptDates);
		form.lblAnd().setVisible(showApptDates);
		form.dteTo().setVisible(showApptDates);
		
		form.cmbClinic().setEnabled(form.dteDate().getValue()!=null); //WDEV-19668
	}

	private boolean atLeastOneIncompleteTask()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return false;

		OutpatientEpisodeWithICPInfoVo temp = (OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue();

		for (int i = 0; i < temp.getOutcomeActions().size(); i++)
		{
			AppointmentOutcomeActionVo action = temp.getOutcomeActions().get(i);

			if (OutcomeAction.DO_LATER.equals(action.getOutcomeOfAction()))
			{
				return true;
			}
		}

		return false;
	}

	private boolean checkOutstandingBookAppointmentAction()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return false;

		OutpatientEpisodeWithICPInfoVo temp = (OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue();

		for (int i = 0; i < temp.getOutcomeActions().size(); i++)
		{
			AppointmentOutcomeActionVo action = temp.getOutcomeActions().get(i);

			if (AppointmentAction.BOOK_APPT_ACTION.equals(action.getAppointmentAction()) && OutcomeAction.DO_LATER.equals(action.getOutcomeOfAction()))
			{
				return true;
			}
		}

		return false;
	}

	private boolean checkOutstandingPlannedListAction()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return false;

		OutpatientEpisodeWithICPInfoVo temp = (OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue();

		for (int i = 0; i < temp.getOutcomeActions().size(); i++)
		{
			AppointmentOutcomeActionVo action = temp.getOutcomeActions().get(i);

			if (AppointmentAction.PLANNED_LIST_ACTION.equals(action.getAppointmentAction()) && OutcomeAction.DO_LATER.equals(action.getOutcomeOfAction()))
			{
				return true;
			}
		}

		return false;
	}

	private boolean checkOutstandingBookedListAction()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return false;

		OutpatientEpisodeWithICPInfoVo temp = (OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue();

		for (int i = 0; i < temp.getOutcomeActions().size(); i++)
		{
			AppointmentOutcomeActionVo action = temp.getOutcomeActions().get(i);

			if (AppointmentAction.BOOKED_LIST_ACTION.equals(action.getAppointmentAction()) && OutcomeAction.DO_LATER.equals(action.getOutcomeOfAction()))
			{
				return true;
			}
		}

		return false;
	}

	private boolean checkOutstandingWaitingListAction()
	{
		if (form.dynGrdResults().getSelectedRow() == null)
			return false;

		OutpatientEpisodeWithICPInfoVo temp = (OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue();

		for (int i = 0; i < temp.getOutcomeActions().size(); i++)
		{
			AppointmentOutcomeActionVo action = temp.getOutcomeActions().get(i);

			if (AppointmentAction.WAITING_LIST_ACTION.equals(action.getAppointmentAction()) && OutcomeAction.DO_LATER.equals(action.getOutcomeOfAction()))
			{
				return true;
			}
		}

		return false;
	}

	@Override
	protected void onBtnTaskCompleteClick() throws ims.framework.exceptions.PresentationLogicException
	{
		taskComplete();
	}

	private void taskComplete()
	{
		if (!(form.dynGrdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo))
			return;
		form.getLocalContext().setTaskCompleteMessageBoxID(engine.showMessage("Are you sure you want to mark all Outcomes as complete for patient " + form.getGlobalContext().Core.getPatientShort().getName() + " ?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
	}

	@Override
	protected void onBtnViewOutcomeClick() throws ims.framework.exceptions.PresentationLogicException
	{
		viewOutcome();
	}

	private void viewOutcome()
	{
		if (!(form.dynGrdResults().getValue() instanceof OutpatientEpisodeWithICPInfoVo))
			return;
		engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW, AppointmentOutcomeAction.VIEW_READ_ONLY});
	}

	@Override
	protected void onDteDateValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
		{
			loadClinics(false);
		}
		else if (form.dteDate().getValue() == null)
		{
			form.cmbClinic().clear();
			form.dynGrdResults().getRows().clear();
		}

		updateControlsState();
	}

	@Override
	protected void onCmbClinicValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbClinic().setTooltip(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getDescription() : null);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		initialiseDynamicGrid(false, false); //WDEV-19322
		updateControlsState();
	}

	private void clearScreen()
	{
		form.dynGrdResults().getRows().clear();

		form.cmbHospital().setValue(null);
		form.cmbClinic().clear();
		form.qmbService().clear();
		form.dteDate().setValue(null);
		form.cmbAppOutcome().setValue(null);
		form.cmbAction().setValue(null);
		form.chkComplete().setValue(false);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		//WDEV-19320
		form.lblListOwnersSel().setValue(null);
		form.lblListOwnersSel().setTooltip(null);
		form.getGlobalContext().Clinical.setClinicListActionSummarySearchCriteria(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);
		form.lblTotal().setValue("Total: 0");
		form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);
		form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
		form.getGlobalContext().ICP.setPatientICPRecord(null);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}

	private void search()
	{

		if (!validateSearch())
			return;

		form.dynGrdResults().getRows().clear();

		IPandOPSearchCriteriaVo filterVo = new IPandOPSearchCriteriaVo();

		filterVo = populateSearchFilter(filterVo);

		form.getGlobalContext().Clinical.setClinicListActionSummarySearchCriteria(filterVo);

		OutpatientEpisodeWithICPInfoVoCollection list = domain.listOPEpisodes(filterVo);

		if (list == null || list.size() == 0)
		{
			engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
			form.lblTotal().setValue("Total: 0");
			updateControlsState();
			return;
		}
		boolean hasItemWithFollowUpApptDetailsF = hasItemWithFollowUpApptDetailsForBookAction(list);
		boolean hasItemWithComments = hasItemWithOutcomeComments(list);
		
		list.sort(OutpatientEpisodeWithICPInfoVo.getTimeComparator(SortOrder.ASCENDING));

		form.lblTotal().setValue("Total: " + list.size());
		
		initialiseDynamicGrid(hasItemWithFollowUpApptDetailsF, hasItemWithComments);
		populateGrid(list);

		updateControlsState();
	}
	//WDEV-19322
	private boolean hasItemWithFollowUpApptDetailsForBookAction(OutpatientEpisodeWithICPInfoVoCollection list)
	{
		if (list == null || list.size() == 0)
			return false;
		
		for (int i = 0; i < list.size(); i++)
		{
			if (list.get(i) == null)
				continue;
			for (int j = 0; list.get(i).getOutcomeActions() != null && j < list.get(i).getOutcomeActions().size(); j++)
			{
				if (list.get(i).getOutcomeActions().get(j) != null && AppointmentAction.BOOK_APPT_ACTION.equals(list.get(i).getOutcomeActions().get(j).getAppointmentAction()) && OutcomeAction.DO_LATER.equals(list.get(i).getOutcomeActions().get(j).getOutcomeOfAction()))
				{
					return true;
				}
				
			}
		}
		return false;
	}
	//WDEV-19322
	private boolean hasItemWithOutcomeComments(OutpatientEpisodeWithICPInfoVoCollection list)
	{
		if (list == null || list.size() == 0)
			return false;
		
		for (int i = 0; i < list.size(); i++)
		{
			if (list.get(i) == null)
				continue;
			if (list.get(i).getOutcomeCommentsIsNotNull() || list.get(i).getOutcomeReasonIsNotNull())
			{	
				return true;
			}
		}
		return false;
	}
	private void populateGrid(OutpatientEpisodeWithICPInfoVoCollection list)
	{
		form.dynGrdResults().getRows().clear();

		for (int i = 0; list != null && i < list.size(); i++)
		{
			addResultGridRow(list.get(i));			
		}
	}
	//WDEV-19322
	private void addResultGridRow(OutpatientEpisodeWithICPInfoVo outpatientEpisode)
	{
		if (outpatientEpisode == null)
			return;
		
		DynamicGridRow row = form.dynGrdResults().getRows().newRow();

		DynamicGridCell icpCell = row.getCells().newCell(getColumn(ICP_COL_INDEX), DynamicCellType.IMAGE);
		icpCell.setValue(outpatientEpisode.getICPInfoIsNotNull() ? form.getImages().ICP.ICP : null);
		icpCell.setReadOnly(Boolean.TRUE);

		DynamicGridCell cABCell = row.getCells().newCell(getColumn(CAB_COL_INDEX), DynamicCellType.IMAGE);
		//WDEV-19331
		boolean bIsCabBooking = Boolean.TRUE.equals(outpatientEpisode.getIsCABBooking());
		cABCell.setValue(bIsCabBooking ? form.getImages().OCRR.LetterC : null);
		cABCell.setTooltip(bIsCabBooking ? "'Choose and Book' Appointment" : "");
		cABCell.setReadOnly(Boolean.TRUE);

		if (outpatientEpisode.getPatient().getDisplayId() != null)
		{
			DynamicGridCell iDCell = row.getCells().newCell(getColumn(HOSP_NUM_COL_INDEX), DynamicCellType.STRING);
			iDCell.setValue(outpatientEpisode.getPatient().getDisplayId().getValue());
			iDCell.setTooltip(outpatientEpisode.getPatient().getDisplayId().getValue());
			iDCell.setReadOnly(Boolean.TRUE);
		}

		DynamicGridCell surnameCell = row.getCells().newCell(getColumn(SURNAME_COL_INDEX), DynamicCellType.STRING); 
		surnameCell.setValue(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getSurname() : "");
		surnameCell.setTooltip(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getSurname() : "");
		surnameCell.setReadOnly(Boolean.TRUE);

		DynamicGridCell forenameCell = row.getCells().newCell(getColumn(FORENAME_COL_INDEX), DynamicCellType.STRING);
		forenameCell.setValue(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getForename() : "");
		forenameCell.setTooltip(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getForename() : "");
		forenameCell.setReadOnly(Boolean.TRUE);
				
		DynamicGridCell sexCell = row.getCells().newCell(getColumn(SEX_COL_INDEX), DynamicCellType.STRING);
		sexCell.setValue(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() : "");
		sexCell.setTooltip(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() : "");
		sexCell.setReadOnly(Boolean.TRUE);
		
		DynamicGridCell dobCell = row.getCells().newCell(getColumn(DOB_COL_INDEX), DynamicCellType.STRING);
		dobCell.setValue(outpatientEpisode.getPatient().getDobIsNotNull() ? outpatientEpisode.getPatient().getDob().toString() : "");
		dobCell.setTooltip(outpatientEpisode.getPatient().getDobIsNotNull() ? outpatientEpisode.getPatient().getDob().toString() : "");
		dobCell.setReadOnly(Boolean.TRUE);
		
		
		if (outpatientEpisode.getSessionIsNotNull() && outpatientEpisode.getSession().getListOwnersIsNotNull() && outpatientEpisode.getSession().getListOwners().size() > 0 && outpatientEpisode.getSession().getListOwners().get(0).getHcpIsNotNull() && outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName() != null)
		{
			DynamicGridCell listOwnerCell = row.getCells().newCell(getColumn(CONSULTANT_COL_INDEX), DynamicCellType.STRING);
			listOwnerCell.setValue(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getIMosName());
			listOwnerCell.setTooltip(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getIMosName());
			listOwnerCell.setReadOnly(Boolean.TRUE);
		}

		DynamicGridCell apptTimeCell = row.getCells().newCell(getColumn(APPT_TIME_COL_INDEX), DynamicCellType.TIME);
		apptTimeCell.setValue(outpatientEpisode.getAppointmentTimeIsNotNull() ? outpatientEpisode.getAppointmentTime() : null);
		apptTimeCell.setTooltip(outpatientEpisode.getAppointmentTimeIsNotNull() ? outpatientEpisode.getAppointmentTime().toString() : null);
		apptTimeCell.setReadOnly(Boolean.TRUE);
		
		//WDEV-19381
		if (Boolean.TRUE.equals(outpatientEpisode.getWasPrinted()))
		{	
			DynamicGridCell cellApptLetterPrinted = row.getCells().newCell(getColumn(APP_LETTER_PRINTED), DynamicCellType.IMAGE);
			cellApptLetterPrinted.setReadOnly(Boolean.TRUE);
			cellApptLetterPrinted.setValue(form.getImages().Correspondence.Printer);
			cellApptLetterPrinted.setTooltip(getTooltipForColAppLetterPrinted(outpatientEpisode));
		}
		
		
		DynamicGridCell outcomeCell = row.getCells().newCell(getColumn(OUTCOME_COL_INDEX), DynamicCellType.STRING);
		outcomeCell.setValue(outpatientEpisode.getOutcome() != null ? outpatientEpisode.getOutcome().getText() : "");
		outcomeCell.setTooltip(outpatientEpisode.getOutcome() != null ? outpatientEpisode.getOutcome().getText() : "");
		outcomeCell.setReadOnly(Boolean.TRUE);

		if (outpatientEpisode.getOutcomeReason() != null || outpatientEpisode.getOutcomeComments() != null)
		{	
			DynamicGridCell outcomeCellComments = row.getCells().newCell(getColumn(OUTCOME_COMMENTS_COL_INDEX), DynamicCellType.IMAGE);
			outcomeCellComments.setReadOnly(Boolean.TRUE);
			outcomeCellComments.setValue(form.getImages().Emergency.Edit16x16);
			outcomeCellComments.setTooltip((outpatientEpisode.getOutcomeReasonIsNotNull() ? "Outcome Reason: <b>" + outpatientEpisode.getOutcomeReason().toString() + "</b><br/>" : "")
					+ (outpatientEpisode.getOutcomeCommentsIsNotNull() ? "Outcome Comments: <b>" + outpatientEpisode.getOutcomeComments() + "</b>" : ""));
		}

		//WDEV-20799
		for (int j = 0; outpatientEpisode.getOutcomeActions() != null && j < outpatientEpisode.getOutcomeActions().size(); j++)
		{
			AppointmentOutcomeActionVo outcomeAction = outpatientEpisode.getOutcomeActions().get(j);

			if (outcomeAction == null)
				continue;

			if (AppointmentAction.WAITING_LIST_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				DynamicGridCell wlCell = row.getCells().newCell(getColumn(WL_COL_INDEX), DynamicCellType.IMAGE);
				wlCell.setReadOnly(Boolean.TRUE);

				if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
				{
					wlCell.setValue(form.getImages().RefMan.AddNow16);
					wlCell.setTooltip("Task Complete");
				}
				else if (OutcomeAction.DO_LATER.equals(outcomeAction.getOutcomeOfAction()))
				{

					//row.setcolW(form.getImages().RefMan.AddLater16);
					wlCell.setValue(form.getImages().Core.Time); // WDEV-18518 
					wlCell.setTooltip("Outstanding Task");
				}
			}
			else if (AppointmentAction.PLANNED_LIST_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				DynamicGridCell plCell = row.getCells().newCell(getColumn(PL_COL_INDEX), DynamicCellType.IMAGE);
				plCell.setReadOnly(Boolean.TRUE);

				if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
				{
					plCell.setValue(form.getImages().RefMan.AddNow16);
					plCell.setTooltip("Task Complete");
				}
				else if (OutcomeAction.DO_LATER.equals(outcomeAction.getOutcomeOfAction()))
				{
					//row.setcolP(form.getImages().RefMan.AddLater16);
					plCell.setValue(form.getImages().Core.Time); //WDEV-18518 
					plCell.setTooltip("Outstanding Task");
					
				}
			}
			else if (AppointmentAction.BOOK_APPT_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				DynamicGridCell futureApptCell = row.getCells().newCell(getColumn(FUTUREAPPT_COL_INDEX), DynamicCellType.IMAGE);
				futureApptCell.setReadOnly(Boolean.TRUE);
				
				if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
				{
					futureApptCell.setValue(form.getImages().RefMan.AddNow16);
					futureApptCell.setTooltip("Task Complete");
				}
				else if (OutcomeAction.DO_LATER.equals(outcomeAction.getOutcomeOfAction()))
				{
					//row.setcolF(form.getImages().RefMan.AddLater16);
					futureApptCell.setValue(form.getImages().Core.Time); // WDEV-18518 
					futureApptCell.setTooltip("Outstanding Task");

					if (outcomeAction.getFutureAppointment() != null)
					{	
						DynamicGridCell futureApptDateCell = row.getCells().newCell(getColumn(FUTUREAPPT_DATE_COL_INDEX), DynamicCellType.STRING);
						futureApptDateCell.setValue(outcomeAction.getFutureAppointment().getFirstApptFutureApptByDateIsNotNull() ? outcomeAction.getFutureAppointment().getFirstApptFutureApptByDate().toString() : null); // WDEV-18518 
						futureApptDateCell.setTooltip(outcomeAction.getFutureAppointment().getFirstApptFutureApptByDateIsNotNull() ? outcomeAction.getFutureAppointment().getFirstApptFutureApptByDate().toString() : "");
						futureApptDateCell.setReadOnly(Boolean.TRUE);
						outpatientEpisode.setFutureApptReqByDateForComparator(outcomeAction.getFutureAppointment().getFirstApptFutureApptByDate());
					}
				}
			}
			else if (AppointmentAction.TRANSFER_ACTION.equals(outcomeAction.getAppointmentAction())) //WDEV-20799
			{
				DynamicGridCell onwardCell = row.getCells().newCell(getColumn(INTER_PROVIDER_TRANSFER_COL_INDEX), DynamicCellType.IMAGE);
				onwardCell.setReadOnly(Boolean.TRUE);
				
				if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
				{
					onwardCell.setValue(form.getImages().RefMan.AddNow16);
					onwardCell.setTooltip("Task Complete");
				}
				else if (OutcomeAction.DO_LATER.equals(outcomeAction.getOutcomeOfAction()))
				{
					onwardCell.setValue(form.getImages().Core.Time);
					onwardCell.setTooltip("Outstanding Task");
				}
			}
			else if (AppointmentAction.REQUEST_FOR_SERVICE_ACTION.equals(outcomeAction.getAppointmentAction())) //WDEV-20799
			{
				DynamicGridCell reqForServiceCell = row.getCells().newCell(getColumn(REQUEST_FOR_SERVICE_COL_INDEX), DynamicCellType.IMAGE);
				reqForServiceCell.setReadOnly(Boolean.TRUE);
				
				if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
				{
					reqForServiceCell.setValue(form.getImages().RefMan.AddNow16);
					reqForServiceCell.setTooltip("Task Complete");
				}
				else if (OutcomeAction.DO_LATER.equals(outcomeAction.getOutcomeOfAction()))
				{
					reqForServiceCell.setValue(form.getImages().Core.Time); 
					reqForServiceCell.setTooltip("Outstanding Task");
				}
			}
			else if (AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction())) //WDEV-20799
			{
				DynamicGridCell transferCell = row.getCells().newCell(getColumn(TRANSFER_COL_INDEX), DynamicCellType.IMAGE);
				transferCell.setReadOnly(Boolean.TRUE);
				
				if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
				{
					transferCell.setValue(form.getImages().RefMan.AddNow16);
					transferCell.setTooltip("Task Complete");
				}
				else if (OutcomeAction.DO_LATER.equals(outcomeAction.getOutcomeOfAction()))
				{ 
					transferCell.setValue(form.getImages().Core.Time); 
					transferCell.setTooltip("Outstanding Task");
				}
			}
		}
		row.setValue(outpatientEpisode);
	}	
	
	//WDEV-19381
	private String getTooltipForColAppLetterPrinted(OutpatientEpisodeWithICPInfoVo outpatientEpisode)
	{
		if (outpatientEpisode==null || !Boolean.TRUE.equals(outpatientEpisode.getWasPrinted()))
		{
			return null;
		}
		
		String str="Appointment Letter was printed ";
		
		str+=(outpatientEpisode.getBookingLetterIsNotNull() && outpatientEpisode.getBookingLetter().getRecordingUser()!=null ? "<br><b>User:  </b>" + outpatientEpisode.getBookingLetter().getRecordingUser().getIMosName() : "");  
		
		str+=(outpatientEpisode.getBookingLetterIsNotNull() && outpatientEpisode.getBookingLetter().getRecordingDateTime()!=null ? "<br><b>Date/Time: </b>" + outpatientEpisode.getBookingLetter().getRecordingDateTime() : "");  
		
		return str;
		
	}
	
	private DynamicGridColumn getColumn(Integer colFieldName) 
	{
		return form.dynGrdResults().getColumns().getByIdentifier(colFieldName);
	}
	
	private IPandOPSearchCriteriaVo populateSearchFilter(IPandOPSearchCriteriaVo filterVo)
	{
		if (form.cmbHospital().getValue() != null)
			filterVo.setHospital(form.cmbHospital().getValue());

		if (form.cmbClinic().getValue() != null)
			filterVo.setClinic(form.cmbClinic().getValue());

		if (form.dteDate().getValue() != null)
			filterVo.setDate(form.dteDate().getValue());

		if (form.cmbAppOutcome().getValue() != null)
			filterVo.setApptOutcome(form.cmbAppOutcome().getValue());

		if (form.cmbAction().getValue() != null)
			filterVo.setAppointmentAction(form.cmbAction().getValue());
		
		if (form.dteFrom().getValue() != null)
			filterVo.setApptDateFrom(form.dteFrom().getValue());
		
		if (form.dteTo().getValue() != null)
			filterVo.setApptDateTo(form.dteTo().getValue());
	
		if (form.qmbService().getValue() != null)
			filterVo.setService(form.qmbService().getValue());
		
		if (form.ccListOwner().getValue() != null)
		{
			HcpLiteVoCollection hcpCollection = new HcpLiteVoCollection();
			hcpCollection.add(form.ccListOwner().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccListOwner().getValue() : null);
			filterVo.setListOwners(hcpCollection);
		}
		else if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() > 0)
		{
			filterVo.setListOwners(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}
	
		filterVo.setComplete(form.chkComplete().getValue());

		return filterVo;
	}

	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();

		if (form.cmbHospital().getValue() == null)
			uiErrors.add("Please select a Hospital");

		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteTo().getValue().isLessThan(form.dteFrom().getValue()))
		{
			uiErrors.add("From date cannot be later than To date.");
		}
		
		if (uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}

		return true;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{

		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.ClinicListActionSummaryMenu.ADD_TO_WAITING_LIST:
				form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] { ElectiveListDetails.ADDTOWAITINGLIST });
				break;

			case GenForm.ContextMenus.ClinicalNamespace.ClinicListActionSummaryMenu.ADD_TO_BOOKED_LIST:
				form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] { ElectiveListDetails.ADDTOBOOKEDLIST });
				break;

			case GenForm.ContextMenus.ClinicalNamespace.ClinicListActionSummaryMenu.ADD_TO_PLANNED_LIST:
				form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] { ElectiveListDetails.ADDTOPLANNEDLIST });
				break;

			case GenForm.ContextMenus.ClinicalNamespace.ClinicListActionSummaryMenu.BOOK_APPOINTMENT:
				form.getGlobalContext().RefMan.setAppointmentSaved(Boolean.FALSE);//WDEV-18517
				
				// WDEV-20928 - If appointment outcome being managed was today, we set the GC to true to save with the appointment
				form.getGlobalContext().RefMan.setBookedOnDayOfAppointment(Boolean.FALSE);
				OutpatientEpisodeWithICPInfoVo opRecord = (OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue();
				if (opRecord != null && opRecord.getAppointmentDateIsNotNull() && opRecord.getAppointmentDate().equals(new ims.framework.utils.Date()))
					form.getGlobalContext().RefMan.setBookedOnDayOfAppointment(Boolean.TRUE);
							
				
				engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
				break;
			case GenForm.ContextMenus.ClinicalNamespace.ClinicListActionSummaryMenu.VIEW_OUTCOME:
				viewOutcome();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.ClinicListActionSummaryMenu.FLAG_COMPLETE:
				taskComplete();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.ClinicListActionSummaryMenu.VIEW_REFERRAL:
				viewReferral();
				break;
		}
		updateControlsState();
	}

	private void viewReferral()
	{
		if (form.getGlobalContext().RefMan.getCatsReferral() == null)
			return;
		engine.open(form.getForms().RefMan.ReferralDetailsDialog);
		
	}

	@Override //WDEV-18664
	protected void onCmbActionValueChanged() throws PresentationLogicException
	{
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		updateControlsState();
		
	}

	@Override
	protected void onDynGrdResultsRowSelectionChanged(DynamicGridRow row)	throws PresentationLogicException
	{
		if (form.dynGrdResults().getSelectedRow() == null || form.dynGrdResults().getSelectedRow().getValue() == null || !(form.dynGrdResults().getSelectedRow().getValue() instanceof OutpatientEpisodeWithICPInfoVo))
			return;
		boolean hasReferral = ((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue()).getReferralIsNotNull();

		form.getGlobalContext().Scheduling.setBookingAppointmentRef((Booking_AppointmentRefVo) form.dynGrdResults().getSelectedRow().getValue());
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((OutpatientEpisodeWithICPInfoVo)form.dynGrdResults().getSelectedRow().getValue()).getPatient()));
		form.getGlobalContext().ICP.setPatientICPRecord(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue()).getICPInfo());
		form.getGlobalContext().RefMan.setCatsReferral(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue()).getReferral());
		
		if (hasReferral) //WDEV-21196
		{	
			CatsReferralBreachDatesVo catsReferralVo = ((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getSelectedRow().getValue()).getReferral();
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(catsReferralVo.getCareContext()));
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(catsReferralVo.getContractIsNotNull() ? catsReferralVo.getContract().getContractType() : null);
		}
		updateControlsState();

	}
	//WDEV-19322
	@Override
	protected void onDynGrdResultsColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.dynGrdResults().getRows() == null || form.dynGrdResults().getRows().size() < 2)
			return;
		OutpatientEpisodeWithICPInfoVo temp = (OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getValue();

		if (column.equals(getColumn(ICP_COL_INDEX)))
		{
			if (form.getLocalContext().getSortOrderICPImage() == null)
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0; i < form.dynGrdResults().getRows().size(); i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getRows().get(i).getValue()));

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getICPImageComparator(form.getLocalContext().getSortOrderICPImage()));

			if (form.getLocalContext().getSortOrderICPImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderICPImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);

			form.dynGrdResults().getRows().clear();

			populateGrid(voIPColl);
		}
		
		if (column.equals(getColumn(CAB_COL_INDEX)))
		{
			if (form.getLocalContext().getSortOrderCABImage() == null)
				form.getLocalContext().setSortOrderCABImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0; i < form.dynGrdResults().getRows().size(); i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getRows().get(i).getValue()));

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getIsCABApptImageComparator(form.getLocalContext().getSortOrderCABImage()));

			if (form.getLocalContext().getSortOrderCABImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderCABImage(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderCABImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderCABImage(SortOrder.ASCENDING);

			form.dynGrdResults().getRows().clear();

			populateGrid(voIPColl);
		}
		
		if (column.equals(getColumn(DOB_COL_INDEX)))
		{
			if (form.getLocalContext().getSortOrderDOB() == null)
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0; i < form.dynGrdResults().getRows().size(); i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getRows().get(i).getValue()));

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getDOBComparator(form.getLocalContext().getSortOrderDOB()));

			if (form.getLocalContext().getSortOrderDOB().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderDOB().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);

			form.dynGrdResults().getRows().clear();

			populateGrid(voIPColl);
		}
		
		if (column.equals(getColumn(OUTCOME_COMMENTS_COL_INDEX)))
		{
			if (form.getLocalContext().getSortOrderCommentsImage() == null)
				form.getLocalContext().setSortOrderCommentsImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0; i < form.dynGrdResults().getRows().size(); i++)
				voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getRows().get(i).getValue()));

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getHasOutcomeCommentsImageComparator(form.getLocalContext().getSortOrderCommentsImage()));

			if (form.getLocalContext().getSortOrderCommentsImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderCommentsImage(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderCommentsImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderCommentsImage(SortOrder.ASCENDING);

			form.dynGrdResults().getRows().clear();

			populateGrid(voIPColl);
		}		

		if (column.equals(getColumn(FUTUREAPPT_DATE_COL_INDEX)))
		{
			if (form.getLocalContext().getSortOrderFutureApptRequiredByDate() == null)
				form.getLocalContext().setSortOrderFutureApptRequiredByDate(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0; i < form.dynGrdResults().getRows().size(); i++)
						voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getRows().get(i).getValue()));
						
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getFutureApptRequiredByDateComparator(form.getLocalContext().getSortOrderFutureApptRequiredByDate()));
						
			if (form.getLocalContext().getSortOrderFutureApptRequiredByDate().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderFutureApptRequiredByDate(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderFutureApptRequiredByDate().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderFutureApptRequiredByDate(SortOrder.ASCENDING);

			form.dynGrdResults().getRows().clear();

			populateGrid(voIPColl);
		}

		//WDEV-19381
		if (column.equals(getColumn(APP_LETTER_PRINTED)))
		{
			if (form.getLocalContext().getSortOrderApptLetterPrintedImage() == null)
				form.getLocalContext().setSortOrderApptLetterPrintedImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();
			
			for (int i = 0; i < form.dynGrdResults().getRows().size(); i++)
						voIPColl.add(((OutpatientEpisodeWithICPInfoVo) form.dynGrdResults().getRows().get(i).getValue()));
						
			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getApptLetterPrintedImageComparator(form.getLocalContext().getSortOrderApptLetterPrintedImage()));
						
			if (form.getLocalContext().getSortOrderApptLetterPrintedImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderApptLetterPrintedImage(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderApptLetterPrintedImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderApptLetterPrintedImage(SortOrder.ASCENDING);

			form.dynGrdResults().getRows().clear();

			populateGrid(voIPColl);
		}
		
		form.dynGrdResults().setValue(temp);
		updateControlsState();
	}
	//WDEV-19320
	@Override
	protected void onCcListOwnerValueChanged() throws PresentationLogicException
	{
		if (form.ccListOwner().getValue() != null)
		{	
			form.lblListOwnersSel().setValue(null);

			HcpLiteVoCollection owners = new HcpLiteVoCollection();
			owners.add((HcpLiteVo) form.ccListOwner().getValue());
			form.getGlobalContext().Scheduling.setSelectedHCPs(owners);
		}
		else
		{
			form.getGlobalContext().Scheduling.setSelectedHCPs(null);
		}
	}

	@Override
	protected void onImbAddListOwnersClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.HcpMultipleSelectDialog);
		
	}

	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateServices(value);
		
	}
	//WDEV-19320
	private void populateServices(String value)
	{
		if (value == null || value.length() < 3)
			return;
		form.qmbService().clear();

		ServiceLiteVoCollection coll = domain.listServices(value);

		if(coll == null || coll.size() == 0)
			return;

		for (int i=0;i<coll.size();i++)
		{
			if (coll.get(i) == null)
				continue;
			form.qmbService().newRow(coll.get(i), coll.get(i).getServiceName());
			if (coll.size() == 1)
			{	
				form.qmbService().setValue(coll.get(0));
			}
			else
			{	
				form.qmbService().showOpened();
			}
		}
	}
	//WDEV-19320
	private void populateListOwnersLabel(HcpLiteVoCollection listOwners)
	{
		if (listOwners == null || listOwners.size() == 0)
		{	
			form.lblListOwnersSel().setValue(null);
			return;
		}	
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner != null && listOwner.getName() != null)
			{
				if (i == 0)
					namesString.append(listOwner.getName());
				else
					namesString.append(", " + listOwner.getName());
			}
		}

		if (namesString.length() > 80)
		{
			form.lblListOwnersSel().setValue(namesString.substring(0,80) + "...");
		}
		else
			form.lblListOwnersSel().setValue(namesString.toString());

		form.lblListOwnersSel().setTooltip(namesString.toString());
	}
	//WDEV-19320 -- ends here
}
