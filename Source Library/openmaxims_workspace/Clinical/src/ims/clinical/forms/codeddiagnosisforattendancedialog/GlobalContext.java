//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.codeddiagnosisforattendancedialog;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		Clinical = new ClinicalContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCodedDiagnosisForAttendanceListIsNotNull()
		{
			return !cx_CoreCodedDiagnosisForAttendanceList.getValueIsNull(context);
		}
		public ims.core.vo.CodedDiagnosesForAttendanceVoCollection getCodedDiagnosisForAttendanceList()
		{
			return (ims.core.vo.CodedDiagnosesForAttendanceVoCollection)cx_CoreCodedDiagnosisForAttendanceList.getValue(context);
		}
		public void setCodedDiagnosisForAttendanceList(ims.core.vo.CodedDiagnosesForAttendanceVoCollection value)
		{
			cx_CoreCodedDiagnosisForAttendanceList.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCodedDiagnosisForAttendanceList = new ims.framework.ContextVariable("Core.CodedDiagnosisForAttendanceList", "_cv_Core.CodedDiagnosisForAttendanceList");
		public boolean getEpisodeofCareShortIsNotNull()
		{
			return !cx_CoreEpisodeofCareShort.getValueIsNull(context);
		}
		public ims.core.vo.EpisodeofCareShortVo getEpisodeofCareShort()
		{
			return (ims.core.vo.EpisodeofCareShortVo)cx_CoreEpisodeofCareShort.getValue(context);
		}
		public void setEpisodeofCareShort(ims.core.vo.EpisodeofCareShortVo value)
		{
			cx_CoreEpisodeofCareShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreEpisodeofCareShort = new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}
		public void setCurrentClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cx_CoreCurrentClinicalContact.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");
		public boolean getCodedDiagnosesForAttendanceIsNotNull()
		{
			return !cx_CoreCodedDiagnosesForAttendance.getValueIsNull(context);
		}
		public ims.core.vo.CodedDiagnosesForAttendanceVo getCodedDiagnosesForAttendance()
		{
			return (ims.core.vo.CodedDiagnosesForAttendanceVo)cx_CoreCodedDiagnosesForAttendance.getValue(context);
		}
		public void setCodedDiagnosesForAttendance(ims.core.vo.CodedDiagnosesForAttendanceVo value)
		{
			cx_CoreCodedDiagnosesForAttendance.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCodedDiagnosesForAttendance = new ims.framework.ContextVariable("Core.CodedDiagnosesForAttendance", "_cv_Core.CodedDiagnosesForAttendance");
		public boolean getTaxonomyMapIsNotNull()
		{
			return !cx_CoreTaxonomyMap.getValueIsNull(context);
		}
		public ims.core.vo.TaxonomyMap getTaxonomyMap()
		{
			return (ims.core.vo.TaxonomyMap)cx_CoreTaxonomyMap.getValue(context);
		}
		public void setTaxonomyMap(ims.core.vo.TaxonomyMap value)
		{
			cx_CoreTaxonomyMap.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreTaxonomyMap = new ims.framework.ContextVariable("Core.TaxonomyMap", "_cv_Core.TaxonomyMap");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");

		private ims.framework.Context context;
	}
	public final class ClinicalContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ClinicalContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getDisableMainCheckboxIsNotNull()
		{
			return !cx_ClinicalDisableMainCheckbox.getValueIsNull(context);
		}
		public Boolean getDisableMainCheckbox()
		{
			return (Boolean)cx_ClinicalDisableMainCheckbox.getValue(context);
		}
		public void setDisableMainCheckbox(Boolean value)
		{
			cx_ClinicalDisableMainCheckbox.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalDisableMainCheckbox = new ims.framework.ContextVariable("Clinical.DisableMainCheckbox", "_cv_Clinical.DisableMainCheckbox");

		private ims.framework.Context context;
	}

	public CoreContext Core;
	public ClinicalContext Clinical;
}
