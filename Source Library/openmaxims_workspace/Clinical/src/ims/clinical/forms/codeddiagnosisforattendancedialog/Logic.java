//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5557.23004)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.codeddiagnosisforattendancedialog;

import ims.clinical.forms.codeddiagnosisforattendancedialog.GenForm.GroupSelectionEnumeration;
import ims.clinicaladmin.vo.DiagnosisHotlistItemVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CodedDiagnosesForAttendanceVo;
import ims.core.vo.CodedDiagnosesForAttendanceVoCollection;
import ims.core.vo.CodedDiagnosisStatusVo;
import ims.core.vo.CodedDiagnosisStatusVoCollection;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.DiagnosisDivisions;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.IItem;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.vo.ValueObject;
import ims.vo.ValueObjectCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);
	}
	
	private void initialize(Object[] args)
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof Boolean)
			{
				form.getLocalContext().setAddedDuringCoding(Boolean.TRUE);
			}
		}
		
		if(args != null && args.length > 1 && args[1] instanceof Boolean) //WDEV-21039
		{
			form.getLocalContext().setIncludeExcludedKeywords((Boolean) args[1]);	
		}
		
		form.ccRecordingUser().initialize(MosType.ALL);
		
		if (form.getGlobalContext().Core.getCodedDiagnosesForAttendance()!=null)
		{
			populateScreenFromData( form.getGlobalContext().Core.getCodedDiagnosesForAttendance());
		}
		else
		{
			form.dtimRecordingDateTime().setValue(new DateTime());
			Object mos = domain.getMosUser();
			if (mos!=null && mos instanceof MemberOfStaffLiteVo)
				form.ccRecordingUser().setValue((MemberOfStaffLiteVo)mos);
		}
		

		if (form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList()==null)
		{
			CodedDiagnosesForAttendanceVoCollection diagnosisCollection=new CodedDiagnosesForAttendanceVoCollection();
			form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(diagnosisCollection);
		}
		
		//form.qmbDiagnosis().setEnabled(engine.hasRight(AppRight.ALLOW_EDIT_CONSULTATION_DIAGNOSIS));
		
		if (form.getGlobalContext().Clinical.getDisableMainCheckboxIsNotNull() && form.getGlobalContext().Clinical.getDisableMainCheckbox())
		{
			form.chkMain().setEnabled(false);
		}
		
		//WDEV-19454
		form.chkSpecialtyHotlist().setVisible(!ConfigFlag.UI.SHOW_DIAGNOSES_DATABASE.getValue());
		form.GroupSelection().setVisible(ConfigFlag.UI.SHOW_DIAGNOSES_DATABASE.getValue());
		form.getLocalContext().setSearchBySpecialtyHotlist(true);
		if (ConfigFlag.UI.SHOW_DIAGNOSES_DATABASE.getValue())
		{
			form.GroupSelection().setValue(GroupSelectionEnumeration.rdoDiagSpec);//WDEV-19056
		}
		else
		{
			form.chkSpecialtyHotlist().setValue(true);
		}
		
		form.qmbDiagnosis().enableLiveSearch(ConfigFlag.UI.DIAGNOSIS_SEARCHING_MECHANISM.getValue().equals("Live")); //WDEV-22287
	}
	
	private void populateScreenFromData(CodedDiagnosesForAttendanceVo codedDiagnosis)
	{
		form.ccRecordingUser().setValue(codedDiagnosis.getRecordingInfoIsNotNull() ? codedDiagnosis.getRecordingInfo().getRecordingUser() : null);
		form.dtimRecordingDateTime().setValue(codedDiagnosis.getRecordingInfoIsNotNull() ? codedDiagnosis.getRecordingInfo().getRecordingDateTime() : null);
		
		form.getLocalContext().setDiagnosisDescription(codedDiagnosis.getDiagnosisDescription());
		
		if(codedDiagnosis.getDiagnosis() != null)
		{
			form.qmbDiagnosis().newRow(codedDiagnosis.getDiagnosis(), codedDiagnosis.getDiagnosisDescription());
			form.qmbDiagnosis().setValue(codedDiagnosis.getDiagnosis());
		}
		else
		{
			DiagLiteVo d = new DiagLiteVo();
			d.setDiagnosisName(codedDiagnosis.getDiagnosisDescription());
			form.qmbDiagnosis().newRow(d, d.getDiagnosisName());
			form.qmbDiagnosis().setValue(d);
		}

		form.qmbDiagnosis().setEnabled(true);
		
		
		form.chkMain().setValue(codedDiagnosis.getIsMain());
		

		if (codedDiagnosis.getCurrentStatusIsNotNull())
			if (codedDiagnosis.getCurrentStatus().getStatusIsNotNull())
				form.cmbStatus().setValue(codedDiagnosis.getCurrentStatus().getStatus());

		form.cmbLaterality().setValue(codedDiagnosis.getDiagLateralityIsNotNull() ? codedDiagnosis.getDiagLaterality() : null);//WDEV-19056
		
		form.ccRecordingUser().setMode(FormMode.VIEW);
	}
	
	@Override
	protected void onChkSpecialtyHotlistValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbDivision().setValue(null);
		form.getLocalContext().setSearchBySpecialtyHotlist(Boolean.TRUE.equals(form.chkSpecialtyHotlist().getValue()));
		form.getLocalContext().setDiagnosisDivision(null);
	}
	@Override
	protected void onCmbDivisionValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.GroupSelection().setValue(null);
		form.chkSpecialtyHotlist().setValue(false);//WDEV-19454
		setDivisionOrDiagnosesDatabase(form.cmbDivision().getValue(), false);	
	}
	
	private void setDivisionOrDiagnosesDatabase(DiagnosisDivisions division, boolean searchDiagnosesDatabase)
	{
		form.getLocalContext().setSearchDiagnosesDatabase(searchDiagnosesDatabase);
		form.getLocalContext().setDiagnosisDivision(division);
		
		if (division != null || Boolean.TRUE.equals(searchDiagnosesDatabase))
			form.getLocalContext().setSearchBySpecialtyHotlist(false);
	}
	
	@Override
	protected void onRadioButtonGroupSelectionValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbDivision().setValue(null);
		form.getLocalContext().setSearchBySpecialtyHotlist(form.GroupSelection().getValue().equals(GroupSelectionEnumeration.rdoDiagSpec));
		setDivisionOrDiagnosesDatabase(form.cmbDivision().getValue(), form.GroupSelection().getValue().equals(GroupSelectionEnumeration.rdoDiagDatabase));
	}
	
	@Override
	protected void onQmbDiagnosisValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setDiagnosisDescription(form.qmbDiagnosis().getValue() != null ? getDiagnosis(form.qmbDiagnosis().getValue()).getDiagnosisName() : null);
	}
	
	private DiagLiteVo getDiagnosis(ValueObject voItem) 
	{
		DiagLiteVo voDiagnosis = null;
		
		if (voItem instanceof DiagnosisHotlistItemVo)
		{
			DiagnosisHotlistItemVo hotlistItem = (DiagnosisHotlistItemVo)voItem;
			voDiagnosis = hotlistItem.getDiagnosis();			
		}	
		else if (voItem instanceof DiagLiteVo)
		{
			voDiagnosis = ((DiagLiteVo)voItem);
		}
		else if (voItem instanceof TaxonomyMap)
		{
			form.getGlobalContext().Core.setTaxonomyMap((TaxonomyMap) voItem);
			taxonomySearchOK();
			voDiagnosis = (DiagLiteVo) form.qmbDiagnosis().getValue();
		}

		return voDiagnosis;
	}
	
	private void taxonomySearchOK() 
	{
		TaxonomyMap taxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
		if (taxonomyMap != null)
		{
			TaxonomyMapCollection collTaxonomyMap = new TaxonomyMapCollection();
			collTaxonomyMap.add(taxonomyMap);				
			newDiagnosis(taxonomyMap);
		}

		form.qmbDiagnosis().setEnabled(false);
		
	}
	
	private void newDiagnosis(TaxonomyMap taxonomyMap )	
	{
		DiagnosisVo voDiagnosis = new DiagnosisVo();
		voDiagnosis.setDiagnosisName(taxonomyMap.getDescription());
		voDiagnosis.setTaxonomyMap(new TaxonomyMapCollection());
		voDiagnosis.setIsActive(Boolean.TRUE);

		String[] errors = voDiagnosis.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			voDiagnosis = domain.saveDiagnosisVo(voDiagnosis);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		catch (UniqueKeyViolationException e)
		{
			voDiagnosis = domain.getDiagnosisByName(voDiagnosis.getDiagnosisName());
		}
			

		if (voDiagnosis != null && voDiagnosis.getID_Diagnosis() != null)
		{
			form.qmbDiagnosis().clear();
			form.qmbDiagnosis().newRow(voDiagnosis, voDiagnosis.getDiagnosisName());
			form.qmbDiagnosis().setValue(voDiagnosis);		
		}
	}
	
	@Override
	protected void onQmbDiagnosisTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbDiagnosis().clear();
		ValueObjectCollection voCollDiag = listDiagnosis(value); //WDEV-19056
		
		if (voCollDiag == null || voCollDiag.size() == 0)
		{
			form.qmbDiagnosis().showOpened();
			return;
		}
		
		//WDEV-19056
		if (voCollDiag != null && voCollDiag.getItems() != null)
		{
			IItem[] items = voCollDiag.getItems();
			for (int i=0; i < items.length; i++)
			{
				Object item = items[i];
				if (item == null) 
					continue;
				
				addRowToDiagmosisCombo(item);
				
			}
		}
			
		form.qmbDiagnosis().showOpened();
	}
	
	private void addRowToDiagmosisCombo(Object item)
	{
		if (item instanceof DiagLiteVo)
		{
			DiagLiteVo diag=(DiagLiteVo)item;
			form.qmbDiagnosis().newRow(diag,diag.getDiagnosisName());
		}
		else if (item instanceof TaxonomyMap)
		{
			TaxonomyMap voCIE = (TaxonomyMap)item;
			form.qmbDiagnosis().newRow(voCIE, voCIE.getDescription());
		}
	}
	
	private ValueObjectCollection listDiagnosis(String value)
	{
		ValueObjectCollection voCollDiag = null;
		boolean bHotlist = form.getLocalContext().getSearchBySpecialtyHotlistIsNotNull() ? form.getLocalContext().getSearchBySpecialtyHotlist().booleanValue() : false;
		
		boolean divisionSelected = form.getLocalContext().getDiagnosisDivision() == null ? false : true;
		boolean includeExcludedKeywords=form.getLocalContext().getIncludeExcludedKeywords()==null || Boolean.TRUE.equals(form.getLocalContext().getIncludeExcludedKeywords()) ? true : false; //WDEV-21039 //WDEV-22287
		
		try
		{
    		if (bHotlist)
    		{
    				voCollDiag = domain.listHotListDiagnosis(value, getSpecialty(),includeExcludedKeywords).sort(); //WDEV-21039 //WDEV-22287
    		}
    		else if (divisionSelected)
    		{
    			voCollDiag = domain.listDivisionDiagnoses(value, form.getLocalContext().getDiagnosisDivision(),includeExcludedKeywords).sort(); //WDEV-22287
    		}
    		else if (Boolean.TRUE.equals(form.getLocalContext().getSearchDiagnosesDatabase()))
    		{
    				TaxonomyMap filter = new TaxonomyMap();
    				filter.setTaxonomyName(getTaxonomyLookupByName(ConfigFlag.GEN.EDISCHARGE_DIAGNOSIS_SEARCH_TAXONOMY_TYPE.getValue()));
    				filter.setDescription(value);
    				voCollDiag = domain.searchCodes(filter);
    		}
    		else
    			    voCollDiag =domain.listDianosis(value, null);
    				//voCollDiag = domain.listDiagnosisLiteVo(value).sort(); 
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return null;
		}		
		
		return voCollDiag;
	}
	
	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) && (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}
	
	private TaxonomyType getTaxonomyLookupByName(String name)
	{
		if (TaxonomyType.READ3.getText().toUpperCase().equals(name.toUpperCase()))
		{
			return TaxonomyType.READ3;
		}
		else if (TaxonomyType.SNOMED.getText().toUpperCase().equals(name.toUpperCase()))
		{
			return TaxonomyType.SNOMED;
		}
		else if (TaxonomyType.ICD10.getText().equals(name))
		{
			return TaxonomyType.ICD10;
		}	
		else if (TaxonomyType.NAT_SPEC_CODE.getText().equals(name.trim()))
		{
			return TaxonomyType.NAT_SPEC_CODE;
		}
		else if (TaxonomyType.NAT_TREAT_CODE.getText().equals(name.trim()))
		{
			return TaxonomyType.NAT_TREAT_CODE;
		}
		else if (TaxonomyType.OPCS4.getText().equals(name))
		{
			return TaxonomyType.OPCS4;
		}	
		else if (TaxonomyType.VTM.getText().equals(name))
		{
			return TaxonomyType.VTM;
		}
		else if (TaxonomyType.VMP.getText().equals(name))
		{
			return TaxonomyType.VMP;
		}	
		else if (TaxonomyType.AMP.getText().equals(name))
		{
			return TaxonomyType.AMP;
		}
		
		return null;
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		CodedDiagnosesForAttendanceVo codedDiagToSave = populateDataFromScreen(form.getGlobalContext().Core.getCodedDiagnosesForAttendance());
		String[] errors = codedDiagToSave.validate(getUIErrors());
		
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return;
		}
		
		boolean equals=false;
		
		CodedDiagnosesForAttendanceVoCollection collCoddedDiag =form.getGlobalContext().Core.getCurrentCareContext() != null ? domain.listCodedDiagnosis(form.getGlobalContext().Core.getCurrentCareContext(), false) : null;
		form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(collCoddedDiag);
		
		for (int i=0;collCoddedDiag!=null && i<collCoddedDiag.size();i++)
		{
			CodedDiagnosesForAttendanceVo codedDiag = collCoddedDiag.get(i);
			if (codedDiagToSave != null && codedDiag != null)
			{
				if (codedDiagToSave.getID_CodedDiagForAttendanceIsNotNull() && codedDiag.getID_CodedDiagForAttendanceIsNotNull() && codedDiagToSave.getID_CodedDiagForAttendance().equals(codedDiag.getID_CodedDiagForAttendance())
						||
						(
							codedDiagToSave.getDiagnosisIsNotNull() && codedDiag.getDiagnosisIsNotNull()
							&& (codedDiagToSave.getDiagnosis().getID_DiagnosisIsNotNull()&& codedDiag.getDiagnosis().getID_DiagnosisIsNotNull())
							&& (codedDiagToSave.getDiagnosis().getID_Diagnosis().equals(codedDiag.getDiagnosis().getID_Diagnosis())||(codedDiag.getDiagnosis().getID_Diagnosis()==-1&&codedDiagToSave.getDiagnosis().getID_DiagnosisIsNotNull()))
							&& (codedDiagToSave.getRecordingInfoIsNotNull()&& codedDiag.getRecordingInfoIsNotNull())
							&& (codedDiagToSave.getRecordingInfo().getRecordingDateTimeIsNotNull()&&codedDiag.getRecordingInfo().getRecordingDateTimeIsNotNull() && codedDiagToSave.getRecordingInfo().getRecordingDateTime().equals(codedDiag.getRecordingInfo().getRecordingDateTime()))
							&& (codedDiagToSave.getRecordingInfo().getRecordingUserIsNotNull()&&codedDiag.getRecordingInfo().getRecordingUserIsNotNull()&&codedDiagToSave.getRecordingInfo().getRecordingUser().equals(codedDiag.getRecordingInfo().getRecordingUser()))))

				{			
					CodedDiagnosesForAttendanceVoCollection codedDiagnoses = form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList();
					codedDiagnoses.remove(i);
					codedDiagnoses.add(i,codedDiagToSave);
					equals=true;

					form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(codedDiagnoses);
				}
			}
			
			if (!equals)
			{
				CodedDiagnosesForAttendanceVoCollection listDiag = form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList();//.add(diagnosisVo);
				listDiag.add(codedDiagToSave);
				form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(listDiag);
			}
		}
		
		if (form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList().size()==0)
		{
			CodedDiagnosesForAttendanceVoCollection listDiag = new CodedDiagnosesForAttendanceVoCollection();
			listDiag.add(codedDiagToSave);
			form.getGlobalContext().Core.setCodedDiagnosisForAttendanceList(listDiag);
		}
		
		if (Boolean.TRUE.equals(codedDiagToSave.getIsMain()))
		{
			for (int i=0; i<form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList().size();i++)
			{
				if (form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList().get(i).equals(codedDiagToSave))
				{
					continue;
				}
				
				form.getGlobalContext().Core.getCodedDiagnosisForAttendanceList().get(i).setIsMain(false);
			}
		}
		
		engine.close(DialogResult.OK);
		
			
	}
	
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

			
		if (form.chkMain().getValue() && domain.isAlreadyAddedAPrimaryPatientDiagnosis(form.getGlobalContext().Core.getCurrentCareContext()))
		{
			errors.add("You cannot add a main Coded Diagnosis, because a main Patient Diagnosis already exist! ");
		}
	
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	private CodedDiagnosesForAttendanceVo populateDataFromScreen(CodedDiagnosesForAttendanceVo codedDiag)
	{
		if (codedDiag==null)
		{
			codedDiag = new CodedDiagnosesForAttendanceVo();
		}
		else
		{
			codedDiag = (CodedDiagnosesForAttendanceVo) codedDiag.clone();
		}
			
		codedDiag.setDiagnosis((DiagLiteVo) form.qmbDiagnosis().getValue()); //WDEV-19056
		codedDiag.setDiagnosisDescription(form.getLocalContext().getDiagnosisDescription());
		
		if (codedDiag.getID_CodedDiagForAttendance()==null)
		{
			codedDiag.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			codedDiag.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			codedDiag.setRecordingInfo(getRecordinguser());
			codedDiag.setDiagnosedDate(new PartialDate());
			codedDiag.setSourceofInformation(SourceofInformation.CLINICALCONTACT);
		}
		
		codedDiag.setIsMain(form.chkMain().getValue());
		codedDiag.setDiagLaterality(form.cmbLaterality().getValue() != null ? form.cmbLaterality().getValue():null); //WDEV-19056
		
		if( form.cmbStatus().getValue() != null )
		{
			CodedDiagnosisStatusVoCollection voColl = codedDiag.getStatusHistory();
			if (voColl == null)
				voColl = new CodedDiagnosisStatusVoCollection();
			
			CodedDiagnosisStatusVo status = new CodedDiagnosisStatusVo();
			status.setAuthoringMOS((MemberOfStaffLiteVo) form.ccRecordingUser().getValue());
			status.setAuthoringDateTime(form.dtimRecordingDateTime().getValue());
			status.setStatus(form.cmbStatus().getValue());
			
			if (codedDiag.getCurrentStatus() == null)
			{
				voColl.add(status);
				codedDiag.setStatusHistory(voColl);
				codedDiag.setCurrentStatus(status);
			}
			else
			{
				if (codedDiag.getCurrentStatus().getStatusIsNotNull() && codedDiag.getCurrentStatus().getStatus().getId() != form.cmbStatus().getValue().getId())
				{
					
					voColl.add(status);
					codedDiag.setStatusHistory(voColl);
					codedDiag.setCurrentStatus(status);
				}
			}
		}
		
		
		return codedDiag;
	}
	private RecordingUserInformationVo getRecordinguser()
	{
		RecordingUserInformationVo recordingInfo = new RecordingUserInformationVo();
		recordingInfo.setRecordingDateTime(form.dtimRecordingDateTime().getValue());
		recordingInfo.setRecordingUser((MemberOfStaffLiteVo) form.ccRecordingUser().getValue());
		
		return recordingInfo;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
