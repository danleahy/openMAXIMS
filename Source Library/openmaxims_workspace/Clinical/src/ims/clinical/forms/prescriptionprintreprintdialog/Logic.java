//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.prescriptionprintreprintdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.EDPrescriptionForPrintReprintVo;
import ims.emergency.vo.PrescriptionPrintDetailsVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer PRESCRIPTION_REPORT_IMSID = new Integer(351);
	
	private static final int PRINT_PRESCRIPTION_ACTION = 5630008;
	private static final int REPRINT_PRESCRIPTION_ACTION = 5630009;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);
		open();
	}
	private void open()
	{
		if (form.getGlobalContext().Emergency.getEDPrescriptionRef() != null)
			form.getLocalContext().setPrescriptionForPrint(domain.getPrescriptionForPrint(form.getGlobalContext().Emergency.getEDPrescriptionRef()));
		
	}
	
	protected void onBtnPreviewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateReportConfigFlags())
		{
			if(printPrescription(form.getLocalContext().getbReprintMode(),true))
				engine.openUrl(form.getLocalContext().getReportPreviewURL());
		}
	}
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateReportConfigFlags())
		{
			if(printPrescription(false,false))
				engine.close(DialogResult.OK);
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnReprintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateReportConfigFlags())
		{
			if(printPrescription(true, false))
				engine.close(DialogResult.OK);
		}
	}
	@SuppressWarnings("unchecked")
	private void initialize(Object[] args)
	{
		if (args != null && args.length > 0)
		{
			if (args.length >= 1 && args[0] instanceof Boolean)
			{
				form.getLocalContext().setbReprintMode((Boolean) args[0]);
				setLabelsAndControlsMode(form.getLocalContext().getbReprintMode());
			}
			
			if (args.length >= 2 && args[1] instanceof ArrayList)
			{
				setButtonsMode(((ArrayList<Integer>) args[1]).toArray(new Integer[((ArrayList<Integer>) args[1]).size()]));
			}
		}
		initializePrinterCC();
		form.getLocalContext().setReportPreviewURL(null);
		form.getGlobalContext().Core.setImsReportId(PRESCRIPTION_REPORT_IMSID);
		
		
	}
	
	private void setButtonsMode(Integer[] array)
	{
		boolean enablePrint = true;
		boolean enableReprint = true;
		if (array != null && array.length > 0)
		{
			for (int i=0; i<array.length;i++)
			{	
				if (array[i] == PRINT_PRESCRIPTION_ACTION)
					enablePrint = false;
				if (array[i] == REPRINT_PRESCRIPTION_ACTION)
					enableReprint = false;
			}	
		}
		form.btnPrint().setEnabled(enablePrint);
		form.btnReprint().setEnabled(enableReprint);
		
	}
	private void initializePrinterCC()
	{
		ILocation selectLoc = engine.getCurrentLocation();
		setLocationLabel(selectLoc);
		form.ccPrinter().initialize(selectLoc, PrinterScope.DEFAULT);
		form.ccPrinter().setIsRequired(true);
		
	}
	private void setLabelsAndControlsMode(boolean isReprint)
	{
		engine.setCaption(isReprint ? "Reprint Prescription" : "Print Prescription");
		form.pnlTitle().setValue(isReprint ? "Reprinting Prescription" : "Printing Prescription");
		
		updateReasonFields(isReprint);
		form.btnPrint().setVisible(isReprint ? false : true);
		form.btnReprint().setVisible(isReprint ? true : false);		
	}
	private void updateReasonFields(boolean isReprint)
	{
		form.lblReason().setVisible(isReprint);
		form.txtReprintReason().setVisible(isReprint);
		form.txtReprintReason().setEnabled(isReprint);
		
	}
	private void setLocationLabel(ILocation selectLoc)
	{	
		if (selectLoc == null)
			return;
		boolean isLocationNameLong = selectLoc.getName().length() > 60;
		form.lblLocationValue().setValue(isLocationNameLong  ? selectLoc.getName().substring(0,60) + "..." : selectLoc.getName());
		form.lblLocationValue().setTooltip(isLocationNameLong ? selectLoc.getName() : "");		
	}
	
	private String[] validateUIControls(boolean isReprintMode)
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		if (form.ccPrinter().getSelectedPrinter() == null)
		{	
			uiErrors.add("Please Select a Printer.");
		}
		if (isReprintMode)
		{	
			if (form.txtReprintReason().getValue() == null || form.txtReprintReason().getValue().length() == 0)
			{
				uiErrors.add("Reason for Reprint is mandatory.");

			}
		}	
		return uiErrors.toArray(new String[uiErrors.size()]);
	}
	private boolean validateReportConfigFlags() 
	{
		String queryServerUrl = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String reportServerUrl = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		ArrayList<String> errors = new ArrayList<String>();
		
		if(queryServerUrl == null || queryServerUrl.length() == 0 || queryServerUrl.equals(ConfigFlag.GEN.QUERY_SERVER_URL.getDefaultValue()))
		{
			errors.add("The configuration flag QUERY_SERVER_URL is not set correctly!");
		}
		
		if(reportServerUrl == null || reportServerUrl.length() == 0 || reportServerUrl.equals(ConfigFlag.GEN.REPORT_SERVER_URL.getDefaultValue()))
		{
			errors.add("The config flag REPORT_SERVER_URL is not set correctly!");
		}
		
		if(errors.size() == 0)
			return true;
		
		engine.showErrors(errors.toArray(new String[errors.size()]));
		
		return false;
	}
	
	private boolean printPrescription(boolean isReprintMode, boolean buildAsURL)
	{
		if (!buildAsURL)
		{	
			String[] errors = validateUIControls(isReprintMode);
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		QueryBuilderClient cl = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		HcpLiteVo currentHCP = (HcpLiteVo) domain.getHcpLiteUser();
		
		Object[] obj = domain.getSystemReportAndTemplate(form.getGlobalContext().Core.getImsReportId());

		if(obj == null || obj.length < 2)
		{
			engine.showMessage("Couldn't find the Prescription report and template!");
			return false;
		}

		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The Prescription report has not been deployed!");
			return false;
		}
		
		cl.addSeed(new SeedValue("EDPrescription_ID", form.getLocalContext().getPrescriptionForPrint().getID_EDPrescription(), Integer.class));
		cl.addSeed(new SeedValue("ATTENDANCE_ID", form.getLocalContext().getPrescriptionForPrint().getAttendance().getID_CareContext(), Integer.class));
		cl.addSeed(new SeedValue("EPISODE_ID", form.getLocalContext().getPrescriptionForPrint().getEpisode().getID_EpisodeOfCare(), Integer.class));
		cl.addSeed(new SeedValue("PRESCRIBER_ID", currentHCP != null ? currentHCP.getIMosId() : null , Integer.class));
		cl.addSeed(new SeedValue("ISREPRINT", isReprintMode, Boolean.class));
		
		String url = null;
		
		EDPrescriptionForPrintReprintVo prescToUpdateVo = (EDPrescriptionForPrintReprintVo) form.getLocalContext().getPrescriptionForPrint().clone();
		PrescriptionPrintDetailsVo printDetailsVo = getPrintDetails(isReprintMode);
		boolean isNotYetPrinted = prescToUpdateVo.getIsPrinted() == null;
		if (!buildAsURL)
		{	
			if (prescToUpdateVo.validate() != null && prescToUpdateVo.validate().length > 0)
			{
				engine.showErrors(prescToUpdateVo.validate());
				return false;
			}
			if (printDetailsVo.validate() != null && printDetailsVo.validate().length > 0)
			{
				engine.showErrors(printDetailsVo.validate());
				return false;
			}
		}
		try
		{
			if(buildAsURL)
			{
				url = cl.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1);

			}
			else
			{
				cl.buildReport((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, form.ccPrinter().getSelectedPrinter().getIPrinterName(), 1);

			}
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Error while " +  (buildAsURL ? "previewing" : "printing") + " the prescription for patient '" + form.getGlobalContext().Core.getPatientShort().getISelectedPatientName() + "': " + e.getMessage());
			return false;
		}
		if (buildAsURL)
		{
			form.getLocalContext().setReportPreviewURL(url);
			return true;
		}
		else
		{	
			try
			{
				form.getLocalContext().setPrescriptionForPrint(domain.savePrescriptionAndUpdatePrintHistory(prescToUpdateVo,printDetailsVo,isReprintMode));
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				engine.close(DialogResult.ABORT);
				return false;
			}
			catch (StaleObjectException ex)
			{
				if (!isReprintMode &&  isNotYetPrinted)
					engine.showMessage(ex.getMessage(), "Warning", MessageButtons.OK,MessageIcon.WARNING);
				else
				{	
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					engine.close(DialogResult.ABORT);
				}	
				return false;
			}
			
			
		}
		form.getGlobalContext().Emergency.setEDPrescriptionRef(form.getLocalContext().getPrescriptionForPrint());
		return true;
	}
	
	private PrescriptionPrintDetailsVo getPrintDetails(boolean reprintMode)
	{
		PrescriptionPrintDetailsVo printDetailsVo = new PrescriptionPrintDetailsVo();
		printDetailsVo.setAuthoringInfo(populateAuthoringInfo());
		printDetailsVo.setReprintReason(reprintMode ? form.txtReprintReason().getValue() : null);
		
		return printDetailsVo;
	}
	private AuthoringInformationVo populateAuthoringInfo()
	{
		AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
		authoringInfo.setAuthoringHcp((HcpLiteVo)domain.getHcpLiteUser());
		authoringInfo.setAuthoringDateTime(new DateTime());
		
		return authoringInfo;
		
	}
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result)throws PresentationLogicException
	{
		if (DialogResult.OK.equals(result))
		{
			form.getLocalContext().setbReprintMode(true);
			setLabelsAndControlsMode(form.getLocalContext().getbReprintMode());
			open();
		}
	}
}
