//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.patientdocumentsearchdialog;

import ims.clinical.forms.patientdocumentsearchdialog.GenForm.grdDocumentsRow;
import ims.clinical.vo.LinkPatientDocumentVo;
import ims.clinical.vo.LinkPatientDocumentVoCollection;
import ims.core.documents.vo.PatientDocumentRefVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int PREVIOUS_NUMBER_OFF_DAYS = -14;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void open() 
	{
		if(searchCriteriaIsValid())
			search();
		
		updateControlsState();
	}

	private void initialise() 
	{
		form.dteTo().setValue(new Date());
		form.dteFrom().setValue((new Date()).addDay(PREVIOUS_NUMBER_OFF_DAYS));
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}
	
	private void clearScreen() 
	{
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		
		form.grdDocuments().getRows().clear();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdDocuments().getRows().clear();
		
		if(searchCriteriaIsValid())
			search();
		
		updateControlsState();
	}
	
	private void search() 
	{
		populateScreenFromData(domain.listPatientDocuments(form.getGlobalContext().Core.getPatientShort(), form.dteFrom().getValue(), form.dteTo().getValue()));
	}

	private void populateScreenFromData(LinkPatientDocumentVoCollection documents) 
	{
		form.grdDocuments().getRows().clear();
		
		if(documents == null)
			return;
		
		for(LinkPatientDocumentVo doc : documents)
		{
			addDocumentRow(doc);
		}
	}

	private void addDocumentRow(LinkPatientDocumentVo doc) 
	{
		if(doc == null)
			return;
		
		grdDocumentsRow row = form.grdDocuments().getRows().newRow();
		
		row.setColDate(doc.getRecordingDateTime() != null ? doc.getRecordingDateTime().toString() : null);
		row.setCellColDateTooltip(row.getColDate());
		
		row.setColAuthoring(doc.getAuthoringHCP() != null ? doc.getAuthoringHCP().getIHcpName() : null);
		row.setCellColAuthoringTooltip(row.getColAuthoring());
		
		row.setColSpecialty(doc.getSpecialty() != null ? doc.getSpecialty().getText() : null);
		row.setCellColSpecialtyTooltip(row.getColSpecialty());
		
		row.setColType(doc.getCategory() != null ? doc.getCategory().getText() : null);
		row.setCellColTypeTooltip(row.getColType());
		
		row.setColStatus(doc.getCurrentDocumentStatus()!= null && doc.getCurrentDocumentStatus().getCorrespondenceStatus()!=null ? doc.getCurrentDocumentStatus().getCorrespondenceStatus().getText() : null); //WDEV-18962
		row.setCellColStatusTooltip(row.getColStatus());
		
		row.setColSource(doc.getCreationType() != null ? doc.getCreationType().getText() : null);
		row.setCellColSourceTooltip(row.getColSource());
	
		//WDEV-19422
		row.setColView(form.getImages().Core.View);
		row.setTooltipForColView("View Document");
		
		row.setValue(doc);
	}

	private boolean searchCriteriaIsValid() 
	{
		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			engine.showMessage("Date From cannot be greater than Date To", "Validation error", MessageButtons.OK, MessageIcon.ERROR);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setLinkedPatientDocument(getCheckedDocument());
		engine.close(DialogResult.OK);
	}
	
	private PatientDocumentRefVo getCheckedDocument() 
	{
		for(int i=0; i<form.grdDocuments().getRows().size(); i++)
		{
			if(form.grdDocuments().getRows().get(i).getColSelect())
			{
				return form.grdDocuments().getRows().get(i).getValue();
			}
		}
		
		return null;
	}

	@Override
	protected void onGrdDocumentsGridCheckBoxClicked(int column, grdDocumentsRow row, boolean isChecked) throws PresentationLogicException 
	{
		if(isChecked)
			uncheckTheOtherRows(row.getValue());
		
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.btnLink().setVisible(getCheckedDocument() != null);
	}

	private void uncheckTheOtherRows(LinkPatientDocumentVo selectedDocument) 
	{
		if(selectedDocument == null)
			return;
		
		for(int i=0; i<form.grdDocuments().getRows().size(); i++)
		{
			if(!selectedDocument.equals(form.grdDocuments().getRows().get(i).getValue()))
			{
				form.grdDocuments().getRows().get(i).setColSelect(false);
			}
		}
	}

	//WDEV-19422
	@Override
	protected void onGrdDocumentsGridButtonClicked(int column, grdDocumentsRow row) throws PresentationLogicException
	{
		engine.open(form.getForms().Core.DocumentPreview, new Object[] {row.getValue()});
	}
}
