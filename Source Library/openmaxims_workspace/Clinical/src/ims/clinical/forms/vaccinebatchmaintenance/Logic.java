//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.62 build 3012.31808)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.vaccinebatchmaintenance;

import ims.clinical.forms.vaccinebatchmaintenance.GenForm.grdBatchListRow;
import ims.core.vo.VaccineLiteVo;
import ims.core.vo.VaccineLiteVoCollection;
import ims.core.vo.VaccineManufacturerBatchVo;
import ims.core.vo.VaccineManufacturerBatchVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		form.grdBatchList().getRows().clear();
	}
	
	private VaccineManufacturerBatchVoCollection sortVaccine(VaccineManufacturerBatchVoCollection listVaccineBatch) 
	{
		boolean shouldStop = false;
		while(!shouldStop)
		{
			shouldStop = true;
			for(int i=0; i<listVaccineBatch.size()-1; i++)
			{
				if(listVaccineBatch.get(i).compareTo(listVaccineBatch.get(i+1)) > 0)
				{
					VaccineManufacturerBatchVo vaccTemp = listVaccineBatch.get(i);
					listVaccineBatch.set(i, listVaccineBatch.get(i+1));
					listVaccineBatch.set(i+1, vaccTemp);
					shouldStop = false;
				}
				else if(listVaccineBatch.get(i).compareTo(listVaccineBatch.get(i+1)) == 0)
				{
					if(listVaccineBatch.get(i).getExpiryDate() != null && listVaccineBatch.get(i+1).getExpiryDate() != null && listVaccineBatch.get(i).getExpiryDate().compareTo(listVaccineBatch.get(i+1).getExpiryDate()) < 0)
					{
						VaccineManufacturerBatchVo vaccTemp = listVaccineBatch.get(i);
						listVaccineBatch.set(i, listVaccineBatch.get(i+1));
						listVaccineBatch.set(i+1, vaccTemp);
						shouldStop = false;
					}
				}
			}
		}
		return listVaccineBatch;
	}
	
	private void initialize() 
	{
		form.getLocalContext().setcanSearch(false);
	}
	
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance() 
	{
		form.getLocalContext().setlastRecord(new VaccineManufacturerBatchVo());
		form.grdBatchList().setValue(null);
		form.setMode(FormMode.EDIT);
		populateScreenFromData(null);
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save()) 
		{
			search();
		}
	}
	
	private boolean save()
	{
		VaccineManufacturerBatchVo vaccineNew = populateDataFromScreen(form.getLocalContext().getlastRecord());
		
		String [] errors = vaccineNew.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			vaccineNew = domain.save(vaccineNew);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			search();
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		form.getLocalContext().setlastRecord(vaccineNew);
		return true;
	}
	
	protected ims.core.vo.VaccineManufacturerBatchVo populateDataFromScreen(VaccineManufacturerBatchVo vaccNew)
	{
		vaccNew = super.populateDataFromScreen(vaccNew);
		if(form.ctnBatchDetails().qmbName().getValue() != null)
		{
			vaccNew.setVaccine(form.ctnBatchDetails().qmbName().getValue());
		}
		return vaccNew;
		
	}
	
	private void newParentNode(VaccineManufacturerBatchVo vaccineNew) 
	{
		if(vaccineNew.getVaccine() != null)
		{
			GenForm.grdBatchListRow parentRow = form.grdBatchList().getRows().newRow();
			parentRow.setColVaccine(vaccineNew.getVaccine().getVaccineName());
			parentRow.setValue(vaccineNew.getVaccine());
			parentRow.setBackColor(Color.Beige);
			parentRow.setExpanded(true);
			parentRow.setSelectable(false);
			form.grdBatchList().setValue(vaccineNew);
			newChildNode(parentRow, vaccineNew);
		}
	}
	
	private void newChildNode(grdBatchListRow parentRow, VaccineManufacturerBatchVo vaccineNew) 
	{
		GenForm.grdBatchListRow childRow = parentRow.getRows().newRow(form.getLocalContext().getlastRecordIsNotNull() && vaccineNew.equals(form.getLocalContext().getlastRecord()));
		populateChildNode(childRow, vaccineNew);	
	}
	
	private void populateChildNode(grdBatchListRow childRow, VaccineManufacturerBatchVo vaccineNew) 
	{
		if(vaccineNew == null)
			return;
		if(vaccineNew.getBatchNumber() != null)
		{
			childRow.setColVaccine(vaccineNew.getBatchNumber());
		}
		if(vaccineNew.getExpiryDate() != null)
		{
			childRow.setColExpiryDate(vaccineNew.getExpiryDate().toString());
		}
		if(vaccineNew.getStatus()!= null)
		{
			childRow.setColBatchStatus(vaccineNew.getStatus().getImage());
		}
		if(vaccineNew.getManufacturerIsNotNull())
		{
			childRow.setColManufacturer(vaccineNew.getManufacturer().getText());
		}
		childRow.setValue(vaccineNew);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		cancelInstance();
	}
	
	private void cancelInstance() 
	{
		if(form.getLocalContext().getlastRecord() != null && form.getLocalContext().getlastRecord().countFieldsWithValue() == 0)
		{
			form.getLocalContext().setlastRecord(null);
		}
		search();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.VaccineBatchMaintenance.ADD:
				newInstance();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.VaccineBatchMaintenance.EDIT:
				updateInstance();
				break;
		}
	}
	
	@Override
	protected void onImbClearClick() throws PresentationLogicException 
	{
		clearSearch();
		//WDEV-18169
		clearScreen();
		updateControlState();
	}
	
	private void clearSearch() 
	{
		form.txtSearchName().setValue(null);
		form.dteFromExpiryDate().setValue(null);
		form.dteToExpiryDate().setValue(null);
		form.cmbSearchStatus().setValue(null);
		form.txtSearchNumber().setValue(null);
		form.cmbSearchManufacturer().setValue(null);
		form.grdBatchList().getRows().clear();
		form.getLocalContext().setlastRecord(null);
		form.getLocalContext().setcanSearch(false);
	}
	
	@Override
	protected void onImbSearchClick() throws PresentationLogicException 
	{
		form.getLocalContext().setcanSearch(true);
		search();
	}
	
	private void search() 
	{
		form.grdBatchList().getRows().clear();
		clearScreen();
		updateControlState();
		
		if(form.getLocalContext().getcanSearchIsNotNull() && form.getLocalContext().getcanSearch())
		{
			if(canSearch())
			{
				VaccineManufacturerBatchVoCollection listVaccineBatch = domain.list(form.txtSearchName().getValue(), form.dteFromExpiryDate().getValue(), form.dteToExpiryDate().getValue(), form.cmbSearchStatus().getValue(), form.cmbSearchManufacturer().getValue(), form.txtSearchNumber().getValue());
				//WDEV-18169
				if (listVaccineBatch == null || listVaccineBatch.size() == 0)
				{
					engine.showMessage("No records found.");
					return;
				}
				listVaccineBatch = sortVaccine(listVaccineBatch);
				
				populateGrid(listVaccineBatch);	
				if(form.grdBatchList().getValue() != null)
				{
					if(form.getLocalContext().getlastRecordIsNotNull())
					{
						form.getLocalContext().setlastRecord(domain.get(form.getLocalContext().getlastRecord()));
					}
					populateScreenFromData(form.getLocalContext().getlastRecord());
				}
				else
				{
					form.getLocalContext().setlastRecord(null);
				}
			}
		}
		form.setMode(FormMode.VIEW);
	}
	
	private boolean canSearch() 
	{
		if(form.txtSearchName().getValue() == null && form.txtSearchNumber().getValue() == null && form.cmbSearchManufacturer().getValue() == null && form.cmbSearchStatus().getValue() == null && form.dteFromExpiryDate().getValue() == null && form.dteToExpiryDate().getValue() == null)
		{
			engine.showMessage("Please enter at least one search criteria.");
			form.getLocalContext().setcanSearch(false);
			return false;
		}
		if(form.dteFromExpiryDate().getValue() != null && form.dteToExpiryDate().getValue() != null 
				&& form.dteFromExpiryDate().getValue().isGreaterThan(form.dteToExpiryDate().getValue()))
		{
			engine.showMessage("Expiry From Date can not be greater than Expiry To Date.");
			form.getLocalContext().setcanSearch(false);
			return false;
		}
		return true;
	}
	
	private void populateGrid(VaccineManufacturerBatchVoCollection listVaccineBatch) 
	{
		boolean existParent = false;
		for(int i=0; i<listVaccineBatch.size(); i++)
		{
			existParent = false;
			for(int j=0; j<form.grdBatchList().getRows().size(); j++)
			{
				if(form.grdBatchList().getRows().get(j).getValue() instanceof VaccineLiteVo && form.grdBatchList().getRows().get(j).getValue().compareTo(listVaccineBatch.get(i).getVaccine()) == 0)
				{
					newChildNode(form.grdBatchList().getRows().get(j), listVaccineBatch.get(i));
					existParent = true;
					break;
				}
			}
			if(existParent == false)
			{
				newParentNode(listVaccineBatch.get(i));
			}
		}
		form.grdBatchList().resetScrollPosition();
	}
	
	@Override
	protected void onFormModeChanged() 
	{
		updateControlState();	
	}
	
	private void updateControlState() 
	{
		form.ctnBatchDetails().setCollapsed(!form.getLocalContext().getlastRecordIsNotNull() && form.grdBatchList().getValue() == null);
		if(form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setVisible(form.getLocalContext().getlastRecordIsNotNull() && form.grdBatchList().getValue() != null);
			form.btnEdit().setEnabled(form.getLocalContext().getlastRecordIsNotNull() && form.grdBatchList().getValue() != null);
		}
		form.getContextMenus().Clinical.getVaccineBatchMaintenanceADDItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().Clinical.getVaccineBatchMaintenanceEDITItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdBatchList().getValue() != null); //WDEV-14680
	}
	
	@Override
	protected void onQmbNameTextSubmited(String value) throws PresentationLogicException
	{
		seachVaccine(value);
	}
	
	private void seachVaccine(String value) {
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}

		VaccineLiteVoCollection coll = null;
		try 
		{
			coll = domain.listVaccineByName(value);
		} catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
		}

		form.ctnBatchDetails().qmbName().setValue(null);
		form.ctnBatchDetails().qmbName().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				VaccineLiteVo vo = coll.get(i);
				form.ctnBatchDetails().qmbName().newRow(vo, vo.getVaccineName());
			}
		}

		if (coll.size() == 1)
		{
			form.ctnBatchDetails().qmbName().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.ctnBatchDetails().qmbName().showOpened();
		}
	}
	
	@Override
	protected void onGrdBatchListSelectionChanged() throws PresentationLogicException 
	{
		getSelectedInstance();
	}
	
	private void getSelectedInstance() 
	{
		if(form.grdBatchList().getValue() instanceof VaccineManufacturerBatchVo)
		{
			form.getLocalContext().setlastRecord((VaccineManufacturerBatchVo) form.grdBatchList().getValue());
			populateScreenFromData(domain.get((VaccineManufacturerBatchVo) form.grdBatchList().getValue()));
		}
		updateControlState();
	}
	
	protected void populateScreenFromData(ims.core.vo.VaccineManufacturerBatchVo value)
	{
		clearScreen();
		super.populateScreenFromData(value);
		
		populateStatusComboBox(value == null ? null : value.getStatus());
		
		if(value != null)
		{
			if(value.getVaccine() != null)
			{
				form.ctnBatchDetails().qmbName().newRow(value.getVaccine(), value.getVaccine().getVaccineName());
				form.ctnBatchDetails().qmbName().setValue(value.getVaccine());
			}
		}
	}
	
	private void populateStatusComboBox(PreActiveActiveInactiveStatus value) 
	{
		form.ctnBatchDetails().cmbStatus().clear();

		PreActiveActiveInactiveStatusCollection statusValues = LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());

		for (int i = 0; i < statusValues.size(); i++)
		{
			if (statusValues.get(i) == null)
				continue;

			form.ctnBatchDetails().cmbStatus().newRow(statusValues.get(i), statusValues.get(i).getText(), statusValues.get(i).getImage(), statusValues.get(i).getTextColor());
		}

		if (PreActiveActiveInactiveStatus.ACTIVE.equals(value))
		{
			form.ctnBatchDetails().cmbStatus().removeRow(PreActiveActiveInactiveStatus.PREACTIVE);
		}
		else if (PreActiveActiveInactiveStatus.INACTIVE.equals(value))
		{
			form.ctnBatchDetails().cmbStatus().removeRow(PreActiveActiveInactiveStatus.PREACTIVE);
			//form.ctnBatchDetails().cmbStatus().removeRow(PreActiveActiveInactiveStatus.ACTIVE);
		}

		form.ctnBatchDetails().cmbStatus().setValue(value);
	}
	
	protected void clearScreen()
	{
		super.clearScreen();
		form.ctnBatchDetails().qmbName().clear();
	}
	
	@Override
	protected void onQmbNameValueChanged() throws PresentationLogicException 
	{
		form.ctnBatchDetails().qmbName().free();
	}
	
	@Override
	protected void onGrdBatchListRowExpandCollapse(grdBatchListRow row) throws PresentationLogicException 
	{
		if(row.getValue() instanceof VaccineLiteVo && !row.isExpanded() && form.grdBatchList().getSelectedRow() != null)
		{
			for(int i=0; i<row.getRows().size(); i++)
			{
				if(row.getRows().get(i).getValue() != null && row.getRows().get(i).getValue().equals(form.grdBatchList().getSelectedRow().getValue()))
				{
					form.grdBatchList().setValue(null);
					form.getLocalContext().setlastRecord(null);
					updateControlState();
					clearScreen();
					break;
				}
			}
		}
	}
}
