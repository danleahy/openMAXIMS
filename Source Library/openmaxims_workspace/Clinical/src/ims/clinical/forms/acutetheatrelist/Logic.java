//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.acutetheatrelist;

import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.forms.acutetheatrelist.GenForm.grdTheatreRow;
import ims.clinical.helper.TheatreCaseTimeHelper;
import ims.clinical.vo.AcuteTheatreListBookingAppointmentVo;
import ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection;
import ims.clinical.vo.AcuteTheatreListFilterVo;
import ims.clinical.vo.PeriOpPatientArrivedTimeVo;
import ims.clinical.vo.PeriOpPatientLeftTheatreVo;
import ims.clinical.vo.PeriOpPatientSentTimeVo;
import ims.clinical.vo.PeriOpReadyForDischargeVo;
import ims.clinical.vo.PeriOpReadyForSurgeryTimeVo;
import ims.clinical.vo.PeriOpSafetyBriefTimeVo;
import ims.clinical.vo.PeriOpSurgeryStartTimeVo;
import ims.clinical.vo.PeriOpSurgeryStopTimeVo;
import ims.clinical.vo.PeriOpTimeOutCompleteVo;
import ims.clinical.vo.PeriOpTimeOutOfRecoveryVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.BookingAppointmentTheatreVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Sch_SessionLiteVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.Sch_Session_Appointment_OrderVo;
import ims.scheduling.vo.SessionMoveVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int SAFETY_BRIEF_DELAY_MINS = -15;

	@Override
	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(false);
	}

	@Override
	protected void onFormClosing(ims.framework.delegates.CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getTimers().gettimerSearch().setEnabled(false);
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void displaySessions()
	{
		form.cmbTheatre().clear();

		if (((form.cmbHospital().getValue() != null || form.cmbLocation().getValue() != null) || (form.ccListOwner().getValue() != null && form.ccListOwner().getValue() instanceof IMos)) && form.dteTheatre().getValue() != null)
		{
			SessionShortVoCollection listSessions = domain.listSession(form.dteTheatre().getValue(), (HcpRefVo) form.ccListOwner().getValue(), form.cmbHospital().getValue(), form.cmbLocation().getValue() , form.cmbSessionType().getValue(), form.cmbListType().getValue()); // wdev-19419
			for (SessionShortVo item : listSessions)
			{
				form.cmbTheatre().newRow(item, item.toString());
			}
		}
	}

	private void open()
	{
		if (form.getGlobalContext().Clinical.getAcuteTheatreListFilterVoIsNotNull())
		{
			searchAutomatically();
		}
		else //WDEV-22719
		{
			form.dteTheatre().setValue(new Date());
			displaySessions();
		}

		if (!reSelectRow())
		{
			clearInstanceControls();
			updateControlState();
			updateContextMenus();
		}
	}

	private boolean reSelectRow()
	{
		if (form.getLocalContext().getSelectedRowIsNotNull())
		{
			form.grdTheatre().setValue(form.getLocalContext().getSelectedRow().getValue());
			
			if (form.grdTheatre().getValue() == null)
				return false;
			
			grdTheatreSelectionChanged();
			return true;
		}

		return false;
	}

	private void searchAutomatically()
	{
		AcuteTheatreListFilterVo voCriteria = form.getGlobalContext().Clinical.getAcuteTheatreListFilterVo();

		form.cmbHospital().setValue(voCriteria.getHospitalIsNotNull() ? (LocShortMappingsVo) voCriteria.getHospital() : null);
		form.ccListOwner().setValue(voCriteria.getListownerIsNotNull() ? (IMos) voCriteria.getListowner() : null);
		form.dteTheatre().setValue(voCriteria.getSessionDate());
		form.cmbSessionType().setValue(voCriteria.getSessionType());
		form.cmbListType().setValue(voCriteria.getListType());
		form.cmbLocation().setValue(voCriteria.getTheatreLocationIsNotNull() ? (LocShortMappingsVo) voCriteria.getTheatreLocation() : null);
		
		displaySessions();

		if (voCriteria.getProfileIsNotNull())
		{
			form.cmbTheatre().setValue(voCriteria.getProfile());
			if (form.cmbTheatre().getValue() == null)
			{
				form.cmbTheatre().newRow(voCriteria.getProfile(), voCriteria.getProfile().toString());
				form.cmbTheatre().setValue(voCriteria.getProfile());
			}
		}
		search();

		if (voCriteria.getWasTimerOnIsNotNull() && voCriteria.getWasTimerOn())
		{
			form.getLocalContext().setWasTimerEnabled(true);
			toggleTimer(false);
		}
	}

	private void toggleTimer(boolean fromButton)
	{
		if (fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			if (!validateSearch())
				return;
		}

		boolean reinstateTimer = form.getLocalContext().getWasTimerEnabled();

		if (form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Acute Theatre List");
			form.getLocalContext().setWasTimerEnabled(false);
			if (form.getGlobalContext().Clinical.getAcuteTheatreListFilterVoIsNotNull())
				form.getGlobalContext().Clinical.getAcuteTheatreListFilterVo().setWasTimerOn(false);
		}
		else if (!form.getTimers().gettimerSearch().isEnabled())
		{
			if (fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of Acute Theatre List");
				form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);

				form.getLocalContext().setWasTimerEnabled(true);
				if (form.getGlobalContext().Clinical.getAcuteTheatreListFilterVoIsNotNull())
					form.getGlobalContext().Clinical.getAcuteTheatreListFilterVo().setWasTimerOn(true);

				form.imbAutoRefresh().setEnabled(true);
			}
		}

		boolean enableControls = !form.getTimers().gettimerSearch().isEnabled();

		form.cmbHospital().setEnabled(enableControls);
		form.dteTheatre().setEnabled(enableControls);
		form.ccListOwner().setEnabled(enableControls);
		form.cmbSessionType().setEnabled(enableControls);
		form.cmbListType().setEnabled(enableControls);
		form.cmbTheatre().setEnabled(enableControls);
		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);
		form.cmbLocation().setEnabled(enableControls);
		form.btnSortTheatre().setEnabled(enableControls);
		
		if(!enableControls)
		{
			form.btnCaseDetails().setEnabled(false);
			form.btnRecoveryDetails().setEnabled(false);
			form.btnSessionDetails().setEnabled(false);
			form.btnSortTheatre().setEnabled(false);
			form.btnMultipleSafeyBrief().setEnabled(false);
			form.btnViewSafetyBriefDelay().setEnabled(false); //WDEV-22586
			form.btnSessionDebrief().setEnabled(false);

			form.btnSafetyBrief().setEnabled(false);
    		form.btnPatientSentFor().setEnabled(false);
    		form.btnPatientLeftTheatre().setEnabled(false);
    		form.btnPatientArrived().setEnabled(false);
    		form.btnAnaestheticSignIn().setEnabled(false);
    		form.btnAnaesRFS().setEnabled(false);
    		form.btnTimeOutCompleted().setEnabled(false);
    		form.btnSurgeryStart().setEnabled(false);
    		form.btnSurgeryStop().setEnabled(false);
    		form.btnReadyForDischarge().setEnabled(false);
    		form.btnTimeOutOfRecovery().setEnabled(false);
		}
		else
		{
			updateControlState();
		}	
	}

	private void initialise()
	{
		clearInstanceControls();
		form.getContextMenus().Clinical.hideAllAcuteTheatreListMenuItems();
		form.ccListOwner().initialize(MosType.MEDIC);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.grdTheatre().setcolHospnumCaption(dispIdType.getText());

		LocShortMappingsVoCollection voCollHosp = domain.listActiveHospitals(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
		if (voCollHosp != null)
		{
			for (LocShortMappingsVo voLoc : voCollHosp)
				form.cmbHospital().newRow(voLoc, voLoc.getName());
		}
		
		//automatically select current location
		if(engine.getCurrentLocation() != null)
		{
			for (int i = 0; i < form.cmbHospital().getValues().size(); i++)
			{
				if (((LocationRefVo) form.cmbHospital().getValues().get(i)).getID_Location().equals(engine.getCurrentLocation().getID()))
				{
					form.cmbHospital().setValue((LocShortMappingsVo)form.cmbHospital().getValues().get(i));
					loadTheatreLocations();
					break;
				}
			}			
		}

		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.THEATRELIST_TIMER_INTERVAL.getValue());
		form.imbAutoRefresh().setEnabled(false);
		form.getLocalContext().setWasTimerEnabled(false);
		updateStatusButtonsAndTimeLabels();
	}
	
	private void addCommentToSession()//WDEV-22716
	{	
		
		SessionShortVo sessionComments = form.cmbTheatre().getValue();

		if (sessionComments == null)
			return;

		sessionComments.setSessionComment(form.getGlobalContext().Core.getCommentDialogString());
		
		String[] arrErrors = sessionComments.validate();

		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}


		try
		{
			domain.updateSessionComments(sessionComments);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		form.getGlobalContext().Core.setCommentDialogString(null);
	}
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.CommentDialog) && DialogResult.OK.equals(result))
		{
			addCommentToSession();
		}
		
		//WDEV-22778
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				cancelAndRebook();	
				
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
				{
					form.getLocalContext().setApptToCancel(null);
					return;
				}
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
				form.getGlobalContext().Scheduling.setTheatreService(null);
				form.getGlobalContext().Scheduling.setTheatreProcedure(null);
				form.getGlobalContext().Scheduling.setTheatreConsultant(null);
			}
			
			
		}
		
		open();
		toggleTimer(false);
	}

	//WDEV-22778
	private void cancelAndRebook()
	{
		Booking_AppointmentVo voAppt = cancelAppt(false);
		
		// rebook
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
		{	
			if( voAppt.getTheatreBookingIsNotNull())
				rebookTheatreAppt(domain.getTheatre_Appointment(voAppt));
			return;
		}
	
	}
	
	//WDEV-22778
	private void rebookTheatreAppt(BookingAppointmentTheatreVo voAppt)
	{			
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null  && Boolean.TRUE.equals(voAppt.getRequiresRebook()) && isTheatreAppt
			&& (Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) || Status_Reason.DNA.equals(voAppt.getApptStatus())))
		{
			form.getGlobalContext().Scheduling.setTheatreAppointment(voAppt);

			if(voAppt.getSessionIsNotNull())
				form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSession().getTheatreType());
			
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voAppt);
			
			if(voPsc != null)
			{
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdTheatre().getValue().getPatient()));
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());	
				bookTheatreAppt();
			}
		}
	}
	
	//WDEV-22778
	private void bookTheatreAppt()
	{
		if (isReferralEndOfCare())
			return;

		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
			engine.open(form.getForms().RefMan.BookTheatreDialog);
		else
		{
			PatientElectiveListRefVo patientElectiveList = domain.getPatientElectiveListForAppt(form.getGlobalContext().Scheduling.getTheatreAppointment());
			
			if (patientElectiveList != null)
				engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {patientElectiveList});
			else
				engine.open(form.getForms().RefMan.BookEmergencyTheatre,new Object[] {domain.getPendingEmergencyTheatreForAppt(form.getGlobalContext().Scheduling.getTheatreAppointment())});
				
		}
		
	}
	
	//WDEV-22778
	private boolean isReferralEndOfCare()
	{
		CatsReferralForSessionManagementVo catsReferral = domain.getCatsReferralForAppointment(form.grdTheatre().getValue());
		
		if (catsReferral != null && catsReferral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(catsReferral.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}
	
	//WDEV-22778
	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				AcuteTheatreListBookingAppointmentVo voAppt = form.getLocalContext().getApptToCancel();

				if(voAppt == null)
					return null;

				Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);
				boolean isTheatreAppt = voApptFull.getTheatreBooking() != null;

				if (voApptFull.getApptStatusIsNotNull() && voAppt.getApptStatusIsNotNull()
						&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
				{
					engine.showMessage("The Status of the appointment has already been changed.");
					return null;
				}

				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					// wdev-6034
					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull, Status_Reason.CANCELLED, voApptStatus));

					Appointment_StatusVo cancelApptStatusData = form.getGlobalContext().Scheduling.getApptCancelStatus();

					voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());

					if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
						voApptFull.setRequiresRebook(cancelApptStatusData.getRebookSelected());

					if (Boolean.TRUE.equals(cancelApptStatusData.getCancelTCI()) && Boolean.TRUE.equals(cancelApptStatusData.getCancelledForNonMedicalReason()) && voApptFull.getTheatreBooking() != null && Status_Reason.HOSPITALCANCELLED.equals(cancelApptStatusData.getStatusReason()) && cancelApptStatusData.getStatusChangeDateTimeIsNotNull() && cancelApptStatusData.getStatusChangeDateTime().getDate().equals(cancelApptStatusData.getTCIDate()))
					{
						voApptFull.setDate28DayRuleBreach(new DateTime(voAppt.getAppointmentDate(), voAppt.getApptStartTime()).addDays(28).getDate());					
					}

				}

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return null;
				}

				if (tciCancelation)
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
				else
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Session Management");

				CatsReferralRefVo catsReferral = form.getGlobalContext().RefMan.getCatsReferral();

				domain.updateCatsReferralAdditionalInvStatus(catsReferral, voApptFull);

				//WDEV-22845
				if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI()))
				{
					domain.cancelTCIAndReferralEROD(catsReferral, voApptFull, form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason(), form.getGlobalContext().Scheduling.getApptCancelStatus().getComment(), Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());
				}

				return voApptFull;

			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
		return null;
	}
	
	//WDEV-22778
	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}

	@Override
	protected void onBtnSessionDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		btnSessionDetailsClick();
	}

	private void btnSessionDetailsClick()
	{
		//WDEV-23828
		if (form.cmbTheatre().getValue()==null)
		{
			engine.showMessage("Please select a Theatre Session.");
			return;
		}
				
		if (form.cmbTheatre().getValue() != null)
		{
			form.getGlobalContext().Scheduling.setTheatreSession(form.cmbTheatre().getValue());
		}

		engine.open(form.getForms().Clinical.TheatreSessionDetailsDialog);
	}

	@Override
	protected void onCmbListTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		displaySessions();
		//WDEV-23828
		updateControlState();	
		updateContextMenus();
	}

	@Override
	protected void onImbAutoRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(true);
	}

	@Override
	protected void onBtnSortTheatreClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setTheatreSession(null);
		if (form.cmbTheatre().getValue() != null)
			form.getGlobalContext().Scheduling.setTheatreSession(form.cmbTheatre().getValue());

		engine.open(form.getForms().Scheduling.SortTheatreAppointments);
	}

	@Override
	protected void onCmbSessionTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		displaySessions();
		//WDEV-23828
		updateControlState();	
		updateContextMenus();
	}

	@Override
	protected void onCcListOwnerValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		displaySessions();
		//WDEV-23828
		updateControlState();	
		updateContextMenus();
	}

	@Override
	protected void onGrdTheatreSelectionChanged()
	{
		grdTheatreSelectionChanged();
	}

	private void grdTheatreSelectionChanged()
	{
		clearInstanceControls();
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdTheatre().getValue().getPatient()));
		form.getGlobalContext().Clinical.setTheatreAppointmentRef(form.grdTheatre().getValue());
		form.getGlobalContext().Clinical.setTheatreBookingRef(form.grdTheatre().getValue().getTheatreBooking());
		form.getLocalContext().setSelectedRow(form.grdTheatre().getSelectedRow());
		
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextByAppt(form.grdTheatre().getValue())); //WDEV-21872
	
		loadPeriOPTimes();
		displayPeriOPTimes();
		updateContextMenus();
		updateControlState();
	}

	private void loadPeriOPTimes()
	{
		Booking_AppointmentRefVo appt = form.grdTheatre().getValue();
		form.getLocalContext().setSafetyBrief(domain.getSafetyBriefByAppointment(appt));
		form.getLocalContext().setAnaesRFS(domain.getAnaesRFSByAppointment(appt));
		form.getLocalContext().setAnaestheticSignIn(domain.getPeriOpAnaestheticSignInByAppointment(appt));
		form.getLocalContext().setPatientArrived(domain.getPatientArrivedByAppointment(appt));
		form.getLocalContext().setPatientLeftTheatre(domain.getPatientLeftTheatreByAppointment(appt));
		form.getLocalContext().setPatientSentFor(domain.getPatientSentForByAppointment(appt));
		form.getLocalContext().setReadyForDischarge(domain.getReadyForDischargeByAppointment(appt));
		form.getLocalContext().setSurgeryStart(domain.getSurgeryStartByAppointment(appt));
		form.getLocalContext().setSurgeryStop(domain.getSurgeryStopByAppointment(appt));
		form.getLocalContext().setTimeOutCompleted(domain.getTimeOutCompletedByAppointment(appt));
		form.getLocalContext().setTimeOutOfRecovery(domain.getTimeOutOfRecoveryByAppointment(appt));
		form.getLocalContext().setTimeValidationMap(TheatreCaseTimeHelper.createTimeValidationMap(form.getLocalContext().getSafetyBrief(), form.getLocalContext().getAnaesRFS(), form.getLocalContext().getAnaestheticSignIn(), form.getLocalContext().getPatientArrived(), form.getLocalContext().getPatientLeftTheatre(), form.getLocalContext().getPatientSentFor(), form.getLocalContext().getReadyForDischarge(), form.getLocalContext().getSurgeryStart(), form.getLocalContext().getSurgeryStop(), domain.getTimeIntoRecoveryByAppointment(appt), form.getLocalContext().getTimeOutCompleted(), form.getLocalContext().getTimeOutOfRecovery()));
	}

	private void updateStatusButtonsAndTimeLabels()
	{
		updateRelevantStateButtons();
	}

	private void displayPeriOPTimes()
	{
		if (form.getLocalContext().getSafetyBriefIsNotNull() && form.getLocalContext().getSafetyBrief().getSafetyBriefTimeIsNotNull())
			form.lblSafetyBriefTime().setValue(form.getLocalContext().getSafetyBrief().getSafetyBriefTime().getTime().toString());

		if (form.getLocalContext().getAnaesRFSIsNotNull() && form.getLocalContext().getAnaesRFS().getAnaesthetisedReadyForSurgeryTimeIsNotNull())
			form.lblAnaesRFS().setValue(form.getLocalContext().getAnaesRFS().getAnaesthetisedReadyForSurgeryTime().getTime().toString());

		if (form.getLocalContext().getAnaestheticSignInIsNotNull() && form.getLocalContext().getAnaestheticSignIn().getAnaestheticStartTimeIsNotNull())
			form.lblAnaestheticSignIn().setValue(form.getLocalContext().getAnaestheticSignIn().getAnaestheticStartTime().getTime().toString());

		if (form.getLocalContext().getPatientArrivedIsNotNull() && form.getLocalContext().getPatientArrived().getPatientArrivedTimeIsNotNull())
			form.lblPatientArrived().setValue(form.getLocalContext().getPatientArrived().getPatientArrivedTime().getTime().toString());

		if (form.getLocalContext().getPatientLeftTheatreIsNotNull() && form.getLocalContext().getPatientLeftTheatre().getPatientLeftTheatreTimeIsNotNull())
			form.lblPatientLeftTheatre().setValue(form.getLocalContext().getPatientLeftTheatre().getPatientLeftTheatreTime().getTime().toString());

		if (form.getLocalContext().getPatientSentForIsNotNull() && form.getLocalContext().getPatientSentFor().getPatientSentTimeIsNotNull())
			form.lblSentFor().setValue(form.getLocalContext().getPatientSentFor().getPatientSentTime().getTime().toString());

		if (form.getLocalContext().getReadyForDischargeIsNotNull() && form.getLocalContext().getReadyForDischarge().getReadyForDischargeTimeIsNotNull())
			form.lblReadyForDischarge().setValue(form.getLocalContext().getReadyForDischarge().getReadyForDischargeTime().getTime().toString());

		if (form.getLocalContext().getSurgeryStartIsNotNull() && form.getLocalContext().getSurgeryStart().getSurgeryStartTimeIsNotNull())
			form.lblSurgeryStart().setValue(form.getLocalContext().getSurgeryStart().getSurgeryStartTime().getTime().toString());

		if (form.getLocalContext().getSurgeryStopIsNotNull() && form.getLocalContext().getSurgeryStop().getSurgeryStopTimeIsNotNull())
			form.lblSurgeryStop().setValue(form.getLocalContext().getSurgeryStop().getSurgeryStopTime().getTime().toString());

		if (form.getLocalContext().getTimeOutCompletedIsNotNull() && form.getLocalContext().getTimeOutCompleted().getTimeOutCompletedIsNotNull())
			form.lblTimeOutCompleted().setValue(form.getLocalContext().getTimeOutCompleted().getTimeOutCompleted().getTime().toString());

		if (form.getLocalContext().getTimeOutOfRecoveryIsNotNull() && form.getLocalContext().getTimeOutOfRecovery().getTimeOutOfRecoveryIsNotNull())
			form.lblTimeOutOfRecovery().setValue(form.getLocalContext().getTimeOutOfRecovery().getTimeOutOfRecovery().getTime().toString());
	}

	private void updateRelevantStateButtons() //WDEV-22389
	{
		boolean patientRowSelected = form.grdTheatre().getSelectedRow() != null;
		boolean theatreSessionSelected = form.cmbTheatre().getValue() != null;
		//WDEV-22389
		boolean appointmentInFuture = form.grdTheatre().getValue() != null && form.grdTheatre().getValue().getAppointmentDate()!=null && form.grdTheatre().getValue().getAppointmentDate().isGreaterThan(new Date());
		boolean sessionInTheFutture = form.cmbTheatre().getValue() != null && form.cmbTheatre().getValue().getSessionDate()!=null && form.cmbTheatre().getValue().getSessionDate().isGreaterThan(new Date());
		
		// safety brief time cannot be updated
		form.btnSafetyBrief().setEnabled(patientRowSelected && theatreSessionSelected && form.getLocalContext().getSafetyBrief() == null && !appointmentInFuture && !sessionInTheFutture);

		form.btnPatientSentFor().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnPatientLeftTheatre().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnPatientArrived().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnAnaestheticSignIn().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnAnaesRFS().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnTimeOutCompleted().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnSurgeryStart().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnSurgeryStop().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnReadyForDischarge().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
		form.btnTimeOutOfRecovery().setEnabled(patientRowSelected && theatreSessionSelected && !appointmentInFuture && !sessionInTheFutture);
	}

	@Override
	protected void onDteTheatreValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		displaySessions();
		updateControlState();
		//WDEV-23828	
		updateContextMenus();
	}

	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadTheatreLocations();
		displaySessions();
		//WDEV-23828
		updateControlState();	
		updateContextMenus();
	}

	private void loadTheatreLocations()
	{
		form.cmbLocation().clear();
		
		if(form.cmbHospital().getValue() == null)
			return;
		
		LocShortMappingsVoCollection theatres = domain.listTheatresForHospital(form.cmbHospital().getValue());
		if(theatres != null) 
		{
			for(LocShortMappingsVo val : theatres)
				form.cmbLocation().newRow(val, val.toString());
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearInstanceControls();
		clearContexts();
		//WDEV-21776
		form.getGlobalContext().Clinical.setAcuteTheatreListFilterVo(null);
		updateContextMenus();
		updateControlState();
		form.imbAutoRefresh().setEnabled(false);
		form.getLocalContext().setSelectedRow(null);
	}

	private void updateControlState()
	{
		//WDEV-22389
		boolean appointmentInFuture = form.grdTheatre().getValue() != null && form.grdTheatre().getValue().getAppointmentDate()!=null && form.grdTheatre().getValue().getAppointmentDate().isGreaterThan(new Date());
		boolean sessionInTheFutture = form.cmbTheatre().getValue() != null && form.cmbTheatre().getValue().getSessionDate()!=null && form.cmbTheatre().getValue().getSessionDate().isGreaterThan(new Date());
		boolean appointmentsFromGridInFuture = form.grdTheatre().getRows().size()>0 && form.grdTheatre().getRows().get(0)!=null && form.grdTheatre().getRows().get(0).getValue()!=null && form.grdTheatre().getRows().get(0).getValue().getAppointmentDateIsNotNull() && form.grdTheatre().getRows().get(0).getValue().getAppointmentDate().isGreaterThan(new Date());		
		Sch_SessionRefVo sessionFromApptsFromGrid = form.grdTheatre().getRows().size()>0 && form.grdTheatre().getRows().get(0)!=null && form.grdTheatre().getRows().get(0).getValue()!=null ? form.grdTheatre().getRows().get(0).getValue().getSession() : null;
		
		form.btnCaseDetails().setEnabled(form.grdTheatre().getValue() != null && !appointmentInFuture && !sessionInTheFutture);
		form.btnRecoveryDetails().setEnabled(form.grdTheatre().getValue() != null && !appointmentInFuture && !sessionInTheFutture);
		form.btnSessionDetails().setEnabled(form.cmbTheatre().getValue() != null && !sessionInTheFutture && (form.grdTheatre().getValue()==null || !appointmentInFuture));
		form.btnSortTheatre().setEnabled(form.cmbTheatre().getValue() != null);
		form.btnMultipleSafeyBrief().setEnabled(form.grdTheatre().getRows().size() > 0 && form.cmbTheatre().getValue()!=null && !appointmentsFromGridInFuture && !sessionInTheFutture && sessionFromApptsFromGrid!=null && sessionFromApptsFromGrid.getID_Sch_Session().equals( form.cmbTheatre().getValue().getID_Sch_Session()));
		form.btnSessionDebrief().setEnabled(form.cmbTheatre().getValue() != null && !sessionInTheFutture && (form.grdTheatre().getValue()==null || !appointmentInFuture));

		form.btnViewSafetyBriefDelay().setEnabled(form.cmbTheatre().getValue() != null && !sessionInTheFutture && form.cmbTheatre().getValue().getSafetyBriefDelayReasonIsNotNull() && (form.grdTheatre().getValue()==null || !appointmentInFuture)); //WDEV-22586
		
		//WDEV-22944
		form.imbSessionMoveDetails().setVisible(form.cmbTheatre().getValue()!=null && (form.cmbTheatre().getValue().getSessionCommentIsNotNull() || (form.cmbTheatre().getValue().getSessionMoveIsNotNull() && form.cmbTheatre().getValue().getSessionMove().size()>0))); 
		form.imbSessionMoveDetails().setEnabled(false);
		
		updateRelevantStateButtons();
	}

	private void clearContexts()
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Clinical.setTheatreAppointmentRef(null);
		form.getGlobalContext().Scheduling.setTheatreSession(null);
		form.getGlobalContext().Clinical.setTheatreBookingRef(null);

		form.getLocalContext().setSafetyBrief(null);
		form.getLocalContext().setAnaesRFS(null);
		form.getLocalContext().setAnaestheticSignIn(null);
		form.getLocalContext().setPatientArrived(null);
		form.getLocalContext().setPatientLeftTheatre(null);
		form.getLocalContext().setPatientSentFor(null);
		form.getLocalContext().setReadyForDischarge(null);
		form.getLocalContext().setSurgeryStart(null);
		form.getLocalContext().setSurgeryStop(null);
		form.getLocalContext().setTimeOutCompleted(null);
		form.getLocalContext().setTimeOutOfRecovery(null);
	}

	private void clearSearchCriteria()
	{
		form.grdTheatre().getRows().clear();
		form.ccListOwner().setValue(null);
		form.dteTheatre().setValue(null);
		form.cmbTheatre().setValue(null);
		form.cmbTheatre().clear();
		form.cmbHospital().setValue(null);
		form.cmbSessionType().setValue(null);
		form.cmbLocation().clear();
	}

	private void clearInstanceControls()
	{
		form.lblAnaestheticSignIn().setValue(null);
		form.lblAnaesRFS().setValue(null);
		form.lblPatientArrived().setValue(null);
		form.lblPatientLeftTheatre().setValue(null);
		form.lblReadyForDischarge().setValue(null);
		form.lblSafetyBriefTime().setValue(null);
		form.lblSentFor().setValue(null);
		form.lblSurgeryStart().setValue(null);
		form.lblSurgeryStop().setValue(null);
		form.lblTimeOutCompleted().setValue(null);
		form.lblTimeOutOfRecovery().setValue(null);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}

	private void search()
	{
		boolean searchPerformed = true;

		form.grdTheatre().getRows().clear();
		form.getLocalContext().setMessageBoxID(null);

		if (validateSearch())
		{
			form.getLocalContext().setHasTheatreSessionComboChange(false);//WDEV-22716	
			storeSearchCriteria();
			loadAppointments();
		}
		else
			searchPerformed = false;

		form.imbAutoRefresh().setEnabled(searchPerformed);
		updateControlState();
		updateContextMenus();
		//WDEV-21776
		clearInstanceControls();
		clearContexts();
	}

	private void updateContextMenus()
	{
		form.getContextMenus().Clinical.hideAllAcuteTheatreListMenuItems();
		boolean isRowSelected = form.grdTheatre().getSelectedRow() != null;
		//WDEV-22389
		boolean validAppointmentDate = form.grdTheatre().getValue() != null 
		&& form.grdTheatre().getValue().getAppointmentDate() != null 
		&& form.grdTheatre().getValue().getAppointmentDate().isLessOrEqualThan(new Date());
		
		boolean sessionInTheFutture = form.cmbTheatre().getValue() != null && form.cmbTheatre().getValue().getSessionDate()!=null && form.cmbTheatre().getValue().getSessionDate().isGreaterThan(new Date());
		
		form.getContextMenus().Clinical.getAcuteTheatreListSESSION_DETAILSItem().setVisible(form.cmbTheatre().getValue() != null && !sessionInTheFutture);
		form.getContextMenus().Clinical.getAcuteTheatreListCASE_DETAILSItem().setVisible(isRowSelected && validAppointmentDate && !sessionInTheFutture);
		form.getContextMenus().Clinical.getAcuteTheatreListMOVE_THEATRE_LOCATIONItem().setVisible(validAppointmentDate && form.grdTheatre().getValue() != null && Status_Reason.BOOKED.equals(form.grdTheatre().getValue().getApptStatus()));
		form.getContextMenus().Clinical.getAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem().setVisible(validAppointmentDate && form.grdTheatre().getValue() != null && (Status_Reason.BOOKED.equals(form.grdTheatre().getValue().getApptStatus()) || Status_Reason.ADMITTED.equals(form.grdTheatre().getValue().getApptStatus()) || Status_Reason.DISCHARGED.equals(form.grdTheatre().getValue().getApptStatus())) && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue() && !isAnyTimeRecordedAgainstCase()); //WDEV-22778
		
	}

	//WDEV-22778
	private boolean isAnyTimeRecordedAgainstCase()
	{
		if (form.getLocalContext().getSafetyBrief()!=null 
				|| form.getLocalContext().getAnaesRFS()!=null
				|| form.getLocalContext().getAnaestheticSignIn()!=null
				|| form.getLocalContext().getPatientArrived()!=null
				|| form.getLocalContext().getPatientLeftTheatre()!=null
				|| form.getLocalContext().getPatientSentFor()!=null
				|| form.getLocalContext().getReadyForDischarge()!=null
				|| form.getLocalContext().getSurgeryStart()!=null
				|| form.getLocalContext().getSurgeryStop()!=null
				|| form.getLocalContext().getTimeOutCompleted()!=null
				|| form.getLocalContext().getTimeOutOfRecovery()!=null)
		{
			return true;
		}
		
		return false;
	}

	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();

		boolean valid = true;
		
		if((form.cmbHospital().getValue() == null && form.ccListOwner().getValue() == null))
			uiErrors.add("Please select a Hospital or List Owner");
		if (form.dteTheatre().getValue() == null)
			uiErrors.add("Please select a Date");
		if(form.cmbTheatre().getValue() == null)
			uiErrors.add("Please select a Theatre Session");
		
		if (uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			valid = false;
		}

		return valid;
	}

	private void loadAppointments()
	{
		form.grdTheatre().getRows().clear();
		if (onlyListOwnerIsSelected())
		{
			populateAppointments(domain.listAppointments((HcpRefVo) form.ccListOwner().getValue(), (MemberOfStaffRefVo) domain.getMosUser(), form.dteTheatre().getValue()), null);
		}
		else if (form.cmbTheatre().getValue() != null && form.cmbTheatre().getValue().getID_Sch_Session() != null) // All
		{
			Sch_Session_Appointment_OrderVo voOrder = domain.getSessionOrder(form.cmbTheatre().getValue());
			populateAppointments(domain.listAppointments(form.cmbTheatre().getValue()), voOrder);
		}
		else
		{
			populateAppointments(domain.listAllAppointments(form.getGlobalContext().Clinical.getAcuteTheatreListFilterVo()), null);
		}
	}

	private boolean onlyListOwnerIsSelected()
	{
		return form.ccListOwner().getValue() != null && form.cmbHospital().getValue() == null && form.cmbTheatre().getValue() == null && form.cmbSessionType().getValue() == null;
	}

	private void populateAppointments(AcuteTheatreListBookingAppointmentVoCollection voCollAppts, Sch_Session_Appointment_OrderVo voOrder)
	{
		form.grdTheatre().getRows().clear();
		if (voCollAppts == null || voCollAppts.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}

		if (voOrder != null)
		{
			//WDEV-22392
			BookingAppointmentTheatreVoCollection collAppt = voOrder.getAppointments();
			if (collAppt!=null)
				collAppt.sort(SortOrder.ASCENDING);
			
			for (int i = 0; collAppt!=null && i < collAppt.size(); i++)
			{
				addAppointmentRow(voOrder.getAppointments().get(i).getID_Booking_Appointment(), voCollAppts);
			}
		}
		//WDEV-22392
		else
		{
			for (int i = 0; i<voCollAppts.size(); i++)
			{
				grdTheatreRow row = form.grdTheatre().getRows().newRow();
				populateAppointmentRow(row, voCollAppts.get(i));
			}
		}
			
	}

	private void addAppointmentRow(Integer voApptId, AcuteTheatreListBookingAppointmentVoCollection collection)
	{
		for (AcuteTheatreListBookingAppointmentVo item : collection)
		{
			if (item.getID_Booking_Appointment().equals(voApptId))
			{
				grdTheatreRow row = form.grdTheatre().getRows().newRow();
				populateAppointmentRow(row, item);
			}
		}
	}

	private void populateAppointmentRow(grdTheatreRow row, AcuteTheatreListBookingAppointmentVo item)
	{
		PatientShort voPatShort = item.getPatient();

		if (voPatShort.getDisplayId() != null)
		{
			row.setcolHospnum(voPatShort.getDisplayId().getValue());
		}
		row.setcolSurname(voPatShort.getName().getSurname());
		row.setcolForename(voPatShort.getName().getForename());
		row.setcolSex(voPatShort.getSexIsNotNull() ? voPatShort.getSex().toString() : "");
		row.setcolDob(voPatShort.getDobIsNotNull() ? voPatShort.getDob().toString() : "");

		if (voPatShort.getAssociatedPatientIsNotNull())
			row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());

		if (voPatShort.getDod() != null)
			row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());

		if (item.getTheatreBookingIsNotNull())
		{
			if (item.getApptStartTimeIsNotNull())
				row.setcolTime(item.getApptStartTime().toString());
		}

		if (item.getTheatreBookingIsNotNull())
		{
			if (item.getTheatreBooking().getProcedureIsNotNull())
			{
				row.setcolProcedure(item.getTheatreBooking().getProcedure().getProcedureName());
				StringBuffer strTooltip = new StringBuffer();
				
				strTooltip.append("<b>Procedure</b> - " + item.getTheatreBooking().getProcedure().getProcedureName());
				if(item.getTheatreBooking().getProcLateralityIsNotNull())
					strTooltip.append(" - " + item.getTheatreBooking().getProcLaterality().getText());

				if(item.getProcedureDetailsIsNotNull())
					strTooltip.append("<br><b>Procedure Details</b> - " + item.getProcedureDetails());

				if(item.getCommentsIsNotNull())
					strTooltip.append("<br><b>Comments</b> - " + item.getComments());

				row.setTooltipForcolProcedure(strTooltip.toString());
			}
			if (item.getTheatreBooking().getSecondaryProcedureIsNotNull())
			{
				row.setcolProcedureIcon(form.getImages().RefMan.Procedures16);
				
				String addProcTooltip = "<b>Additional Procedure</b> - " + item.getTheatreBooking().getSecondaryProcedure().getProcedureName();
				if(item.getTheatreBooking().getSecondaryProcLateralityIsNotNull())
					addProcTooltip += " - " + item.getTheatreBooking().getSecondaryProcLaterality().getText();
				
				row.setTooltipForcolProcedureIcon(addProcTooltip);
			}
		}

		if (item.getApptStatusIsNotNull())
		{
			row.setcolStatus(item.getApptStatus().toString());
		}

		if (item.getPatientIsNotNull() && item.getPatient().getWardIsNotNull())
		{
			row.setcolLocation(item.getPatient().getWard().getIItemText());
			row.setTooltipForcolLocation(item.getPatient().getWard().getIItemText());
		}

		if (item != null && item.getTheatreBookingIsNotNull() && item.getTheatreBooking().getAnaestheticTypeIsNotNull())
		{
			row.setcolAnaesthetic(item.getTheatreBooking().getAnaestheticType().getText());
			row.setTooltipForcolAnaesthetic("<b>Anaesthetic Type</b> - " + item.getTheatreBooking().getAnaestheticType().getText());
		}

		if (item.getTheatreBooking().getStateIsNotNull())
			row.setBackColor(item.getTheatreBooking().getState().getColor());

		row.setValue(item);
	}

	private void storeSearchCriteria()
	{
		AcuteTheatreListFilterVo voFilter = new AcuteTheatreListFilterVo();
		voFilter.setProfile(form.cmbTheatre().getValue());
		voFilter.setSessionDate(form.dteTheatre().getValue());
		voFilter.setListowner((HcpRefVo) form.ccListOwner().getValue());
		voFilter.setHospital(form.cmbHospital().getValue());
		voFilter.setSessionType(form.cmbSessionType().getValue());
		voFilter.setWasTimerOn(form.getLocalContext().getWasTimerEnabled());
		voFilter.setListType(form.cmbListType().getValue());
		voFilter.setTheatreLocation(form.cmbLocation().getValue());
		
		form.getGlobalContext().Clinical.setAcuteTheatreListFilterVo(voFilter);
	}

	private void disableRefreshTemporarily()
	{
		if (form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Acute Theatre List");
			form.getLocalContext().setWasTimerEnabled(true);
		}
		else
			form.getLocalContext().setWasTimerEnabled(false);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		disableRefreshTemporarily();
		form.getLocalContext().setMessageBoxID(null);
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.AcuteTheatreList.CASE_DETAILS:
				btnCaseDetailsClick();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.AcuteTheatreList.SESSION_DETAILS:
				btnSessionDetailsClick();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.AcuteTheatreList.MOVE_THEATRE_LOCATION:
				moveAppointment();
				break;
			
			case GenForm.ContextMenus.ClinicalNamespace.AcuteTheatreList.CANCEL_THEATRE_APPOINTMENT:	//WDEV-22778
				
				Booking_AppointmentVo voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.grdTheatre().getValue());
				
				if (voAppt!=null)
				{
					CatsReferralForSessionManagementVo catsReferral = domain.getCatsReferralForAppointment(voAppt);
					form.getGlobalContext().RefMan.setCatsReferral(catsReferral);
				}
				
				cancelTheatreAppointment(voAppt, form.grdTheatre().getValue());
				break;
				
		}
	}

	//WDEV-22778
	private void cancelTheatreAppointment(Booking_AppointmentVo voAppt, AcuteTheatreListBookingAppointmentVo acuteTheatreListBookingAppointmentVo) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null 
			&& voAppt.getApptStatusIsNotNull()
			&& (voAppt.getApptStatus().equals(Status_Reason.BOOKED) || voAppt.getApptStatus().equals(Status_Reason.ADMITTED) || voAppt.getApptStatus().equals(Status_Reason.DISCHARGED)) //WDEV-22778
			&& isTheatreAppt)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
			form.getLocalContext().setApptToCancel(acuteTheatreListBookingAppointmentVo);
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(acuteTheatreListBookingAppointmentVo);
			if(voPsc != null)
			{
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[] {null, isTheatreAppt});
			}
		}
		else if (voAppt != null
			&& voAppt.getApptStatusIsNotNull()
			&& acuteTheatreListBookingAppointmentVo != null
			&& voAppt.getApptStatusIsNotNull()
			&& ! voAppt.getApptStatus().equals(acuteTheatreListBookingAppointmentVo.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");	
		}
	}
	
	private void moveAppointment()
	{
		AcuteTheatreListBookingAppointmentVo appointment = form.grdTheatre().getValue();
		AcuteTheatreListBookingAppointmentVo updatedAppointment = domain.getTheatreAppointment(appointment);
		
		if(appointment != null && updatedAppointment != null && updatedAppointment.getVersion_Booking_Appointment() != appointment.getVersion_Booking_Appointment() )
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		engine.open(form.getForms().Scheduling.MoveAndBookTheatreSlot);
		
	}

	private void btnCaseDetailsClick()
	{
		form.getGlobalContext().Clinical.setIntraOpRecoveryManner(null);
		
		if (form.grdTheatre().getValue() != null && form.grdTheatre().getValue().getSession()!=null) //WDEV-23828
		{
			form.getGlobalContext().Scheduling.setTheatreSession(form.grdTheatre().getValue().getSession());
			Sch_SessionLiteVo schSessionLite = domain.getSessionLite(form.grdTheatre().getValue().getSession());
			form.getGlobalContext().Clinical.setTheatreSessionStartDateTime(schSessionLite!=null ? new DateTime(schSessionLite.getSessionDate(), schSessionLite.getStartTm()) : null);
			engine.open(form.getForms().Clinical.IntraOperativeCaseDetailsDialog);
		}
	}

	@Override
	protected void onBtnAnaestheticSignInClick() throws PresentationLogicException
	{
		if (form.cmbTheatre().getValue() != null)
			form.getGlobalContext().Scheduling.setTheatreSession(form.cmbTheatre().getValue());

		engine.open(form.getForms().Clinical.AnaestheticSignInDialog, new Object[]{form.getLocalContext().getTimeValidationMap()});
	}

	@Override
	protected void onBtnSafetyBriefClick() throws PresentationLogicException
	{
		if(setDelayContextVariables())
			saveSafetyBrief();
	}

	private void saveSafetyBrief()
	{		
		PeriOpSafetyBriefTimeVo safetyBrief = form.getLocalContext().getSafetyBrief();
		
		//WDEV-23825
		if (safetyBrief!=null && form.grdTheatre().getValue()!=null && domain.getSafetyBriefByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		if (safetyBrief == null)
			safetyBrief = new PeriOpSafetyBriefTimeVo();

		safetyBrief.setSafetyBriefTime(new DateTime());
		safetyBrief.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		safetyBrief.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = safetyBrief.validate(validateTime(TheatreCaseTimeHelper.SAFETY_BRIEF, safetyBrief.getSafetyBriefTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveSafetyBrief(safetyBrief, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			//WDEV-23825
			open();
			return;
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		//safety brief delay
		if (form.getGlobalContext().Clinical.getTheatreSessionStartDateTime() != null)
		{
			DateTime sessionDateTime = form.getGlobalContext().Clinical.getTheatreSessionStartDateTime();
			DateTime safetyBriefDateTime = (DateTime) safetyBrief.getSafetyBriefTime().clone();
			
			safetyBriefDateTime.addMinutes(SAFETY_BRIEF_DELAY_MINS);
			
			if(safetyBriefDateTime.isGreaterThan(sessionDateTime))
			{
				int delayedMins = DateTime.minutesDiff(safetyBriefDateTime, sessionDateTime);
				
				engine.open(form.getForms().Clinical.TheatreSafeyBriefDelayDialog, new Object[] {delayedMins});
				return;
			}
		}
		
		

		open();
	}

	private String[] validateTime(Integer state, DateTime dateTime)
	{
		return TheatreCaseTimeHelper.validateTime(state, dateTime, form.getLocalContext().getTimeValidationMap());
	}

	@Override
	protected void onBtnTimeOutOfRecoveryClick() throws PresentationLogicException
	{
		saveTimeOutOfRecovery();
	}

	private void saveTimeOutOfRecovery()
	{	
		PeriOpTimeOutOfRecoveryVo timeOutOfRecovery = form.getLocalContext().getTimeOutOfRecovery();
		
		//WDEV-23825
		if (timeOutOfRecovery!=null && form.grdTheatre().getValue()!=null && domain.getTimeOutOfRecoveryByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
				
		if (timeOutOfRecovery == null)
			timeOutOfRecovery = new PeriOpTimeOutOfRecoveryVo();

		timeOutOfRecovery.setTimeOutOfRecovery(new DateTime());
		timeOutOfRecovery.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		timeOutOfRecovery.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = timeOutOfRecovery.validate(validateTime(TheatreCaseTimeHelper.TIME_OUT_RECOVERY, timeOutOfRecovery.getTimeOutOfRecovery()));

		if (arrErrors != null &&  arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveTimeOutOfRecovery(timeOutOfRecovery, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	@Override
	protected void onBtnSurgeryStopClick() throws PresentationLogicException
	{
		saveSurgeryStop();
	}

	private void saveSurgeryStop()
	{
		PeriOpSurgeryStopTimeVo surgeryStop = form.getLocalContext().getSurgeryStop();
		
		//WDEV-23825
		if (surgeryStop!=null && form.grdTheatre().getValue()!=null && domain.getSurgeryStopByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		if (surgeryStop == null)
			surgeryStop = new PeriOpSurgeryStopTimeVo();

		surgeryStop.setSurgeryStopTime(new DateTime());
		surgeryStop.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		surgeryStop.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = surgeryStop.validate(validateTime(TheatreCaseTimeHelper.SURGERY_STOP, surgeryStop.getSurgeryStopTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveSurgeryStop(surgeryStop, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	private void saveSurgeryStart()
	{
		PeriOpSurgeryStartTimeVo surgeryStart = form.getLocalContext().getSurgeryStart();
		
		//WDEV-23825
		if (surgeryStart!=null && form.grdTheatre().getValue()!=null && domain.getSurgeryStartByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
				
		if (surgeryStart == null)
			surgeryStart = new PeriOpSurgeryStartTimeVo();

		surgeryStart.setSurgeryStartTime(new DateTime());
		surgeryStart.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		surgeryStart.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = surgeryStart.validate(validateTime(TheatreCaseTimeHelper.SURGERY_START, surgeryStart.getSurgeryStartTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveSurgeryStart(surgeryStart, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	@Override
	protected void onBtnReadyForDischargeClick() throws PresentationLogicException
	{
		saveReadyForDischarge();
	}

	@Override
	protected void onBtnPatientLeftTheatreClick() throws PresentationLogicException
	{
		savePatientLeftTheatre();
	}

	private void savePatientLeftTheatre()
	{
		PeriOpPatientLeftTheatreVo patientLeftTheatre = form.getLocalContext().getPatientLeftTheatre();
		
		//WDEV-23825
		if (patientLeftTheatre!=null && form.grdTheatre().getValue()!=null && domain.getPatientLeftTheatreByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
				
		if (patientLeftTheatre == null)
			patientLeftTheatre = new PeriOpPatientLeftTheatreVo();

		patientLeftTheatre.setPatientLeftTheatreTime(new DateTime());
		patientLeftTheatre.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		patientLeftTheatre.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = patientLeftTheatre.validate(validateTime(TheatreCaseTimeHelper.PATIENT_LEFT, patientLeftTheatre.getPatientLeftTheatreTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.savePatientLeftTheatre(patientLeftTheatre, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	@Override
	protected void onBtnTimeOutCompletedClick() throws PresentationLogicException
	{
		saveTimeOutCompleted();
	}

	private void saveTimeOutCompleted()
	{
		PeriOpTimeOutCompleteVo timeOutCompleted = form.getLocalContext().getTimeOutCompleted();
		
		//WDEV-23825
		if (timeOutCompleted!=null && form.grdTheatre().getValue()!=null && domain.getTimeOutCompletedByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
				
		if (timeOutCompleted == null)
			timeOutCompleted = new PeriOpTimeOutCompleteVo();

		timeOutCompleted.setTimeOutCompleted(new DateTime());
		timeOutCompleted.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		timeOutCompleted.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = timeOutCompleted.validate(validateTime(TheatreCaseTimeHelper.TIMEOUT_COMPLTED, timeOutCompleted.getTimeOutCompleted()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			domain.saveTimeOutCompleted(timeOutCompleted, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	@Override
	protected void onBtnSurgeryStartClick() throws PresentationLogicException
	{
		saveSurgeryStart();
	}

	@Override
	protected void onBtnAnaesRFSClick() throws PresentationLogicException
	{
		saveAnaestheticRFS();
	}

	private void saveAnaestheticRFS()
	{		
		PeriOpReadyForSurgeryTimeVo anaesRFS = form.getLocalContext().getAnaesRFS();
		
		//WDEV-23825
		if (anaesRFS!=null && form.grdTheatre().getValue()!=null && domain.getAnaesRFSByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		if (anaesRFS == null)
			anaesRFS = new PeriOpReadyForSurgeryTimeVo();

		anaesRFS.setAnaesthetisedReadyForSurgeryTime(new DateTime());
		anaesRFS.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		anaesRFS.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = anaesRFS.validate(validateTime(TheatreCaseTimeHelper.ANAES_RFS, anaesRFS.getAnaesthetisedReadyForSurgeryTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.saveAnaesthetisedRFS(anaesRFS, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	@Override
	protected void onBtnPatientArrivedClick() throws PresentationLogicException
	{
		savePatientArrived();
	}

	private void savePatientArrived()
	{
		PeriOpPatientArrivedTimeVo patientArrived = form.getLocalContext().getPatientArrived();
		
		//WDEV-23825
		if (patientArrived!=null && form.grdTheatre().getValue()!=null && domain.getPatientArrivedByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		if (patientArrived == null)
			patientArrived = new PeriOpPatientArrivedTimeVo();

		patientArrived.setPatientArrivedTime(new DateTime());
		patientArrived.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		patientArrived.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = patientArrived.validate(validateTime(TheatreCaseTimeHelper.PATIENT_ARRIVED, patientArrived.getPatientArrivedTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.savePatientArrived(patientArrived, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	@Override
	protected void onBtnPatientSentForClick() throws PresentationLogicException
	{
		savePatientSentFor();
	}

	private void savePatientSentFor()
	{		
		PeriOpPatientSentTimeVo patientSentFor = form.getLocalContext().getPatientSentFor();
		
		//WDEV-23825
		if (patientSentFor!=null && form.grdTheatre().getValue()!=null && domain.getPatientSentForByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		if (patientSentFor == null)
			patientSentFor = new PeriOpPatientSentTimeVo();

		patientSentFor.setPatientSentTime(new DateTime());
		patientSentFor.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		patientSentFor.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = patientSentFor.validate(validateTime(TheatreCaseTimeHelper.PATIENT_SENT, patientSentFor.getPatientSentTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.savePatientSentFor(patientSentFor, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	private void saveReadyForDischarge()
	{
		PeriOpReadyForDischargeVo readyForDischarge = form.getLocalContext().getReadyForDischarge();
		
		//WDEV-23825
		if (readyForDischarge!=null && form.grdTheatre().getValue()!=null && domain.getReadyForDischargeByAppointment(form.grdTheatre().getValue())==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
				
		if (readyForDischarge == null)
			readyForDischarge = new PeriOpReadyForDischargeVo();

		readyForDischarge.setReadyForDischargeTime(new DateTime());
		readyForDischarge.setRecordedBy((MemberOfStaffLiteVo) domain.getMosUser());
		readyForDischarge.setTheatreAppointment(form.grdTheatre().getValue());
		String[] arrErrors = readyForDischarge.validate(validateTime(TheatreCaseTimeHelper.READY_FOR_DISCHARGE, readyForDischarge.getReadyForDischargeTime()));

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			domain.savePatientReadyForDischarge(readyForDischarge, form.grdTheatre().getValue().getTheatreBooking());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e1) //WDEV-23825
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	@Override
	protected void onBtnCaseDetailsClick() throws PresentationLogicException
	{
		btnCaseDetailsClick();
	}

	@Override
	protected void onCmbTheatreValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setHasTheatreSessionComboChange(true);//WDEV-22716
		form.imbSessionMoveDetails().setTooltip(getTooltipForSessionMoveDetailsButton(form.cmbTheatre().getValue())); //WDEV-22944
		updateControlState();
		updateContextMenus(); //WDEV-23828
		
	}

	//WDEV-22944
	private String getTooltipForSessionMoveDetailsButton(SessionShortVo selectedSession)
	{
		String strTooltip = "";
		if (selectedSession==null)
		{
			return strTooltip;
		}
		
		strTooltip += selectedSession.getSessionCommentIsNotNull() ? "<b>Session Comment: </b>" + selectedSession.getSessionComment() : "";
		if (strTooltip.length()>0)
		{
			strTooltip+="<br>";
		}
		
		//SessionMoveDetails
		for  (int i=0; selectedSession.getSessionMove()!=null && i<selectedSession.getSessionMove().size(); i++)
		{
			strTooltip +="---------------------------------";
			SessionMoveVo sessionMoveItem = selectedSession.getSessionMove().get(i);
			
			strTooltip += sessionMoveItem.getMoveDateIsNotNull() ? "<br><b>Moved Date: </b>" +  sessionMoveItem.getMoveDate() : "";
			strTooltip += sessionMoveItem.getSystemInformationIsNotNull() && sessionMoveItem.getSystemInformation().getCreationUser()!=null ? "<br><b>Moved By: </b>" +  sessionMoveItem.getSystemInformation().getCreationUser().toString() : "";
			strTooltip += sessionMoveItem.getReasonIsNotNull() ? "<br><b>Moved Reason: </b>" +  sessionMoveItem.getReason() : "";
			strTooltip += sessionMoveItem.getCommentIsNotNull() ? "<br><b>Moved Comment: </b>" +  sessionMoveItem.getComment() : "";
			strTooltip+="<br>";
		}
		
		return strTooltip;
	}

	@Override
	protected void onBtnRecoveryDetailsClick() throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setIntraOpRecoveryManner(true);
		engine.open(form.getForms().Clinical.IntraOperativeCaseDetailsDialog);
	}

	@Override
	protected void onBtnMultipleSafeyBriefClick() throws PresentationLogicException
	{
		if(setDelayContextVariables())
		{
			form.getGlobalContext().Clinical.setAvailableSafetyBriefAppointments(form.grdTheatre().getValues());
			engine.open(form.getForms().Clinical.MultipleSafetyBriefDialog);			
		}
	}

	private boolean setDelayContextVariables()
	{
		if(form.cmbTheatre().getValue() == null)
		{
			engine.showMessage("Please select a TheatreSession");
			return false;
		}
		else
		{
			form.getGlobalContext().Clinical.setTheatreSessionStartDateTime(new DateTime(form.cmbTheatre().getValue().getSessionDate(), form.cmbTheatre().getValue().getStartTm()));
			form.getGlobalContext().Scheduling.setTheatreSession(form.cmbTheatre().getValue());
		}
		
		return true;
	}

	@Override
	protected void onBtnSessionDebriefClick() throws PresentationLogicException
	{
		if (form.cmbTheatre().getValue() != null)
		{
			form.getGlobalContext().Scheduling.setTheatreSession(form.cmbTheatre().getValue());
		}
		engine.open(form.getForms().Clinical.TheatreSessionDebriefDialog);		
	}

	@Override
	protected void onCmbLocationValueChanged() throws PresentationLogicException
	{
		displaySessions();
		//WDEV-23828
		updateControlState();	
		updateContextMenus();
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		search();
	}

	//WDEV-22586
	@Override
	protected void onBtnViewSafetyBriefDelayClick() throws PresentationLogicException
	{
		if (form.cmbTheatre().getValue() != null)
		{
			form.getGlobalContext().Scheduling.setTheatreSession(form.cmbTheatre().getValue());
		}
		engine.open(form.getForms().Clinical.TheatreSafeyBriefDelayDialog, new Object[] {true});	
	}

	//WDEV-23417
	@Override
	protected void onBtnCaseTrackingDashboardClick() throws PresentationLogicException
	{
		if (ConfigFlag.GEN.THEATRE_CASE_TRACKING_DASHBOARD_URL.getValue() == null 
				|| ConfigFlag.GEN.THEATRE_CASE_TRACKING_DASHBOARD_URL .getValue().length() == 0)
		{
			engine.showMessage("THEATRE_CASE_TRACKING_DASHBOARD_URL config flag is not set");
			return;
		}
			
		engine.openDashboard(ConfigFlag.GEN.THEATRE_CASE_TRACKING_DASHBOARD_URL.getValue(), null);	
	}

}
