//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.acutetheatrelist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocShortMappingsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocShortMappingsVo getValue()
		{
			return (ims.core.vo.LocShortMappingsVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocShortMappingsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbListTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.ProfileListType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.ProfileListType getValue()
		{
			return (ims.scheduling.vo.lookups.ProfileListType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.ProfileListType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSessionTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.TheatreType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.TheatreType getValue()
		{
			return (ims.scheduling.vo.lookups.TheatreType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.TheatreType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocShortMappingsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocShortMappingsVo getValue()
		{
			return (ims.core.vo.LocShortMappingsVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocShortMappingsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTheatreComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdTheatreRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTheatreRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolHospnumReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolHospnumReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolHospnumOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolHospnum(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolHospnum()
		{
			return (String)super.row.get(0);
		}
		public void setcolHospnum(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolHospnumTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSurnameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSurnameOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolSurname(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolSurname()
		{
			return (String)super.row.get(1);
		}
		public void setcolSurname(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolSurnameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolForenameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolForenameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolForename(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolForename()
		{
			return (String)super.row.get(2);
		}
		public void setcolForename(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolForenameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSexReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSexReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSexOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolSex(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolSex()
		{
			return (String)super.row.get(3);
		}
		public void setcolSex(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolSexTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolDobReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolDobReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolDobOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolDob(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolDob()
		{
			return (String)super.row.get(4);
		}
		public void setcolDob(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolDobTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolTimeReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolTimeOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolTime(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolTime()
		{
			return (String)super.row.get(5);
		}
		public void setcolTime(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolTimeTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolProcedureReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolProcedureOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolProcedure(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getcolProcedure()
		{
			return (String)super.row.get(6);
		}
		public void setcolProcedure(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolProcedureTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolProcedureIconReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolProcedureIconReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolProcedureIconOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForcolProcedureIcon(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.framework.utils.Image getcolProcedureIcon()
		{
			return (ims.framework.utils.Image)super.row.get(7);
		}
		public void setcolProcedureIcon(ims.framework.utils.Image value)
		{
			super.row.set(7, value);
		}
		public void setCellcolProcedureIconTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setcolLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean iscolLocationReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showcolLocationOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForcolLocation(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getcolLocation()
		{
			return (String)super.row.get(8);
		}
		public void setcolLocation(String value)
		{
			super.row.set(8, value);
		}
		public void setCellcolLocationTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setcolStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean iscolStatusReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showcolStatusOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForcolStatus(String value)
		{
			super.row.setTooltip(9, value);
		}
		public String getcolStatus()
		{
			return (String)super.row.get(9);
		}
		public void setcolStatus(String value)
		{
			super.row.set(9, value);
		}
		public void setCellcolStatusTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setcolAnaestheticReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean iscolAnaestheticReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showcolAnaestheticOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForcolAnaesthetic(String value)
		{
			super.row.setTooltip(10, value);
		}
		public String getcolAnaesthetic()
		{
			return (String)super.row.get(10);
		}
		public void setcolAnaesthetic(String value)
		{
			super.row.set(10, value);
		}
		public void setCellcolAnaestheticTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.clinical.vo.AcuteTheatreListBookingAppointmentVo getValue()
		{
			return (ims.clinical.vo.AcuteTheatreListBookingAppointmentVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.AcuteTheatreListBookingAppointmentVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTheatreRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTheatreRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTheatreRow get(int index)
		{
			return new grdTheatreRow(super.collection.get(index));
		}
		public grdTheatreRow newRow()
		{
			return new grdTheatreRow(super.collection.newRow());
		}
		public grdTheatreRow newRow(boolean autoSelect)
		{
			return new grdTheatreRow(super.collection.newRow(autoSelect));
		}
		public grdTheatreRow newRowAt(int index)
		{
			return new grdTheatreRow(super.collection.newRowAt(index));
		}
		public grdTheatreRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTheatreRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTheatreGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void setcolHospnumCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection getValues()
		{
			ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection listOfValues = new ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.AcuteTheatreListBookingAppointmentVo getValue()
		{
			return (ims.clinical.vo.AcuteTheatreListBookingAppointmentVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.AcuteTheatreListBookingAppointmentVo value)
		{
			super.grid.setValue(value);
		}
		public grdTheatreRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTheatreRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTheatreRowCollection getRows()
		{
			return new grdTheatreRowCollection(super.grid.getRows());
		}
		public grdTheatreRow getRowByValue(ims.clinical.vo.AcuteTheatreListBookingAppointmentVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTheatreRow(row);
		}
		public void setcolHospnumHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolHospnumHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolProcedureIconHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolProcedureIconHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setcolLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getcolLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setcolStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getcolStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setcolAnaestheticHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getcolAnaestheticHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.clinical.vo.AcuteTheatreListFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.clinical.vo.AcuteTheatreListFilterVo' of the global context variable 'Clinical.AcuteTheatreListFilterVo' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(115);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.timerSearch = factory.createTimer(0, 15, false);
		form.addTimer(timers.timerSearch);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuAcuteTheatreList = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuAcuteTheatreListCASE_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 1, "Case Details", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6140001)))
			contextMenus.Clinical.contextMenuAcuteTheatreList.add(contextMenus.Clinical.contextMenuAcuteTheatreListCASE_DETAILSItem);
		contextMenus.Clinical.contextMenuAcuteTheatreListSESSION_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 2, "Session Details", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6140002)))
			contextMenus.Clinical.contextMenuAcuteTheatreList.add(contextMenus.Clinical.contextMenuAcuteTheatreListSESSION_DETAILSItem);
		contextMenus.Clinical.contextMenuAcuteTheatreListMOVE_THEATRE_LOCATIONItem = factory.createMenuItem(startControlID.intValue() + 3, "Move to a new Theatre Location", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6140003)))
			contextMenus.Clinical.contextMenuAcuteTheatreList.add(contextMenus.Clinical.contextMenuAcuteTheatreListMOVE_THEATRE_LOCATIONItem);
		contextMenus.Clinical.contextMenuAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem = factory.createMenuItem(startControlID.intValue() + 4, "Cancel Theatre Appointment", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6140004)))
			contextMenus.Clinical.contextMenuAcuteTheatreList.add(contextMenus.Clinical.contextMenuAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem);
		form.registerMenu(contextMenus.Clinical.contextMenuAcuteTheatreList);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 128, 35, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccListOwnerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(128), new Integer(35), new Integer(304), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccListOwnerForm, instance1 } );
		ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccListOwnerForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccListOwnerControl);
		Menu[] menus1 = m_ccListOwnerForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 816, 519, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 816, 324, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 816, 441, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 816, 481, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 816, 402, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 816, 363, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 816, 285, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 816, 246, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 816, 207, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 816, 168, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 816, 129, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "hh:mm", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 59, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 424, 59, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "List Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 424, 37, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Theatre Session Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 37, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 424, 14, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 14, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 82, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Session:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 734, 561, 104, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Case Tracking Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 244, 600, 102, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit S.B. Delay", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 734, 600, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Session Debrief", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 112, 600, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Multiple Safety Brief", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 473, 600, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recovery Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 4, 600, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Session Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 350, 600, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Case Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 696, 510, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Time Out of Recovery", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.GreenYellow, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 696, 393, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Surgery Stop", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Moccasin, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 696, 472, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ready For Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Brown, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 696, 432, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient Left Theatre", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Plum, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 696, 315, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Time Out Completed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Green, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 696, 354, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Surgery Start", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Fuchia, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 696, 276, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Anaesthetised Ready For Surgery", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Yellow, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 696, 237, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Anaesthetic Sign in", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Peru, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 696, 198, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient Arrived", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.DeepPink, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 696, 159, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient Sent For", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.DarkOrange, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 696, 120, 110, 34, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Safety Brief", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.DarkGray, ims.framework.utils.Color.Black }));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 611, 600, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Finalise Theatre List", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 568, 12, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 128, 57, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLocationTemp);
		cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
		super.addComboBox(cmbLocation);
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 568, 57, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbListTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbListTypeTemp);
		cmbListTypeComboBox cmbListType = (cmbListTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeComboBox.class, m_cmbListTypeTemp);
		super.addComboBox(cmbListType);
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 568, 35, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbSessionTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSessionTypeTemp);
		cmbSessionTypeComboBox cmbSessionType = (cmbSessionTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSessionTypeComboBox.class, m_cmbSessionTypeTemp);
		super.addComboBox(cmbSessionType);
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 128, 12, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 128, 80, 630, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTheatreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTheatreTemp);
		cmbTheatreComboBox cmbTheatre = (cmbTheatreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreComboBox.class, m_cmbTheatreTemp);
		super.addComboBox(cmbTheatre);

		// Grid Controls
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 4, 120, 690, 472, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdTheatreTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(52), Boolean.TRUE, contextMenus.Clinical.contextMenuAcuteTheatreList, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdTheatreTemp);
		grdTheatreGrid grdTheatre = (grdTheatreGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTheatreGrid.class, m_grdTheatreTemp);
		grdTheatre.addStringColumn("Hospital No.", 0, 0, 75, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Surname", 0, 0, 75, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Forename", 0, 0, 75, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Sex", 0, 0, 50, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("D.O.B", 0, 0, 60, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Time", 0, 0, 50, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Procedure", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addImageColumn(" ", 0, 0, 20, true, 0);
		grdTheatre.addStringColumn("Location", 0, 0, 70, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Status", 0, 0, 55, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Anaes. Type", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdTheatre);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 769, 79, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.HintIcon, this.getImages().Core.HintIcon, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 808, 72, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.TimerStartEnabled24, this.getImages().Core.TimerStartDisabled24, "Click button to start the automatic refresh of Theatre List", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 808, 40, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 808, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccListOwner()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccListOwnerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccListOwnerVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccListOwnerVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccListOwnerEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccListOwnerEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lblTimeOutOfRecovery()
	{
		return (Label)super.getControl(1);
	}
	public Label lblTimeOutCompleted()
	{
		return (Label)super.getControl(2);
	}
	public Label lblPatientLeftTheatre()
	{
		return (Label)super.getControl(3);
	}
	public Label lblReadyForDischarge()
	{
		return (Label)super.getControl(4);
	}
	public Label lblSurgeryStop()
	{
		return (Label)super.getControl(5);
	}
	public Label lblSurgeryStart()
	{
		return (Label)super.getControl(6);
	}
	public Label lblAnaesRFS()
	{
		return (Label)super.getControl(7);
	}
	public Label lblAnaestheticSignIn()
	{
		return (Label)super.getControl(8);
	}
	public Label lblPatientArrived()
	{
		return (Label)super.getControl(9);
	}
	public Label lblSentFor()
	{
		return (Label)super.getControl(10);
	}
	public Label lblSafetyBriefTime()
	{
		return (Label)super.getControl(11);
	}
	public Button btnCaseTrackingDashboard()
	{
		return (Button)super.getControl(19);
	}
	public Button btnViewSafetyBriefDelay()
	{
		return (Button)super.getControl(20);
	}
	public Button btnSessionDebrief()
	{
		return (Button)super.getControl(21);
	}
	public Button btnMultipleSafeyBrief()
	{
		return (Button)super.getControl(22);
	}
	public Button btnRecoveryDetails()
	{
		return (Button)super.getControl(23);
	}
	public Button btnSessionDetails()
	{
		return (Button)super.getControl(24);
	}
	public Button btnCaseDetails()
	{
		return (Button)super.getControl(25);
	}
	public Button btnTimeOutOfRecovery()
	{
		return (Button)super.getControl(26);
	}
	public Button btnSurgeryStop()
	{
		return (Button)super.getControl(27);
	}
	public Button btnReadyForDischarge()
	{
		return (Button)super.getControl(28);
	}
	public Button btnPatientLeftTheatre()
	{
		return (Button)super.getControl(29);
	}
	public Button btnTimeOutCompleted()
	{
		return (Button)super.getControl(30);
	}
	public Button btnSurgeryStart()
	{
		return (Button)super.getControl(31);
	}
	public Button btnAnaesRFS()
	{
		return (Button)super.getControl(32);
	}
	public Button btnAnaestheticSignIn()
	{
		return (Button)super.getControl(33);
	}
	public Button btnPatientArrived()
	{
		return (Button)super.getControl(34);
	}
	public Button btnPatientSentFor()
	{
		return (Button)super.getControl(35);
	}
	public Button btnSafetyBrief()
	{
		return (Button)super.getControl(36);
	}
	public Button btnSortTheatre()
	{
		return (Button)super.getControl(37);
	}
	public DateControl dteTheatre()
	{
		return (DateControl)super.getControl(38);
	}
	public cmbLocationComboBox cmbLocation()
	{
		return (cmbLocationComboBox)super.getComboBox(0);
	}
	public cmbListTypeComboBox cmbListType()
	{
		return (cmbListTypeComboBox)super.getComboBox(1);
	}
	public cmbSessionTypeComboBox cmbSessionType()
	{
		return (cmbSessionTypeComboBox)super.getComboBox(2);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(3);
	}
	public cmbTheatreComboBox cmbTheatre()
	{
		return (cmbTheatreComboBox)super.getComboBox(4);
	}
	public grdTheatreGrid grdTheatre()
	{
		return (grdTheatreGrid)super.getGrid(0);
	}
	public ImageButton imbSessionMoveDetails()
	{
		return (ImageButton)super.getControl(45);
	}
	public ImageButton imbAutoRefresh()
	{
		return (ImageButton)super.getControl(46);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(47);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(48);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Scheduling = new SchedulingForms();
			Core = new CoreForms();
			RefMan = new RefManForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				TheatreSessionDetailsDialog = new LocalFormName(123304);
				AnaestheticSignInDialog = new LocalFormName(123305);
				IntraOperativeCaseDetailsDialog = new LocalFormName(123308);
				MultipleSafetyBriefDialog = new LocalFormName(123318);
				TheatreSessionDebriefDialog = new LocalFormName(123320);
				TheatreSafeyBriefDelayDialog = new LocalFormName(123321);
			}
			public final FormName TheatreSessionDetailsDialog;
			public final FormName AnaestheticSignInDialog;
			public final FormName IntraOperativeCaseDetailsDialog;
			public final FormName MultipleSafetyBriefDialog;
			public final FormName TheatreSessionDebriefDialog;
			public final FormName TheatreSafeyBriefDelayDialog;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				SortTheatreAppointments = new LocalFormName(114174);
				MoveAndBookTheatreSlot = new LocalFormName(114133);
				CancelAppointmentDialog = new LocalFormName(114160);
			}
			public final FormName SortTheatreAppointments;
			public final FormName MoveAndBookTheatreSlot;
			public final FormName CancelAppointmentDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				CommentDialog = new LocalFormName(102319);
			}
			public final FormName CommentDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookEmergencyTheatre = new LocalFormName(134286);
				BookTheatreDialog = new LocalFormName(134159);
				BookTheatreSlot = new LocalFormName(134208);
			}
			public final FormName BookEmergencyTheatre;
			public final FormName BookTheatreDialog;
			public final FormName BookTheatreSlot;
		}

		public ClinicalForms Clinical;
		public SchedulingForms Scheduling;
		public CoreForms Core;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			RefMan = new RefManImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
				HintIcon = new ImageHelper(102559, "Images/Core/hint_icon.PNG", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStartDisabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
			public final ims.framework.utils.Image Add;
			public final ims.framework.utils.Image HintIcon;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Procedures16 = new ImageHelper(134126, "Images/RefMan/procedures_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Procedures16;
		}
		public final CoreImages Core;
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MessageBoxID = new ims.framework.ContextVariable("MessageBoxID", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__MessageBoxID_" + componentIdentifier + "");
			cxl_WasTimerEnabled = new ims.framework.ContextVariable("WasTimerEnabled", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__WasTimerEnabled_" + componentIdentifier + "");
			cxl_SafetyBrief = new ims.framework.ContextVariable("SafetyBrief", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SafetyBrief_" + componentIdentifier + "");
			cxl_PatientSentFor = new ims.framework.ContextVariable("PatientSentFor", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientSentFor_" + componentIdentifier + "");
			cxl_PatientArrived = new ims.framework.ContextVariable("PatientArrived", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientArrived_" + componentIdentifier + "");
			cxl_AnaestheticSignIn = new ims.framework.ContextVariable("AnaestheticSignIn", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaestheticSignIn_" + componentIdentifier + "");
			cxl_AnaesRFS = new ims.framework.ContextVariable("AnaesRFS", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaesRFS_" + componentIdentifier + "");
			cxl_TimeOutCompleted = new ims.framework.ContextVariable("TimeOutCompleted", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutCompleted_" + componentIdentifier + "");
			cxl_SurgeryStart = new ims.framework.ContextVariable("SurgeryStart", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStart_" + componentIdentifier + "");
			cxl_SurgeryStop = new ims.framework.ContextVariable("SurgeryStop", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStop_" + componentIdentifier + "");
			cxl_ReadyForDischarge = new ims.framework.ContextVariable("ReadyForDischarge", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ReadyForDischarge_" + componentIdentifier + "");
			cxl_PatientLeftTheatre = new ims.framework.ContextVariable("PatientLeftTheatre", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientLeftTheatre_" + componentIdentifier + "");
			cxl_TimeOutOfRecovery = new ims.framework.ContextVariable("TimeOutOfRecovery", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier + "");
			cxl_TimeValidationMap = new ims.framework.ContextVariable("TimeValidationMap", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeValidationMap_" + componentIdentifier + "");
			cxl_SelectedRow = new ims.framework.ContextVariable("SelectedRow", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SelectedRow_" + componentIdentifier + "");
			cxl_HasTheatreSessionComboChange = new ims.framework.ContextVariable("HasTheatreSessionComboChange", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__HasTheatreSessionComboChange_" + componentIdentifier + "");
			cxl_ApptToCancel = new ims.framework.ContextVariable("ApptToCancel", prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier + "");
		}
		
		public boolean getMessageBoxIDIsNotNull()
		{
			return !cxl_MessageBoxID.getValueIsNull(context);
		}
		public Integer getMessageBoxID()
		{
			return (Integer)cxl_MessageBoxID.getValue(context);
		}
		public void setMessageBoxID(Integer value)
		{
			cxl_MessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxID = null;
		public boolean getWasTimerEnabledIsNotNull()
		{
			return !cxl_WasTimerEnabled.getValueIsNull(context);
		}
		public Boolean getWasTimerEnabled()
		{
			return (Boolean)cxl_WasTimerEnabled.getValue(context);
		}
		public void setWasTimerEnabled(Boolean value)
		{
			cxl_WasTimerEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasTimerEnabled = null;
		public boolean getSafetyBriefIsNotNull()
		{
			return !cxl_SafetyBrief.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpSafetyBriefTimeVo getSafetyBrief()
		{
			return (ims.clinical.vo.PeriOpSafetyBriefTimeVo)cxl_SafetyBrief.getValue(context);
		}
		public void setSafetyBrief(ims.clinical.vo.PeriOpSafetyBriefTimeVo value)
		{
			cxl_SafetyBrief.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SafetyBrief = null;
		public boolean getPatientSentForIsNotNull()
		{
			return !cxl_PatientSentFor.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpPatientSentTimeVo getPatientSentFor()
		{
			return (ims.clinical.vo.PeriOpPatientSentTimeVo)cxl_PatientSentFor.getValue(context);
		}
		public void setPatientSentFor(ims.clinical.vo.PeriOpPatientSentTimeVo value)
		{
			cxl_PatientSentFor.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientSentFor = null;
		public boolean getPatientArrivedIsNotNull()
		{
			return !cxl_PatientArrived.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpPatientArrivedTimeVo getPatientArrived()
		{
			return (ims.clinical.vo.PeriOpPatientArrivedTimeVo)cxl_PatientArrived.getValue(context);
		}
		public void setPatientArrived(ims.clinical.vo.PeriOpPatientArrivedTimeVo value)
		{
			cxl_PatientArrived.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientArrived = null;
		public boolean getAnaestheticSignInIsNotNull()
		{
			return !cxl_AnaestheticSignIn.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpAnaesthticSignInTimVo getAnaestheticSignIn()
		{
			return (ims.clinical.vo.PeriOpAnaesthticSignInTimVo)cxl_AnaestheticSignIn.getValue(context);
		}
		public void setAnaestheticSignIn(ims.clinical.vo.PeriOpAnaesthticSignInTimVo value)
		{
			cxl_AnaestheticSignIn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnaestheticSignIn = null;
		public boolean getAnaesRFSIsNotNull()
		{
			return !cxl_AnaesRFS.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpReadyForSurgeryTimeVo getAnaesRFS()
		{
			return (ims.clinical.vo.PeriOpReadyForSurgeryTimeVo)cxl_AnaesRFS.getValue(context);
		}
		public void setAnaesRFS(ims.clinical.vo.PeriOpReadyForSurgeryTimeVo value)
		{
			cxl_AnaesRFS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnaesRFS = null;
		public boolean getTimeOutCompletedIsNotNull()
		{
			return !cxl_TimeOutCompleted.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpTimeOutCompleteVo getTimeOutCompleted()
		{
			return (ims.clinical.vo.PeriOpTimeOutCompleteVo)cxl_TimeOutCompleted.getValue(context);
		}
		public void setTimeOutCompleted(ims.clinical.vo.PeriOpTimeOutCompleteVo value)
		{
			cxl_TimeOutCompleted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeOutCompleted = null;
		public boolean getSurgeryStartIsNotNull()
		{
			return !cxl_SurgeryStart.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpSurgeryStartTimeVo getSurgeryStart()
		{
			return (ims.clinical.vo.PeriOpSurgeryStartTimeVo)cxl_SurgeryStart.getValue(context);
		}
		public void setSurgeryStart(ims.clinical.vo.PeriOpSurgeryStartTimeVo value)
		{
			cxl_SurgeryStart.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SurgeryStart = null;
		public boolean getSurgeryStopIsNotNull()
		{
			return !cxl_SurgeryStop.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpSurgeryStopTimeVo getSurgeryStop()
		{
			return (ims.clinical.vo.PeriOpSurgeryStopTimeVo)cxl_SurgeryStop.getValue(context);
		}
		public void setSurgeryStop(ims.clinical.vo.PeriOpSurgeryStopTimeVo value)
		{
			cxl_SurgeryStop.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SurgeryStop = null;
		public boolean getReadyForDischargeIsNotNull()
		{
			return !cxl_ReadyForDischarge.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpReadyForDischargeVo getReadyForDischarge()
		{
			return (ims.clinical.vo.PeriOpReadyForDischargeVo)cxl_ReadyForDischarge.getValue(context);
		}
		public void setReadyForDischarge(ims.clinical.vo.PeriOpReadyForDischargeVo value)
		{
			cxl_ReadyForDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReadyForDischarge = null;
		public boolean getPatientLeftTheatreIsNotNull()
		{
			return !cxl_PatientLeftTheatre.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpPatientLeftTheatreVo getPatientLeftTheatre()
		{
			return (ims.clinical.vo.PeriOpPatientLeftTheatreVo)cxl_PatientLeftTheatre.getValue(context);
		}
		public void setPatientLeftTheatre(ims.clinical.vo.PeriOpPatientLeftTheatreVo value)
		{
			cxl_PatientLeftTheatre.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientLeftTheatre = null;
		public boolean getTimeOutOfRecoveryIsNotNull()
		{
			return !cxl_TimeOutOfRecovery.getValueIsNull(context);
		}
		public ims.clinical.vo.PeriOpTimeOutOfRecoveryVo getTimeOutOfRecovery()
		{
			return (ims.clinical.vo.PeriOpTimeOutOfRecoveryVo)cxl_TimeOutOfRecovery.getValue(context);
		}
		public void setTimeOutOfRecovery(ims.clinical.vo.PeriOpTimeOutOfRecoveryVo value)
		{
			cxl_TimeOutOfRecovery.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeOutOfRecovery = null;
		public boolean getTimeValidationMapIsNotNull()
		{
			return !cxl_TimeValidationMap.getValueIsNull(context);
		}
		public java.util.Map<Integer,ims.framework.utils.DateTime> getTimeValidationMap()
		{
			return (java.util.Map<Integer,ims.framework.utils.DateTime>)cxl_TimeValidationMap.getValue(context);
		}
		public void setTimeValidationMap(java.util.Map<Integer,ims.framework.utils.DateTime> value)
		{
			cxl_TimeValidationMap.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TimeValidationMap = null;
		public boolean getSelectedRowIsNotNull()
		{
			return !cxl_SelectedRow.getValueIsNull(context);
		}
		public ims.clinical.forms.acutetheatrelist.GenForm.grdTheatreRow getSelectedRow()
		{
			return (ims.clinical.forms.acutetheatrelist.GenForm.grdTheatreRow)cxl_SelectedRow.getValue(context);
		}
		public void setSelectedRow(ims.clinical.forms.acutetheatrelist.GenForm.grdTheatreRow value)
		{
			cxl_SelectedRow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRow = null;
		public boolean getHasTheatreSessionComboChangeIsNotNull()
		{
			return !cxl_HasTheatreSessionComboChange.getValueIsNull(context);
		}
		public Boolean getHasTheatreSessionComboChange()
		{
			return (Boolean)cxl_HasTheatreSessionComboChange.getValue(context);
		}
		public void setHasTheatreSessionComboChange(Boolean value)
		{
			cxl_HasTheatreSessionComboChange.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasTheatreSessionComboChange = null;
		public boolean getApptToCancelIsNotNull()
		{
			return !cxl_ApptToCancel.getValueIsNull(context);
		}
		public ims.clinical.vo.AcuteTheatreListBookingAppointmentVo getApptToCancel()
		{
			return (ims.clinical.vo.AcuteTheatreListBookingAppointmentVo)cxl_ApptToCancel.getValue(context);
		}
		public void setApptToCancel(ims.clinical.vo.AcuteTheatreListBookingAppointmentVo value)
		{
			cxl_ApptToCancel.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptToCancel = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class AcuteTheatreList implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CASE_DETAILS = 1;
				public static final int SESSION_DETAILS = 2;
				public static final int MOVE_THEATRE_LOCATION = 3;
				public static final int CANCEL_THEATRE_APPOINTMENT = 4;
			}
			public void disableAllAcuteTheatreListMenuItems()
			{
				this.contextMenuAcuteTheatreListCASE_DETAILSItem.setEnabled(false);
				this.contextMenuAcuteTheatreListSESSION_DETAILSItem.setEnabled(false);
				this.contextMenuAcuteTheatreListMOVE_THEATRE_LOCATIONItem.setEnabled(false);
				this.contextMenuAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem.setEnabled(false);
			}
			public void hideAllAcuteTheatreListMenuItems()
			{
				this.contextMenuAcuteTheatreListCASE_DETAILSItem.setVisible(false);
				this.contextMenuAcuteTheatreListSESSION_DETAILSItem.setVisible(false);
				this.contextMenuAcuteTheatreListMOVE_THEATRE_LOCATIONItem.setVisible(false);
				this.contextMenuAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem.setVisible(false);
			}
			private Menu contextMenuAcuteTheatreList;
			public ReadOnlyMenuItem getAcuteTheatreListCASE_DETAILSItem()
			{
				return this.contextMenuAcuteTheatreListCASE_DETAILSItem;
			}
			private MenuItem contextMenuAcuteTheatreListCASE_DETAILSItem;
			public ReadOnlyMenuItem getAcuteTheatreListSESSION_DETAILSItem()
			{
				return this.contextMenuAcuteTheatreListSESSION_DETAILSItem;
			}
			private MenuItem contextMenuAcuteTheatreListSESSION_DETAILSItem;
			public ReadOnlyMenuItem getAcuteTheatreListMOVE_THEATRE_LOCATIONItem()
			{
				return this.contextMenuAcuteTheatreListMOVE_THEATRE_LOCATIONItem;
			}
			private MenuItem contextMenuAcuteTheatreListMOVE_THEATRE_LOCATIONItem;
			public ReadOnlyMenuItem getAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem()
			{
				return this.contextMenuAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem;
			}
			private MenuItem contextMenuAcuteTheatreListCANCEL_THEATRE_APPOINTMENTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer timerSearch;
		public Timer gettimerSearch()
		{
			return timerSearch;
		}
		public void enableAll()
		{
			timerSearch.setEnabled(true);
		}
		public void disableAll()
		{
			timerSearch.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[259];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-WASLETTERPRINTED", "WasLetterPrinted");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COULDNOTBESEEN", "Couldnotbeseen");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CAREPROFESSIONALREADYTOSEE", "CareProfessionalReadyToSee");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CAREPROFESSIONALNOTREADYTOSEE", "CareProfessionalNotReadyToSee");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-SESSION", "Session");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISACTIVE", "IsActive");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISLATERALITYAPPLICABLE", "IsLateralityApplicable");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISBILATERALLISTINGAPPLICABLE", "IsBilateralListingApplicable");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DEFAULTANAESTHETICTYPE", "DefaultAnaestheticType");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-GENDERSPECIFIC", "GenderSpecific");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISENDOSCOPY", "IsEndoscopy");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ENDOSCOPYTYPE", "EndoscopyType");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-MEDICALWL", "MedicalWL");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PROCEDUREDETAILS", "ProcedureDetails");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_Clinical.TheatreBookingRef", "BO-1090100011-ID", "ID_TheatreBooking");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_Clinical.TheatreAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-ID", "ID_PeriOpSafetyBriefTime");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-SAFETYBRIEFTIME", "SafetyBriefTime");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SafetyBrief_" + componentIdentifier, "BO-1072100118-RECORDEDBY", "RecordedBy");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-ID", "ID_PeriOpPatientSentTime");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-PATIENTSENTTIME", "PatientSentTime");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientSentFor_" + componentIdentifier, "BO-1072100119-RECORDEDBY", "RecordedBy");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-ID", "ID_PeriOpPatientArrivedTime");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-PATIENTARRIVEDTIME", "PatientArrivedTime");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientArrived_" + componentIdentifier, "BO-1072100120-RECORDEDBY", "RecordedBy");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-ID", "ID_PeriOpAnaesthticSignInTim");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-ANAESTHETICSTARTTIME", "AnaestheticStartTime");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaestheticSignIn_" + componentIdentifier, "BO-1072100121-RECORDEDBY", "RecordedBy");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-ID", "ID_PeriOpReadyForSurgeryTime");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-ANAESTHETISEDREADYFORSURGERYTIME", "AnaesthetisedReadyForSurgeryTime");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__AnaesRFS_" + componentIdentifier, "BO-1072100122-RECORDEDBY", "RecordedBy");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-ID", "ID_PeriOpTimeOutComplete");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-TIMEOUTCOMPLETED", "TimeOutCompleted");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutCompleted_" + componentIdentifier, "BO-1072100123-RECORDEDBY", "RecordedBy");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-ID", "ID_PeriOpSurgeryStartTime");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-SURGERYSTARTTIME", "SurgeryStartTime");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStart_" + componentIdentifier, "BO-1072100124-RECORDEDBY", "RecordedBy");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-ID", "ID_PeriOpSurgeryStopTime");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-SURGERYSTOPTIME", "SurgeryStopTime");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__SurgeryStop_" + componentIdentifier, "BO-1072100125-RECORDEDBY", "RecordedBy");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-ID", "ID_PeriOpReadyForDischargeTi");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-READYFORDISCHARGETIME", "ReadyForDischargeTime");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ReadyForDischarge_" + componentIdentifier, "BO-1072100127-RECORDEDBY", "RecordedBy");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-ID", "ID_PeriOpPatientLeftTheatre");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-PATIENTLEFTTHEATRETIME", "PatientLeftTheatreTime");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__PatientLeftTheatre_" + componentIdentifier, "BO-1072100126-RECORDEDBY", "RecordedBy");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-ID", "ID_PeriOpTimeOutOfRecoveryTi");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-THEATREAPPOINTMENT", "TheatreAppointment");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-TIMEOUTOFRECOVERY", "TimeOutOfRecovery");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__TimeOutOfRecovery_" + componentIdentifier, "BO-1072100128-RECORDEDBY", "RecordedBy");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-COMMENTS", "Comments");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-PROCEDUREDETAILS", "ProcedureDetails");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.AcuteTheatreList.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-SESSION", "Session");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
