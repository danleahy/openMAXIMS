//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.chartableoccurencesdialog;

import ims.clinical.forms.chartableoccurencesdialog.GenForm.grdChartableRow;
import ims.clinical.vo.PatientChartableOccurenceVo;
import ims.clinical.vo.PatientChartableOccurenceVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
		newInstance();
	}

	private void initialise()
	{
		form.lblReportedByRequired().setTextColor(Color.Red);
	}

	@Override
	protected void onBtnNewChartableClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnEditChartableClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSaveChartableClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientChartableOccurenceVo voChartable = form.getLocalContext().getChartableOccurence();
		voChartable = populateInstanceData(voChartable);

		String[] errors = voChartable.validate();

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			domain.savePatientChartableOccurance(voChartable);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setChartableOccurence(domain.getPatientChartableOccurence(form.getLocalContext().getChartableOccurence()));
			populateInstanceControls();
			return;
		}
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnCancelChartableClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			engine.close(DialogResult.CANCEL);
		} 
		else
		{
			open();
			form.setMode(FormMode.VIEW);
			clearInstanceControls();
			form.btnEditChartable().setVisible(form.grdChartable().getValue() != null);
		}
	}

	@Override
	protected void onGrdChartableSelectionChanged()
	{
		form.getLocalContext().setChartableOccurence(form.grdChartable().getValue());
		populateInstanceControls();
		form.btnEditChartable().setVisible(form.grdChartable().getValue() != null && form.getMode().equals(FormMode.VIEW));
	}

	private void populateInstanceControls()
	{
		PatientChartableOccurenceVo voChartable = form.getLocalContext().getChartableOccurence();
		if (voChartable != null)
		{
			form.cmbSource().setValue(voChartable.getPeriOpStage());
			if (voChartable.getTimeObservedIsNotNull())
			{
		
				form.dteObserved().setValue(voChartable.getTimeObserved().getDate());
				form.timChartableObserved().setValue(voChartable.getTimeObserved().getTime());
			}
			form.cmbChartableOccurenceType().setValue(voChartable.getChartableOccuranceType());
			form.ccChartableReportedBy().setValue(voChartable.getReportedBy());
			form.txtIncidentNumber().setValue(voChartable.getIncidentNumber());
		}
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException //WDEV-21879
	{
		clearInstanceControls();
		populateChartableGrid();	
	}

	private void populateChartableGrid()
	{
		form.grdChartable().getRows().clear();
		PatientChartableOccurenceVoCollection coll = domain.listPatientChartableOccuranceByAppt(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (coll != null)
		{
			for (PatientChartableOccurenceVo item : coll)
			{
				addRow(item);
			}
		}
	}

	private void addRow(PatientChartableOccurenceVo item)
	{
		grdChartableRow row = form.grdChartable().getRows().newRow();

		row.setcolIncidentNumber(item.getIncidentNumber());
		if (item.getChartableOccuranceTypeIsNotNull())
		{
			row.setcolOccurenceType(item.getChartableOccuranceType().getText());
		}
		if (item.getReportedByIsNotNull())
		{
			row.setcolReportedBy(item.getReportedBy().getIMosName());
		}
		if (item.getPeriOpStageIsNotNull())
		{
			row.setcolSource(item.getPeriOpStage().getText());
		}
		if (item.getTimeObservedIsNotNull())
		{
			row.setcolTimeObserved(item.getTimeObserved().toString());
		}

		row.setValue(item);
	}

	public void clearInstanceControls()
	{
		form.cmbSource().setValue(null);
		form.dteObserved().setValue(null);
		form.timChartableObserved().setValue(null);
		form.cmbChartableOccurenceType().setValue(null);
		form.ccChartableReportedBy().clear();
		form.txtIncidentNumber().setValue(null);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		clearInstanceControls();
		form.getLocalContext().setChartableOccurence(new PatientChartableOccurenceVo());
		form.grdChartable().setValue(null);
	}

	private PatientChartableOccurenceVo populateInstanceData(PatientChartableOccurenceVo voChartable)
	{
		if(voChartable == null)
			voChartable = new PatientChartableOccurenceVo();
			
		voChartable.setChartableOccuranceType(form.cmbChartableOccurenceType().getValue());
		voChartable.setPeriOpStage(form.cmbSource().getValue());
		voChartable.setIncidentNumber(form.txtIncidentNumber().getValue());
		voChartable.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		voChartable.setReportedBy(form.ccChartableReportedBy().getValue());
		//WDEV-21783
		if(form.dteObserved().getValue() != null && form.timChartableObserved().getValue() != null)
		{
			voChartable.setTimeObserved(new DateTime(form.dteObserved().getValue(), form.timChartableObserved().getValue()));
		}
		else
			voChartable.setTimeObserved(null);
		
		
		return voChartable;
	}

	public void updateControlsState()
	{
		form.getContextMenus().Clinical.hideAllChartableOccurencesMenuItems();
		form.btnEditChartable().setEnabled(false);

		if (form.getMode().equals(FormMode.VIEW))
		{
			if (form.grdChartable().getSelectedRow() != null)
			{
				form.btnEditChartable().setEnabled(true);
				form.getContextMenus().Clinical.getChartableOccurencesEDITItem().setVisible(true);
			}
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.ChartableOccurences.NEW: 
				newInstance();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.ChartableOccurences.EDIT:
				form.setMode(FormMode.EDIT);
				break;
		}
	}
}
