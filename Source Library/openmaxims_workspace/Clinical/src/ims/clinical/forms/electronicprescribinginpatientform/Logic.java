//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.electronicprescribinginpatientform;

import ims.admin.vo.AppRoleShortVoCollection;
import ims.admin.vo.ElectronicPrescribingConfigVo;
import ims.admin.vo.ElectronicPrescribingConfigVoCollection;
import ims.clinical.helper.JACExecutionHelper;
import ims.core.configuration.vo.AppRoleRefVo;
import ims.framework.controls.Button;
import ims.framework.controls.Label;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public static final int IPBUTTONONE = -2683;
	public static final int IPBUTTONTWO = -2684;
	public static final int IPBUTTONTHREE = -2685;
	public static final int IPBUTTONFOUR = -2686;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		enableButtons();
	}
	
	private void initialize() 
	{
		enableAndShowButton(false, false, form.btnButton1(), form.lblLabel1(), null);
		enableAndShowButton(false, false, form.btnButton2(), form.lblLabel2(), null);
		enableAndShowButton(false, false, form.btnButton3(), form.lblLabel3(), null);
		enableAndShowButton(false, false, form.btnButton4(), form.lblLabel4(), null);
	}
	
	private void enableAndShowButton(boolean bEnable, boolean bVisible, Button button, Label label, ElectronicPrescribingConfigVo electronicPrescribingConfigVo)
	{
		button.setEnabled(bEnable);

		button.setVisible(bVisible);
		label.setVisible(bVisible);
		
		if (electronicPrescribingConfigVo != null)
		{
			button.setText(electronicPrescribingConfigVo.getButtonText());
			label.setValue(electronicPrescribingConfigVo.getLabelText());
		}
	}

	private void enableButtons()
	{
		ElectronicPrescribingConfigVoCollection voColl = domain.listElectronicPrescribing();
		
		form.getLocalContext().setLocalElectronicPrescribingConfigVoCollection(voColl);
		
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			switch(voColl.get(i).getButton().getID())
			{
				case IPBUTTONONE:
					enableAndShowButton(checkRole(voColl.get(i).getButtonDeniedRoleAccess()), true, form.btnButton1(), form.lblLabel1(), voColl.get(i));
					break;
				case IPBUTTONTWO:
					enableAndShowButton(checkRole(voColl.get(i).getButtonDeniedRoleAccess()), true, form.btnButton2(), form.lblLabel2(), voColl.get(i));
					break;
				case IPBUTTONTHREE:
					enableAndShowButton(checkRole(voColl.get(i).getButtonDeniedRoleAccess()), true, form.btnButton3(), form.lblLabel3(), voColl.get(i));
					break;
				case IPBUTTONFOUR:
					enableAndShowButton(checkRole(voColl.get(i).getButtonDeniedRoleAccess()), true, form.btnButton4(), form.lblLabel4(), voColl.get(i));
					break;
			}
		}
	}
	
	private boolean checkRole(AppRoleShortVoCollection buttonDeniedRoleAccess)
	{
		if (buttonDeniedRoleAccess == null)
			return true;
		
		AppRoleRefVo voRef = ((AppRoleRefVo)engine.getLoggedInRole());
		for (int i = 0 ; i < buttonDeniedRoleAccess.size() ; i++)
		{
			if(buttonDeniedRoleAccess.get(i).getID_AppRole().equals(voRef.getID_AppRole()))
				return false;
		}
		return true;
	}


	@Override
	protected void onBtnButton4Click() throws PresentationLogicException 
	{
		String param = setClinicCode();
		JACExecutionHelper JAC = new JACExecutionHelper(engine, form.getGlobalContext().Core.getPatientShort(), findPath(IPBUTTONFOUR), findParameter(IPBUTTONFOUR), param); //WDEV-20097
		JAC.executeJAC();
		domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, param != null && param.length() > 0 ? param : " ");
	}

	@Override
	protected void onBtnButton3Click() throws PresentationLogicException 
	{
		String param = setClinicCode();
		JACExecutionHelper JAC = new JACExecutionHelper(engine, form.getGlobalContext().Core.getPatientShort(), findPath(IPBUTTONTHREE), findParameter(IPBUTTONTHREE), param); //WDEV-20097
		JAC.executeJAC();
		domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, param != null && param.length() > 0 ? param : " ");
	}

	@Override
	protected void onBtnButton2Click() throws PresentationLogicException 
	{
		String param = setClinicCode();
		JACExecutionHelper JAC = new JACExecutionHelper(engine, form.getGlobalContext().Core.getPatientShort(), findPath(IPBUTTONTWO), findParameter(IPBUTTONTWO), param); //WDEV-20097
		JAC.executeJAC();
		domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, param != null && param.length() > 0 ? param : " ");
	}

	@Override
	protected void onBtnButton1Click() throws PresentationLogicException 
	{
		String param = setClinicCode();
		JACExecutionHelper JAC = new JACExecutionHelper(engine, form.getGlobalContext().Core.getPatientShort(), findPath(IPBUTTONONE), findParameter(IPBUTTONONE), param);
		JAC.executeJAC();
		domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, param != null && param.length() > 0 ? param : " ");
	}
	
	private String findPath(int buttonID)
	{
		for (int i = 0 ; form.getLocalContext().getLocalElectronicPrescribingConfigVoCollectionIsNotNull() && i < form.getLocalContext().getLocalElectronicPrescribingConfigVoCollection().size() ; i++)
		{
			if (buttonID == form.getLocalContext().getLocalElectronicPrescribingConfigVoCollection().get(i).getButton().getID())
				return form.getLocalContext().getLocalElectronicPrescribingConfigVoCollection().get(i).getButtonExecutablePath();
		}
		return "";
	}
	
	private String findParameter(int buttonID)
	{
		for (int i = 0 ; form.getLocalContext().getLocalElectronicPrescribingConfigVoCollectionIsNotNull() && i < form.getLocalContext().getLocalElectronicPrescribingConfigVoCollection().size() ; i++)
		{
			if (buttonID == form.getLocalContext().getLocalElectronicPrescribingConfigVoCollection().get(i).getButton().getID())
				return form.getLocalContext().getLocalElectronicPrescribingConfigVoCollection().get(i).getButtonParameter();
		}
		return "";
	}
	
	private String setClinicCode()
	{
		if (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()
			&& form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull())
		{
			String szSpec = domain.getPHARMACYExternalMappingValue(form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty().getID()); //WDEV-19818 
			if (szSpec.length() > 15)
				return szSpec.substring(0, 15).toUpperCase();
			else
				return szSpec.toUpperCase();
		}
		
		return "";
	}
}
