//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.specimenintraopdialog;

import ims.clinical.forms.specimenintraopdialog.GenForm.DirectIndirectEnumeration;
import ims.clinical.vo.IntraOpPlannedProcedureVo;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.clinical.vo.SpecimenIntraOpVo;
import ims.core.vo.PatientProcedureMinVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		loadProcedures();

		initialise();
		open();
	}

	private void initialise()
	{
		form.lblDetails().setVisible(false);
		form.txtDetails().setVisible(false);
		form.txtDirectIndirectmandatory().setVisible(true); //WDEV-21829

	}

	private void loadProcedures()
	{
		IntraOpPlannedProcedureVoCollection items = domain.listIntraOpPlannedProcedureByAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		if (items != null && items.size() >= 1)
		{
			for (IntraOpPlannedProcedureVo plannedProc : items)
			{
				if (plannedProc.getPlannedProcedureIsNotNull() && plannedProc.getPlannedProcedure().getProcedureIsNotNull())
					form.cmbProcedure().newRow(plannedProc.getPlannedProcedure(), plannedProc.getPlannedProcedure().getProcedure().getProcedureName());
			}
		}
		else
		{
			engine.showMessage("A Planned Procedure must be recorded");
			engine.close(DialogResult.CANCEL);
		}
	}

	private void open()
	{
		SpecimenIntraOpVo specimenIntraOp = form.getGlobalContext().Clinical.getIntraOpSpecimenVo();
		populateScreenFromData(specimenIntraOp);
		chkOtherValueChanged();
		if(specimenIntraOp == null)
		{
			defaultSelectedProcedure();
		}
	}

	private void defaultSelectedProcedure()
	{
		if(form.cmbProcedure().getValues().size() == 1)
		{
			form.cmbProcedure().setValue((PatientProcedureMinVo) form.cmbProcedure().getValues().get(0));
		}
	}

	@Override
	protected void onChkOtherValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		chkOtherValueChanged();
	}

	private void chkOtherValueChanged()
	{
		form.lblDetails().setVisible(form.chkOther().getValue());
		form.txtDetails().setVisible(form.chkOther().getValue());
		
		if(!form.chkOther().getValue())
			form.txtDetails().setValue(null);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SpecimenIntraOpVo specimenIntraOp = populateDataFromScreen(form.getGlobalContext().Clinical.getIntraOpSpecimenVo());

		//WDEV-21829
		String[] errorsUI = validateUI();

		if (errorsUI != null && errorsUI.length>0)
		{
			engine.showErrors("Validation Errors", errorsUI);
			return;
		}
		
		String[] errors = specimenIntraOp.validate();

		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		//WDEV-21829
		if (specimenIntraOp.getID_SpecimenIntraOpIsNotNull() && domain.getSpecimenIntraOp(specimenIntraOp)==null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return;
		}
				
		try
		{
			domain.saveSpecimenIntraOp(specimenIntraOp);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Clinical.setIntraOpSpecimenVo(domain.getSpecimenIntraOp(specimenIntraOp));
			open();
			return;
		}
		engine.close(DialogResult.OK);
	}
	
	private String[] validateUI() //WDEV-21829
	{
		java.util.ArrayList<String> uiErrors = new java.util.ArrayList<String>();
	
		if(form.cmbProcedure().getValue()==null)
		{
			uiErrors.add("Procedure is mandatory");
		}
		
		if(form.cmbSpecimenDestination().getValue()==null)
		{
			uiErrors.add("Specimen Destination is mandatory");
		}
		
		if(form.chkOther().getValue() && form.txtDetails().getValue()==null)
		{
			uiErrors.add("Details is mandatory");
		}
		
		if(form.intNoOfSpecimens().getValue()==null)
		{
			uiErrors.add("No. of Specimens is mandatory");
		}
		
		if(DirectIndirectEnumeration.None.equals(form.DirectIndirect().getValue()))
		{
			uiErrors.add("Direct or Indirect is mandatory");
		}
		
		if(form.txtTypeComments().getValue()==null)
		{
			uiErrors.add("Type Comments is mandatory");
		}
		
		return uiErrors.toArray(new String[0]);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void clearScreen()
	{
		form.txtTypeComments().setValue(null);
		form.intNoOfSpecimens().setValue(null);
		form.txtDetails().setValue(null);
		form.chkOther().setValue(false);
		form.cmbSpecimenDestination().setValue(null);
		form.cmbProcedure().setValue(null);
		form.DirectIndirect().setValue(null);
	}

	protected void populateScreenFromData(ims.clinical.vo.SpecimenIntraOpVo specimenIntraOp)
	{
		clearScreen();
		if (specimenIntraOp == null)
			return;

		form.txtTypeComments().setValue(specimenIntraOp.getTypeCommentsIsNotNull() ? specimenIntraOp.getTypeComments() : null);
		form.intNoOfSpecimens().setValue(specimenIntraOp.getNoOfSpecimensIsNotNull() ? specimenIntraOp.getNoOfSpecimens() : null);
		form.txtDetails().setValue(specimenIntraOp.getDetailsIsNotNull() ? specimenIntraOp.getDetails() : null);
		if (specimenIntraOp.getOtherIsNotNull())
			form.chkOther().setValue(specimenIntraOp.getOther().booleanValue());
		form.cmbSpecimenDestination().setValue(specimenIntraOp.getSpecimenDestinationIsNotNull() ? specimenIntraOp.getSpecimenDestination() : null);
		form.cmbProcedure().setValue(specimenIntraOp.getPatientProcedureIsNotNull() ? specimenIntraOp.getPatientProcedure() : null);
		if (specimenIntraOp.getIsDirectIsNotNull() && specimenIntraOp.getIsDirect())
		{
			form.DirectIndirect().setValue(DirectIndirectEnumeration.rdoDirect);
		}
		else if (specimenIntraOp.getIsIndirectIsNotNull() && specimenIntraOp.getIsIndirect())
		{
			form.DirectIndirect().setValue(DirectIndirectEnumeration.rdoIndirect);
		}
	}

	protected ims.clinical.vo.SpecimenIntraOpVo populateDataFromScreen(ims.clinical.vo.SpecimenIntraOpVo specimenIntraOp)
	{
		if (specimenIntraOp == null)
			specimenIntraOp = new ims.clinical.vo.SpecimenIntraOpVo();

		specimenIntraOp.setTypeComments(form.txtTypeComments().getValue());
		specimenIntraOp.setNoOfSpecimens(form.intNoOfSpecimens().getValue());
		specimenIntraOp.setDetails(form.txtDetails().getValue());
		specimenIntraOp.setOther(new Boolean(form.chkOther().getValue()));
		specimenIntraOp.setSpecimenDestination(form.cmbSpecimenDestination().getValue());
		specimenIntraOp.setPatientProcedure(form.cmbProcedure().getValue());
		if (form.DirectIndirect().getValue() != null)
		{
			if (form.DirectIndirect().getValue().equals(DirectIndirectEnumeration.rdoDirect))
			{
				specimenIntraOp.setIsDirect(true);
				specimenIntraOp.setIsIndirect(false);
			}
			else if (form.DirectIndirect().getValue().equals(DirectIndirectEnumeration.rdoIndirect))
			{
				specimenIntraOp.setIsIndirect(true);
				specimenIntraOp.setIsDirect(false);
			}
		}

		specimenIntraOp.setTheatreAppointment(form.getGlobalContext().Clinical.getTheatreAppointmentRef());
		return specimenIntraOp;
	}
}
