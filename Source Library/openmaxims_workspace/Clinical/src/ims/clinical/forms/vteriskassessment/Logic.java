//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.vteriskassessment;

import ims.clinical.forms.vteriskassessment.GenForm.ctn1Container.GroupRiskEnumeration;
import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo;
import ims.clinical.vo.VTERemoveDeclineReasonVo;
import ims.clinical.vo.VTERiskAssessmentShortVo;
import ims.clinical.vo.VTERiskAssessmentShortVoCollection;
import ims.clinical.vo.VTERiskAssessmentVo;
import ims.clinical.vo.lookups.ProphylaxisOffered;
import ims.clinical.vo.lookups.ProphylaxisOfferedCollection;
import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.clinical.vo.lookups.VTEAssessmentContextType;
import ims.clinical.vo.lookups.VTERiskGroup;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientSummaryRecordVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.VTERiskAssessmentWorklistVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		initialize();
		open();
		
		//WDEV-19884 if patient is an Inpatient and VTE Assessment Required automatically do a NEW (WDEV-19939)
		boolean viewMode = args != null && args.length > 0 && args[0].equals(FormMode.VIEW); //WDEV-20611
		boolean createNewRecord = !viewMode && form.getLocalContext().getInpatientEpisode() != null && VTEAsessmentStatus.REQUIRED.equals(form.getLocalContext().getInpatientEpisode().getVTEAssessmentStatus());
		
		if(createNewRecord || (args != null && args.length > 0 && args[0].equals(FormMode.EDIT))) 
		{
			newClickInst();
		}  
		
	}
	
	private void open()
	{
		
		VTERiskAssessmentShortVoCollection temVoColl = new VTERiskAssessmentShortVoCollection();
		
		if(isDialog())
		{
			form.getLocalContext().setReadOnlyForm(Boolean.FALSE);
			
			if(	form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVoIsNotNull())
			{
				if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent() != null)//WDEV-15414 
				{
					
					temVoColl = domain.listVTERiskAssessments(form.getGlobalContext().Core.getPatientShort());
					//WDEV-15414 
					if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo() instanceof VTERiskAssessmentWorklistVo)
					{
						InpatientEpisodeForVTERiskAsessmentVo tempVo = domain.getInpatientEpisodes(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent());
						form.getLocalContext().setInpatientEpisode(tempVo);
						form.getLocalContext().setDischargeEpisode(null);
					}
					//WDEV-15414 
					else if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo() instanceof DischargedEpisodeForVTERiskAssessmentWorklistVo)
					{
						DischargedEpisodeForVTERiskAssessmentWorklistVo dis = domain.getDischargeEpisode(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent());
						form.getLocalContext().setInpatientEpisode(null);
						form.getLocalContext().setDischargeEpisode(dis);
					}
				}
			}
			else	
			{
				temVoColl = domain.listVTERiskAssessments(form.getGlobalContext().Core.getPatientShort()); //wdev-14858
				
				if (form.getGlobalContext().Clinical.getVTERiskAssessmentRefVo() == null)
					form.getLocalContext().setInpatientEpisode(null);
				
				if( form.getGlobalContext().Core.getDischargeEpisodeBedInfoIsNotNull())
					form.getLocalContext().setDischargeEpisode(domain.getDischargedEpisodeForVTERiskAssessmentWorklistVo(form.getGlobalContext().Core.getDischargeEpisodeBedInfo())); //wdev-15414
				else
					form.getLocalContext().setDischargeEpisode(null);//WDEV-15414 
				
				form.getLocalContext().setCurrentRecord(domain.getVTERiskAssessment(form.getGlobalContext().Clinical.getVTERiskAssessmentRefVo()));
								
			}
		}
		else
		{
			temVoColl = domain.listVTERiskAssessments(form.getGlobalContext().Core.getPatientShort());
		
		}
		
		fillRecordBrowser(temVoColl);
		
		VTERiskAssessmentShortVo voVTERiskAss = getVTEAssess(form.getLocalContext().getCurrentRecord(),temVoColl);
		
		if(form.getLocalContext().getCurrentRecordIsNotNull() && voVTERiskAss != null)
		{
			form.recbrVTEAssessment().setValue(voVTERiskAss);
		}
		else
			form.getLocalContext().setCurrentRecord(domain.getVTERiskAssessment(form.recbrVTEAssessment().getValue()));
		
		//wdev-14858
		if(	isDialog() && form.getGlobalContext().Core.getEditVTERiskAssessmentFromInpatientEpisodeIsNotNull() && form.getGlobalContext().Core.getEditVTERiskAssessmentFromInpatientEpisode().equals(Boolean.TRUE)) 
		{
			if(	form.getGlobalContext().Core.getVTERiskAssessmentShortVoIsNotNull())
			{
				form.recbrVTEAssessment().setValue(form.getGlobalContext().Core.getVTERiskAssessmentShortVo());
			}
			else
			{
				if( form.getLocalContext().getInpatientEpisodeIsNotNull() )
				{
					VTERiskAssessmentShortVo tempVoVTE = domain.getVTERiskAssessmentShortVo(form.getLocalContext().getInpatientEpisode());
					if(	tempVoVTE != null)
					{
						form.recbrVTEAssessment().setValue(tempVoVTE);
					}
				}
				//WDEV-15414 
				else if(form.getLocalContext().getDischargeEpisodeIsNotNull())
				{
					VTERiskAssessmentShortVo tempVoVTEByDischarge = domain.getVTERiskAssessmentShortByDischargeEpisode(form.getLocalContext().getDischargeEpisode());
					
					if(	tempVoVTEByDischarge != null)
					{
						form.recbrVTEAssessment().setValue(tempVoVTEByDischarge);
					}
				}
			}
			
			form.getLocalContext().setCurrentRecord(domain.getVTERiskAssessment(form.recbrVTEAssessment().getValue()));
			populateScreenFromData(form.getLocalContext().getCurrentRecord());
			
			if(	form.getLocalContext().getCurrentRecord() == null )
			{
				form.getLocalContext().setCurrentRecord(new VTERiskAssessmentVo());
				form.ccAuthoringInfo().initializeComponent();
			}
			
			form.getGlobalContext().Core.setEditVTERiskAssessmentFromInpatientEpisode(null);
			form.setMode(FormMode.EDIT);
			return;
		}
		
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		form.setMode(FormMode.VIEW);
		
	}
	
	private VTERiskAssessmentShortVo getVTEAssess(VTERiskAssessmentVo voVTERiskAss , VTERiskAssessmentShortVoCollection temVoColl)
	{
		if(temVoColl == null)
			return null;
		
		
		for(int i = 0; i < temVoColl.size();i++)
		{
			if(temVoColl.get(i) != null && voVTERiskAss != null)
			{
				if(voVTERiskAss.getID_VTERiskAssessmentIsNotNull() && temVoColl.get(i).getID_VTERiskAssessmentIsNotNull() && voVTERiskAss.getID_VTERiskAssessment().equals( temVoColl.get(i).getID_VTERiskAssessment()))
					return temVoColl.get(i);
			}
		}
		return null;
	}
	private void populateScreenFromData(VTERiskAssessmentVo voVTERiskAss) 
	{
		clearScreen();
		
		if(voVTERiskAss == null)
			return;
		
		VTERiskAssessmentShortVo validPreOpFromSummaryRecordForValidation =(!engine.isRIEMode() ?  domain.getValidPreOpVteFromPatientSummaryForValidation(form.getGlobalContext().Core.getPatientShort()) : null);
		
		form.getLocalContext().setHasPreOpForValidation(validPreOpFromSummaryRecordForValidation != null);
		form.getLocalContext().setisRecordLinkedToPatientSummary(domain.getPatientSummaryForRecord(voVTERiskAss, form.getGlobalContext().Core.getPatientShort()) != null);
		
		form.getLocalContext().setInpatientEpisodeForRecord(domain.getInpatientEpisodeForRecord(voVTERiskAss, form.getGlobalContext().Core.getPatientShort()));
		form.getLocalContext().setDischargedEpisodeForRecord(domain.getDischargedEpisodeForRecord(voVTERiskAss, form.getGlobalContext().Core.getPatientShort()));
		
		form.cmbContextType().setValue(voVTERiskAss.getContextType());
		
		form.ctn1().chkActiveCancer().setValue((voVTERiskAss.getActiveCancer() == null || YesNo.NO.equals(voVTERiskAss.getActiveCancer())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkAgeOverSixty().setValue((voVTERiskAss.getAgeOverSixty() == null || YesNo.NO.equals(voVTERiskAss.getAgeOverSixty())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkDehydration().setValue((voVTERiskAss.getDehydration() == null || YesNo.NO.equals(voVTERiskAss.getDehydration())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkKnownThrombophilias().setValue((voVTERiskAss.getKnownThrombophilias() == null || YesNo.NO.equals(voVTERiskAss.getKnownThrombophilias())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkAcquiredBleeding().setValue((voVTERiskAss.getAcquiredBleeding() == null || YesNo.NO.equals(voVTERiskAss.getAcquiredBleeding())) ? Boolean.FALSE:Boolean.TRUE );
		form.ctn1().chkActiveBleeding().setValue((voVTERiskAss.getActiveBleeding() == null || YesNo.NO.equals(voVTERiskAss.getActiveBleeding())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkAcuteStroke().setValue((voVTERiskAss.getAcuteStroke() == null || YesNo.NO.equals(voVTERiskAss.getAcuteStroke())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkAcuteSurgicalAdmission().setValue((voVTERiskAss.getAcuteSurgicalAdmission() == null || YesNo.NO.equals(voVTERiskAss.getAcuteSurgicalAdmission())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkAnaestheticAndSurgery().setValue((voVTERiskAss.getAnaestheticAndSurgery() == null || YesNo.NO.equals(voVTERiskAss.getAnaestheticAndSurgery())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkConcurrentAnticoagulants().setValue((voVTERiskAss.getConcurrentAnticoagulants() == null || YesNo.NO.equals(voVTERiskAss.getConcurrentAnticoagulants())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkCriticalCareAdmission().setValue((voVTERiskAss.getCriticalCareAdmission() == null || YesNo.NO.equals(voVTERiskAss.getCriticalCareAdmission())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkHipFracture().setValue((voVTERiskAss.getHipFracture() == null || YesNo.NO.equals(voVTERiskAss.getHipFracture())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkHipKneeReplacement().setValue((voVTERiskAss.getHipKneeReplacement() == null || YesNo.NO.equals(voVTERiskAss.getHipKneeReplacement())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkHistoryOfVTE().setValue((voVTERiskAss.getHistoryOfVTE() == null || YesNo.NO.equals(voVTERiskAss.getHistoryOfVTE())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkLumbarPuncturePrevious4hrs().setValue((voVTERiskAss.getLumbarPuncturePrevious4hrs() == null || YesNo.NO.equals(voVTERiskAss.getLumbarPuncturePrevious4hrs())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkLumbarPunctureWithinNext12hrs().setValue((voVTERiskAss.getLumbarPunctureWithinNext12hrs() == null || YesNo.NO.equals(voVTERiskAss.getLumbarPunctureWithinNext12hrs())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkNeuroSpinalEyeSurgery().setValue((voVTERiskAss.getNeuroSpinalEyeSurgery() == null || YesNo.NO.equals(voVTERiskAss.getNeuroSpinalEyeSurgery())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkSurgeryIn().setValue((voVTERiskAss.getSurgeryLowerLimbPelvis60mins() == null || YesNo.NO.equals(voVTERiskAss.getSurgeryLowerLimbPelvis60mins())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkObesity().setValue((voVTERiskAss.getObesity() == null || YesNo.NO.equals(voVTERiskAss.getObesity())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkOtherProcedureWithHighBleedingRisk().setValue((voVTERiskAss.getOtherProcedureWithHighBleedingRisk() == null || YesNo.NO.equals(voVTERiskAss.getOtherProcedureWithHighBleedingRisk())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkPregnancy().setValue((voVTERiskAss.getPregnancy() == null || YesNo.NO.equals(voVTERiskAss.getPregnancy())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkReducedMobility().setValue((voVTERiskAss.getReducedMobility() == null || YesNo.NO.equals(voVTERiskAss.getReducedMobility())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkSignificantMorbidities().setValue((voVTERiskAss.getSignificantMorbidities() == null || YesNo.NO.equals(voVTERiskAss.getSignificantMorbidities())) ? Boolean.FALSE:Boolean.TRUE);
		//form.ctn1().chkSurgeryIn().setValue((voVTERiskAss.getSignificantMorbidities() == null || YesNo.NO.equals(voVTERiskAss.getSignificantMorbidities())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkSurgerySignificantMobilityReduction().setValue((voVTERiskAss.getSurgerySignificantMobilityReduction() == null || YesNo.NO.equals(voVTERiskAss.getSurgerySignificantMobilityReduction())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkThrombocytopenia().setValue((voVTERiskAss.getThrombocytopenia() == null || YesNo.NO.equals(voVTERiskAss.getThrombocytopenia())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUncontrolledHypertension().setValue((voVTERiskAss.getUncontrolledHypertension() == null || YesNo.NO.equals(voVTERiskAss.getUncontrolledHypertension())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUntreatedBleedingDisorder().setValue((voVTERiskAss.getUntreatedBleedingDisorder() == null || YesNo.NO.equals(voVTERiskAss.getUntreatedBleedingDisorder())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUseOfHRT().setValue((voVTERiskAss.getUseOfHRT() == null || YesNo.NO.equals(voVTERiskAss.getUseOfHRT())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkUseOfOstogren().setValue((voVTERiskAss.getUseOfOstogren() == null || YesNo.NO.equals(voVTERiskAss.getUseOfOstogren())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkVaricoseVeins().setValue((voVTERiskAss.getVaricoseVeins() == null || YesNo.NO.equals(voVTERiskAss.getVaricoseVeins())) ? Boolean.FALSE:Boolean.TRUE);
		form.ctn1().chkNotExpectedReducedMobility().setValue((voVTERiskAss.getNotExpectedReducedMobility() == null || YesNo.NO.equals(voVTERiskAss.getNotExpectedReducedMobility())) ? Boolean.FALSE:Boolean.TRUE);
		
		form.txtComments().setValue(voVTERiskAss.getComments());
		
		if( voVTERiskAss.getRiskGroup() != null )
		{
			if(voVTERiskAss.getRiskGroup().equals(VTERiskGroup.HIGH_RISK_LOW_BLEEDING))
				form.ctn1().GroupRisk().setValue(GroupRiskEnumeration.rdoHighRiskWithLowBleeding);
			else if(voVTERiskAss.getRiskGroup().equals(VTERiskGroup.HIGH_RISK_SIGNIFICANT_BLEEDING))
				form.ctn1().GroupRisk().setValue(GroupRiskEnumeration.rdoHighRiskWithSignificantBleeding);
			else
				form.ctn1().GroupRisk().setValue(GroupRiskEnumeration.rdoNoSIgnificantIncrease);
		}
		else
			form.ctn1().GroupRisk().setValue(null);
		
		if (voVTERiskAss.getProphylaxisOffered() != null && voVTERiskAss.getProphylaxisOffered().size() > 0)
		{
			for (int i = 0; i < voVTERiskAss.getProphylaxisOffered().size(); i++)
			{

				if (ProphylaxisOffered.ANTIEMBOLISM_STOCKINGS_OR_MECHNICAL_DEVICE.equals(voVTERiskAss.getProphylaxisOffered().get(i)))
					form.ctn1().chkAntiembolism().setValue(true);
				
				if (ProphylaxisOffered.ENOXAPARIN.equals(voVTERiskAss.getProphylaxisOffered().get(i)))
					form.ctn1().chkEnoxaparin().setValue(true);
				
				if (ProphylaxisOffered.NO_PROPHYLAXIS_REQUIRED.equals(voVTERiskAss.getProphylaxisOffered().get(i)))
				form.ctn1().chkNoProphylaxis().setValue(true);
				
			}
		}
		
		form.ccAuthoringInfo().setValue(voVTERiskAss.getAuthoringInformation());
		
		if( voVTERiskAss.getCompletedByIsNotNull() && voVTERiskAss.getCompletedBy().getRecordingDateTimeIsNotNull() && voVTERiskAss.getCompletedBy().getRecordingUserIsNotNull())
		{
			enabledisableControls(false);
		}
		else
		{
			enabledisableControls(true);
		}
		
		if(!isDialog() && Boolean.TRUE.equals(form.getLocalContext().getReadOnlyForm()))
		{
			enabledisableControls(false);
		}
		
		if (voVTERiskAss.getValidatedInformation() != null)
		{
			form.lblHcp().setValue(voVTERiskAss.getValidatedInformation().getAuthoringHcp() != null ? "Validated By:  " + voVTERiskAss.getValidatedInformation().getAuthoringHcp().getIMosName(): "");
			form.lblDateTime().setValue(voVTERiskAss.getValidatedInformation().getAuthoringDateTime() != null ? "Validated Date/Time:  " + voVTERiskAss.getValidatedInformation().getAuthoringDateTime().toString(): "");
		}
		else if (voVTERiskAss.getDeclinedInformation() != null)
		{
			form.lblHcp().setValue(voVTERiskAss.getDeclinedInformation().getAuthoringHcp() != null ? "Declined By:  " + voVTERiskAss.getDeclinedInformation().getAuthoringHcp().getIMosName(): "");
			form.lblDateTime().setValue(voVTERiskAss.getDeclinedInformation().getAuthoringDateTime() != null ? "Declined Date/Time:  " + voVTERiskAss.getDeclinedInformation().getAuthoringDateTime().toString(): "");
			form.lblReason().setValue(voVTERiskAss.getDeclinedReason() != null ? "Reason:  " + voVTERiskAss.getDeclinedReason().getText(): "");
		}
		
	}
	private void clearScreen()
	{
		clearDetailsControls();
		
		form.ccAuthoringInfo().setValue(null);
		form.lblHcp().setValue("");
		form.lblDateTime().setValue("");
		form.lblReason().setValue("");
		form.cmbContextType().setValue(null);
		form.ctn1().chkNotExpectedReducedMobility().setValue(null);
		form.txtComments().setValue(null);
	}
	private void clearDetailsControls()
	{
		
		form.ctn1().chkActiveCancer().setValue(null);
		form.ctn1().chkAgeOverSixty().setValue(null);
		form.ctn1().chkDehydration().setValue(null);
		form.ctn1().chkKnownThrombophilias().setValue(null);
		form.ctn1().chkAcquiredBleeding().setValue(null);
		form.ctn1().chkActiveBleeding().setValue(null);
		form.ctn1().chkAcuteStroke().setValue(null);
		form.ctn1().chkAcuteSurgicalAdmission().setValue(null);
		form.ctn1().chkAnaestheticAndSurgery().setValue(null);
		form.ctn1().chkConcurrentAnticoagulants().setValue(null);
		form.ctn1().chkCriticalCareAdmission().setValue(null);
		form.ctn1().chkHipFracture().setValue(null);
		form.ctn1().chkHipKneeReplacement().setValue(null);
		form.ctn1().chkHistoryOfVTE().setValue(null);
		form.ctn1().chkLumbarPuncturePrevious4hrs().setValue(null);
		form.ctn1().chkLumbarPunctureWithinNext12hrs().setValue(null);
		form.ctn1().chkNeuroSpinalEyeSurgery().setValue(null);
		form.ctn1().chkSurgeryIn().setValue(null);
		form.ctn1().chkObesity().setValue(null);
		form.ctn1().chkOtherProcedureWithHighBleedingRisk().setValue(null);
		form.ctn1().chkPregnancy().setValue(null);
		form.ctn1().chkReducedMobility().setValue(null);
		form.ctn1().chkSignificantMorbidities().setValue(null);
		form.ctn1().chkSurgeryIn().setValue(null);
		form.ctn1().chkSurgerySignificantMobilityReduction().setValue(null);
		form.ctn1().chkThrombocytopenia().setValue(null);
		form.ctn1().chkUncontrolledHypertension().setValue(null);
		form.ctn1().chkUntreatedBleedingDisorder().setValue(null);
		form.ctn1().chkUseOfHRT().setValue(null);
		form.ctn1().chkUseOfOstogren().setValue(null);
		form.ctn1().chkVaricoseVeins().setValue(null);
		form.ctn1().GroupRisk().setValue(null);
		form.ctn1().chkAntiembolism().setValue(null);
		form.ctn1().chkEnoxaparin().setValue(null);
		form.ctn1().chkNoProphylaxis().setValue(null);
		
	}
	private void fillRecordBrowser(VTERiskAssessmentShortVoCollection collVTERisk)
	{
		form.recbrVTEAssessment().clear();
		if(collVTERisk == null)
			return;
				
		for(int i=0; i<collVTERisk.size(); i++)
		{
			VTERiskAssessmentShortVo voVTERiskAssShort =  collVTERisk.get(i); 
			if(voVTERiskAssShort != null)
			{
				String strDateTime = (voVTERiskAssShort.getRecordingInformationIsNotNull() && voVTERiskAssShort.getRecordingInformation().getRecordingDateTimeIsNotNull() ) ? voVTERiskAssShort.getRecordingInformation().getRecordingDateTime().toString():"";
				String strUserName = (voVTERiskAssShort.getRecordingInformationIsNotNull()  &&  voVTERiskAssShort.getRecordingInformation().getRecordingUserIsNotNull()) ? " - " + voVTERiskAssShort.getRecordingInformation().getRecordingUser().toString():"";
				
				if( form.getLocalContext().getInpatientEpisode() != null && form.getLocalContext().getInpatientEpisode().getVTERiskAssessmentIsNotNull() && voVTERiskAssShort.equals(form.getLocalContext().getInpatientEpisode().getVTERiskAssessment()))
				{					
					form.recbrVTEAssessment().newRow(voVTERiskAssShort,  strDateTime + strUserName ,Color.Green);
					form.recbrVTEAssessment().setValue(voVTERiskAssShort);
				}
				//WDEV-15414 
				else if(form.getLocalContext().getDischargeEpisode() != null && form.getLocalContext().getDischargeEpisode().getVTERiskAssessmentIsNotNull() && voVTERiskAssShort.equals(form.getLocalContext().getDischargeEpisode().getVTERiskAssessment()))
				{
					form.recbrVTEAssessment().newRow(voVTERiskAssShort,  strDateTime + strUserName ,Color.Green);
					form.recbrVTEAssessment().setValue(voVTERiskAssShort);
				}
				else
				{					 
					form.recbrVTEAssessment().newRow(voVTERiskAssShort,   strDateTime + strUserName );
				}
			}
			
		}
		
	}
	
	private boolean isDialog()
	{
		return engine.isDialog();
	}
	
	private void initialize()
	{
		form.ccAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		
		form.getLocalContext().setReadOnlyForm(Boolean.FALSE);
		form.getLocalContext().setCurrentRecord(null);
		
		form.getLocalContext().setInpatientEpisode(domain.getInpatientEpisode(form.getGlobalContext().Core.getPatientShort()));
		form.getLocalContext().setPatientIsInpatient(form.getLocalContext().getInpatientEpisode() != null);
		form.getLocalContext().setPatientHasTCIForToday(domain.patientHasTCIForToday(form.getGlobalContext().Core.getPatientShort()));
		form.getLocalContext().setIsHCPUser(domain.getHcpLiteUser() != null);
		
		addImagesToButtons();
	}
	
	private void addImagesToButtons()
	{
		form.btnNew().setImage(form.getImages().Core.Add);
		form.btnValidate().setImage(form.getImages().Correspondence.DocumentCompleted16);
		form.btnDecline().setImage(form.getImages().Core.Remove);
		form.btnRIE().setImage(form.getImages().Core.Alert_RedTriangle2);
		form.btnCompleteSave().setImage(form.getImages().Core.Tick);
		form.btnCancel().setImage(form.getImages().Core.Remove);
		form.btnClose().setImage(form.getImages().Core.Delete);
		
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (isDialog())
		{
			engine.close(DialogResult.CANCEL);
			return;
		}
		
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setCurrentRecord(null);
		open();
		updateControlsState();
	}
	
	private boolean save()
	{
		//wdev-16758
		String[] errors1 = validateUIRules();
		if (errors1 != null && errors1.length != 0)
		{
			engine.showErrors(errors1);
			return false;
		}
		//-------------
		
		VTERiskAssessmentVo voVTERiskAss = form.getLocalContext().getCurrentRecord();
		voVTERiskAss = populateDataFromScreen(voVTERiskAss);
		String[] errors = voVTERiskAss.validate(validateUIRules());
		
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if(	voVTERiskAss.getID_VTERiskAssessment() == null && VTEAsessmentStatus.INPROGRESS.equals(voVTERiskAss.getVTEAssessmentStatus()))
		{
			if(form.getLocalContext().getInpatientEpisode() != null && form.getLocalContext().getInpatientEpisode().getPasEventIsNotNull())
			{
				VTERiskAssessmentVo voVTERiskAssTemp = domain.getInProgressVTERiskAsessment(form.getLocalContext().getInpatientEpisode().getPasEvent());
				if(voVTERiskAssTemp != null)
				{
					engine.showMessage("A VTE Risk Assessment record with status In Progress already exists");
					return false;
				}
			}
			//WDEV-15414 
			else if(form.getLocalContext().getDischargeEpisode() != null && form.getLocalContext().getDischargeEpisode().getPasEventIsNotNull())
			{
				VTERiskAssessmentVo voVTERiskAssTemp = domain.getInProgressVTERiskAssessmentFromDischargeEpisode(form.getLocalContext().getDischargeEpisode().getPasEvent());
				if(voVTERiskAssTemp != null)
				{
					engine.showMessage("A VTE Risk Assessment record with status In Progress already exists");
					return false;
				}
			}
		}
		try 
		{
			voVTERiskAss = domain.saveVTERiskAssess(voVTERiskAss, form.getLocalContext().getInpatientEpisode(), form.getLocalContext().getDischargeEpisode());//WDEV-15414 
			form.getLocalContext().setCurrentRecord(voVTERiskAss);
		} 	
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setCurrentRecord(null);
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		//wdev-14858
		
		if( form.getGlobalContext().Core.getVTERiskAssessmentShortVoIsNotNull() && form.getGlobalContext().Core.getVTERiskAssessmentShortVo().getID_VTERiskAssessment() == null)
		{
			form.getGlobalContext().Core.setVTERiskAssessmentShortVo(domain.getVTERiskAssessmentShortVo(voVTERiskAss));	
		}
		
		if(	! isDialog() && form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischargeIsNotNull() && form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischarge().equals(Boolean.TRUE)) //WDEV-16200 added "! isDialog()"
			form.getGlobalContext().Core.setCreateVTERiskAssessmentOnDischarge(Boolean.FALSE);
		//-----------
		return true;

	}
	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		//wdev-16758
		if( form.ccAuthoringInfo() == null || form.ccAuthoringInfo().getValue() == null || form.ccAuthoringInfo().getValue().getAuthoringDateTime() == null || form.ccAuthoringInfo().getValue().getAuthoringHcp() == null)
		{
			uiErrors.add(" Authoring HCP and Authoring Date/Time are mandatory.");
		}

		if (form.cmbContextType().getValue() == null)
		{
			uiErrors.add("Context Type is mandatory.");
		}
		
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}
	private VTERiskAssessmentVo populateDataFromScreen(VTERiskAssessmentVo voVTERiskAss)
	{
		if(voVTERiskAss == null)
			voVTERiskAss = new VTERiskAssessmentVo();
		
		voVTERiskAss.setContextType(form.cmbContextType().getValue());
		
		if( form.ctn1().chkNotExpectedReducedMobility().getValue())
			voVTERiskAss.setNotExpectedReducedMobility(YesNo.YES);
		else
			voVTERiskAss.setNotExpectedReducedMobility(YesNo.NO);
		
		if( form.ctn1().chkActiveCancer().getValue())
			voVTERiskAss.setActiveCancer(YesNo.YES);
		else
			voVTERiskAss.setActiveCancer(YesNo.NO);
		
		if( form.ctn1().chkAgeOverSixty().getValue())
			voVTERiskAss.setAgeOverSixty(YesNo.YES);
		else
			voVTERiskAss.setAgeOverSixty(YesNo.NO);
		
		if( form.ctn1().chkDehydration().getValue())
			voVTERiskAss.setDehydration(YesNo.YES);
		else
			voVTERiskAss.setDehydration(YesNo.NO);
		
		if( form.ctn1().chkKnownThrombophilias().getValue())
			voVTERiskAss.setKnownThrombophilias(YesNo.YES);
		else
			voVTERiskAss.setKnownThrombophilias(YesNo.NO);
		
		if( form.ctn1().chkAcquiredBleeding().getValue())
			voVTERiskAss.setAcquiredBleeding(YesNo.YES);
		else
			voVTERiskAss.setAcquiredBleeding(YesNo.NO);
		
		if( form.ctn1().chkActiveBleeding().getValue())
			voVTERiskAss.setActiveBleeding(YesNo.YES);
		else
			voVTERiskAss.setActiveBleeding(YesNo.NO);
		
		if( form.ctn1().chkAcuteStroke().getValue())
			voVTERiskAss.setAcuteStroke(YesNo.YES);
		else
			voVTERiskAss.setAcuteStroke(YesNo.NO);
		
		if( form.ctn1().chkAcuteSurgicalAdmission().getValue())
			voVTERiskAss.setAcuteSurgicalAdmission(YesNo.YES);
		else
			voVTERiskAss.setAcuteSurgicalAdmission(YesNo.NO);
		
				
		voVTERiskAss.setAnaestheticAndSurgery(form.ctn1().chkAnaestheticAndSurgery().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setConcurrentAnticoagulants(form.ctn1().chkConcurrentAnticoagulants().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setCriticalCareAdmission(form.ctn1().chkCriticalCareAdmission().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setHipFracture(form.ctn1().chkHipFracture().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setHipKneeReplacement(form.ctn1().chkHipKneeReplacement().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setHistoryOfVTE(form.ctn1().chkHistoryOfVTE().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setLumbarPuncturePrevious4hrs(form.ctn1().chkLumbarPuncturePrevious4hrs().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setLumbarPunctureWithinNext12hrs(form.ctn1().chkLumbarPunctureWithinNext12hrs().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setNeuroSpinalEyeSurgery(form.ctn1().chkNeuroSpinalEyeSurgery().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setSurgeryLowerLimbPelvis60mins(form.ctn1().chkSurgeryIn().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setObesity(form.ctn1().chkObesity().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setOtherProcedureWithHighBleedingRisk(form.ctn1().chkOtherProcedureWithHighBleedingRisk().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setPregnancy(form.ctn1().chkPregnancy().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setReducedMobility(form.ctn1().chkReducedMobility().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setSignificantMorbidities(form.ctn1().chkSignificantMorbidities().getValue() == true ? YesNo.YES:YesNo.NO);
		
		voVTERiskAss.setSurgerySignificantMobilityReduction(form.ctn1().chkSurgerySignificantMobilityReduction().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setThrombocytopenia(form.ctn1().chkThrombocytopenia().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUncontrolledHypertension(form.ctn1().chkUncontrolledHypertension().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUntreatedBleedingDisorder(form.ctn1().chkUntreatedBleedingDisorder().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUseOfHRT(form.ctn1().chkUseOfHRT().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setUseOfOstogren(form.ctn1().chkUseOfOstogren().getValue() == true ? YesNo.YES:YesNo.NO);
		voVTERiskAss.setVaricoseVeins(form.ctn1().chkVaricoseVeins().getValue() == true ? YesNo.YES:YesNo.NO);
		
		if(form.ctn1().GroupRisk().getValue() != null && form.ctn1().GroupRisk().getValue().equals(GroupRiskEnumeration.rdoHighRiskWithLowBleeding) )
			voVTERiskAss.setRiskGroup(VTERiskGroup.HIGH_RISK_LOW_BLEEDING);
		else if(form.ctn1().GroupRisk().getValue() != null && form.ctn1().GroupRisk().getValue().equals(GroupRiskEnumeration.rdoHighRiskWithSignificantBleeding))
			voVTERiskAss.setRiskGroup(VTERiskGroup.HIGH_RISK_SIGNIFICANT_BLEEDING);
		else if ( form.ctn1().GroupRisk().getValue() != null && form.ctn1().GroupRisk().getValue().equals(GroupRiskEnumeration.rdoNoSIgnificantIncrease) )
			voVTERiskAss.setRiskGroup(VTERiskGroup.NO_SIGNIFICANT_INCREASE);
		else
			voVTERiskAss.setRiskGroup(null);
		
		//WDEV-19627
		voVTERiskAss.setProphylaxisOffered(new ProphylaxisOfferedCollection());
		
		if (Boolean.TRUE.equals(form.ctn1().chkNoProphylaxis().getValue()))
			voVTERiskAss.getProphylaxisOffered().add(ProphylaxisOffered.NO_PROPHYLAXIS_REQUIRED);
		else
		{
			if( Boolean.TRUE.equals(form.ctn1().chkAntiembolism().getValue()))
				voVTERiskAss.getProphylaxisOffered().add(ProphylaxisOffered.ANTIEMBOLISM_STOCKINGS_OR_MECHNICAL_DEVICE);
		
			if( Boolean.TRUE.equals(form.ctn1().chkEnoxaparin().getValue()))
				voVTERiskAss.getProphylaxisOffered().add(ProphylaxisOffered.ENOXAPARIN);
		}
		
		if(voVTERiskAss.getID_VTERiskAssessment() == null)  //new record
		{
			RecordingUserInformationVo recUserInf = new RecordingUserInformationVo();
			Object mosUser = domain.getMosUser();
			
			if(mosUser instanceof MemberOfStaffShortVo)
			{
				recUserInf.setRecordingUser((MemberOfStaffShortVo) domain.getMosUser());
			}
			
			recUserInf.setRecordingDateTime(new DateTime());
			voVTERiskAss.setRecordingInformation(recUserInf);
			
		}
		
		AuthoringInformationVo authoringInfo  = form.ccAuthoringInfo().getValue();
		voVTERiskAss.setAuthoringInformation(authoringInfo);
		
		//populate completing information from Authoring Info
		RecordingUserInformationVo recUserInf = new RecordingUserInformationVo();
		
		recUserInf.setRecordingUser(authoringInfo.getAuthoringHcp() != null ? authoringInfo.getAuthoringHcp().getMos() : null);
		recUserInf.setRecordingDateTime(authoringInfo.getAuthoringDateTime());
			
		voVTERiskAss.setCompletedBy(recUserInf);
		
		voVTERiskAss.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		if( voVTERiskAss.getCareContext() == null)
		{
			if(isDialog())
			{
				if( form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVoIsNotNull() && form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent() != null)//WDEV-15414 
				{
					voVTERiskAss.setCareContext(domain.getCareContextByPasEventId(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo().getPasEvent()));
				}
				if(	form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischargeIsNotNull() && form.getGlobalContext().Core.getCreateVTERiskAssessmentOnDischarge().equals(Boolean.TRUE)) //wdev-14858
				{
					voVTERiskAss.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				}
			}
			else
			{
				voVTERiskAss.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			}
		}
		
		
		voVTERiskAss.setVTEAssessmentStatus(VTEAsessmentStatus.COMPLETED);
		voVTERiskAss.setComments(form.txtComments().getValue());
		
		return voVTERiskAss;
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newClickInst();
	}
	
	private void newClickInst()
	{
		clearScreen();
		
		if(form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo() != null)//WDEV-15414 
		{
			form.cmbContextType().setValue(form.getLocalContext().getInpatientEpisode() != null ? VTEAssessmentContextType.INPATIENT : null);
		}
		else
			form.cmbContextType().setValue((Boolean.TRUE.equals(form.getLocalContext().getPatientIsInpatient()) || Boolean.TRUE.equals(form.getLocalContext().getPatientHasTCIForToday()))? VTEAssessmentContextType.INPATIENT : null);
		
		form.getLocalContext().setCurrentRecord(new VTERiskAssessmentVo());
		form.ccAuthoringInfo().initializeComponent();
		
		form.setMode(FormMode.EDIT);
	}

	protected void onChkNotExpectedReducedMobilityValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.ctn1().chkNotExpectedReducedMobility().getValue())
			clearDetailsControls();
		
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		boolean hasAtLeastOneCriteriaCompleted =  hasAtLeastOneCriteriaCompleted();
		boolean showTciLabel = form.getMode().equals(FormMode.EDIT) && Boolean.TRUE.equals(form.getLocalContext().getPatientHasTCIForToday() && form.getGlobalContext().Core.getInpatientEpisodeForVTERiskAssessmentWorklistVo() == null);
		
		boolean showValidateDeclineButtons = form.getLocalContext().getCurrentRecord() != null && VTEAssessmentContextType.PREOP.equals(form.getLocalContext().getCurrentRecord().getContextType())
		&& (VTEAsessmentStatus.COMPLETED.equals(form.getLocalContext().getCurrentRecord().getVTEAssessmentStatus()) || VTEAsessmentStatus.VALIDATION_REQUIRED.equals(form.getLocalContext().getCurrentRecord().getVTEAssessmentStatus()))
		&& ((Boolean.TRUE.equals(form.getLocalContext().getisRecordLinkedToPatientSummary() && Boolean.TRUE.equals(form.getLocalContext().getPatientHasTCIForToday())) || form.getLocalContext().getInpatientEpisodeForRecord() != null || form.getLocalContext().getDischargedEpisodeForRecord() != null));
		
		boolean hasTciOrIsInpatient = Boolean.TRUE.equals(form.getLocalContext().getPatientHasTCIForToday()) || Boolean.TRUE.equals(form.getLocalContext().getPatientIsInpatient());
		boolean currentInpatientEpisodeHasLinkedVte = form.getLocalContext().getInpatientEpisode() != null && form.getLocalContext().getInpatientEpisode().getVTERiskAssessment() != null;
		boolean hasTCIForTodayAndPreOpToValidate =  Boolean.TRUE.equals(form.getLocalContext().getPatientHasTCIForToday()) && Boolean.TRUE.equals(form.getLocalContext().getHasPreOpForValidation());
		boolean showValidatedDeclinedLabels = form.getLocalContext().getCurrentRecord() != null && VTEAssessmentContextType.PREOP.equals(form.getLocalContext().getCurrentRecord().getContextType()) 
				&& (form.getLocalContext().getCurrentRecord().getValidatedInformation() != null || form.getLocalContext().getCurrentRecord().getDeclinedInformation() != null);
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnClose().setVisible(false);
			form.btnRIE().setVisible(false);
			
			form.ctn1().chkNotExpectedReducedMobility().setEnabled(true);
			enableDisableDetailsComntrols(form.ctn1().chkNotExpectedReducedMobility().getValue() == false);
		}
		else
		{
			
			form.btnClose().setVisible(isDialog());
								
			form.btnRIE().setVisible(!engine.isRIEMode());
			
			enabledisableControls(false);
			
			if(!Boolean.TRUE.equals(form.getLocalContext().getReadOnlyForm()))
			{
				
				form.btnClose().setEnabled(true);
				form.btnRIE().setEnabled(form.getLocalContext().getCurrentRecordIsNotNull());
								
				form.ccAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE);
				form.ccAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
			}
		}
		
		form.lblTciForToday().setVisible(showTciLabel);
		form.txtComments().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		form.cmbContextType().setEnabled(form.getMode().equals(FormMode.EDIT) && (!hasTciOrIsInpatient || form.getLocalContext().getDischargeEpisode() != null));
		
		form.ccAuthoringInfo().setEnabledAuthoringHCP(form.getMode().equals(FormMode.EDIT));
		form.ccAuthoringInfo().setEnabledDateTime(form.getMode().equals(FormMode.EDIT));
		
		form.btnNew().setEnabled(form.getMode().equals(FormMode.VIEW) && !currentInpatientEpisodeHasLinkedVte && !hasTCIForTodayAndPreOpToValidate && form.getLocalContext().getDischargeEpisode() == null);
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW));
		
	//	form.btnEdit().setEnabled(form.getLocalContext().getCurrentRecord() != null && form.getLocalContext().getCurrentRecord().getCompletedBy() == null);
		form.btnEdit().setVisible(false);
		
		form.btnValidate().setVisible(form.getMode().equals(FormMode.VIEW) && showValidateDeclineButtons);
		form.btnDecline().setVisible(form.getMode().equals(FormMode.VIEW) && showValidateDeclineButtons);
		
		form.btnValidate().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsHCPUser()));
		form.btnDecline().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsHCPUser()));
		
		form.btnCompleteSave().setEnabled(form.getMode().equals(FormMode.EDIT) && hasAtLeastOneCriteriaCompleted);
		form.btnCompleteSave().setVisible(form.getMode().equals(FormMode.EDIT));
		
		form.lblHcp().setVisible(showValidatedDeclinedLabels);
		form.lblDateTime().setVisible(showValidatedDeclinedLabels);
		form.lblReason().setVisible(form.getLocalContext().getCurrentRecord() != null && form.getLocalContext().getCurrentRecord().getDeclinedInformation() != null);
	}
	
	private void enableDisableDetailsComntrols(Boolean param)
	{
		
		form.ctn1().chkActiveCancer().setEnabled(param);
		form.ctn1().chkAgeOverSixty().setEnabled(param);
		form.ctn1().chkDehydration().setEnabled(param);
		form.ctn1().chkKnownThrombophilias().setEnabled(param);
		form.ctn1().chkAcquiredBleeding().setEnabled(param);
		form.ctn1().chkActiveBleeding().setEnabled(param);
		form.ctn1().chkAcuteStroke().setEnabled(param);
		form.ctn1().chkAcuteSurgicalAdmission().setEnabled(param);
		form.ctn1().chkAnaestheticAndSurgery().setEnabled(param);
		form.ctn1().chkConcurrentAnticoagulants().setEnabled(param);
		form.ctn1().chkCriticalCareAdmission().setEnabled(param);
		form.ctn1().chkHipFracture().setEnabled(param);
		form.ctn1().chkHipKneeReplacement().setEnabled(param);
		form.ctn1().chkHistoryOfVTE().setEnabled(param);
		form.ctn1().chkLumbarPuncturePrevious4hrs().setEnabled(param);
		form.ctn1().chkLumbarPunctureWithinNext12hrs().setEnabled(param);
		form.ctn1().chkNeuroSpinalEyeSurgery().setEnabled(param);
		
		form.ctn1().chkSurgeryIn().setEnabled(param);
		
		form.ctn1().chkObesity().setEnabled(param);
		form.ctn1().chkOtherProcedureWithHighBleedingRisk().setEnabled(param);
		form.ctn1().chkPregnancy().setEnabled(param);
		form.ctn1().chkReducedMobility().setEnabled(param);
		form.ctn1().chkSignificantMorbidities().setEnabled(param);
		form.ctn1().chkSurgeryIn().setEnabled(param);
		form.ctn1().chkSurgerySignificantMobilityReduction().setEnabled(param);
		form.ctn1().chkThrombocytopenia().setEnabled(param);
		form.ctn1().chkUncontrolledHypertension().setEnabled(param);
		form.ctn1().chkUntreatedBleedingDisorder().setEnabled(param);
		form.ctn1().chkUseOfHRT().setEnabled(param);
		form.ctn1().chkUseOfOstogren().setEnabled(param);
		form.ctn1().chkVaricoseVeins().setEnabled(param);
		form.ctn1().GroupRisk().setEnabled(param);
		form.ctn1().chkAntiembolism().setEnabled(param);
		form.ctn1().chkEnoxaparin().setEnabled(param);
		form.ctn1().chkNoProphylaxis().setEnabled(param);
		
	}
	private void enabledisableControls(Boolean param)
	{
		
		form.ccAuthoringInfo().setEnabledAuthoringHCP(param);
		form.ccAuthoringInfo().setEnabledDateTime(param);
		form.ctn1().chkNotExpectedReducedMobility().setEnabled(param);
		form.btnClose().setEnabled(param);
		form.btnRIE().setEnabled(param);
		enableDisableDetailsComntrols(param);
	}
	

	
	protected void onFormModeChanged() 
	{
		updateControlsState();
		
	}
	
	protected void onRecbrVTEAssessmentValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setCurrentRecord(domain.getVTERiskAssessment(form.recbrVTEAssessment().getValue()));
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		updateControlsState();
		
	}
	
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
		
	}
	
	protected void onBtnRIEClick() throws PresentationLogicException 
	{
		if(form.getLocalContext().getCurrentRecord() == null)
			return;
				
		engine.open(form.getForms().Core.RieConfirmationDialog);
		
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result)	throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
		}
		else if (formName.equals(form.getForms().Clinical.VTERemoveDeclineReasonDialog) && DialogResult.OK.equals(result))
		{
			declineVTE(form.getGlobalContext().Clinical.getVTERemoveDeclineReason());
			
			if (form.getLocalContext().getInpatientEpisodeForRecord() != null)
			{
				newClickInst();
			}
		}
		
		
	}
	private void doRIE()
	{
		if(form.getLocalContext().getCurrentRecordIsNotNull())
		{
			try
			{
				if(isDialog())
				{
					domain.markAsRie(form.getLocalContext().getCurrentRecord(), form.getForms().Clinical.VTERiskAssessmentDialog,  
						form.getGlobalContext().Core.getPatientShort().getID_Patient(), null,
						form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
						form.getGlobalContext().Core.getRieMessage());
				}
				else
				{
					domain.markAsRie(form.getLocalContext().getCurrentRecord(), form.getForms().Clinical.VTERiskAssessment,  
							form.getGlobalContext().Core.getPatientShort().getID_Patient(), null,
							form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
							form.getGlobalContext().Core.getRieMessage());
				}
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			catch (UnqViolationUncheckedException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			
			InpatientEpisodeForVTERiskAsessmentVo tempVo = form.getLocalContext().getInpatientEpisode();
			
			if(tempVo != null  && tempVo.getVTEAssessmentStatus() != null && form.getLocalContext().getCurrentRecord().equals(tempVo.getVTERiskAssessment()))// 	WDEV-16026
			{
				tempVo.setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
				tempVo.setVTERiskAssessment(null);
				
				try 
				{
					domain.saveInpatientEpisode(tempVo);
				} 
				catch (StaleObjectException e) 
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				} 
				catch (UniqueKeyViolationException e) 
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}
			}
			//WDEV-15414 
			else if(form.getLocalContext().getDischargeEpisode() != null && form.getLocalContext().getDischargeEpisode().getVTEAssessmentStatus() != null && form.getLocalContext().getCurrentRecord().equals(form.getLocalContext().getDischargeEpisode().getVTERiskAssessment()))// 	WDEV-16026
			{
				form.getLocalContext().getDischargeEpisode().setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
				form.getLocalContext().getDischargeEpisode().setVTERiskAssessment(null);
				
				String[] errors = form.getLocalContext().getDischargeEpisode().validate();
				
				if(errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					open();
					return;
				}
				
				try 
				{
					domain.saveDischargeEpisode(form.getLocalContext().getDischargeEpisode());
				} 
				catch (StaleObjectException e) 
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				} 
				catch (UniqueKeyViolationException e) 
				{
					e.printStackTrace();
					engine.showMessage(e.getMessage());
				}
			}
			
			if (Boolean.TRUE.equals(form.getLocalContext().getisRecordLinkedToPatientSummary()))
			{
				if (!clearSummaryRecords(form.getLocalContext().getCurrentRecord()))
					return;	
			}
			
			form.getLocalContext().setCurrentRecord(null);
		}
		
		if (isDialog() && form.getLocalContext().getDischargeEpisode() != null)
			engine.close(DialogResult.OK);
		else 
			open();
	}
	
	private boolean clearSummaryRecords(VTERiskAssessmentVo currentRecord)
	{
		PatientSummaryRecordVo summaryRecord = domain.getPatientSummaryForRecord(currentRecord, form.getGlobalContext().Core.getPatientShort());

		if (summaryRecord != null)
		{
			summaryRecord.setPreOpVTEAssessment(null);
			summaryRecord.setPreOpVTECompletedDate(null);
			summaryRecord.setPreOpVTEValidationDate(null);
			summaryRecord.setInpatientVTEAssessment(null);

			try
			{
				domain.savePatientSummaryRecord(summaryRecord);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return false;
			}
		}
		
		return true;
	}

	protected void onRIEDialogClosed(DialogResult result) throws PresentationLogicException 
	{
		if(DialogResult.OK.equals(result))	//wdev-14955
		{
			if(form.getLocalContext().getCurrentRecordIsNotNull())
			{
				InpatientEpisodeForVTERiskAsessmentVo tempVo = form.getLocalContext().getInpatientEpisode();
				
				if(tempVo != null  && form.getLocalContext().getCurrentRecord().equals(tempVo.getVTERiskAssessment()))
				{
					tempVo.setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
					tempVo.setVTERiskAssessment(null);
					try 
					{
						domain.saveInpatientEpisode(tempVo);
					} 
					catch (StaleObjectException e) 
					{
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					} 
					catch (UniqueKeyViolationException e) 
					{
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					}
					form.getLocalContext().setCurrentRecord(null);
				}
				//WDEV-15414 
				else if(form.getLocalContext().getDischargeEpisode() != null  && form.getLocalContext().getCurrentRecord().equals(form.getLocalContext().getDischargeEpisode().getVTERiskAssessment()))
				{
					form.getLocalContext().getDischargeEpisode().setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
					form.getLocalContext().getDischargeEpisode().setVTERiskAssessment(null);
					
					String[] errors = form.getLocalContext().getDischargeEpisode().validate();
					
					if(errors != null && errors.length > 0)
					{
						engine.showErrors(errors);
						open();
						return;
					}
					
					try 
					{
						domain.saveDischargeEpisode(form.getLocalContext().getDischargeEpisode());
					} 
					catch (StaleObjectException e) 
					{
						e.printStackTrace();
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					} 
					catch (UniqueKeyViolationException e) 
					{
						e.printStackTrace();
						engine.showMessage(e.getMessage());
					}
				}
				
			}
		}
		
	}
	
	protected void onChkNoProphylaxisValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.ctn1().chkNoProphylaxis().getValue()))
		{
			form.ctn1().chkAntiembolism().setValue(false);
			form.ctn1().chkEnoxaparin().setValue(false);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onChkEnoxaparinValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.ctn1().chkEnoxaparin().getValue()))
		{
			form.ctn1().chkNoProphylaxis().setValue(false);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onChkAntiembolismValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.ctn1().chkAntiembolism().getValue()))
		{
			form.ctn1().chkNoProphylaxis().setValue(false);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onRadioButtonGroupRiskValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	private boolean hasAtLeastOneCriteriaCompleted()
	{
		if (form.ctn1().chkNotExpectedReducedMobility().getValue() || (!form.ctn1().GroupRisk().getValue().equals(GroupRiskEnumeration.None)) && (form.ctn1().chkAntiembolism().getValue() || form.ctn1().chkEnoxaparin().getValue() 
			|| form.ctn1().chkNoProphylaxis().getValue()))
			return true;
		
		return false;
	}

	@Override
	protected void onBtnCompleteSaveClick() throws PresentationLogicException
	{
		if(save())
		{
			//WDEV-20213 - MAXIMS 10.1.2.0  - starts here
			if(isDialog())
			{
				engine.close(DialogResult.OK);
			}
			else
			{
				open();
			}
			//WDEV-20213 - MAXIMS 10.1.2.0 - ends here
		}
	}

	@Override
	protected void onBtnValidateClick() throws PresentationLogicException
	{
		//clear values from PatientSummaryRecord
		if (Boolean.TRUE.equals(form.getLocalContext().getisRecordLinkedToPatientSummary()))
		{
			try
			{
				PatientSummaryRecordVo summaryRecord = domain.getPatientSummaryForRecord(form.getLocalContext().getCurrentRecord(), form.getGlobalContext().Core.getPatientShort());
				summaryRecord.setPreOpVTEValidationDate(new Date());
				domain.savePatientSummaryRecord(summaryRecord);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
		}
		
		//update the linked discharge episode
		if (form.getLocalContext().getDischargedEpisodeForRecord() != null)
		{
			DischargedEpisodeForVTERiskAssessmentWorklistVo dischargedEpisode = form.getLocalContext().getDischargedEpisodeForRecord();
			dischargedEpisode.setVTEAssessmentStatus(VTEAsessmentStatus.VALIDATED);
			
			dischargedEpisode.validate();
			
			try
			{
				domain.saveDischargeEpisode(dischargedEpisode);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
		}
		
		//update the linked inpatient episode
		if (form.getLocalContext().getInpatientEpisodeForRecord() != null)
		{
			InpatientEpisodeForVTERiskAsessmentVo inpatientEpisode = form.getLocalContext().getInpatientEpisodeForRecord();
			inpatientEpisode.setVTEAssessmentStatus(VTEAsessmentStatus.VALIDATED);
			
			inpatientEpisode.validate();
			
			try 
			{
				domain.saveInpatientEpisode(inpatientEpisode);
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
		}
		
		//update the VTE Assessment
		updateVteStatus(VTEAsessmentStatus.VALIDATED, null);
		
		form.getLocalContext().setCurrentRecord(null);
		
		if(isDialog()) //WDEV-22840
		{
			engine.close(DialogResult.OK);
		}
		else
		{
			open();
		}
		
	}

	@Override
	protected void onBtnDeclineClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.VTERemoveDeclineReasonDialog, new Object[] {"Decline VTE Assessment"});
	}

	
	private void declineVTE(VTERemoveDeclineReasonVo reasonDeclined)
	{
		//clear values from PatientSummaryRecord
		if (Boolean.TRUE.equals(form.getLocalContext().getisRecordLinkedToPatientSummary()))
		{
			if (!clearSummaryRecords(form.getLocalContext().getCurrentRecord()))
					return;
		}
		
		//update the linked discharge episode
		if (form.getLocalContext().getDischargedEpisodeForRecord() != null)
		{
			DischargedEpisodeForVTERiskAssessmentWorklistVo dischargedEpisode = form.getLocalContext().getDischargedEpisodeForRecord();
			dischargedEpisode.setVTEAssessmentStatus(VTEAsessmentStatus.VALIDATION_DECLINED);
			dischargedEpisode.setVTEAssessmentStatusReason(reasonDeclined != null ? reasonDeclined.getReason() : null);
			
			dischargedEpisode.validate();
			
			try
			{
				domain.saveDischargeEpisode(dischargedEpisode);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
		}
		
		//update the linked inpatient episode
		if (form.getLocalContext().getInpatientEpisodeForRecord() != null)
		{
			InpatientEpisodeForVTERiskAsessmentVo inpatientEpisode = form.getLocalContext().getInpatientEpisodeForRecord();
			inpatientEpisode.setVTEAssessmentStatus(VTEAsessmentStatus.REQUIRED);
			inpatientEpisode.setVTERiskAssessment(null);
			
			inpatientEpisode.validate();
			
			try 
			{
				domain.saveInpatientEpisode(inpatientEpisode);
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setCurrentRecord(null);
				open();
				return;
			}
		}
		
		//update the VTE Assessment
		updateVteStatus(VTEAsessmentStatus.VALIDATION_DECLINED, reasonDeclined);
		
		form.getLocalContext().setCurrentRecord(null);
		open();
		
	}

	private void updateVteStatus(VTEAsessmentStatus status, VTERemoveDeclineReasonVo reasonDeclined)
	{
		VTERiskAssessmentVo voVTERiskAss = form.getLocalContext().getCurrentRecord();
		
		voVTERiskAss.setVTEAssessmentStatus(status);
		
		if (VTEAsessmentStatus.VALIDATED.equals(status))
		{
			AuthoringInformationVo validateInfo = new AuthoringInformationVo();
			
			validateInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			validateInfo.setAuthoringDateTime(new DateTime());
			
			voVTERiskAss.setValidatedInformation(validateInfo);
		}
		else if (VTEAsessmentStatus.VALIDATION_DECLINED.equals(status))
		{
			AuthoringInformationVo declinedInfo = new AuthoringInformationVo();
			
			declinedInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			declinedInfo.setAuthoringDateTime(new DateTime());
			
			voVTERiskAss.setDeclinedInformation(declinedInfo);
			
			voVTERiskAss.setDeclinedReason(reasonDeclined != null ? reasonDeclined.getReason() : null);
		}
			
		voVTERiskAss.validate();
		
		try
		{
			domain.saveVTERiskAssess(voVTERiskAss);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
	
}
