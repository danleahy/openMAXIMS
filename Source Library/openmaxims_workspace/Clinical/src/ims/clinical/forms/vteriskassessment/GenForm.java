//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.vteriskassessment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctn1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
	
		public static class GroupRiskRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 760, 864, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "", startTabIndex.intValue() + 36);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 520, 864, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "", startTabIndex.intValue() + 35);
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 280, 864, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "", startTabIndex.intValue() + 34);
			}
			public void setText(GroupRiskEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupRiskEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupRiskEnumeration.None;
					case 0: return GroupRiskEnumeration.rdoNoSIgnificantIncrease;
					case 1: return GroupRiskEnumeration.rdoHighRiskWithSignificantBleeding;
					case 2: return GroupRiskEnumeration.rdoHighRiskWithLowBleeding;
				}
				return null;
			}
			public void setValue(GroupRiskEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupRiskEnumeration.None.id);
			}
			public boolean isEnabled(GroupRiskEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupRiskEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupRiskEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupRiskEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupRiskEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupRiskEnumeration None = new GroupRiskEnumeration(-1);
			public static GroupRiskEnumeration rdoNoSIgnificantIncrease = new GroupRiskEnumeration(0);
			public static GroupRiskEnumeration rdoHighRiskWithSignificantBleeding = new GroupRiskEnumeration(1);
			public static GroupRiskEnumeration rdoHighRiskWithLowBleeding = new GroupRiskEnumeration(2);
			private GroupRiskEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupRiskEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 552, 904, 248, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 376, 904, 173, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 144, 904, 229, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 904, 133, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 552, 840, 248, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 312, 840, 237, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 104, 840, 205, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 840, 93, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 736, 552, 64, 280, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 552, 333, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 330, 552, 64, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 320, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 330, 152, 64, 384, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 736, 152, 64, 384, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 400, 152, 333, 384, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 400, 22, 400, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 330, 22, 64, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 22, 320, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 320, 384, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
	
			// Label Controls
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 560, 928, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Prophylaxis Required", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 118, 751, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "to familiarise themselves with the sections of NICE clinical guideline 92 (http://guidance.nice.org.uk/CG92) that are relevant to their areas of practice", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 384, 936, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Prophylaxis", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 384, 920, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pharmacological", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 150, 920, 140, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Antiembolism stockings", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 150, 936, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "or mechanical device", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 920, 115, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Prophylaxis offered", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 936, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(tick)", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 560, 856, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No significant", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 560, 872, 115, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "increase in VTE risk", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 320, 856, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "High risk of VTE with", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 320, 872, 140, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "significant bleeding risk", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 112, 856, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "High risk of VTE with", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 112, 872, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "low bleeding risk", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 16, 856, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Risk group", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 16, 873, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(tick)", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 754, 568, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Tick", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 416, 600, 224, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Neurosurgery, spinal surgery or eye surgery", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 416, 624, 203, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other procedure with high bleeding risk", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 416, 648, 304, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lumbar puncture / epidural / spinal anaesthesia insertion or", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 416, 663, 199, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "removal expected within next 12 hours", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 416, 688, 244, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lumbar puncture / epidural / spinal anaesthesia", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 416, 704, 225, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "insertion or removal within previous 4 hours", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 349, 568, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tick", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 568, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bleeding Risk if ..", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active bleeding", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 624, 289, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Acquired bleeding disorders ( such as acute liver failure )", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 648, 304, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Concurrent use of anticoagulants known to increase the risk", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 16, 664, 233, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "of bleeding  ( such as warfarin with INR > 2 )", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 16, 696, 316, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Uncontrolled arterial hypertension ( 230/120 mmHg or higher)", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 16, 740, 175, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Thrombocytopenia (plts < 75 x 10", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 180, 728, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "9", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 192, 740, 23, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "/ l )", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 16, 768, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Acute stroke", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 16, 792, 308, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Untreated inherited bleeding disorders ( such as haemophilia", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 16, 808, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "and von Willebrand's disease )", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 349, 163, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tick", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 757, 164, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Tick", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 416, 192, 224, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Significantly reduced mobility for >= 3 days", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 416, 216, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Critical care admission", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 416, 240, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hip or knee replacement", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 416, 264, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hip fracture", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 416, 296, 223, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Total anaesthetic + surgical time > 90 mins", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 416, 336, 242, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery involving lower limb or pelvis with total", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 416, 352, 195, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "anaesthetic + surgical time > 60 mins", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 416, 384, 324, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Acute surgical admission with inflammatory or intra - abdominal", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 416, 398, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "condition", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 416, 424, 227, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery with significant reduction in mobility", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 8, 134, 231, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "and, if doubt remains, to seek further advice.", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 381, 102, 403, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "it is the responsibility of the clinician undertaking the risk assessment", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 8, 102, 386, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "remembered that the risk assessment and flow chart are not exhaustive and", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 8, 87, 776, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assess thrombosis and bleeding risks below, assign to a risk group, then consult the VTE guidance flow chart, document prophylaxis offered and sign. It must be", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 408, 54, 343, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "no prophylaxis is necessary. Sign document. If not, continue below.", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 408, 38, 336, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "If ticked, patient is low risk and risk assessment is now complete; ", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 16, 54, 168, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mobility relative to normal state?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 16, 38, 238, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Medical patient NOT expected to have reduced", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 8, 6, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Answer question below:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 152, 296, 9, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, ")", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 136, 288, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "2", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 17, 165, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Thrombosis Risk if ..", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 17, 192, 173, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active cancer or cancer treatment", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 17, 216, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Age > 60", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 17, 240, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dehydration", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 17, 264, 115, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Known thrombophilias", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 16, 296, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Obesity ( BMI > 30kg/ m", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 17, 328, 286, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "One or more significant medical comorbidities (eg heart,", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 17, 344, 289, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "metabolic, endocrine, respiratory, inflammatory or acute ", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 17, 360, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "infectious diseases )", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 17, 392, 314, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Personal history or first - degree relative with a history of VTE", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 17, 424, 191, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Use of hormone replacement therapy", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 17, 448, 227, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Use of oestrogen - containing contraceptives", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 17, 472, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Varicose veins with phlebitis", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 17, 496, 190, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pregnancy or < 6 weeks post partum", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 17, 512, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "( See separate guidelines )", new Integer(0), null, new Integer(0)}));
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 760, 928, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 520, 928, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 344, 928, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 760, 624, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 760, 656, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 760, 696, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 354, 600, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 354, 624, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 354, 656, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 354, 696, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 354, 736, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 354, 768, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 354, 800, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 354, 192, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 354, 216, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 354, 240, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 354, 264, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 354, 296, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 354, 344, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 354, 392, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 354, 424, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 354, 448, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 354, 472, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 354, 504, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 760, 192, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 760, 216, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper124 = new RuntimeAnchoring(designSize, runtimeSize, 760, 240, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper124.getX()), new Integer(anchoringHelper124.getY()), new Integer(anchoringHelper124.getWidth()), new Integer(anchoringHelper124.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper125 = new RuntimeAnchoring(designSize, runtimeSize, 760, 264, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper125.getX()), new Integer(anchoringHelper125.getY()), new Integer(anchoringHelper125.getWidth()), new Integer(anchoringHelper125.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper126 = new RuntimeAnchoring(designSize, runtimeSize, 760, 296, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper126.getX()), new Integer(anchoringHelper126.getY()), new Integer(anchoringHelper126.getWidth()), new Integer(anchoringHelper126.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper127 = new RuntimeAnchoring(designSize, runtimeSize, 760, 344, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1123), new Integer(anchoringHelper127.getX()), new Integer(anchoringHelper127.getY()), new Integer(anchoringHelper127.getWidth()), new Integer(anchoringHelper127.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper128 = new RuntimeAnchoring(designSize, runtimeSize, 760, 392, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1124), new Integer(anchoringHelper128.getX()), new Integer(anchoringHelper128.getY()), new Integer(anchoringHelper128.getWidth()), new Integer(anchoringHelper128.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper129 = new RuntimeAnchoring(designSize, runtimeSize, 760, 424, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1125), new Integer(anchoringHelper129.getX()), new Integer(anchoringHelper129.getY()), new Integer(anchoringHelper129.getWidth()), new Integer(anchoringHelper129.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper130 = new RuntimeAnchoring(designSize, runtimeSize, 354, 46, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1126), new Integer(anchoringHelper130.getX()), new Integer(anchoringHelper130.getY()), new Integer(anchoringHelper130.getWidth()), new Integer(anchoringHelper130.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
	
			// RadioButton Controls
			RadioButton tmpGroupRisk = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1127), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupRisk);
			GroupRiskRadioButton GroupRisk = (GroupRiskRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupRiskRadioButton.class, tmpGroupRisk);
			GroupRisk.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupRisk);
	
			// Horizontal Line Controls
			RuntimeAnchoring anchoringHelper131 = new RuntimeAnchoring(designSize, runtimeSize, 8, 967, 792, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1128), new Integer(anchoringHelper131.getX()), new Integer(anchoringHelper131.getY()), new Integer(anchoringHelper131.getWidth()), new Integer(anchoringHelper131.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(1)}));
			RuntimeAnchoring anchoringHelper132 = new RuntimeAnchoring(designSize, runtimeSize, 744, 720, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1129), new Integer(anchoringHelper132.getX()), new Integer(anchoringHelper132.getY()), new Integer(anchoringHelper132.getWidth()), new Integer(anchoringHelper132.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper133 = new RuntimeAnchoring(designSize, runtimeSize, 744, 680, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1130), new Integer(anchoringHelper133.getX()), new Integer(anchoringHelper133.getY()), new Integer(anchoringHelper133.getWidth()), new Integer(anchoringHelper133.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper134 = new RuntimeAnchoring(designSize, runtimeSize, 744, 640, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1131), new Integer(anchoringHelper134.getX()), new Integer(anchoringHelper134.getY()), new Integer(anchoringHelper134.getWidth()), new Integer(anchoringHelper134.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper135 = new RuntimeAnchoring(designSize, runtimeSize, 744, 616, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1132), new Integer(anchoringHelper135.getX()), new Integer(anchoringHelper135.getY()), new Integer(anchoringHelper135.getWidth()), new Integer(anchoringHelper135.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper136 = new RuntimeAnchoring(designSize, runtimeSize, 744, 592, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1133), new Integer(anchoringHelper136.getX()), new Integer(anchoringHelper136.getY()), new Integer(anchoringHelper136.getWidth()), new Integer(anchoringHelper136.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper137 = new RuntimeAnchoring(designSize, runtimeSize, 416, 720, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1134), new Integer(anchoringHelper137.getX()), new Integer(anchoringHelper137.getY()), new Integer(anchoringHelper137.getWidth()), new Integer(anchoringHelper137.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper138 = new RuntimeAnchoring(designSize, runtimeSize, 416, 680, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1135), new Integer(anchoringHelper138.getX()), new Integer(anchoringHelper138.getY()), new Integer(anchoringHelper138.getWidth()), new Integer(anchoringHelper138.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper139 = new RuntimeAnchoring(designSize, runtimeSize, 416, 640, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1136), new Integer(anchoringHelper139.getX()), new Integer(anchoringHelper139.getY()), new Integer(anchoringHelper139.getWidth()), new Integer(anchoringHelper139.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper140 = new RuntimeAnchoring(designSize, runtimeSize, 416, 616, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1137), new Integer(anchoringHelper140.getX()), new Integer(anchoringHelper140.getY()), new Integer(anchoringHelper140.getWidth()), new Integer(anchoringHelper140.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper141 = new RuntimeAnchoring(designSize, runtimeSize, 416, 592, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1138), new Integer(anchoringHelper141.getX()), new Integer(anchoringHelper141.getY()), new Integer(anchoringHelper141.getWidth()), new Integer(anchoringHelper141.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper142 = new RuntimeAnchoring(designSize, runtimeSize, 338, 784, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1139), new Integer(anchoringHelper142.getX()), new Integer(anchoringHelper142.getY()), new Integer(anchoringHelper142.getWidth()), new Integer(anchoringHelper142.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper143 = new RuntimeAnchoring(designSize, runtimeSize, 338, 760, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1140), new Integer(anchoringHelper143.getX()), new Integer(anchoringHelper143.getY()), new Integer(anchoringHelper143.getWidth()), new Integer(anchoringHelper143.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper144 = new RuntimeAnchoring(designSize, runtimeSize, 338, 720, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1141), new Integer(anchoringHelper144.getX()), new Integer(anchoringHelper144.getY()), new Integer(anchoringHelper144.getWidth()), new Integer(anchoringHelper144.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper145 = new RuntimeAnchoring(designSize, runtimeSize, 338, 640, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1142), new Integer(anchoringHelper145.getX()), new Integer(anchoringHelper145.getY()), new Integer(anchoringHelper145.getWidth()), new Integer(anchoringHelper145.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper146 = new RuntimeAnchoring(designSize, runtimeSize, 338, 616, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1143), new Integer(anchoringHelper146.getX()), new Integer(anchoringHelper146.getY()), new Integer(anchoringHelper146.getWidth()), new Integer(anchoringHelper146.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper147 = new RuntimeAnchoring(designSize, runtimeSize, 338, 592, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1144), new Integer(anchoringHelper147.getX()), new Integer(anchoringHelper147.getY()), new Integer(anchoringHelper147.getWidth()), new Integer(anchoringHelper147.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper148 = new RuntimeAnchoring(designSize, runtimeSize, 338, 680, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1145), new Integer(anchoringHelper148.getX()), new Integer(anchoringHelper148.getY()), new Integer(anchoringHelper148.getWidth()), new Integer(anchoringHelper148.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper149 = new RuntimeAnchoring(designSize, runtimeSize, 17, 784, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1146), new Integer(anchoringHelper149.getX()), new Integer(anchoringHelper149.getY()), new Integer(anchoringHelper149.getWidth()), new Integer(anchoringHelper149.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper150 = new RuntimeAnchoring(designSize, runtimeSize, 17, 760, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1147), new Integer(anchoringHelper150.getX()), new Integer(anchoringHelper150.getY()), new Integer(anchoringHelper150.getWidth()), new Integer(anchoringHelper150.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper151 = new RuntimeAnchoring(designSize, runtimeSize, 17, 720, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1148), new Integer(anchoringHelper151.getX()), new Integer(anchoringHelper151.getY()), new Integer(anchoringHelper151.getWidth()), new Integer(anchoringHelper151.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper152 = new RuntimeAnchoring(designSize, runtimeSize, 17, 680, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1149), new Integer(anchoringHelper152.getX()), new Integer(anchoringHelper152.getY()), new Integer(anchoringHelper152.getWidth()), new Integer(anchoringHelper152.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper153 = new RuntimeAnchoring(designSize, runtimeSize, 17, 640, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1150), new Integer(anchoringHelper153.getX()), new Integer(anchoringHelper153.getY()), new Integer(anchoringHelper153.getWidth()), new Integer(anchoringHelper153.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper154 = new RuntimeAnchoring(designSize, runtimeSize, 17, 616, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1151), new Integer(anchoringHelper154.getX()), new Integer(anchoringHelper154.getY()), new Integer(anchoringHelper154.getWidth()), new Integer(anchoringHelper154.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper155 = new RuntimeAnchoring(designSize, runtimeSize, 17, 592, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1152), new Integer(anchoringHelper155.getX()), new Integer(anchoringHelper155.getY()), new Integer(anchoringHelper155.getWidth()), new Integer(anchoringHelper155.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper156 = new RuntimeAnchoring(designSize, runtimeSize, 338, 184, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1153), new Integer(anchoringHelper156.getX()), new Integer(anchoringHelper156.getY()), new Integer(anchoringHelper156.getWidth()), new Integer(anchoringHelper156.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper157 = new RuntimeAnchoring(designSize, runtimeSize, 338, 208, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1154), new Integer(anchoringHelper157.getX()), new Integer(anchoringHelper157.getY()), new Integer(anchoringHelper157.getWidth()), new Integer(anchoringHelper157.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper158 = new RuntimeAnchoring(designSize, runtimeSize, 338, 232, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1155), new Integer(anchoringHelper158.getX()), new Integer(anchoringHelper158.getY()), new Integer(anchoringHelper158.getWidth()), new Integer(anchoringHelper158.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper159 = new RuntimeAnchoring(designSize, runtimeSize, 338, 256, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1156), new Integer(anchoringHelper159.getX()), new Integer(anchoringHelper159.getY()), new Integer(anchoringHelper159.getWidth()), new Integer(anchoringHelper159.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper160 = new RuntimeAnchoring(designSize, runtimeSize, 338, 280, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1157), new Integer(anchoringHelper160.getX()), new Integer(anchoringHelper160.getY()), new Integer(anchoringHelper160.getWidth()), new Integer(anchoringHelper160.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper161 = new RuntimeAnchoring(designSize, runtimeSize, 338, 320, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1158), new Integer(anchoringHelper161.getX()), new Integer(anchoringHelper161.getY()), new Integer(anchoringHelper161.getWidth()), new Integer(anchoringHelper161.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper162 = new RuntimeAnchoring(designSize, runtimeSize, 338, 376, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1159), new Integer(anchoringHelper162.getX()), new Integer(anchoringHelper162.getY()), new Integer(anchoringHelper162.getWidth()), new Integer(anchoringHelper162.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper163 = new RuntimeAnchoring(designSize, runtimeSize, 338, 416, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1160), new Integer(anchoringHelper163.getX()), new Integer(anchoringHelper163.getY()), new Integer(anchoringHelper163.getWidth()), new Integer(anchoringHelper163.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper164 = new RuntimeAnchoring(designSize, runtimeSize, 338, 440, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1161), new Integer(anchoringHelper164.getX()), new Integer(anchoringHelper164.getY()), new Integer(anchoringHelper164.getWidth()), new Integer(anchoringHelper164.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper165 = new RuntimeAnchoring(designSize, runtimeSize, 338, 464, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1162), new Integer(anchoringHelper165.getX()), new Integer(anchoringHelper165.getY()), new Integer(anchoringHelper165.getWidth()), new Integer(anchoringHelper165.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper166 = new RuntimeAnchoring(designSize, runtimeSize, 338, 488, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1163), new Integer(anchoringHelper166.getX()), new Integer(anchoringHelper166.getY()), new Integer(anchoringHelper166.getWidth()), new Integer(anchoringHelper166.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper167 = new RuntimeAnchoring(designSize, runtimeSize, 744, 440, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1164), new Integer(anchoringHelper167.getX()), new Integer(anchoringHelper167.getY()), new Integer(anchoringHelper167.getWidth()), new Integer(anchoringHelper167.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper168 = new RuntimeAnchoring(designSize, runtimeSize, 744, 416, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1165), new Integer(anchoringHelper168.getX()), new Integer(anchoringHelper168.getY()), new Integer(anchoringHelper168.getWidth()), new Integer(anchoringHelper168.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper169 = new RuntimeAnchoring(designSize, runtimeSize, 744, 376, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1166), new Integer(anchoringHelper169.getX()), new Integer(anchoringHelper169.getY()), new Integer(anchoringHelper169.getWidth()), new Integer(anchoringHelper169.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper170 = new RuntimeAnchoring(designSize, runtimeSize, 744, 320, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1167), new Integer(anchoringHelper170.getX()), new Integer(anchoringHelper170.getY()), new Integer(anchoringHelper170.getWidth()), new Integer(anchoringHelper170.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper171 = new RuntimeAnchoring(designSize, runtimeSize, 744, 280, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1168), new Integer(anchoringHelper171.getX()), new Integer(anchoringHelper171.getY()), new Integer(anchoringHelper171.getWidth()), new Integer(anchoringHelper171.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper172 = new RuntimeAnchoring(designSize, runtimeSize, 744, 256, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1169), new Integer(anchoringHelper172.getX()), new Integer(anchoringHelper172.getY()), new Integer(anchoringHelper172.getWidth()), new Integer(anchoringHelper172.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper173 = new RuntimeAnchoring(designSize, runtimeSize, 744, 184, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1170), new Integer(anchoringHelper173.getX()), new Integer(anchoringHelper173.getY()), new Integer(anchoringHelper173.getWidth()), new Integer(anchoringHelper173.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(1)}));
			RuntimeAnchoring anchoringHelper174 = new RuntimeAnchoring(designSize, runtimeSize, 744, 208, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1171), new Integer(anchoringHelper174.getX()), new Integer(anchoringHelper174.getY()), new Integer(anchoringHelper174.getWidth()), new Integer(anchoringHelper174.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(1)}));
			RuntimeAnchoring anchoringHelper175 = new RuntimeAnchoring(designSize, runtimeSize, 744, 232, 48, 8, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1172), new Integer(anchoringHelper175.getX()), new Integer(anchoringHelper175.getY()), new Integer(anchoringHelper175.getWidth()), new Integer(anchoringHelper175.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper176 = new RuntimeAnchoring(designSize, runtimeSize, 416, 440, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1173), new Integer(anchoringHelper176.getX()), new Integer(anchoringHelper176.getY()), new Integer(anchoringHelper176.getWidth()), new Integer(anchoringHelper176.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper177 = new RuntimeAnchoring(designSize, runtimeSize, 416, 416, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1174), new Integer(anchoringHelper177.getX()), new Integer(anchoringHelper177.getY()), new Integer(anchoringHelper177.getWidth()), new Integer(anchoringHelper177.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper178 = new RuntimeAnchoring(designSize, runtimeSize, 416, 376, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1175), new Integer(anchoringHelper178.getX()), new Integer(anchoringHelper178.getY()), new Integer(anchoringHelper178.getWidth()), new Integer(anchoringHelper178.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper179 = new RuntimeAnchoring(designSize, runtimeSize, 416, 320, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1176), new Integer(anchoringHelper179.getX()), new Integer(anchoringHelper179.getY()), new Integer(anchoringHelper179.getWidth()), new Integer(anchoringHelper179.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper180 = new RuntimeAnchoring(designSize, runtimeSize, 416, 280, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1177), new Integer(anchoringHelper180.getX()), new Integer(anchoringHelper180.getY()), new Integer(anchoringHelper180.getWidth()), new Integer(anchoringHelper180.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper181 = new RuntimeAnchoring(designSize, runtimeSize, 416, 208, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1178), new Integer(anchoringHelper181.getX()), new Integer(anchoringHelper181.getY()), new Integer(anchoringHelper181.getWidth()), new Integer(anchoringHelper181.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper182 = new RuntimeAnchoring(designSize, runtimeSize, 416, 184, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1179), new Integer(anchoringHelper182.getX()), new Integer(anchoringHelper182.getY()), new Integer(anchoringHelper182.getWidth()), new Integer(anchoringHelper182.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper183 = new RuntimeAnchoring(designSize, runtimeSize, 416, 232, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1180), new Integer(anchoringHelper183.getX()), new Integer(anchoringHelper183.getY()), new Integer(anchoringHelper183.getWidth()), new Integer(anchoringHelper183.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper184 = new RuntimeAnchoring(designSize, runtimeSize, 416, 256, 301, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1181), new Integer(anchoringHelper184.getX()), new Integer(anchoringHelper184.getY()), new Integer(anchoringHelper184.getWidth()), new Integer(anchoringHelper184.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper185 = new RuntimeAnchoring(designSize, runtimeSize, 16, 320, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1182), new Integer(anchoringHelper185.getX()), new Integer(anchoringHelper185.getY()), new Integer(anchoringHelper185.getWidth()), new Integer(anchoringHelper185.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper186 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1183), new Integer(anchoringHelper186.getX()), new Integer(anchoringHelper186.getY()), new Integer(anchoringHelper186.getWidth()), new Integer(anchoringHelper186.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper187 = new RuntimeAnchoring(designSize, runtimeSize, 16, 184, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1184), new Integer(anchoringHelper187.getX()), new Integer(anchoringHelper187.getY()), new Integer(anchoringHelper187.getWidth()), new Integer(anchoringHelper187.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper188 = new RuntimeAnchoring(designSize, runtimeSize, 16, 232, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1185), new Integer(anchoringHelper188.getX()), new Integer(anchoringHelper188.getY()), new Integer(anchoringHelper188.getWidth()), new Integer(anchoringHelper188.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper189 = new RuntimeAnchoring(designSize, runtimeSize, 16, 256, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1186), new Integer(anchoringHelper189.getX()), new Integer(anchoringHelper189.getY()), new Integer(anchoringHelper189.getWidth()), new Integer(anchoringHelper189.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper190 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1187), new Integer(anchoringHelper190.getX()), new Integer(anchoringHelper190.getY()), new Integer(anchoringHelper190.getWidth()), new Integer(anchoringHelper190.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper191 = new RuntimeAnchoring(designSize, runtimeSize, 16, 376, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1188), new Integer(anchoringHelper191.getX()), new Integer(anchoringHelper191.getY()), new Integer(anchoringHelper191.getWidth()), new Integer(anchoringHelper191.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper192 = new RuntimeAnchoring(designSize, runtimeSize, 17, 416, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1189), new Integer(anchoringHelper192.getX()), new Integer(anchoringHelper192.getY()), new Integer(anchoringHelper192.getWidth()), new Integer(anchoringHelper192.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper193 = new RuntimeAnchoring(designSize, runtimeSize, 17, 440, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1190), new Integer(anchoringHelper193.getX()), new Integer(anchoringHelper193.getY()), new Integer(anchoringHelper193.getWidth()), new Integer(anchoringHelper193.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper194 = new RuntimeAnchoring(designSize, runtimeSize, 17, 464, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1191), new Integer(anchoringHelper194.getX()), new Integer(anchoringHelper194.getY()), new Integer(anchoringHelper194.getWidth()), new Integer(anchoringHelper194.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			RuntimeAnchoring anchoringHelper195 = new RuntimeAnchoring(designSize, runtimeSize, 17, 488, 296, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1192), new Integer(anchoringHelper195.getX()), new Integer(anchoringHelper195.getY()), new Integer(anchoringHelper195.getWidth()), new Integer(anchoringHelper195.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
		}
		public CheckBox chkNoProphylaxis()
		{
			return (CheckBox)super.getControl(93);
		}
		public CheckBox chkEnoxaparin()
		{
			return (CheckBox)super.getControl(94);
		}
		public CheckBox chkAntiembolism()
		{
			return (CheckBox)super.getControl(95);
		}
		public CheckBox chkNeuroSpinalEyeSurgery()
		{
			return (CheckBox)super.getControl(96);
		}
		public CheckBox chkOtherProcedureWithHighBleedingRisk()
		{
			return (CheckBox)super.getControl(97);
		}
		public CheckBox chkLumbarPunctureWithinNext12hrs()
		{
			return (CheckBox)super.getControl(98);
		}
		public CheckBox chkLumbarPuncturePrevious4hrs()
		{
			return (CheckBox)super.getControl(99);
		}
		public CheckBox chkActiveBleeding()
		{
			return (CheckBox)super.getControl(100);
		}
		public CheckBox chkAcquiredBleeding()
		{
			return (CheckBox)super.getControl(101);
		}
		public CheckBox chkConcurrentAnticoagulants()
		{
			return (CheckBox)super.getControl(102);
		}
		public CheckBox chkUncontrolledHypertension()
		{
			return (CheckBox)super.getControl(103);
		}
		public CheckBox chkThrombocytopenia()
		{
			return (CheckBox)super.getControl(104);
		}
		public CheckBox chkAcuteStroke()
		{
			return (CheckBox)super.getControl(105);
		}
		public CheckBox chkUntreatedBleedingDisorder()
		{
			return (CheckBox)super.getControl(106);
		}
		public CheckBox chkActiveCancer()
		{
			return (CheckBox)super.getControl(107);
		}
		public CheckBox chkAgeOverSixty()
		{
			return (CheckBox)super.getControl(108);
		}
		public CheckBox chkDehydration()
		{
			return (CheckBox)super.getControl(109);
		}
		public CheckBox chkKnownThrombophilias()
		{
			return (CheckBox)super.getControl(110);
		}
		public CheckBox chkObesity()
		{
			return (CheckBox)super.getControl(111);
		}
		public CheckBox chkSignificantMorbidities()
		{
			return (CheckBox)super.getControl(112);
		}
		public CheckBox chkHistoryOfVTE()
		{
			return (CheckBox)super.getControl(113);
		}
		public CheckBox chkUseOfHRT()
		{
			return (CheckBox)super.getControl(114);
		}
		public CheckBox chkUseOfOstogren()
		{
			return (CheckBox)super.getControl(115);
		}
		public CheckBox chkVaricoseVeins()
		{
			return (CheckBox)super.getControl(116);
		}
		public CheckBox chkPregnancy()
		{
			return (CheckBox)super.getControl(117);
		}
		public CheckBox chkReducedMobility()
		{
			return (CheckBox)super.getControl(118);
		}
		public CheckBox chkCriticalCareAdmission()
		{
			return (CheckBox)super.getControl(119);
		}
		public CheckBox chkHipKneeReplacement()
		{
			return (CheckBox)super.getControl(120);
		}
		public CheckBox chkHipFracture()
		{
			return (CheckBox)super.getControl(121);
		}
		public CheckBox chkAnaestheticAndSurgery()
		{
			return (CheckBox)super.getControl(122);
		}
		public CheckBox chkSurgeryIn()
		{
			return (CheckBox)super.getControl(123);
		}
		public CheckBox chkAcuteSurgicalAdmission()
		{
			return (CheckBox)super.getControl(124);
		}
		public CheckBox chkSurgerySignificantMobilityReduction()
		{
			return (CheckBox)super.getControl(125);
		}
		public CheckBox chkNotExpectedReducedMobility()
		{
			return (CheckBox)super.getControl(126);
		}
		public GroupRiskRadioButton GroupRisk()
		{
			return (GroupRiskRadioButton)super.getRadioButton(0);
		}
	}
	public static class cmbContextTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.VTEAssessmentContextType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.VTEAssessmentContextType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.VTEAssessmentContextType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.VTEAssessmentContextType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.VTEAssessmentContextType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.VTEAssessmentContextType getValue()
		{
			return (ims.clinical.vo.lookups.VTEAssessmentContextType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.VTEAssessmentContextType value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrVTEAssessmentRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.VTERiskAssessmentShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.VTERiskAssessmentShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.VTERiskAssessmentShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.VTERiskAssessmentShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.clinical.vo.VTERiskAssessmentShortVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.clinical.vo.VTERiskAssessmentShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.clinical.vo.VTERiskAssessmentShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.clinical.vo.VTERiskAssessmentShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.clinical.vo.VTERiskAssessmentShortVo getValue()
		{
			return (ims.clinical.vo.VTERiskAssessmentShortVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.VTERiskAssessmentShortVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getCurrentRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper196 = new RuntimeAnchoring(designSize, runtimeSize, 11, 529, 368, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_ccAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper196.getSize(), instance1, startTabIndex.intValue() + 41, skipContextValidation);
		//ims.framework.Control m_ccAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1193), new Integer(11), new Integer(529), new Integer(368), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 41), m_ccAuthoringInfoForm, instance1 } );
		ims.framework.Control m_ccAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1194),  new Integer(anchoringHelper196.getX()), new Integer(anchoringHelper196.getY()), new Integer(anchoringHelper196.getWidth()), new Integer(anchoringHelper196.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 41), m_ccAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccAuthoringInfoControl);
		Menu[] menus1 = m_ccAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper197 = new RuntimeAnchoring(designSize, runtimeSize, 9, 72, 831, 408, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctn1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1195), new Integer(anchoringHelper197.getX()), new Integer(anchoringHelper197.getY()), new Integer(anchoringHelper197.getWidth()), new Integer(anchoringHelper197.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctn1);
		ctn1Container ctn1 = (ctn1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctn1Container.class, m_ctn1, factory);
		ims.framework.utils.SizeInfo m_ctn1DesignSize = new ims.framework.utils.SizeInfo(831, 408);
		ims.framework.utils.SizeInfo m_ctn1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper197.getWidth(), anchoringHelper197.getHeight());
		ctn1.setContext(form, appForm, m_ctn1, loader, this.getImages(), startControlID, m_ctn1DesignSize, m_ctn1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctn1);

		// Label Controls
		RuntimeAnchoring anchoringHelper198 = new RuntimeAnchoring(designSize, runtimeSize, 624, 565, 46, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1196), new Integer(anchoringHelper198.getX()), new Integer(anchoringHelper198.getY()), new Integer(anchoringHelper198.getWidth()), new Integer(anchoringHelper198.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reason", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper199 = new RuntimeAnchoring(designSize, runtimeSize, 288, 42, 159, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1197), new Integer(anchoringHelper199.getX()), new Integer(anchoringHelper199.getY()), new Integer(anchoringHelper199.getWidth()), new Integer(anchoringHelper199.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient has a TCI for Today", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper200 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1198), new Integer(anchoringHelper200.getX()), new Integer(anchoringHelper200.getY()), new Integer(anchoringHelper200.getWidth()), new Integer(anchoringHelper200.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Context Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper201 = new RuntimeAnchoring(designSize, runtimeSize, 16, 495, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1199), new Integer(anchoringHelper201.getX()), new Integer(anchoringHelper201.getY()), new Integer(anchoringHelper201.getWidth()), new Integer(anchoringHelper201.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper202 = new RuntimeAnchoring(designSize, runtimeSize, 389, 565, 65, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1200), new Integer(anchoringHelper202.getX()), new Integer(anchoringHelper202.getY()), new Integer(anchoringHelper202.getWidth()), new Integer(anchoringHelper202.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date/Time", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper203 = new RuntimeAnchoring(designSize, runtimeSize, 389, 541, 28, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1201), new Integer(anchoringHelper203.getX()), new Integer(anchoringHelper203.getY()), new Integer(anchoringHelper203.getWidth()), new Integer(anchoringHelper203.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "HCP", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper204 = new RuntimeAnchoring(designSize, runtimeSize, 272, 600, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1202), new Integer(anchoringHelper204.getX()), new Integer(anchoringHelper204.getY()), new Integer(anchoringHelper204.getWidth()), new Integer(anchoringHelper204.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Decline", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper205 = new RuntimeAnchoring(designSize, runtimeSize, 176, 600, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1203), new Integer(anchoringHelper205.getX()), new Integer(anchoringHelper205.getY()), new Integer(anchoringHelper205.getWidth()), new Integer(anchoringHelper205.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Validate", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper206 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1204), new Integer(anchoringHelper206.getX()), new Integer(anchoringHelper206.getY()), new Integer(anchoringHelper206.getWidth()), new Integer(anchoringHelper206.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper207 = new RuntimeAnchoring(designSize, runtimeSize, 387, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1205), new Integer(anchoringHelper207.getX()), new Integer(anchoringHelper207.getY()), new Integer(anchoringHelper207.getWidth()), new Integer(anchoringHelper207.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper208 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1206), new Integer(anchoringHelper208.getX()), new Integer(anchoringHelper208.getY()), new Integer(anchoringHelper208.getWidth()), new Integer(anchoringHelper208.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper209 = new RuntimeAnchoring(designSize, runtimeSize, 608, 600, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1207), new Integer(anchoringHelper209.getX()), new Integer(anchoringHelper209.getY()), new Integer(anchoringHelper209.getWidth()), new Integer(anchoringHelper209.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Complete and Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper210 = new RuntimeAnchoring(designSize, runtimeSize, 93, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1208), new Integer(anchoringHelper210.getX()), new Integer(anchoringHelper210.getY()), new Integer(anchoringHelper210.getWidth()), new Integer(anchoringHelper210.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper211 = new RuntimeAnchoring(designSize, runtimeSize, 13, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1209), new Integer(anchoringHelper211.getX()), new Integer(anchoringHelper211.getY()), new Integer(anchoringHelper211.getWidth()), new Integer(anchoringHelper211.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper212 = new RuntimeAnchoring(designSize, runtimeSize, 88, 495, 720, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1210), new Integer(anchoringHelper212.getX()), new Integer(anchoringHelper212.getY()), new Integer(anchoringHelper212.getWidth()), new Integer(anchoringHelper212.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper213 = new RuntimeAnchoring(designSize, runtimeSize, 101, 40, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbContextTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1211), new Integer(anchoringHelper213.getX()), new Integer(anchoringHelper213.getY()), new Integer(anchoringHelper213.getWidth()), new Integer(anchoringHelper213.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbContextTypeTemp);
		cmbContextTypeComboBox cmbContextType = (cmbContextTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbContextTypeComboBox.class, m_cmbContextTypeTemp);
		super.addComboBox(cmbContextType);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper214 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 824, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrVTEAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1212), new Integer(anchoringHelper214.getX()), new Integer(anchoringHelper214.getY()), new Integer(anchoringHelper214.getWidth()), new Integer(anchoringHelper214.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrVTEAssessmentTemp);
		recbrVTEAssessmentRecordBrowser recbrVTEAssessment = (recbrVTEAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrVTEAssessmentRecordBrowser.class, m_recbrVTEAssessmentTemp);
		super.addRecordBrowser(recbrVTEAssessment);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper215 = new RuntimeAnchoring(designSize, runtimeSize, 16, 480, 808, 8, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1213), new Integer(anchoringHelper215.getX()), new Integer(anchoringHelper215.getY()), new Integer(anchoringHelper215.getWidth()), new Integer(anchoringHelper215.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,new Integer(0)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent ccAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ctn1Container ctn1()
	{
		return (ctn1Container)super.getContainer(0);
	}
	public Label lblReason()
	{
		return (Label)super.getControl(2);
	}
	public Label lblTciForToday()
	{
		return (Label)super.getControl(3);
	}
	public Label lblDateTime()
	{
		return (Label)super.getControl(6);
	}
	public Label lblHcp()
	{
		return (Label)super.getControl(7);
	}
	public Button btnDecline()
	{
		return (Button)super.getControl(8);
	}
	public Button btnValidate()
	{
		return (Button)super.getControl(9);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(10);
	}
	public Button btnRIE()
	{
		return (Button)super.getControl(11);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCompleteSave()
	{
		return (Button)super.getControl(13);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(14);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(16);
	}
	public cmbContextTypeComboBox cmbContextType()
	{
		return (cmbContextTypeComboBox)super.getComboBox(0);
	}
	public recbrVTEAssessmentRecordBrowser recbrVTEAssessment()
	{
		return (recbrVTEAssessmentRecordBrowser)super.getRecordBrowser(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				VTERiskAssessment = new LocalFormName(123237);
				VTERiskAssessmentDialog = new LocalFormName(123238);
				VTERemoveDeclineReasonDialog = new LocalFormName(123302);
			}
			public final FormName VTERiskAssessment;
			public final FormName VTERiskAssessmentDialog;
			public final FormName VTERemoveDeclineReasonDialog;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Correspondence = new CorrespondenceImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
				Alert_RedTriangle2 = new ImageHelper(102142, "Images/Core/alarm-red-triangle-2.gif", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				Remove = new ImageHelper(102300, "Images/Core/remove.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image Add;
			public final ims.framework.utils.Image Alert_RedTriangle2;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image Remove;
		}
		public final class CorrespondenceImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceImages()
			{
				DocumentCompleted16 = new ImageHelper(111154, "Images/Correspondence/document_completed_16x16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image DocumentCompleted16;
		}
		public final CoreImages Core;
		public final CorrespondenceImages Correspondence;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
			cxl_ReadOnlyForm = new ims.framework.ContextVariable("ReadOnlyForm", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__ReadOnlyForm_" + componentIdentifier + "");
			cxl_InpatientEpisode = new ims.framework.ContextVariable("InpatientEpisode", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier + "");
			cxl_DischargeEpisode = new ims.framework.ContextVariable("DischargeEpisode", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargeEpisode_" + componentIdentifier + "");
			cxl_PatientIsInpatient = new ims.framework.ContextVariable("PatientIsInpatient", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__PatientIsInpatient_" + componentIdentifier + "");
			cxl_PatientHasTCIForToday = new ims.framework.ContextVariable("PatientHasTCIForToday", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__PatientHasTCIForToday_" + componentIdentifier + "");
			cxl_isRecordLinkedToPatientSummary = new ims.framework.ContextVariable("isRecordLinkedToPatientSummary", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__isRecordLinkedToPatientSummary_" + componentIdentifier + "");
			cxl_HasPreOpForValidation = new ims.framework.ContextVariable("HasPreOpForValidation", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__HasPreOpForValidation_" + componentIdentifier + "");
			cxl_InpatientEpisodeForRecord = new ims.framework.ContextVariable("InpatientEpisodeForRecord", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier + "");
			cxl_DischargedEpisodeForRecord = new ims.framework.ContextVariable("DischargedEpisodeForRecord", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargedEpisodeForRecord_" + componentIdentifier + "");
			cxl_IsHCPUser = new ims.framework.ContextVariable("IsHCPUser", prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__IsHCPUser_" + componentIdentifier + "");
		}
		
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.clinical.vo.VTERiskAssessmentVo getCurrentRecord()
		{
			return (ims.clinical.vo.VTERiskAssessmentVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.clinical.vo.VTERiskAssessmentVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
		public boolean getReadOnlyFormIsNotNull()
		{
			return !cxl_ReadOnlyForm.getValueIsNull(context);
		}
		public Boolean getReadOnlyForm()
		{
			return (Boolean)cxl_ReadOnlyForm.getValue(context);
		}
		public void setReadOnlyForm(Boolean value)
		{
			cxl_ReadOnlyForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReadOnlyForm = null;
		public boolean getInpatientEpisodeIsNotNull()
		{
			return !cxl_InpatientEpisode.getValueIsNull(context);
		}
		public ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo getInpatientEpisode()
		{
			return (ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo)cxl_InpatientEpisode.getValue(context);
		}
		public void setInpatientEpisode(ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo value)
		{
			cxl_InpatientEpisode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InpatientEpisode = null;
		public boolean getDischargeEpisodeIsNotNull()
		{
			return !cxl_DischargeEpisode.getValueIsNull(context);
		}
		public ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo getDischargeEpisode()
		{
			return (ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo)cxl_DischargeEpisode.getValue(context);
		}
		public void setDischargeEpisode(ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo value)
		{
			cxl_DischargeEpisode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeEpisode = null;
		public boolean getPatientIsInpatientIsNotNull()
		{
			return !cxl_PatientIsInpatient.getValueIsNull(context);
		}
		public Boolean getPatientIsInpatient()
		{
			return (Boolean)cxl_PatientIsInpatient.getValue(context);
		}
		public void setPatientIsInpatient(Boolean value)
		{
			cxl_PatientIsInpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientIsInpatient = null;
		public boolean getPatientHasTCIForTodayIsNotNull()
		{
			return !cxl_PatientHasTCIForToday.getValueIsNull(context);
		}
		public Boolean getPatientHasTCIForToday()
		{
			return (Boolean)cxl_PatientHasTCIForToday.getValue(context);
		}
		public void setPatientHasTCIForToday(Boolean value)
		{
			cxl_PatientHasTCIForToday.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientHasTCIForToday = null;
		public boolean getisRecordLinkedToPatientSummaryIsNotNull()
		{
			return !cxl_isRecordLinkedToPatientSummary.getValueIsNull(context);
		}
		public Boolean getisRecordLinkedToPatientSummary()
		{
			return (Boolean)cxl_isRecordLinkedToPatientSummary.getValue(context);
		}
		public void setisRecordLinkedToPatientSummary(Boolean value)
		{
			cxl_isRecordLinkedToPatientSummary.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isRecordLinkedToPatientSummary = null;
		public boolean getHasPreOpForValidationIsNotNull()
		{
			return !cxl_HasPreOpForValidation.getValueIsNull(context);
		}
		public Boolean getHasPreOpForValidation()
		{
			return (Boolean)cxl_HasPreOpForValidation.getValue(context);
		}
		public void setHasPreOpForValidation(Boolean value)
		{
			cxl_HasPreOpForValidation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasPreOpForValidation = null;
		public boolean getInpatientEpisodeForRecordIsNotNull()
		{
			return !cxl_InpatientEpisodeForRecord.getValueIsNull(context);
		}
		public ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo getInpatientEpisodeForRecord()
		{
			return (ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo)cxl_InpatientEpisodeForRecord.getValue(context);
		}
		public void setInpatientEpisodeForRecord(ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo value)
		{
			cxl_InpatientEpisodeForRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InpatientEpisodeForRecord = null;
		public boolean getDischargedEpisodeForRecordIsNotNull()
		{
			return !cxl_DischargedEpisodeForRecord.getValueIsNull(context);
		}
		public ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo getDischargedEpisodeForRecord()
		{
			return (ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo)cxl_DischargedEpisodeForRecord.getValue(context);
		}
		public void setDischargedEpisodeForRecord(ims.core.vo.DischargedEpisodeForVTERiskAssessmentWorklistVo value)
		{
			cxl_DischargedEpisodeForRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargedEpisodeForRecord = null;
		public boolean getIsHCPUserIsNotNull()
		{
			return !cxl_IsHCPUser.getValueIsNull(context);
		}
		public Boolean getIsHCPUser()
		{
			return (Boolean)cxl_IsHCPUser.getValue(context);
		}
		public void setIsHCPUser(Boolean value)
		{
			cxl_IsHCPUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsHCPUser = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[237];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.VTERiskAssessmentShortVo", "BO-1072100100-ID", "ID_VTERiskAssessment");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.VTERiskAssessmentShortVo", "BO-1072100100-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEDATETIME", "DischargeDateTime");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ISACTIVE", "IsActive");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEDESTINATION", "DischargeDestination");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-METHODOFDISCHARGE", "MethodOfDischarge");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-WASTREATMENTDEFERRED", "WasTreatmentDeferred");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-EIGHTEENWEEKCLOCKSTOPPED", "EighteenWeekClockStopped");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEREADYDATE", "DischargeReadyDate");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ADMISSIONDETAIL", "AdmissionDetail");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-WASDIAGNOSTICDEFERRED", "WasDiagnosticDeferred");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-WASTREATMENTGIVEN", "WasTreatmentGiven");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DEREFERREDREASON", "DeferredReason");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGINGWARD", "DischargingWard");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Clinical.VTERiskAssessmentRefVo", "BO-1072100100-ID", "ID_VTERiskAssessment");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-ID", "ID_VTERiskAssessment");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-CARECONTEXT", "CareContext");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-NOTEXPECTEDREDUCEDMOBILITY", "NotExpectedReducedMobility");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-ACTIVECANCER", "ActiveCancer");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-AGEOVERSIXTY", "AgeOverSixty");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-DEHYDRATION", "Dehydration");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-KNOWNTHROMBOPHILIAS", "KnownThrombophilias");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-OBESITY", "Obesity");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-SIGNIFICANTMORBIDITIES", "SignificantMorbidities");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-HISTORYOFVTE", "HistoryOfVTE");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-USEOFHRT", "UseOfHRT");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-USEOFOSTOGREN", "UseOfOstogren");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-VARICOSEVEINS", "VaricoseVeins");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-PREGNANCY", "Pregnancy");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-REDUCEDMOBILITY", "ReducedMobility");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-CRITICALCAREADMISSION", "CriticalCareAdmission");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-HIPKNEEREPLACEMENT", "HipKneeReplacement");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-HIPFRACTURE", "HipFracture");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-ANAESTHETICANDSURGERY", "AnaestheticAndSurgery");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-ACUTESURGICALADMISSION", "AcuteSurgicalAdmission");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-SURGERYSIGNIFICANTMOBILITYREDUCTION", "SurgerySignificantMobilityReduction");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-ACTIVEBLEEDING", "ActiveBleeding");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-ACQUIREDBLEEDING", "AcquiredBleeding");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-CONCURRENTANTICOAGULANTS", "ConcurrentAnticoagulants");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-UNCONTROLLEDHYPERTENSION", "UncontrolledHypertension");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-THROMBOCYTOPENIA", "Thrombocytopenia");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-ACUTESTROKE", "AcuteStroke");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-UNTREATEDBLEEDINGDISORDER", "UntreatedBleedingDisorder");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-NEUROSPINALEYESURGERY", "NeuroSpinalEyeSurgery");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-OTHERPROCEDUREWITHHIGHBLEEDINGRISK", "OtherProcedureWithHighBleedingRisk");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-LUMBARPUNCTUREWITHINNEXT12HRS", "LumbarPunctureWithinNext12hrs");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-LUMBARPUNCTUREPREVIOUS4HRS", "LumbarPuncturePrevious4hrs");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-RISKGROUP", "RiskGroup");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-SURGERYLOWERLIMBPELVIS60MINS", "SurgeryLowerLimbPelvis60mins");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-COMMENTS", "Comments");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-CONTEXTTYPE", "ContextType");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-USED", "Used");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100100-DECLINEDREASON", "DeclinedReason");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-PASEVENT", "PasEvent");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUSREASON", "VTEAssessmentStatusReason");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-CONFIRMEDDISCHARGEDATETIME", "ConfirmedDischargeDateTime");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-ISONHOMELEAVE", "IsOnHomeLeave");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-TIMEONHOMELEAVE", "TimeOnHomeLeave");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisode_" + componentIdentifier, "BO-1014100000-ISCONFIRMEDDISCHARGE", "IsConfirmedDischarge");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargeEpisode_" + componentIdentifier, "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargeEpisode_" + componentIdentifier, "BO-1014100006-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargeEpisode_" + componentIdentifier, "BO-1014100006-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargeEpisode_" + componentIdentifier, "BO-1014100006-VTEASSESSMENTSTATUSREASON", "VTEAssessmentStatusReason");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-PASEVENT", "PasEvent");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUSREASON", "VTEAssessmentStatusReason");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-CONFIRMEDDISCHARGEDATETIME", "ConfirmedDischargeDateTime");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-ISONHOMELEAVE", "IsOnHomeLeave");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-TIMEONHOMELEAVE", "TimeOnHomeLeave");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__InpatientEpisodeForRecord_" + componentIdentifier, "BO-1014100000-ISCONFIRMEDDISCHARGE", "IsConfirmedDischarge");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargedEpisodeForRecord_" + componentIdentifier, "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargedEpisodeForRecord_" + componentIdentifier, "BO-1014100006-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargedEpisodeForRecord_" + componentIdentifier, "BO-1014100006-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.VTERiskAssessment.__internal_x_context__DischargedEpisodeForRecord_" + componentIdentifier, "BO-1014100006-VTEASSESSMENTSTATUSREASON", "VTEAssessmentStatusReason");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
