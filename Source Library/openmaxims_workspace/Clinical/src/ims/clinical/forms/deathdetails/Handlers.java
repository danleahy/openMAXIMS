//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.deathdetails;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbDeathNotificationStatusLookup();
	abstract protected void defaultcmbDeathNotificationStatusLookupValue();
	abstract protected void bindcmbPostMortemLookup();
	abstract protected void defaultcmbPostMortemLookupValue();
	abstract protected void bindcmbCodeDiscrepencyLookup();
	abstract protected void defaultcmbCodeDiscrepencyLookupValue();
	abstract protected void bindcmbCancerRelatedLookup();
	abstract protected void defaultcmbCancerRelatedLookupValue();
	abstract protected void bindcmbHowCauseEstablishedLookup();
	abstract protected void defaultcmbHowCauseEstablishedLookupValue();
	abstract protected void bindcmbPlaceofDeathLookup();
	abstract protected void defaultcmbPlaceofDeathLookupValue();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUndoDateofdeathClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDeathNotificationStatusValueSet(Object value);
	abstract protected void oncmbPostMortemValueSet(Object value);
	abstract protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdCauseofDeathSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbCodeDiscrepencyValueSet(Object value);
	abstract protected void oncmbCancerRelatedValueSet(Object value);
	abstract protected void oncmbHowCauseEstablishedValueSet(Object value);
	abstract protected void oncmbPlaceofDeathValueSet(Object value);
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnUndoDateofdeath().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUndoDateofdeathClick();
			}
		});
		this.form.cmbDeathNotificationStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDeathNotificationStatusValueSet(value);
			}
		});
		this.form.cmbPostMortem().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPostMortemValueSet(value);
			}
		});
		this.form.btnClose().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseClick();
			}
		});
		this.form.grdCauseofDeath().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdCauseofDeathSelectionChanged();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.cmbCodeDiscrepency().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCodeDiscrepencyValueSet(value);
			}
		});
		this.form.cmbCancerRelated().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCancerRelatedValueSet(value);
			}
		});
		this.form.cmbHowCauseEstablished().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbHowCauseEstablishedValueSet(value);
			}
		});
		this.form.cmbPlaceofDeath().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPlaceofDeathValueSet(value);
			}
		});
		this.form.getContextMenus().Clinical.getDeathDetailsPatientDiagnosisItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.DeathDetails.PatientDiagnosis, sender);
			}
		});
		this.form.getContextMenus().Clinical.getDeathDetailsSearchTaxonomyItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.DeathDetails.SearchTaxonomy, sender);
			}
		});
		this.form.getContextMenus().Clinical.getDeathDetailsSearchLocallyconfiguredDiagnosesItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.DeathDetails.SearchLocallyconfiguredDiagnoses, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbDeathNotificationStatusLookup();
		bindcmbPostMortemLookup();
		bindcmbCodeDiscrepencyLookup();
		bindcmbCancerRelatedLookup();
		bindcmbHowCauseEstablishedLookup();
		bindcmbPlaceofDeathLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbDeathNotificationStatusLookup();
		bindcmbPostMortemLookup();
		bindcmbCodeDiscrepencyLookup();
		bindcmbCancerRelatedLookup();
		bindcmbHowCauseEstablishedLookup();
		bindcmbPlaceofDeathLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbDeathNotificationStatusLookupValue();
		defaultcmbPostMortemLookupValue();
		defaultcmbCodeDiscrepencyLookupValue();
		defaultcmbCancerRelatedLookupValue();
		defaultcmbHowCauseEstablishedLookupValue();
		defaultcmbPlaceofDeathLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
