//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.AcuteTheatreList;
import ims.clinical.domain.base.impl.BaseAcuteTheatreCaseTimesDialogImpl;
import ims.clinical.domain.objects.PeriOpAnaesthticSignInTim;
import ims.clinical.domain.objects.PeriOpPatientArrivedTime;
import ims.clinical.domain.objects.PeriOpPatientLeftTheatre;
import ims.clinical.domain.objects.PeriOpPatientSentTime;
import ims.clinical.domain.objects.PeriOpReadyForDischargeTi;
import ims.clinical.domain.objects.PeriOpReadyForSurgeryTime;
import ims.clinical.domain.objects.PeriOpSafetyBriefTime;
import ims.clinical.domain.objects.PeriOpSurgeryStartTime;
import ims.clinical.domain.objects.PeriOpSurgeryStopTime;
import ims.clinical.domain.objects.PeriOpTimeIntoRecovery;
import ims.clinical.domain.objects.PeriOpTimeOutComplete;
import ims.clinical.domain.objects.PeriOpTimeOutOfRecoveryTi;
import ims.clinical.vo.PeriOpPatientArrivedTimeVo;
import ims.clinical.vo.PeriOpPatientLeftTheatreVo;
import ims.clinical.vo.PeriOpPatientSentTimeVo;
import ims.clinical.vo.PeriOpReadyForDischargeVo;
import ims.clinical.vo.PeriOpReadyForSurgeryTimeVo;
import ims.clinical.vo.PeriOpSafetyBriefTimeVo;
import ims.clinical.vo.PeriOpSurgeryStartTimeVo;
import ims.clinical.vo.PeriOpSurgeryStopTimeVo;
import ims.clinical.vo.PeriOpTimeIntoRecoveryVo;
import ims.clinical.vo.PeriOpTimeOutCompleteVo;
import ims.clinical.vo.PeriOpTimeOutOfRecoveryVo;
import ims.clinical.vo.domain.PeriOpAnaesthticSignInTimVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientArrivedTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientLeftTheatreVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientSentTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForDischargeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForSurgeryTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSafetyBriefTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStartTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStopTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeIntoRecoveryVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutCompleteVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutOfRecoveryVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.objects.TheatreBooking;
import ims.scheduling.vo.TheatreBookingRefVo;
import ims.scheduling.vo.lookups.AcuteTheateListBookingState;

public class AcuteTheatreCaseTimesDialogImpl extends BaseAcuteTheatreCaseTimesDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Save AnaestheticSignIn and Update Theatre Booking State
	*/
	public void saveAnaestheticSignIn(ims.clinical.vo.PeriOpAnaesthticSignInTimVo signIn, ims.scheduling.vo.TheatreBookingRefVo theatreBooking) throws ims.domain.exceptions.StaleObjectException, DomainInterfaceException
	{
		String methodName = "saveAnaestheticSignIn";

		if (signIn == null)
			throw new CodingRuntimeException("signIn is null in method " + methodName);
		if (!signIn.isValidated())
			throw new CodingRuntimeException("signIn has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpAnaesthticSignInTim doSignIn = PeriOpAnaesthticSignInTimVoAssembler.extractPeriOpAnaesthticSignInTim(factory, signIn);
		
		//WDEV-22446
		try
		{
			factory.save(doSignIn);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new DomainInterfaceException(ex);
		}
		
		//WDEV-22446
		saveBookingState(theatreBooking, factory, AcuteTheateListBookingState.ANAESTHETIC_SIGNIN);
	}

	private void saveBookingState(TheatreBookingRefVo theatreBooking, DomainFactory factory, AcuteTheateListBookingState state) throws StaleObjectException
	{
		TheatreBooking doTheatreBooking = (TheatreBooking) factory.getDomainObject(theatreBooking);
		doTheatreBooking.setState(factory.getLookupInstance(state.getID()));
		factory.save(doTheatreBooking);
	}

	/**
	* getAnaestheticSignIn
	*/
	public ims.clinical.vo.PeriOpAnaesthticSignInTimVo getAnaestheticSignIn(ims.clinical.vo.PeriOpAnaesthticSignInTimVo signIn)
	{		
		return PeriOpAnaesthticSignInTimVoAssembler.create((PeriOpAnaesthticSignInTim) getDomainFactory().getDomainObject(signIn));
	}

	@Override
	public void saveSafetyBrief(PeriOpSafetyBriefTimeVo safetyBrief, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.saveSafetyBrief(safetyBrief, theatreBooking);	
	}

	@Override
	public void savePatientSentFor(PeriOpPatientSentTimeVo patientSentFor, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.savePatientSentFor(patientSentFor, theatreBooking);
	}

	@Override
	public void savePatientArrived(PeriOpPatientArrivedTimeVo patientArrived, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.savePatientArrived(patientArrived, theatreBooking);
	}

	@Override
	public void saveAnaesthetisedRFS(PeriOpReadyForSurgeryTimeVo anaesthetizedRFS, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.saveAnaesthetisedRFS(anaesthetizedRFS, theatreBooking);
	}

	@Override
	public void saveTimeOutCompleted(PeriOpTimeOutCompleteVo timeOutCompleted, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.saveTimeOutCompleted(timeOutCompleted, theatreBooking);
	}

	@Override
	public void saveSurgeryStart(PeriOpSurgeryStartTimeVo surgeryStart, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.saveSurgeryStart(surgeryStart, theatreBooking);
	}

	@Override
	public void saveSurgeryStop(PeriOpSurgeryStopTimeVo surgeryStop, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.saveSurgeryStop(surgeryStop, theatreBooking);
	}

	@Override
	public void savePatientLeftTheatre(PeriOpPatientLeftTheatreVo patientLeftTheatre, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.savePatientLeftTheatre(patientLeftTheatre, theatreBooking);
	}

	@Override
	public void savePatientReadyForDischarge(PeriOpReadyForDischargeVo patientRFD, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.savePatientReadyForDischarge(patientRFD, theatreBooking);
	}

	@Override
	public void saveTimeOutOfRecovery(PeriOpTimeOutOfRecoveryVo timeOutOfRecovery, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException //WDEV-23825
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.saveTimeOutOfRecovery(timeOutOfRecovery, theatreBooking);
	}

	@Override
	public PeriOpSafetyBriefTimeVo getSafetyBrief(PeriOpSafetyBriefTimeVo safetyBrief)
	{
		return PeriOpSafetyBriefTimeVoAssembler.create((PeriOpSafetyBriefTime) getDomainFactory().getDomainObject(safetyBrief));
	}

	@Override
	public PeriOpPatientSentTimeVo getPatientSentFor(PeriOpPatientSentTimeVo patientSentFor)
	{
		return PeriOpPatientSentTimeVoAssembler.create((PeriOpPatientSentTime) getDomainFactory().getDomainObject(patientSentFor));
	}

	@Override
	public PeriOpPatientArrivedTimeVo getPatientArrived(PeriOpPatientArrivedTimeVo patientArrived)
	{
		return PeriOpPatientArrivedTimeVoAssembler.create((PeriOpPatientArrivedTime) getDomainFactory().getDomainObject(patientArrived));
	}

	@Override
	public PeriOpReadyForSurgeryTimeVo getAnaesRFS(PeriOpReadyForSurgeryTimeVo anaesRFS)
	{
		return PeriOpReadyForSurgeryTimeVoAssembler.create((PeriOpReadyForSurgeryTime) getDomainFactory().getDomainObject(anaesRFS));
	}

	@Override
	public PeriOpSurgeryStartTimeVo getSurgeryStart(PeriOpSurgeryStartTimeVo surgeryStart)
	{
		return PeriOpSurgeryStartTimeVoAssembler.create((PeriOpSurgeryStartTime) getDomainFactory().getDomainObject(surgeryStart));
	}

	@Override
	public PeriOpSurgeryStopTimeVo getSurgeryStop(PeriOpSurgeryStopTimeVo surgeryStop)
	{
		return PeriOpSurgeryStopTimeVoAssembler.create((PeriOpSurgeryStopTime) getDomainFactory().getDomainObject(surgeryStop));
	}

	@Override
	public PeriOpReadyForDischargeVo getReadyForDischarge(PeriOpReadyForDischargeVo readyForDischarge)
	{
		return PeriOpReadyForDischargeVoAssembler.create((PeriOpReadyForDischargeTi) getDomainFactory().getDomainObject(readyForDischarge));
	}

	@Override
	public PeriOpPatientLeftTheatreVo getPatientLeftTheatre(PeriOpPatientLeftTheatreVo patientLeftTheatre)
	{
		return PeriOpPatientLeftTheatreVoAssembler.create((PeriOpPatientLeftTheatre) getDomainFactory().getDomainObject(patientLeftTheatre));
	}

	@Override
	public PeriOpTimeOutOfRecoveryVo getTimeOutOfRecovery(PeriOpTimeOutOfRecoveryVo timeOutOfRecovery)
	{
		return PeriOpTimeOutOfRecoveryVoAssembler.create((PeriOpTimeOutOfRecoveryTi) getDomainFactory().getDomainObject(timeOutOfRecovery));
	}

	@Override
	public PeriOpTimeOutCompleteVo getTimeOutCompleted(PeriOpTimeOutCompleteVo timeOutCompleted)
	{
		return PeriOpTimeOutCompleteVoAssembler.create((PeriOpTimeOutComplete) getDomainFactory().getDomainObject(timeOutCompleted));
	}

	@Override
	public PeriOpTimeIntoRecoveryVo getTimeIntoRecovery(PeriOpTimeIntoRecoveryVo timeIntoRecovery)
	{
		return PeriOpTimeIntoRecoveryVoAssembler.create((PeriOpTimeIntoRecovery) getDomainFactory().getDomainObject(timeIntoRecovery));
	}

	@Override
	public void saveTimeIntoRecovery(PeriOpTimeIntoRecoveryVo timeIntoRecovery, TheatreBookingRefVo theatreBooking) throws StaleObjectException, DomainInterfaceException
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		impl.saveTimeIntoRecovery(timeIntoRecovery, theatreBooking);
	}
}
