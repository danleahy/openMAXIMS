//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseChartableOccurencesDialogImpl;
import ims.clinical.domain.objects.PatientChartableOccurance;
import ims.clinical.vo.PatientChartableOccuranceRefVo;
import ims.clinical.vo.PatientChartableOccurenceVo;
import ims.clinical.vo.domain.PatientChartableOccurenceVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class ChartableOccurencesDialogImpl extends BaseChartableOccurencesDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listPatientChartableOccuranceByAppt
	*/
	public ims.clinical.vo.PatientChartableOccurenceVoCollection listPatientChartableOccuranceByAppt(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listPatientChartableOccuranceByAppt");

		DomainFactory factory = getDomainFactory();
		List chartables = factory.find("from PatientChartableOccurance pc where pc.theatreAppointment.id = :idAppt order by pc.timeObserved ", new String[] { "idAppt"}, new Object[] { appt.getID_Booking_Appointment()});
		return PatientChartableOccurenceVoAssembler.createPatientChartableOccurenceVoCollectionFromPatientChartableOccurance(chartables);
	}

	/**
	* only returns a value if stale object occurs
	*/
	public void savePatientChartableOccurance(ims.clinical.vo.PatientChartableOccurenceVo patientChartableOccurance) throws ims.domain.exceptions.StaleObjectException
	{
		String methodName = "savePatientChartableOccurance";
		if (patientChartableOccurance == null)
			throw new CodingRuntimeException("patientChartableOccurance is null in method " + methodName);
		if (!patientChartableOccurance.isValidated())
			throw new CodingRuntimeException("patientChartableOccurance has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PatientChartableOccurance doChartable = PatientChartableOccurenceVoAssembler.extractPatientChartableOccurance(factory, patientChartableOccurance);
		factory.save(doChartable);
	}

	@Override
	public PatientChartableOccurenceVo getPatientChartableOccurence(PatientChartableOccuranceRefVo chartableOccurence)
	{
		DomainFactory factory = getDomainFactory();
		PatientChartableOccurance chartableBo = (PatientChartableOccurance) factory.getDomainObject(chartableOccurence);
		return PatientChartableOccurenceVoAssembler.create(chartableBo);
	}
}
