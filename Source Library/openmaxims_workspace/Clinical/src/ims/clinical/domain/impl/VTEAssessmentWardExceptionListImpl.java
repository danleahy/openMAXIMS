//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.clinical.domain.base.impl.BaseVTEAssessmentWardExceptionListImpl;
import ims.core.admin.domain.objects.VTEAssessmentConfig;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationForVTEAssessmentVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.VTEAssessmentConfigVo;
import ims.core.vo.domain.LocationForVTEAssessmentVoAssembler;
import ims.core.vo.domain.VTEAssessmentConfigVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class VTEAssessmentWardExceptionListImpl extends BaseVTEAssessmentWardExceptionListImpl
{

	private static final long serialVersionUID = 1L;

	public LocationForVTEAssessmentVoCollection listWardsForHospital(String name, LocationRefVo hospital)
	{
		List list;
		if(hospital==null)
		{
			list= listLocations(LocationType.WARD, Boolean.TRUE, name);
		}
		else
		{
			//http://jira/browse/WDEV-21222 
			OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
			list = impl.listLocationsByParentLocation(LocationType.WARD, hospital, Boolean.TRUE,null, name);
		}
		return LocationForVTEAssessmentVoAssembler.createLocationForVTEAssessmentVoCollectionFromLocation(list).sort();
	}
	
	private List listLocations(LocationType locType, Boolean activeOnly, String name)
	{
		DomainFactory factory = getDomainFactory();

		List locations;

		String hql = " from Location loc ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		if (locType != null)
		{
			condStr.append(andStr + " loc.type = :locType");
			markers.add("locType");
			values.add(getDomLookup(locType));
			andStr = " and ";
		}

		if (activeOnly != null && activeOnly.booleanValue())
		{
			condStr.append(andStr + " loc.isActive = :active");
			markers.add("active");
			values.add(activeOnly);
			andStr = " and ";
		}

		if (name != null)
		{
			condStr.append(andStr + " loc.upperName like :name");
			markers.add("name");
			values.add(name.toUpperCase() + "%");
			andStr = " and ";
		}

		condStr.append(andStr + "loc.isVirtual =:isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		if (andStr.equals(" and "))
		{
			hql += " where ";
		}

		hql += condStr.toString();
		hql += " ORDER BY loc.upperName";
		locations = factory.find(hql, markers, values);
		return locations;
	}

	public void saveConfig(VTEAssessmentConfigVo configToSave) throws StaleObjectException
	{
		if (configToSave == null)
			throw new CodingRuntimeException("Cannot save a null VTEAssessmentConfig.");

		DomainFactory factory = getDomainFactory();

		VTEAssessmentConfig doVteConfig = VTEAssessmentConfigVoAssembler.extractVTEAssessmentConfig(factory, configToSave);

		factory.save(doVteConfig);
		
	}

	public LocationLiteVoCollection listHospitals()
	{
		OrganisationAndLocation organisationImpl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);	
		return organisationImpl.listActiveHospitalsLite().sort();
	}

	public VTEAssessmentConfigVo getVTEConfig()
	{

		List list = getDomainFactory().find("select config from VTEAssessmentConfig as config ");
		
		if (list == null || list.size() == 0)
			return null;
	
		return VTEAssessmentConfigVoAssembler.createVTEAssessmentConfigVoCollectionFromVTEAssessmentConfig(list).get(0);
	}

}
