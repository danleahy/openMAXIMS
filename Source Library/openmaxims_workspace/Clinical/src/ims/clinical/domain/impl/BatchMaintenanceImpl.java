//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3014.30561)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.helper.Keywords;
import ims.clinical.domain.base.impl.BaseVaccineBatchMaintenanceImpl;
import ims.clinical.vo.lookups.VaccineManufacturer;
import ims.core.clinical.domain.objects.VaccineManufacturerBatch;
import ims.core.vo.VaccineLiteVoCollection;
import ims.core.vo.VaccineManufacturerBatchVo;
import ims.core.vo.VaccineManufacturerBatchVoCollection;
import ims.core.vo.domain.VaccineLiteVoAssembler;
import ims.core.vo.domain.VaccineManufacturerBatchVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.List;

public class BatchMaintenanceImpl extends BaseVaccineBatchMaintenanceImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.VaccineManufacturerBatchVoCollection list()
	{
		DomainFactory factory = getDomainFactory();
		return VaccineManufacturerBatchVoAssembler.createVaccineManufacturerBatchVoCollectionFromVaccineManufacturerBatch(factory.find("from VaccineManufacturerBatch"));
	}

	public ims.core.vo.VaccineManufacturerBatchVo get(ims.core.clinical.vo.VaccineManufacturerBatchRefVo vaccBatch)
	{
		if(vaccBatch == null && vaccBatch.getID_VaccineManufacturerBatch() == null)
			throw new DomainRuntimeException("VaccineManufacturerBatch not provided for get call. ");
		
		DomainFactory factory = getDomainFactory();
		
		VaccineManufacturerBatch doVaccineBatch = (VaccineManufacturerBatch) factory.getDomainObject(VaccineManufacturerBatch.class, vaccBatch.getID_VaccineManufacturerBatch());
		return VaccineManufacturerBatchVoAssembler.create(doVaccineBatch);
	}

	
	public VaccineLiteVoCollection listVaccineByName(String vaccineName) throws ims.domain.exceptions.DomainInterfaceException
	{
		if(vaccineName == null)
			throw new CodingRuntimeException("Cannot search on null Vaccine Name!");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from Vaccine x");
		hql.append(" join x.keywords as kw");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		hql.append(" where x.isActive = :isActive");
		names.add("isActive");
		values.add(Boolean.TRUE);	
		
		List result = Keywords.searchByKeywords(factory, vaccineName, hql.toString(), names, values);		
		return VaccineLiteVoAssembler.createVaccineLiteVoCollectionFromVaccine(result);		
	}

	public VaccineManufacturerBatchVoCollection list(String vaccineName, Date fromExpiryDate, Date toExpiryDate, PreActiveActiveInactiveStatus status, VaccineManufacturer manufacturer, String batchNumber) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from VaccineManufacturerBatch vac ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if (vaccineName != null)
		{
			if(markers.size() > 0)
				hql.append(" and ");
			
			hql.append("vac.vaccine.vaccineName like :vaccName");
			markers.add("vaccName");
			values.add(vaccineName + "%");
		}
		if(fromExpiryDate != null)
		{
			if(markers.size() > 0)
				hql.append(" and ");
			
			hql.append("vac.expiryDate >= :fromExp");
			markers.add("fromExp");
			values.add(fromExpiryDate.getDate());
		}
		if(toExpiryDate != null)
		{
			if(markers.size() > 0)
				hql.append(" and ");
			
			hql.append("vac.expiryDate <= :toExp");
			markers.add("toExp");
			values.add(toExpiryDate.getDate());
		}
		if(status != null)
		{
			if(markers.size() > 0)
				hql.append(" and ");
			
			hql.append(" vac.status.id = :st");
			markers.add("st");
			values.add(status.getID());
		}
		if(manufacturer != null)
		{
			if(markers.size() > 0)
				hql.append(" and ");
			
			hql.append(" vac.manufacturer.id = :man");
			markers.add("man");
			values.add(manufacturer.getID());
		}
		if (batchNumber != null)
		{
			if(markers.size() > 0)
				hql.append(" and ");
			
			hql.append("vac.batchNumber like :bNumber");
			markers.add("bNumber");
			values.add(batchNumber);
		}
		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();

		List vaccineList = factory.find(query, markers, values);
		return VaccineManufacturerBatchVoAssembler.createVaccineManufacturerBatchVoCollectionFromVaccineManufacturerBatch(vaccineList);
	}

	public VaccineManufacturerBatchVo save(VaccineManufacturerBatchVo vaccBatch) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if(!vaccBatch.isValidated())
			throw new DomainRuntimeException("VaccineManufacturerBatch Not Validated");
		
		if(vaccBatch.getBatchNumberIsNotNull() && vaccBatch.getManufacturerIsNotNull())
		{
			VaccineManufacturerBatchVoCollection listBatch = list(null, null, null, null, vaccBatch.getManufacturer(), vaccBatch.getBatchNumber());
			
			if(listBatch != null && listBatch.size() > 0)
			{
				for(int i=0; i<listBatch.size(); i++)
				{
					//	WDEV-12911 - starts here 
					if(listBatch.get(i) != null && listBatch.get(i).getID_VaccineManufacturerBatchIsNotNull() && (!listBatch.get(i).getID_VaccineManufacturerBatch().equals(vaccBatch.getID_VaccineManufacturerBatch()) || vaccBatch.getID_VaccineManufacturerBatch() == null))
					{
						if(!vaccBatch.getExpiryDate().equals(listBatch.get(i).getExpiryDate()))
						{
							throw new UniqueKeyViolationException("Inconsistency between expiry dates on this batch and one already recorded.");
						}
						
						if(vaccBatch.getVaccine().equals(listBatch.get(i).getVaccine()))
						{
							throw new UniqueKeyViolationException("Duplicate. Batch already recorded for this vaccine type.");
						}
					}
					//	WDEV-12911 - ends here
				}
			}
		}
		
		DomainFactory factory = getDomainFactory();
		VaccineManufacturerBatch doVaccineBatch = VaccineManufacturerBatchVoAssembler.extractVaccineManufacturerBatch(factory, vaccBatch);
		
		factory.save(doVaccineBatch);
			
		return VaccineManufacturerBatchVoAssembler.create(doVaccineBatch);
	}
}
