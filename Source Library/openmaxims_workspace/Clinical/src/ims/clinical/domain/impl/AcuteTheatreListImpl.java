//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.domain.base.impl.BaseAcuteTheatreListImpl;
import ims.clinical.domain.objects.PeriOpAnaesthticSignInTim;
import ims.clinical.domain.objects.PeriOpPatientArrivedTime;
import ims.clinical.domain.objects.PeriOpPatientLeftTheatre;
import ims.clinical.domain.objects.PeriOpPatientSentTime;
import ims.clinical.domain.objects.PeriOpReadyForDischargeTi;
import ims.clinical.domain.objects.PeriOpReadyForSurgeryTime;
import ims.clinical.domain.objects.PeriOpSafetyBriefTime;
import ims.clinical.domain.objects.PeriOpSurgeryStartTime;
import ims.clinical.domain.objects.PeriOpSurgeryStopTime;
import ims.clinical.domain.objects.PeriOpTimeIntoRecovery;
import ims.clinical.domain.objects.PeriOpTimeOutComplete;
import ims.clinical.domain.objects.PeriOpTimeOutOfRecoveryTi;
import ims.clinical.vo.AcuteTheatreListBookingAppointmentVo;
import ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection;
import ims.clinical.vo.PeriOpAnaesthticSignInTimVo;
import ims.clinical.vo.PeriOpPatientArrivedTimeVo;
import ims.clinical.vo.PeriOpPatientLeftTheatreVo;
import ims.clinical.vo.PeriOpPatientSentTimeVo;
import ims.clinical.vo.PeriOpReadyForDischargeVo;
import ims.clinical.vo.PeriOpReadyForSurgeryTimeVo;
import ims.clinical.vo.PeriOpSafetyBriefTimeVo;
import ims.clinical.vo.PeriOpSurgeryStartTimeVo;
import ims.clinical.vo.PeriOpSurgeryStopTimeVo;
import ims.clinical.vo.PeriOpTimeIntoRecoveryVo;
import ims.clinical.vo.PeriOpTimeOutCompleteVo;
import ims.clinical.vo.PeriOpTimeOutOfRecoveryVo;
import ims.clinical.vo.domain.AcuteTheatreListBookingAppointmentVoAssembler;
import ims.clinical.vo.domain.PeriOpAnaesthticSignInTimVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientArrivedTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientLeftTheatreVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientSentTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForDischargeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForSurgeryTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSafetyBriefTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStartTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStopTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeIntoRecoveryVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutCompleteVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutOfRecoveryVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocShortMappingsVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.TheatreSessionManagement;
import ims.scheduling.domain.impl.SessionAdminImpl;
import ims.scheduling.domain.impl.TheatreSessionManagementImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.domain.objects.Sch_Session_Appointment_Order;
import ims.scheduling.domain.objects.TheatreBooking;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.PendingEmergencyTheatreRefVo;
import ims.scheduling.vo.Sch_SessionLiteVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.TheatreBookingRefVo;
import ims.scheduling.vo.domain.BookingAppointmentTheatreVoAssembler;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;
import ims.scheduling.vo.domain.Sch_SessionLiteVoAssembler;
import ims.scheduling.vo.domain.Sch_Session_Appointment_OrderVoAssembler;
import ims.scheduling.vo.domain.SessionShortVoAssembler;
import ims.scheduling.vo.lookups.AcuteTheateListBookingState;
import ims.scheduling.vo.lookups.CancelAppointmentReason;
import ims.scheduling.vo.lookups.SchProfileType;
import ims.scheduling.vo.lookups.Session_Status_and_Reason;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;

import java.util.ArrayList;
import java.util.List;

public class AcuteTheatreListImpl extends BaseAcuteTheatreListImpl
{

	private static final long serialVersionUID = 1L;

	/**
	 * List active locations where the location type is hospital
	 */
	public ims.core.vo.LocShortMappingsVoCollection listActiveHospitals(ims.core.resource.people.vo.MemberOfStaffRefVo memberOfStaff)
	{
		if (memberOfStaff == null || !memberOfStaff.getID_MemberOfStaffIsNotNull())
			return null;

		StringBuilder query = new StringBuilder();
		query.append("select location from MemberOfStaff as mos left join mos.locations as hcpLocation left join hcpLocation.location as location ");
		query.append(" where location.type = :LocType and location.isActive = :isActive and location.isVirtual = :isVirtual and mos.id = :mosID");
		query.append(" ORDER BY location.upperName ASC"); //WDEV-23131

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("LocType");
		paramValues.add(getDomLookup(LocationType.HOSP));

		paramNames.add("isActive");
		paramValues.add(Boolean.TRUE);

		paramNames.add("isVirtual");
		paramValues.add(Boolean.FALSE);

		paramNames.add("mosID");
		paramValues.add(memberOfStaff.getID_MemberOfStaff());

		return LocShortMappingsVoAssembler.createLocShortMappingsVoCollectionFromLocation(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	public ims.core.vo.LocShortMappingsVoCollection listTheatresForHospital(ims.core.resource.place.vo.LocationRefVo hospital)
	{
		if (hospital == null || hospital.getID_Location() == null)
			throw new CodingRuntimeException("hospital is null or id not provided in method listTheatresForHospital");
		
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		String locationIds = impl.getChildLocationsIdsForLocation(hospital.getID_Location(), new int[]{LocationType.THEATRE.getID()}, true);
	
		List theatres = null;
		if(!locationIds.isEmpty())
		{
			String hql="from Location loc where loc.id in "; 
			hql += " ( "+ locationIds + " )";
			theatres = getDomainFactory().find(hql);
		}

		return LocShortMappingsVoAssembler.createLocShortMappingsVoCollectionFromLocation(theatres);
	}

	public ims.scheduling.vo.SessionShortVoCollection listSession(ims.framework.utils.Date sessionDate, 
			ims.core.resource.people.vo.HcpRefVo listOwner, 
			ims.core.resource.place.vo.LocationRefVo hospital,
			ims.core.resource.place.vo.LocationRefVo theatreLocation,
			ims.scheduling.vo.lookups.TheatreType theatreType, 
			ims.scheduling.vo.lookups.ProfileListType listType)
	{
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = "";
		StringBuffer sb = new StringBuffer();

		String hql = "from Sch_Session as session left join fetch session.listOwners as lo ";

		andStr = " ";
		if (sessionDate != null)
		{
			sb.append(andStr + " session.sessionDate = :sessionDate");
			markers.add("sessionDate");
			values.add(sessionDate.getDate());
			andStr = " and ";
		}

		if (listOwner != null)
		{
			sb.append(andStr + " lo.hcp.id = :listOwner");
			markers.add("listOwner");
			values.add(listOwner.getID_Hcp());
			andStr = " and ";
		}

		if(theatreLocation!= null || hospital != null)
		{
    		String locationIds="";
    		if(theatreLocation != null)
    		{
    			locationIds = theatreLocation.getID_Location().toString();
    		}
    		else if (hospital != null)
    		{
    			OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
    			locationIds = impl.getChildLocationsIdsForLocation(hospital.getID_Location(), null, true);
    		
    			if(!locationIds.isEmpty())
    			{
    				locationIds = hospital.getID_Location() + "," + locationIds;
    			}
    			else
    				locationIds = hospital.getID_Location().toString();
    			
    		}
    		sb.append(andStr + " ( session.schLocation.id in ( "+ locationIds + " ))");
    		andStr = " and ";
		}
		
		if (listType != null)
		{
			sb.append(andStr + " ( session.listType.id = :idListType)");
			markers.add("idListType");
			values.add(getDomLookup(listType).getId());
			andStr = " and ";
		}

		sb.append(andStr + " session.sessionProfileType.id = :THEATRE_SESSION");
		markers.add("THEATRE_SESSION");
		values.add(SchProfileType.THEATRE.getId());
		andStr = " and ";

		if (theatreType != null)
		{
			if (theatreType.equals(TheatreType.INPATIENT) || theatreType.equals(TheatreType.DAYCASE))
			{
				sb.append(andStr + " ( session.theatreType = :stat1)"); // sb.append(andStr
																		// +
																		// " ( session.theatreType = :stat1 or session.theatreType = :stat2)");
				markers.add("stat1");
				if (theatreType.equals(TheatreType.INPATIENT))
					values.add(getDomLookup(TheatreType.INPATIENT));
				if (theatreType.equals(TheatreType.DAYCASE))
					values.add(getDomLookup(TheatreType.DAYCASE));
			}
			else
			{
				sb.append(andStr + " ( session.theatreType = :stat1)");
				markers.add("stat1");
				values.add(getDomLookup(theatreType));
			}
		}
		
		//WDEV-22713
		sb.append(andStr + " session.sessionStatus.id <> :SESSION_STATUS");
		markers.add("SESSION_STATUS");
		values.add(Session_Status_and_Reason.CANCELLED.getId());
		andStr = " and ";
		
		hql += " where ";
		hql += sb.toString();

		java.util.List list = getDomainFactory().find(hql.toString(), markers, values);
		SessionShortVoCollection voCollSessionShort = new SessionShortVoCollection();
		if (list != null && list.size() > 0)
			voCollSessionShort = SessionShortVoAssembler.createSessionShortVoCollectionFromSch_Session(list);
		return voCollSessionShort;
	}

	public ims.scheduling.vo.Sch_Session_Appointment_OrderVo getSessionOrder(ims.scheduling.vo.Sch_SessionRefVo schSessionRefVo)
	{
		if (schSessionRefVo == null || schSessionRefVo.getID_Sch_Session() == null)
			throw new CodingRuntimeException("schSessionRefVo is null or id not provided in method getSessionOrder");

		Sch_Session_Appointment_Order doSessApptOrder = Sch_Session_Appointment_Order.getSch_Session_Appointment_OrderFromSession(getDomainFactory(), schSessionRefVo.getID_Sch_Session());
		if (doSessApptOrder != null)
			return Sch_Session_Appointment_OrderVoAssembler.create(doSessApptOrder);

		return null;
	}

	/**
	 * listAppointments
	 */
	public ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection listAppointments(ims.scheduling.vo.Sch_SessionRefVo session)
	{
		if (session == null)
			throw new CodingRuntimeException("session not provided");

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = "";
		StringBuffer sb = new StringBuffer();

		String hql = " select appts from Booking_Appointment appts left join appts.theatreBooking as tb left join appts.session as sess";

		if (session.getID_Sch_SessionIsNotNull())
		{
			sb.append(andStr + " appts.session.id = :clinic");
			markers.add("clinic");
			values.add(session.getID_Sch_Session());
			andStr = " and ";
		}

		sb.append(andStr + " appts.theatreBooking != null");
		andStr = " and ";
		sb.append(andStr + " ( appts.apptStatus = :apptBooked or appts.apptStatus = :apptArrived or appts.apptStatus = :apptSEEN or appts.apptStatus = :apptADM or appts.apptStatus = :apptDNA or appts.apptStatus = :DISCH)");
		markers.add("apptBooked");
		values.add(getDomLookup(Status_Reason.BOOKED));
		markers.add("apptArrived");
		values.add(getDomLookup(Status_Reason.ARRIVAL));
		markers.add("apptSEEN");
		values.add(getDomLookup(Status_Reason.SEEN));
		markers.add("apptADM");
		values.add(getDomLookup(Status_Reason.ADMITTED));
		markers.add("apptDNA");
		values.add(getDomLookup(Status_Reason.DNA));
		markers.add("DISCH");
		values.add(getDomLookup(Status_Reason.DISCHARGED));

		hql += " where ";
		hql += sb.toString();
		hql += " order by appts.apptStartTime "; 

		java.util.List list = getDomainFactory().find(hql.toString(), markers, values);
		AcuteTheatreListBookingAppointmentVoCollection voColl = AcuteTheatreListBookingAppointmentVoAssembler.createAcuteTheatreListBookingAppointmentVoCollectionFromBooking_Appointment(list);
		return voColl;
	}

	/**
	 * listAppointments
	 */
	public ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection listAppointments(ims.core.resource.people.vo.HcpRefVo hcp, ims.core.resource.people.vo.MemberOfStaffRefVo mosUser, ims.framework.utils.Date date)
	{
		if (hcp == null || !hcp.getID_HcpIsNotNull())
			return null;

		if (mosUser == null || !mosUser.getID_MemberOfStaffIsNotNull())
			return null;

		if (hcp == null || !hcp.getID_HcpIsNotNull())
			return null;

		if (mosUser == null || !mosUser.getID_MemberOfStaffIsNotNull())
			return null;

		StringBuilder query = new StringBuilder();

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		query.append(" select app from Booking_Appointment app left join app.session as ses left join ses.listOwners as own left join app.theatreBooking as tb ");
		query.append(" where own.hcp.id = :HCP_ID and ses.sessionDate = :SesDate and ses.schLocation in ");
		query.append(" (select location from MemberOfStaff as mos left join mos.locations as loc left join loc.location as location where mos.id = :MOS_ID) ");
		query.append(" and app.theatreBooking is not null ");
		query.append(" and (app.apptStatus = :BOOKED or app.apptStatus = :ARRIVED or app.apptStatus = :SEEN or app.apptStatus = :ADMITED or app.apptStatus = :DNA or app.apptStatus = :DISCH) "); // wdev-19455

		paramNames.add("HCP_ID");
		paramValues.add(hcp.getID_Hcp());
		paramNames.add("MOS_ID");
		paramValues.add(mosUser.getID_MemberOfStaff());

		paramNames.add("SesDate");
		paramValues.add(date.getDate());

		paramNames.add("BOOKED");
		paramValues.add(getDomLookup(Status_Reason.BOOKED));
		paramNames.add("ARRIVED");
		paramValues.add(getDomLookup(Status_Reason.ARRIVAL));
		paramNames.add("SEEN");
		paramValues.add(getDomLookup(Status_Reason.SEEN));
		paramNames.add("ADMITED");
		paramValues.add(getDomLookup(Status_Reason.ADMITTED));
		paramNames.add("DNA");
		paramValues.add(getDomLookup(Status_Reason.DNA));
		paramNames.add("DISCH");
		paramValues.add(getDomLookup(Status_Reason.DISCHARGED));

		query.append(" order by app.apptStartTime ");

		List list = getDomainFactory().find(query.toString(), paramNames, paramValues);
		AcuteTheatreListBookingAppointmentVoCollection voColl = AcuteTheatreListBookingAppointmentVoAssembler.createAcuteTheatreListBookingAppointmentVoCollectionFromBooking_Appointment(list);
		return voColl;
	}

	/**
	 * listAppointments
	 */
	public ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection listAllAppointments(ims.clinical.vo.AcuteTheatreListFilterVo filterVo)
	{
		if (filterVo == null)
			throw new CodingRuntimeException("filterVo not provided");

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = "";
		StringBuffer sb = new StringBuffer();

		String hql = " select appts from Booking_Appointment appts " + "left join fetch appts.theatreBooking as tb " + "left join fetch appts.session as sess " + "left join fetch sess.schLocation as locat ";

		if (filterVo.getSessionDateIsNotNull())
		{
			sb.append(andStr + " sess.sessionDate = :sessDate");
			markers.add("sessDate");
			values.add(filterVo.getSessionDate().getDate());
			andStr = " and ";
		}

		if (filterVo.getListownerIsNotNull())
		{
			hql += " right join sess.listOwners as lOwn";
			sb.append(andStr + " lOwn.hcp.id = :hcp");
			markers.add("hcp");
			values.add(filterVo.getListowner().getID_Hcp());
			andStr = " and ";
		}

		if (filterVo.getHospitalIsNotNull())
		{
			sb.append(andStr + " ( locat.id = :loc or locat.parentLocation.id = :loc1 )");
			markers.add("loc");
			values.add(filterVo.getHospital().getID_Location());
			markers.add("loc1");
			values.add(filterVo.getHospital().getID_Location());
			andStr = " and ";
		}

		if (filterVo.getSessionTypeIsNotNull())
		{
			sb.append(andStr + " ( sess.theatreType = :stat1)");
			markers.add("stat1");
			values.add(getDomLookup(filterVo.getSessionType()));
		}

		sb.append(andStr + " appts.theatreBooking != null");
		andStr = " and ";
		sb.append(andStr + " ( appts.apptStatus = :apptBooked or appts.apptStatus = :apptArrived or appts.apptStatus = :apptSEEN or appts.apptStatus = :apptADM or appts.apptStatus = :apptDNA or appts.apptStatus = :DISCH)");
		markers.add("apptBooked");
		values.add(getDomLookup(Status_Reason.BOOKED));
		markers.add("apptArrived");
		values.add(getDomLookup(Status_Reason.ARRIVAL));
		markers.add("apptSEEN");
		values.add(getDomLookup(Status_Reason.SEEN));
		markers.add("apptADM");
		values.add(getDomLookup(Status_Reason.ADMITTED));
		markers.add("apptDNA");
		values.add(getDomLookup(Status_Reason.DNA));
		markers.add("DISCH");
		values.add(getDomLookup(Status_Reason.DISCHARGED));

		hql += " where ";
		hql += sb.toString();
		hql += " order by appts.apptStartTime ";

		java.util.List list = getDomainFactory().find(hql.toString(), markers, values);
		AcuteTheatreListBookingAppointmentVoCollection voColl = AcuteTheatreListBookingAppointmentVoAssembler.createAcuteTheatreListBookingAppointmentVoCollectionFromBooking_Appointment(list);
		return voColl;
	}

	/**
	 * Get PatientShort
	 */
	public ims.core.vo.PatientShort getPatientShort(ims.core.patient.vo.PatientRefVo voPatientRef)
	{
		DomainFactory factory = getDomainFactory();
		ims.core.patient.domain.objects.Patient patBo = (ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, voPatientRef.getID_Patient().intValue());
		return PatientShortAssembler.create(patBo);
	}

	private void saveBookingState( DomainFactory factory, TheatreBookingRefVo theatreBooking, AcuteTheateListBookingState state) throws StaleObjectException
	{
		TheatreBooking doTheatreBooking = (TheatreBooking) factory.getDomainObject(theatreBooking);
		doTheatreBooking.setState(factory.getLookupInstance(state.getID()));
		factory.save(doTheatreBooking);
	}

	@Override
	public void saveSafetyBrief(PeriOpSafetyBriefTimeVo safetyBrief, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException
	{
		String methodName = "saveSafetyBrief";

		if (safetyBrief == null)
			throw new CodingRuntimeException("safetyBrief is null in method " + methodName);
		if (!safetyBrief.isValidated())
			throw new CodingRuntimeException("safetyBrief has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpSafetyBriefTime doSafety = PeriOpSafetyBriefTimeVoAssembler.extractPeriOpSafetyBriefTime(factory, safetyBrief);
	
		//WDEV-23825
		try
		{
			factory.save(doSafety);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}
		
		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.SAFETY_BRIEF);
	}

	@Override
	public void savePatientSentFor(PeriOpPatientSentTimeVo patientSentFor, TheatreBookingRefVo theatreBooking) throws StaleObjectException , UniqueKeyViolationException
	{
		String methodName = "savePatientSentFor";
		if (patientSentFor == null)
			throw new CodingRuntimeException("safetyBrief is null in method " + methodName);
		if (!patientSentFor.isValidated())
			throw new CodingRuntimeException("safetyBrief has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpPatientSentTime doSentFor = PeriOpPatientSentTimeVoAssembler.extractPeriOpPatientSentTime(factory, patientSentFor);

		//WDEV-23825
		try
		{
			factory.save(doSentFor);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}
				
		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.PATIENT_SENT_FOR);
	}

	@Override
	public void savePatientArrived(PeriOpPatientArrivedTimeVo patientArrived, TheatreBookingRefVo theatreBooking) throws StaleObjectException , UniqueKeyViolationException
	{
		String methodName = "savePatientArrived";
		if (patientArrived == null)
			throw new CodingRuntimeException("patientArrived is null in method " + methodName);
		if (!patientArrived.isValidated())
			throw new CodingRuntimeException("patientArrived has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpPatientArrivedTime doArrived = PeriOpPatientArrivedTimeVoAssembler.extractPeriOpPatientArrivedTime(factory, patientArrived);
	
		//WDEV-23825
		try
		{
			factory.save(doArrived);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}
				
		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.PATIENT_ARRIVED);
		updateApptStatus(factory, patientArrived.getTheatreAppointment(), Status_Reason.ARRIVAL);
	}

	private void updateApptStatus(DomainFactory factory,  Booking_AppointmentRefVo theatreAppointment, Status_Reason status) throws StaleObjectException
	{
		BookingAppointmentTheatreVo appointment = BookingAppointmentTheatreVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(theatreAppointment));
		
		appointment.getApptStatusHistory().add(appointment.getCurrentStatusRecord());
		Appointment_StatusVo voApptStat = new Appointment_StatusVo();
		voApptStat.setStatus(status);
		voApptStat.setStatusChangeDateTime(new DateTime());
		appointment.setCurrentStatusRecord(voApptStat);
		appointment.setApptStatus(status);
		
		factory.save(BookingAppointmentTheatreVoAssembler.extractBooking_Appointment(getDomainFactory(), appointment));
	}

	@Override
	public void saveAnaesthetisedRFS(PeriOpReadyForSurgeryTimeVo anaesthetizedRFS, TheatreBookingRefVo theatreBooking) throws StaleObjectException , UniqueKeyViolationException
	{
		String methodName = "saveAnaesthetizedRFS";
		if (anaesthetizedRFS == null)
			throw new CodingRuntimeException("anaesthetizedRFS is null in method " + methodName);
		if (!anaesthetizedRFS.isValidated())
			throw new CodingRuntimeException("anaesthetizedRFS has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpReadyForSurgeryTime doRfs = PeriOpReadyForSurgeryTimeVoAssembler.extractPeriOpReadyForSurgeryTime(factory, anaesthetizedRFS);
		
		//WDEV-23825
		try
		{	
			factory.save(doRfs);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}

		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.ANAESTHETIC_RFS);
	}

	@Override
	public void saveTimeOutCompleted(PeriOpTimeOutCompleteVo timeOutCompleted, TheatreBookingRefVo theatreBooking) throws StaleObjectException , UniqueKeyViolationException
	{
		String methodName = "saveTimeOutCompleted";
		if (timeOutCompleted == null)
			throw new CodingRuntimeException("timeOutCompleted is null in method " + methodName);
		if (!timeOutCompleted.isValidated())
			throw new CodingRuntimeException("timeOutCompleted has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpTimeOutComplete doComplete = PeriOpTimeOutCompleteVoAssembler.extractPeriOpTimeOutComplete(factory, timeOutCompleted);
		
		//WDEV-23825
		try
		{	
			factory.save(doComplete);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}
				
		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.TIMEOUT_COMPLETE);
	}

	@Override
	public void saveSurgeryStart(PeriOpSurgeryStartTimeVo surgeryStart, TheatreBookingRefVo theatreBooking) throws StaleObjectException , UniqueKeyViolationException
	{
		String methodName = "saveSurgeryStart";
		if (surgeryStart == null)
			throw new CodingRuntimeException("surgeryStart is null in method " + methodName);
		if (!surgeryStart.isValidated())
			throw new CodingRuntimeException("surgeryStart has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpSurgeryStartTime doSurgeryStart = PeriOpSurgeryStartTimeVoAssembler.extractPeriOpSurgeryStartTime(factory, surgeryStart);
		
		//WDEV-23825
		try
		{	
			factory.save(doSurgeryStart);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}

		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.SURGERY_START_TIME);

	}

	@Override
	public void saveSurgeryStop(PeriOpSurgeryStopTimeVo surgeryStop, TheatreBookingRefVo theatreBooking) throws StaleObjectException , UniqueKeyViolationException
	{
		String methodName = "saveSurgeryStop";
		if (surgeryStop == null)
			throw new CodingRuntimeException("surgeryStop is null in method " + methodName);
		if (!surgeryStop.isValidated())
			throw new CodingRuntimeException("surgeryStop has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpSurgeryStopTime doSurgeryStop = PeriOpSurgeryStopTimeVoAssembler.extractPeriOpSurgeryStopTime(factory, surgeryStop);
		

		//WDEV-23825
		try
		{	
			factory.save(doSurgeryStop);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}
				
		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.SURGERY_STOP);
	}

	@Override
	public void savePatientLeftTheatre(PeriOpPatientLeftTheatreVo patientLeftTheatre, TheatreBookingRefVo theatreBooking) throws StaleObjectException , UniqueKeyViolationException
	{
		String methodName = "savePatientLeftTheatre";
		if (patientLeftTheatre == null)
			throw new CodingRuntimeException("patientLeftTheatre is null in method " + methodName);
		if (!patientLeftTheatre.isValidated())
			throw new CodingRuntimeException("patientLeftTheatre has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpPatientLeftTheatre doPatientLeft = PeriOpPatientLeftTheatreVoAssembler.extractPeriOpPatientLeftTheatre(factory, patientLeftTheatre);
		
		//WDEV-23825
		try
		{	
			factory.save(doPatientLeft);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}

		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.PATIENT_LEFT_THEATRE);
	}

	@Override
	public void savePatientReadyForDischarge(PeriOpReadyForDischargeVo patientRFD, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException
	{
		String methodName = "savePatientReadyForDischarge";
		if (patientRFD == null)
			throw new CodingRuntimeException("patientRFD is null in method " + methodName);
		if (!patientRFD.isValidated())
			throw new CodingRuntimeException("patientRFD has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpReadyForDischargeTi doRfd = PeriOpReadyForDischargeVoAssembler.extractPeriOpReadyForDischargeTi(factory, patientRFD);
		//WDEV-21857
		try
		{
			factory.save(doRfd);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}

		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.READY_FOR_DISCHARGE);
	}

	@Override
	public void saveTimeOutOfRecovery(PeriOpTimeOutOfRecoveryVo timeOutRecovery, TheatreBookingRefVo theatreBooking) throws StaleObjectException, UniqueKeyViolationException
	{
		String methodName = "saveTimeOutOfRecovery";
		if (timeOutRecovery == null)
			throw new CodingRuntimeException("patientRFD is null in method " + methodName);
		if (!timeOutRecovery.isValidated())
			throw new CodingRuntimeException("patientRFD has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpTimeOutOfRecoveryTi doTimeOut = PeriOpTimeOutOfRecoveryVoAssembler.extractPeriOpTimeOutOfRecoveryTi(factory, timeOutRecovery);
		
		//WDEV-21857
		try
		{
			factory.save(doTimeOut);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new UniqueKeyViolationException(ex);
		}

		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.TIME_OUT_OF_RECOVERY);
	}

	@Override
	public PeriOpSafetyBriefTimeVo getSafetyBriefByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getSafetyBriefByAppointment");

		return PeriOpSafetyBriefTimeVoAssembler.create(PeriOpSafetyBriefTime.getPeriOpSafetyBriefTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpPatientSentTimeVo getPatientSentForByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getPatientSentForByAppointment");

		return PeriOpPatientSentTimeVoAssembler.create(PeriOpPatientSentTime.getPeriOpPatientSentTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpPatientArrivedTimeVo getPatientArrivedByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getPatientArrivedByAppointment");

		return PeriOpPatientArrivedTimeVoAssembler.create(PeriOpPatientArrivedTime.getPeriOpPatientArrivedTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));

	}

	@Override
	public PeriOpAnaesthticSignInTimVo getPeriOpAnaestheticSignInByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getAnaestheticSignInByAppointment");

		return PeriOpAnaesthticSignInTimVoAssembler.create(PeriOpAnaesthticSignInTim.getPeriOpAnaesthticSignInTimFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpReadyForSurgeryTimeVo getAnaesRFSByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getAnaesRFSByAppointment");

		return PeriOpReadyForSurgeryTimeVoAssembler.create(PeriOpReadyForSurgeryTime.getPeriOpReadyForSurgeryTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpTimeOutCompleteVo getTimeOutCompletedByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getTimeOutCompletedByAppointment");

		return PeriOpTimeOutCompleteVoAssembler.create(PeriOpTimeOutComplete.getPeriOpTimeOutCompleteFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpSurgeryStartTimeVo getSurgeryStartByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getSurgeryStartByAppointment");

		return PeriOpSurgeryStartTimeVoAssembler.create(PeriOpSurgeryStartTime.getPeriOpSurgeryStartTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpSurgeryStopTimeVo getSurgeryStopByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getSurgeryStopByAppointment");

		return PeriOpSurgeryStopTimeVoAssembler.create(PeriOpSurgeryStopTime.getPeriOpSurgeryStopTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpReadyForDischargeVo getReadyForDischargeByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getReadyForDischargeByAppointment");

		return PeriOpReadyForDischargeVoAssembler.create(PeriOpReadyForDischargeTi.getPeriOpReadyForDischargeTiFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpPatientLeftTheatreVo getPatientLeftTheatreByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getPatientLeftTheatreByAppointment");

		return PeriOpPatientLeftTheatreVoAssembler.create(PeriOpPatientLeftTheatre.getPeriOpPatientLeftTheatreFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpTimeOutOfRecoveryVo getTimeOutOfRecoveryByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getTimeOutOfRecoveryByAppointment");

		return PeriOpTimeOutOfRecoveryVoAssembler.create(PeriOpTimeOutOfRecoveryTi.getPeriOpTimeOutOfRecoveryTiFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public void saveTimeIntoRecovery(PeriOpTimeIntoRecoveryVo timeIntoRecovery, TheatreBookingRefVo theatreBooking) throws StaleObjectException, DomainInterfaceException
	{
		String methodName = "saveTimeIntoRecovery";
		if (timeIntoRecovery == null)
			throw new CodingRuntimeException("timeIntoRecovery is null in method " + methodName);
		if (!timeIntoRecovery.isValidated())
			throw new CodingRuntimeException("timeIntoRecovery has not been validated in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpTimeIntoRecovery doTimeIntoRecovery = PeriOpTimeIntoRecoveryVoAssembler.extractPeriOpTimeIntoRecovery(factory, timeIntoRecovery);
		
		//WDEV-21857
		try
		{
			factory.save(doTimeIntoRecovery);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new DomainInterfaceException(ex);
		}

		saveBookingState(factory, theatreBooking, AcuteTheateListBookingState.INTO_RECOVERY);
	}

	@Override
	public PeriOpTimeIntoRecoveryVo getTimeIntoRecoveryByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getTimeIntoRecoveryByAppointment");

		return PeriOpTimeIntoRecoveryVoAssembler.create(PeriOpTimeIntoRecovery.getPeriOpTimeIntoRecoveryFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	
	public AcuteTheatreListBookingAppointmentVo getTheatreAppointment(Booking_AppointmentRefVo appointment)
	{
		if( appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		return AcuteTheatreListBookingAppointmentVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(Booking_Appointment.class, appointment.getID_Booking_Appointment()));
	}

	//WDEV-21872
	public CareContextShortVo getCareContextByAppt(Booking_AppointmentRefVo apptRef)
	{
		if (apptRef == null)
			throw new CodingRuntimeException("appt is null in method getCareContextByAppt");
		
		DomainFactory factory = getDomainFactory();
		String query = "select cc from CatsReferral as cr left join cr.careContext as cc left join cr.appointments as ba  where ba.id = :ApptId ";
		
		List<?> list = factory.find(query, new String[] {"ApptId"}, new Object[] {apptRef.getID_Booking_Appointment()});
		
		if (list==null || list.size()==0)
			return null;
		
		return CareContextShortVoAssembler.create((CareContext)list.get(0));
	}

	public SessionShortVo updateSessionComments(SessionShortVo sessionComments)throws StaleObjectException //WDEV-22716
	{
		if(sessionComments == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		Sch_Session domainSession = SessionShortVoAssembler.extractSch_Session(factory, sessionComments);

		factory.save(domainSession);
		
		return SessionShortVoAssembler.create(domainSession);
	}

	//WDEV-22778
	public Booking_AppointmentVo getBookingAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided for method getBookingAppointment");

		Booking_AppointmentVo voAppt = Booking_AppointmentVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));

		return voAppt;
	}

	//WDEV-22778
	public TheatreProcedureServiceAndConsultantLiteVo getTheatreServiceProcedureAndConsultant(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreServiceProcedureAndConsultant");
		
		TheatreProcedureServiceAndConsultantLiteVo voPsc = null;
		
		Booking_Appointment doAppt = (Booking_Appointment)getDomainFactory().getDomainObject(appt);
		if(doAppt != null)
		{
			ServiceLiteVo voService = ServiceLiteVoAssembler.create(doAppt.getSession() != null ? doAppt.getSession().getService() : null);
			ProcedureLiteVo voProc = ProcedureLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getProcedure() : null);
			HcpLiteVo voMos = HcpLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getConsultant() : null);
			
			voPsc = new TheatreProcedureServiceAndConsultantLiteVo();
			voPsc.setService(voService);
			voPsc.setProcedure(voProc);
			voPsc.setConsultant(voMos);
		}
		
		return voPsc;
	}

	//WDEV-22778
	public Booking_AppointmentVo cancelAppt(Booking_AppointmentVo appt, ActionRequestType requestType, String requestSource) throws StaleObjectException, DomainInterfaceException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	//WDEV-22778
	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo appt) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral, appt);
	}

	//WDEV-22778 //WDEV-22845
	public void cancelTCIAndReferralEROD(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo apptRef, CancelAppointmentReason cancellationReason, String cancellationComment, Boolean isProviderCancellation, Boolean isPatientCancellation, Boolean cancelledForNonMedicalReason) throws StaleObjectException
	{
		TheatreSessionManagement impl = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		impl.cancelTCIAndReferralEROD(catsReferral, apptRef, cancellationReason, cancellationComment, isProviderCancellation, isPatientCancellation, cancelledForNonMedicalReason);
	}

	//WDEV-22778
	public BookingAppointmentTheatreVo getTheatre_Appointment(Booking_AppointmentRefVo appt)
	{
		TheatreSessionManagement impl = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		return impl.getTheatreAppointment(appt);
	}

	//WDEV-22778
	public PatientElectiveListRefVo getPatientElectiveListForAppt(Booking_AppointmentRefVo appt)
	{
		TheatreSessionManagement impl = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		return impl.getPatientElectiveListForAppt(appt);
	}

	//WDEV-22778
	public PendingEmergencyTheatreRefVo getPendingEmergencyTheatreForAppt(Booking_AppointmentRefVo appt)
	{
		TheatreSessionManagement impl = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		return impl.getPendingEmergencyTheatreForAppt(appt);
	}

	//WDEV-22778
	public CatsReferralForSessionManagementVo getCatsReferralForAppointment(Booking_AppointmentRefVo appt)
	{
		TheatreSessionManagement impl = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		return impl.getCatsReferralForAppointment(appt);
	}

	//WDEV-23828
	public Sch_SessionLiteVo getSessionLite(Sch_SessionRefVo sch_sessionRef)
	{
		if (sch_sessionRef == null || sch_sessionRef.getID_Sch_Session() == null)
			throw new CodingRuntimeException("sch_sessionRef is null or id not provided for method getSessionLite");

		Sch_Session doSession = (Sch_Session)getDomainFactory().getDomainObject(sch_sessionRef);
		return Sch_SessionLiteVoAssembler.create(doSession);
	}
}
