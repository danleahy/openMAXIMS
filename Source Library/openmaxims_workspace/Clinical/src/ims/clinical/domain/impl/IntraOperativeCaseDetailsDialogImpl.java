//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.configuration.vo.UserAssessmentRefVo;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.assessment.vo.User_AssessmentVo;
import ims.assessment.vo.domain.UserAssessmentLiteVoAssembler;
import ims.assessment.vo.domain.User_AssessmentVoAssembler;
import ims.RefMan.domain.objects.PreAssessmentOutcome;
import ims.clinical.domain.AcuteTheatreList;
import ims.clinical.domain.TheatreSessionDetailsDialog;
import ims.clinical.domain.base.impl.BaseIntraOperativeCaseDetailsDialogImpl;
import ims.clinical.domain.objects.AnaestheticSignIn;
import ims.clinical.domain.objects.CatheterDrainsTubeIntraOp;
import ims.clinical.domain.objects.CirculatorScrubNurseRole;
import ims.clinical.domain.objects.DiathermyDetailIntraOp;
import ims.clinical.domain.objects.IntraOpCaseStaffDetails;
import ims.clinical.domain.objects.IntraOpPlannedProcedure;
import ims.clinical.domain.objects.IrrigantIntraOp;
import ims.clinical.domain.objects.LaserDetailIntraOp;
import ims.clinical.domain.objects.PatientPreperationIntraOp;
import ims.clinical.domain.objects.PerfProcAndSignOutIntraOp;
import ims.clinical.domain.objects.PerformedProceduresIntraO;
import ims.clinical.domain.objects.PeriOpRecoveryDetail;
import ims.clinical.domain.objects.PeriOpTimeIntoRecovery;
import ims.clinical.domain.objects.SkinPrepIntraOp;
import ims.clinical.domain.objects.TourniquetIntraOp;
import ims.clinical.vo.AnaestheticSignInVo;
import ims.clinical.vo.ArterialClampIntraOpRefVo;
import ims.clinical.vo.ArterialClampsIntraOpVoCollection;
import ims.clinical.vo.CatheterDrainsTubeIntraOpVo;
import ims.clinical.vo.CatheterDrainsTubeIntraOpVoCollection;
import ims.clinical.vo.DiathermyDetailIntraOpVo;
import ims.clinical.vo.DiathermyDetailIntraOpVoCollection;
import ims.clinical.vo.EquipmentIntraOpRefVo;
import ims.clinical.vo.EquipmentIntraOpVoCollection;
import ims.clinical.vo.FinalCountIntraOpRefVo;
import ims.clinical.vo.FinalCountsIntraOpVoCollection;
import ims.clinical.vo.HandoverCountIntraOpRefVo;
import ims.clinical.vo.HandoverCountsIntraOpVoCollection;
import ims.clinical.vo.ImplantsIntraOpRefVo;
import ims.clinical.vo.ImplantsIntraOpVoCollection;
import ims.clinical.vo.IntraOpCaseStaffDetailsRefVo;
import ims.clinical.vo.IntraOpPlannedProcedureVo;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.clinical.vo.IrrigantIntraOpVo;
import ims.clinical.vo.LaserDetailIntraOpVo;
import ims.clinical.vo.PatientPreperationIntraOpVo;
import ims.clinical.vo.PerformedProcAndSignOutIntraOpVo;
import ims.clinical.vo.PerformedProceduresIntraORefVo;
import ims.clinical.vo.PerformedProceduresIntraOpVo;
import ims.clinical.vo.PerformedProceduresIntraOpVoCollection;
import ims.clinical.vo.PeriOpRecoveryDetailVo;
import ims.clinical.vo.PeriOpTimeIntoRecoveryVo;
import ims.clinical.vo.SkinClosureIntraOpRefVo;
import ims.clinical.vo.SkinClosureIntraOpVoCollection;
import ims.clinical.vo.SkinPrepIntraOpRefVo;
import ims.clinical.vo.SkinPreparationIntraOpVo;
import ims.clinical.vo.SkinPreparationIntraOpVoCollection;
import ims.clinical.vo.SpecimenIntraOpRefVo;
import ims.clinical.vo.SpecimenIntraOpVoCollection;
import ims.clinical.vo.TheatreSessionStaffDetailVo;
import ims.clinical.vo.TourniquetIntraOpVo;
import ims.clinical.vo.TourniquetIntraOpVoCollection;
import ims.clinical.vo.WoundPackingIntraOpRefVo;
import ims.clinical.vo.WoundPackingIntraOpVoCollection;
import ims.clinical.vo.domain.AnaestheticSignInVoAssembler;
import ims.clinical.vo.domain.ArterialClampsIntraOpVoAssembler;
import ims.clinical.vo.domain.CatheterDrainsTubeIntraOpVoAssembler;
import ims.clinical.vo.domain.DiathermyDetailIntraOpVoAssembler;
import ims.clinical.vo.domain.EquipmentIntraOpVoAssembler;
import ims.clinical.vo.domain.FinalCountsIntraOpVoAssembler;
import ims.clinical.vo.domain.HandoverCountsIntraOpVoAssembler;
import ims.clinical.vo.domain.ImplantsIntraOpVoAssembler;
import ims.clinical.vo.domain.IntraOpCaseStaffDetailsVoAssembler;
import ims.clinical.vo.domain.IntraOpPlannedProcedureVoAssembler;
import ims.clinical.vo.domain.IrrigantIntraOpVoAssembler;
import ims.clinical.vo.domain.LaserDetailIntraOpVoAssembler;
import ims.clinical.vo.domain.PatientPreperationIntraOpVoAssembler;
import ims.clinical.vo.domain.PerformedProcAndSignOutIntraOpVoAssembler;
import ims.clinical.vo.domain.PerformedProceduresIntraOpVoAssembler;
import ims.clinical.vo.domain.PeriOpRecoveryDetailVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeIntoRecoveryVoAssembler;
import ims.clinical.vo.domain.SkinClosureIntraOpVoAssembler;
import ims.clinical.vo.domain.SkinPreparationIntraOpVoAssembler;
import ims.clinical.vo.domain.SpecimenIntraOpVoAssembler;
import ims.clinical.vo.domain.TourniquetIntraOpVoAssembler;
import ims.clinical.vo.domain.WoundPackingIntraOpVoAssembler;
import ims.clinical.vo.lookups.ChartableOccuranceType;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.admin.domain.objects.CareContext;
import ims.core.clinical.domain.objects.PatientProcedure;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.clinical.vo.ProcedureRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.NurseLiteVoCollection;
import ims.core.vo.PatientProcedureMinVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.NurseLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.TheatreBooking;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.Sch_SessionShortVo;
import ims.scheduling.vo.TheatreBookingLiteVo;
import ims.scheduling.vo.TheatreBookingRefVo;
import ims.scheduling.vo.domain.Sch_SessionShortVoAssembler;
import ims.scheduling.vo.domain.TheatreBookingLiteVoAssembler;
import ims.scheduling.vo.lookups.AcuteTheateListBookingState;
import ims.vo.interfaces.IGenericItem;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class IntraOperativeCaseDetailsDialogImpl extends BaseIntraOperativeCaseDetailsDialogImpl
{
	private static final long serialVersionUID = 1L;
	private static final String INTRA_OPERATIVE_CASE_DETAILS_USER_ASSESSMENT_MAPPING = "ANAES_ASSESS";

	/**
	 * getSafetyBriefByAppointment
	 */
	public ims.clinical.vo.PeriOpSafetyBriefTimeVo getSafetyBriefByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getSafetyBriefByAppointment(appt);
	}

	/**
	 * getPatientSentForByAppointment
	 */
	public ims.clinical.vo.PeriOpPatientSentTimeVo getPatientSentForByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getPatientSentForByAppointment(appt);
	}

	/**
	 * getPatientArrivedByAppointment
	 */
	public ims.clinical.vo.PeriOpPatientArrivedTimeVo getPatientArrivedByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getPatientArrivedByAppointment(appt);
	}

	/**
	 * getAnaesRFSByAppointment
	 */
	public ims.clinical.vo.PeriOpReadyForSurgeryTimeVo getAnaesRFSByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getAnaesRFSByAppointment(appt);
	}

	/**
	 * getTimeOutCompletedByAppointment
	 */
	public ims.clinical.vo.PeriOpTimeOutCompleteVo getTimeOutCompletedByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getTimeOutCompletedByAppointment(appt);
	}

	/**
	 * getSurgeryStartByAppointment
	 */
	public ims.clinical.vo.PeriOpSurgeryStartTimeVo getSurgeryStartByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getSurgeryStartByAppointment(appt);
	}

	/**
	 * getSurgeryStopByAppointment
	 */
	public ims.clinical.vo.PeriOpSurgeryStopTimeVo getSurgeryStopByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getSurgeryStopByAppointment(appt);
	}

	/**
	 * getPatientLeftTheatreByAppointment
	 */
	public ims.clinical.vo.PeriOpPatientLeftTheatreVo getPatientLeftTheatreByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getPatientLeftTheatreByAppointment(appt);
	}

	/**
	 * getReadyForDischargeByAppointment
	 */
	public ims.clinical.vo.PeriOpReadyForDischargeVo getReadyForDischargeByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getReadyForDischargeByAppointment(appt);
	}

	/**
	 * getTimeOutOfRecoveryByAppointment
	 */
	public ims.clinical.vo.PeriOpTimeOutOfRecoveryVo getTimeOutOfRecoveryByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getTimeOutOfRecoveryByAppointment(appt);
	}

	/**
	 * getPeriOpAnaestheticSignInByAppointment
	 */
	public ims.clinical.vo.PeriOpAnaesthticSignInTimVo getPeriOpAnaestheticSignInByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		AcuteTheatreList impl = (AcuteTheatreList) getDomainImpl(AcuteTheatreListImpl.class);
		return impl.getPeriOpAnaestheticSignInByAppointment(appt);
	}

	/**
	 * getCaseStaffDetails
	 */
	public ims.clinical.vo.IntraOpCaseStaffDetailsVo getCaseStaffDetails(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getCaseStaffDetails");

		return IntraOpCaseStaffDetailsVoAssembler.create(IntraOpCaseStaffDetails.getIntraOpCaseStaffDetailsFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	/**
	 * saveCaseStaffDetails
	 */
	public void saveCaseStaffDetails(ims.clinical.vo.IntraOpCaseStaffDetailsVo caseStaffDetails) throws ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException
	{
		String methodName = "saveCaseStaffDetails";
		if (caseStaffDetails == null)
			throw new CodingRuntimeException("caseStaffDetails is null in method " + methodName);
		if (!caseStaffDetails.isValidated())
			throw new CodingRuntimeException("caseStaffDetails has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		IntraOpCaseStaffDetails doCaseDetails = IntraOpCaseStaffDetailsVoAssembler.extractIntraOpCaseStaffDetails(factory, caseStaffDetails);
		factory.save(doCaseDetails);

		// if we are instantiating the case - default the procedures from the
		// theatre appointment
		if (caseStaffDetails.getID_IntraOpCaseStaffDetails() == null)
		{
			createDefaultPlannedProcedures(caseStaffDetails.getTheatreAppointment());
		}
	}

	private void createDefaultPlannedProcedures(Booking_AppointmentRefVo theatreAppointment) throws ims.domain.exceptions.StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		
		Sch_SessionShortVo session = getTheatreSession(theatreAppointment); //WDEV-22558
		
		TheatreBookingLiteVo theatreBooking = TheatreBookingLiteVoAssembler.create(((Booking_Appointment) factory.getDomainObject(theatreAppointment)).getTheatreBooking());
		IntraOpPlannedProcedureVoCollection collPlannedProcedures = new IntraOpPlannedProcedureVoCollection();
		if (theatreBooking.getProcedure() != null)
		{
			IntraOpPlannedProcedureVo firstProcedure = new IntraOpPlannedProcedureVo();
			firstProcedure.setTheatreAppointment(theatreAppointment);

			PatientProcedureMinVo patientProcedure = new PatientProcedureMinVo();
			patientProcedure.setProcedure(theatreBooking.getProcedure());
			patientProcedure.setProcLaterality(theatreBooking.getProcLaterality());
			patientProcedure.setIsPrimary(true);
			patientProcedure.setProcedureStatus(PatientProcedureStatus.PLANNED);//WDEV-22558
			patientProcedure.setDatePlanned(session!=null && session.getSessionDate()!=null ? session.getSessionDate().toPartialDate() : null);//WDEV-22558

			firstProcedure.setPlannedProcedure(patientProcedure);
			collPlannedProcedures.add(firstProcedure);

		}
		if (theatreBooking.getSecondaryProcedure() != null)
		{
			IntraOpPlannedProcedureVo secondaryProcedure = new IntraOpPlannedProcedureVo();
			secondaryProcedure.setTheatreAppointment(theatreAppointment);

			PatientProcedureMinVo patientProcedure = new PatientProcedureMinVo();
			patientProcedure.setProcedure(theatreBooking.getSecondaryProcedure());
			patientProcedure.setProcLaterality(theatreBooking.getSecondaryProcLaterality());
			patientProcedure.setIsPrimary(false);
			patientProcedure.setProcedureStatus(PatientProcedureStatus.PLANNED);//WDEV-22558
			patientProcedure.setDatePlanned(session!=null && session.getSessionDate()!=null ? session.getSessionDate().toPartialDate() : null);//WDEV-22558
			secondaryProcedure.setPlannedProcedure(patientProcedure);
			collPlannedProcedures.add(secondaryProcedure);
		}

		if (collPlannedProcedures.size() > 0)
		{
			for (IntraOpPlannedProcedureVo item : collPlannedProcedures)
			{
				item.validate();
				saveIntraOpPlannedProcedure(item, theatreAppointment);
			}
		}
	}

	@Override
	public TheatreSessionStaffDetailVo getTheatreSessionStaffDetails(Sch_SessionRefVo session)
	{
		TheatreSessionDetailsDialog impl = (TheatreSessionDetailsDialog) getDomainImpl(TheatreSessionDetailsDialogImpl.class);
		return impl.getTheatreSessionStaffDetails(session);
	}

	@Override
	public MedicLiteVoCollection listMedicLiteVo(String name)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listActiveMedics(name);
	}

	@Override
	public NurseLiteVoCollection listNurseLiteVo(String name)
	{
		DomainFactory factory = getDomainFactory();
		List nurses = factory.find("select nurseAlias from Nurse as nurseAlias left join nurseAlias.mos as mosAlias " + "where nurseAlias.hcpType.id =:idHcpDisType and nurseAlias.isActive = 1 and mosAlias.name.upperSurname like :nurseName", new String[] { "idHcpDisType", "nurseName" }, new Object[] { HcpDisType.NURSING.getID(), "%" + name.toUpperCase() + "%" });
		// TODO maybe use HcpDisType.CirculatingNurse?

		return NurseLiteVoAssembler.createNurseLiteVoCollectionFromNurse(nurses);
	}

	@Override
	public IntraOpPlannedProcedureVoCollection listIntraOpPlannedProcedureByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listIntraOpPlannedProcedureByAppointment");

		DomainFactory factory = getDomainFactory();
		List procs = factory.find("from IntraOpPlannedProcedure iopp where iopp.theatreAppointment.id = :idAppt order by iopp.plannedProcedure.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return IntraOpPlannedProcedureVoAssembler.createIntraOpPlannedProcedureVoCollectionFromIntraOpPlannedProcedure(procs);
	}
	//WDEV-21845
	private CareContext getCareContextFromCatsReferral (Booking_AppointmentRefVo appRef)
	{
		if (appRef == null)
			throw new CodingRuntimeException("appt is null in method getCareContextFromCatsReferral");
		
		DomainFactory factory = getDomainFactory();
		
		 DomainObject list = factory.findFirst("SELECT cats.careContext FROM CatsReferral AS cats LEFT JOIN cats.appointments AS appt WHERE appt.id = :idAppt ", new String[] { "idAppt" }, new Object[] { appRef.getID_Booking_Appointment() });
		
		if (list == null)
			return null;
		
		return (CareContext)list; 
	}

	@Override
	public void saveIntraOpPlannedProcedure(IntraOpPlannedProcedureVo intraOpPlanned, Booking_AppointmentRefVo theatreAppt) throws StaleObjectException
	{
		String methodName = "saveIntraOpPlannedProcedure";
		if (intraOpPlanned == null)
			throw new CodingRuntimeException("intraOpPlanned is null in method " + methodName);
		if (!intraOpPlanned.isValidated())
			throw new CodingRuntimeException("intraOpPlanned has not been validated in method " + methodName);
		if (theatreAppt == null)
			throw new CodingRuntimeException("theatreAppt is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		IntraOpPlannedProcedure doPlannedProc = IntraOpPlannedProcedureVoAssembler.extractIntraOpPlannedProcedure(factory, intraOpPlanned);
		
		//WDEV-21845
		CareContext careContext = getCareContextFromCatsReferral(theatreAppt);
		doPlannedProc.getPlannedProcedure().setEpisodeOfCare(careContext.getEpisodeOfCare());
		
		doPlannedProc.getPlannedProcedure().setProcedureDescription(doPlannedProc.getPlannedProcedure().getProcedure().getProcedureName());
		doPlannedProc.getPlannedProcedure().setInfoSource(factory.getLookupInstance(SourceofInformation.CLINICALCONTACT.getID()));

		doPlannedProc.getPlannedProcedure().setIsPrimary(!wasPrimaryProcedureRecordedForAppointment(theatreAppt));
		
		factory.save(doPlannedProc);
	}

	private boolean wasPrimaryProcedureRecordedForAppointment(Booking_AppointmentRefVo theatreAppt)
	{
		if (theatreAppt == null || theatreAppt.getID_Booking_Appointment() == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();

		hql.append(" select count(iopp.id) from IntraOpPlannedProcedure as iopp left join iopp.theatreAppointment as appt left join iopp.plannedProcedure as proc where proc.isPrimary = 1 and appt.id = :appointmentID");

		Object[] count = factory.find(hql.toString(), new String[] { "appointmentID" }, new Object[] {theatreAppt.getID_Booking_Appointment()}).toArray();
		
		if(count != null && count.length > 0 && ((Long) count[0]).intValue() > 0) 
			 return true;
		
		return false;
	}

	@Override
	public ProcedureLiteVoCollection listProcedures(String name) throws DomainInterfaceException
	{
		if (name == null)
			throw new CodingRuntimeException("name is null in method listProcedures");

		CCIAdmin impl = (CCIAdmin) getDomainImpl(CCIAdminImpl.class);
		ProcedureLiteVoCollection coll = new ProcedureLiteVoCollection();
		IGenericItem[] items = impl.listIGenericItems(name, CciType.PROCEDURE, true);
		if (items != null)
		{
			for (int i = 0; i < items.length; i++)
			{
				coll.add((ProcedureLiteVo) items[i]);
			}
			return coll;
		}
		return null;
	}

	@Override
	public void setPrimaryPlannedProcedure(Map<PatientProcedureRefVo, Boolean> plannedProcedureList) throws StaleObjectException
	{
		if (plannedProcedureList == null)
			throw new CodingRuntimeException("plannedProcedureList is null in method setPrimaryPlannedProcedure");

		DomainFactory factory = getDomainFactory();

		for (Entry<PatientProcedureRefVo, Boolean> item : plannedProcedureList.entrySet())
		{
			PatientProcedure doPatientProcedure = (PatientProcedure) factory.getDomainObject(item.getKey());
			doPatientProcedure.setIsPrimary(item.getValue());
			factory.save(doPatientProcedure);
		}
	}

	@Override
	public PatientPreperationIntraOpVo getPatientPreparation(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getPatientPreparation");

		return PatientPreperationIntraOpVoAssembler.create(PatientPreperationIntraOp.getPatientPreperationIntraOpFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public void savePatientPreparation(PatientPreperationIntraOpVo patientPreparation) throws StaleObjectException, UniqueKeyViolationException
	{
		String methodName = "savePatientPreparation";
		if (patientPreparation == null)
			throw new CodingRuntimeException("patientPreparation is null in method " + methodName);
		if (!patientPreparation.isValidated())
			throw new CodingRuntimeException("patientPreparation has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PatientPreperationIntraOp doPatientPrep = PatientPreperationIntraOpVoAssembler.extractPatientPreperationIntraOp(factory, patientPreparation);
	
		factory.save(doPatientPrep);
	}

	@Override
	public void saveSkinPreparation(SkinPreparationIntraOpVo skinPreparation) throws StaleObjectException
	{
		String methodName = "saveSkinPreparation";
		if (skinPreparation == null)
			throw new CodingRuntimeException("skinPreparation is null in method " + methodName);
		if (!skinPreparation.isValidated())
			throw new CodingRuntimeException("skinPreparation has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		SkinPrepIntraOp doSkinPrep = SkinPreparationIntraOpVoAssembler.extractSkinPrepIntraOp(factory, skinPreparation);
		factory.save(doSkinPrep);
	}

	@Override
	public SkinPreparationIntraOpVoCollection listSkinPreparation(Booking_AppointmentRefVo appt)
	{
		DomainFactory factory = getDomainFactory();
		List skinPreps = factory.find("select skinPrep from SkinPrepIntraOp skinPrep where skinPrep.theatreAppointment.id = :theatreApptId", new String[] { "theatreApptId" }, new Object[] { appt.getID_Booking_Appointment() });

		return SkinPreparationIntraOpVoAssembler.createSkinPreparationIntraOpVoCollectionFromSkinPrepIntraOp(skinPreps);
	}

	@Override
	public Boolean doesChartableOccuranceTypeExistForAppt(Booking_AppointmentRefVo appt, ChartableOccuranceType lkpInstance)
	{
		if (lkpInstance == null)
			throw new CodingRuntimeException("lkpInstance is null in method getChartableOccurenceByType");
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getChartableOccurenceByType");

		DomainFactory factory = getDomainFactory();
		List chartables = factory.find("select count(pc.id) from PatientChartableOccurance pc where pc.theatreAppointment.id = :idAppt and pc.chartableOccuranceType.id = :typeId ", new String[] { "idAppt", "typeId" }, new Object[] { appt.getID_Booking_Appointment(), lkpInstance.getID() });
		if (chartables.size() >= 1)
			return ((Long) chartables.get(0)).intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;

		return Boolean.FALSE;
	}

	@Override
	public DiathermyDetailIntraOpVo saveDiathermy(DiathermyDetailIntraOpVo diathermy) throws StaleObjectException
	{
		String methodName = "saveDiathermy";
		if (diathermy == null)
			throw new CodingRuntimeException("diathermy is null in method " + methodName);
		if (!diathermy.isValidated())
			throw new CodingRuntimeException("diathermy has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		DiathermyDetailIntraOp doDiathermy = DiathermyDetailIntraOpVoAssembler.extractDiathermyDetailIntraOp(factory, diathermy);
		factory.save(doDiathermy);
		
		return DiathermyDetailIntraOpVoAssembler.create(doDiathermy); //WDEV-21825
	}

	@Override
	public DiathermyDetailIntraOpVoCollection listDiathermy(Booking_AppointmentRefVo appt)
	{
		DomainFactory factory = getDomainFactory();
		List diathermys = factory.find("select dia from DiathermyDetailIntraOp dia where dia.theatreAppointment.id = :theatreApptId", new String[] { "theatreApptId" }, new Object[] { appt.getID_Booking_Appointment() });

		return DiathermyDetailIntraOpVoAssembler.createDiathermyDetailIntraOpVoCollectionFromDiathermyDetailIntraOp(diathermys);
	}

	@Override
	public void saveLaserDetails(LaserDetailIntraOpVo laserDetail) throws StaleObjectException
	{
		String methodName = "saveLaserDetails";
		if (laserDetail == null)
			throw new CodingRuntimeException("laserDetail is null in method " + methodName);
		if (!laserDetail.isValidated())
			throw new CodingRuntimeException("laserDetail has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		LaserDetailIntraOp doLaser = LaserDetailIntraOpVoAssembler.extractLaserDetailIntraOp(factory, laserDetail);
		factory.save(doLaser);
	}

	@Override
	public LaserDetailIntraOpVo getLaserDetails(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getLaserDetails");

		return LaserDetailIntraOpVoAssembler.create(LaserDetailIntraOp.getLaserDetailIntraOpFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public void saveIrrigant(IrrigantIntraOpVo irrigant) throws StaleObjectException
	{
		String methodName = "saveIrrigant";
		if (irrigant == null)
			throw new CodingRuntimeException("irrigant is null in method " + methodName);
		if (!irrigant.isValidated())
			throw new CodingRuntimeException("irrigant has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		IrrigantIntraOp doIntraOp = IrrigantIntraOpVoAssembler.extractIrrigantIntraOp(factory, irrigant);
		factory.save(doIntraOp);
	}

	@Override
	public IrrigantIntraOpVo getIrrigant(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getIrrigant");

		return IrrigantIntraOpVoAssembler.create(IrrigantIntraOp.getIrrigantIntraOpFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public CatheterDrainsTubeIntraOpVoCollection listCatheter(Booking_AppointmentRefVo appt)
	{
		DomainFactory factory = getDomainFactory();
		List catheters = factory.find("select cath from CatheterDrainsTubeIntraOp cath where cath.theatreAppointment.id = :theatreApptId", new String[] { "theatreApptId" }, new Object[] { appt.getID_Booking_Appointment() });

		return CatheterDrainsTubeIntraOpVoAssembler.createCatheterDrainsTubeIntraOpVoCollectionFromCatheterDrainsTubeIntraOp(catheters);
	}

	public CatheterDrainsTubeIntraOpVo saveCatheter(CatheterDrainsTubeIntraOpVo catheter) throws StaleObjectException
	{
		String methodName = "saveCatheter";
		if (catheter == null)
			throw new CodingRuntimeException("catheter is null in method " + methodName);
		if (!catheter.isValidated())
			throw new CodingRuntimeException("catheter has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		CatheterDrainsTubeIntraOp doCatheter = CatheterDrainsTubeIntraOpVoAssembler.extractCatheterDrainsTubeIntraOp(factory, catheter);
		factory.save(doCatheter);
		
		return CatheterDrainsTubeIntraOpVoAssembler.create(doCatheter);
	}

	@Override
	public HcpLiteVoCollection listCaseStaffHcps(String hcpName, IntraOpCaseStaffDetailsRefVo caseStaffDetail) throws DomainInterfaceException
	{
		String methodName = "listCaseStaffHcps";
		if (hcpName == null)
			throw new CodingRuntimeException("hcpName is null in method " + methodName);
		if (caseStaffDetail == null)
			throw new DomainInterfaceException("There are no case staff configured, Please create a record on the Case Details tab");

		DomainFactory factory = getDomainFactory();
		IntraOpCaseStaffDetails doCaseStaff = (IntraOpCaseStaffDetails) factory.getDomainObject(caseStaffDetail);

		HcpLiteVoCollection hcps = new HcpLiteVoCollection();
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getAnaestheticPractioner()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getAnaesthetist()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getAssistingAnaesthetist()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getOperatingSurgeon()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getResponsibleHCP()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getScrubPractitioner1()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getScrubPractitioner2()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getSupervisingAnaesthetist()));
		hcps.add(HcpLiteVoAssembler.create(doCaseStaff.getSupervisingSurgeon()));

		HcpLiteVoCollection assistingSurgeons = HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(doCaseStaff.getAssistingSurgeons());
		for (HcpLiteVo item : assistingSurgeons)
		{
			hcps.add(item);
		}

		Iterator it = doCaseStaff.getCirculatorScrubNurseRoles().iterator();
		while (it.hasNext())
		{
			CirculatorScrubNurseRole item = (CirculatorScrubNurseRole) it.next();
			hcps.add(HcpLiteVoAssembler.create(item.getNurse()));
		}

		HcpLiteVoCollection filteredHcps = new HcpLiteVoCollection();
		for (HcpLiteVo hcp : hcps)
		{
			// wildcard search fix
			if (hcpName.contains("%"))
			{
				filteredHcps.add(hcp);
			}
			else if (hcp.getMos().toString().toLowerCase().contains(hcpName.toLowerCase()))
			{
				filteredHcps.add(hcp);
			}
		}

		filteredHcps.sort();
		return filteredHcps;
	}

	@Override
	public SpecimenIntraOpVoCollection listSpecimenIntraOpByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listSpecimenIntraOpByAppointment");

		DomainFactory factory = getDomainFactory();
		List specs = factory.find("from SpecimenIntraOp sio where sio.theatreAppointment.id = :idAppt order by sio.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return SpecimenIntraOpVoAssembler.createSpecimenIntraOpVoCollectionFromSpecimenIntraOp(specs);
	}

	@Override
	public WoundPackingIntraOpVoCollection listWoundPackingByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listWoundPackingByAppointment");

		DomainFactory factory = getDomainFactory();
		List wounds = factory.find("from WoundPackingIntraOp wio where wio.theatreAppointment.id = :idAppt order by wio.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return WoundPackingIntraOpVoAssembler.createWoundPackingIntraOpVoCollectionFromWoundPackingIntraOp(wounds);
	}

	@Override
	public SkinClosureIntraOpVoCollection listSkinClosuresAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listSkinClosuresAppointment");

		DomainFactory factory = getDomainFactory();
		List skins = factory.find("from SkinClosureIntraOp sio where sio.theatreAppointment.id = :idAppt order by sio.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return SkinClosureIntraOpVoAssembler.createSkinClosureIntraOpVoCollectionFromSkinClosureIntraOp(skins);
	}

	@Override
	public void removeSpecimenIntraOP(SpecimenIntraOpRefVo specimenIntraOp)
	{
		try
		{
			getDomainFactory().delete("from SpecimenIntraOp sio where sio.id = '" + specimenIntraOp.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting Specimen IntraOP record", e);
		}
	}

	@Override
	public void removeWoundPackingIntraOp(WoundPackingIntraOpRefVo woundIntraOp)
	{
		try
		{
			getDomainFactory().delete("from WoundPackingIntraOp wio where wio.id = '" + woundIntraOp.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting Wound Packing IntraOP record", e);
		}
	}

	@Override
	public void removeSkinClosureIntraOp(SkinClosureIntraOpRefVo skinClosure)
	{
		try
		{
			getDomainFactory().delete("from SkinClosureIntraOp sio where sio.id = '" + skinClosure.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting Skin Closure IntraOP record", e);
		}
	}

	@Override
	public ImplantsIntraOpVoCollection listImplantIntraOpByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listImplantIntraOpByAppointment");

		DomainFactory factory = getDomainFactory();
		List implants = factory.find("from ImplantsIntraOp io where io.theatreAppointment.id = :idAppt order by io.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return ImplantsIntraOpVoAssembler.createImplantsIntraOpVoCollectionFromImplantsIntraOp(implants);
	}

	@Override
	public ArterialClampsIntraOpVoCollection listAreterialClampIntraOpByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listAreterialClampIntraOpByAppointment");

		DomainFactory factory = getDomainFactory();
		List clamps = factory.find("from ArterialClampIntraOp acio where acio.theatreAppointment.id = :idAppt order by acio.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return ArterialClampsIntraOpVoAssembler.createArterialClampsIntraOpVoCollectionFromArterialClampIntraOp(clamps);
	}

	@Override
	public EquipmentIntraOpVoCollection listOtherEquipIntraOpByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listOtherEquipIntraOpByAppointment");

		DomainFactory factory = getDomainFactory();
		List equipments = factory.find("from EquipmentIntraOp eio where eio.theatreAppointment.id = :idAppt order by eio.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return EquipmentIntraOpVoAssembler.createEquipmentIntraOpVoCollectionFromEquipmentIntraOp(equipments);
	}

	@Override
	public void removeImplantIntraOP(ImplantsIntraOpRefVo implant)
	{
		try
		{
			getDomainFactory().delete("from ImplantsIntraOp io where io.id = '" + implant.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting Implant IntraOP record", e);
		}
	}

	@Override
	public void removeArterialClampIntraOp(ArterialClampIntraOpRefVo arterial)
	{
		try
		{
			getDomainFactory().delete("from ArterialClampIntraOp acio where acio.id = '" + arterial.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting Arterial Clamp IntraOP record", e);
		}
	}

	@Override
	public void removeOtherEquipmentIntraOp(EquipmentIntraOpRefVo otherEquipment)
	{
		try
		{
			getDomainFactory().delete("from EquipmentIntraOp eio where eio.id = '" + otherEquipment.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting Other Equipment IntraOP record", e);
		}
	}

	@Override
	public TourniquetIntraOpVoCollection listTourniquetByAppointment(Booking_AppointmentRefVo appt)
	{
		DomainFactory factory = getDomainFactory();
		List tourniquets = factory.find("select tour from TourniquetIntraOp tour where tour.theatreAppointment.id = :theatreApptId", new String[] { "theatreApptId" }, new Object[] { appt.getID_Booking_Appointment() });

		return TourniquetIntraOpVoAssembler.createTourniquetIntraOpVoCollectionFromTourniquetIntraOp(tourniquets);
	}

	@Override
	public void saveTourniquet(TourniquetIntraOpVo tourniquet) throws StaleObjectException
	{
		String methodName = "saveTourniquet";
		if (tourniquet == null)
			throw new CodingRuntimeException("tourniquet is null in method " + methodName);
		if (!tourniquet.isValidated())
			throw new CodingRuntimeException("tourniquet has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		TourniquetIntraOp doTourniquet = TourniquetIntraOpVoAssembler.extractTourniquetIntraOp(factory, tourniquet);
		factory.save(doTourniquet);
	}

	@Override
	public PeriOpTimeIntoRecoveryVo getIntoRecoveryByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getIntoRecoveryByAppointment");

		return PeriOpTimeIntoRecoveryVoAssembler.create(PeriOpTimeIntoRecovery.getPeriOpTimeIntoRecoveryFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public PeriOpRecoveryDetailVo getRecoveryDetails(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getRecoveryDetails");

		return PeriOpRecoveryDetailVoAssembler.create(PeriOpRecoveryDetail.getPeriOpRecoveryDetailFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));

	}

	@Override
	public void saveRecoveryDetails(PeriOpRecoveryDetailVo recoveryDetails) throws StaleObjectException
	{
		String methodName = "saveRecoveryDetails";
		if (recoveryDetails == null)
			throw new CodingRuntimeException("recoveryDetails is null in method " + methodName);
		if (!recoveryDetails.isValidated())
			throw new CodingRuntimeException("recoveryDetails has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PeriOpRecoveryDetail doRecoveryDetails = PeriOpRecoveryDetailVoAssembler.extractPeriOpRecoveryDetail(factory, recoveryDetails);
		factory.save(doRecoveryDetails);
	}

	@Override
	public HandoverCountsIntraOpVoCollection listHandoverByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listHandoverByAppointment");

		DomainFactory factory = getDomainFactory();
		List handovers = factory.find("from HandoverCountIntraOp hio where hio.theatreAppointment.id = :idAppt order by hio.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return HandoverCountsIntraOpVoAssembler.createHandoverCountsIntraOpVoCollectionFromHandoverCountIntraOp(handovers);
	}

	@Override
	public void removeHandoverIntraOp(HandoverCountIntraOpRefVo handoverIntraOp)
	{
		try
		{
			getDomainFactory().delete("from HandoverCountIntraOp hio where hio.id = '" + handoverIntraOp.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting HandoverCountIntraOP record", e);
		}
	}

	@Override
	public FinalCountsIntraOpVoCollection listFinalCountByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listFinalCountByAppointment");

		DomainFactory factory = getDomainFactory();
		List finalCounts = factory.find("from FinalCountIntraOp fio where fio.theatreAppointment.id = :idAppt order by fio.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return FinalCountsIntraOpVoAssembler.createFinalCountsIntraOpVoCollectionFromFinalCountIntraOp(finalCounts);
	}

	@Override
	public void removeFinalCountIntraOp(FinalCountIntraOpRefVo finalCountIntraOp)
	{
		try
		{
			getDomainFactory().delete("from FinalCountIntraOp fio where fio.id = '" + finalCountIntraOp.getBoId() + "'");
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting FinalCountIntraOp record", e);
		}
	}

	@Override
	public PerformedProceduresIntraOpVoCollection listPerformedProceduresByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method listPerformedProceduresByAppointment");

		DomainFactory factory = getDomainFactory();
		List procs = factory.find("from PerformedProceduresIntraO ppi where ppi.theatreAppointment.id = :idAppt order by ppi.performedProcedure.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { appt.getID_Booking_Appointment() });
		return PerformedProceduresIntraOpVoAssembler.createPerformedProceduresIntraOpVoCollectionFromPerformedProceduresIntraO(procs);
	}

	@Override
	public void savePerformedProcedure(PerformedProceduresIntraOpVo performed, Booking_AppointmentRefVo theatreAppt) throws StaleObjectException
	{
		String methodName = "savePerformedProcedure";
		if (performed == null)
			throw new CodingRuntimeException("performed is null in method " + methodName);
		if (!performed.isValidated())
			throw new CodingRuntimeException("performed has not been validated in method " + methodName);
		if (theatreAppt == null)
			throw new CodingRuntimeException("theatreAppt is null in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PerformedProceduresIntraO doPerformedProc = PerformedProceduresIntraOpVoAssembler.extractPerformedProceduresIntraO(factory, performed);

		CareContext careContext = getCareContextFromCatsReferral(theatreAppt);
		doPerformedProc.getPerformedProcedure().setEpisodeOfCare(careContext.getEpisodeOfCare());//WDEV-22246
		
		doPerformedProc.getPerformedProcedure().setProcedureDescription(doPerformedProc.getPerformedProcedure().getProcedure().getProcedureName());
		doPerformedProc.getPerformedProcedure().setInfoSource(factory.getLookupInstance(SourceofInformation.CLINICALCONTACT.getID()));

		factory.save(doPerformedProc);
	}

	@Override
	public void savePerformedSignOut(PerformedProcAndSignOutIntraOpVo performedSignOut) throws StaleObjectException
	{
		String methodName = "savePerformedSignOut";
		if (performedSignOut == null)
			throw new CodingRuntimeException("performedSignOut is null in method " + methodName);
		if (!performedSignOut.isValidated())
			throw new CodingRuntimeException("performedSignOut has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		PerfProcAndSignOutIntraOp doSignOut = PerformedProcAndSignOutIntraOpVoAssembler.extractPerfProcAndSignOutIntraOp(factory, performedSignOut);
		factory.save(doSignOut);
	}

	@Override
	public PerformedProcAndSignOutIntraOpVo getPerformedSignOut(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getPerformedSignOut");

		return PerformedProcAndSignOutIntraOpVoAssembler.create(PerfProcAndSignOutIntraOp.getPerfProcAndSignOutIntraOpFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	@Override
	public TheatreBookingLiteVo getTheatreBooking(TheatreBookingRefVo theatreBooking)
	{
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method getTheatreBooking");

		return TheatreBookingLiteVoAssembler.create((TheatreBooking) getDomainFactory().getDomainObject(theatreBooking));
	}

	public UserAssessmentLiteVoCollection listUserAssessment()
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer(" ");
		String query = "from UserAssessment u left join u.taxonomyMap as taxMap ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		hql.append(" u.activeStatus = :actStat ");
		markers.add("actStat");
		values.add(getDomLookup(PreActiveActiveInactiveStatus.ACTIVE));

		hql.append(" and taxMap.taxonomyCode = :taxonomyCode and taxMap.taxonomyName=:taxName ");
		markers.add("taxonomyCode");
		values.add(INTRA_OPERATIVE_CASE_DETAILS_USER_ASSESSMENT_MAPPING);
		markers.add("taxName");
		values.add(getDomLookup(TaxonomyType.MAXIMS));

		if (markers.size() > 0)
			query += " where ";

		query += hql.toString();

		List<?> list = factory.find(query, markers, values);
		return UserAssessmentLiteVoAssembler.createUserAssessmentLiteVoCollectionFromUserAssessment(list);
	}

	public User_AssessmentVo getUserAssessment(UserAssessmentRefVo userAssessment)
	{
		if (userAssessment == null)
			return null;

		DomainFactory factory = getDomainFactory();
		UserAssessment obj = (UserAssessment) factory.getDomainObject(UserAssessment.class, userAssessment.getID_UserAssessment());

		return User_AssessmentVoAssembler.create(obj);
	}

	public Boolean isPatientAssessmentCompleted(PatientAssessmentRefVo patientAssessment)
	{
		if (patientAssessment == null || patientAssessment.getID_PatientAssessment() == null)
			return false;

		DomainFactory factory = getDomainFactory();
		String query = "select pa from PatientAssessment as pa left join pa.status as pas where pas.id = :CompletedId and pa.id = :PatientAssessmentId";

		List<?> assesments = factory.find(query, new String[] { "CompletedId", "PatientAssessmentId" }, new Object[] { PatientAssessmentStatusReason.COMPLETED.getID(), patientAssessment.getID_PatientAssessment() });

		if (assesments != null && assesments.size() > 0)
			return true;

		return false;
	}

	//WDEV-22282
	@Override
	public AnaestheticSignInVo getAnaestheticSignInvo(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getAnaestheticSignInvo");

		return AnaestheticSignInVoAssembler.create(AnaestheticSignIn.getAnaestheticSignInFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	//WDEV-22282
	@Override
	public Boolean isDiabeticFromPreAssessmentOutcome(Booking_AppointmentRefVo booking_AppointmentRef)
	{
		if (booking_AppointmentRef == null 
				|| booking_AppointmentRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Booking_Appointment is null in isDiabeticFromPreAssessmentOutcome");

		DomainFactory factory = getDomainFactory();

		String hql = "Select preAssesment from PatientElectiveList as p1_1 " +
					"left join p1_1.tCIDetails as t1_1 " +
					"left join t1_1.appointment as b1_1 " +
					"left join p1_1.preAssessmentOutcome as preAssesment " +
					"left join preAssesment.patientDiabetic as l1_1"  +
					" where  b1_1.id =" + booking_AppointmentRef.getID_Booking_Appointment() ; 
		List values = factory.find(hql);
		
		if (values != null 
				&& values.size() == 1 
				&& values.get(0) instanceof PreAssessmentOutcome) 
		{
			LookupInstance patientDiabetic = ((PreAssessmentOutcome)values.get(0)).getPatientDiabetic();
			return YesNo.YES.getID() == patientDiabetic.getId();
		}
		return null;
	}

	public ServiceLiteVoCollection listActiveService(HcpRefVo hcpRef) //WDEV-21788
	{
		if (hcpRef==null)
		{
			throw new CodingRuntimeException("mosRef is null in method listActiveService");
		}
		
		DomainFactory factory = getDomainFactory();
		List services = factory.find("select service from Hcp as hcp left join hcp.mos as mos left join hcp.serviceFunction as sf left join sf.service as service where hcp.id = :hcpID and service.isActive =1 order by service.serviceName asc", new String[] { "hcpID" }, new Object[] { hcpRef.getID_Hcp() });
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(services);
	}

	@Override
	public void saveBookingState(TheatreBookingRefVo theatreBooking, AcuteTheateListBookingState state)
	{
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method saveBookingState");
		
		TheatreBooking doTheatreBooking = (TheatreBooking) getDomainFactory().getDomainObject(theatreBooking);
		if(state != null)
			doTheatreBooking.setState(getDomainFactory().getLookupInstance(state.getID()));
		else
			doTheatreBooking.setState(null);
			
		try
		{
			getDomainFactory().save(doTheatreBooking);
		}
		catch (StaleObjectException e)
		{
			//Do nothing here - this should not fail
			//If it does fail the colour on the acute theatrelist may not reflect the current state of the booking
		}
	}

	//WDEV-22482
	@Override
	public Boolean isAnaestheticSignInIntraOpFluidsYes(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null in isAnaestheticSignInIntraOpFluidsYes");

		DomainFactory factory = getDomainFactory();

		String hql = "select signIn.intraoperativeFluidsRequired from AnaestheticSignIn signIn " +
					" where  signIn.theatreAppointment.id=" + appt.getID_Booking_Appointment() ; 
		List values = factory.find(hql);
		
		if (values != null 
				&& values.size() == 1 
				&& values.get(0) instanceof LookupInstance) 
		{
			LookupInstance intraOpFluids = (LookupInstance) values.get(0);
			return YesNo.YES.getID() == intraOpFluids.getId();
		}
		
		return false;
	}

	//WDEV-21840
	public Boolean isPlannedOrPerformedProcedureAddedAlready(Booking_AppointmentRefVo appt, ProcedureRefVo procedureRef)
	{
		if (appt == null || procedureRef==null)
			throw new CodingRuntimeException("appt or procedure is null in method isPlannedOrPerformedProcedureAddedAlready");

		DomainFactory factory = getDomainFactory();
		Long plannedProcCount = factory.countWithHQL("select count(iopp.id) from IntraOpPlannedProcedure as iopp left join iopp.plannedProcedure as pp left join pp.procedure as proc where iopp.theatreAppointment.id = :idAppt and proc.id = :procID  and (iopp.isRIE = 0 or iopp.isRIE is null) ", new String[] { "idAppt" , "procID"}, new Object[] { appt.getID_Booking_Appointment(), procedureRef.getID_Procedure() });
		
		if (plannedProcCount!=null && plannedProcCount>0)
			return true;
		
		Long performedProcCount = factory.countWithHQL("select count(ppi.id) from PerformedProceduresIntraO as ppi left join ppi.performedProcedure as pp left join pp.procedure as proc where ppi.theatreAppointment.id = :idAppt and proc.id = :procID and (ppi.isRIE = 0 or ppi.isRIE is null) ", new String[] { "idAppt" , "procID"}, new Object[] { appt.getID_Booking_Appointment(), procedureRef.getID_Procedure() });
		
		if (performedProcCount!=null && performedProcCount>0)
			return true;
		
		return false;
	}

	//WDEV-21840
	public Boolean isAnyProcedurePerormed(Booking_AppointmentRefVo appt)
	{
		if (appt == null )
			throw new CodingRuntimeException("appt is null in method isPlannedOrPerformedProcedureAddedAlready");

		DomainFactory factory = getDomainFactory();
		
		Long performedProcCount = factory.countWithHQL("select count(ppi.id) from PerformedProceduresIntraO as ppi where ppi.theatreAppointment.id = :idAppt ", new String[] { "idAppt"}, new Object[] { appt.getID_Booking_Appointment() });
		
		if (performedProcCount!=null && performedProcCount>0)
			return true;
		
		return false;
	}

	//WDEV-22548
	public Boolean isStale(PerformedProceduresIntraORefVo performedProcedure)
	{
		if (performedProcedure == null || performedProcedure.getID_PerformedProceduresIntraO()== null)
        {
                    throw new CodingRuntimeException("Cannot get PerformedProceduresIntraORefVo on null Id ");
        }
                                
        DomainFactory factory = getDomainFactory();
        PerformedProceduresIntraO domainPerformedProc = (PerformedProceduresIntraO) factory.getDomainObject(PerformedProceduresIntraO.class, performedProcedure.getID_PerformedProceduresIntraO());
        
        if(domainPerformedProc==null)
        {
                    return true;
        }
        
        if (domainPerformedProc.getVersion() > performedProcedure.getVersion_PerformedProceduresIntraO())
        {
                    return true;
        }
        
        return false;
	}

	//WDEV-21788
	public Sch_SessionShortVo getTheatreSession(Booking_AppointmentRefVo apptRef)
	{
		if (apptRef == null || apptRef.getID_Booking_Appointment()== null)
			throw new CodingRuntimeException("appt is null in getSessionApptByAppt");

		DomainFactory factory = getDomainFactory();

		Booking_Appointment dobookAppointment = (Booking_Appointment)factory.getDomainObject(apptRef);
		
		return Sch_SessionShortVoAssembler.create(dobookAppointment.getSession());
	}

	//WDEV-21857
	public IntraOpPlannedProcedureVo getPrimaryPlannedProc(Booking_AppointmentRefVo apptRef)
	{
		if (apptRef == null)
			throw new CodingRuntimeException("appt is null in method listIntraOpPlannedProcedureByAppointment");

		DomainFactory factory = getDomainFactory();
		List procs = factory.find("select iopp from IntraOpPlannedProcedure as iopp left join iopp.plannedProcedure as patProc where (iopp.theatreAppointment.id = :idAppt AND  patProc.isPrimary = 1)order by iopp.plannedProcedure.systemInformation.creationDateTime ", new String[] { "idAppt" }, new Object[] { apptRef.getID_Booking_Appointment() });
		
		if (procs==null || procs.size()==0)
			return null;
		
		return IntraOpPlannedProcedureVoAssembler.create((IntraOpPlannedProcedure)procs.get(0));
	}

	//WDEV-22663
	public Boolean isPocedurePerformedAlready(Booking_AppointmentRefVo appt, ProcedureRefVo procedureRef)
	{
		if (appt == null || procedureRef==null)
			throw new CodingRuntimeException("appt or procedure is null in method isPlannedOrPerformedProcedureAddedAlready");

		DomainFactory factory = getDomainFactory();
		
		Long performedProcCount = factory.countWithHQL("select count(ppi.id) from PerformedProceduresIntraO as ppi left join ppi.performedProcedure as pp left join pp.procedure as proc where ppi.theatreAppointment.id = :idAppt and proc.id = :procID and (ppi.isRIE = 0 or ppi.isRIE is null) ", new String[] { "idAppt" , "procID"}, new Object[] { appt.getID_Booking_Appointment(), procedureRef.getID_Procedure() });
		
		if (performedProcCount!=null && performedProcCount>0)
			return true;
		
		return false;
	}

	//WDEV-22721
	public void removeSkinPrep(SkinPrepIntraOpRefVo skinPrepRefVo)
	{
		String methodName = "removeSkinPrep";
		if (skinPrepRefVo == null)
			throw new CodingRuntimeException("skinPrepRefVo is null in method " + methodName);
	
		DomainFactory factory = getDomainFactory();
		SkinPrepIntraOp doSkinPrep = (SkinPrepIntraOp) factory.getDomainObject(skinPrepRefVo);
		try
		{
			factory.delete(doSkinPrep);
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainRuntimeException("Problem deleting SkinPrepIntraOp record", e);
		}
		
	}

	//WDEV-22721
	public SkinPreparationIntraOpVo getSkinPrep(SkinPrepIntraOpRefVo skinPrepRefVo)
	{
		String methodName = "getSkinPrep";
		if (skinPrepRefVo == null)
			throw new CodingRuntimeException("skinPrepRefVo is null in method " + methodName);
	
		DomainFactory factory = getDomainFactory();
		SkinPrepIntraOp doSkinPrep = (SkinPrepIntraOp) factory.getDomainObject(skinPrepRefVo);
		
		return SkinPreparationIntraOpVoAssembler.create(doSkinPrep);
	}
}
