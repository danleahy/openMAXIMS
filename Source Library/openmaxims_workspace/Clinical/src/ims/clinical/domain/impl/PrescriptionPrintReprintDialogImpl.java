//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5127.24028)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BasePrescriptionPrintReprintDialogImpl;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.domain.objects.EDPrescription;
import ims.emergency.domain.objects.PrescriptionPrintDetails;
import ims.emergency.vo.EDPrescriptionForPrintReprintVo;
import ims.emergency.vo.PrescriptionPrintDetailsVo;
import ims.emergency.vo.PrescriptionPrintDetailsVoCollection;
import ims.emergency.vo.domain.EDPrescriptionForPrintReprintVoAssembler;
import ims.emergency.vo.domain.PrescriptionPrintDetailsVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class PrescriptionPrintReprintDialogImpl extends BasePrescriptionPrintReprintDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.EDPrescriptionForPrintReprintVo getPrescriptionForPrint(ims.emergency.vo.EDPrescriptionRefVo prescREf)
	{
		if (prescREf == null)
			return null;
		
		EDPrescription prescriptionDO = (EDPrescription) getDomainFactory().getDomainObject(EDPrescription.class, prescREf.getID_EDPrescription());
	
		return EDPrescriptionForPrintReprintVoAssembler.create(prescriptionDO);
	}

	public EDPrescriptionForPrintReprintVo savePrescriptionAndUpdatePrintHistory(EDPrescriptionForPrintReprintVo prescriptionForPrintVo, PrescriptionPrintDetailsVo printDetailsVo, Boolean isReprintMode) throws UniqueKeyViolationException, StaleObjectException
	{
		if (prescriptionForPrintVo == null)
			throw new CodingRuntimeException("Cannot save a null EDPrescriptionForPrintReprintVo object. ");
		if (!prescriptionForPrintVo.isValidated())
			throw new CodingRuntimeException("Cannot save an invalid EDPrescriptionForPrintReprintVo object. ");
		if (printDetailsVo == null)
			throw new CodingRuntimeException("Cannot save a null PrescriptionPrintDetailsVo object. ");
		
		DomainFactory domainFactory = getDomainFactory();

		PrescriptionPrintDetails printDetailsRecDO = PrescriptionPrintDetailsVoAssembler.extractPrescriptionPrintDetails(domainFactory, printDetailsVo);
		
		EDPrescription prescriptionDO = (EDPrescription) getDomainFactory().getDomainObject(EDPrescription.class, prescriptionForPrintVo.getID_EDPrescription());
		
		if (prescriptionDO.getIsRIE() != null && Boolean.TRUE.equals(prescriptionDO.getIsRIE()) && prescriptionDO.getVersion() > prescriptionForPrintVo.getBoVersion())
			throw new UniqueKeyViolationException(" The prescription has been recorded in error by another user. The screen will be refreshed.");
		
		EDPrescription prescriptionForSaveDO = updatePrescription(domainFactory, prescriptionForPrintVo, prescriptionDO, printDetailsRecDO,isReprintMode);

		try
		{
			domainFactory.save(prescriptionForSaveDO);
		}
		catch (StaleObjectException e) 
		{
			if (isReprintMode)
			{
				prescriptionForSaveDO = updatePrescription(domainFactory, prescriptionForPrintVo, (EDPrescription) e.getStaleObject(), printDetailsRecDO, isReprintMode);
				try
				{
					domainFactory.save(prescriptionForSaveDO);
				}
				catch (StaleObjectException ex)
				{
					throw e;
				}				
			}			
		}

	return 	EDPrescriptionForPrintReprintVoAssembler.create(prescriptionForSaveDO);
	}
	
	private EDPrescription updatePrescription(DomainFactory domainFactory, EDPrescriptionForPrintReprintVo prescriptionForPrintVo, EDPrescription prescriptionDO, PrescriptionPrintDetails printDetailsDO,Boolean isReprintMode) throws StaleObjectException
	{
		Boolean alreadyPrinted = prescriptionForPrintVo.getIsPrinted();
		
		if (alreadyPrinted == null && Boolean.TRUE.equals(prescriptionDO.isIsPrinted()) && prescriptionDO.getVersion() > prescriptionForPrintVo.getBoVersion() && !isReprintMode)
			throw new StaleObjectException(prescriptionDO, "Prescription has been printed by another user. Please use reprint function.");
		
		if (!isReprintMode)
			prescriptionDO.setIsPrinted(true);
		
		List<PrescriptionPrintDetails> printDetailsHistoryList = prescriptionDO.getPrescriptionPrintHistory();
		if (printDetailsHistoryList == null)
			printDetailsHistoryList = new java.util.ArrayList<PrescriptionPrintDetails>();
		
		printDetailsHistoryList.add(printDetailsDO);
		
		return prescriptionDO;
			
	}
		
	public String[] getSystemReportAndTemplate(Integer repImsID)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List<?> lst = factory.find("select r.reportXml, t.templateXml from ReportBo as r left join r.templates as t where (r.imsId= :imsid) order by t.name", new String[] {"imsid"}, new Object[] {repImsID});
		
		if (lst.iterator().hasNext())
		{
			Object[] obj = (Object[]) lst.iterator().next();
			result = new String[] {(String)obj[0], (String)obj[1]};
		}
		
		return result;
	}

	public EDPrescriptionForPrintReprintVo rollbackPrintHistory(EDPrescriptionForPrintReprintVo prescVo, PrescriptionPrintDetailsVo printDetails, Boolean isReprint) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		
		EDPrescription edPrescriptionDO = (EDPrescription) factory.getDomainObject(EDPrescription.class, prescVo.getID_EDPrescription());
		EDPrescriptionForPrintReprintVo lastUpdatedPrescVo = EDPrescriptionForPrintReprintVoAssembler.create(edPrescriptionDO);
		
		PrescriptionPrintDetails PrescriptionPrintDetailsVo = (PrescriptionPrintDetails) factory.getDomainObject(PrescriptionPrintDetails.class, printDetails.getID_PrescriptionPrintDetails());
		PrescriptionPrintDetailsVo lastPrintHistoryRec	=  PrescriptionPrintDetailsVoAssembler.create(PrescriptionPrintDetailsVo);
		
		PrescriptionPrintDetailsVoCollection printHistoryColl = lastUpdatedPrescVo.getPrescriptionPrintHistory();
		printHistoryColl.remove(lastPrintHistoryRec);
		lastUpdatedPrescVo.setPrescriptionPrintHistory(printHistoryColl);
		if (!isReprint)
			lastUpdatedPrescVo.setIsPrinted(prescVo.getIsPrinted());
				
		EDPrescription prescToSaveDO = EDPrescriptionForPrintReprintVoAssembler.extractEDPrescription(factory, lastUpdatedPrescVo);
		factory.save(prescToSaveDO);		
		
		factory.getTransaction().commit();
		factory.setTransaction(null);
		
		return EDPrescriptionForPrintReprintVoAssembler.create(prescToSaveDO);
	}
}
