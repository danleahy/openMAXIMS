//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.configuration.domain.objects.InternalReferralSettings;
import ims.clinical.configuration.domain.objects.ServiceConfigIntReferral;
import ims.clinical.domain.base.impl.BaseInternalReferralImpl;
import ims.clinical.domain.objects.ClinicalReferrals;
import ims.clinical.vo.ClinicalReferralsRefVo;
import ims.clinical.vo.ClinicalReferralsVo;
import ims.clinical.vo.ServiceConfigIntReferralForReferralVo;
import ims.clinical.vo.ServiceConfigIntReferralForReferralVoCollection;
import ims.clinical.vo.ServiceConfigIntReferralVo;
import ims.clinical.vo.domain.ClinicalReferralsVoAssembler;
import ims.clinical.vo.domain.ServiceConfigIntReferralForReferralVoAssembler;
import ims.clinical.vo.domain.ServiceConfigIntReferralVoAssembler;
import ims.clinicaladmin.helper.IInternalReferralActionsHelper;
import ims.clinicaladmin.helper.InternalReferralActionsHelper;
import ims.clinicaladmin.vo.InternalReferralSettingsForReferralRecordingVo;
import ims.clinicaladmin.vo.domain.InternalReferralSettingsForReferralRecordingVoAssembler;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.documents.vo.PatientDocumentRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.AssessmentQuestionVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.domain.AssessmentQuestionVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class InternalReferralImpl extends BaseInternalReferralImpl
{

	private static final long serialVersionUID = 1L;

	public ServiceConfigIntReferralForReferralVoCollection listConfigServices(String serviceName)
	{
		if (serviceName == null || (serviceName != null && serviceName.length() == 0))
			throw new DomainRuntimeException("Cannot search on null name.");

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = "select serviceConf from ServiceConfigIntReferral as serviceConf left join serviceConf.service as service where serviceConf.active = :isActive and service.upperName like :servName "; //WDEV-20219 UPPER(service.serviceName)

		markers.add("isActive");
		values.add(Boolean.TRUE);
		markers.add("servName");
		values.add("%" + serviceName.toUpperCase() + "%");

		hql += " order by service.serviceName asc";

		return ServiceConfigIntReferralForReferralVoAssembler.createServiceConfigIntReferralForReferralVoCollectionFromServiceConfigIntReferral(factory.find(hql, markers, values));
	}

	public HcpLiteVoCollection listHCPs(String name)
	{
		if (name == null || (name != null && name.length() == 0))
			throw new DomainRuntimeException("Cannot search on null name.");

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = "select h from Hcp h ";

		hql += "where h.isActive = :isActive and (h.mos.name.upperSurname like :hcpSname or h.mos.name.upperForename like :hcpFname)";

		markers.add("isActive");
		values.add(Boolean.TRUE);
		markers.add("hcpSname");
		values.add(name.toUpperCase() + "%");
		markers.add("hcpFname");
		values.add(name.toUpperCase() + "%");

		hql += " order by h.mos.name.upperSurname,h.mos.name.upperForename";

		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(factory.find(hql, markers, values));

	}

	public ClinicalReferralsVo saveClinicalReferral(ClinicalReferralsVo referralToSave) throws StaleObjectException
	{
		if (referralToSave == null)
			throw new CodingRuntimeException("Cannot save null ClinicalReferral");

		DomainFactory factory = getDomainFactory();
		ClinicalReferrals domainReferralToSave = ClinicalReferralsVoAssembler.extractClinicalReferrals(factory, referralToSave);

		factory.save(domainReferralToSave);

		return ClinicalReferralsVoAssembler.create(domainReferralToSave);
	}

	public Boolean isInpatient(PatientRefVo patient)
	{
		if (patient == null)
			throw new DomainRuntimeException("Cannot get Patient on null Id.");

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = " select ip from InpatientEpisode as ip left join ip.pasEvent as pasEvent left join pasEvent.patient as patient where patient.id = :patientId";

		markers.add("patientId");
		values.add(patient.getID_Patient());

		List<?> list = factory.find(hql, markers, values);

		if (list != null && list.size() > 0)
			return true;

		return false;
	}

	public Boolean checkHcpAllowedForService(ServiceLiteVo service)
	{
		if (service == null)
			throw new DomainRuntimeException("Cannot get ServiceConfig on null Id.");

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = "select serviceConfig from ServiceConfigIntReferral as serviceConfig left join serviceConfig.service as serv where serviceConfig.active = :isActive and serv.id = :serviceId ";

		markers.add("isActive");
		values.add(Boolean.TRUE);
		markers.add("serviceId");
		values.add(service.getID_Service());

		List<?> list = factory.find(hql, markers, values);

		if (list != null && list.size() > 0)
		{
			ServiceConfigIntReferralVo serviceConfig = ServiceConfigIntReferralVoAssembler.create((ServiceConfigIntReferral) list.get(0));

			if (Boolean.TRUE.equals(serviceConfig.getNoHCPAllowedForService()))
				return false;
			else
				return true;
		}
		
		return true;
	}

	public ServiceConfigIntReferralForReferralVo getServiceConfigIntReferral(ServiceLiteVo service)
	{
		if (service == null)
			return null;

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = "select serviceConfig from ServiceConfigIntReferral as serviceConfig left join serviceConfig.service as serv where serviceConfig.active = :isActive and serv.id = :serviceId ";

		markers.add("isActive");
		values.add(Boolean.TRUE);
		markers.add("serviceId");
		values.add(service.getID_Service());

		List<?> list = factory.find(hql, markers, values);

		if (list != null && list.size() > 0)
		{
			return ServiceConfigIntReferralForReferralVoAssembler.create((ServiceConfigIntReferral) list.get(0));
		}
		
		return null;

	}

	public ClinicalReferralsVo getClinicalReferral(ClinicalReferralsRefVo referralRef)
	{
		if (referralRef == null)
			return null;

		return ClinicalReferralsVoAssembler.create((ClinicalReferrals) getDomainFactory().getDomainObject(ClinicalReferrals.class, referralRef.getID_ClinicalReferrals()));
	}

	public InternalReferralSettingsForReferralRecordingVo getInternalReferralsSettings()
	{
		DomainFactory factory = getDomainFactory();

		List<?> list = factory.find("select settings from InternalReferralSettings as settings");

		if (list != null && list.size() > 0)
		{
			return InternalReferralSettingsForReferralRecordingVoAssembler.create((InternalReferralSettings) list.get(0));
		}
		
		return null;
	}

	public AssessmentQuestionVoCollection getQuestionsForServiceConfig(ServiceConfigIntReferralForReferralVo service)
	{
		if (service == null)
			throw new DomainRuntimeException("Cannot get ServiceQuestions on null Service Id.");

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = "select questions from ServiceConfigIntReferral as serviceConfig left join serviceConfig.questions as questions where serviceConfig.id = :serviceId ";

		markers.add("serviceId");
		values.add(service.getID_ServiceConfigIntReferral());

		return AssessmentQuestionVoAssembler.createAssessmentQuestionVoCollectionFromAssessmentQuestion(factory.find(hql, markers, values));

	}

	public ServiceLiteVoCollection listServices(String serviceName)
	{
		if (serviceName == null || (serviceName != null && serviceName.length() == 0))
			throw new DomainRuntimeException("Cannot search on null name.");

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = "select service from Service as service left join service.serviceCategory as servCateg where service.isActive = :isActive and servCateg.id =:serviceCategId and service.upperName like :servName "; //WDEV-20219 UPPER(service.serviceName) 

		markers.add("isActive");
		values.add(Boolean.TRUE);
		
		markers.add("serviceCategId");
		values.add(ServiceCategory.CLINICAL.getID());
		
		markers.add("servName");
		values.add("%" + serviceName.toUpperCase() + "%");

		hql += " order by service.serviceName asc";

		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(factory.find(hql, markers, values));
	}

	
	public PatientDocumentVo getPatientDocument(PatientDocumentRefVo documentRef)
	{
		return PatientDocumentVoAssembler.create((PatientDocument) getDomainFactory().getDomainObject(PatientDocument.class, documentRef.getID_PatientDocument()));
	}

	public InternalReferralActionsHelper getInternalReferralHelper()
	{
		ims.clinicaladmin.helper.IInternalReferralActionsHelper iInterface = (IInternalReferralActionsHelper) getDomainImpl(InternalReferralActionsHelper.class);
		return iInterface.initializeInternalReferralActionsHelper();
	}

	public PatientShort getPatientShort(PatientRefVo patientRef)
	{
		if (patientRef == null || patientRef.getID_Patient() == null)
			return null;
		
		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patientRef.getID_Patient()));
	}
}
