//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.ClinicalCoding;
import ims.clinical.domain.base.impl.BaseDeathDetailsImpl;
import ims.core.admin.domain.objects.PDSBackOfficeItem;
import ims.core.clinical.domain.objects.DeathDetails;
import ims.core.clinical.domain.objects.Diagnosis;
import ims.core.clinical.vo.DiagnosisRefVo;
import ims.core.domain.DiagnosisList;
import ims.core.domain.PDSDemographics;
import ims.core.domain.impl.DiagnosisListImpl;
import ims.core.domain.impl.PDSDemographicsImpl;
import ims.core.helper.PdsException;
import ims.core.helper.PdsQuery;
import ims.core.vo.DeathDetailsVo;
import ims.core.vo.DeathDetailsVoCollection;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.PDSBackOfficeItemVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.DeathDetailsVoAssembler;
import ims.core.vo.domain.DiagnosisVoAssembler;
import ims.core.vo.domain.PDSBackOfficeItemVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;

import java.util.ArrayList;
import java.util.List;

public class DeathDetailsImpl extends BaseDeathDetailsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* saveDeathDetails
	*/
	public ims.core.vo.DeathDetailsVo saveDeathDetails(ims.core.vo.DeathDetailsVo deathDetails) throws ims.domain.exceptions.StaleObjectException
	{
		return null;
	}

	/**
	* getDeathDetails
	*/
	public ims.core.vo.DeathDetailsVo getDeathDetails(ims.core.patient.vo.PatientRefVo patientRefVo)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from DeathDetails dd where "); 
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		hql.append(" dd.patient.id = :pId");
		markers.add("pId");
		values.add(patientRefVo.getID_Patient());

		hql.append(" and dd.isRIE is null");

		List listNotes = factory.find(hql.toString(), markers,values);
		if(listNotes != null && listNotes.size() > 0)
		{ 
			DeathDetailsVoCollection voColl = DeathDetailsVoAssembler.createDeathDetailsVoCollectionFromDeathDetails(listNotes);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		return null;
	}

	public DiagnosisVo saveDiagnosisVo(DiagnosisVo voDiagnosisVo) throws StaleObjectException, UniqueKeyViolationException 
	{
		ClinicalCoding ccImpl = (ClinicalCoding) getDomainImpl(ClinicalCodingImpl.class);
		return ccImpl.saveDiagnosisVo(voDiagnosisVo);
	}

	public DiagnosisVo getDiagnosisByName(String strDiagnosisName) 
	{
		DomainFactory factory = getDomainFactory();
		Diagnosis domDiagnosis = Diagnosis.getDiagnosisFromDiagnosisName(factory, strDiagnosisName);
		return DiagnosisVoAssembler.create(domDiagnosis);
	}

	public DiagnosisVo getDiagnosisVo(DiagnosisRefVo voDiagnosisVo) 
	{
		DiagnosisList dlImpl = (DiagnosisList) getDomainImpl(DiagnosisListImpl.class);
		return dlImpl.getDiagnosisVo(voDiagnosisVo);
	}

	@Override
	public Patient getPatient(PatientShort patient) throws StaleObjectException
	{
		PDSDemographics impl = (PDSDemographics) getDomainImpl(PDSDemographicsImpl.class);
		return impl.getPatient(patient);
	}

	@Override
	public Patient unDeceasePatient(Patient patient, DeathDetailsVo deathDetails) throws DomainInterfaceException, StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		
		ims.core.patient.domain.objects.Patient domPatient = PatientAssembler.extractPatient(factory, patient);
		factory.save(domPatient);

		if(deathDetails != null)
		{
			deathDetails.setCancerRelatedDeath(null);
			deathDetails.setDeathCauseEstablished(null);
			deathDetails.setDeathCodeDiscrepency(null);
			deathDetails.setDeathConditions(null);
			deathDetails.setDeathPlaceofDeath(null);
			deathDetails.setPostMortem(null);
			deathDetails.setReferredToCorroner(null);
			
			DeathDetails domDeathDetails = DeathDetailsVoAssembler.extractDeathDetails(factory, deathDetails);
			factory.save(domDeathDetails);
		}
		
		Patient patientInContext = PatientAssembler.create(domPatient); 
		
		PdsQuery q = new PdsQuery(this);
		q.setNhsNumber(patientInContext.getNhsn() != null ? patientInContext.getNhsn().getValue() : "");
		q.setPatientInContext(patientInContext);
		
		try
		{
			PDSBackOfficeItemVo backOfficeItem = q.buildBackOfficeItemAndNotification(PDSBackOfficeType.DEATH, "Undecease patient", PDSBackOfficeWorkPriority.P1);
			PDSBackOfficeItem domBackOfficeItem = PDSBackOfficeItemVoAssembler.extractPDSBackOfficeItem(factory, backOfficeItem);
			
			factory.save(domBackOfficeItem);
		}
		catch (PdsException e)
		{
			e.printStackTrace();
			
			throw new DomainInterfaceException(e);
		}
		
		return patientInContext;
	}

}
