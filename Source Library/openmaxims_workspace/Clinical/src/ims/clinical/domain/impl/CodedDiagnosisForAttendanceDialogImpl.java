//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5557.23004)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.ClinicalCoding;
import ims.clinical.domain.DiagnosisDialog;
import ims.clinical.domain.base.impl.BaseCodedDiagnosisForAttendanceDialogImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.domain.CodedDiagnosesForAttendanceVoAssembler;
import ims.core.vo.lookups.DiagnosisDivisions;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;

import java.util.List;

public class CodedDiagnosisForAttendanceDialogImpl extends BaseCodedDiagnosisForAttendanceDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.DiagLiteVoCollection listDianosis(String diagSearch, String existingDiagnosis)
	{
		DiagnosisDialog impl=(DiagnosisDialog)getDomainImpl(DiagnosisDialogImpl.class);
		return impl.listDianosis(diagSearch, existingDiagnosis);
	}

	public ims.core.vo.CodedDiagnosesForAttendanceVoCollection listCodedDiagnosis(ims.core.admin.vo.CareContextRefVo attendance, Boolean isMain)
	{
		if(attendance == null || attendance.getID_CareContext() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select cd from CodedDiagForAttendance as cd left join cd.careContext as cc where cc.id = :AttendenceId order by UPPER(cd.diagnosisDescription) asc";
		
		List<?> list = factory.find(query, new String[] {"AttendenceId"}, new Object[] {attendance.getID_CareContext()});
		
		return CodedDiagnosesForAttendanceVoAssembler.createCodedDiagnosesForAttendanceVoCollectionFromCodedDiagForAttendance(list);
	}

	public ims.core.vo.DiagLiteVoCollection listHotListDiagnosis(String name, ims.core.vo.lookups.Specialty specialty) throws ims.domain.exceptions.DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listHotListDiagnosis(name, specialty);
	}

	/**
	* public DiagLiteVoCollection listDivisionDiagnoses(String name, DiagnosisDivisions division) throws DomainInterfaceException
	*/
	public ims.core.vo.DiagLiteVoCollection listDivisionDiagnoses(String name,  ims.core.vo.lookups.DiagnosisDivisions division) throws ims.domain.exceptions.DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listDivisionDiagnoses(name, division);
	}

	//WDEV-22287
	public DiagLiteVoCollection listDivisionDiagnoses(String name, DiagnosisDivisions division, Boolean includeExcludedKeywords) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listDivisionDiagnoses(name, division,includeExcludedKeywords);
	}
		
	public ims.core.vo.TaxonomyMapCollection searchCodes(ims.core.vo.TaxonomyMap filter) throws ims.domain.exceptions.DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.searchCodes(filter);
	}

	public ims.core.vo.DiagnosisVo saveDiagnosisVo(ims.core.vo.DiagnosisVo diagnosisToSave) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		DiagnosisDialog impl=(DiagnosisDialog)getDomainImpl(DiagnosisDialogImpl.class);
		return impl.saveDiagnosisVo(diagnosisToSave);
	}

	public ims.core.vo.DiagnosisVo getDiagnosisByName(String strDiagnosisName)
	{
		DiagnosisDialog impl=(DiagnosisDialog)getDomainImpl(DiagnosisDialogImpl.class);
		return impl.getDiagnosisByName(strDiagnosisName);
	}

	/**
	* public DiagLiteVoCollection listHotListDiagnosis(String name, Specialty specialty) throws DomainInterfaceException
	*/
	public ims.core.vo.DiagLiteVoCollection listHotListDiagnosis(String name,  ims.core.vo.lookups.Specialty specialty, Boolean includeExcludedKeywords) throws ims.domain.exceptions.DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listHotListDiagnosis(name, specialty,includeExcludedKeywords);
	}

	public Boolean isAlreadyAddedAPrimaryPatientDiagnosis(CareContextRefVo careContextRef)
	{
		if(careContextRef == null || careContextRef.getID_CareContext() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select COUNT(pd) from PatientDiagnosis as pd left join pd.careContext as cc where cc.id = :AttendenceId ";
		
		Long count = factory.countWithHQL(query, new String[] {"AttendenceId"}, new Object[] {careContextRef.getID_CareContext()});
		
		if (count>0)
			return true;
		
		return false;
				
	}

}
