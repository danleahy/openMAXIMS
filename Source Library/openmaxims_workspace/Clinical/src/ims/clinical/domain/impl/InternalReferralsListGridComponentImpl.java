//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.InternalReferralsIncomingListComponent;
import ims.clinical.domain.base.impl.BaseInternalReferralsListGridComponentImpl;
import ims.clinical.domain.objects.ClinicalReferrals;
import ims.clinical.vo.ClinicalReferralToUpdateForPatientReferralsListVo;
import ims.clinical.vo.ClinicalReferralsRefVo;
import ims.clinical.vo.domain.ClinicalReferralToUpdateForPatientReferralsListVoAssembler;
import ims.clinical.vo.domain.ClinicalReferralsForIncomingReferralListVoAssembler;
import ims.clinical.vo.domain.ClinicalReferralsSaveForIncomingReferralListVoAssembler;
import ims.clinicaladmin.helper.IInternalReferralActionsHelper;
import ims.clinicaladmin.helper.InternalReferralActionsHelper;
import ims.clinicaladmin.vo.InternalReferralSettingsVo;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class InternalReferralsListGridComponentImpl extends BaseInternalReferralsListGridComponentImpl
{
	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.ClinicalReferralsSaveForIncomingReferralListVo getClinicalReferral(ims.clinical.vo.ClinicalReferralsRefVo clinicalReferralRef)
	{
		if(clinicalReferralRef == null || clinicalReferralRef.getID_ClinicalReferrals() == null)
			throw new CodingRuntimeException("Cannor get ClinicalReferrals for a null ClinicalReferralsId.");
		
		DomainFactory factory = getDomainFactory();
		ClinicalReferrals doClinicalReferrals = (ClinicalReferrals) factory.getDomainObject(ClinicalReferrals.class, clinicalReferralRef.getID_ClinicalReferrals());
		
		return ClinicalReferralsSaveForIncomingReferralListVoAssembler.create(doClinicalReferrals);
	}

	public ims.clinical.vo.ClinicalReferralsForIncomingReferralListVo save(ims.clinical.vo.ClinicalReferralsSaveForIncomingReferralListVo clinicalReferral) throws ims.domain.exceptions.StaleObjectException
	{
		if(clinicalReferral == null)
			throw new CodingRuntimeException("Cannot save a null ClinicalReferralForRejectionVo");
		
		if(!clinicalReferral.isValidated())
			throw new CodingRuntimeException("ClinicalReferralForRejectionVo is not validated");
		
		DomainFactory factory = getDomainFactory();
		
		ClinicalReferrals doClinicalReferral = ClinicalReferralsSaveForIncomingReferralListVoAssembler.extractClinicalReferrals(factory, clinicalReferral);
		factory.save(doClinicalReferral);
		
		return ClinicalReferralsForIncomingReferralListVoAssembler.create(doClinicalReferral);
	}

	public ims.clinicaladmin.helper.InternalReferralActionsHelper getInternalReferralHelper()
	{
		ims.clinicaladmin.helper.IInternalReferralActionsHelper iInterface = (IInternalReferralActionsHelper) getDomainImpl(InternalReferralActionsHelper.class);
		return iInterface.initializeInternalReferralActionsHelper();
	}

	public Boolean isStale(ClinicalReferralsRefVo clinicalReferral) 
	{
		if(clinicalReferral == null)
            return false;

		DomainFactory factory = getDomainFactory();

		List<?> listOfReferrals = factory.find("select ref.id from ClinicalReferrals as ref where ref.id = :referralId and ref.version > :referralVer", new String[] {"referralId", "referralVer"}, new Object[] {clinicalReferral.getID_ClinicalReferrals(), clinicalReferral.getVersion_ClinicalReferrals()});

		if(listOfReferrals != null && listOfReferrals .size() > 0)
            return true;

		return false;
	}

	public ClinicalReferralToUpdateForPatientReferralsListVo getClinicalReferralForRIE(ClinicalReferralsRefVo clinicalReferral) 
	{
		if(clinicalReferral == null || clinicalReferral.getID_ClinicalReferrals() == null)
			throw new CodingRuntimeException("Cannor get ClinicalReferrals for a null ClinicalReferralsId.");
	
		DomainFactory factory = getDomainFactory();
		ClinicalReferrals doClinicalReferrals = (ClinicalReferrals) factory.getDomainObject(ClinicalReferrals.class, clinicalReferral.getID_ClinicalReferrals());
	
		return ClinicalReferralToUpdateForPatientReferralsListVoAssembler.create(doClinicalReferrals);
	}

	public InternalReferralSettingsVo getInternalReferralSettings() 
	{
		InternalReferralsIncomingListComponent impl = (InternalReferralsIncomingListComponent)getDomainImpl(InternalReferralsIncomingListComponentImpl.class);
		return impl.getInternalReferralSettings();
	}
}
