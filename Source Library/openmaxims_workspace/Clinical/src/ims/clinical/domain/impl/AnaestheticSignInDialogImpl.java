//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.PreAssessmentOutcome;
import ims.RefMan.vo.PatientElectiveListBookTheatreVo;
import ims.RefMan.vo.domain.PatientElectiveListBookTheatreVoAssembler;
import ims.clinical.domain.AcuteTheatreCaseTimesDialog;
import ims.clinical.domain.base.impl.BaseAnaestheticSignInDialogImpl;
import ims.clinical.domain.objects.AnaestheticSignIn;
import ims.clinical.domain.objects.PeriOpAnaesthticSignInTim;
import ims.clinical.vo.IntraOpPlannedProcedureVoCollection;
import ims.clinical.vo.PeriOpAnaesthticSignInTimVo;
import ims.clinical.vo.domain.AnaestheticSignInVoAssembler;
import ims.clinical.vo.domain.IntraOpPlannedProcedureVoAssembler;
import ims.clinical.vo.domain.PeriOpAnaesthticSignInTimVoAssembler;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.objects.TheatreBooking;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.TheatreBookingLiteVo;
import ims.scheduling.vo.TheatreBookingRefVo;
import ims.scheduling.vo.domain.TheatreBookingLiteVoAssembler;

import java.util.List;

public class AnaestheticSignInDialogImpl extends BaseAnaestheticSignInDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getAnaestheticSignInByAppointment
	*/
	public ims.clinical.vo.AnaestheticSignInVo getAnaestheticSignInByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getAnaestheticSignInByAppointment");

		return AnaestheticSignInVoAssembler.create(AnaestheticSignIn.getAnaestheticSignInFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	/**
	* saveAnaestheticSignInDetails
	*/
	public void saveAnaestheticSignInDetails(ims.clinical.vo.AnaestheticSignInVo anaestheticSignIn, PeriOpAnaesthticSignInTimVo signInTime, TheatreBookingRefVo theatreBooking) throws ims.domain.exceptions.StaleObjectException, DomainInterfaceException
	{
		String methodName = "saveAnaestheticSignIn";
		if (anaestheticSignIn == null)
			throw new CodingRuntimeException("anaestheticSignIn is null in method " + methodName);
		if (!anaestheticSignIn.isValidated())
			throw new CodingRuntimeException("anaestheticSignIn has not been validated in method " + methodName);
		if (signInTime == null)
			throw new CodingRuntimeException("signInTime is null in method " + methodName);
		if (theatreBooking == null)
			throw new CodingRuntimeException("theatreBooking is null in method " + methodName);	
		
		DomainFactory factory = getDomainFactory();
		AnaestheticSignIn doSignIn = AnaestheticSignInVoAssembler.extractAnaestheticSignIn(factory, anaestheticSignIn);
		
		try
		{
			factory.save(doSignIn);
		}
		catch(UnqViolationUncheckedException ex)
		{
			throw new DomainInterfaceException(ex);
		}
		
		//WDEV-22446
		saveAnaestheticSignIn(signInTime, theatreBooking);
	}

	/**
	* getPeriOpAnaestheticSignInByAppointment
	*/
	public ims.clinical.vo.PeriOpAnaesthticSignInTimVo getPeriOpAnaestheticSignInByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getPeriOpAnaestheticSignInByAppointment");

		return PeriOpAnaesthticSignInTimVoAssembler.create(PeriOpAnaesthticSignInTim.getPeriOpAnaesthticSignInTimFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
	}

	/**
	 * listIntraOpPlannedProcedureByAppointment
	 */
	public IntraOpPlannedProcedureVoCollection listIntraOpPlannedProcedureByAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method getIntraOpPlannedProcedureByAppointment");

		DomainFactory factory = getDomainFactory();
		List procs = factory.find("from IntraOpPlannedProcedure iopp where iopp.theatreAppointment.id = :idAppt order by iopp.plannedProcedure.systemInformation.creationDateTime ", new String[] { "idAppt"}, new Object[] { appt.getID_Booking_Appointment()});
		return IntraOpPlannedProcedureVoAssembler.createIntraOpPlannedProcedureVoCollectionFromIntraOpPlannedProcedure(procs);
	}

	@Override
	public Boolean isNoAnaesthetistPresentForLACases(Sch_SessionRefVo theatreSession)
	{
		if (theatreSession == null)
			throw new CodingRuntimeException("theatreSession is null in method isNoAnaesthetistPresentForLACases");
	
		Boolean noAnaesthetistPresent = false;
		
		DomainFactory factory = getDomainFactory();
		String hql = "select tssd.noAnaesthetistPresentLA from TheatreSessionStaffDetail tssd where tssd.theatreSession.id = " + theatreSession.getID_Sch_Session(); 
		List values = factory.find(hql);
		if (values.size() == 1)
			noAnaesthetistPresent = ((Boolean) values.get(0));
		
		return noAnaesthetistPresent;
	}

	@Override
	public Boolean isAnaesthetistValueInCase(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method isAnaesthetistValueInCase");
		
		Boolean anaesthetistValueInCase = false;
		
		DomainFactory factory = getDomainFactory();
		String hql = "select caseStaff.anaesthetist from IntraOpCaseStaffDetails caseStaff where caseStaff.theatreAppointment.id = " + appt.getID_Booking_Appointment(); 
		List values = factory.find(hql);
		if (values.size() == 1)
			anaesthetistValueInCase = true;
		
		return anaesthetistValueInCase;
	}

	@Override
	public Boolean isDiabeticFromPreAssessmentOutcome(Booking_AppointmentRefVo booking_AppointmentRef)//WDEV-22206
	{
		//WDEV-22446
		if(booking_AppointmentRef == null || booking_AppointmentRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Booking_Appointment is null in isDiabeticFromPreAssessmentOutcome");

		DomainFactory factory = getDomainFactory();

		String hql = "Select preAssesment from PatientElectiveList as p1_1 left join p1_1.tCIDetails as t1_1 left join t1_1.appointment as b1_1 left join p1_1.preAssessmentOutcome as preAssesment left join preAssesment.patientDiabetic as l1_1" +
		" where  b1_1.id =" + booking_AppointmentRef.getID_Booking_Appointment() ; 
		List values = factory.find(hql);
		
		if(values.size()==1 && values.get(0) instanceof PreAssessmentOutcome) 
		{
			LookupInstance patientDiabetic = ((PreAssessmentOutcome)values.get(0)).getPatientDiabetic();
			return YesNo.YES.getID() == patientDiabetic.getId();
		}
		return null;
	}

	//WDEV-21780
	public PatientElectiveListBookTheatreVo getElectiveListByTheatreAppt(Booking_AppointmentRefVo booking_AppointmentRef)
	{
		if(booking_AppointmentRef == null || booking_AppointmentRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Booking_Appointment is null in getElectiveListByTheatreAppt");

		DomainFactory factory = getDomainFactory();

		String hql = "Select p1_1 from PatientElectiveList as p1_1 left join p1_1.tCIDetails as t1_1 left join t1_1.appointment as b1_1 where  b1_1.id =" + booking_AppointmentRef.getID_Booking_Appointment() ; 
		
		List list = factory.find(hql);
		
		if (list==null || list.size()==0)
			return null;
		
		return PatientElectiveListBookTheatreVoAssembler.create((PatientElectiveList)list.get(0));
	}

	//WDEV-21780
	public TheatreBookingLiteVo getTheatreBooking(Booking_AppointmentRefVo booking_AppointmentRef)
	{
		if(booking_AppointmentRef == null || booking_AppointmentRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Booking_Appointment is null in getElectiveListByTheatreAppt");
		
		DomainFactory factory = getDomainFactory();

		String hql = "Select tb from Booking_Appointment as ba left join ba.theatreBooking as tb where  ba.id =" + booking_AppointmentRef.getID_Booking_Appointment() ; 
		
		List list = factory.find(hql);
		
		if (list==null || list.size()==0)
			return null;
		
		return TheatreBookingLiteVoAssembler.create((TheatreBooking)list.get(0));
	}

	//WDEV-22446
	@Override
	public void saveAnaestheticSignIn(PeriOpAnaesthticSignInTimVo signIn, TheatreBookingRefVo theatreBooking) throws StaleObjectException, DomainInterfaceException
	{
		AcuteTheatreCaseTimesDialog impl = (AcuteTheatreCaseTimesDialog) getDomainImpl(AcuteTheatreCaseTimesDialogImpl.class);
		impl.saveAnaestheticSignIn(signIn, theatreBooking);
	}
}
