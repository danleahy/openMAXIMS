//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.Allergies;
import ims.clinical.domain.base.impl.BaseEDischargeAllergiesEtcComponentImpl;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.clinical.domain.objects.PatientAllergy;
import ims.core.clinical.domain.objects.PatientNoAlertInfo;
import ims.core.clinical.domain.objects.PatientNoAllergyInfo;
import ims.core.clinical.vo.PatientAlertRefVo;
import ims.core.vo.AllergenVo;
import ims.core.vo.PatientAlertEDischargeVo;
import ims.core.vo.PatientAlertEDischargeVoCollection;
import ims.core.vo.PatientAllergyEDischargeVo;
import ims.core.vo.PatientAllergyEDischargeVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.PatientAlertEDischargeVoAssembler;
import ims.core.vo.domain.PatientAllergyEDischargeVoAssembler;
import ims.core.vo.lookups.AlertAccessRights;
import ims.core.vo.lookups.AlertType;
import ims.core.vo.lookups.PatientAlertStatus;
import ims.core.vo.lookups.PatientAllergyStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAlertsAccess;
import ims.framework.interfaces.IAppRole;
import ims.vo.interfaces.ICciFull;

import java.util.ArrayList;
import java.util.List;

public class EDischargeAllergiesEtcComponentImpl extends BaseEDischargeAllergiesEtcComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* lists patient allergies, filtering by patient and active status
	*/
	public PatientAllergyEDischargeVoCollection listPatientAllergies(ims.core.vo.PatientShort patient, Boolean active)
	{
		if(patient == null)
			throw new CodingRuntimeException("Mandatory parameter - Patient not supplied");
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from PatientAllergy patAlrg ");
		hql.append(" where patAlrg.patient.id = :patient");
		names.add("patient");
		values.add(patient.getID_Patient());
		
		if (active.equals(Boolean.TRUE))
		{
			hql.append (" and patAlrg.isCurrentlyActiveAllergy = :isActive");
			names.add("isActive");
			values.add(Boolean.TRUE);	
		}
		List list = factory.find(hql.toString(), names,values);
		return (PatientAllergyEDischargeVoAssembler.createPatientAllergyEDischargeVoCollectionFromPatientAllergy(list).sort());
	}

	/**
	* Lists Allergen Type Reactions
	*/
	public ims.core.vo.AllergenTypeReactionsCollection listAllergenTypeReactions(ims.core.vo.lookups.AllergenType voAllergenType)
	{
		Allergies impl = (Allergies)getDomainImpl(AllergiesImpl.class);
		return impl.listAllergenTypeReactions(voAllergenType);
	}

	/**
	* Gets a single PatientAllerge based on a PatientAllergy ID value. 
	*/
	public PatientAllergyEDischargeVo getpatientAllergy(Integer patientAllergyID)
	{
		DomainFactory factory = getDomainFactory();
		return PatientAllergyEDischargeVoAssembler.create((PatientAllergy)factory.getDomainObject((PatientAllergy.class), patientAllergyID.intValue()));
	}

	public PatientAlertEDischargeVoCollection listPatientAlerts(PatientShort patient, Boolean active, IAppRole role) 
	{
		if(patient == null)
			throw new CodingRuntimeException("Mandatory parameter - Patient not supplied");

		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select patAlrt from PatientAlert patAlrt left join patAlrt.alertType as alertType ");
		hql.append(" where patAlrt.patient.id = :patient");
		names.add("patient");
		values.add(patient.getID_Patient());
		
		String alertCategoryIds = getAlertCategoryIds(role);
		
		if(alertCategoryIds == null || alertCategoryIds.length() == 0)
			return null;
		
		hql.append (" and alertType.parent is not null and alertType.parent.id in (");
		hql.append(alertCategoryIds);
		hql.append(")");
		
		if (active.equals(Boolean.TRUE))
		{
			hql.append (" and patAlrt.isCurrentlyActiveAlert = :isActive");
			names.add("isActive");
			values.add(Boolean.TRUE);	
		}
		List list = factory.find(hql.toString(), names,values);
		return PatientAlertEDischargeVoAssembler.createPatientAlertEDischargeVoCollectionFromPatientAlert(list).sort();
	}

	private String getAlertCategoryIds(IAppRole role)
	{
		IAlertsAccess[] alertsAccessList = role.getAlertsAccessList();
		
		String ids = "";
		
		for(int i=0; i<alertsAccessList.length; i++)
		{
			IAlertsAccess alertAccess = alertsAccessList[i];
			
			if(alertAccess == null)
				continue;
			
			if(!(alertAccess.getIAlertType() instanceof AlertType) || !(alertAccess.getIAccess() instanceof AlertAccessRights))
				continue;
			
			AlertType alertType = (AlertType) alertAccess.getIAlertType();
			AlertAccessRights access = (AlertAccessRights) alertAccess.getIAccess();
			
			if(AlertAccessRights.READ_ONLY.equals(access) || AlertAccessRights.READ_WRITE.equals(access))
			{
				ids += (ids.length() > 0 ? "," : "") + alertType.getID();
			}
		}
		
		return ids.length() > 0 ? ids : null;
	}
	
	public PatientAlertEDischargeVo getPatientAlert(PatientAlertRefVo patientalertRefVo) 
	{	
		if(patientalertRefVo == null)
			throw new DomainRuntimeException("PatientAlert Filter not provided for list call. ");

		DomainFactory factory = getDomainFactory();
		ims.core.clinical.domain.objects.PatientAlert doPA = (ims.core.clinical.domain.objects.PatientAlert)factory.getDomainObject(ims.core.clinical.domain.objects.PatientAlert.class, patientalertRefVo.getID_PatientAlert());
		return PatientAlertEDischargeVoAssembler.create(doPA);		
	}

	public PatientAllergyEDischargeVo savePatientAllergy(PatientAllergyEDischargeVo voPatientAllergy) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if (!voPatientAllergy.isValidated())
			throw new CodingRuntimeException("Patient Allergy has not been validated");
		if(voPatientAllergy == null)
			throw new CodingRuntimeException("Cannot save null PatientAllergyVo");
		if(!voPatientAllergy.isValidated())
			throw new CodingRuntimeException("PatientAllergy is not validated");
		
		DomainFactory factory = getDomainFactory();
		
		//Check the allergy and save it
		if(voPatientAllergy.getAllergenIsNotNull() && voPatientAllergy.getAllergen().getID_Allergen() == null)
		{
			voPatientAllergy.setAllergen(saveAllergy(voPatientAllergy.getAllergen()));
		}		
		PatientAllergy doPatientAllergy = PatientAllergyEDischargeVoAssembler.extractPatientAllergy(factory, voPatientAllergy);
		
		//Check the PatientNoAllergyInfo
		String hqlQuery = "from PatientNoAllergyInfo as p1_1 where (p1_1.patient.id = :Patient_id and p1_1.isRIE is null )";
		List<?> domObj = factory.find(hqlQuery, "Patient_id", voPatientAllergy.getPatient().getID_Patient());
		if (domObj == null || domObj.size() == 0 || getDomLookup(PatientAllergyStatus.NOKNOWNALLERGIES).equals(((PatientNoAllergyInfo)domObj.get(0)).getAllergyStatus()))
		{
			//If the PatientNoAllergyInfo exists , update it with the HasAllergies status
			PatientNoAllergyInfo patientNoAllergy ;
			if (domObj == null || domObj.size() == 0)
			{
				patientNoAllergy = new PatientNoAllergyInfo();
				patientNoAllergy.setPatient(doPatientAllergy.getPatient());
			}
			else
				patientNoAllergy = (PatientNoAllergyInfo) domObj.get(0);
			patientNoAllergy.setAuthoringInformation(doPatientAllergy.getAuthoringInformation());
			patientNoAllergy.setSourceofInformation(doPatientAllergy.getSourceofInformation());
			patientNoAllergy.setAllergyStatus(getDomLookup(PatientAllergyStatus.HASALLERGIES));
			patientNoAllergy.setWhenIdentified(doPatientAllergy.getWhenIdentified());
			factory.save(patientNoAllergy);
			
		}
		
		
		factory.save(doPatientAllergy);
		return (PatientAllergyEDischargeVoAssembler.create(doPatientAllergy));		
	}

	private AllergenVo saveAllergy(AllergenVo voAllergen) throws StaleObjectException, UniqueKeyViolationException, DomainInterfaceException
	{
		CCIAdmin cciAdmin = (CCIAdmin) getDomainImpl(CCIAdminImpl.class);
		return (AllergenVo)cciAdmin.saveCci((ICciFull)voAllergen, CciType.ALLERGEN);
	}

	public PatientAlertEDischargeVo savePatientAlert(PatientAlertEDischargeVo patientAlertItem) throws StaleObjectException, UniqueKeyViolationException 
	{
		if(!patientAlertItem.isValidated())
		{
			throw new DomainRuntimeException("PatientAlert Value Object Alert has not been validated");
		}

		DomainFactory factory = getDomainFactory();
		ims.core.clinical.domain.objects.PatientAlert doAlert = PatientAlertEDischargeVoAssembler.extractPatientAlert(factory,patientAlertItem);

		//Verify if a PatientNoAlerInfo exists and has a Status of NOKNOWNALERTS
		String hqlQuery = "from PatientNoAlertInfo as p1_1 where (p1_1.patient.id = :Patient_id and p1_1.isRIE is null)";
		
		List<?> domObj = factory.find(hqlQuery,"Patient_id" , patientAlertItem.getPatient().getID_Patient());
		if (domObj == null || domObj.size() == 0  || getDomLookup(PatientAlertStatus.NOKNOWNALERTS).equals(((PatientNoAlertInfo)domObj.get(0)).getAlertStatus()))
		{
			//If the PatientNoAlertInfo exists , update it with the HasAlertsStatus
			PatientNoAlertInfo patientNoAlert;
			if (domObj == null || domObj.size() == 0)
			{
				patientNoAlert = new PatientNoAlertInfo();
				patientNoAlert.setPatient(doAlert.getPatient());
			}
			else
			{
				patientNoAlert = (PatientNoAlertInfo) domObj.get(0);
			}
			patientNoAlert.setAuthoringInformation(doAlert.getAuthoringInformation());
			patientNoAlert.setNoAlertSourceofInformation(doAlert.getSourceofInformation());
			patientNoAlert.setAlertStatus(getDomLookup(PatientAlertStatus.HASALERTS));
			patientNoAlert.setWhenIdentified(doAlert.getDateIdentified());
			factory.save(patientNoAlert);
			
		}
		factory.save(doAlert);
		return PatientAlertEDischargeVoAssembler.create(doAlert);
	}
}
