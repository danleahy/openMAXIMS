//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import ims.admin.helper.Keywords;
import ims.clinical.domain.ClinicalCoding;
import ims.clinical.domain.base.impl.BaseDiagnosisDialogImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.Diagnosis;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.PatientDiagnosisAtConsultationVoCollection;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.domain.DiagnosisVoAssembler;
import ims.core.vo.domain.PatientDiagnosisAtConsultationVoAssembler;
import ims.core.vo.lookups.DiagnosisDivisions;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;

public class DiagnosisDialogImpl extends BaseDiagnosisDialogImpl
{
	private static final long serialVersionUID = 1L;

	public ims.core.vo.DiagLiteVoCollection listDianosis(String diagSearch, String existingDiagnosis)
	{
		if(diagSearch == null)
			return null;
		
		diagSearch = diagSearch.trim().toUpperCase();
		
		if(diagSearch == null || diagSearch.length() == 0)
			return null;
		
		DomainFactory factory = getDomainFactory();
        Connection conection = factory.getJdbcConnection();
        
        StringBuffer sql = new StringBuffer();
        
        sql.append("select a.id, a.diagnosisn from core_diagnosis a LEFT OUTER JOIN core_diagnosis_keywords k ON a.id = k.id where (k.keyword like ? or a.diagnosisn like ?) and a.isactive = 1 ");
        
        if (existingDiagnosis != null && existingDiagnosis.trim().length() > 0)
		{
        	sql.append(" and a.id not in ("+existingDiagnosis+")");
		}
        
        sql.append(" order by upper(a.diagnosisn)");
        
        DiagLiteVoCollection diagnosisColl = new DiagLiteVoCollection();
        PreparedStatement ps;	
    		
        try 
        {
        	ps = conection.prepareCall(sql.toString());
        	ps.setString(1, diagSearch + "%");
        	ps.setString(2, diagSearch + "%");
        
        	ResultSet rs = ps.executeQuery();
        
        	while(rs.next())
        	{
        		DiagLiteVo vo = new DiagLiteVo();
        		vo.setID_Diagnosis(Integer.valueOf(rs.getString(1)));
        		vo.setDiagnosisName(rs.getString(2));
        		diagnosisColl.add(vo);
        	}
        }
        catch (SQLException e) 
        {
        	e.printStackTrace();
        }
        
        return diagnosisColl;
	}

	public PatientDiagnosisAtConsultationVoCollection listPatientDiagnosis(CareContextRefVo attendance) 
	{
		if(attendance == null || attendance.getID_CareContext() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select pd from PatientDiagnosis as pd left join pd.careContext as cc where cc.id = :AttendenceId order by UPPER(pd.diagnosisDescription) asc";
		
		List<?> list = factory.find(query, new String[] {"AttendenceId"}, new Object[] {attendance.getID_CareContext()});
		
		return PatientDiagnosisAtConsultationVoAssembler.createPatientDiagnosisAtConsultationVoCollectionFromPatientDiagnosis(list);
	}

	//WDEV-19056
	public DiagLiteVoCollection listHotListDiagnosis(String name, Specialty specialty) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listHotListDiagnosis(name, specialty);
	}

	//WDEV-21039
	public DiagLiteVoCollection listHotListDiagnosis(String name, Specialty specialty, Boolean includeExcludedKeywords) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listHotListDiagnosis(name, specialty,includeExcludedKeywords);
	}
	
	//WDEV-19056
	public DiagLiteVoCollection listDivisionDiagnoses(String name, DiagnosisDivisions division) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listDivisionDiagnoses(name, division);
	}

	//WDEV-22287
	public DiagLiteVoCollection listDivisionDiagnoses(String name, DiagnosisDivisions division, Boolean includeExcludedKeywords) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.listDivisionDiagnoses(name, division,includeExcludedKeywords);
	}
		
	//WDEV-19056
	public TaxonomyMapCollection searchCodes(TaxonomyMap filter) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding)getDomainImpl(ClinicalCodingImpl.class);
		return impl.searchCodes(filter);
	}

	//WDEV-19056
	public DiagnosisVo saveDiagnosisVo(DiagnosisVo diagnosisToSave) throws StaleObjectException, UniqueKeyViolationException
	{
		if (!diagnosisToSave.isValidated())
		{
			throw new DomainRuntimeException("This DiagnosisVo has not been validated");
		}
		
		DomainFactory factory = getDomainFactory();			
		Diagnosis domDiagnosis = DiagnosisVoAssembler.extractDiagnosis(factory, diagnosisToSave);

		domDiagnosis.setKeywords(Keywords.setupKeyWords(domDiagnosis.getKeywords(), domDiagnosis.getDiagnosisName()));
		try
		{
			factory.save(domDiagnosis);
		}
		catch(UnqViolationUncheckedException e)
		{		
			//check which constraint was violated (name/taxononmy map)

			//name
			Diagnosis diag = Diagnosis.getDiagnosisFromDiagnosisName(factory, diagnosisToSave.getDiagnosisName());
			if (diag != null && diag.getId() != null && !(diag.getId().equals(diagnosisToSave.getID_Diagnosis())))
			{
				throw new UniqueKeyViolationException("Diagnosis record called \"" + diagnosisToSave.getDiagnosisName() + "\" already exists. Duplicates not allowed.", e);	
			}

			//taxonomy map
			String dupMessage = Keywords.checkDuplicateTaxonomy(factory, domDiagnosis, diagnosisToSave.getTaxonomyMap(), "getDiagnosisName");
			if(dupMessage != null)
				throw new UniqueKeyViolationException(dupMessage);
						
			throw (e);
		}
		return DiagnosisVoAssembler.create(domDiagnosis);
	}

	//WDEV-19056
	public DiagnosisVo getDiagnosisByName(String strDiagnosisName)
	{
		DomainFactory factory = getDomainFactory();
		Diagnosis domDiagnosis = Diagnosis.getDiagnosisFromDiagnosisName(factory, strDiagnosisName);
		return DiagnosisVoAssembler.create(domDiagnosis);
	}
}
