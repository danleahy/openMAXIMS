//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.IntraOperativeCaseDetailsDialog;
import ims.clinical.domain.base.impl.BaseHandoverCountsIntraOpDialogImpl;
import ims.clinical.domain.objects.HandoverCountIntraOp;
import ims.clinical.domain.objects.IntraOpCaseStaffDetails;
import ims.clinical.vo.CirculatorScrubNurseRoleVo;
import ims.clinical.vo.CirculatorScrubNurseRoleVoCollection;
import ims.clinical.vo.IntraOpCaseStaffDetailsRefVo;
import ims.clinical.vo.domain.CirculatorScrubNurseRoleVoAssembler;
import ims.clinical.vo.domain.HandoverCountsIntraOpVoAssembler;
import ims.core.vo.NurseLiteVoCollection;
import ims.core.vo.domain.NurseLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class HandoverCountsIntraOpDialogImpl extends BaseHandoverCountsIntraOpDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listIntraOpPlannedProcedureByAppointment
	*/
	public ims.clinical.vo.IntraOpPlannedProcedureVoCollection listIntraOpPlannedProcedureByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		IntraOperativeCaseDetailsDialog impl = (IntraOperativeCaseDetailsDialog) getDomainImpl(IntraOperativeCaseDetailsDialogImpl.class);
		return impl.listIntraOpPlannedProcedureByAppointment(appt);
	}

	/**
	* saveHandoverIntraOp
	*/
	public void saveHandoverIntraOp(ims.clinical.vo.HandoverCountsIntraOpVo handover) throws ims.domain.exceptions.StaleObjectException
	{
		String methodName = "saveHandoverIntraOp";
		if (handover == null)
			throw new CodingRuntimeException("handover is null in method " + methodName);
		if (!handover.isValidated())
			throw new CodingRuntimeException("handover has not been validated in method " + methodName);

		DomainFactory factory = getDomainFactory();
		HandoverCountIntraOp doHandover = HandoverCountsIntraOpVoAssembler.extractHandoverCountIntraOp(factory, handover);
		
		if (doHandover == null)
			throw new StaleObjectException(doHandover);
		
		factory.save(doHandover);
	}

	/**
	* getHandoverIntraOp
	*/
	public ims.clinical.vo.HandoverCountsIntraOpVo getHandoverIntraOp(ims.clinical.vo.HandoverCountIntraOpRefVo handoverIntraOp)
	{
		return HandoverCountsIntraOpVoAssembler.create((HandoverCountIntraOp) getDomainFactory().getDomainObject(handoverIntraOp));	
	}

	@Override
	public NurseLiteVoCollection listCaseScrubPractitioners(IntraOpCaseStaffDetailsRefVo caseStaffDetail)
	{
		if (caseStaffDetail == null)
			throw new CodingRuntimeException("caseStaffDetail is null in method listCaseScrubPractitioners");
		
		NurseLiteVoCollection scrubPractitioners = new NurseLiteVoCollection();
		
		DomainFactory factory = getDomainFactory();
		IntraOpCaseStaffDetails doCase = (IntraOpCaseStaffDetails)factory.getDomainObject(caseStaffDetail);
		
		scrubPractitioners.add(NurseLiteVoAssembler.create(doCase.getScrubPractitioner1()));
		scrubPractitioners.add(NurseLiteVoAssembler.create(doCase.getScrubPractitioner2()));
		
		return scrubPractitioners;
	}

	@Override
	public NurseLiteVoCollection listCaseCirculatorScrubNurses(IntraOpCaseStaffDetailsRefVo caseStaffDetail)
	{
		if (caseStaffDetail == null)
			throw new CodingRuntimeException("caseStaffDetail is null in method listCaseCirculatorScrubNurses");
		
		NurseLiteVoCollection circulators = new NurseLiteVoCollection();
		
		DomainFactory factory = getDomainFactory();
		IntraOpCaseStaffDetails doCase = (IntraOpCaseStaffDetails)factory.getDomainObject(caseStaffDetail);
		
		CirculatorScrubNurseRoleVoCollection scrubNurseRoles =  CirculatorScrubNurseRoleVoAssembler.createCirculatorScrubNurseRoleVoCollectionFromCirculatorScrubNurseRole(doCase.getCirculatorScrubNurseRoles());
		for(CirculatorScrubNurseRoleVo scrubNusreRole : scrubNurseRoles)
		{
			circulators.add(scrubNusreRole.getNurse());
		}
		return circulators;
	}
}
