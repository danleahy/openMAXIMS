//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseAcuteTheatreListImpl extends DomainImpl implements ims.clinical.domain.AcuteTheatreList, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validatelistActiveHospitals(ims.core.resource.people.vo.MemberOfStaffRefVo memberOfStaff)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistTheatresForHospital(ims.core.resource.place.vo.LocationRefVo hospital)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistSession(ims.framework.utils.Date sessionDate, ims.core.resource.people.vo.HcpRefVo listOwner, ims.core.resource.place.vo.LocationRefVo hospital, ims.core.resource.place.vo.LocationRefVo theatreLocation, ims.scheduling.vo.lookups.TheatreType theatreType, ims.scheduling.vo.lookups.ProfileListType listType)
	{
	}

	@SuppressWarnings("unused")
	public void validategetSessionOrder(ims.scheduling.vo.Sch_SessionRefVo schSessionRefVo)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistAppointments(ims.scheduling.vo.Sch_SessionRefVo session)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistAppointments(ims.core.resource.people.vo.HcpRefVo hcp, ims.core.resource.people.vo.MemberOfStaffRefVo mosUser, ims.framework.utils.Date date)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistAllAppointments(ims.clinical.vo.AcuteTheatreListFilterVo filter)
	{
		if(filter == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'filter' of type 'ims.clinical.vo.AcuteTheatreListFilterVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientShort(ims.core.patient.vo.PatientRefVo voPatientRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatesaveSafetyBrief(ims.clinical.vo.PeriOpSafetyBriefTimeVo safetyBrief, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(safetyBrief == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'safetyBrief' of type 'ims.clinical.vo.PeriOpSafetyBriefTimeVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesavePatientSentFor(ims.clinical.vo.PeriOpPatientSentTimeVo patientSentFor, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(patientSentFor == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientSentFor' of type 'ims.clinical.vo.PeriOpPatientSentTimeVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesavePatientArrived(ims.clinical.vo.PeriOpPatientArrivedTimeVo patientArrived, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(patientArrived == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientArrived' of type 'ims.clinical.vo.PeriOpPatientArrivedTimeVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveAnaesthetisedRFS(ims.clinical.vo.PeriOpReadyForSurgeryTimeVo anaesthetizedRFS, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(anaesthetizedRFS == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'anaesthetizedRFS' of type 'ims.clinical.vo.PeriOpReadyForSurgeryTimeVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveTimeOutCompleted(ims.clinical.vo.PeriOpTimeOutCompleteVo timeOutCompleted, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(timeOutCompleted == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'timeOutCompleted' of type 'ims.clinical.vo.PeriOpTimeOutCompleteVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveSurgeryStart(ims.clinical.vo.PeriOpSurgeryStartTimeVo surgeryStart, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(surgeryStart == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'surgeryStart' of type 'ims.clinical.vo.PeriOpSurgeryStartTimeVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveSurgeryStop(ims.clinical.vo.PeriOpSurgeryStopTimeVo surgeryStop, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(surgeryStop == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'surgeryStop' of type 'ims.clinical.vo.PeriOpSurgeryStopTimeVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesavePatientLeftTheatre(ims.clinical.vo.PeriOpPatientLeftTheatreVo patientLeftTheatre, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(patientLeftTheatre == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientLeftTheatre' of type 'ims.clinical.vo.PeriOpPatientLeftTheatreVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesavePatientReadyForDischarge(ims.clinical.vo.PeriOpReadyForDischargeVo patientRFD, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(patientRFD == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patientRFD' of type 'ims.clinical.vo.PeriOpReadyForDischargeVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveTimeOutOfRecovery(ims.clinical.vo.PeriOpTimeOutOfRecoveryVo timeOutOfRecovery, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
		if(timeOutOfRecovery == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'timeOutOfRecovery' of type 'ims.clinical.vo.PeriOpTimeOutOfRecoveryVo' cannot be null.");
		if(theatreBooking == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'theatreBooking' of type 'ims.scheduling.vo.TheatreBookingRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetSafetyBriefByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientSentForByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientArrivedByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPeriOpAnaestheticSignInByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetAnaesRFSByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetTimeOutCompletedByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetSurgeryStartByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetSurgeryStopByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetReadyForDischargeByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientLeftTheatreByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetTimeOutOfRecoveryByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveTimeIntoRecovery(ims.clinical.vo.PeriOpTimeIntoRecoveryVo timeIntoRecovery, ims.scheduling.vo.TheatreBookingRefVo theatreBooking)
	{
	}

	@SuppressWarnings("unused")
	public void validategetTimeIntoRecoveryByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetTheatreAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appointment)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCareContextByAppt(ims.scheduling.vo.Booking_AppointmentRefVo apptRef)
	{
	}

	@SuppressWarnings("unused")
	public void validateupdateSessionComments(ims.scheduling.vo.SessionShortVo sessionComments)
	{
	}

	@SuppressWarnings("unused")
	public void validategetBookingAppointment(ims.scheduling.vo.Booking_AppointmentRefVo apptRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetTheatreServiceProcedureAndConsultant(ims.scheduling.vo.Booking_AppointmentRefVo apptRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatecancelAppt(ims.scheduling.vo.Booking_AppointmentVo appt, ims.chooseandbook.vo.lookups.ActionRequestType requestType, String requestSource)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCatsReferralForAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appointmentRef)
	{
	}

	@SuppressWarnings("unused")
	public void validateupdateCatsReferralAdditionalInvStatus(ims.RefMan.vo.CatsReferralRefVo catsReferral, ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
	}

	@SuppressWarnings("unused")
	public void validatecancelTCIAndReferralEROD(ims.RefMan.vo.CatsReferralRefVo catsReferral, ims.scheduling.vo.Booking_AppointmentRefVo apptRef, ims.scheduling.vo.lookups.CancelAppointmentReason cancellationReason, String cancellationComment, Boolean isProviderCancellation, Boolean isPatientCancellation, Boolean cancelledForNonMedicalReason)
	{
	}

	@SuppressWarnings("unused")
	public void validategetTheatre_Appointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientElectiveListForAppt(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPendingEmergencyTheatreForAppt(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
	}

	@SuppressWarnings("unused")
	public void validategetSessionLite(ims.scheduling.vo.Sch_SessionRefVo sch_sessionRef)
	{
	}
}
