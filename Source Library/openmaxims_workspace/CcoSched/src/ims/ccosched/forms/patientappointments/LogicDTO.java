//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Vasile Purdila using IMS Development Environment (version 1.18 build 40707.1200)
//Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.patientappointments;

import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.dto.DTODomainImplementation;
import ims.dto.Result;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_appt_dts.Sd_appt_dtsRecord;
import ims.dto.client.Sd_appt_hist;
import ims.dto.client.Sd_appt_hist.Sd_appt_histRecord;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.text.ParseException;
import java.util.ArrayList;

public class LogicDTO extends BaseLogic 
{
	private final String NEW_LINE = System.getProperty("line.separator");
	
	private final String STATUS_OPEN = "-2189";
	private final String STATUS_CANCELLED_RELLOCATE="-2190";
	private final String STATUS_DNA= "-2191";
	private final String STATUS_CANCEL_NO_RELLOCATE="-2193";
	private final String STATUS_REBOOKED = "-2194";
	private final String STATUS_MOVED = "-2195";

	protected ims.dto.DTODomain dtoDomain;

	protected void onFormOpen() 
	{
		dtoDomain = new DTODomainImplementation();
		
		Clean();
		LoadActivityCombo();
		updateControlsState();
	}

	private void LoadActivityCombo()
	{
		form.cmbActivity().clear();

		Sd_activity activity = (Sd_activity)domain.getDTOInstance(Sd_activity.class);			
		activity.Filter.clear();
		activity.Filter.Act_ind = "Y";
		Result result = activity.list();

		if (result != null)
		{
			showMessage(result.getMessage());
			return;
		}
		
		for (int i = 0; i < activity.DataCollection.count(); ++i)
			form.cmbActivity().newRow(activity.DataCollection.get(i).Activ_id, activity.DataCollection.get(i).Activ_nm);
	}
	
	private void updateControlsState()
	{
		//Disable Dialog button if there are no Open/Rebooked/Moved appointments details
		boolean enableChangeTime = false;
		boolean enableMove		  = false;
		//If children where selected then check if they are eligible for ChangeTime
		if (form.MainTree().getSelectedNode()!=null)
		{
    		if(ChildrenSelected(form.MainTree().getSelectedNode()))
    		{
    			if(NodesSelectable(true))
    				enableChangeTime = true;
    			if(MovableNodesSelectable(true))
    				enableMove = true;
    		}
    		else
    		{
    			enableChangeTime = NodesSelectable();
    			enableMove		 = MovableNodesSelectable();
    		}
		}

		form.ChangeTime().setEnabled(enableChangeTime);
		form.btnMove().setEnabled(enableMove);
		
		form.btnDisplayRebookings().setEnabled(form.MainTree().getNodes().size()>0);
		
		form.getLocalContext().setNumAppointmentsSelected(new Integer(0));
		HowManySelectedNodes(form.MainTree().getNodes());	
		boolean minoneNodeChecked = form.getLocalContext().getNumAppointmentsSelectedIsNotNull() && form.getLocalContext().getNumAppointmentsSelected().intValue() > 0;
		boolean oneNodeChecked = form.getLocalContext().getNumAppointmentsSelectedIsNotNull() && form.getLocalContext().getNumAppointmentsSelected().intValue() == 1;
		
		String status = form.getGlobalContext().CcoSched.ClinicView.getStatus();
		form.btnCancelAppt().setEnabled(minoneNodeChecked && (STATUS_MOVED.equals(status) || STATUS_REBOOKED.equals(status) || 
				STATUS_OPEN.equals(status) || STATUS_CANCELLED_RELLOCATE.equals(status) || STATUS_CANCEL_NO_RELLOCATE.equals(status)));
		//wdev-15161
		form.btnRebook().setEnabled(minoneNodeChecked && (STATUS_DNA.equals(status)|| STATUS_CANCELLED_RELLOCATE.equals(status)));
		form.Reset().setEnabled(oneNodeChecked);
		form.Transport().setEnabled(form.MainTree().getSelectedNode()!=null && form.MainTree().getSelectedNode().getValue() != null && !(form.MainTree().getSelectedNode().getValue() instanceof Sd_appt_hist.Sd_appt_histRecord) );		//wdev-13349
		form.TransportDetails().setEnabled(form.MainTree().getSelectedNode()!=null && form.MainTree().getSelectedNode().getValue() != null && !(form.MainTree().getSelectedNode().getValue() instanceof Sd_appt_hist.Sd_appt_histRecord)); //wdev-13349
		
		
		
	}	
	
	private void Clean()
	{
		form.MainTree().clear();
	}
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().CcoSched.PatientAppointmentsDates))
		{
//WDEV-15837			
			engine.open(form.getForms().CcoSched.PrintLetter);			
//			form.getGlobalContext().CcoSched.setTemplateCategoryIDList("-26");
//			engine.open(form.getForms().CcoSched.TemplateSelect);
//WDEV-15837			
			
		}

//WDEV-15837
//		if(formName.equals(form.getForms().CcoSched.TemplateSelect) && result.equals(DialogResult.OK))
//		{
//			Date  dt = new Date();
//			String today = "";
//			String appt_dt = "";
//			String pkey = form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getPkey() != null ? form.getGlobalContext().Core.getPatientShort().getPkey().getValue() : "";
//		
//			if(dt != null)
//			{
//				//appt_dt = ">" + Utility.GetStringFromDate(dt.Value);
//				today = dt.toString();
//			}
//
//			//02/09/2003 - Start Date filter and print appointments from this date
//			String apptStartDate = form.getGlobalContext().CcoSched.PatientAppointments.getApptStartDateIsNotNull()? form.getGlobalContext().CcoSched.PatientAppointments.getApptStartDate() : "";
//			String apptEndDate   = form.getGlobalContext().CcoSched.PatientAppointments.getApptEndDateIsNotNull()? form.getGlobalContext().CcoSched.PatientAppointments.getApptEndDate()	   : "";
//			
//			if(apptStartDate.equals("") == false && apptEndDate.equals("") == false)
//			{
//				appt_dt = apptStartDate + "|" + apptEndDate;
//			}
//			else if(apptStartDate.equals("") == false)
//			{
//				appt_dt = ">" + apptStartDate;
//			}
//			else if(apptEndDate.equals("") == false)
//			{
//				appt_dt = "<" + apptEndDate;
//			}
//			else
//			{
//				appt_dt = "!~";
//			}
//				
//							
//			//PatientappointmentsRds obj = new PatientappointmentsRds(domain, pkey, appt_dt, today);
//			PatientappointmentsRds obj = new PatientappointmentsRds((DTODomain)domain, pkey, appt_dt, today);
//			String str = obj.GetData();
//
//			Doctype doctype = (Doctype)domain.getDTOInstance(Doctype.class);
//			doctype.Filter.clear();
//			doctype.Filter.Doc_id = form.getGlobalContext().CcoSched.getSelectedTemplateID();
//
//			Result res = doctype.get();
//
//			if (res != null)
//			{
//				showMessage(res.getMessage());
//				return;
//			}
//
//			int nLeftMargin = 10;
//			int nTopMargin = 10;
//			int nRightMargin = 10;
//			int nBottomMargin = 10;
//			int nPaperSize = 9; //A4
//			boolean bPortrait = true;
//			
//			try
//			{
//				nLeftMargin = Integer.parseInt(doctype.DataCollection.get(0).Leftmargin);
//			} 
//			catch (Exception e)
//			{
//				nLeftMargin = 10;
//			}
//			try
//			{
//				nTopMargin = Integer.parseInt(doctype.DataCollection.get(0).Topmargin);
//			} 
//			catch (Exception e)
//			{
//				nTopMargin = 10;
//			}
//			try
//			{
//				nRightMargin = Integer.parseInt(doctype.DataCollection.get(0).Rightmargin);
//			} 
//			catch (Exception e)
//			{
//				nRightMargin = 10;
//			}
//			try
//			{
//				nBottomMargin = Integer.parseInt(doctype.DataCollection.get(0).Bottommargin);
//			} 
//			catch (Exception e)
//			{
//				nBottomMargin = 10;
//			}
//			try
//			{
//				nPaperSize = Integer.parseInt(doctype.DataCollection.get(0).Papersize);
//			} 
//			catch (Exception e)
//			{
//				nPaperSize = 9; //A4
//			}
//
//			bPortrait = doctype.DataCollection.get(0).Orientation.equals("1") ? true : false;
//			
//	        try
//			{
//	        	PrintServer.PrintDocument(doctype.DataCollection.get(0).Tmpl_content.getBytes(), str, form.getGlobalContext().CcoSched.getSelectedPrinter(), bPortrait, nLeftMargin, nTopMargin, nRightMargin, nBottomMargin, nPaperSize, false);
//			}
//	        catch(Exception e)
//			{
//	        	engine.showMessage(e.getMessage());
//			}
//			
//			return;
//		}
//WDEV-15837
		
		if (formName.equals(form.getForms().CcoSched.ClinicViewCancel))
		{				
			form.getGlobalContext().CcoSched.ClinicView.setAppointmentIDList(null);
			
			if(result.equals(DialogResult.OK))
				onBtnListPatientsClick();
		}
		
		if(formName.equals(form.getForms().CcoSched.TransportUpdateDetails) && result.equals(DialogResult.OK))
		{
			onBtnListPatientsClick();				
			//Expand previously selected node
			if(form.getGlobalContext().CcoSched.Trasport.getAppointmentHeaderID() != null)
			{	
				//foreach(TreeNode node in Form.MainTree.Nodes)
				for (int i = 0; i < form.MainTree().getNodes().size(); i++)
				{
					TreeNode node = form.MainTree().getNodes().get(i);
					
					if(node.getValue() instanceof Sd_appt.Sd_apptRecord)
					if(((Sd_appt.Sd_apptRecord)node.getValue()).Appt_head_id.equals(form.getGlobalContext().CcoSched.Trasport.getAppointmentHeaderID()))
					{
						node.setExpanded(true);
						//Form.MainTree.Value = node.Value;
					}
				}
			}
		}

		if((formName.equals(form.getForms().CcoSched.ChangeAppointmentsTimes) && result.equals(DialogResult.OK)))
		{
			onBtnListPatientsClick();
		}

		if(formName.equals(form.getForms().CcoSched.MoveMachine) && result.equals(DialogResult.OK))
		{
			onBtnListPatientsClick();
		}

		if (ThereAreSelectedNodes(form.MainTree().getNodes()) && 
			!formName.equals(form.getForms().CcoSched.TransportUpdateDetails) &&
			!formName.equals(form.getForms().CcoSched.ChangeAppointmentsTimes) && 
			!formName.equals(form.getForms().CcoSched.MoveMachine)				&&
			!formName.equals(form.getForms().CcoSched.ClinicViewCancel)		&&
			!formName.equals(form.getForms().CcoSched.PatientAppointmentsDates))
			onBtnListPatientsClick();				
	}
	private boolean ThereAreSelectedNodes(TreeNodeCollection nodes)
	{
		for (int i = 0; i < nodes.size(); i++)
		{
			TreeNode n = nodes.get(i);
			
			if (n.isChecked())
				return true;

			if (ThereAreSelectedNodes(n.getNodes()))
				return true;
		}

		return false;
	}
	protected void onFormClosing(ims.framework.delegates.CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().CcoSched.PatientAppointments.setApptStartDate(null);
		form.getGlobalContext().CcoSched.PatientAppointments.setApptEndDate(null);
		//23/11/2004 - Persistance context managed
		if(form.getGlobalContext().CcoSched.PatientAppointments.getParentIsNotNull())
			form.getGlobalContext().CcoSched.PatientAppointments.setParent(null);
		
	}
	protected void onBtnMoveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getLocalContext().getSd_apptClient() != null)
		{
			Sd_appt appt = (Sd_appt)domain.getDTOInstance(Sd_appt.class);
			appt.Filter.clear();
			appt.Filter.Appt_head_id = ((Sd_appt.Sd_apptRecord)(form.getLocalContext().getSd_apptClient())).Appt_head_id;
			Result result = appt.get();
			if (result != null)
			{
				engine.showMessage(result.getMessage());
				return;
			}
			//Parent
			form.getGlobalContext().CcoSched.PatientAppointments.setParent(appt);
			SetMoveAppointmentList();
			engine.open(form.getForms().CcoSched.MoveMachine);
		}
	}
	
	private void SetMoveAppointmentList()
	{
		//Children - an Array List
		ArrayList dtoClientArrayList = new ArrayList();
		if(MovableNodesSelectable())
		{
			boolean selectChecked = ChangeTimeNodeSelected();
			for (int i = 0 ; i < form.MainTree().getSelectedNode().getNodes().size(); i++)
			{
				TreeNode node = form.MainTree().getSelectedNode().getNodes().get(i);
				
				if(selectChecked && !node.isChecked())
					continue;

				String apptStatus = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat;
				String activityID = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Activ_id;
				
				if((apptStatus.equals("-2189") ||  //Open
						apptStatus.equals("-2194") ||	 //Rebooked
						apptStatus.equals("-2195") ) //Moved
				&& (activityID.equals("-202") || activityID.equals("-207")))
				{
					dtoClientArrayList.add((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue());
				}
			}
		}

		form.getGlobalContext().CcoSched.PatientAppointments.setChildren(dtoClientArrayList);
	}

	private boolean ChangeTimeNodeSelected()
	{
		for (int i = 0 ; i < form.MainTree().getSelectedNode().getNodes().size(); i++)
		{
			TreeNode node = form.MainTree().getSelectedNode().getNodes().get(i);
			
			if (node.isChecked())
			{
				String apptStatus = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat;
				if(apptStatus.equals("-2189") ||//Open
						apptStatus.equals("-2194") ||//Rebooked
						apptStatus.equals("-2195") )  //Moved
				{
					return true;
				}
				
			}
		}
		return false;
	}
	
	protected void onTransportDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.MainTree().getValue() != null)
		{
			if (form.MainTree().getValue() instanceof Sd_appt.Sd_apptRecord)
				form.getGlobalContext().CcoSched.Trasport.setAppointmentHeaderID(((Sd_appt.Sd_apptRecord)form.MainTree().getValue()).Appt_head_id);
			else
			{
				if(form.MainTree().getValue() instanceof Sd_appt_dts.Sd_appt_dtsRecord)	//wdev-13349
					form.getGlobalContext().CcoSched.Trasport.setAppointmentHeaderID(((Sd_appt_dts.Sd_appt_dtsRecord)form.MainTree().getValue()).Appt_head_id);
			}
	
			String title = "Transport Details ";
			form.getGlobalContext().CcoSched.setTransportDetailsTitle(form.MainTree().getSelectedNode() != null?form.MainTree().getSelectedNode().getText():"");
			engine.open(form.getForms().CcoSched.TransportUpdateDetails, title);
		}
	}
	protected void onPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().CcoSched.PatientAppointments.setApptStartDate(null);
		form.getGlobalContext().CcoSched.PatientAppointments.setApptEndDate(null);
		engine.open(form.getForms().CcoSched.PatientAppointmentsDates);
	}

	protected void onTransportClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.MainTree().getValue() != null)
		{
			if (form.MainTree().getValue() instanceof Sd_appt.Sd_apptRecord)
			form.getGlobalContext().CcoSched.Trasport.setAppointmentHeaderID(((Sd_appt.Sd_apptRecord)form.MainTree().getValue()).Appt_head_id);
			else
				if(form.MainTree().getValue() instanceof Sd_appt_dts.Sd_appt_dtsRecord)		//wdev-13349
					form.getGlobalContext().CcoSched.Trasport.setAppointmentHeaderID(((Sd_appt_dts.Sd_appt_dtsRecord)form.MainTree().getValue()).Appt_head_id);
		
	
			String title = "Transport Arrangements ";
			form.getGlobalContext().CcoSched.setTransportDetailsTitle(title + form.MainTree().getSelectedNode() != null?form.MainTree().getSelectedNode().getText():"");
			engine.open(form.getForms().CcoSched.TransportUpdate, title);
		}
	}
	protected void onBtnListPatientsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ClearChangeAppointmentTimeContext();
		
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(null);
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanActions(null);

		Clean();
		updateControlsState();
		if (form.getGlobalContext().Core.getPatientShort() == null)
		{
			engine.showMessage("No Patient Details selected");
			return;
		}


		Sd_appt appointment = (Sd_appt)domain.getDTOInstance(Sd_appt.class);
		appointment.Filter.clear();
		appointment.Filter.Pkey = form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getPkey() != null ? form.getGlobalContext().Core.getPatientShort().getPkey().getValue() : "";
		DateTime serverDateTime = new DateTime();
		
		//WDEV-14748 
		if (form.cmbPeriod().getValue() != null && form.cmbPeriod().getValue().getID() == -2375) // Past
		{				
			appointment.Filter.Last_appt_date = "<" + serverDateTime.getDate().toString(DateFormat.ISO);
		}
		else if (form.cmbPeriod().getValue() != null && form.cmbPeriod().getValue().getID() == -2376) // Present
		{
			Date date1 = new Date(serverDateTime.getDate());
			Date date2 = new Date(serverDateTime.getDate());
			
			date1.addDay(1);
			date2.addDay(-1);
			
			appointment.Filter.First_appt_date = "<" + date1.toString(DateFormat.ISO);
			appointment.Filter.Last_appt_date = ">" + date2.toString(DateFormat.ISO);
		}
		else if (form.cmbPeriod().getValue() != null && form.cmbPeriod().getValue().getID() == -2377) // Future
		{
			appointment.Filter.First_appt_date = ">" + serverDateTime.getDate().toString(DateFormat.ISO);
		}
		if (form.cmbActivity().getValue() != null)
			appointment.Filter.First_appt_activity = form.cmbActivity().getValue();
		
		Result result = appointment.list();
		if (result != null)
		{
			engine.showMessage(result.getMessage());
			return;
		}

		for (int i = 0; i < appointment.DataCollection.count(); i++)
		{
			Sd_appt.Sd_apptRecord ap = appointment.DataCollection.get(i);
			
			Date dt = null;
			try
			{
				dt = new Date(ap.First_appt_date, DateFormat.ISO);
			} catch (Exception e)
			{
				dt = null;
			}
			TreeNode node = form.MainTree().getNodes().add(ap, dt == null ? "" : dt.toString() + 
				" " + ap.First_appt_activitytxt + " " + ap.Act_consulttxt);	

			node.setCheckBoxVisible(false);

			//LoadNode(node, ap.Appt_head_id);

			if (form.getLocalContext().getNodeExpandedIsNotNull())
			{
				if (form.getLocalContext().getNodeExpanded().equals(ap.Appt_head_id))
				{
					node.setExpanded(true);
					form.getLocalContext().setNodeExpanded(null);
				}
			}
		}
		
		loadAllNodes(appointment);

		if (appointment.DataCollection.count() == 0)
		{
			engine.showMessage("No records.");
		}
		else
		{
			//Force a TreeViewSelectionChanged for the default tree selection
			if(form.MainTree().getNodes().size() > 0 && form.MainTree().getSelectedNode() != null)
			{
				onMainTreeTreeViewSelectionChanged(form.MainTree().getSelectedNode());
			}
		}
		
		updateControlsState();
	}

	private void loadAllNodes(Sd_appt appointment)
	{
		String appt_id_coll = getApptHeadIdCollection(appointment);
		
		if(appt_id_coll == null || appt_id_coll.length() ==0)
			return;
		
		Sd_appt_dts apptDetails = (Sd_appt_dts)domain.getDTOInstance(Sd_appt_dts.class);
		apptDetails.Filter.clear();
		apptDetails.Filter.Appt_head_id = appt_id_coll;
		Result result = apptDetails.list();
		if (result != null)
		{
			engine.showMessage(result.getMessage());
			return;
		}
		//foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient ap in apptDetails.Sd_appt_dtsCollection)
		for (int i = 0; i < apptDetails.DataCollection.count(); i++)
		{
			Sd_appt_dts.Sd_appt_dtsRecord ap = apptDetails.DataCollection.get(i);
			
			TreeNode node = getParentNode(ap.Appt_head_id);
			
			Date dt = null;
			Time tm = null;
			try
			{
				tm = new Time(ap.Att_tm, TimeFormat.FLAT6);
			} catch (Exception e)
			{
				tm = null;
			}
			try
			{
				dt = new Date(ap.Sess_dt, DateFormat.ISO);
			} catch (Exception e)
			{
				dt = null;
			}
			
			String attTime = tm == null ? "" : tm.toString();
			//Change Request - session Name added
			node.getNodes().add(ap, dt == null ? "" : dt.toString() + "  " +					
				"Att.Time:" + attTime + "  " +
				"Type:" + ap.Trans_typtxt + " " +
				"Action:" + ap.Action_idtxt + "  " +
				"Machine:" + ap.Mc_nm + "  " +
				"Session:" + ap.Sess_lcnm + " " +
				"Status:" + ap.Appt_stattxt);
		}
	}

	private TreeNode getParentNode(String appt_head_id)
	{
		if(appt_head_id == null || appt_head_id.length() == 0)
			return null;
		
		for (int i = 0; i < form.MainTree().getNodes().size(); i++)
		{
			if(form.MainTree().getNodes().get(i).getValue() instanceof Sd_appt.Sd_apptRecord) 
			{
				if(((Sd_appt.Sd_apptRecord)form.MainTree().getNodes().get(i).getValue()).Appt_head_id.equals(appt_head_id))
				{
					return form.MainTree().getNodes().get(i);
				}
			}
		}
		
		return null;
	}

	private void LoadNode(TreeNode node, String appHeadId)
	{
		Sd_appt_dts apptDetails = (Sd_appt_dts)domain.getDTOInstance(Sd_appt_dts.class);
		apptDetails.Filter.clear();
		apptDetails.Filter.Appt_head_id = appHeadId;
		Result result = apptDetails.list();
		if (result != null)
		{
			engine.showMessage(result.getMessage());
			return;
		}
		//foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient ap in apptDetails.Sd_appt_dtsCollection)
		for (int i = 0; i < apptDetails.DataCollection.count(); i++)
		{
			Sd_appt_dts.Sd_appt_dtsRecord ap = apptDetails.DataCollection.get(i);
			
			Date dt = null;
			Time tm = null;
			try
			{
				tm = new Time(ap.Att_tm, TimeFormat.FLAT6);
			} catch (Exception e)
			{
				tm = null;
			}
			try
			{
				dt = new Date(ap.Sess_dt, DateFormat.ISO);
			} catch (Exception e)
			{
				dt = null;
			}
			
			String attTime = tm == null ? "" : tm.toString();
			//Change Request - session Name added
			node.getNodes().add(ap, dt == null ? "" : dt.toString() + "  " +					
				"Att.Time:" + attTime + "  " +
				"Type:" + ap.Trans_typtxt + " " +
				"Action:" + ap.Action_idtxt + "  " +
				"Machine:" + ap.Mc_nm + "  " +
				"Session:" + ap.Sess_lcnm + " " +
				"Status:" + ap.Appt_stattxt);
		}
	}
	private void ClearChangeAppointmentTimeContext()
	{
		form.getGlobalContext().CcoSched.PatientAppointments.setParent(null);
		form.getGlobalContext().CcoSched.PatientAppointments.setChildren(null);
		form.getLocalContext().setSd_apptClient(null);
	}
	protected void onBtnRebookClick() throws ims.framework.exceptions.PresentationLogicException
	{ 
		Sd_appt_dts.Sd_appt_dtsRecord node = (Sd_appt_dts.Sd_appt_dtsRecord)NodeSelected(form.MainTree().getNodes()).getValue();
		
		PatTreatmentPlanLiteVo voTP = null;
		if (node.Treatpl_act_id != "")
			voTP = domain.getTreatmentPlan(new Integer(node.Appt_head_id));
		
		if (voTP != null)
		{
			form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(node.Appt_head_id);//Context.ActionID;
			form.getGlobalContext().setPatTreatmentPlan(voTP);
			form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(voTP.getActions());//Context.TreatmentPlanActions = actions;
		}
		else
		{
			//Clear the TP context
			form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);//Context.ClearActionID();
			form.getGlobalContext().setPatTreatmentPlan(null);
			form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(null);//Context.ClearTreatmentPlanActions();
		}

 
		form.getGlobalContext().CcoSched.CancelledAppointments.setRebookAppointmentDetail(node.Appt_head_id);//Context.RebookAppointmentDetail;
			
		form.getLocalContext().setNodeExpanded(ParentNode(NodeSelected(form.MainTree().getNodes())));
		
		engine.open(form.getForms().CcoSched.Rebooking);
	}
	protected void onBtnCancelApptClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!ThereAreSelectedNodes(form.MainTree().getNodes()))
		{
			showMessage("No appointments selected.");
			return;
		}

		//Save in the Context the variables that we need for ClinicViewCancel screen
		Sd_appt_dts.Sd_appt_dtsRecord node = (Sd_appt_dts.Sd_appt_dtsRecord)NodeSelected(form.MainTree().getNodes()).getValue();
		//Status
		form.getGlobalContext().CcoSched.ClinicView.setStatus(node.Appt_stat);//Context.ContextClinicView.Status
		//Reason
		form.getGlobalContext().CcoSched.ClinicView.setReason(node.Att_stat_reas);//Context.ContextClinicView.Reason
		//Booking Comment
		form.getGlobalContext().CcoSched.ClinicView.setBookingComment(node.Appt_cmts);//Context.ContextClinicView.BookingComment
		//Appointment Header ID
		form.getGlobalContext().CcoSched.ClinicView.setAppointmentHeaderID(node.Appt_head_id);//Context.ContextClinicView.AppointmentHeaderID
		//Appointment Id	
		form.getGlobalContext().CcoSched.ClinicView.setAppointmentIDList(NodesSelected(form.MainTree().getNodes()));//Context.ContextClinicView.AppointmentIDList

		form.getLocalContext().setNodeExpanded(ParentNode(NodeSelected(form.MainTree().getNodes())));
		
		String title = "Cancel Appointment ";
			   title+= GetCancelApptTitle();
		form.getGlobalContext().CcoSched.ClinicViewCancel.setDialogTitle(title);
		engine.open(form.getForms().CcoSched.ClinicViewCancel);
	}
	protected void onResetClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ResetTree(form.MainTree().getNodes());
		updateControlsState();
	}
	private void ResetTree(TreeNodeCollection nodes)
	{
		for(int i=0; i<nodes.size(); i++)
		{
			if (nodes.get(i).isChecked())
				nodes.get(i).setChecked(false);
			ResetTree(nodes.get(i).getNodes());
		}
	}
	protected void onMainTreeTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.MainTree().getValue() instanceof Sd_appt_dts.Sd_appt_dtsRecord)
		{
			// Category, HCP.
			Sd_appt_dts.Sd_appt_dtsRecord ap = (Sd_appt_dts.Sd_appt_dtsRecord)form.MainTree().getValue();
			Sd_appt_dts apptDetails = (Sd_appt_dts)domain.getDTOInstance(Sd_appt_dts.class);
			apptDetails.Filter.clear();
			apptDetails.Filter.Appt_head_id = ap.Appt_head_id;
			apptDetails.Filter.Appt_id = ap.Appt_id;
			Result result = apptDetails.get();
			if (result != null)
			{
				engine.showMessage(result.getMessage());
				return;
			}
/*			else
			{
				form.PatientCategory().setValue(apptDetails.DataCollection.get(0).Txcattypetxt);
				form.PatientHCP().setValue(apptDetails.DataCollection.get(0).Act_consulttxt);
			}*/
			
			TreeNode parent = GetParent((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue());
			if(parent != null && form.MainTree().getValue().equals(parent.getValue()) == false)
			{
				form.MainTree().setValue(parent.getValue());
			}
		}	
		
		//29/05/2003 - Set the Context for "Change Time" dialog
		if(form.MainTree().getValue() != null && form.MainTree().getValue() instanceof Sd_appt.Sd_apptRecord)
		{
			//Parent
			form.getLocalContext().setSd_apptClient((Sd_appt.Sd_apptRecord)form.MainTree().getSelectedNode().getValue());

			//Clear the checking for the rest of the nodes
			for (int i = 0; i < form.MainTree().getNodes().size(); i++)
			{
				TreeNode parentNode = form.MainTree().getNodes().get(i);
				//skip the existing node
				if(parentNode.getValue().equals(node.getValue()) == false)
				{
					for (int j = 0; j < parentNode.getNodes().size(); j++)
					{
						TreeNode leafNode = parentNode.getNodes().get(j);
						
						if (leafNode.isChecked())
						{
							leafNode.setChecked(false);
							//onMainTreeTreeViewCheck(leafNode);
						}
					}
				}
			}
		}
		updateControlsState();
	}

	private boolean MovableNodesSelectable()
	{
		return MovableNodesSelectable(false);
	}

	private boolean MovableNodesSelectable(boolean bCheckSelected)
	{
		for (int i = 0; i < form.MainTree().getSelectedNode().getNodes().size(); i++)
		{
			TreeNode node = form.MainTree().getSelectedNode().getNodes().get(i);
		
			if(bCheckSelected && node.isChecked() == false)
				continue;

			String apptStatus = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat;
			String activityID = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Activ_id;
			if((apptStatus.equals("-2189") ||//Open
				apptStatus.equals("-2194") ||//Rebooked
				apptStatus.equals("-2195" ))//Moved
				&& (activityID.equals("-202") || activityID.equals("-207")))
			{
				return true;
			}
		}

		return false;
	}

	private boolean NodesSelectable()
	{
		return NodesSelectable(false);
	}
	private boolean NodesSelectable(boolean bCheckSelected)
	{
		for (int i = 0; i < form.MainTree().getSelectedNode().getNodes().size(); i++)
		{
			TreeNode node = form.MainTree().getSelectedNode().getNodes().get(i);
			
			if(bCheckSelected && node.isChecked() == false)
				continue;

			String apptStatus = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat;
			if(apptStatus.equals("-2189")  || //Open
				apptStatus.equals("-2194") || //Rebooked
				apptStatus.equals("-2195"))   //Moved
			{
				return true;
			}
		}

		return false;
	}
	private boolean ChildrenSelected(TreeNode node)
	{
		for(int i=0; i<node.getNodes().size(); i++)
			if(node.getNodes().get(i).isChecked())
				return true;
			
		return false;
	}
	private TreeNode GetParent(Sd_appt_dtsRecord obj)
	{
		for (int i = 0; i < form.MainTree().getNodes().size(); i++)
		{
			TreeNode parentNode = form.MainTree().getNodes().get(i);

			for (int j = 0; j < parentNode.getNodes().size(); j++)
			{
				TreeNode leafNode = parentNode.getNodes().get(j);
				
				if (leafNode.getValue().equals(obj))
					return parentNode;
			}
		}

		return null;
	}
	protected void onMainTreeTreeViewCheck(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		boolean parentSelectable = true;
		form.getLocalContext().setNumAppointmentsSelected(new Integer(0));
		HowManySelectedNodes(form.MainTree().getNodes());			
		if (form.getLocalContext().getNumAppointmentsSelectedIsNotNull() && 
			form.getLocalContext().getNumAppointmentsSelected().intValue() == 1)
		{
			form.getGlobalContext().CcoSched.ClinicView.setAppointmentHeaderID(((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_head_id);
			form.getGlobalContext().CcoSched.ClinicView.setStatus(((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat);

		}
		else // There are other nodes selected.
		{
			// The node should have the same parent, and it should have the same type of status.
			if (((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_head_id.equals(form.getGlobalContext().CcoSched.ClinicView.getAppointmentHeaderID())) 
			{
				if ((form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2191")) || // DNA
					(form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2190")) || // Cancelled
					(form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2193"))) // Cancelled
				{
					if ((((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat.equals("-2191") == false) && // DNA
						(((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat.equals("-2190") == false) && // Cancelled
						(((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat.equals("-2193") == false)) // Cancelled
					{
						node.setChecked(false);
						//onMainTreeTreeViewCheck(node);
						parentSelectable = false;
						engine.showMessage("This appointment cannot be selected due to current selections."); //WDEV-18762
					}
				}
				else if (form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2192")) //Attended
				{
					if (((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat.equals("-2192") == false) //Attended
					{
						node.setChecked(false);
						//onMainTreeTreeViewCheck(node);
						parentSelectable = false;
						engine.showMessage("This appointment cannot be selected due to current selections."); //WDEV-18762
					}
				}
				else if ((form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2195")) || //Moved
					(form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2194")) || //Rebooked
					(form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2189"))) //Open
				{
					if ((((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat.equals("-2195") == false) && //Moved
						(((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat.equals("-2194") == false) && //Rebooked
						(((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat.equals("-2189") == false)) //Open
					{
						node.setChecked(false);
						//onMainTreeTreeViewCheck(node);
						parentSelectable = false;
						engine.showMessage("This appointment cannot be selected due to current selections."); //WDEV-18762
					}
				}

			}
			else
			{
				node.setChecked(false);
				//onMainTreeTreeViewCheck(node);
				parentSelectable = false;
				engine.showMessage("This appointment cannot be selected due to current selections."); //WDEV-18762
			}
		}

		//10/06/2003 - If a child was selected - select his parent 
		//Check to see if the parent was selected before or eligible for selection
		if(parentSelectable && (form.MainTree().getValue() == null || form.MainTree().getValue().equals(node.getParent().getValue()) == false))
		{
			form.MainTree().setValue(node.getParent().getValue());
			onMainTreeTreeViewSelectionChanged(node.getParent());
		}
		
		updateControlsState();
		
		//28/02/2005 - If the Appointment Status="-2199" then disable all buttons
		if (form.getLocalContext().getNumAppointmentsSelectedIsNotNull()		&& 
			form.getLocalContext().getNumAppointmentsSelected().intValue() == 1 && 
			form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2199"))
			enableButtons(false);
	}
	private void HowManySelectedNodes(TreeNodeCollection nodes)
	{
		for (int i = 0; i < nodes.size(); i++)
		{
			TreeNode n = nodes.get(i);
			
			if (n.isChecked() == true)
			{
				form.getLocalContext().setNumAppointmentsSelected(new Integer(form.getLocalContext().getNumAppointmentsSelected().intValue() + 1));
			}

			HowManySelectedNodes(n.getNodes());
		}
	}
	protected void onChangeTimeClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//Get for sd_appt
		if(form.getLocalContext().getSd_apptClientIsNotNull())
		{
			Sd_appt apptDto = (Sd_appt) domain.getDTOInstance(Sd_appt.class);
			apptDto.Filter.clear();
			apptDto.Filter.Appt_head_id = ((Sd_appt.Sd_apptRecord)(form.getLocalContext().getSd_apptClient())).Appt_head_id;
			Result result = apptDto.get();
			if (result != null)
			{
				showMessage(result.getMessage());
				return;
			}

			//Parent
			form.getGlobalContext().CcoSched.PatientAppointments.setParent(apptDto);
			SetAppointmentsArrayList();

			engine.open(form.getForms().CcoSched.ChangeAppointmentsTimes);
		}
	}
	
	private void SetAppointmentsArrayList()
	{
		//Children - an Array List
		ArrayList dtoClientArrayList = new ArrayList();
		if(NodesSelectable())
		{
			boolean selectChecked = ChangeTimeNodeSelected();
			
			for(int i=0; i<form.MainTree().getSelectedNode().getNodes().size(); i++)
			//foreach (TreeNode node in Form.MainTree.SelectedNode.Nodes)
			{
				TreeNode node = form.MainTree().getSelectedNode().getNodes().get(i);
				//20/06/2003 - Kevin's requirement - Pass only the selected appointments (checked ones)
				//if any othewise all (Open+Rebooked+Moved)
				if(selectChecked && !node.isChecked())
					continue;

				String apptStatus = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_stat;

				if(apptStatus.equals("-2189")  ||//Open
					apptStatus.equals("-2194") ||//Rebooked
					apptStatus.equals("-2195"))  //Moved
				{
					dtoClientArrayList.add((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue());
				}
			}
		}

		form.getGlobalContext().CcoSched.PatientAppointments.setChildren(dtoClientArrayList);
	}
	
	private void showMessage(String message)
	{
		engine.showMessage(message);
	}
	
	private TreeNode NodeSelected(TreeNodeCollection nodes)
	{
		TreeNode n;
		for(int i=0; i<nodes.size(); i++)
		{
			n = nodes.get(i);
			if (n.isChecked())
				return n;

			TreeNode tn =  NodeSelected(n.getNodes());
			if (tn != null) return tn;
		}
		return null;
	}
	
	private ArrayList NodesSelected(TreeNodeCollection nodes)
	{ 
		// There are only TWO levels in the tree.
		ArrayList nodelist = new ArrayList();
		TreeNode m,n;
		//28/02/2005 - Don't select the records having Status = -2199
		for(int i=0; i<nodes.size(); i++)
		{
			n = nodes.get(i);
			if (n.isChecked() && !((Sd_appt_dts.Sd_appt_dtsRecord)n.getValue()).Appt_stat.equals("-2199"))
				nodelist.add(((Sd_appt_dts.Sd_appt_dtsRecord)n.getValue()).Appt_id);

			//foreach (TreeNode m in n.Nodes)
			for(int j=0; j<n.getNodes().size(); j++)
			{
				m = n.getNodes().get(j);
				if (m.isChecked() && !((Sd_appt_dts.Sd_appt_dtsRecord)m.getValue()).Appt_stat.equals("-2199"))
					nodelist.add(((Sd_appt_dts.Sd_appt_dtsRecord)m.getValue()).Appt_id);
			}
		}			
		return nodelist;
	}
	
	private int countNodesSelected()
	{
		int count = 0;
		for(int i=0; i<form.MainTree().getSelectedNode().getNodes().size(); i++)
		{
			if(form.MainTree().getSelectedNode().getNodes().get(i).isChecked())
				count++;
		}

		return count;
	}
	
	private String ParentNode(TreeNode node)
	{
		TreeNode nodeParent, nodeSon;
		for(int i=0; i<form.MainTree().getNodes().size(); i++)
		{
			nodeParent = form.MainTree().getNodes().get(i);
			for(int j=0; j<nodeParent.getNodes().size(); j++)
			{
				nodeSon = nodeParent.getNodes().get(j);
				if (nodeSon.equals(node)) return (nodeParent.getValue() instanceof Sd_appt.Sd_apptRecord?((Sd_appt.Sd_apptRecord)nodeParent.getValue()).Appt_head_id:"");
			}
		}
		return ((Sd_appt.Sd_apptRecord)form.MainTree().getNodes().get(0).getValue()).Appt_head_id;
	}
	
//	ICCO777 - if only one appt selected get the info of the selected node 
	//		  - if more than one appt selected get the root details
	private String GetCancelApptTitle()
	{
		if(form.MainTree().getSelectedNode() != null)
		{
			if(countNodesSelected() > 1)
			{
				return form.MainTree().getSelectedNode().getText();
			}
			else
			{
				TreeNode node;
				for(int i=0; i<form.MainTree().getSelectedNode().getNodes().size(); i++)
				{
					node = form.MainTree().getSelectedNode().getNodes().get(i);
					if(node.isChecked())
						return node.getText();
				}
			}
		}
		
		return "";
	}
	private void enableButtons(boolean bValue)
	{
		form.btnCancelAppt().setEnabled(bValue);
		form.ChangeTime().setEnabled(bValue);
		form.btnMove().setEnabled(bValue);
		form.btnRebook().setEnabled(bValue);
		form.Transport().setEnabled(bValue);
		form.TransportDetails().setEnabled(bValue);
	}
	
	private String getApptHeadIdCollection(Sd_appt appointment)
	{
		StringBuilder apptId = new StringBuilder();

		for (int i = 0; i < appointment.DataCollection.count(); i++)
		{
			if (i > 0)
				apptId.append("||");
			Sd_appt.Sd_apptRecord ap = appointment.DataCollection.get(i);
			apptId.append(ap.Appt_head_id);
		}

		return apptId.toString();
	}

	@Override
	protected void onBtnDisplayRebookingsClick() throws PresentationLogicException
	{
		String appt_head_id_Coll = getApptHeadIdCollFromTree();
		if(appt_head_id_Coll == null || appt_head_id_Coll.length() == 0)
			return;
		
		Sd_appt_hist sd_appt_histDto = (Sd_appt_hist)domain.getDTOInstance(Sd_appt_hist.class);
		sd_appt_histDto.Filter.clear();
		sd_appt_histDto.Filter.Appt_head_id = appt_head_id_Coll;
		sd_appt_histDto.Filter.Hist_type = "-2194";//Rebooked
		
		Result result = sd_appt_histDto.list();

		if(result != null)
		{
			engine.showMessage(result.getMessage());
			return;
		}

		//Populate the grid
		for (int i = 0; i < sd_appt_histDto.DataCollection.count(); i++)
		{
			TreeNode node = getSecondLevelParentNode(sd_appt_histDto.DataCollection.get(i).Appt_head_id, sd_appt_histDto.DataCollection.get(i).Appt_id);
			node.setExpanded(false);
			node.getNodes().clear();
			node.getNodes().add(null, "");
		}
	}

	private String getApptHeadIdCollFromTree()
	{
		StringBuilder ids = new StringBuilder(); 
		for (int i = 0; i < form.MainTree().getNodes().size(); i++)
		{
			Object value = form.MainTree().getNodes().get(i).getValue();
			if(value instanceof Sd_appt.Sd_apptRecord)
			{
				if(i > 0)
					ids.append("||");
				ids.append(((Sd_appt.Sd_apptRecord)value).Appt_head_id);
			}
		}
		
		return ids.toString();
	}
	
	TreeNode getSecondLevelParentNode(String appt_head_id, String appt_id)
	{
		//Look for the same
		for (int i = 0; i < form.MainTree().getNodes().size(); i++)
		{
			for (int j = 0; j < form.MainTree().getNodes().get(i).getNodes().size(); j++)
			{
				TreeNode node = form.MainTree().getNodes().get(i).getNodes().get(j);
				if(node.getValue() instanceof Sd_appt_dts.Sd_appt_dtsRecord)
				{
					if(((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_head_id.equals(appt_head_id) && 
							((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_id.equals(appt_id))
						return node;
				}
			}
		}
		return null;
	}

	@Override
	protected void onMainTreeTreeViewNodeExpandCollapse(TreeNode node) throws PresentationLogicException
	{
		//Check the second level node...
		if(node.getParent() != null && node.getParent().getParent() == null)
		{
			//TODO - optimise that
			//Check if expanded and has child nodes
			if(node.isExpanded() && node.getNodes().size() > 0 && node.getNodes().get(0).getValue() == null)
			{
				if(node.getValue() instanceof Sd_appt_dts.Sd_appt_dtsRecord)
				{
					node.getNodes().clear();
					
					Sd_appt_hist sd_appt_histDto = (Sd_appt_hist)domain.getDTOInstance(Sd_appt_hist.class);
					sd_appt_histDto.Filter.clear();
					sd_appt_histDto.Filter.Appt_head_id = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_head_id;
					sd_appt_histDto.Filter.Appt_id = ((Sd_appt_dts.Sd_appt_dtsRecord)node.getValue()).Appt_id;
					
					Result result = sd_appt_histDto.list();

					if(result != null)
					{
						engine.showMessage(result.getMessage());
						return;
					}

					for (int i = 0; i < sd_appt_histDto.DataCollection.count(); i++)
					{
						Sd_appt_histRecord sd_appt_histRecord = sd_appt_histDto.DataCollection.get(i);
						
						StringBuilder text = new StringBuilder();
						Date dt = getDateFromString(sd_appt_histRecord.Hist_cdate);
						text.append(dt == null ? "" : "History Date: " + dt.toString(DateFormat.STANDARD));
						if(text.length() > 0)
							text.append(", ");
						text.append(sd_appt_histRecord.Hist_typetxt);
						if(text.length() > 0)
							text.append(", ");
						dt = getDateFromString(sd_appt_histRecord.Hist_dt);
						text.append(dt == null?"":"Original Appointment Date: " + dt.toString(DateFormat.STANDARD));
						boolean haveReason = sd_appt_histRecord.Hist_reastxt != null && sd_appt_histRecord.Hist_reastxt.length() > 0;
						if (haveReason)
							text.append(", ");
						text.append(haveReason ? "Reason: " + sd_appt_histRecord.Hist_reastxt : "");
						
						TreeNode childNode = node.getNodes().add(sd_appt_histDto.DataCollection.get(i), text.toString());
						childNode.setCheckBoxVisible(false);
					}
				}
			}
		}
		updateControlsState();
	}
	
	private Date getDateFromString(String date)
	{
		if (date != null && date.equals("") == false)
		{
			try
			{
				return new Date(date, DateFormat.ISO);
			}
			catch(ParseException e){}
		}		
		return null;
	}
}
