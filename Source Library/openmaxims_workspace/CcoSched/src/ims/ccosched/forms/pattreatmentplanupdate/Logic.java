//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ccosched.forms.pattreatmentplanupdate;

import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.PatTreatmentPlanVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.oncology.vo.PrimaryTumourDetailsVo;
import ims.oncology.vo.lookups.TreatmentGroupSite;
import ims.oncology.vo.lookups.TreatmentGroupSiteCollection;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	public final static String newLine = System.getProperty("line.separator");
	static boolean bSelect = false;
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException  
	{

		try {
			initialise();
		} catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException(e.getMessage());
		}
		
		if (form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanUpdateMode().intValue() == 0)
		{
			form.setMode(FormMode.VIEW);
		}
		else
		{
			form.setMode(FormMode.EDIT);
		}

		PopulatePatientDetails();
		LoadEpisodeOfCareCombo();  // WDEV-13261

		open();
		
	}
	
	private void open() 
	{
		if (GetUpdateMode())
		{
			form.cmbEpisode().setEnabled(false);
					
			//wdev-?????
			if (form.getGlobalContext().getPatTreatmentPlanIsNotNull()
				&& form.getGlobalContext().getPatTreatmentPlan().getID_PatTreatmentPlanIsNotNull())
				form.getLocalContext().setPatTreatmentPlanVo(domain.getTreatmentPlan(form.getGlobalContext().getPatTreatmentPlan()));
		}
		else
		{
			form.chkActive().setValue(true);
		}
        
		//LoadTrSiteConfig();	
		loadGroupSiteGrid();
		PopulateScreenFromData();
		
	}

	private void initialise() throws DomainInterfaceException 
	{
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanInsertedId("");

		FillCombos();

		form.getLocalContext().setSelectedTumourSite(null);
		form.getLocalContext().setSelectedTumourGroup(null);
		form.getLocalContext().setSelectedHistology(null);
	}


	private void PopulateScreenFromData() 
	{
		if(form.getLocalContext().getPatTreatmentPlanVoIsNotNull())
		{
			form.dtDateCreated().setValue(form.getLocalContext().getPatTreatmentPlanVo().getSysInfoIsNotNull() && form.getLocalContext().getPatTreatmentPlanVo().getSysInfo().getCreationDateTime() != null ? form.getLocalContext().getPatTreatmentPlanVo().getSysInfo().getCreationDateTime().toString() : null);
			form.cmbEpisode().setValue(form.getLocalContext().getPatTreatmentPlanVo().getEpisode());
			
			//WDEV-14326
			if (form.cmbEpisode().getValue()==null)
			{	
				if (form.getLocalContext().getPatTreatmentPlanVo().getEpisode()==null)
					return;
				
				EpisodeofCareShortVo episVo = domain.getEpisodeOfCare(form.getLocalContext().getPatTreatmentPlanVo().getEpisode());
								
				String specialty="";
				if (episVo.getSpecialtyIsNotNull())
					specialty  = episVo.getSpecialty().getText();
				String consultant = "";
				if (episVo.getResponsibleHCPIsNotNull())
					consultant = episVo.getResponsibleHCP().getIMosName();
				String startDate = episVo.getStartDate().toString();
				
				String endDate="";
				if (episVo.getEndDateIsNotNull())
					endDate = episVo.getEndDate().toString();
				
				String EpisodeText = specialty + " - " +  consultant + " - " + startDate + " - " + endDate;
	
				form.cmbEpisode().newRow(episVo, EpisodeText);
				form.cmbEpisode().setValue(episVo);
			}
			//end WDEV-14326
			
			form.cmbConsultant().setValue(form.getLocalContext().getPatTreatmentPlanVo().getConsultant());
			form.cmbTreatmentIntent().setValue(form.getLocalContext().getPatTreatmentPlanVo().getTreatmentIntent());
			form.cmbSeenAt().setValue(form.getLocalContext().getPatTreatmentPlanVo().getSeenLocation());
			form.cmbWrtSurgery().setValue(form.getLocalContext().getPatTreatmentPlanVo().getSurgeryRequired());
			form.cmbPatientStatus().setValue(form.getLocalContext().getPatTreatmentPlanVo().getPatientStatus());
			form.chkActive().setValue(form.getLocalContext().getPatTreatmentPlanVo().getActiveStatus());
			form.dtDateSeen().setValue(form.getLocalContext().getPatTreatmentPlanVo().getDateSeen());
			form.dtDateDecisionToTreat().setValue(form.getLocalContext().getPatTreatmentPlanVo().getDecisionToTreat());
			form.dteECADDate().setValue(form.getLocalContext().getPatTreatmentPlanVo().getEcad_date());
			form.edtComment().setValue(form.getLocalContext().getPatTreatmentPlanVo().getTreatmentplanComment());
			form.edtTumourSite().setValue(form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourSiteIsNotNull() ? form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourSite().getName() : "");
			form.edtTumourGroup().setValue(form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourGroupIsNotNull() ? form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourGroup().getGroupName() : "");
			form.edtHistology().setValue(form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourHistologyIsNotNull() ? form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourHistology().getHistologyDescription() :"");
			form.getLocalContext().setSelectedTumourSite(form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourSiteIsNotNull() ? form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourSite() : null);
			form.getLocalContext().setSelectedTumourGroup(form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourGroupIsNotNull() ? form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourGroup() : null);
			form.getLocalContext().setSelectedHistology(form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourHistologyIsNotNull() ? form.getLocalContext().getPatTreatmentPlanVo().getPrimaryTumourHistology() : null);
			
			PrimaryTumourDetailsVo voPTD = domain.getTumourDetails(form.cmbEpisode().getValue());
			if (voPTD != null)
			{
				form.edtTumourSite().setValue(voPTD.getTumourSiteIsNotNull() ? voPTD.getTumourSite().getName() : "");
				form.edtTumourGroup().setValue(voPTD.getTumourGroupIsNotNull() ? voPTD.getTumourGroup().getGroupName() : "");
				form.edtHistology().setValue(voPTD.getTumourHistologyIsNotNull() ? voPTD.getTumourHistology().getHistologyDescription() : "");

				form.getLocalContext().setSelectedTumourSite(voPTD.getTumourSiteIsNotNull() ? voPTD.getTumourSite() : null);
				form.getLocalContext().setSelectedTumourGroup(voPTD.getTumourGroupIsNotNull() ? voPTD.getTumourGroup() : null);
				form.getLocalContext().setSelectedHistology(voPTD.getTumourHistologyIsNotNull() ? voPTD.getTumourHistology() : null);
			}
		}
		
		
	}

	protected void OnOk() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onCancelClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void OnBtnSave() throws PresentationLogicException 
	{
		if (validateData())
		{
			if (save(populateDataFromScreen()))
				engine.close(DialogResult.OK);
		}
	}
	
	private boolean validateData() 
	{
		List<String> errors = new ArrayList<String>();

		Date dtToday = new Date();
		if (form.dtDateSeen().getValue()!=null)
		{
			Date dt = new Date(form.dtDateSeen().getValue());

			if (dt.isGreaterThan(dtToday))
				errors.add("Date Seen cannot be set to a date greater than today.");
		}
		if (form.dtDateDecisionToTreat().getValue()!=null && form.dtDateDecisionToTreat().getValue().isGreaterThan(dtToday))
			errors.add("Descision to treat date cannot be greater than today.");
		
		if (form.cmbEpisode().getValue() == null)   //WDEV-13998   
			errors.add("Please select an Episode.");
		
		if(form.cmbSeenAt().getValue() == null)   	//WDEV-17012
			errors.add("Please select Seen at.");
		
		if(form.cmbPatientStatus().getValue() == null)   	//wdev-14114
			errors.add("Please select a Patient Status.");	//wdev-14114	
		
		if (form.cmbConsultant().getValue() == null)
			errors.add("Please select a Consultant.");
		if (form.cmbTreatmentIntent().getValue() == null)
			errors.add("Please select a Treatment Intent.");
		if (form.dtDateSeen().getValue() == null)
			errors.add("Please select Date Seen.");
		if (form.dtDateDecisionToTreat().getValue() == null)
			errors.add("Please select Date Decision to Treat.");
		if (form.getLocalContext().getPatTreatmentPlanVoIsNotNull()
			&& form.getLocalContext().getPatTreatmentPlanVo().getEcad_dateIsNotNull()
			&& form.dteECADDate().getValue() == null)
			errors.add("Please enter 'Earliest Clinically Appropriate Date'.");
		
		if (errors != null && errors.size() >0)
		{
			engine.showErrors( errors.toArray(new String[0]));
			return false;
		}

		return true;
	}

	private boolean save(PatTreatmentPlanVo vo) throws PresentationLogicException 
	{
		if (vo != null)
		{
			if (vo.getRkey() == null 
				&& form.dteECADDate().getValue() != null)
			{
				engine.showMessage("There is no Referral for this Patient. 'Earliest Clinically Appropriate Date' cannot be saved.");
				return false;
			}
			
			//save it
			String[] arrErrors = vo.validate();
			if(arrErrors != null)
			{
				engine.showErrors("Validation Errors", arrErrors);
				return false;
			}
			
			try
			{
				vo = domain.saveTreatmentPlan(vo, form.dteECADDate().getValue());
				form.getGlobalContext().setPatTreatmentPlan(vo);
				return true;
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return false;
			} 
			catch(UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
			}
		}
		
		return false;
	}

	private PatTreatmentPlanVo populateDataFromScreen() throws PresentationLogicException
	{
		//WDEV-6551 System allows entry of 'Date Seen' & 'DDT' later than 'Creation Date'
		
		PatTreatmentPlanVo vo = form.getLocalContext().getPatTreatmentPlanVo();
		if (vo == null)		
			vo = new PatTreatmentPlanVo();

		vo.setEpisode(form.cmbEpisode().getValue());
		vo.setPatient(form.getGlobalContext().Core.getPatientShort());
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
			vo.setPkey(new Integer(form.getGlobalContext().Core.getPatientShort().getPkey().getValue()));
			
		vo.setConsultant(form.cmbConsultant().getValue());
		vo.setTreatmentIntent(form.cmbTreatmentIntent().getValue());
		vo.setSeenLocation(form.cmbSeenAt().getValue());
		vo.setSurgeryRequired(form.cmbWrtSurgery().getValue());

		vo.setPatientStatus(form.cmbPatientStatus().getValue());

		vo.setActiveStatus(form.chkActive().getValue());

		vo.setDateSeen(form.dtDateSeen().getValue());
		vo.setDecisionToTreat(form.dtDateDecisionToTreat().getValue());
		//vo.setEcad_date(form.dteECADDate().getValue()); ecad date should only be populated in the Domain call WDEV-14069

		vo.setTreatmentSites(getSelectedSites(vo));
		
		vo.setTreatmentplanComment(form.edtComment().getValue());

		vo.setPrimaryTumourSite(form.getLocalContext().getSelectedTumourSite());
		vo.setPrimaryTumourGroup(form.getLocalContext().getSelectedTumourGroup());
		vo.setPrimaryTumourHistology(form.getLocalContext().getSelectedHistology());

		if (vo.getRkey() == null
			&& form.cmbEpisode().getValue() != null )
			vo.setRkey(domain.getRKEYForEpisode(form.cmbEpisode().getValue()));
		
		return vo;
	}

	private TreatmentGroupSiteCollection getSelectedSites(PatTreatmentPlanLiteVo vo) 
	{
		TreatmentGroupSiteCollection voColl = new TreatmentGroupSiteCollection();
			
		for(int i=0; i<form.treeTreatmentSite().getNodes().size(); i++)
		{
			TreeNode groupNode = form.treeTreatmentSite().getNodes().get(i);

			bSelect = false;
			HasChildrenSelected(groupNode);

			if(groupNode.isChecked()||bSelect)
			{
				LookupInstVo voInst = (LookupInstVo)groupNode.getValue();
				TreatmentGroupSite type = new TreatmentGroupSite(voInst.getId(), voInst.getText(), voInst.isActive(), null, voInst.getImage(),voInst.getColor(), voInst.getOrder());

				voColl.add(type);
			}

			//add any selected children recurse
			for(int j=0; j<groupNode.getNodes().size(); j++)
				AddItem(groupNode, groupNode.getNodes().get(j), voColl);
		}
		return voColl;
	}

	protected void SelChangeGroup() throws PresentationLogicException 
	{
		//Obsolete method
	}
	
	protected void SelChangeEpisode() throws PresentationLogicException 
	{
		PrimaryTumourDetailsVo voPTD = domain.getTumourDetails(form.cmbEpisode().getValue());
		if(voPTD != null)
		{
			form.edtTumourSite().setValue(voPTD.getTumourSiteIsNotNull() ? voPTD.getTumourSite().getName() : "");
			form.edtTumourGroup().setValue(voPTD.getTumourGroupIsNotNull() ? voPTD.getTumourGroup().getGroupName() : "");
			form.edtHistology().setValue(voPTD.getTumourHistologyIsNotNull() ? voPTD.getTumourHistology().getHistologyDescription() : "");

			form.getLocalContext().setSelectedTumourSite(voPTD.getTumourSiteIsNotNull() ? voPTD.getTumourSite() : null);
			form.getLocalContext().setSelectedTumourGroup(voPTD.getTumourGroupIsNotNull() ? voPTD.getTumourGroup() : null);
			form.getLocalContext().setSelectedHistology(voPTD.getTumourHistologyIsNotNull() ? voPTD.getTumourHistology() : null);
		}
		else
		{
			form.edtTumourSite().setValue("");
			form.edtTumourGroup().setValue("");
			form.edtHistology().setValue("");

			form.getLocalContext().setSelectedTumourSite(null);
			form.getLocalContext().setSelectedTumourGroup(null);
			form.getLocalContext().setSelectedHistology(null);
		}
	}
	
	private boolean GetUpdateMode()
	{
		if(form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanUpdateScreenMode() != null)
			return form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanUpdateScreenMode().booleanValue();

		return false;
	}
	
	
	private void FillCombos() throws DomainInterfaceException
	{
		HcpLiteVoCollection hcpVoColl = domain.listConsultants();
		//wdev-13667
		if(hcpVoColl != null)
		{
			for (int i = 0; i < hcpVoColl.size(); ++i)
			{
				HcpLiteVo consultant = hcpVoColl.get(i);
				if((consultant.getIsActiveIsNotNull() && consultant.getIsActive()) || 
					//(treatmentPlanDto != null && treatmentPlanDto.Chcp.equals(consultant.getID_Hcp())))
					(form.getGlobalContext().getPatTreatmentPlanIsNotNull() && form.getGlobalContext().getPatTreatmentPlan().equals(consultant)))
				{
					form.cmbConsultant().newRow(consultant,(consultant.getName().getSurnameIsNotNull() ? consultant.getName().getSurname() : "")  + ", " +(consultant.getName().getForenameIsNotNull()?consultant.getName().getForename():"") );//WDEV-14526
				}
					
			}
		}
/*		HcpLiteVoCollection hcpVoColl = domain.listConsultants();
		
		if(hcpVoColl != null)
		{
			//hcpVoColl.sort(new ConsultatntNameComparator(SortOrder.ASCENDING)); //wdev-13961  //WDEV-14301
			for (int i = 0; i < hcpVoColl.size(); ++i)
			{
				HcpLiteVo consultant = hcpVoColl.get(i);
				if((consultant.getIsActiveIsNotNull() && consultant.getIsActive()) 
					|| (form.getGlobalContext().getPatTreatmentPlanIsNotNull() && form.getGlobalContext().getPatTreatmentPlan().equals(consultant)))
				form.cmbConsultant().newRow(consultant, consultant.getIMosName());
			}
		}
*/
		//SeenAt
		this.form.cmbSeenAt().clear();
		ims.ccosched.vo.lookups.SeenAtCollection seenatlookupCollection = domain.loadSeenAtLookup();
		for(int x = 0; x < seenatlookupCollection.size(); x++)
		{
			//WDEV-17011
			if (seenatlookupCollection.get(x).isActive())
			{
				this.form.cmbSeenAt().newRow(seenatlookupCollection.get(x), seenatlookupCollection.get(x).getText(), seenatlookupCollection.get(x).getImage(), seenatlookupCollection.get(x).getTextColor());
			}
		}
		
		//Patient Status
		this.form.cmbPatientStatus().clear();
		ims.ccosched.vo.lookups.StatusCollection patStatlookupCollection = domain.loadPatientStatusLookup();
		for(int x = 0; x < patStatlookupCollection.size(); x++)
		{
			this.form.cmbPatientStatus().newRow(patStatlookupCollection.get(x), patStatlookupCollection.get(x).getText(), patStatlookupCollection.get(x).getImage(), patStatlookupCollection.get(x).getTextColor());
		}

		//Treatment Intent
		this.form.cmbTreatmentIntent().clear();
		ims.ccosched.vo.lookups.TreatmentIntentCollection treatIntentlookupCollection = domain.loadTreatmentIntent();
		for(int x = 0; x < treatIntentlookupCollection.size(); x++)
		{
			this.form.cmbTreatmentIntent().newRow(treatIntentlookupCollection.get(x), treatIntentlookupCollection.get(x).getText(), treatIntentlookupCollection.get(x).getImage(), treatIntentlookupCollection.get(x).getTextColor());
		}

		//Surgery Required
		//Treatment Intent
		this.form.cmbWrtSurgery().clear();
		ims.oncology.vo.lookups.SurgeryRequiredCollection surgeryReqlookupCollection = domain.loadSurgeryRequired();
		for(int x = 0; x < surgeryReqlookupCollection.size(); x++)
		{
			this.form.cmbWrtSurgery().newRow(surgeryReqlookupCollection.get(x), surgeryReqlookupCollection.get(x).getText(), surgeryReqlookupCollection.get(x).getImage(), surgeryReqlookupCollection.get(x).getTextColor());
		}
		
		// WDEV-13261
		// load organisations for SeenAt combo
		//start http://jira/browse/WDEV-13934
//		OrganisationLiteVoCollection orgLiteVoColl = domain.listSeenAtLocations();
//		if(orgLiteVoColl != null)
//		{
//			for (int i = 0; i < orgLiteVoColl.size(); ++i)
//			{
//				OrganisationLiteVo org = orgLiteVoColl.get(i);
//				if((org.getIsActiveIsNotNull() && org.getIsActive())) 
//					form.cmbSeenAt().newRow(org, org.getName());
//			}
//		}
		//end http://jira/browse/WDEV-13934		
	}
	
	/** WDEV-13261
	 *  Load the local Episode of CareList into the combo
	 *  If the global context is set, default to that value 
	 */
	private void LoadEpisodeOfCareCombo()
	{
		// WDEV-13261
		PatientShort patVo = form.getGlobalContext().Core.getPatientShort();

		EpisodeofCareShortVoCollection episColl = domain.listEpisodesForPatient(patVo);
		
		if(episColl != null)
		{
			for(int x = 0; x < episColl.size(); x++)
			{
				EpisodeofCareShortVo episVo = episColl.get(x);
				String specialty="";
				if (episVo.getSpecialtyIsNotNull())
					specialty  = episVo.getSpecialty().getText();
				String consultant = "";
				if (episVo.getResponsibleHCPIsNotNull())
					consultant = episVo.getResponsibleHCP().getIMosName();
				String startDate = episVo.getStartDate().toString();
				
				String endDate="";
				if (episVo.getEndDateIsNotNull())
					endDate = episVo.getEndDate().toString();
				
				String EpisodeText = specialty + " - " +  consultant + " - " + startDate + " - " + endDate;
	
				form.cmbEpisode().newRow(episVo, EpisodeText);
				
			}
		}
		
		if (form.getGlobalContext().Core.getEpisodeofCareShort() != null)
			form.cmbEpisode().setValue(form.getGlobalContext().Core.getEpisodeofCareShort());
		
	}

	private void HasChildrenSelected(TreeNode node)
	{		
		if (node != null)
		{
			if (node.getNodes().size() == 0 && node.isChecked())
				bSelect = true;
			else
			{
				for(int i=0; i<node.getNodes().size(); i++)
				{
					TreeNode child  = node.getNodes().get(i);
					HasChildrenSelected(child);
				}
			}
		}
		else		
			return;
	}
	
	private void AddItem(TreeNode GroupNode, TreeNode parentNode, TreatmentGroupSiteCollection voColl)	
	{
		if(parentNode.getNodes().size() == 0)
		{
			if(parentNode.isChecked() == true)
			{
				LookupInstVo voInst = (LookupInstVo)parentNode.getValue();
				TreatmentGroupSite type = new TreatmentGroupSite(voInst.getId(), voInst.getText(), voInst.isActive(), null, voInst.getImage(),voInst.getColor(), voInst.getOrder());
				voColl.add(voInst);
			}
		}
		else		
		{
			bSelect = false;
			HasChildrenSelected(parentNode);
			
			if(parentNode.isChecked() && !bSelect)
			{
				LookupInstVo voInst = (LookupInstVo)parentNode.getValue();
				TreatmentGroupSite type = new TreatmentGroupSite(voInst.getId(), voInst.getText(), voInst.isActive(), null, voInst.getImage(),voInst.getColor(), voInst.getOrder());

				voColl.add(type);
			}

			for(int i=0; i<parentNode.getNodes().size(); i++)
				AddItem(GroupNode, parentNode.getNodes().get(i), voColl);
		}
	}
	
	private void loadGroupSiteGrid() 
	{
		LookupInstanceCollection coll = domain.loadGroupSiteLookup(domain.getLookupService()) != null ? domain.loadGroupSiteLookup(domain.getLookupService()) : null; //wdev-13961 
		
		if (coll == null)
			return;

		LookupInstVo[] roots = coll.getRoots();
		for (int k = 0; k < roots.length; k++)
		{
			LookupInstVo inst = roots[k];
			boolean bShowTick = false;
			TreatmentGroupSite tgs = new TreatmentGroupSite(inst.getId(), inst.getText(), inst.isActive(), null, inst.getImage(),inst.getColor(), inst.getOrder());
			
			bShowTick = showTick(tgs);

			if (inst.isActive() 
					|| bShowTick ) // bShowTick - may even show a Group/Site that is marked as inactive - but was instantiated at some stage.
			{
				TreeNode parentNode = form.treeTreatmentSite().getNodes().add(inst,inst.getText());

				parentNode.setCheckBoxVisible(true);

				parentNode.setChecked(bShowTick);

				addChildInstances(parentNode, inst);
			}

		}		
	}

	private void addChildInstances(TreeNode parentNode, LookupInstVo inst)
	{
		ArrayList<LookupInstVo> coll1 = inst.getChildInstances();

		TreatmentGroupSite type = null;
		for(int j=0 ; j < coll1.size() ; j++)
		{
			type = new TreatmentGroupSite(coll1.get(j).getId(), coll1.get(j).getText(), coll1.get(j).isActive(), null, coll1.get(j).getImage(),coll1.get(j).getColor(), coll1.get(j).getOrder());
			boolean bShowChildTick = false;
			bShowChildTick = showTick(type);

			if (type.isActive() 
				|| bShowChildTick ) 
			{
				TreeNode node = parentNode.getNodes().add(type, type.getText());
				
				node.setCheckBoxVisible(coll1.get(j).getChildInstances() != null
						&& coll1.get(j).getChildInstances().size() > 0 ? false : true);
				
				node.setChecked(bShowChildTick);
				
				if (coll1.get(j).getChildInstances() != null
					&& coll1.get(j).getChildInstances().size() > 0)
				{
					for (int i = 0 ; i < coll1.get(j).getChildInstances().size() ; i++)
						type.addChild(coll1.get(j).getChildInstances().get(i));
					addChildInstances(node, type);
				}

			}
		}
	}

	private boolean showTick(TreatmentGroupSite item)
	{
		if(form.getLocalContext().getPatTreatmentPlanVoIsNotNull())
		{
			for (int i = 0 ; form.getLocalContext().getPatTreatmentPlanVo().getTreatmentSitesIsNotNull() && i < form.getLocalContext().getPatTreatmentPlanVo().getTreatmentSites().size() ; i++)
			{
				if (form.getLocalContext().getPatTreatmentPlanVo().getTreatmentSites().get(i).equals(item))
					return true;
			}
		}
		return false;
	}

	private void PopulatePatientDetails()
	{
		PatientShort patVo = form.getGlobalContext().Core.getPatientShort();
		if (patVo != null)
		{
			PatientId patIdVo = patVo.getPatId(PatIdType.HOSPNUM);
			if (patIdVo != null)
				form.PatientHospitalNumber().setValue(patIdVo.getIdValue());
			PersonName patName = patVo.getName();
			if (patName != null)
				form.PatientName().setValue(patName.getForename()+ " " + patName.getSurname());
			
			//Date dt = DateHelper.GetDOBDateFromString(patientDto.Dob);
			if (patVo.getDob() != null)
				form.PatientDOB().setValue(patVo.getDob().toString());
			
			PersonAddress patAddr = patVo.getAddress();
			if (patAddr != null)
			{
				StringBuffer address = new StringBuffer();
				
				if ((patAddr.getAddressBuildingName() !=  null && !patAddr.getAddressBuildingName().equals("")))
				{
					//address with building name
					if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
					{
						address = getHeartsPatientAddress(patAddr);
					}
					else
					{
						address = getPatientAddress(patAddr);
					}
				}
				else
				{
					if (patAddr.getAddressStreet() !=null)
					{
						address.append(patAddr.getAddressStreet()); //WDEV-14855
					}
					if (patAddr.getAddressLocality() != null && !patAddr.getAddressLocality().equals(""))
					{
						address.append(patAddr.getAddressLocality());
						if (!address.toString().equals(""))
							address.append(newLine);
						
						if (patAddr.getAddressPostTown() != null)
						{
							address.append(patAddr.getAddressPostTown());
						}
						
						if (!address.toString().equals(""))
							address.append(newLine);
						
						if (patAddr.getAddressCounty() != null)
						{
							address.append(patAddr.getAddressCounty());	
						}
						
						if (!address.toString().equals(""))
							address.append(newLine);
						
						if (patAddr.getAddressPostCode() != null)
						{
							address.append(patAddr.getAddressPostCode());
						}
					}
					else
					{
						if (patAddr.getAddressPostTown() != null) //WDEV-14855
						{
							address.append(patAddr.getAddressPostTown());
						}
						
						if (!address.toString().equals(""))
							address.append(newLine);
						
						if (patAddr.getAddressCounty() != null) 
						{
						address.append(patAddr.getAddressCounty());
						}
						
						if (!address.toString().equals(""))
							address.append(newLine);
						
						if (patAddr.getAddressPostCode() != null) 
						{
						address.append(patAddr.getAddressPostCode());
						}
					}					
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);

				form.PatientAddress().setValue(address.toString());
			}
		}
	}

	
	/**
	 * WDEV-13556
	 * Function used to build patient address
	 */
	private StringBuffer getPatientAddress(PersonAddress patAddr)
	{
		StringBuffer address = new StringBuffer();
		
		
		if (patAddr.getAddressBuildingName() != null && patAddr.getAddressBuildingName().length() != 0)
		{
			address.append(patAddr.getAddressBuildingName());
		}

		if (patAddr.getAddressStreet() != null && !patAddr.getAddressStreet().equals(""))
		{
			if (patAddr.getAddressLocality() != null && !patAddr.getAddressLocality().equals(""))
			{
				if (!address.toString().equals(""))
					address.append(newLine);
				
				address.append(patAddr.getAddressStreet());

				if (!address.toString().equals(""))
					address.append(newLine);
				
				address.append(patAddr.getAddressLocality());
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressPostTown() != null) //WDEV-14855
				{
					address.append(patAddr.getAddressPostTown());
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressCounty() != null)
				{
					address.append(patAddr.getAddressCounty());
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressPostCode() != null)
				{
					address.append(patAddr.getAddressPostCode());
				}
			}
			else
			{
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				address.append(patAddr.getAddressStreet());
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressPostTown() != null) //WDEV-14855
				{
					address.append(patAddr.getAddressPostTown());
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressCounty() != null) 
				{
					address.append(patAddr.getAddressCounty());
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressPostCode() != null) 
				{
					address.append(patAddr.getAddressPostCode());
				}
			}
			
			if (patAddr.getCounty() != null)
			{
				address.append(patAddr.getCounty());
			}
			
			if (!address.toString().equals(""))
				address.append(newLine);
		}
		else
		{
			if (patAddr.getAddressLocality() != null && !patAddr.getAddressLocality().equals(""))
			{
				if (!address.toString().equals(""))
					address.append(newLine);
				
				address.append(patAddr.getAddressLocality());
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				
				if (patAddr.getAddressPostTown() != null) //WDEV-14855
				{
					address.append(patAddr.getAddressPostTown());
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressCounty() != null)
				{
					address.append(patAddr.getAddressCounty());
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressPostCode() != null)
				{
					address.append(patAddr.getAddressPostCode());
				}
			}
			else
			{
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressPostTown() != null)
				{
				address.append(patAddr.getAddressPostTown());
				}

				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressCounty() != null)
				{
				address.append(patAddr.getAddressCounty());
				}
				
				if (!address.toString().equals(""))
					address.append(newLine);
				
				if (patAddr.getAddressPostCode() != null)
				{
				address.append(patAddr.getAddressPostCode());
				}
			}
		}
		
		
		return address;
	}

	/**
	 * WDEV-13556
	 * Function used to build address to display for HEARTS patients
	 */
	private StringBuffer getHeartsPatientAddress(PersonAddress patAddr)
	{
		StringBuffer address = new StringBuffer();
		
		if (patAddr.getAddressBuildingName() != null && patAddr.getAddressBuildingName().length() != 0)
		{
			address.append(patAddr.getAddressBuildingName());
		}
		
		if (patAddr.getAddressBuildingNumber() != null && patAddr.getAddressBuildingNumber().length() != 0)
		{
			if (!address.toString().equals(""))
				address.append(newLine);
			
			address.append(patAddr.getAddressBuildingNumber());
		}
		
		if (patAddr.getAddressLocality() != null && patAddr.getAddressLocality().length() != 0)
		{
			if (!address.toString().equals(""))
				address.append(newLine);

			address.append(patAddr.getAddressLocality());
		}
		
		if (patAddr.getAddressPostTown() != null && patAddr.getAddressPostTown().length() != 0)
		{
			if (!address.toString().equals(""))
				address.append(newLine);

			address.append(patAddr.getAddressPostTown());
		}
		
		if (patAddr.getAddressPostCode() != null && patAddr.getAddressPostCode().length() != 0)
		{
			if (!address.toString().equals(""))
				address.append(newLine);
			address.append(patAddr.getAddressPostCode());
		}
		
		return address;
	}
	
	@Override
	protected void onDtDateSeenValueChanged() throws PresentationLogicException 
	{
		if(form.dtDateDecisionToTreat().getValue()==null)
			form.dtDateDecisionToTreat().setValue(form.dtDateSeen().getValue());		
	}

	@Override
	protected void onSelChangeEpisode() throws PresentationLogicException 
	{
		SelChangeEpisode();
	}

	@Override
	protected void onTreeTreatmentSiteTreeViewCheck(TreeNode node) throws PresentationLogicException 
	{
		if ( form.getLocalContext().getPatTreatmentPlanVoIsNotNull()
			&& form.getLocalContext().getPatTreatmentPlanVo().getID_PatTreatmentPlanIsNotNull()
			&& form.getLocalContext().getPatTreatmentPlanVo().getActionsIsNotNull()
			&& ! node.isChecked()) //unchecked
		{
			for (int i = 0 ; i < form.getLocalContext().getPatTreatmentPlanVo().getActions().size() ; i++)
			{
				//TODO http://jira/browse/WDEV-13830
				/*
				  if (form.getLocalContext().getPatTreatmentPlanVo().getActions().get(i).getGroupSiteTechIsNotNull())
				 
				{
					for (int x = 0 ; x < form.getLocalContext().getPatTreatmentPlanVo().getActions().get(i).getGroupSiteTech().size() ; x++)
					{
						
						//TODO
						
						
						
						
				//		if (node.getValue() instanceof GroupVo)
				//		{
				//			if (form.getLocalContext().getPatTreatmentPlanVo().getActions().get(i).getGroupSiteTech().get(x).getTreatmentGroupIsNotNull()
				//				&& form.getLocalContext().getPatTreatmentPlanVo().getActions().get(i).getGroupSiteTech().get(x).getTreatmentGroup().compareTo((GroupVo)node.getValue()) == 0)
				//			{
								engine.showMessage(" Cannot remove Treatment Site as an associated Action Details record exists for this Treatment Site.");
				//				break;
				//			}
				//		}

								
								//TODO
				
				//		if (node.getValue() instanceof GroupSiteVo)
				//		{
				//			if (form.getLocalContext().getPatTreatmentPlanVo().getActions().get(i).getGroupSiteTech().get(x).getTreatmentSiteIsNotNull()
				//				&& form.getLocalContext().getPatTreatmentPlanVo().getActions().get(i).getGroupSiteTech().get(x).getTreatmentSite().compareTo((GroupSiteVo)node.getValue()) == 0)
				//			{
								engine.showMessage(" Cannot remove Treatment Site as an associated Action Details record exists for this Treatment Site.");
								node.setChecked(true);
				//				break;
				//			}
				//		}
					}
				}
					
				*/
				
				
			}
		}
	}
	//wdev-13961
	public class ConsultatntNameComparator implements Comparator
	{
		private int direction = 1;
		
		public ConsultatntNameComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ConsultatntNameComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String name1 = null;
			String name2 = null;
			if(ob1 instanceof HcpLiteVo )
			{
				HcpLiteVo ps1 = (HcpLiteVo)ob1;
				name1 = ps1 != null ? ps1.getIMosName():null;
			}
			if(ob2 instanceof HcpLiteVo)
			{
				HcpLiteVo ps2 = (HcpLiteVo)ob2;
				name2 = ps2 != null ? ps2.getIMosName():null;
			}
			if(name1 != null )
				return  name1.compareTo(name2)*direction;
			if(name2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
}
