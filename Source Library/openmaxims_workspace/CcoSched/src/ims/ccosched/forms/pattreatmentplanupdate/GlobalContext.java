//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.pattreatmentplanupdate;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		CcoSched = new CcoSchedContext(context);
		Core = new CoreContext(context);
	}
	public final class CcoSchedContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CcoSchedContext(ims.framework.Context context)
		{
			this.context = context;

			TreatmentPlan = new TreatmentPlanContext(context);
		}
		public final class TreatmentPlanContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private TreatmentPlanContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getTreatmentPlanUpdateModeIsNotNull()
			{
				return !cx_CcoSchedTreatmentPlanTreatmentPlanUpdateMode.getValueIsNull(context);
			}
			public Integer getTreatmentPlanUpdateMode()
			{
				return (Integer)cx_CcoSchedTreatmentPlanTreatmentPlanUpdateMode.getValue(context);
			}
		public void setTreatmentPlanUpdateMode(Integer value)
		{
				cx_CcoSchedTreatmentPlanTreatmentPlanUpdateMode.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedTreatmentPlanTreatmentPlanUpdateMode = new ims.framework.ContextVariable("CcoSched.TreatmentPlan.TreatmentPlanUpdateMode", "_cv_CcoSched.TreatmentPlan.TreatmentPlanUpdateMode");
			public boolean getTreatmentPlanInsertedIdIsNotNull()
			{
				return !cx_CcoSchedTreatmentPlanTreatmentPlanInsertedId.getValueIsNull(context);
			}
			public String getTreatmentPlanInsertedId()
			{
				return (String)cx_CcoSchedTreatmentPlanTreatmentPlanInsertedId.getValue(context);
			}
		public void setTreatmentPlanInsertedId(String value)
		{
				cx_CcoSchedTreatmentPlanTreatmentPlanInsertedId.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedTreatmentPlanTreatmentPlanInsertedId = new ims.framework.ContextVariable("CcoSched.TreatmentPlan.TreatmentPlanInsertedId", "_cv_CcoSched.TreatmentPlan.TreatmentPlanInsertedId");
			public boolean getTreatmentPlanUpdateScreenModeIsNotNull()
			{
				return !cx_CcoSchedTreatmentPlanTreatmentPlanUpdateScreenMode.getValueIsNull(context);
			}
			public Boolean getTreatmentPlanUpdateScreenMode()
			{
				return (Boolean)cx_CcoSchedTreatmentPlanTreatmentPlanUpdateScreenMode.getValue(context);
			}
		public void setTreatmentPlanUpdateScreenMode(Boolean value)
		{
				cx_CcoSchedTreatmentPlanTreatmentPlanUpdateScreenMode.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedTreatmentPlanTreatmentPlanUpdateScreenMode = new ims.framework.ContextVariable("CcoSched.TreatmentPlan.TreatmentPlanUpdateScreenMode", "_cv_CcoSched.TreatmentPlan.TreatmentPlanUpdateScreenMode");
			private ims.framework.Context context;
		}


		public TreatmentPlanContext TreatmentPlan;
		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getEpisodeofCareShortIsNotNull()
		{
			return !cx_CoreEpisodeofCareShort.getValueIsNull(context);
		}
		public ims.core.vo.EpisodeofCareShortVo getEpisodeofCareShort()
		{
			return (ims.core.vo.EpisodeofCareShortVo)cx_CoreEpisodeofCareShort.getValue(context);
		}
		public void setEpisodeofCareShort(ims.core.vo.EpisodeofCareShortVo value)
		{
			cx_CoreEpisodeofCareShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreEpisodeofCareShort = new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort");

		private ims.framework.Context context;
	}
	public boolean getPatTreatmentPlanIsNotNull()
	{
		return !cx_PatTreatmentPlan.getValueIsNull(context);
	}
	public ims.ccosched.vo.PatTreatmentPlanLiteVo getPatTreatmentPlan()
	{
		return (ims.ccosched.vo.PatTreatmentPlanLiteVo)cx_PatTreatmentPlan.getValue(context);
	}
		public void setPatTreatmentPlan(ims.ccosched.vo.PatTreatmentPlanLiteVo value)
		{
		cx_PatTreatmentPlan.setValue(context, value);
		}

	private ims.framework.ContextVariable cx_PatTreatmentPlan = new ims.framework.ContextVariable("PatTreatmentPlan", "_cv_PatTreatmentPlan");

	public CcoSchedContext CcoSched;
	public CoreContext Core;
}
