//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.21 build 41015.1700)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.transportupdatedetails;
import ims.ccosched.Helper.LookupHelper;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.dto.Result;
import ims.dto.client.Sd_appt;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.text.ParseException;
public class Logic extends BaseLogicDTO
{
	private final String new_line = System.getProperty("line.separator");
    private String TRANSPORT_LKP_TYPE = "3202";
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.lblBookingDetails().setValue(form.getGlobalContext().CcoSched.getTransportDetailsTitle());
		DisplayPatientRecord(form.getGlobalContext().Core.getPatientShort());
		//LoadTransport();
		form.setMode(FormMode.EDIT);

		if(Open() == 0)
		{
			// If no records were retrieved display the screen in edit mode, ready to add a new record.
		}
	}
	protected void OnButtonCancel() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void OnButtonSave() throws ims.framework.exceptions.PresentationLogicException
	{
		if(Save())
		{
			engine.close(DialogResult.OK);
		}
	}
	
	private int  Open()
	{
		// This method should return the number of records retrieved on success or a negative value on failure.
		if(form.getGlobalContext().CcoSched.Trasport.getAppointmentHeaderIDIsNotNull() == false)
			return -1;
		
		Sd_appt app = (Sd_appt) domain.getDTOInstance(Sd_appt.class);
		app.Filter.clear();
		app.Filter.Appt_head_id = form.getGlobalContext().CcoSched.Trasport.getAppointmentHeaderID();
		Result result = app.get();
		if (result != null)
		{
			engine.showMessage(result.getMessage());
			return -1;
		}

		form.getLocalContext().setapptDTO(app);
		
		for(int x=0; x<app.DataCollection.get(0).Appt_idCollection.count(); x++)
		{
			Date date = GetDateFromString(app.DataCollection.get(0).Appt_idCollection.get(x).Appt_dt);
			//SqlDateTime date = DTOdate.IsNull ? SqlDateTime.Null : new SqlDateTime(DTOdate.Value);
			//Display only future dates
			if(date.compareTo(new Date()) >= 0)
			{	
				GenForm.MainGridRow row = form.MainGrid().getRows().newRow();	
				row.setDate(date.toString(DateFormat.STANDARD));
				Time appTm = GetTimeFromString(app.DataCollection.get(0).Appt_idCollection.get(x).App_stm);
				//date = Dtodate.IsNull ? SqlDateTime.Null : new SqlDateTime(Dtodate.Value);
				row.setAppointmentTime(appTm == null?"":appTm.toString(TimeFormat.DEFAULT));
				Time attTm = GetTimeFromString(app.DataCollection.get(0).Appt_idCollection.get(x).Att_tm);
				//date = Dtodate.IsNull ? SqlDateTime.Null : new SqlDateTime(Dtodate.Value);
				row.setAttendanceTime(attTm==null?"":attTm.toString(TimeFormat.DEFAULT));//toString()Value.ToString("t");
				row.setTransport(getTransport(app.DataCollection.get(0).Appt_idCollection.get(x).Trans_typ));
				//this.setMainGridTransportLookupValue(row, getIntFromString(app.DataCollection.get(0).Appt_idCollection.get(x).Trans_typ));
				row.setValue(app.DataCollection.get(0).Appt_idCollection.get(x).Appt_id);
			}
		}

		if(app.DataCollection.get(0).Tran_arrnge_req != null && app.DataCollection.get(0).Tran_arrnge_req.equalsIgnoreCase("Y"))
			form.FurtherTransport().setValue(true);

		form.Comments().setValue(app.DataCollection.get(0).Transp_cmnt);

		if (form.MainGrid().getRows().size() > 0) 
		{
			//Equivalent to setCurrentSelection = 0;
			form.MainGrid().setValue(form.MainGrid().getRows().get(0).getValue());
			form.Save().setEnabled(true);
		}
		else
			form.Save().setEnabled(false);

		return 0; // replace this value with the number of records retrieved.
	}
	
	private boolean Save()
	{
		if(form.getLocalContext().getapptDTOIsNotNull() == false)
			return false;
		
		//Get For Update
		Sd_appt app = form.getLocalContext().getapptDTO();
		Result result = app.getForUpdate();
		if (result != null)
		{
			if (result.getId() < 0)
				ShowMessage(result.getMessage());
			else
				ShowMessage("Data was changed.");
			return false;
		}

		for(int x=0; x<form.MainGrid().getRows().size(); x++)
		{
			for(int i=0; i<app.DataCollection.get(0).Appt_idCollection.count(); i++)
			{
				//Find the Appt_id from the grid
				if(form.MainGrid().getRows().get(x).getValue().equals(app.DataCollection.get(0).Appt_idCollection.get(i).Appt_id))
				{
					//Update Transport Only
					if(form.MainGrid().getRows().get(x).getTransport() != null)
						app.DataCollection.get(0).Appt_idCollection.get(i).Trans_typ = Integer.toString(form.MainGrid().getRows().get(x).getTransport().getID());

					//quit the first loop
					break;
				}
			}
		}

		//Further Transport
		app.DataCollection.get(0).Tran_arrnge_req = form.FurtherTransport().getValue()?"Y":"N";
		//Comment
		app.DataCollection.get(0).Transp_cmnt = form.Comments().getValue();

		result = app.update();
		if (result != null)
		{
			ShowMessage("Failed to update record.");
			ShowMessage(result.getMessage());
			return false;
		}

		return true;
	}

	private void DisplayPatientRecord(PatientShort patient)
	{
		if(patient == null)
			return;
		 
		form.PatientHospitalNumber().setValue(patient.getHospnum() != null ? patient.getHospnum().getValue() : "");
		form.PatientName().setValue(patient.getNameIsNotNull() ? patient.getName().getForename() + " " + patient.getName().getSurname() : "");
		form.PatientDOB().setValue(patient.getDobIsNotNull() ? patient.getDob().toString() : "");

		//WDEV-14479
		PersonAddress tempAddress = patient.getAddress();
		
		if (tempAddress != null)
		{
			StringBuffer address = new StringBuffer(200);

			if (tempAddress.getLine1IsNotNull())
			{
				address.append(tempAddress.getLine1());
				address.append(new_line);
			}
			
			if (tempAddress.getLine2IsNotNull())
			{
				address.append(tempAddress.getLine2());
				address.append(new_line);
			}
			
			if (tempAddress.getLine3IsNotNull())
			{
				address.append(tempAddress.getLine3());
				address.append(new_line);
			}
			
			if (tempAddress.getLine4IsNotNull())
			{
				address.append(tempAddress.getLine4());
				address.append(new_line);
			}

			form.PatientAddress().setValue(address.toString());
		}

		form.PatientCategory().setValue("");
		form.PatientHCP().setValue("");			
	}
	
	private Date GetDateFromString(String date)
	{
		Date dt = null;
		if(date != null && date.equals("") == false)
		try{dt = new Date(date, DateFormat.ISO);}catch(ParseException e){ShowMessage(e.getMessage());}
		return dt;
	}
	
	private Time GetTimeFromString(String time)
	{
		Time tm = null;
		try{ tm = new Time(time, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
		return tm;
	}
	
	private void ShowMessage(String message)
	{
		engine.showMessage(message);
	}
	private int getIntFromString(String value)
	{
		if(value != null && value.equals(""))
			return 0;
		try{return Integer.parseInt(value);}catch(NumberFormatException e){ShowMessage(e.getMessage());}
		return 0;
	}
	private ims.ccosched.vo.lookups.Transport getTransport(String transport_type)
	{
        return new LookupHelper(domain, TRANSPORT_LKP_TYPE).getTransport(transport_type);
	}
}
