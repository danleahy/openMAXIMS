//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.20 build 40913.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.rebookingconfirmation;
import ims.ccosched.ActionSession.ActionSession;
import ims.ccosched.Helper.LookupHelper;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.lookups.Requirements;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.DTODomain;
import ims.dto.Result;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt.Sd_apptAppt_idRecord;
import ims.dto.client.Sd_appt.Sd_apptRecord;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_mc;
import ims.dto.client.Sd_modactmc;
import ims.dto.client.Sd_sess_appts;
import ims.dto.client.Sd_session;
import ims.dto_move.vo.AppointmentRefVo;
import ims.dtomove.vo.ActivityActionVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.text.ParseException;
import java.util.ArrayList;

public class Logic extends BaseLogic
{
    private String REQUREMENT_LKP_TYPE = "3406";
    private String TRANSPORT_LKP_TYPE = "3202";
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.MainGrid().getRows().clear();
		form.imbMinus().setEnabled(false);
		// Patients			
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			PatientShort patient = form.getGlobalContext().Core.getPatientShort();
			form.PatientName().setValue(patient.getNameIsNotNull() ? (patient.getName().getForenameIsNotNull() ? patient.getName().getForename().toString(): "") + " " + (patient.getName().getSurnameIsNotNull() ? patient.getName().getSurname().toString(): "") : "");
			form.PatientDOB().setValue(patient.getDobIsNotNull() ? patient.getDob().toString() : "");
			form.PatientHospitalNumber().setValue(patient.getHospnum() != null  ? patient.getHospnum().getValue() : "");
		}
			
		Sd_appt appointments = form.getGlobalContext().CcoSched.Rebooking.getAppointments();
		
		//24/06/2003 - Populate Category, Activity, Action texts
		form.PatientCategory().setValue(form.getGlobalContext().CcoSched.Rebooking.getPatientCategory() != null?form.getGlobalContext().CcoSched.Rebooking.getPatientCategory():"");
		form.Activity().setValue(form.getGlobalContext().CcoSched.Rebooking.getActivity() != null?form.getGlobalContext().CcoSched.Rebooking.getActivity():"");
		form.Action().setValue(form.getGlobalContext().CcoSched.Rebooking.getAction() != null?form.getGlobalContext().CcoSched.Rebooking.getAction():"");

		//24/06/2003 - Populate Start Date, End Date, Transport Comment
		if(appointments != null && appointments.DataCollection.count() > 0)
		{
			form.StartDate().setValue(GetDate(appointments.DataCollection.get(0).First_appt_date));
			form.EndDate().setValue(GetDate(appointments.DataCollection.get(0).Last_appt_date));
			//Transport Comment - Kevin's requirement
			form.Transport().setValue(appointments.DataCollection.get(0).Transp_cmnt);
			
			//WDEV-15837 first appointment date for printing.
			form.getGlobalContext().CcoSched.PatientAppointments.setApptStartDate(appointments.DataCollection.get(0).First_appt_date);
		}

		// Main Grid
		ArrayList ar = form.getGlobalContext().CcoSched.Rebooking.getData();

		for(int i=0; i<ar.size(); i++)
		{
			Object[] o  = (Object[]) ar.get(i);
			if (!((String)o[4]).equals(""))
			{					
				// Add Values To the Row
				String[] time = StringUtils.splitString(((String)o[2]), ":");
				//Check if the time was set
				if(time == null || time.length < 2)
				{
					ShowMessage("No appointment time selected for " + ((Date)o[1]).toString(DateFormat.STANDARD));
					continue;
				}
				GenForm.MainGridRow row = form.MainGrid().getRows().newRow();	
				row.setDate((Date)o[1]);
								
				Time dt = GetTimeFromString(time[0]+time[1]+"00");
				if (dt == null)
				{
					ShowMessage("Wrong time format type");
					return;
				}
				row.setAppointmentTime(dt);
				int rounding = GetRoundAttendanceTime((String)o[3]);
				row.setAttendanceTime((rounding == 0 ? dt : GetRoundingTime(rounding, dt)));
				//23/06/2003 - Bug - sent by Angela.dawe@ccotrust.nhs.uk - the Transport is set to the first value every time
				Sd_apptAppt_idRecord app = (Sd_apptAppt_idRecord)o[0];
				if(app != null)
				{
					//this.setMainGridTransportLookupValue(row, GetIntFromString(app.Trans_typ));
                    row.setTransport(getTransport(app.Trans_typ));
					//12/11/2004 - Bug not reported - the comment is not pulled through
					row.setComment(app.Appt_cmts);
				}
				row.setValue(o);
			}
		}

		PopulateMovedGrid();
		
		if(furtherAppointment())
			populateAlreadyBookedAppts();
		
		Sd_appt.Sd_apptRecord appointment = appointments.DataCollection.get(0);

		// Booking System Type
		this.setBookingSystemTypeLookupValue(GetIntFromString(appointment.Booking_sys_type));
		
		//ICCO670
		if(appointments.DataCollection.count() > 0)
			this.setPatientStatusLookupValue(GetIntFromString(appointment.Pat_stat));

		this.setConfirmationStatusLookupValue(GetIntFromString(appointment.Appt_idCollection.get(0).Confirm_stat));

		// Relaited Appointment
		if (!appointment.Rel_appt_head_id.equals(""))
		{
			Sd_appt apps = (Sd_appt)domain.getDTOInstance(Sd_appt.class);
			apps.Filter.clear();
			apps.Filter.Appt_head_id = appointment.Rel_appt_head_id;
			Result result = apps.get();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return;
			}

			if (apps.DataCollection.count() == 0)
			{
				ShowMessage("No appointment");
				return;
			}
			form.RelaitedAppointment().setValue((GetDate(apps.DataCollection.get(0).First_appt_date)) + " " + apps.DataCollection.get(0).First_appt_activitytxt);
			
			//08/03/2005 - Bug descovered by Barbara (get for Update fails) so we have to do a get again 
			//if the appt_head_id is different than related appointment one
			if(appointment.Appt_head_id.equals(appointment.Rel_appt_head_id) == false)
			{
				result = appointments.get();
				if(result != null)
				{
					ShowMessage(result.getMessage());
					return;
				}
			}
		}

		this.setPriorityLookupValue(GetIntFromString(appointment.Appt_idCollection.get(0).Priorty));
		if (appointment.Priordatoff.equals(""))
		{
			form.EarlierDateOffered().setValue(false);
			form.DateOffered().setValue(null);
			form.DateOffered().setEnabled(false);
		}
		else
		{
			form.EarlierDateOffered().setValue(true);
			Date ddt = GetDateFromString(appointment.Priordatoff);
			form.DateOffered().setValue(ddt);
			form.DateOffered().setEnabled(true);
		}

		form.SpecialRequirements().getRows().clear();
		for(int i=0; i<appointment.Spec_req_seqCollection.count(); i++)
		{
			Sd_appt.Sd_apptSpec_req_seqRecord x = appointment.Spec_req_seqCollection.get(i);
			if (x.Act_ind.equals("Y"))
			{
				GenForm.SpecialRequirementsRow row = form.SpecialRequirements().getRows().newRow();
				//this.setSpecialRequirementsRequirementLookupValue(row, GetIntFromString(x.Spec_req_id));
                row.setRequirement(getRequrement(x.Spec_req_id));
			}
		}

		// Booking Comment
		form.BookingComments().setValue(appointment.Cmts);
		
		if(furtherAppointment())
			setTimeRequired();
		
		// WDEV-13566 - Treatment Plan Comments
		if (form.getGlobalContext().getPatTreatmentPlanIsNotNull())
		{
			PatTreatmentPlanLiteVo vo=form.getGlobalContext().getPatTreatmentPlan();
			if (vo.getTreatmentplanCommentIsNotNull())
				form.TreatmentPlanComment().setValue(vo.getTreatmentplanComment());
		}
	}

    protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().CcoSched.PrintLetter))
		{
			if(form.getGlobalContext().CcoSched.LetterType.getGPLetter() != null)
				form.getGlobalContext().CcoSched.LetterType.setGPLetter(null);

			if(form.getGlobalContext().CcoSched.LetterType.getPatientLetter() != null)
				form.getGlobalContext().CcoSched.LetterType.setPatientLetter(null);
			
			if(form.getGlobalContext().CcoSched.BookingConfirmation.getAPPT_UNID() != null)
				form.getGlobalContext().CcoSched.BookingConfirmation.setAPPT_UNID(null);
			
			engine.close(DialogResult.OK);
		}
	}
	protected void OnCancel() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	protected void OnRebook() throws ims.framework.exceptions.PresentationLogicException
	{
		String appt_id = "";

		Sd_appt appointments = form.getGlobalContext().CcoSched.Rebooking.getAppointments();
		appointments.Filter.clear();
		Result result = appointments.getForUpdate();
		if (result != null)
		{
			ShowMessage(result.getMessage());
			return;
		}
		if(isIncompleteAppt())
		{
			//For the Incomplete appointments we have to treat the new dates as new appointments (do Insert)
			//and the old one to be updated to "-2199" and flagged ACT_COMP_FLG to be "F"
			ArrayList modalityList = form.getGlobalContext().CcoSched.Booking.getModalityArrayList();
			for(int i=0; i<form.MainGrid().getRows().size(); ++i)
			{
				//Update the old records having the status to "-2199" and flagged ACT_COMP_FLG to be "F"
				GenForm.MainGridRow row = form.MainGrid().getRows().get(i);
				Object[] o = (Object[])row.getValue();
				Sd_appt.Sd_apptAppt_idRecord app = null, newApp = null;
				if(o[0] != null && o[0] instanceof Sd_appt.Sd_apptAppt_idRecord)
				{
					//Find the appointment record
					for(int j=0; j<appointments.DataCollection.get(0).Appt_idCollection.count(); j++)
					{
						if(((Sd_appt.Sd_apptAppt_idRecord)o[0]).Appt_id.equals(appointments.DataCollection.get(0).Appt_idCollection.get(j).Appt_id))
						{
							app = appointments.DataCollection.get(0).Appt_idCollection.get(j);
							break;
						}
					}
					
					//Flag the rebooked
					app.Act_comp_flg = "F"; 
					app.Appt_stat 	 = "-2199"; // Attended / Incomplete / Rebooked 
				}
				//---- End Updating the records -------------
				
				//Add New appointments
				newApp = appointments.DataCollection.get(0).Appt_idCollection.get(appointments.DataCollection.get(0).Appt_idCollection.add());
				String action_id = form.getGlobalContext().CcoSched.Rebooking.getActionIDIsNotNull()?form.getGlobalContext().CcoSched.Rebooking.getActionID():"";
				String apptId = "";
				String duration = form.getGlobalContext().CcoSched.Booking.getTimeRequiredIsNotNull()?form.getGlobalContext().CcoSched.Booking.getTimeRequired().toString():"";

				if(o[0] != null && o[0] instanceof Sd_appt.Sd_apptAppt_idRecord)
					appt_id = ((Sd_appt.Sd_apptAppt_idRecord)o[0]).Appt_id;
				//27/01/2005 - If the action has changed for the date - get teh new it's new time duration 
				ActionSession actionSession = GetActionSession(row.getDate(), apptId);
				if(actionSession != null)
				{
					action_id = actionSession.getAction();
					duration = Integer.toString(actionSession.getIntervalTimeRequired());
				}
				if(modalityList != null && modalityList.size() == 3)
				{
					newApp.Mod_id 	   = (String)modalityList.get(0);
					newApp.Energy_val = (String)modalityList.get(1);
					newApp.Unit_id    = (String)modalityList.get(2);
				}
				newApp.Action_dets = action_id;								
				newApp.App_dur 	= duration;
				
				if (form.getGlobalContext().Core.getPatientShortIsNotNull()
					&& form.getGlobalContext().Core.getPatientShort().getPkey() != null)
				{
					newApp.Pkey1 = form.getGlobalContext().Core.getPatientShort().getPkey().getValue();
					newApp.Patient1 = String.valueOf(form.getGlobalContext().Core.getPatientShort().getID_Patient()); // WDEV-14211 
				}
				
				newApp.Prfile_sess_id 	= (String)o[3];
				newApp.Prfiled_sess_id = (String)o[4];
				newApp.Lo_id 			= (String)o[5];
				newApp.Mc_id 			= (String)o[6];
				newApp.Prfileass_id 	= (String)o[7];
				newApp.Trans_typ 		= row.getTransport()!=null?Integer.toString(row.getTransport().getID()):"";
				newApp.Appt_cmts 		= row.getComment();

				newApp.Appt_dt = row.getDate()!=null?row.getDate().toString(DateFormat.ISO):"";
				newApp.App_stm = row.getAppointmentTime()!= null?row.getAppointmentTime().toString(TimeFormat.FLAT6):"";
				Time endtime = row.getAppointmentTime();
				int durMin = GetIntegerFromString(duration) != null?GetIntegerFromString(duration).intValue():0;
				endtime.addMinutes(durMin);
				newApp.App_etm = endtime.toString(TimeFormat.FLAT6);//string.Format("{0:D2}{1:D2}{2:D2}", endtime.Hour, endtime.Minute, endtime.Second);	

				newApp.Att_tm = row.getAttendanceTime() != null?row.getAttendanceTime().toString(TimeFormat.FLAT6):"";
				newApp.Appt_stat = "-2189"; // Open
				
				// WDEV-14218
				// Any member of staff can make a booking
				MemberOfStaffShortVo mosVo = (MemberOfStaffShortVo) domain.getMosUser();
				if (mosVo != null)
				{
					newApp.Hcp_booking1 =String.valueOf(mosVo.getIMosId());
				}
				
				
				String activityID = getActivityID();//form.getGlobalContext().Scheduler.TreatmentPlan.getTreatmentPlanActions().Activity_id;
				
				//TODO - Please check when opening the dialog from the Cancelled DNA Appointments how the 
				//action has to be treated.
				newApp.Modality_id = ((!activityID.equals("-202") && !activityID.equals("-207")) ? "" : ((Sd_modactmc.Sd_modactmcRecord)form.getGlobalContext().CcoSched.Booking.getResourceSelected()).Modal_id);
					
				//TODO - Ask Kevin if we have to populate these.
				newApp.Priorty = form.Priority().getValue()!=null?Integer.toString(form.Priority().getValue().getID()):"";
				newApp.Confirm_stat = form.ConfirmationStatus().getValue() != null?Integer.toString(form.ConfirmationStatus().getValue().getID()):"";
			}
		}
		else
		{
			for(int j=0; j<appointments.DataCollection.get(0).Appt_idCollection.count(); j++)
			{
				for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
				{
					String action_id = form.getGlobalContext().CcoSched.Rebooking.getActionIDIsNotNull()?form.getGlobalContext().CcoSched.Rebooking.getActionID():"";
					String apptId 	 = "";
					String duration = form.getGlobalContext().CcoSched.Booking.getTimeRequiredIsNotNull()?form.getGlobalContext().CcoSched.Booking.getTimeRequired().toString():"";
					//30/11/2004 - Skip the readonly records (old booked records)
					GenForm.MainGridRow row = form.MainGrid().getRows().get(i);
					if(furtherAppointment() && row.getValue() == null)
						continue;
					Sd_appt.Sd_apptAppt_idRecord app;
					Object[] o = (Object[])row.getValue();
					if(o[0] != null && o[0] instanceof Sd_appt.Sd_apptAppt_idRecord)
						appt_id = ((Sd_appt.Sd_apptAppt_idRecord)o[0]).Appt_id;
					//27/01/2005 - If the action has changed for the date - get teh new it's new time duration 
					ActionSession actionSession = GetActionSession(row.getDate(), apptId);
					if(actionSession != null)
					{
						action_id = actionSession.getAction();
						duration = Integer.toString(actionSession.getIntervalTimeRequired());
					}
					//------------------------------------------------------------------------------------------
					if(furtherAppointment())
					{
						//add new record
						app = appointments.DataCollection.get(0).Appt_idCollection.get(appointments.DataCollection.get(0).Appt_idCollection.add());
						//populate common details
						//TODO - Populate these from the action record - ask Kevin about the rest
						PatTreatPlanActionVo go_ptplact = form.getGlobalContext().getPatTreatmentPlanAction();
						//TODO - Ask Kevin about the modalityID - it should be the same 
						
						if (go_ptplact.getModalityIsNotNull())
							app.Mod_id 		= new Integer(go_ptplact.getModality().getID()).toString();
						else
							app.Mod_id 		= "";
						
						if (go_ptplact.getModalEnergyIsNotNull())
							app.Energy_val  = go_ptplact.getModalEnergy();
						else
							app.Energy_val  = "";
						
						if (go_ptplact.getUnitIsNotNull())
							app.Unit_id     = new Integer(go_ptplact.getUnit().getID()).toString();
						else
							app.Unit_id     = "";
							
						if (go_ptplact.getActionIsNotNull() && go_ptplact.getAction().getAction().getID_ActionIsNotNull())	
							app.Action_dets = action_id.equals("")?go_ptplact.getAction().getActionIsNotNull()?go_ptplact.getAction().getAction().getID_Action().toString():action_id:action_id;
						else
							app.Action_dets = "";
							

						app.App_dur 	= duration;

						if (form.getGlobalContext().Core.getPatientShortIsNotNull()
							&& form.getGlobalContext().Core.getPatientShort().getPkey() != null)
						{
							app.Pkey1 = form.getGlobalContext().Core.getPatientShort().getPkey().getValue();
							app.Patient1 = String.valueOf(form.getGlobalContext().Core.getPatientShort().getID_Patient()); // WDEV-14211 
						}
					}
					else
					{
						app = appointments.DataCollection.get(0).Appt_idCollection.get(j);
						//09/03/2005 - Update Action_dets and App_dur as they might have been changed
						//TODO - check if it's ok the above
						if(actionSession != null)
						{
							app.Action_dets = action_id;								
							app.App_dur 	= duration;
						}
					}
					
					if (!((String)o[4]).equals(""))
					{
						//allow if further appointment or the appt_id matches 
						if (furtherAppointment() || (o[0] instanceof Sd_appt.Sd_apptAppt_idRecord && app.Appt_id.equals(((Sd_appt.Sd_apptAppt_idRecord)o[0]).Appt_id)))
						{
							if(appt_id != "")
								appt_id = appt_id + "||";
							
							appt_id = appt_id + app.Appt_id;
	
							app.Prfile_sess_id = (String)o[3];
							app.Prfiled_sess_id = (String)o[4];
							app.Lo_id = (String)o[5];
							app.Mc_id = (String)o[6];
							app.Prfileass_id = (String)o[7];
							app.Trans_typ = row.getTransport() !=null?Integer.toString(row.getTransport().getID()):"";
							app.Appt_cmts = row.getComment();
	
							app.Appt_dt = row.getDate()!=null?row.getDate().toString(DateFormat.ISO):"";
							app.App_stm = row.getAppointmentTime()!= null?row.getAppointmentTime().toString(TimeFormat.FLAT6):"";
							Time endtime = row.getAppointmentTime();
							int durMin = GetIntegerFromString(duration) != null?GetIntegerFromString(duration).intValue():0;
							endtime.addMinutes(durMin);
							app.App_etm = endtime.toString(TimeFormat.FLAT6);//string.Format("{0:D2}{1:D2}{2:D2}", endtime.Hour, endtime.Minute, endtime.Second);	
		
							app.Att_tm = row.getAttendanceTime() != null?row.getAttendanceTime().toString(TimeFormat.FLAT6):"";
							if(furtherAppointment())
							{
								app.Appt_stat = "-2189"; // Open
							}
							else
								app.Appt_stat = "-2194"; // Rebooked

							// WDEV-14225
							// Any member of staff can make a booking
							MemberOfStaffShortVo mosVo = (MemberOfStaffShortVo) domain.getMosUser();
							if (mosVo != null)
							{
								app.Hcp_booking1 =String.valueOf(mosVo.getIMosId());
							}
							
							//10/02/2004
							//string modal_id = GetModalityId(app);
							/*if(furtherAppointment() == false)
							{
								String modal_id = GetModalityId(appointments.DataCollection.get(0).Appt_head_id, app.Appt_id);
								if(modal_id != "")
									app.Modality_id = modal_id;
							}
							else
							{*/
							String activityID = getActivityID();//form.getGlobalContext().Scheduler.TreatmentPlan.getTreatmentPlanActions().Activity_id;
							
							//TODO - Please check when opening the dialog from the Cancelled DNA Appointments how the 
							//action has to be treated.
							app.Modality_id = ((!activityID.equals("-202") && !activityID.equals("-207")) ? "" : ((Sd_modactmc.Sd_modactmcRecord)form.getGlobalContext().CcoSched.Booking.getResourceSelected()).Modal_id);
								
							//}
													
							//TODO - Ask Kevin if we have to populate these.
							app.Priorty = form.Priority().getValue() != null?Integer.toString(form.Priority().getValue().getID()):"";
							app.Confirm_stat = form.ConfirmationStatus().getValue() != null?Integer.toString(form.ConfirmationStatus().getValue().getID()):"";
                            
                            //ECCO1629 - These appointments had a previous status of Cancel Realloc,with the reason as 'Created in Error'. 
                            //When rebooked and then attended, the status reason field is not being cleared out.
                            app.Appt_stat_reason = "";
							//Set the new action_id if changed 
							if(furtherAppointment() == false && !action_id.equals(""))
								app.Action_dets = action_id;
							
/*							//08/03/2005 - if the record is updated - break
							break;*/
						}
					}
				}				
				
				//Loop only once as we add the new repeating groups only once
				if(furtherAppointment())
					break;
			}
		}
		if(form.PatientStatus().getValue() == null)
		{
			ShowMessage("Please select Patient Status");
			return;
		}
		appointments.DataCollection.get(0).Pat_stat = String.valueOf(form.PatientStatus().getValue().getID());
		//04/11/2004 - Bug not reported - save the Earlier Date Offered
		appointments.DataCollection.get(0).Priordatoff = form.DateOffered().getValue() != null?form.DateOffered().getValue().toString(DateFormat.ISO):"";
		//12/11/2004 - Bug not reported - the Comment is not saved
		appointments.DataCollection.get(0).Cmts = form.BookingComments().getValue();
		if(furtherAppointment())
			appointments.DataCollection.get(0).Actplanupdate = "Y";
		//16/02/2005 - Bug not reported - Booking System Type not saved
		appointments.DataCollection.get(0).Booking_sys_type = form.BookingSystemType().getValue()!=null?Integer.toString(form.BookingSystemType().getValue().getID()):"";
		
		//15/02/2005 - Bug not reported - Requirements weren't saved
		getSpecialRequirements(appointments);
		
		//15/12/2004 - Optimise the Update and get the matching the moved appointments details to be updated in one go 
		GetMovedApptsDetails(appointments.DataCollection.get(0));
		
		result = appointments.update();
		if (result != null)
		{
			ShowMessage(result.getMessage());
			return;
		}

		if (SaveMovedAppointments(appointments.DataCollection.get(0).Appt_head_id) != 0)
		{
			return;
		}

		notifyPathway(appointments.DataCollection.get(0));
		
		form.getGlobalContext().CcoSched.Rebooking.setRebookingSucceeded(new Boolean(true));
		if(form.GPLetter().getValue() == true || form.PatientLetter().getValue() == true)
		{
			if(form.GPLetter().getValue() == true)
				form.getGlobalContext().CcoSched.LetterType.setGPLetter(new Boolean(true));
			if(form.PatientLetter().getValue() == true)
				form.getGlobalContext().CcoSched.LetterType.setPatientLetter(new Boolean(true));

			form.getGlobalContext().CcoSched.BookingConfirmation.setAPPT_UNID(Integer.valueOf(appointments.DataCollection.get(0).Appt_head_id));
				
			form.getGlobalContext().CcoSched.setAppointmentId(appt_id);
			form.getGlobalContext().CcoSched.setSelectLetterType("REBOOKING");
						
			//WDEV-15837
			AppointmentRefVo refvo = new AppointmentRefVo();
			refvo.setID_Appointment(form.getGlobalContext().CcoSched.BookingConfirmation.getAPPT_UNID());
			form.getLocalContext().setappointmentid(refvo);
			form.getGlobalContext().Core.setPrepareForPrinting(Boolean.FALSE);
			engine.open(form.getForms().CcoSched.PrintLetter);
			//WDEV-15837
			
			//engine.open(form.getForms().CcoSched.SelectLetter);
		}
		else
			engine.close(DialogResult.OK);
		
	}
	
	/**
	 * wdev-8873
	 * Check if there is an rkey associated with this appointment
	 * If so, make a call to instantiate an event based on the referral
	 * @param appointmentsRecord
	 */
	private void notifyPathway(Sd_apptRecord appt) 
	{
		// Get the latest appointment record to retrieve the appt record
		Sd_appt newAppt = (Sd_appt)domain.getDTOInstance(Sd_appt.class);
		newAppt.Filter.clear();
		newAppt.Filter.Appt_head_id = String.valueOf(appt.Appt_head_id);
		Result result = newAppt.get();
		if (result != null && newAppt.DataCollection.count() == 0)
			return;
		
		// Get the activity from the session, this should be passed to the instantiate Event method
		Sd_session session = (Sd_session)domain.getDTOInstance(Sd_session.class);
		session.Filter.clear();
		
		session.Filter.Prfile_sess_id = newAppt.DataCollection.get(0).Appt_idCollection.get(0).Prfile_sess_id;
		result = session.get();
		if (result != null || session.DataCollection.count() == 0)
			return;

		try
		{
			// wdev-7174 include appt time in date information
			
			String apptDtDetails = newAppt.DataCollection.get(0).First_appt_date;
			if (newAppt.DataCollection.get(0).First_appt_att_time.length() == 5)
				apptDtDetails += "0";
			apptDtDetails += newAppt.DataCollection.get(0).First_appt_att_time;
			
			// WDEV-13403
			EpisodeOfCareRefVo voEpis = new EpisodeOfCareRefVo(new Integer(appt.Ccs_epid), 0);
			domain.instantiateEvent(null, newAppt.DataCollection.get(0).First_appt_id, apptDtDetails, session.DataCollection.get(0).Activ_id, voEpis);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		} catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
		}

	}

	
	
	private String GetModalityId(String appt_head_id, String appt_id)
	{
		if(form.getGlobalContext().CcoSched.Rebooking.getMachine_Id() != null)
		{
			Sd_appt_dts app = (Sd_appt_dts) domain.getDTOInstance(Sd_appt_dts.class);
			app.Filter.clear();
			app.Filter.Appt_head_id = appt_head_id;
			app.Filter.Appt_id	   = appt_id;

			Result res = app.get();
			if(res != null)
			{
				ShowMessage(res.getMessage());
				return "";
			}
            
			Sd_mc machines = (Sd_mc)domain.getDTOInstance(Sd_mc.class);
			machines.Filter.clear();
			machines.Filter.Mc_id = form.getGlobalContext().CcoSched.Rebooking.getMachine_Id();
			Result result = machines.get();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return "";
			}

			for(int i=0; i<machines.DataCollection.get(0).Modal_idCollection.count(); i++)
			//foreach (dto.Sd_mcDTO.Modal_idClient m in machines.Sd_mcCollection[0].Modal_idCollection)
			{
				Sd_mc.Sd_mcModal_idRecord m = machines.DataCollection.get(0).Modal_idCollection.get(i);
				if ((app.DataCollection.get(0).Mod_id.equals(m.Modal_type_id)) &&
					(app.DataCollection.get(0).Energy_val.equals(m.Energy)) &&
					(app.DataCollection.get(0).Unit_id.equals(m.Energy_unit)))
				{
					return m.Modal_id;
				}
			}
		}

		return "";
	}
	
	private int SaveMovedAppointments(String excludedID)
	{
		for (int i = 0; i < form.MovedGrid().getRows().size(); ++i)
		{
			Sd_sess_appts.Sd_sess_apptsSeqno3Record seqNo3Record = form.MovedGrid().getRows().get(i).getValue();
			
			//Skip the already updated one
			if(excludedID.equals(seqNo3Record.Appt_head_id))
				continue;
			
			Sd_appt appointment = (Sd_appt)domain.getDTOInstance(Sd_appt.class);
			appointment.Filter.clear();
			appointment.Filter.Appt_head_id = seqNo3Record.Appt_head_id;				
			Result result = appointment.get();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return -1;
			}
			result = appointment.getForUpdate();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return -1;
			}
			Sd_appt.Sd_apptAppt_idRecord app;
			for(int j=0; j<appointment.DataCollection.get(0).Appt_idCollection.count(); j++)
			{
				app = appointment.DataCollection.get(0).Appt_idCollection.get(j);
				//TODO - ask Kevin about this comparison -Seqno3 is in fact appt_id 
				if (app.Appt_id.equals(seqNo3Record.Seqno3))
				{
					Time newTime = form.MovedGrid().getRows().get(i).getNewTime();
					app.App_stm = newTime.toString(TimeFormat.FLAT6);
					Time endtime = form.MovedGrid().getRows().get(i).getNewTime();
					endtime.addMinutes(form.getGlobalContext().CcoSched.Booking.getTimeRequired().intValue());
					app.App_etm = endtime.toString(TimeFormat.FLAT6);	
					int rounding = GetRoundAttendanceTime(getSessionID(seqNo3Record));
					app.Att_tm = GetRoundingTime(rounding, form.MovedGrid().getRows().get(i).getNewTime()).toString(TimeFormat.FLAT6);
					app.Appt_stat = "-2195"; // Moved

					break;
				}
			}
			result = appointment.update();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return -1;
			}

		}
		return 0;
	}
	
	private boolean GetMovedApptsDetails(Sd_appt.Sd_apptRecord apptRecord)
	{
		for (int i = 0; i < form.MovedGrid().getRows().size(); ++i)
		{
			Sd_sess_appts.Sd_sess_apptsSeqno3Record seqNo3Record = form.MovedGrid().getRows().get(i).getValue();
			if(seqNo3Record.Appt_head_id.equals(apptRecord.Appt_head_id))
			{				
				Sd_appt.Sd_apptAppt_idRecord app;
				for(int j=0; j<apptRecord.Appt_idCollection.count(); j++)
				{
					app = apptRecord.Appt_idCollection.get(j);
					if (app.Appt_id.equals(seqNo3Record.Seqno3))
					{
						Time newTime = form.MovedGrid().getRows().get(i).getNewTime();
						app.App_stm = newTime.toString(TimeFormat.FLAT6);
						Time endtime = form.MovedGrid().getRows().get(i).getNewTime();
						endtime.addMinutes(form.getGlobalContext().CcoSched.Booking.getTimeRequired().intValue());
						app.App_etm = endtime.toString(TimeFormat.FLAT6);	
						int rounding = GetRoundAttendanceTime(getSessionID(seqNo3Record));
						app.Att_tm = GetRoundingTime(rounding, form.MovedGrid().getRows().get(i).getNewTime()).toString(TimeFormat.FLAT6);
						app.Appt_stat = "-2195"; // Moved
	
						break;
					}
				}
			}
		}
		return true;
	}
	
	protected void OnMinus() throws ims.framework.exceptions.PresentationLogicException
	{
		int i = form.SpecialRequirements().getSelectedRowIndex();
			if (i >= 0)
				form.SpecialRequirements().getRows().remove(i);
		form.imbMinus().setEnabled(false);
	}
	protected void OnPlus() throws ims.framework.exceptions.PresentationLogicException
	{
		boolean bSelectRow = true;
		GenForm.SpecialRequirementsRow row = form.SpecialRequirements().getRows().newRow(bSelectRow);
		if(bSelectRow)
			onSpecialRequirementsSelectionChanged();
	}
	protected void onSpecialRequirementsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.imbMinus().setEnabled(true);
	}
	
	private int GetRoundAttendanceTime(String sessionId)
	{		
		int rounding = 1;
		Sd_session session = (Sd_session)domain.getDTOInstance(Sd_session.class);
		session.Filter.clear();
		session.Filter.Prfile_sess_id = sessionId;
		Result result = session.get();
		if (result != null)
			ShowMessage(result.getMessage());						
		else
		{
			Integer di = GetIntegerFromString(session.DataCollection.get(0).Tci_rnding_int);
			if (di != null)
				rounding = di.intValue();
		}

		return rounding;
	}
	
	private Time GetRoundingTime(int rounding, Time time)
	{		
		int i;
		int hour = time.getHour();
		int min;
		String minStr;
		int remainder = 60%rounding;
		if (remainder != 0)
		{
			if (time.getMinute() < rounding)
			{
				if (time.getHour() == form.getGlobalContext().CcoSched.Rebooking.getStartTime().getHour())
					return form.getGlobalContext().CcoSched.Rebooking.getStartTime();

				time.addHours(-1);
				hour = time.getHour();
				for (i =60; (i%rounding) != 0; i--) {}
					min = i;
			}				
			else
			{
				for (i = 0; (rounding * (i+1)) <= time.getMinute(); i++) {}
				min = rounding * i;	
			}
		}
		else
		{
			for (i = 0; (rounding * (i+1)) <= time.getMinute(); i++) {}					
			min = rounding * i;	
		}

		if (min <= 9)
			minStr = "0" + Integer.toString(min);
		else
			minStr = Integer.toString(min);

		Time ddt = GetTimeFromString(String.valueOf(hour) +  minStr + "00");
		if (ddt == null)
		{
			ShowMessage("Wrong time format.");
			return new Time(0,0);
		}
		return ddt;
	}
	
	private String GetDate(String date)
	{
		Date dt = null;
		if (date != null && date.equals("") == false)
			try{dt = new Date(date, DateFormat.ISO);}catch(ParseException e){e.printStackTrace();}
		return dt == null? new String(""):dt.toString(DateFormat.STANDARD);
	}
	private Date GetDateFromString(String date)
	{
		Date dt = null;
		try{dt = new Date(date, DateFormat.ISO);}catch(ParseException e){e.printStackTrace();}
		return dt;
	}
	private Time GetTimeFromString(String time)
	{
		Time tm = null;
		try{ tm = new Time(time, TimeFormat.FLAT6);}catch(RuntimeException e){e.printStackTrace();}
		return tm;
	}
	private Integer GetIntegerFromString(String value)
	{
		Integer intValue = null;
		if(value != null && !value.equals(""))
		{
			try{intValue = Integer.valueOf(value);}
			catch(NumberFormatException e)
			{ShowMessage(e.getMessage());}
		}
		return intValue;
	}
	private int GetIntFromString(String value)
	{
		Integer intValue = null;
		if(value != null && !value.equals(""))
		{
			try{intValue = Integer.valueOf(value);}
			catch(NumberFormatException e)
			{ShowMessage(e.getMessage());}
		}
		if(intValue != null)
			return intValue.intValue();
		else
			return -1; 
	}
				
	private void ShowMessage(String message)
	{
		engine.showMessage(message);
	}
	
	//22/10/2004
	private void PopulateMovedGrid()
	{
		ArrayList timeList = form.getGlobalContext().CcoSched.Rebooking.getNewTimeList();
		boolean dateFound = false;
		form.MovedGrid().getRows().clear();
		if(timeList != null)
		{
			//Check if the object exists and replace the time
			for(int i=0; i<timeList.size(); i++)
			{
				Object[] timeObj 		= (Object[])timeList.get(i);
				//Add only the ones that have new Time
				if(timeObj[1] != null)
				{
					ArrayList timeRowObj 	= (ArrayList)timeObj[0];
					GenForm.MovedGridRow row = form.MovedGrid().getRows().newRow();
					row.setDate((Date)timeObj[2]);
					row.setOldTime(GetTimeFromString(((Sd_sess_appts.Sd_sess_apptsSeqno3Record)timeRowObj.get(0)).Appt_stm));
					row.setNewTime((Time)timeObj[1]);
					row.setValue((Sd_sess_appts.Sd_sess_apptsSeqno3Record)timeRowObj.get(0));
				}
			}
		}
	}
	
	//26/10/2004
	private String getSessionID(Sd_sess_appts.Sd_sess_apptsSeqno3Record sessApptRec)
	{
		ArrayList timeList = form.getGlobalContext().CcoSched.Rebooking.getNewTimeList(); 
		if(timeList != null)
		{
			for(int i=0; i<timeList.size(); i++)
			{
				Object[] timeObjs = (Object[])timeList.get(i);
				ArrayList timeObj  = (ArrayList)timeObjs[0];
				if(timeObj.get(0).equals(sessApptRec))
					return (String)timeObj.get(1);
			}
		}
		return "";
	}
	
	protected void onEarlierDateOfferedValueChanged() throws PresentationLogicException 
	{
		if (form.EarlierDateOffered().getValue())
			form.DateOffered().setEnabled(true);
		else
		{
			form.DateOffered().setEnabled(false);
			form.DateOffered().setValue(null);
		}				
	}
	
	private void populateAlreadyBookedAppts()
	{
		Sd_appt appointments = form.getGlobalContext().CcoSched.Rebooking.getAppointments();
		Sd_appt.Sd_apptAppt_idRecord appt;
		for(int i=0; i<appointments.DataCollection.get(0).Appt_idCollection.count(); i++)
		{
			appt = appointments.DataCollection.get(0).Appt_idCollection.get(i);
			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();	
			row.setDate(GetDateFromString(appt.Appt_dt));
			row.setAppointmentTime(GetTimeFromString(appt.App_stm));
			row.setAttendanceTime(GetTimeFromString(appt.Att_tm));
			//this.setMainGridTransportLookupValue(row, GetIntFromString(appt.Trans_typ));
            row.setTransport(getTransport(appt.Trans_typ));
			row.setComment(appt.Appt_cmts);
			row.setBackColor(Color.Beige);
			row.setReadOnly(true);
			row.setValue(null);
		}
	}
	private boolean furtherAppointment()
	{
		if(form.getGlobalContext().CcoSched.TreatmentPlan.getFurtherAppointmentIsNotNull() && 
		   form.getGlobalContext().CcoSched.TreatmentPlan.getFurtherAppointment().equals(Boolean.TRUE))
			return true;
		
		return false;
	}
	private void setTimeRequired()
	{
		//Sd_activity_action activityactions = (Sd_activity_action)domain.getDTOInstance(Sd_activity_action.class);
		
		
		PatTreatPlanActionVo go_ptplact 	 = form.getGlobalContext().getPatTreatmentPlanAction();
				
		ActivityActionVoCollection activityactions = 
			domain.listActivityActions(
				go_ptplact.getActivityGroupIsNotNull()?go_ptplact.getActivityGroup().getID_ActivityGroup():null,
						go_ptplact.getActivityIsNotNull()?go_ptplact.getActivity().getActivityId():null,
								go_ptplact.getActionIsNotNull()?go_ptplact.getAction().getActionIsNotNull()?go_ptplact.getAction().getAction().getID_Action():null:null);

		if (activityactions != null && activityactions.size()>0)
		{
			form.getGlobalContext().CcoSched.Booking.setTimeRequired(activityactions.get(0).getActionIsNotNull()?activityactions.get(0).getAction().getTimeRequired():null);
		}
		else
			form.getGlobalContext().CcoSched.Booking.setTimeRequired(null);
	}
	private Integer GetInteger(String val)
	{
		Integer newVal = null;
		if(val != null && !val.equals(""))
		{
			try{newVal = Integer.valueOf(val);}
			catch(NumberFormatException e)
			{ShowMessage(e.getMessage());}
		}
	
		return newVal;	
	}
	private ActionSession GetActionSession(Date apptDate, String appt_id)
	{
		ArrayList actionSessions = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
		for(int i=0; actionSessions != null && i<actionSessions.size(); i++)
		{
			ActionSession actionSession = (ActionSession)actionSessions.get(i);
			if(apptDate.equals(actionSession.getSessionDate()))
			{
				//Check the appt_id if provided 
				if(!appt_id.equals(""))
				{
					if(appt_id.equals(actionSession.getAppt_id()))
						return actionSession; 
				}
				else
				{
					return actionSession;
				}
			}
		}
		return null;
	}
	
	private String getActivityID()
	{
		return form.getGlobalContext().CcoSched.Rebooking.getAppointments().DataCollection.get(0).First_appt_activity;
	}
	
	private boolean isIncompleteAppt()
	{
		return form.getGlobalContext().CcoSched.CancelledAppointments.getIncompleteAppointmentIsNotNull()?form.getGlobalContext().CcoSched.CancelledAppointments.getIncompleteAppointment().booleanValue():false;
	}
	
	private void getSpecialRequirements(Sd_appt appointments)
	{
		appointments.DataCollection.get(0).Spec_req_seqCollection.clear();
		for(int k=0; k<form.SpecialRequirements().getRows().size(); k++)
		{
			if(form.SpecialRequirements().getRows().get(k).getRequirement() != null)
			{
				int seqNoIndex = appointments.DataCollection.get(0).Spec_req_seqCollection.add();
				appointments.DataCollection.get(0).Spec_req_seqCollection.get(seqNoIndex).Act_ind = "Y";
				appointments.DataCollection.get(0).Spec_req_seqCollection.get(seqNoIndex).Spec_req_id = form.SpecialRequirements().getRows().get(k).getRequirement() != null?Integer.toString(form.SpecialRequirements().getRows().get(k).getRequirement().getID()):""; 
			}
		}
	}
    
    private Requirements getRequrement(String spec_req_id) 
    {
        return new LookupHelper((DTODomain) domain, REQUREMENT_LKP_TYPE).getRequerement(spec_req_id);
    }
    private ims.ccosched.vo.lookups.Transport getTransport(String transport_type)
    {
        return new LookupHelper((DTODomain) domain, TRANSPORT_LKP_TYPE).getTransport(transport_type);
    }
}
