//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.55 build 2767.27581)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.printerselect;

import ims.framework.enumerations.DialogResult;

import com.ims.printserver.PrintServer;
public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		loadPrinters();
	}

	private void loadPrinters()
	{
		try
		{
			String[] printers = PrintServer.GetPrinters();
			for (int i = 0; printers != null && i < PrintServer.GetPrinters().length; i++)
			{
				form.cmbPrinters().newRow(printers[i], printers[i]);
			}

			if (form.cmbPrinters().getValues().size() == 0)
				form.OK().setEnabled(false);
		}
		catch (Exception e)
		{
			engine.showMessage(e.getMessage());
		}
	}

	@Override
	protected void onCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.cmbPrinters().getValue() == null)
		{
			engine.showMessage("Please select a printer");
			return;
		}
		form.getGlobalContext().CcoSched.setSelectedPrinter(form.cmbPrinters().getValue());
		engine.close(DialogResult.OK);
	}
}
