//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.14 build 40428.1100)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.patientdiary;
import ims.core.vo.PatientApptDiaryVo;
import ims.core.vo.PatientApptDiaryVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	protected void onFormOpen()
	{
		form.btnClose().setVisible(engine.isDialog());
		DateTime serverDateTime = new DateTime();
		form.StartDate().setValue(serverDateTime.getDate());
		//ICCO936
		form.EndDate().setValue(serverDateTime.getDate().addMonth(1));
		
		form.AppointmentsGrid().getRows().clear();
	}
	
	protected void onListAppointmentsClick()
	{
		if(checkMandatory() == false)
			return;
		
		//WDEV-14655
		if (form.StartDate().getValue().isGreaterThan(form.EndDate().getValue()))
		{
			engine.showMessage("Start Date cannot be greater than End Date .");
			return;
		}
		
		form.AppointmentsGrid().getRows().clear();	
		
		PatientApptDiaryVoCollection appts = domain.listPatientAppts(form.getGlobalContext().Core.getPatientShort(), form.StartDate().getValue(), form.EndDate().getValue(), form.chkActiveOnly().getValue());
		if (appts == null || appts.size() == 0)
		{
			engine.showMessage("No Appointments found");
			return;
		}

		//Sort the results
//		ArrayList apptArray = new ArrayList();
//		for(int i=0; i<appts.size(); i++)
//			apptArray.add(appts.get(i));
//	 	Collections.sort(apptArray, new ApptComparer());
	 	
		for (int i = 0; i < appts.size(); i++)
		{
			PatientApptDiaryVo record = (PatientApptDiaryVo)appts.get(i);

			GenForm.AppointmentsGridRow row = form.AppointmentsGrid().getRows().newRow();
			
			row.setValue(record);
			row.setDate(record.getApptDate());
			if (record.getStartTimeIsNotNull())
				row.setFrom(record.getStartTime().toString());
			if (record.getEndTimeIsNotNull())
				row.setTo(record.getEndTime().toString());
			//ICCO672 - Clinic Name 
			row.setMachineLocation(record.getClinicName());
			row.setTooltipForMachineLocation(record.getClinicName());
			row.setSource(record.getSource());
			row.setAppointmentType(record.getApptType());
			row.setTooltipForAppointmentType(record.getApptType());
			
			row.setStatus(record.getStatus());
			row.setTooltipForStatus(record.getStatus());

			row.setStatusDate(record.getStatusDate().getDate());
			row.setHCP(record.getBookedBy());
			row.setTooltipForHCP(record.getBookedBy());

			row.setBookedDate(record.getBookedDate().getDate());
		}
	}
	
	private boolean checkMandatory()
	{
		ArrayList<String> errors = new ArrayList<String>(2);
		if(form.StartDate().getValue() == null)
		{
			errors.add("Start Date is Mandatory");
		}
		
		if(form.EndDate().getValue() == null)
		{
			errors.add("End Date is Mandatory");
		}
		
		if(errors.size() > 0)
		{
			String[] errs = new String[errors.size()];
			errors.toArray(errs);
			engine.showErrors(errs);
			return false;
		}
		return true;
	}

	public class ApptComparer implements Comparator
	{
		public int compare(Object x, Object y) 
		{
			PatientApptDiaryVo x1 = (PatientApptDiaryVo)x;
			PatientApptDiaryVo y1 = (PatientApptDiaryVo)y;

			return y1.getStartTime().compareTo(x1.getStartTime());
		}
	}

	//Added button logic as the page can be a dialog 
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}
}
