//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment
// (version 1.17 build 40517.1630)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.
package ims.ccosched.forms.clinicview;

import ims.alerts.PatientAlertCCO;
import ims.ccosched.Helper.PatientShortHelper;
import ims.ccosched.vo.ClinicViewFilterVo;
import ims.ccosched.vo.PatTreatPlanActionLiteDisplayVo;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientApptDiaryVo;
import ims.core.vo.PatientApptDiaryVoCollection;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.Result;
import ims.dto.client.Generic_schedule;
import ims.dto.client.Lkup;
import ims.dto.client.Lookups;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity_action;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_appt_dts.Sd_appt_dtsRecord;
import ims.dto.client.Sd_clinicview;
import ims.dto.client.Sd_prfile;
import ims.framework.FormName;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.oncology.vo.PrimaryTumourDetailsShortVo;
import ims.utils.textile.Textile;

import java.text.ParseException;
import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private final String NL = new String("<BR>");
	private final Color colorAttended = Color.CornFlower;
	private static final String PLANNING_GROUP = new String("-103");
	
	protected void onFormOpen()
	{
		clearPIDAndPatient();
		
		form.Date().setValue(new Date());
		
		form.ListPatients().setEnabled(false);			
		EnableButtons(false);
		EnableArrivedPatientsButton();
		form.MainGrid().getRows().clear();
		LoadActions();
		form.getLocalContext().setUpdateComment(new Boolean(true));

		form.chkActiveClinics().setValue(true);
		setClinics(form.chkActiveClinics().getValue());
		ClinicChanged(false);

		// Status
		if (form.Status().getValues().size() == 0)
		{
			Lkup lookupDto = null;
			try
			{
				lookupDto = domain.getLookupInstance(Lookups.SchedulerClinicViewStatus);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
			}
			form.getLocalContext().setStatus(lookupDto);  
			if (lookupDto != null && lookupDto.DataCollection.count() > 1)
			{
				form.Status().newRow("-1", "All Status");
				//03/06/2003 - ICCO705
				form.Status().newRow("-2", GetStatusText("-2189")+" / "+GetStatusText("-2196")+" / "+GetStatusText("-2192"));//Open/Arrived/Attended
			}
			for(int i=0; lookupDto != null && i<lookupDto.DataCollection.count(); i++)
			{
				if (lookupDto.DataCollection.get(i).Lkup_id.equals("-2189")) // Open
					form.Status().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm + " / Arrived");
				else if ((!lookupDto.DataCollection.get(i).Lkup_id.equals("-2194")) && // if not Arrived, Moved or Rebooked
						(!lookupDto.DataCollection.get(i).Lkup_id.equals("-2195")) &&
						(!lookupDto.DataCollection.get(i).Lkup_id.equals("-2196")))
					form.Status().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm);
			}
			//12/06/2003 - Change the default to Open/Arrived/Attended
			form.Status().setValue("-2");
		}

		//Hold the last selection if we come back from other screens
		LoadLastSelection();
		loadLastSearchFields();
	}
	
	private void loadLastSearchFields() {
		if(form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVoIsNotNull()){
			
			ClinicViewFilterVo voClinicViewFilter = form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVo();
			
			if(voClinicViewFilter.getClinicDetailIsNotNull()){
				String prfiled_sess_id = voClinicViewFilter.getClinicDetail();
				ArrayList tmp = form.ClinicDetails().getValues();
				if(tmp!=null){
					for(int i=0; i<tmp.size(); i++){
						String[] item = (String[]) tmp.get(i);
						
						if (item[1].equals(prfiled_sess_id))
							form.ClinicDetails().setValue(item);
					}
				}
			}
			if(form.getGlobalContext().CcoSched.ClinicView.getDateIsNotNull()){
				form.Date().setValue(voClinicViewFilter.getDate());
			}
			if(voClinicViewFilter.getStatusIsNotNull()){
				form.Status().setValue(voClinicViewFilter.getStatus());
			}
			if(voClinicViewFilter.getActionIsNotNull()){
				form.Action().setValue(voClinicViewFilter.getAction());
			}
			if(voClinicViewFilter.getActiveIsNotNull()){
				form.chkActiveClinics().setValue(voClinicViewFilter.getActive());
			}
			
			onListPatientsClick();
		}
	}

	private void clearPIDAndPatient()
	{
		engine.clearAlertsByType(PatientAlertCCO.class);
		form.getGlobalContext().Core.setPatientShort(null);
	}
	
	private void EnableButtons(boolean flag)
	{
		
		Date date = null;

		Boolean showButtons = true; //WDEV-18117 this is for "Arrival/Location", "Action Complete", "Action Incomplete", "DNA" and "Seen" buttons

		if (form.MainGrid().getSelectedRow() != null && form.MainGrid().getSelectedRow().getValue() != null)
		{
			try
			{
				date = new Date(getDateFormatted(form.MainGrid().getSelectedRow().getValue().Appt_dt));
			}
			catch (ParseException e)
			{
				e.printStackTrace();
			}

			if (date != null && date.isGreaterThan(new Date()))
			{
				showButtons = false;
			}
		}
		
		if (flag == true)
		{
			if (form.getGlobalContext().CcoSched.ClinicView.getStatus()!= null && form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2191")) // DNA
			{
				form.Seen().setEnabled(false);
				//17/09/2003 - Override the exising functionality with the one from PatientAppointments
				form.Arrival().setEnabled(showButtons);
				form.OutcomeComplete().setEnabled(false);
				form.OutcomeIncomplete().setEnabled(false);
				form.DNA().setEnabled(showButtons);
				form.Cancel().setEnabled(false);
			}
			else if (form.getGlobalContext().CcoSched.ClinicView.getStatus()!= null && ((form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2190") || // Cancelled
					(form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2193"))))) 
			{
				form.Seen().setEnabled(false);
				form.Arrival().setEnabled(showButtons);//The enable/disable logic transferred to the Arrival dialog
				form.OutcomeComplete().setEnabled(false);
				form.OutcomeIncomplete().setEnabled(false);
				form.DNA().setEnabled(showButtons);
				form.Cancel().setEnabled(true);
			}
			else if (form.getGlobalContext().CcoSched.ClinicView.getStatus()!= null && form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2192")) //Attended
			{
				form.Seen().setEnabled(false);
				form.Arrival().setEnabled(showButtons);					
				form.DNA().setEnabled(false);
				form.Cancel().setEnabled(false);

				if (form.getLocalContext().getIsComplete() != null)
				{
					if (form.getLocalContext().getIsComplete().equalsIgnoreCase("Y"))
					{
						form.OutcomeComplete().setEnabled(false);
						form.OutcomeIncomplete().setEnabled(showButtons);
					}
					else if(form.getLocalContext().getIsComplete().equalsIgnoreCase("N"))
					{
						form.OutcomeComplete().setEnabled(showButtons);
						form.OutcomeIncomplete().setEnabled(false);
					}
					else 
					{
						form.OutcomeComplete().setEnabled(showButtons);
						form.OutcomeIncomplete().setEnabled(showButtons);
					}
				}
				else
				{
					form.OutcomeComplete().setEnabled(showButtons);
					form.OutcomeIncomplete().setEnabled(showButtons);
				}
			}
			else if (form.getGlobalContext().CcoSched.ClinicView.getStatus()!= null && ((form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2195")) || 
					(form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2194") || 
					(form.getGlobalContext().CcoSched.ClinicView.getStatus().equals("-2189"))))) // Moved, Rebooked, Open
			{
				form.Seen().setEnabled(showButtons);
				form.Arrival().setEnabled(showButtons);
				form.OutcomeComplete().setEnabled(false);
				form.OutcomeIncomplete().setEnabled(false);
				form.DNA().setEnabled(showButtons);
				form.Cancel().setEnabled(true);
			}
			else
			{
				form.Seen().setEnabled(showButtons);
				form.Arrival().setEnabled(showButtons);
				form.OutcomeComplete().setEnabled(showButtons);
				form.OutcomeIncomplete().setEnabled(showButtons);
				form.DNA().setEnabled(showButtons);
				form.Cancel().setEnabled(true);
			}	
		
			if(form.getLocalContext().getIsComplete() != null && form.getLocalContext().getIsComplete().equalsIgnoreCase("Y"))
				form.TreatmentBooked().setEnabled(true);
			else
				form.TreatmentBooked().setEnabled(false);

			form.UpdateComment().setEnabled(form.getLocalContext().getUpdateComment() != null ? form.getLocalContext().getUpdateComment().booleanValue() : false);
			if(form.getGlobalContext().CcoSched.ClinicView.getActionId() != null && 
			  !form.getGlobalContext().CcoSched.ClinicView.getActionId().equals(""))
			{
				form.TumourDetails().setEnabled(true);
				form.TrPlanComments().setEnabled(true);
			}
			else
			{
				form.TumourDetails().setEnabled(false);
				form.TrPlanComments().setEnabled(false);
			}
	
			//If Appt_head_id
			if(form.getGlobalContext().CcoSched.ClinicView.getApptHead_id() != null &&
			   form.getGlobalContext().CcoSched.ClinicView.getApptId() != null	  &&
			   (!form.getGlobalContext().CcoSched.ClinicView.getApptHead_id().equals("") || 
				!form.getGlobalContext().CcoSched.ClinicView.getApptId().equals("")))
			{
				form.History().setEnabled(true);
			}
			else
			{
				form.History().setEnabled(false);
			}
		}
		else
		{
			form.Seen().setEnabled(false);
			form.Arrival().setEnabled(false);
			form.OutcomeComplete().setEnabled(false);
			form.OutcomeIncomplete().setEnabled(false);
			form.DNA().setEnabled(false);
			form.Cancel().setEnabled(false);
			form.TreatmentBooked().setEnabled(false);
			form.UpdateComment().setEnabled(false);
			form.TumourDetails().setEnabled(false);
			form.TrPlanComments().setEnabled(false);
			form.History().setEnabled(false);
		}
	}
	
	private void EnableArrivedPatientsButton()
	{
		if (form.MainGrid().getRows().size() > 0)
		{
			if (form.getLocalContext().getContext_ContextClinicView_StatusGeneral() != null && form.getLocalContext().getContext_ContextClinicView_StatusGeneral().equals("-2191")) // DNA
			{
				form.ArrivedPatients().setEnabled(true);//As in Patient Appointments
			}
			else if (form.getLocalContext().getContext_ContextClinicView_StatusGeneral() != null && ((form.getLocalContext().getContext_ContextClinicView_StatusGeneral().equals("-2190")) || // Cancelled
				(form.getLocalContext().getContext_ContextClinicView_StatusGeneral().equals("-2193")))) 
			{
				form.ArrivedPatients().setEnabled(false);
			}
			else if (form.getLocalContext().getContext_ContextClinicView_StatusGeneral() != null && form.getLocalContext().getContext_ContextClinicView_StatusGeneral().equals("-2192")) //Attended
			{
				form.ArrivedPatients().setEnabled(true);//As in Patient Appointments
			}
			else if (form.getLocalContext().getContext_ContextClinicView_StatusGeneral() != null && form.getLocalContext().getContext_ContextClinicView_StatusGeneral().equals("-2195")) //Moved
			{
				form.ArrivedPatients().setEnabled(true);
			}
			else if (form.getLocalContext().getContext_ContextClinicView_StatusGeneral() != null && form.getLocalContext().getContext_ContextClinicView_StatusGeneral().equals("-2194")) //Rebooked
			{
				form.ArrivedPatients().setEnabled(true);
			}
			else
			{
				form.ArrivedPatients().setEnabled(true);
			}				
		}
		else
			form.ArrivedPatients().setEnabled(false);
	}
	
	private void LoadActions()
	{
		Sd_activity_action actions = null;
		try
		{
			actions = domain.listSd_activity_action();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
		

		form.getLocalContext().setActivityActionDTO(actions);
	}

	private void ClinicChanged(boolean bRefresh)
	{
		if(form.Clinic().getValue() != null)
		{
			Sd_prfile.Sd_prfileRecord profile = form.Clinic().getValue();
			
			if(profile != null)
			{
				LoadActionCombo(profile.Grp_id, profile.Activ_id);
			}

			if(bRefresh)
				Refresh();
		}
	}
	
	private void LoadActionCombo(String groupId, String activityId)
	{
		form.Action().clear();
		Sd_activity_action actions= form.getLocalContext().getActivityActionDTO();
		if(actions == null)
			return;

		//All Actions
		form.Action().newRow("-1", "All Actions");
		for(int x=0; x<actions.DataCollection.count(); x++)
		{
			//Active
			if(/*actions.Sd_activity_actionCollection[x].attAction_act_ind == "Y" &&*/
			   actions.DataCollection.get(x).Grp_id.equalsIgnoreCase(groupId) &&
				actions.DataCollection.get(x).Activ_id.equalsIgnoreCase(activityId) &&
				!ActionAlreadyInserted(actions.DataCollection.get(x).Action_id))
				form.Action().newRow(actions.DataCollection.get(x).Action_id, actions.DataCollection.get(x).Action_nm);
		}
	}
	
	private boolean ActionAlreadyInserted(String actionId)
	{
		for(int x=0; x<form.Action().getValues().size(); x++)
		{
			if (actionId.equalsIgnoreCase((String)form.Action().getValues().get(x)))
				return true;
		}

		return false;
	}
	
	private void Refresh()
	{
		form.ClinicDetails().clear();
		Clear();
		EnableButtons(false);
		form.ArrivedPatients().setEnabled(false);
	}
	
	private void Clear()
	{
		form.MainGrid().getRows().clear();
		form.NumBookings().setValue("0");
		
		clearCommentsAndRelatedAppointments();		
	}
	
	private void ClearPatientDetails()
	{
		/*form.PatientAddress().setValue("");
		form.PatientAction().setValue("");
		form.PatientDOB().setValue("");
		form.PatientHospitalNumber().setValue("");
		form.PatientName().setValue("");*/
		form.Comment().setValue("");
		/*form.PatientPostCode().setValue("");
		form.DayPhone().setValue("");
		form.NightPhone().setValue("");*/
	}
	
	private void ClearRelatedAppts()
	{
//		form.gRelatedAppt().getRows().clear();
//		form.ClinicNameRel.Value = "";
//		form.tmAppointmentTime.Value = SqlDateTime.Null;
//		form.StatusRel.Value = "";
		form.htmRelatedAppointment().setHTML("");
	}
	
	private String GetStatusText(String lkup_id)
	{
		if(form.getLocalContext().getStatus() != null)
		{
			Lkup lookupDto = form.getLocalContext().getStatus();
			for(int i=0; i<lookupDto.DataCollection.count(); i++)
			{
				if (lookupDto.DataCollection.get(i).Lkup_id.equalsIgnoreCase(lkup_id))
					return lookupDto.DataCollection.get(i).Lkup_nm;
			}
		}

		return "";
	}
	
	private void LoadLastSelection()
	{
		//Do a List in Patient
		ArrayList tmp = form.ClinicDetails().getValues();
		//If we have a selection in ClinicDetails combo then do a LisPatients.
		//then select the patient having Appt_head_id && Appt_id the same as the last selected
		if(tmp != null																		&& 
		   form.getGlobalContext().CcoSched.ClinicView.getApptHead_id() != null			&& 
		   !form.getGlobalContext().CcoSched.ClinicView.getApptHead_id().equals("") &&
		   form.getGlobalContext().CcoSched.ClinicView.getApptId() != null							&&
		   !form.getGlobalContext().CcoSched.ClinicView.getApptId().equals(""))
		{
			onListPatientsClick();
			for(int i=0; i<form.MainGrid().getRows().size(); i++)
			{
				if(form.getGlobalContext().CcoSched.ClinicView.getApptHead_id().equalsIgnoreCase(form.MainGrid().getRows().get(i).getValue().Appt_head_id) &&
				   form.getGlobalContext().CcoSched.ClinicView.getApptId().equalsIgnoreCase(form.MainGrid().getRows().get(i).getValue().Appt_id))
				{
					form.MainGrid().setValue(form.MainGrid().getRows().get(i).getValue());
					break;
				}
			}
		}
	}
	
	protected void onListPatientsClick()
	{
		if(form.Clinic().getValue()==null)
			return;
		
		Clear();

		ClinicViewFilterVo voClinicViewFilter = new ClinicViewFilterVo();
		voClinicViewFilter.setClinicName(form.Clinic().getValue().Prfile_id);
		voClinicViewFilter.setDate(form.Date().getValue());
		voClinicViewFilter.setStatus(form.Status().getValue());
		voClinicViewFilter.setActive(form.chkActiveClinics().getValue());
		voClinicViewFilter.setAction(form.Action().getValue());
		form.getGlobalContext().CcoSched.ClinicView.setClinicViewFilterVo(voClinicViewFilter);
		
		form.getGlobalContext().CcoSched.ClinicView.setClinicName(form.Clinic().getValue().Prfile_desc);
		if(form.Date().getValue()!=null)
			form.getGlobalContext().CcoSched.ClinicView.setDate(form.Date().getValue().toString(DateFormat.ISO));
		form.getGlobalContext().CcoSched.ClinicView.setClinicDetails(form.ClinicDetails().getValue());
		String status = form.Status().getValue();
		form.getLocalContext().setContext_ContextClinicView_StatusGeneral(status);

		String[] tmp = form.ClinicDetails().getValue();
		if (tmp == null || tmp.length == 0)
		{
			engine.showMessage("Cannot find patients as Clinic Details is empty."); //WDEV-18762
			return;
		}
		
		String prfile_sess_id = tmp[0];//test value - 5482
		
		String prfiled_sess_id = null;
		if (!tmp[1].equals("-1"))
			prfiled_sess_id = tmp[1];
		
		voClinicViewFilter.setClinicDetail(tmp[1]);
		
		String appt_stat = null;
		String act_comp_flg = null;
		String action_id = null;
		
		if (status != null && !status.equals("-1"))
		{
			if (status.equals("-2189")) // When Open we want the Moved, Arrived and Rebooked as well.
			{
				appt_stat = status + " || " + "-2194" + " || " + "-2195" + " || " + "-2196"; 
				act_comp_flg = "~";
			}
			else if (status.equals("-2198")) 
			{
				act_comp_flg = "Y";
			}
			else if(status.equals("-2"))
			{
				//ICCO705
				appt_stat = "-2189 || -2192 || -2194 || -2195 || -2196";//Open/Attended/Rebooked/Moved/Arrived
				act_comp_flg = "~";
			}
			else
				appt_stat = status;
		}

		//Filter with Action (-1 means All Actions)
		if(form.Action().getValue() != null && !form.Action().getValue().equals("-1"))
			action_id = form.Action().getValue();

		Sd_appt_dts appointments = null;
		try
		{
			appointments = domain.listSd_appt_dts(prfile_sess_id, prfiled_sess_id, appt_stat, act_comp_flg, action_id);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		for(int i = 0; appointments != null && i < appointments.DataCollection.count(); i++)
		{
			try
			{
			Sd_appt_dts.Sd_appt_dtsRecord appointment = appointments.DataCollection.get(i);

			//25/06/2003 - Kevin's requirement - when action is attended do not allow the appts with empty Confirmation Flag
			if(status != null && status.equals("-2") && appointment.Appt_stat.equals("-2192") && !appointment.Act_comp_flg.equals(""))
				continue;

			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();
			row.setValue(appointment);
			if (appointment.First_appt_id.equals(appointment.Appt_id))
				row.setBooking(form.getImages().CcoSched.First);
			else if (appointment.Last_appt_id.equals(appointment.Appt_id))
				row.setBooking(form.getImages().CcoSched.Last);
			//19/01/2005 - Set the Impatient based on the ploc flag
			if(isInpatient(appointment.Ploc))
				row.setInpatient(form.getImages().CcoSched.Inpatient);
			/*if (appointment.Attnd_asid.equals("-401") || appointment.Attnd_asid.equals("-402"))
				row.setInpatient(form.getImages().Scheduler.Inpatient);*/				
			
			int nCount = appointment.Stm.length();
			if(nCount > 0)
			{
				if (nCount < 6)
					for (int a = 0; a < 6 - nCount; a++)
						appointment.Stm = "0" + appointment.Stm;

				//18/06/2003 - For allowing the tooltip to be displayed
				row.setAppointmentTime(getTimeFromString(appointment.Stm));// = appTime.IsNull?"":appTime.Value.ToString("HH:mm");//appTime.IsNull?SqlDateTime.Null:new SqlDateTime(appTime.Value);
			}
			if(appointment.Att_tm.length() > 0)
			{
				row.setAttendanceTime(getTimeFromString(appointment.Att_tm));// = attTime.IsNull?"":attTime.Value.ToString("HH:mm");//attTime.IsNull?SqlDateTime.Null:new SqlDateTime(attTime.Value);
			}
			
			row.setHospitalNumber(appointment.Hospnum);
			//12/06/2003 - The Surname has to be first
			row.setName(appointment.Snm + " " + appointment.Fnm1);
			row.setTransport(appointment.Trans_typtxt);
			if (appointment.Act_consult!="")
				row.setConsultant(appointment.Act_consulttxt);
			else
			{
				//take from appointmentdetail mos
				row.setConsultant(appointment.Lo_idtxt);
			}
			//10/03/2004 - Other Appt. removed
//			if (appointment.attRel_appt_head_id == "")
//				row.Other = false;
//			else
//				row.Other = true;
			row.setCategory(appointment.Txcattypetxt);
			
			// WDEV-13568 This has always been appt_stat, should be location - Sess_lcnm
						
		    row.setLocation(domain.getLocationText(appointment.Att_stat)); //WDEV-14155 -was appointment.Sess_lcnm
			 				
			row.setStatus(appointment.Appt_stattxt);
			//#region 11/03/2004 - If Seen (Attended) then change the colour
			if(appointment.Appt_stat.equals("-2192"))
				row.setBackColor(colorAttended);
			//#endregion
			if (appointment.Act_comp_flg.equalsIgnoreCase("Y"))  
				row.setCompleteIncomplete(form.getImages().CcoSched.Complete);
			else if (appointment.Act_comp_flg.equalsIgnoreCase("N")) // WDEV-13568 treat null as incomplete
				row.setCompleteIncomplete(form.getImages().CcoSched.Incomplete);
			else if (appointment.Act_comp_flg.equalsIgnoreCase("B"))
				row.setCompleteIncomplete(form.getImages().CcoSched.Booked);
			else // WDEV-14313
				row.setCompleteIncomplete(null);
			if (appointment.Appt_stat.equals("-2196")) // Arrived
				row.setBackColor(Color.Tan);
			else if (appointment.Appt_stat.equals("-2195") && appointment.Arr_tme.length() > 0) // Moved
				row.setBackColor(Color.Tan);
			//30/05/2003 - Jacinta's Requirement - Arrival Time in a Tooltip
			StringBuffer sb = new StringBuffer();
			sb.append("<b>"+ appointment.Fnm1 + " " + appointment.Snm + "</b>");
			sb.append(NL);
			sb.append("Arrival Time: " + getTimeFromString(appointment.Arr_tme));
			sb.append(NL);
			sb.append("Machine Name: " + appointment.Mc_nm);
			sb.append(NL);
			sb.append("Location: "	 + domain.getLocationText(appointment.Att_stat));//WDEV-14155 - was appointment.Sess_lcnm
			row.setTooltip(sb.toString());
			
			//02/09/2003 - Session Detail description?
			//row.Session = appointment.attPrfile_sess_idtxt;//Ask Kevin about that
			}
			catch (DomainInterfaceException e)
			{
				
				engine.showMessage(e.getMessage());
			}
		}
		if (form.MainGrid().getRows().size() == 0)
			engine.showMessage("No records.");
		
		if(appointments != null)
			form.NumBookings().setValue(String.valueOf(appointments.DataCollection.count()));
		
		EnableButtons(false);
		EnableArrivedPatientsButton();
	}
	/* (non-Javadoc)
	 * @see ims.scheduler.forms.clinicview.Handlers#onClinicValueChanged()
	 */
	protected void onClinicValueChanged()
	{
		clearCommentsAndRelatedAppointments();
		
		ClinicChanged(true);
	}

	private void clearCommentsAndRelatedAppointments()
	{
		ClearPatientDetails();
		ClearRelatedAppts();
		
		form.getGlobalContext().Core.setPatientShort(null);
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
	}
	
	
	/* (non-Javadoc)
	 * @see ims.scheduler.forms.clinicview.Handlers#onFormDialogClosed(ims.framework.FormName, ims.framework.enumerations.DialogResult)
	 */
	protected void onFormDialogClosed(FormName formName, DialogResult result)
	{
		if (result.equals(DialogResult.CANCEL))
			return;
		
		// wdev-7173 - If action complete pressed ok and planning group, instantiate event
		if (formName.equals(form.getForms().CcoSched.ClinicViewOutcomeComplete))
		{
			Sd_appt_dts.Sd_appt_dtsRecord tmp = form.MainGrid().getValue();
			if (tmp != null && tmp.Grp_id != null && tmp.Grp_id.equals(PLANNING_GROUP))
			{
				// If this appointment is associated with a treatment plan, get the rkey
				if (tmp.Treatpl_act_id != null && !tmp.Treatpl_act_id.equals(""))
				{
					//	Record the actual attendance of this appointment
					try 
					{			
						String apptDtDetails = tmp.Appt_dt;
						if (tmp.Stm.length() == 5)
							apptDtDetails += "0";
						apptDtDetails += tmp.Stm;
						
						domain.instantiateEvent(tmp.Treatpl_act_id, tmp.First_appt_id,apptDtDetails, tmp.Activity_id);
					}
					catch (DomainInterfaceException e) 
					{
						engine.showMessage(e.getMessage());
					}
					catch (StaleObjectException e) 
					{
						engine.showMessage(e.getMessage());
					}				
				}
			}
		}
		

		if(formName.equals(form.getForms().CcoSched.LkupSelect))
		{
			Date dt = domain.getDateTime().getDate();
			String screendate;

			dt = form.Date().getValue();
			//screendate = dt.toString(DateFormat.STANDARD);
			
			String clinic = form.Clinic().getValue().Prfile_id;
			
			engine.open(form.getForms().CcoSched.PrintLetter,new  Object[]{form.getGlobalContext().CcoSched.LkupSelect.getLkupID(),dt,clinic});
			return;
		}

		if(formName.equals(form.getForms().CcoSched.BookingCommentUpdate))
		{
			//Do a GetForUpdate
			if(form.getLocalContext().getBookingUpdateDTO() != null)
			{
				Sd_appt appointments = form.getLocalContext().getBookingUpdateDTO();
				Result result1 = appointments.getForUpdate();
				if (result1 != null)
				{
					engine.showMessage(result1.getMessage());
					return;
				}

				appointments.DataCollection.get(0).Cmts = form.getGlobalContext().CcoSched.ClinicView.getBookingComment();
				//Update the context
				//Context.ContextClinicView.BookingComment  = form._GlobalContext.Scheduler.ClinicView.BookingComment.Value;
				//Do an Update
				result1 = appointments.update();
				if (result1 != null)
				{
					engine.showMessage(result1.getMessage());
					return;
				}

				//Refresh the comments
				form.Comment().setValue(form.getGlobalContext().CcoSched.ClinicView.getBookingComment());
				//Update the comment in the grid
				//form.MainGrid().SelectedValue.attAppt_cmts = Context.ContextClinicView.BookingComment;
				form.MainGrid().getRowByValue(form.MainGrid().getValue()).getValue().Appt_cmts = form.getGlobalContext().CcoSched.ClinicView.getBookingComment();
			}
			else
			{
				engine.showMessage("No appointment selected");
				return;
			}
		}
		else
		{
			if (form.MainGrid().getValue() != null)
			{
				if (formName.equals(form.getForms().CcoSched.ClinicViewSeen))
				{
					Sd_appt_dts.Sd_appt_dtsRecord tmp = form.MainGrid().getValue();
					for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
						if (form.MainGrid().getRows().get(i).getValue().Appt_head_id.equalsIgnoreCase(tmp.Appt_head_id) && form.MainGrid().getRows().get(i).getValue().Appt_id.equalsIgnoreCase(tmp.Appt_id))
						{							
							form.MainGrid().setValue(form.MainGrid().getRows().get(i).getValue());
							form.MainGrid().getRows().get(i).getValue().Appt_stat = "-2192";
							form.getGlobalContext().CcoSched.ClinicView.setStatus("-2192");
							form.MainGrid().getRows().get(i).setStatus(GetStatusText("-2192"));//"Attended"
							form.MainGrid().getRows().get(i).setBackColor(colorAttended);
							break;
						}
					EnableButtons(true);
				}
				else
				{
					Sd_appt_dts.Sd_appt_dtsRecord tmp = form.MainGrid().getValue();
					onListPatientsClick();
					//25/02/2005 - (Kevin's requirement) If no patients returned then clear the Patient Selected from the context
					if(form.MainGrid().getRows().size() == 0)
					{
						form.getGlobalContext().Core.setPatientShort(null);
					}
					else
					{
						for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
							if (form.MainGrid().getRows().get(i).getValue().Appt_head_id.equalsIgnoreCase(tmp.Appt_head_id) && form.MainGrid().getRows().get(i).getValue().Appt_id.equalsIgnoreCase(tmp.Appt_id))
							{
								form.MainGrid().setValue(form.MainGrid().getRows().get(i).getValue());
								onMainGridSelectionChanged();
								break;
							}
					}
				}
			}
		}
	}
	/* (non-Javadoc)
	 * @see ims.scheduler.forms.clinicview.Handlers#onListClinicDetailsClick()
	 */
	protected void onListClinicDetailsClick()
	{
		if(getUIErrors())
			return;
		//21/08/2003 - Store the Date in the Context for Arrival Dialog
		form.getGlobalContext().CcoSched.ClinicView.setDate(form.Date().getValue().toString(DateFormat.ISO));

		clearCommentsAndRelatedAppointments();
		form.ClinicDetails().clear();
		Clear();
		
		Sd_clinicview sessions = null;
		try
		{
			sessions = domain.getSd_clinicview(form.Clinic().getValue().Prfile_id, form.Date().getValue().toString(DateFormat.ISO));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		for(int i = 0; sessions != null && i < sessions.DataCollection.count(); i++)
		{
			Sd_clinicview.Sd_clinicviewRecord session = sessions.DataCollection.get(i);
			
			Sd_clinicview tmp = null;
			try
			{
				tmp = domain.listSd_clinicview(session.Prfile_sess_id);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			Sd_clinicview.Sd_clinicviewRecord obj = tmp.DataCollection.get(0);
			String[] value = null;
			String[] defaultValue = null;
			if (obj.Prfiled_sess_id1Collection.count() > 1)
			{
				value = new String[]{session.Prfile_sess_id, "-1"};
				form.ClinicDetails().newRow(value, "All Details");
				defaultValue = value;
			}
			for(int j = 0; j < obj.Prfiled_sess_id1Collection.count(); j++)
			{
				Sd_clinicview.Sd_clinicviewPrfiled_sess_id1Record c = obj.Prfiled_sess_id1Collection.get(j);
				value = new String[]{obj.Prfile_sess_id, c.Prfiled_sess_id1};
				form.ClinicDetails().newRow(value, obj.Sess_desc + " " + c.Sessd_desc);
			}
			
			if (obj.Prfiled_sess_id1Collection.count() == 1)
				form.ClinicDetails().setValue(value);
			else if (defaultValue!=null)
				form.ClinicDetails().setValue(defaultValue);
		}
		if (form.ClinicDetails().getValues().size() == 0)
			engine.showMessage("No records.");
		
		if (form.ClinicDetails().getValues().size() > 0)
			form.ListPatients().setEnabled(true);
		else
			form.ListPatients().setEnabled(false);

		EnableArrivedPatientsButton();
		EnableButtons(false);
		
	}
	
	private boolean getUIErrors()
	{
		StringBuilder errors = new StringBuilder();
		if(form.Clinic().getValue() == null)
			errors.append("Clinic Name is mandatory");
		
		if(form.Date().getValue() == null)
		{
			if(errors.length() > 0)
				errors.append("\n");
			errors.append("Date is mandatory");
		}

		if(errors.length() > 0)
		{
			engine.showMessage(errors.toString());
			return true;
		}
		
		return false;
	}
	/* (non-Javadoc)
	 * @see ims.scheduler.forms.clinicview.Handlers#onMainGridSelectionChanged()
	 */
	protected void onMainGridSelectionChanged()
	{
		ClearPatientDetails();
		ClearRelatedAppts();
		ims.dto.client.Sd_appt_dts.Sd_appt_dtsRecord apptRecord = form.MainGrid().getValue();
		form.getGlobalContext().CcoSched.ClinicView.setApptDetails(apptRecord);
		form.getGlobalContext().CcoSched.ClinicView.setAppointmentHeaderID(apptRecord.Appt_head_id);
		form.getGlobalContext().CcoSched.ClinicView.setAppointmentID(apptRecord.Appt_id);

		//------ //19/08/2003 -------
		form.getGlobalContext().CcoSched.ClinicView.setActionId(apptRecord.Treatpl_act_id);
		form.getGlobalContext().CcoSched.ClinicView.setApptHead_id(apptRecord.Appt_head_id);
		form.getGlobalContext().CcoSched.ClinicView.setApptId(apptRecord.Appt_id);
		form.getGlobalContext().CcoSched.ClinicView.setCategory(apptRecord.Txcattypetxt);
		//---------------------------

		//------- //20/01/2005 --------
		//Set the inpatient value
		form.getGlobalContext().CcoSched.ClinicView.setInpatient((isInpatient(form.MainGrid().getValue().Ploc))?"Y":"N");
		//-----------------------------
		Patient dtoPatient;
		PatientShort patient;
		StringBuffer address = new StringBuffer(200);

		try
		{
			
			patient = domain.getPatient(new PatientRefVo(Integer.valueOf(apptRecord.Patient),0));
			
			if (patient.getAddressIsNotNull())
			{
				address.append(patient.getAddress().getAddressBuildingName());
				address.append(patient.getAddress().getAddressStreet());
				address.append(patient.getAddress().getAddressPostTown());
				address.append(patient.getAddress().getAddressLocality());
				address.append(patient.getAddress().getAddressLine5());
			}
			
			form.getGlobalContext().Core.setPatientShort(patient);
			DisplayRelatedAppointments(apptRecord);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (NumberFormatException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		//Save the patient in the context before calling other services that might fail!!!!			
		form.getGlobalContext().CcoSched.PatientSearch.setAlive(new Boolean(true));
	
		form.getGlobalContext().CcoSched.ClinicView.setBookingComment(apptRecord.Appt_cmts);
		form.getGlobalContext().CcoSched.ClinicView.setStatus(apptRecord.Appt_stat);
		form.getGlobalContext().CcoSched.ClinicView.setReason(apptRecord.Att_stat_reas);

		if (apptRecord.Act_comp_flg.equals("Y"))
			form.getLocalContext().setIsComplete("Y");
		else if (apptRecord.Act_comp_flg.equals("N"))
			form.getLocalContext().setIsComplete("N");
		else if (apptRecord.Act_comp_flg.equals("B"))
			form.getLocalContext().setIsComplete("B");
		else
			form.getLocalContext().setIsComplete(null);
		
		form.Comment().setValue((form.MainGrid().getValue()).Appt_cmts);
		
		//WDEV-16919
		form.getGlobalContext().setPatTreatmentPlan(null);
		PatTreatPlanActionLiteDisplayVo tplanAct = null;
		
		if (form.getGlobalContext().CcoSched.ClinicView.getActionId() != null && form.getGlobalContext().CcoSched.ClinicView.getActionId().length() > 0)
		{
		form.getGlobalContext().setPatTreatmentPlan(domain.getTreatmentPlan(new Integer(form.getGlobalContext().CcoSched.ClinicView.getActionId())));	
		tplanAct = domain.getPatTreatActionDisplayData(new Integer(form.getGlobalContext().CcoSched.ClinicView.getActionId()));
		}
		
		setPIDTooltip(patient,form.getGlobalContext().getPatTreatmentPlan(),tplanAct);
		

		//25/02/2005 - Disable the buttons if status = -2199 (Kevin requirement)
		if(apptRecord.Appt_stat.equals("-2199"))
			EnableButtons(false);
		else
			EnableButtons(true);
		
	}
	//WDEV-16919 this method is now parameterized
	private void setPIDTooltip(PatientShort patient, PatTreatmentPlanLiteVo tplan, PatTreatPlanActionLiteDisplayVo action)
	{
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
		engine.addAlert(new ims.alerts.PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltipClinicView(patient, tplan, action)));
	}
	
	private void setPatientIntoContext(Patient.PatientRecord patient)
	{
		PatientShort patientShort = new PatientShortHelper().getPatientShort(patient);
		
		ims.core.vo.PatientShort voPatient = null;

		if(patientShort != null)
		{
			try
			{
				voPatient = domain.getPatient(patientShort);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(e.getMessage());
			}
			catch (DomainInterfaceException exc)
			{
				engine.showMessage(exc.getMessage());
			}
		}
		
		form.getGlobalContext().Core.setPatientShort(voPatient);
	}
	
	private void DisplayDTORelatedAppointments()
	{
		Generic_schedule genericSchedules;
		
		form.htmRelatedAppointment().setHTML("");
		
		try
		{
			genericSchedules = domain.getGeneric_schedule(form.getGlobalContext().Core.getPatientShort().getPkey().getValue(), form.Date().getValue().toString(DateFormat.ISO));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; genericSchedules != null && i < genericSchedules.DataCollection.count(); ++i)
		{
			//ICCO935 2) - Related appointments should not show the current appointment 
			//exclude appt_id and appt_head_id matches
			String[] apptIds = StringUtils.splitString(genericSchedules.DataCollection.get(i).F_appt_id, ",");
			if(apptIds != null && apptIds.length == 2)
			{
				if(form.MainGrid().getValue().Appt_head_id.equals(apptIds[0]) &&
				   form.MainGrid().getValue().Appt_id.equals(apptIds[1]))
					continue;
			}
			//End fix

			String apptTime = ""; 
			if(genericSchedules.DataCollection.get(i).App_st_time.length() > 0)
				apptTime = getTimeFromString(genericSchedules.DataCollection.get(i).App_st_time);

			StringBuffer sb = new StringBuffer();
			sb.append("*Clinic Name:* " + genericSchedules.DataCollection.get(i).Clin_nm);
			sb.append(NL);
			sb.append("*Appt. Time: *"  + apptTime);
			sb.append(NL);
			sb.append("*Status: *" + genericSchedules.DataCollection.get(i).F_status);
			form.htmRelatedAppointment().setHTML(new Textile().process(sb.toString()));
		}
	}

	/**
	 * WDEV-13756 - Display all other appointments for this patient
	 * @param apptRecord 
	 */
	private void DisplayRelatedAppointments(Sd_appt_dtsRecord apptRecord)
	{
		form.htmRelatedAppointment().setHTML("");
		
		//WDEV-15170
		PatientApptDiaryVoCollection appts = domain.listPatientAppts(form.getGlobalContext().Core.getPatientShort(), form.Date().getValue(), form.Date().getValue(), true);
		
		PatientApptDiaryVo appt;
		StringBuffer sb = new StringBuffer();
		for (int i = 0; appts != null && i < appts.size(); ++i)
		{
			//ICCO935 2) - Related appointments should not show the current appointment 
			//exclude appt_id and appt_head_id matches
			appt = appts.get(i);
			if (appt.getAppointHeaderIdIsNotNull() && appt.getAppointmentIdIsNotNull() 
					&& appt.getAppointHeaderId().equals(Integer.valueOf(apptRecord.Appt_head_id)) 
					&& appt.getAppointmentId().equals(Integer.valueOf(apptRecord.Appt_id)))
					continue;
			//End fix

		/*	sb.append("*Clinic Name:* " + appt.getClinicName());
			sb.append(NL);
			sb.append("*Appt. Time: *"  + appt.getStartTime());
			sb.append(NL);
			sb.append("*Status: *" + appt.getStatus()); */
			
			sb.append("*Clinic:* " + appt.getClinicName() + "&nbsp; *Time:* " + appt.getStartTime() + "&nbsp; *Status:* " + appt.getStatus());
			sb.append(NL);
			sb.append(NL);
		}
		
		form.htmRelatedAppointment().setHTML(new Textile().process(sb.toString()));
	}

	protected void onOutcomeCompleteClick()
	{
		if(form.MainGrid().getValue() != null)
		{
			form.getGlobalContext().CcoSched.ClinicView.setApptDetails(form.MainGrid().getValue());
			engine.open(form.getForms().CcoSched.ClinicViewOutcomeComplete);
		}
		else
		{
			//02/03/2005 - We need an extra check for the selected value as the framework may act a bit slowly than
			//the user and having a record selected but the value not set.
			engine.showMessage("Please select a Patient.");
		}
	}

	protected void onOutcomeIncompleteClick()
	{
		if(form.MainGrid().getValue() != null)
		{
			form.getGlobalContext().CcoSched.ClinicView.setApptDetails(form.MainGrid().getValue());
			engine.open(form.getForms().CcoSched.ClinicViewOutcomeIncomplete);
		}
		else
		{
			//02/03/2005 - We need an extra check for the selected value as the framework may act a bit slowly than
			//the user and having a record selected but the value not set.
			engine.showMessage("Please select a Patient.");
		}
	}

	protected void onDNAClick()
	{
		form.getGlobalContext().CcoSched.ClinicView.setApptId(form.MainGrid().getValue().Appt_id);
		form.getGlobalContext().CcoSched.ClinicView.setApptHead_id(form.MainGrid().getValue().Appt_head_id);
		engine.open(form.getForms().CcoSched.ClinicViewDNA);
	}
	
	protected void onCancelClick()
	{
		StringBuffer title = new StringBuffer();
		Sd_appt_dts.Sd_appt_dtsRecord record = form.MainGrid().getValue();
		title.append("Cancel Appointment ");
		title.append(getDateFormatted(record.Appt_dt));
		title.append("  Att.Time: ");
		title.append(getTimeFromString(record.Att_tm));
		title.append("  Type: ");
		title.append(record.Trans_typtxt);
		title.append("  Action: ");
		title.append(record.Action_idtxt);
		title.append("  Machine: ");
		title.append(record.Mc_nm);
		title.append("  Session: ");
		title.append(record.Sess_lcnm);
		title.append("  Status:");
		title.append(record.Appt_stattxt);
		form.getGlobalContext().CcoSched.ClinicViewCancel.setDialogTitle(title.toString());
		engine.open(form.getForms().CcoSched.ClinicViewCancel);
	}
	
	protected void onArrivedPatientsClick()
	{
		//19/11/2004 - the context variable is not persistant anymore so we have to set it again 
		if(form.getGlobalContext().CcoSched.ClinicView.getClinicName() == null && form.Clinic().getValue() != null)
			form.getGlobalContext().CcoSched.ClinicView.setClinicName(form.Clinic().getValue().Prfile_desc);
		if(form.getGlobalContext().CcoSched.ClinicView.getClinicDetails() == null && form.ClinicDetails().getValue() != null)
			form.getGlobalContext().CcoSched.ClinicView.setClinicDetails(form.ClinicDetails().getValue());
		engine.open(form.getForms().CcoSched.ArrivedPatients);
	}
	
	protected void onArrivalClick()
	{
		//Set the context variables  
		form.getGlobalContext().CcoSched.ClinicView.setCategory(form.MainGrid().getValue().Txcattypetxt);
		form.getGlobalContext().CcoSched.ClinicView.setApptId(form.MainGrid().getValue().Appt_id);
		form.getGlobalContext().CcoSched.ClinicView.setApptHead_id(form.MainGrid().getValue().Appt_head_id);
		
		engine.open(form.getForms().CcoSched.ClinicViewArrival);
	}
	protected void onSeenClick()
	{
		//04/03/2003 - Kevin's requirement - Get, GetForUpdate, Update
		//change request for a quicker way to update the record
		if(form.getGlobalContext().CcoSched.ClinicView.getAppointmentHeaderID() == null)
		{
			engine.showMessage("Please select a Patient.");
		}

		Sd_appt appointments = null;
		try
		{
			appointments = domain.getAndGetForUpdateSd_appt(form.getGlobalContext().CcoSched.ClinicView.getAppointmentHeaderID());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}

		//foreach (dto.Sd_apptDTO.Appt_idClient app in appointments.Sd_apptCollection[0].Appt_idCollection)
		for(int i = 0; appointments != null && i < appointments.DataCollection.get(0).Appt_idCollection.count(); i++)
		{
			Sd_appt.Sd_apptAppt_idRecord app = appointments.DataCollection.get(0).Appt_idCollection.get(i);
			
			if (app.Appt_id.equalsIgnoreCase(form.getGlobalContext().CcoSched.ClinicView.getAppointmentID()))
			{
				Time dt = domain.getDateTime().getTime();
				app.Tm_seen = dt.toString(TimeFormat.FLAT6);
				app.Appt_stat = "-2192"; //Attended
				//20/01/2005 - set the Inpatient status
				app.Appinpatstat = isInpatient(form.MainGrid().getValue().Ploc)?"Y":"N";
				break;
			}	
		}
		
		try
		{
			domain.updateSd_appt(appointments);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		

		//Update the grid record
		if (form.MainGrid().getValue() != null)
		{
			Sd_appt_dts.Sd_appt_dtsRecord tmp = form.MainGrid().getValue();
			for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
				if (form.MainGrid().getRows().get(i).getValue().Appt_head_id.equalsIgnoreCase(tmp.Appt_head_id) && form.MainGrid().getRows().get(i).getValue().Appt_id.equalsIgnoreCase(tmp.Appt_id))
				{							
					form.MainGrid().setValue(form.MainGrid().getRows().get(i).getValue());							
					form.MainGrid().getRows().get(i).setStatus(GetStatusText("-2192"));//"Attended";
					form.MainGrid().getValue().Appt_stat = "-2192";
					form.getGlobalContext().CcoSched.ClinicView.setStatus("-2192");
					break;
				}
		}

		EnableButtons(true);
	}

	protected void onPrintClick()
	{
		form.getGlobalContext().CcoSched.setTemplateCategoryIDList("-24");

		String sPrfile_sess_id = "";
		String sPrfiled_sess_id = "";
		String sAppt_stat = "";
		
		//check minimum data selected
		String[] tmp = form.ClinicDetails().getValue();
		if (tmp == null || tmp.length == 0)
		{
			engine.showMessage("Please select Clinic Details.");
			return;
		}
		sPrfile_sess_id = tmp[0];//test value - 5482

		if (!tmp[1].equals("-1"))
			sPrfiled_sess_id = tmp[1];

		if (form.Status().getValue()!=null && !form.Status().getValue().equals("-1"))//WDEV-15586
		{
			if (form.Status().getValue().equals("-2189")) // When Open we want the Moved, Arrived and Rebooked as well.
				sAppt_stat = form.Status().getValue() + " || " + "-2194" + " || " + "-2195" + " || " + "-2196";
			else if(form.Status().getValue().equals("-2"))//Kevin's requirement
				sAppt_stat = "-2189 || -2192 || -2194 || -2195 || -2196";
			else
				sAppt_stat = form.Status().getValue();
		}
		form.getGlobalContext().CcoSched.ClinicView.setAppt_stat(sAppt_stat);
		
		//WDEV-15837		
		//First get the Order by
		form.getGlobalContext().CcoSched.LkupSelect.setLkupTypeID("3549");		
		engine.open(form.getForms().CcoSched.LkupSelect,"Order by");
		
	}
	protected void onTreatmentBookedClick()
	{
		Sd_appt appointments = null;
		try
		{
			appointments = domain.getAndGetForUpdateSd_appt(form.getGlobalContext().CcoSched.ClinicView.getAppointmentHeaderID());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		//Update the attAct_comp_flg = B for the selected Appt_id from the grid
		//foreach (dto.Sd_apptDTO.Appt_idClient app in appointments.Sd_apptCollection[0].Appt_idCollection)
		for(int i = 0; appointments != null && i < appointments.DataCollection.get(0).Appt_idCollection.count(); i++)
		{
			Sd_appt.Sd_apptAppt_idRecord app = appointments.DataCollection.get(0).Appt_idCollection.get(i);
		
			if (app.Appt_id.equalsIgnoreCase(form.getGlobalContext().CcoSched.ClinicView.getAppointmentID()))
			{
				app.Act_comp_flg = "B"; //Booked
				//20/01/2005 - Set the Inpat value
				if(form.getGlobalContext().CcoSched.ClinicView.getInpatientIsNotNull())
					app.Appinpatstat = form.getGlobalContext().CcoSched.ClinicView.getInpatient();
				break;
			}
		}
		//Update
		try
		{
			domain.updateSd_appt(appointments);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("Failed to update record." + "\n" + e.getMessage());
			return;
		}
		
		//Update the grid
		if(form.MainGrid().getValue() != null)
		{
			form.MainGrid().getRowByValue(form.MainGrid().getValue()).setCompleteIncomplete(form.getImages().CcoSched.Booked);
			form.getLocalContext().setIsComplete("B");
			EnableButtons(true);
		}
	}
	protected void onUpdateCommentClick()
	{
		//Do a Get and display the comment obtained from Get in the dialog
		if(form.MainGrid().getValue() == null)
		{
			engine.showMessage("Please select a patient.");
			return;
		}

		Sd_appt appointments = null;
		try
		{
			appointments = domain.getSd_appt(form.MainGrid().getValue().Appt_head_id);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		form.getLocalContext().setBookingUpdateDTO(appointments);

		form.getGlobalContext().CcoSched.ClinicView.setBookingComment(appointments.DataCollection.get(0).Cmts);
		//Refresh comment for the case in which it was updated before doing the this get
		form.Comment().setValue(appointments.DataCollection.get(0).Cmts);

		engine.open(form.getForms().CcoSched.BookingCommentUpdate);
	}
	
	protected void onFormClosing(CancelArgs args)
	{
		form.getGlobalContext().CcoSched.ClinicView.setBookingComment(null);
		//19/08/2003 - Clear variables used only for dialogs
		form.getGlobalContext().CcoSched.ClinicView.setActionId(null);
		//20/01/2005 - Clear Inpatient flag
		if(form.getGlobalContext().CcoSched.ClinicView.getInpatientIsNotNull())
			form.getGlobalContext().CcoSched.ClinicView.setInpatient(null);
	}
	protected void onTumourDetailsClick()
	{
		PatTreatmentPlanLiteVo treatplVo = domain.getTreatmentPlan(new Integer(form.MainGrid().getValue().Treatpl_act_id));
		form.getGlobalContext().setPatTreatmentPlan(treatplVo);
		if (treatplVo != null)
		{
			//WDEV-16414
			PrimaryTumourDetailsShortVo tempPrimaryTumourDet = domain.getPrimaryTumourDetailRecordFromEpisode(treatplVo.getEpisode());
			if (tempPrimaryTumourDet==null)
			{
				engine.showMessage("Tumour Details Removed.");
				return;
			}
			
			form.getGlobalContext().Oncology.setSelectedPrimaryTumourDetail(tempPrimaryTumourDet);
			engine.open(form.getForms().CcoSched.ClinicViewTumourDetails);	
		}
		else
			engine.showMessage("No Tumour details were found to display.");
	}
	protected void onTrPlanCommentsClick()
	{
		form.getGlobalContext().setPatTreatmentPlan(domain.getTreatmentPlan(new Integer(form.MainGrid().getValue().Treatpl_act_id)));
		engine.open(form.getForms().CcoSched.ClinicViewTPlanComment);
	}
	protected void onHistoryClick()
	{
		form.getGlobalContext().CcoSched.ClinicView.setApptId(form.MainGrid().getValue().Appt_id);
		form.getGlobalContext().CcoSched.ClinicView.setApptHead_id(form.MainGrid().getValue().Appt_head_id);
		form.getGlobalContext().CcoSched.ClinicView.setActionId(form.MainGrid().getValue().Treatpl_act_id);
		if (form.MainGrid().getValue().Treatpl_act_id != null && !form.MainGrid().getValue().Treatpl_act_id.equals(""))
			form.getGlobalContext().setPatTreatmentPlan(domain.getTreatmentPlan(new Integer(form.MainGrid().getValue().Treatpl_act_id)));
		engine.open(form.getForms().CcoSched.ClinicViewHistory);
	}
	protected void onDateValueChanged()
	{
		Refresh();
	}
	private boolean isInpatient(String Ploc)
	{
		Integer ploc = GetInteger(Ploc);
		if(ploc == null || ploc.intValue() == 0)
			return false;
		
        return true;
	}
	private Integer GetInteger(String val)
	{
		Integer newVal = null;
		if(val != null && !val.equals(""))
		{
			try{newVal = Integer.valueOf(val);}
			catch(NumberFormatException e)
			{engine.showMessage(e.getMessage());}
		}

		return newVal;	
	}
	
	private String getDateFormatted(String date)
	{
		Date dt = null;
		try
		{
			dt = new Date(date, DateFormat.ISO);
		} catch (Exception e)
		{
			//dt = null;
		}
		return dt != null?dt.toString(DateFormat.STANDARD):"";
	}
	private String getTimeFromString(String time)
	{
		Time tm = null;
		if(time != null && !time.equals(""))
		try{ tm = new Time(time, TimeFormat.FLAT6);}catch(RuntimeException e){}
		return tm != null?tm.toString(TimeFormat.DEFAULT):"";
	}

	protected void onChkActiveClinicsValueChanged() //throws PresentationLogicException 
	{
		setClinics(form.chkActiveClinics().getValue());
	}
	
	private void setClinics(boolean bActive)
	{
		//backup the value set if any
		String profile_id = form.Clinic().getValue()!=null?form.Clinic().getValue().Prfile_id:"-1";
		
		String clinicId = "";
		if(form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVoIsNotNull()
				&& form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVo().getClinicNameIsNotNull())
			clinicId = form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVo().getClinicName();
		
		form.Clinic().clear();
		if (form.Clinic().getValues().size() == 0)
		{
			String act_ind = null;
			if(bActive)
				act_ind = "Y";
			
			Sd_prfile profiles = null;
			try
			{
				profiles = domain.listSd_prfile(act_ind);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			Sd_prfile.Sd_prfileRecord clinic = null;
			for(int i = 0; profiles != null && i < profiles.DataCollection.count(); i++)
			{
				Sd_prfile.Sd_prfileRecord item = profiles.DataCollection.get(i);
				form.Clinic().newRow(item, item.Prfile_desc);
				//Set back the preselected value
				if(!profile_id.equals("-1") && profile_id.equals(item.Prfile_id))
					form.Clinic().setValue(item);
				if(item.Prfile_id.equals(clinicId))
					clinic = item;
			}
			if(clinic!=null){
				form.Clinic().setValue(clinic);
				onClinicValueChanged();
				
				if(form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVoIsNotNull()
						&& form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVo().getDateIsNotNull())
					form.Date().setValue(form.getGlobalContext().CcoSched.ClinicView.getClinicViewFilterVo().getDate());
			
				onListClinicDetailsClick();
			}
		}
	}
}
