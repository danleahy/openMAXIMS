//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.rebooking;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ResourceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(Object value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(Object value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(Object value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(Object value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(Object value)
		{
			return super.control.removeRow(value);
		}
		public Object getValue()
		{
			return super.control.getValue();
		}
		public void setValue(Object value)
		{
			super.control.setValue(value);
		}
	}
	public static class EnergyUnitComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Unit value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Unit getValue()
		{
			return (ims.ccosched.vo.lookups.Unit)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Unit value)
		{
			super.control.setValue(value);
		}
	}
	public static class ModalityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Modality value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Modality getValue()
		{
			return (ims.ccosched.vo.lookups.Modality)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Modality value)
		{
			super.control.setValue(value);
		}
	}
	public static class ListOwnerComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.dto.client.Sd_activstaff.Sd_activstaffRecord value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.dto.client.Sd_activstaff.Sd_activstaffRecord value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.dto.client.Sd_activstaff.Sd_activstaffRecord value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.dto.client.Sd_activstaff.Sd_activstaffRecord value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.dto.client.Sd_activstaff.Sd_activstaffRecord value)
		{
			return super.control.removeRow(value);
		}
		public ims.dto.client.Sd_activstaff.Sd_activstaffRecord getValue()
		{
			return (ims.dto.client.Sd_activstaff.Sd_activstaffRecord)super.control.getValue();
		}
		public void setValue(ims.dto.client.Sd_activstaff.Sd_activstaffRecord value)
		{
			super.control.setValue(value);
		}
	}
	public static class ChangeTimeRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected ChangeTimeRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setOrderReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isOrderReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showOrderOpened()
		{
			super.row.showOpened(0);
		}
		public Integer getOrder()
		{
			return (Integer)super.row.get(0);
		}
		public void setOrder(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellOrderTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setOldTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isOldTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showOldTimeOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.Time getOldTime()
		{
			return (ims.framework.utils.Time)super.row.get(1);
		}
		public void setOldTime(ims.framework.utils.Time value)
		{
			super.row.set(1, value);
		}
		public void setCellOldTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setNewTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isNewTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showNewTimeOpened()
		{
			super.row.showOpened(2);
		}
		public ims.framework.utils.Time getNewTime()
		{
			return (ims.framework.utils.Time)super.row.get(2);
		}
		public void setNewTime(ims.framework.utils.Time value)
		{
			super.row.set(2, value);
		}
		public void setCellNewTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public java.util.ArrayList getValue()
		{
			return (java.util.ArrayList)super.row.getValue();
		}
		public void setValue(java.util.ArrayList value)
		{
			super.row.setValue(value);
		}
	}
	public static class ChangeTimeRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private ChangeTimeRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public ChangeTimeRow get(int index)
		{
			return new ChangeTimeRow(super.collection.get(index));
		}
		public ChangeTimeRow newRow()
		{
			return new ChangeTimeRow(super.collection.newRow());
		}
		public ChangeTimeRow newRow(boolean autoSelect)
		{
			return new ChangeTimeRow(super.collection.newRow(autoSelect));
		}
		public ChangeTimeRow newRowAt(int index)
		{
			return new ChangeTimeRow(super.collection.newRowAt(index));
		}
		public ChangeTimeRow newRowAt(int index, boolean autoSelect)
		{
			return new ChangeTimeRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class ChangeTimeGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
		}
		private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
		}
		public java.util.ArrayList[] getValues()
		{
			java.util.ArrayList[] listOfValues = new java.util.ArrayList[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.util.ArrayList getValue()
		{
			return (java.util.ArrayList)super.grid.getValue();
		}
		public void setValue(java.util.ArrayList value)
		{
			super.grid.setValue(value);
		}
		public ChangeTimeRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new ChangeTimeRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public ChangeTimeRowCollection getRows()
		{
			return new ChangeTimeRowCollection(super.grid.getRows());
		}
		public ChangeTimeRow getRowByValue(java.util.ArrayList value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new ChangeTimeRow(row);
		}
		public void setOrderHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getOrderHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setOldTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getOldTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setNewTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getNewTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class SlotsGridRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected SlotsGridRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setSlotsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isSlotsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showSlotsOpened()
		{
			super.row.showOpened(0);
		}
		public String getSlots()
		{
			return (String)super.row.get(0);
		}
		public void setSlots(String value)
		{
			super.row.set(0, value);
		}
		public void setCellSlotsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isStatusReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showStatusOpened()
		{
			super.row.showOpened(1);
		}
		public String getStatus()
		{
			return (String)super.row.get(1);
		}
		public void setStatus(String value)
		{
			super.row.set(1, value);
		}
		public void setCellStatusTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isSelectReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showSelectOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getSelect()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setSelect(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellSelectTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class SlotsGridRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private SlotsGridRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public SlotsGridRow get(int index)
		{
			return new SlotsGridRow(super.collection.get(index));
		}
		public SlotsGridRow newRow()
		{
			return new SlotsGridRow(super.collection.newRow());
		}
		public SlotsGridRow newRow(boolean autoSelect)
		{
			return new SlotsGridRow(super.collection.newRow(autoSelect));
		}
		public SlotsGridRow newRowAt(int index)
		{
			return new SlotsGridRow(super.collection.newRowAt(index));
		}
		public SlotsGridRow newRowAt(int index, boolean autoSelect)
		{
			return new SlotsGridRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class SlotsGridGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public SlotsGridRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new SlotsGridRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public SlotsGridRowCollection getRows()
		{
			return new SlotsGridRowCollection(super.grid.getRows());
		}
		public SlotsGridRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new SlotsGridRow(row);
		}
		public void setSlotsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getSlotsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdFurtherApptRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdFurtherApptRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setFurtherApptReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isFurtherApptReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showFurtherApptOpened()
		{
			super.row.showOpened(0);
		}
		public String getFurtherAppt()
		{
			return (String)super.row.get(0);
		}
		public void setFurtherAppt(String value)
		{
			super.row.set(0, value);
		}
		public void setCellFurtherApptTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Date getValue()
		{
			return (ims.framework.utils.Date)super.row.getValue();
		}
		public void setValue(ims.framework.utils.Date value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdFurtherApptRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdFurtherApptRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdFurtherApptRow get(int index)
		{
			return new grdFurtherApptRow(super.collection.get(index));
		}
		public grdFurtherApptRow newRow()
		{
			return new grdFurtherApptRow(super.collection.newRow());
		}
		public grdFurtherApptRow newRow(boolean autoSelect)
		{
			return new grdFurtherApptRow(super.collection.newRow(autoSelect));
		}
		public grdFurtherApptRow newRowAt(int index)
		{
			return new grdFurtherApptRow(super.collection.newRowAt(index));
		}
		public grdFurtherApptRow newRowAt(int index, boolean autoSelect)
		{
			return new grdFurtherApptRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdFurtherApptGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.framework.utils.Date[] getValues()
		{
			ims.framework.utils.Date[] listOfValues = new ims.framework.utils.Date[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.framework.utils.Date getValue()
		{
			return (ims.framework.utils.Date)super.grid.getValue();
		}
		public void setValue(ims.framework.utils.Date value)
		{
			super.grid.setValue(value);
		}
		public grdFurtherApptRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdFurtherApptRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdFurtherApptRowCollection getRows()
		{
			return new grdFurtherApptRowCollection(super.grid.getRows());
		}
		public grdFurtherApptRow getRowByValue(ims.framework.utils.Date value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdFurtherApptRow(row);
		}
		public void setFurtherApptHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getFurtherApptHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class MainGridRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected MainGridRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setAppointmentReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isAppointmentReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showAppointmentOpened()
		{
			super.row.showOpened(0);
		}
		public String getAppointment()
		{
			return (String)super.row.get(0);
		}
		public void setAppointment(String value)
		{
			super.row.set(0, value);
		}
		public void setCellAppointmentTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setNewAppointmentReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isNewAppointmentReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showNewAppointmentOpened()
		{
			super.row.showOpened(1);
		}
		public String getNewAppointment()
		{
			return (String)super.row.get(1);
		}
		public void setNewAppointment(String value)
		{
			super.row.set(1, value);
		}
		public void setCellNewAppointmentTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.dto.client.Sd_appt.Sd_apptAppt_idRecord getValue()
		{
			return (ims.dto.client.Sd_appt.Sd_apptAppt_idRecord)super.row.getValue();
		}
		public void setValue(ims.dto.client.Sd_appt.Sd_apptAppt_idRecord value)
		{
			super.row.setValue(value);
		}
	}
	public static class MainGridRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private MainGridRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public MainGridRow get(int index)
		{
			return new MainGridRow(super.collection.get(index));
		}
		public MainGridRow newRow()
		{
			return new MainGridRow(super.collection.newRow());
		}
		public MainGridRow newRow(boolean autoSelect)
		{
			return new MainGridRow(super.collection.newRow(autoSelect));
		}
		public MainGridRow newRowAt(int index)
		{
			return new MainGridRow(super.collection.newRowAt(index));
		}
		public MainGridRow newRowAt(int index, boolean autoSelect)
		{
			return new MainGridRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class MainGridGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.dto.client.Sd_appt.Sd_apptAppt_idRecord[] getValues()
		{
			ims.dto.client.Sd_appt.Sd_apptAppt_idRecord[] listOfValues = new ims.dto.client.Sd_appt.Sd_apptAppt_idRecord[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.dto.client.Sd_appt.Sd_apptAppt_idRecord getValue()
		{
			return (ims.dto.client.Sd_appt.Sd_apptAppt_idRecord)super.grid.getValue();
		}
		public void setValue(ims.dto.client.Sd_appt.Sd_apptAppt_idRecord value)
		{
			super.grid.setValue(value);
		}
		public MainGridRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new MainGridRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public MainGridRowCollection getRows()
		{
			return new MainGridRowCollection(super.grid.getRows());
		}
		public MainGridRow getRowByValue(ims.dto.client.Sd_appt.Sd_apptAppt_idRecord value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new MainGridRow(row);
		}
		public void setAppointmentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getAppointmentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setNewAppointmentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getNewAppointmentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(String.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'String' of the global context variable 'CcoSched.LoggedInUserId' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("CcoSched.LoggedInUserId", "_cvp_CcoSched.LoggedInUserId").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'CcoSched.LoggedInUserId' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(952, 640);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 672, 0, 272, 600, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 264, 0, 400, 600, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 488, 248, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,"Booking Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 248, 480, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Patient Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 316, 232, 156, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		ims.framework.FormUiLogic m_customControlTreatmentPlanForm = loader.loadComponent(128137, appForm, startControlID * 10 + 1000, anchoringHelper5.getSize(), instance1, -1, skipContextValidation);
		//ims.framework.Control m_customControlTreatmentPlanControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(16), new Integer(316), new Integer(232), new Integer(156), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, new Integer(-1), m_customControlTreatmentPlanForm, instance1 } );
		ims.framework.Control m_customControlTreatmentPlanControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, new Integer(-1), m_customControlTreatmentPlanForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlTreatmentPlanControl);
		Menu[] menus1 = m_customControlTreatmentPlanForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 776, 459, 56, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 776, 438, 56, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 688, 459, 86, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "N. of first appts:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 688, 438, 80, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "N. of bookings:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 688, 80, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location 1", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 688, 61, 126, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resource 1", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 840, 37, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "12/12", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 728, 37, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "19 November 2002", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 272, 278, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Resource:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 552, 223, 52, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Duration:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 437, 223, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Fractions:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 272, 223, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Dose:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 548, 192, 28, 18, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Unit:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 450, 192, 46, 18, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Energy:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 272, 193, 57, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Modality:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 272, 163, 72, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 272, 193, 71, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "No Appoint.", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 570, 81, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Num. Conflicts:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 542, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "End Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 514, 59, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Start Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 245, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 296, 75, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Plan", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 232, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 210, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 136, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 106, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Telephone:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 34, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 58, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 83, 72, 14, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hosp. Number:", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 685, 608, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Availability Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 604, 608, 75, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 840, 438, 96, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Session  List", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 896, 32, 25, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, ">>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 688, 32, 25, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 592, 568, 64, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Actions", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 272, 568, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Generate Dates", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 520, 568, 64, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reset", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 384, 568, 128, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Refresh Availability", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 819, 608, 128, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Confirm Rebooking", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 104, 568, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 104, 540, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 104, 512, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 96, 232, 152, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 96, 208, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 96, 136, 152, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 96, 104, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 96, 56, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 96, 32, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 96, 80, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 338, 276, 216, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_ResourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_ResourceTemp);
		ResourceComboBox Resource = (ResourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(ResourceComboBox.class, m_ResourceTemp);
		super.addComboBox(Resource);
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 576, 191, 80, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_EnergyUnitTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_EnergyUnitTemp);
		EnergyUnitComboBox EnergyUnit = (EnergyUnitComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(EnergyUnitComboBox.class, m_EnergyUnitTemp);
		super.addComboBox(EnergyUnit);
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 338, 191, 112, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_ModalityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_ModalityTemp);
		ModalityComboBox Modality = (ModalityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(ModalityComboBox.class, m_ModalityTemp);
		super.addComboBox(Modality);
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 338, 161, 216, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_ListOwnerTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_ListOwnerTemp);
		ListOwnerComboBox ListOwner = (ListOwnerComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(ListOwnerComboBox.class, m_ListOwnerTemp);
		super.addComboBox(ListOwner);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 347, 251, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Mon", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 272, 251, 70, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Sequence", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 391, 251, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Tue", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 435, 251, 42, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Wed", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 481, 251, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Thu", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 525, 251, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Fri", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 569, 251, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Sat", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 613, 251, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Sun", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 680, 480, 256, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_ChangeTimeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_ChangeTimeTemp);
		ChangeTimeGrid ChangeTime = (ChangeTimeGrid)GridFlyweightFactory.getInstance().createGridBridge(ChangeTimeGrid.class, m_ChangeTimeTemp);
		ChangeTime.addIntColumn("Order", 0, 0, 0, true, true, null, false, 0, true, 0);
		ChangeTime.addTimeColumn("Old Time", 0, 0, 120, true, true, false, null, false, 0, true);
		ChangeTime.addTimeColumn("New Time", 0, 0, -1, false, true, true, null, false, 0, true);
		super.addGrid(ChangeTime);
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 680, 98, 256, 330, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_SlotsGridTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_SlotsGridTemp);
		SlotsGridGrid SlotsGrid = (SlotsGridGrid)GridFlyweightFactory.getInstance().createGridBridge(SlotsGridGrid.class, m_SlotsGridTemp);
		SlotsGrid.addStringColumn("Slots", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		SlotsGrid.addStringColumn("Status", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		SlotsGrid.addBoolColumn("Select", 0, 1, -1, false, true, 0, true);
		super.addGrid(SlotsGrid);
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 272, 36, 384, 116, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdFurtherApptTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdFurtherApptTemp);
		grdFurtherApptGrid grdFurtherAppt = (grdFurtherApptGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFurtherApptGrid.class, m_grdFurtherApptTemp);
		grdFurtherAppt.addStringColumn("Further Appointments", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdFurtherAppt);
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 272, 45, 384, 107, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_MainGridTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_MainGridTemp);
		MainGridGrid MainGrid = (MainGridGrid)GridFlyweightFactory.getInstance().createGridBridge(MainGridGrid.class, m_MainGridTemp);
		MainGrid.addStringColumn("Appointment", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		MainGrid.addStringColumn("New Appointment", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(MainGrid);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 338, 191, 40, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 608, 221, 48, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 496, 221, 48, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 336, 221, 64, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));

		// DecimalBox Controls
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 496, 191, 48, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));

		// BookingCalendar Controls
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 272, 306, 384, 251, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(BookingCalendar.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.TRUE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.ccosched.forms.treatmentplancomponent.IComponent customControlTreatmentPlan()
	{
		return (ims.ccosched.forms.treatmentplancomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
	}
	public void setcustomControlTreatmentPlanValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
	}
	public void setcustomControlTreatmentPlanVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(4)).setVisible(value);
	}
	public boolean iscustomControlTreatmentPlanVisible()
	{
		return ((ims.framework.Control)super.getControl(4)).isVisible();
	}
	public void setcustomControlTreatmentPlanEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(4)).setEnabled(value);
	}
	public boolean iscustomControlTreatmentPlanEnabled()
	{
		return ((ims.framework.Control)super.getControl(4)).isEnabled();
	}
	public Label NumberOfFirstAppointments()
	{
		return (Label)super.getControl(5);
	}
	public Label NumberOfBookings()
	{
		return (Label)super.getControl(6);
	}
	public Label LocationSelected()
	{
		return (Label)super.getControl(9);
	}
	public Label ResourceSelected()
	{
		return (Label)super.getControl(10);
	}
	public Label NumResSelected()
	{
		return (Label)super.getControl(11);
	}
	public Label DateSelected()
	{
		return (Label)super.getControl(12);
	}
	public Label LabelResource()
	{
		return (Label)super.getControl(13);
	}
	public Label LabelDuration()
	{
		return (Label)super.getControl(14);
	}
	public Label LabelFractions()
	{
		return (Label)super.getControl(15);
	}
	public Label LabelDose()
	{
		return (Label)super.getControl(16);
	}
	public Label LabelUnit()
	{
		return (Label)super.getControl(17);
	}
	public Label LabelEnergy()
	{
		return (Label)super.getControl(18);
	}
	public Label LabelModality()
	{
		return (Label)super.getControl(19);
	}
	public Label LabelListOwner()
	{
		return (Label)super.getControl(20);
	}
	public Label LabelNumberOfAppointemnts()
	{
		return (Label)super.getControl(21);
	}
	public Button AvailabilityDetails()
	{
		return (Button)super.getControl(34);
	}
	public Button Close()
	{
		return (Button)super.getControl(35);
	}
	public Button SessionList()
	{
		return (Button)super.getControl(36);
	}
	public Button NextDate()
	{
		return (Button)super.getControl(37);
	}
	public Button PreviousDate()
	{
		return (Button)super.getControl(38);
	}
	public Button bActions()
	{
		return (Button)super.getControl(39);
	}
	public Button GenerateDates()
	{
		return (Button)super.getControl(40);
	}
	public Button Reset()
	{
		return (Button)super.getControl(41);
	}
	public Button RefreshAvailability()
	{
		return (Button)super.getControl(42);
	}
	public Button ConfirmRebooking()
	{
		return (Button)super.getControl(43);
	}
	public TextBox NumberOfConflicts()
	{
		return (TextBox)super.getControl(44);
	}
	public TextBox EndDate()
	{
		return (TextBox)super.getControl(45);
	}
	public TextBox StartDate()
	{
		return (TextBox)super.getControl(46);
	}
	public TextBox Transport()
	{
		return (TextBox)super.getControl(47);
	}
	public TextBox PatientCategory()
	{
		return (TextBox)super.getControl(48);
	}
	public TextBox PatientAddress()
	{
		return (TextBox)super.getControl(49);
	}
	public TextBox PatientTelephone()
	{
		return (TextBox)super.getControl(50);
	}
	public TextBox PatientDOB()
	{
		return (TextBox)super.getControl(51);
	}
	public TextBox PatientName()
	{
		return (TextBox)super.getControl(52);
	}
	public TextBox PatientHospitalNumber()
	{
		return (TextBox)super.getControl(53);
	}
	public ResourceComboBox Resource()
	{
		return (ResourceComboBox)super.getComboBox(0);
	}
	public EnergyUnitComboBox EnergyUnit()
	{
		return (EnergyUnitComboBox)super.getComboBox(1);
	}
	public ModalityComboBox Modality()
	{
		return (ModalityComboBox)super.getComboBox(2);
	}
	public ListOwnerComboBox ListOwner()
	{
		return (ListOwnerComboBox)super.getComboBox(3);
	}
	public CheckBox Mon()
	{
		return (CheckBox)super.getControl(58);
	}
	public CheckBox Sequence()
	{
		return (CheckBox)super.getControl(59);
	}
	public CheckBox Tue()
	{
		return (CheckBox)super.getControl(60);
	}
	public CheckBox Wed()
	{
		return (CheckBox)super.getControl(61);
	}
	public CheckBox Thu()
	{
		return (CheckBox)super.getControl(62);
	}
	public CheckBox Fri()
	{
		return (CheckBox)super.getControl(63);
	}
	public CheckBox Sat()
	{
		return (CheckBox)super.getControl(64);
	}
	public CheckBox Sun()
	{
		return (CheckBox)super.getControl(65);
	}
	public ChangeTimeGrid ChangeTime()
	{
		return (ChangeTimeGrid)super.getGrid(0);
	}
	public SlotsGridGrid SlotsGrid()
	{
		return (SlotsGridGrid)super.getGrid(1);
	}
	public grdFurtherApptGrid grdFurtherAppt()
	{
		return (grdFurtherApptGrid)super.getGrid(2);
	}
	public MainGridGrid MainGrid()
	{
		return (MainGridGrid)super.getGrid(3);
	}
	public IntBox NumberOfAppointments()
	{
		return (IntBox)super.getControl(70);
	}
	public IntBox Duration()
	{
		return (IntBox)super.getControl(71);
	}
	public IntBox Fractions()
	{
		return (IntBox)super.getControl(72);
	}
	public IntBox Dose()
	{
		return (IntBox)super.getControl(73);
	}
	public DecimalBox Energy()
	{
		return (DecimalBox)super.getControl(74);
	}
	public BookingCalendar Calendar()
	{
		return (BookingCalendar)super.getControl(75);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			CcoSched = new CcoSchedForms();
		}
		public final class CcoSchedForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CcoSchedForms()
			{
				SessionList = new LocalFormName(128148);
				RebookingConfirmation = new LocalFormName(128141);
				ResourceAvailabilty = new LocalFormName(128146);
				BookingAction = new LocalFormName(128110);
				RebookingSlotsWarning = new LocalFormName(128142);
			}
			public final FormName SessionList;
			public final FormName RebookingConfirmation;
			public final FormName ResourceAvailabilty;
			public final FormName BookingAction;
			public final FormName RebookingSlotsWarning;
		}

		public CcoSchedForms CcoSched;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_TreatmentPlanAction = new ims.framework.ContextVariable("TreatmentPlanAction", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__TreatmentPlanAction_" + componentIdentifier + "");
			cxl_GroupId = new ims.framework.ContextVariable("GroupId", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__GroupId_" + componentIdentifier + "");
			cxl_ActivityID = new ims.framework.ContextVariable("ActivityID", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__ActivityID_" + componentIdentifier + "");
			cxl_CheckedDate = new ims.framework.ContextVariable("CheckedDate", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__CheckedDate_" + componentIdentifier + "");
			cxl_CheckedTime = new ims.framework.ContextVariable("CheckedTime", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__CheckedTime_" + componentIdentifier + "");
			cxl_AlreadyBooked = new ims.framework.ContextVariable("AlreadyBooked", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__AlreadyBooked_" + componentIdentifier + "");
			cxl_ActionId = new ims.framework.ContextVariable("ActionId", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__ActionId_" + componentIdentifier + "");
			cxl_SelectedResource = new ims.framework.ContextVariable("SelectedResource", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__SelectedResource_" + componentIdentifier + "");
			cxl_Appointments = new ims.framework.ContextVariable("Appointments", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__Appointments_" + componentIdentifier + "");
			cxl_PatTreatmentPlanAction = new ims.framework.ContextVariable("PatTreatmentPlanAction", prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier + "");
		}
		
		public boolean getTreatmentPlanActionIsNotNull()
		{
			return !cxl_TreatmentPlanAction.getValueIsNull(context);
		}
		public String getTreatmentPlanAction()
		{
			return (String)cxl_TreatmentPlanAction.getValue(context);
		}
		public void setTreatmentPlanAction(String value)
		{
			cxl_TreatmentPlanAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TreatmentPlanAction = null;
		public boolean getGroupIdIsNotNull()
		{
			return !cxl_GroupId.getValueIsNull(context);
		}
		public String getGroupId()
		{
			return (String)cxl_GroupId.getValue(context);
		}
		public void setGroupId(String value)
		{
			cxl_GroupId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GroupId = null;
		public boolean getActivityIDIsNotNull()
		{
			return !cxl_ActivityID.getValueIsNull(context);
		}
		public String getActivityID()
		{
			return (String)cxl_ActivityID.getValue(context);
		}
		public void setActivityID(String value)
		{
			cxl_ActivityID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActivityID = null;
		public boolean getCheckedDateIsNotNull()
		{
			return !cxl_CheckedDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getCheckedDate()
		{
			return (ims.framework.utils.Date)cxl_CheckedDate.getValue(context);
		}
		public void setCheckedDate(ims.framework.utils.Date value)
		{
			cxl_CheckedDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CheckedDate = null;
		public boolean getCheckedTimeIsNotNull()
		{
			return !cxl_CheckedTime.getValueIsNull(context);
		}
		public String getCheckedTime()
		{
			return (String)cxl_CheckedTime.getValue(context);
		}
		public void setCheckedTime(String value)
		{
			cxl_CheckedTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CheckedTime = null;
		public boolean getAlreadyBookedIsNotNull()
		{
			return !cxl_AlreadyBooked.getValueIsNull(context);
		}
		public java.util.ArrayList getAlreadyBooked()
		{
			return (java.util.ArrayList)cxl_AlreadyBooked.getValue(context);
		}
		public void setAlreadyBooked(java.util.ArrayList value)
		{
			cxl_AlreadyBooked.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AlreadyBooked = null;
		public boolean getActionIdIsNotNull()
		{
			return !cxl_ActionId.getValueIsNull(context);
		}
		public String getActionId()
		{
			return (String)cxl_ActionId.getValue(context);
		}
		public void setActionId(String value)
		{
			cxl_ActionId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActionId = null;
		public boolean getSelectedResourceIsNotNull()
		{
			return !cxl_SelectedResource.getValueIsNull(context);
		}
		public Object getSelectedResource()
		{
			return cxl_SelectedResource.getValue(context);
		}
		public void setSelectedResource(Object value)
		{
			cxl_SelectedResource.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedResource = null;
		public boolean getAppointmentsIsNotNull()
		{
			return !cxl_Appointments.getValueIsNull(context);
		}
		public ims.dto.client.Sd_appt.Sd_apptRecord getAppointments()
		{
			return (ims.dto.client.Sd_appt.Sd_apptRecord)cxl_Appointments.getValue(context);
		}
		public void setAppointments(ims.dto.client.Sd_appt.Sd_apptRecord value)
		{
			cxl_Appointments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Appointments = null;
		public boolean getPatTreatmentPlanActionIsNotNull()
		{
			return !cxl_PatTreatmentPlanAction.getValueIsNull(context);
		}
		public ims.ccosched.vo.PatTreatPlanActionVo getPatTreatmentPlanAction()
		{
			return (ims.ccosched.vo.PatTreatPlanActionVo)cxl_PatTreatmentPlanAction.getValue(context);
		}
		public void setPatTreatmentPlanAction(ims.ccosched.vo.PatTreatPlanActionVo value)
		{
			cxl_PatTreatmentPlanAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatTreatmentPlanAction = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[235];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ID", "ID_PatTreatmentPlan");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-TREATMENTINTENT", "TreatmentIntent");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-DATESEEN", "DateSeen");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-DECISIONTOTREAT", "DecisionToTreat");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-PATIENT", "Patient");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-PKEY", "Pkey");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-RKEY", "Rkey");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-EPISODE", "Episode");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-TREATMENTPLANCOMMENT", "TreatmentplanComment");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ACTIVESTATUS", "ActiveStatus");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ECAD_DATE", "Ecad_date");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ID", "ID_PatAction");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-BOOKEDDATE", "BookedDate");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-BOOKEDTIME", "BookedTime");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPTHEADID", "ApptHeadId");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPTID", "ApptId");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PRETREATMENTPLAN", "PretreatmentPlan");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-STATUS", "Status");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PRIORITY", "Priority");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PATIENTSTATUS", "PatientStatus");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ATTENDINGAS", "AttendingAs");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TRANSPORT", "Transport");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-REASON", "Reason");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-CATEGORY", "Category");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-UNIT", "Unit");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-MODALITY", "Modality");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ANEASTHETIC", "Aneasthetic");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTIVE", "Active");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ESTARTDATE", "EstartDate");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-EENDDATE", "EendDate");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTIONSTATUSDATE", "ActionStatusDate");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-WAITINGLIST", "WaitingList");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-MODALENERGY", "ModalEnergy");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-IMAGINGDATE", "ImagingDate");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-STARTDATEREGIME", "StartDateRegime");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTION_ORDERNUMBER", "Action_OrderNumber");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TREATMENACTION", "TreatmenAction");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-LASTAPPOINTMENTDATE", "LastAppointmentDate");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPDATE", "AppDate");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-CHEMPLANSTARTDATE", "ChemPlanStartDate");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPACLINIC", "OPAClinic");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPADATE", "OPADate");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPATIME", "OPATime");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-WLID", "WLId");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-SCHEDAPPDATE", "SchedAppDate");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-SCHEDAPPTIME", "SchedAppTIme");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TREATMENTACTION", "Treatmentaction");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_DOSE", "Tl_dose");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_FRACTIONS", "Tl_fractions");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_DURATION", "Tl_duration");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-ID", "ID_PatAction");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-BOOKEDDATE", "BookedDate");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-BOOKEDTIME", "BookedTime");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-APPTHEADID", "ApptHeadId");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-APPTID", "ApptId");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-PRETREATMENTPLAN", "PretreatmentPlan");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-STATUS", "Status");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-PRIORITY", "Priority");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-PATIENTSTATUS", "PatientStatus");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-ATTENDINGAS", "AttendingAs");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-TRANSPORT", "Transport");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-REASON", "Reason");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-CATEGORY", "Category");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-UNIT", "Unit");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-MODALITY", "Modality");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-ANEASTHETIC", "Aneasthetic");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-ACTIVE", "Active");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-ESTARTDATE", "EstartDate");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-EENDDATE", "EendDate");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-ACTIONSTATUSDATE", "ActionStatusDate");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-WAITINGLIST", "WaitingList");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-MODALENERGY", "ModalEnergy");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-IMAGINGDATE", "ImagingDate");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-STARTDATEREGIME", "StartDateRegime");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-ACTION_ORDERNUMBER", "Action_OrderNumber");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-TREATMENACTION", "TreatmenAction");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-LASTAPPOINTMENTDATE", "LastAppointmentDate");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-APPDATE", "AppDate");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-CHEMPLANSTARTDATE", "ChemPlanStartDate");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-OPACLINIC", "OPAClinic");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-OPADATE", "OPADate");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-OPATIME", "OPATime");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-WLID", "WLId");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-SCHEDAPPDATE", "SchedAppDate");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-SCHEDAPPTIME", "SchedAppTIme");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-TREATMENTACTION", "Treatmentaction");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-TL_DOSE", "Tl_dose");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-TL_FRACTIONS", "Tl_fractions");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.Rebooking.__internal_x_context__PatTreatmentPlanAction_" + componentIdentifier, "BO-1105100038-TL_DURATION", "Tl_duration");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
