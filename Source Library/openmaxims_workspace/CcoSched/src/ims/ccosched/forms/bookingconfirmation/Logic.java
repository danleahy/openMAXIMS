//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.17 build 40510.2000)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.bookingconfirmation;

import ims.ccosched.ActionSession.ActionSession;
import ims.ccosched.DateSessionSlotsClass.DateSessionSlotsClass;
import ims.ccosched.forms.bookingconfirmation.GenForm.MainGridRow;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.lookups.Modality;
import ims.ccosched.vo.lookups.Unit;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientApptDiaryVoCollection;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.Result;
import ims.dto.client.Episode;
import ims.dto.client.Generic_schedule;
import ims.dto.client.Sd_activstaff;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_mc_act;
import ims.dto.client.Sd_modactmc;
import ims.dto.client.Sd_session;
import ims.dtomove.vo.ActivityActionVo;
import ims.dtomove.vo.ActivityGroupVo;
import ims.dtomove.vo.SchedActivityVo;
import ims.framework.FormName;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;

import ims.dto_move.vo.AppointmentRefVo;

public class Logic extends BaseLogic
{	
	protected void onFormOpen()
	{
		form.imbMinus().setEnabled(false);
		form.getLocalContext().setCustomizedTransport(new ArrayList());
		form.getLocalContext().setCustomizedAttendanceTime(new ArrayList());
		form.RelatedAppointment().setEnabled(false);
		form.btnRelaitedAppointment().setTooltip("Select Related Appointment");
		
//		// Patients			
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		
		if (patient != null)
		{
			form.PatientName().setValue(patient.getNameIsNotNull() ? patient.getName().getForename() + " " + patient.getName().getSurname() : "");
			form.PatientDOB().setValue(patient.getDobIsNotNull() ? patient.getDob().toString() : "");
			form.PatientHospitalNumber().setValue(patient.getHospnum() != null ? patient.getHospnum().getValue() : "");
		}
		
		PatTreatPlanActionVo tmp = null;
		if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof PatTreatPlanActionVo) 
		{
			tmp = (PatTreatPlanActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
			form.Activity().setValue(tmp.getActivityIsNotNull()?tmp.getActivity().getName():"");
			form.Action().setValue(tmp.getActionIsNotNull()?tmp.getAction().getActionIsNotNull()?tmp.getAction().getAction().getName():"":"");
			form.PatientCategory().setValue(tmp.getCategoryIsNotNull()?tmp.getCategory().getText():"");
			form.Transport().setValue(tmp.getTransportIsNotNull()?tmp.getTransport().getText():"");
		}
		else if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof ActivityActionVo)		
		{
			ActivityActionVo activityAction = (ActivityActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
			form.Activity().setValue(getActivityName(activityAction.getActivityId(),activityAction.getGroup()));
			form.Action().setValue(activityAction.getActionIsNotNull()?activityAction.getAction().getName():"");
		}
		
//		Go_ptplact.Go_ptplactRecord tmp = null;
//		if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof Go_ptplact.Go_ptplactRecord) 
//		{
//			tmp = (Go_ptplact.Go_ptplactRecord)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
//			form.Activity().setValue(tmp.Activity_idtxt);
//			form.Action().setValue(tmp.Action_idtxt);
//			form.PatientCategory().setValue(tmp.Txcattypetxt);
//			form.Transport().setValue(tmp.Transreq_txt);
//		}		
//		else			
//		{
//			Sd_activity_action.Sd_activity_actionRecord activityAction = (Sd_activity_action.Sd_activity_actionRecord)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
//			form.Activity().setValue(activityAction.Activ_nm);
//			form.Action().setValue(activityAction.Action_nm);
//		}

		// Booking
		if (form.getGlobalContext().CcoSched.Booking.getStartDate()!=null && form.getGlobalContext().CcoSched.Booking.getStartDate() != new Date(1,1,1))//WDEV-15276
			form.StartDate().setValue((form.getGlobalContext().CcoSched.Booking.getStartDate()).toString(DateFormat.STANDARD));
		if (form.getGlobalContext().CcoSched.Booking.getEndDate()!=null && form.getGlobalContext().CcoSched.Booking.getEndDate() != new Date(1,1,1))//WDEV-15276
			form.EndDate().setValue((form.getGlobalContext().CcoSched.Booking.getEndDate()).toString(DateFormat.STANDARD));

		if(form.getGlobalContext().CcoSched.Booking.getResourceSelected() != null)
		{
			if (form.getGlobalContext().CcoSched.Booking.getResourceSelected() instanceof Sd_modactmc.Sd_modactmcRecord)
				form.Resource().setValue(((Sd_modactmc.Sd_modactmcRecord)form.getGlobalContext().CcoSched.Booking.getResourceSelected()).Mc_nm);
			else
			{
				Sd_mc_act.Sd_mc_actRecord res2 = (Sd_mc_act.Sd_mc_actRecord)form.getGlobalContext().CcoSched.Booking.getResourceSelected();
				form.Resource().setValue(res2 == null ? "" : res2.Mc_name);
			}
		}

		// wdev-7331 - if treatment plan, and actions are selected, then hide the episode combo
		if (form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanDetails() != null
				&& form.getGlobalContext().CcoSched.TreatmentPlan.getActionID() != null) 
		{
			form.TreatmentPlanComment().setValue(form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanDetails().Tp_cmnt);
			form.lblEpisode().setVisible(false);
			form.cmbEpisode().setVisible(false);
		}
		else
		{
			LoadEpisodeOfCareCombo();
			form.lblEpisode().setVisible(true);
			form.cmbEpisode().setVisible(true);			
		}

		// WDEV-13566 - Treatment Plan Comments
		if (form.getGlobalContext().getPatTreatmentPlanIsNotNull())
		{
			PatTreatmentPlanLiteVo vo=form.getGlobalContext().getPatTreatmentPlan();
			if (vo.getTreatmentplanCommentIsNotNull())
				form.TreatmentPlanComment().setValue(vo.getTreatmentplanComment());
		}
		
		//Go_ptplact.Go_ptplactRecord actionsDto = form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanActions();
		//TODO Review
		// go with selected action in form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() ?
		//PatTreatPlanActionVo actionsDto = form.getGlobalContext().getPatTreatmentPlanAction();

		if(tmp !=null)
			this.setTransportListLookupValue(tmp.getTransportIsNotNull()?tmp.getTransport().getID():-1);
		
		this.setBookingSystemTypeLookupValue(-1);
		this.setConfirmationStatusLookupValue(-1);

		form.RelatedAppointment().setValue("");
		
		if (form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof PatTreatPlanActionVo)
		{
			PatTreatPlanActionVo pl = (PatTreatPlanActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
			this.setPriorityLookupValue(pl.getPriorityIsNotNull()?pl.getPriority().getID():-1);
		}

		form.EarlierDateOffered().setValue(false);
		OnEarlierDateOffered();

		if (form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof PatTreatPlanActionVo)
		{
			PatTreatPlanActionVo pl = (PatTreatPlanActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
			this.setPatientStatusLookupValue(pl.getPatientStatusIsNotNull()?pl.getPatientStatus().getID():-1);
		}
//		String patient_stat = actionsDto != null && actionsDto.Pat_stat != null?actionsDto.Pat_stat:"-1";
//		if(!patient_stat.equals("-1"))
//		{
//			this.setPatientStatusLookupValue(getInt(patient_stat));
//		}

		// Main Grid.
		ArrayList ar = new ArrayList();
		ArrayList dateSessionSlots = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();			
		for (int i = 0;dateSessionSlots!=null &&  i < dateSessionSlots.size(); ++i)//WDEV-15276
		{
			 DateSessionSlotsClass ds = (DateSessionSlotsClass)dateSessionSlots.get(i);
			
			// Get the Rounding for the Attendance Time.
			Sd_session session = (Sd_session)domain.getDTOInstance(Sd_session.class);
			session.Filter.clear();
			session.Filter.Prfile_sess_id = ds.getSessionId();
			Result result = session.get();
			if (result != null)
			{
				InternalError(result.getMessage());
				return;
			}
			if (session.DataCollection.count() == 0)
			{
				InternalError("Session is not found.");
				return;
			}
			Integer si = GetInteger(session.DataCollection.get(0).Tci_rnding_int);
					
			Integer rounding = si == null? new Integer(0) : si;
			for (int j = 0; j < ds.getSlotList().size(); ++j)
			{
				String[] time = StringUtils.splitString(((String)ds.getSlotList().get(j)),":"); // here was a check for time.Length > 1
				String timeStr = time[0]+time[1]+"00";
				Time ddt = null;
				try{ddt = new Time(timeStr, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
				if (ddt == null)
				{
					InternalError("Wrong time format");
					return;
				}
				ar.add(new Helper(ds.getDate(), ddt, rounding, ds));
			}
		}

		//Equivalent of ar.Sort(new Helper.Comparer());
		Collections.sort(ar, new Comparer());
		Time attTime = null, defAttTime = null;
		boolean sameAttTime = true;
		for(int i=0; i<ar.size(); i++)
		{
			Helper h = (Helper)ar.get(i);
			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();	
			row.setDate(h.getDate());
			row.setAppointmentTime(h.getTime());
			attTime = (h.getRounding().intValue() == 0 ? h.getTime().copy() : GetRoundingTime(h.getRounding().intValue(), h.getTime().copy()));
			
			if(defAttTime == null)
				defAttTime = attTime.copy();
			if(!attTime.equals(defAttTime))
				sameAttTime = false; 
			row.setAttendanceTime(attTime);
			row.setValue(h.getDateSessionSlot());
		}

		if (form.TransportList().size() != 0)
			OnTransportChanged();
		
		if(sameAttTime && defAttTime != null)
			form.DefaultAttendanceTime().setValue(defAttTime);

		CheckPatientHasAlreadyAppointments();
	}
	
	private String getActivityName(Integer activityId, ActivityGroupVo group) 
	{
		if (form.getLocalContext().getschedActivitiesIsNotNull())
		{
			for (Iterator iter = form.getLocalContext().getschedActivities().iterator(); iter.hasNext();) 
			{
				SchedActivityVo element = (SchedActivityVo) iter.next();
				if (element.getGroup().equals(group) && element.getActivityId().equals(activityId))
					return element.getName();
			}
		}
			
		return "";
	}
	
	private void LoadEpisodeCombo()
	{
		boolean load_episode = true;
		Episode episodeDto		= form.getLocalContext().getEpisodeDto();
		String pkey 			= form.getGlobalContext().Core.getPatientShort().getPkey().getValue();
		
		//Load the episode if was not previously loaded for that patient
		if(pkey != null)
		{
			if(episodeDto != null && episodeDto.DataCollection.count()>0 && episodeDto.DataCollection.get(0).Pkey.equals(pkey))
				load_episode = false;
		}
		else
			load_episode  = false;

		if(load_episode)
		{
			//Filter by speciality ??? -  Kevin has the answer - and his answer is !!!! NO
			episodeDto = (Episode)domain.getDTOInstance(Episode.class);
			episodeDto.Filter.Pkey   = pkey;
			//13/04/2005 - Filter the active Episodes
			//Filter the active only in New Mode as in Update or View we can have an ended one. 
			if(GetUpdateMode() == false)
			{
				episodeDto.Filter.Active = "Y";
				episodeDto.Filter.Enddate = "~";
			}
			
			Result result = episodeDto.list();
			if (result != null)
			{
				engine.showMessage(result.getMessage());
				return;
			}
		}

		form.cmbEpisode().clear();
		if (form.getLocalContext().getEpisodeListIsNotNull())
			form.getLocalContext().getEpisodeList().clear();
		else
			form.getLocalContext().setEpisodeList(new HashMap<String, String>());
		
		if(episodeDto != null)
			for(int x = 0; x < episodeDto.DataCollection.count(); x++)
			{
				String speciality  = episodeDto.DataCollection.get(x).Epsptxt;
				String consultant = episodeDto.DataCollection.get(x).Ephptxt;
				String episType	  = episodeDto.DataCollection.get(x).Eptptxt;
				Date date = GetDateFromString(episodeDto.DataCollection.get(x).Startdate);
				String startDate  = date == null?"":date.toString(DateFormat.STANDARD);
				date = GetDateFromString(episodeDto.DataCollection.get(x).Enddate);
				String endDate	  = date == null?"":date.toString(DateFormat.STANDARD);
				String EpisodeText = speciality + " - " + episType + " - " + consultant + " - " + startDate + " - " + endDate;

			//	form.cmbEpisode().newRow(episodeDto.DataCollection.get(x).Unid, EpisodeText);
				
				if (form.getLocalContext().getEpisodeListIsNotNull())				
					form.getLocalContext().getEpisodeList().put(episodeDto.DataCollection.get(x).Unid, EpisodeText);
				
			}

		//copy the Dto in the context
		form.getLocalContext().setEpisodeDto(episodeDto);

	}

	/** WDEV-13261
	 *  Load the local Episode of CareList into the combo
	 *  If the global context is set, default to that value 
	 */
	private void LoadEpisodeOfCareCombo()
	{
		// WDEV-13261
		PatientShort patVo = form.getGlobalContext().Core.getPatientShort();

		EpisodeofCareShortVoCollection episColl = domain.listEpisodesForPatient(patVo);
		
		int episodePosition = 0;
		
		if(episColl != null)
		{
			for(int x = 0; x < episColl.size(); x++)
			{
				//WDEV-14150
				if (form.getGlobalContext().getPatTreatmentPlanIsNotNull() && form.getGlobalContext().getPatTreatmentPlan().getEpisodeIsNotNull() && form.getGlobalContext().getPatTreatmentPlan().getEpisode().equals(episColl.get(x)))
				{
					episodePosition = x;
				}
				EpisodeofCareShortVo episVo = episColl.get(x);
				String specialty="";
				if (episVo.getSpecialtyIsNotNull())
					specialty  = episVo.getSpecialty().getText();
				String consultant = "";
				if (episVo.getResponsibleHCPIsNotNull())
					consultant = episVo.getResponsibleHCP().getIMosName();
				String startDate = episVo.getStartDate().toString(DateFormat.STANDARD); //WDEV-14150
				
				String endDate="";
				if (episVo.getEndDateIsNotNull())
					endDate = episVo.getEndDate().toString(DateFormat.STANDARD); //WDEV-14150 
				
				String EpisodeText = specialty + " - " +  consultant + " - " + startDate + " - " + endDate;
	
				form.cmbEpisode().newRow(episVo, EpisodeText);
				
			}
			
			//WDEV-14150
			if (episColl.get(episodePosition) != null && form.getGlobalContext().getPatTreatmentPlanIsNotNull())
			{
				form.cmbEpisode().setValue(episColl.get(episodePosition));
			}
			
		}
		
		if (form.getGlobalContext().Core.getEpisodeofCareShort() != null && form.getGlobalContext().getPatTreatmentPlan() == null) //WDEV-14150
			form.cmbEpisode().setValue(form.getGlobalContext().Core.getEpisodeofCareShort());
		
	}

	
	private boolean GetUpdateMode()
	{		
		return form.getMode().equals(FormMode.VIEW);
	}
	
	private Date GetDateFromString(String date)
	{
		Date dt = null;
		if(date != null && !date.equals(""))
			try{dt = new Date(date, DateFormat.ISO);}catch(ParseException e){e.printStackTrace();}
		return dt;
	}

	public void InternalError(String message)
	{
		throw new RuntimeException(message);
	}

	protected void onBtnRelaitedAppointmentClick() 
	{
		engine.open(form.getForms().CcoSched.RelaitedAppointments);
	}
	
	private class Helper
	{
		
		public Helper(Date date, Time time, Integer rounding, DateSessionSlotsClass dateSessionSlot)
		{
			m_Date = date;
			m_Time = time;
			m_Rounding = rounding;
			m_DateSessionSlot = dateSessionSlot;
		}
		public Date getDate(){ return m_Date;}
		public Time getTime(){ return m_Time;}
		public Integer getRounding(){return m_Rounding;}
		public DateSessionSlotsClass getDateSessionSlot(){return m_DateSessionSlot;}

		private Date m_Date;
		private Time m_Time;
		private DateSessionSlotsClass m_DateSessionSlot;
		private Integer m_Rounding;
	}
	
	public class Comparer implements Comparator
	{
		public int compare(Object x, Object y) 
		{
			Helper x1 = (Helper)x;
			Helper y1 = (Helper)y;

			if (x1.getDate().isLessThan(y1.getDate()))
				return -1;
			if (x1.getDate().equals(y1.getDate()))
			{
				if (CompareTimes(x1.getTime(), y1.getTime()) < 0) 
					return -1;
				if (CompareTimes(x1.getTime(), y1.getTime()) == 0)
					return 0;
			}
			return 1;
		}
	}

	private int CompareTimes(Time t1, Time t2)
	{	
		if(t1.isGreaterThan(t2))
			return 1;
		else if (t1.isLessThan(t2))
			return -1;
		
		return 0;
	}
		
	protected void OnTransportChanged() 
	{
		ArrayList a = form.getLocalContext().getCustomizedTransport();
		for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
			if (!a.contains(new Integer(i)))
				form.MainGrid().getRows().get(i).setTransport(form.TransportList().getValue());		
	}
		
	protected void OnEarlierDateOffered() 
	{
		if (form.EarlierDateOffered().getValue())
			form.DateOffered().setEnabled(true);
		else
		{
			form.DateOffered().setEnabled(false);
			form.DateOffered().setValue(null);
		}		
	}

	protected void DefaultAttendanceTime() 
	{
		if (form.DefaultAttendanceTime().getValue() != null)
		{
			ArrayList a = form.getLocalContext().getCustomizedAttendanceTime();
			for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
				if (!a.contains(new Integer(i)))
					form.MainGrid().getRows().get(i).setAttendanceTime(form.DefaultAttendanceTime().getValue());
		}		
	}

	protected void OnGridTransportChanged(int column, MainGridRow row, Object value) 
	{
		ArrayList a = form.getLocalContext().getCustomizedTransport();
		int rowIndex = getRowIndex(row);
		if (rowIndex != -1)
			if(!a.contains(new Integer(rowIndex)))
				a.add(new Integer(rowIndex));
		form.getLocalContext().setCustomizedTransport(a);
	}

	protected void OnGridAttendanceTimeChanged(int column, MainGridRow row, Time value) 
	{
		if(column == 1)
		{
			ArrayList a = form.getLocalContext().getCustomizedAttendanceTime();
			int rowIndex = getRowIndex(row);
			if(rowIndex != -1)
				if (!a.contains(new Integer(rowIndex)))
					a.add(row);	
			form.getLocalContext().setCustomizedAttendanceTime(a);
		}
	}
	
	private int getRowIndex(MainGridRow row)
	{
		for(int i=0; i<form.MainGrid().getRows().size(); i++)
			if(form.MainGrid().getRows().get(i).getValue().equals(row.getValue()))
				return i;
		
		return -1;
	}
	protected void OnPlus() 
	{
		boolean bRowSelect = true;
		form.SpecialRequirements().getRows().newRow(bRowSelect);
		if(bRowSelect)
			OnSpecialRequirements();
	}

	protected void OnMinus() 
	{
		int rowIndex = form.SpecialRequirements().getSelectedRowIndex();
		if(rowIndex >=0 )
			form.SpecialRequirements().getRows().remove(rowIndex);//getRows().remove(form.SpecialRequirements().getRows().get());
		form.imbMinus().setEnabled(false);
	}
	
	protected void OnSpecialRequirements() 
	{
		form.imbMinus().setEnabled(true);
	}

	protected void OnCancel() 
	{
		engine.close(DialogResult.CANCEL);		
	}

	protected void OnBook() 
	{
		////////
//		Time t1 = new Time(10,15);
//		Time t2 = new Time(11,10);
//		System.out.println(t1.toString() + " < " + t2.toString()  + " : " + t1.isLessThan(t2));
//		System.out.println(t1.toString() + " <= " + t2.toString()  + " : " + t1.isLessOrEqualThan(t2));
//		System.out.println(t1.toString() + " > " + t2.toString()  + " : " + t1.isGreaterThan(t2));
//		System.out.println(t1.toString() + " >= " + t2.toString()  + " : " + t1.isGreaterOrEqualThan(t2));
//		System.out.println(t1.toString() + " == " + t2.toString()  + " : " + t1.equals(t2));
		////////
		for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
		{
			GenForm.MainGridRow row = form.MainGrid().getRows().get(i);
			//if (CompareTimes(row.getAppointmentTime(),row.getAttendanceTime()) < 0)
			if(row.getAttendanceTime().isGreaterThan(row.getAppointmentTime()))
			{
				ShowMessage("Attendance time must be less than or equal to appointment time.");
				return;
			}
		}
		
		if (form.ConfirmationStatus().getValue() == null)
		{
			ShowMessage("Please select Confirmation Status");
			return;
		}
		
		if (form.BookingSystemType().getValue() == null)
		{
			ShowMessage("Please select a Booking System Type");
			return;
		}
		
		//Ask Marius about that...
		if(form.PatientStatus().getValue() == null)
		{
			ShowMessage("Please select Patient Status");
			return;
		}
		
		if ((form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanDetails() == null || 
				(form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanDetails() != null
						&& form.getGlobalContext().CcoSched.TreatmentPlan.getActionID() == null))
				&& form.cmbEpisode().getValue() == null)
		{
			ShowMessage("Please select an Episode.");
			return;			
		}			
			
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		PatientShort patVo = form.getGlobalContext().Core.getPatientShort();
		Sd_appt appointmentsRecord = (Sd_appt)domain.getDTOInstance(Sd_appt.class);
		appointmentsRecord.DataCollection.clear();
		appointmentsRecord.DataCollection.add();			

		//WDEV-7331
		appointmentsRecord.DataCollection.get(0).Ccs_epid = String.valueOf(form.cmbEpisode().getValue().getID_EpisodeOfCare());  // WDEV-13261
		
		appointmentsRecord.DataCollection.get(0).Booking_sys_type = form.BookingSystemType().getValue()!= null?Integer.toString(form.BookingSystemType().getValue().getID()):"";
		appointmentsRecord.DataCollection.get(0).Cmts = form.BookingComments().getValue();			
		appointmentsRecord.DataCollection.get(0).Datebkd = new Date().toString(DateFormat.ISO);//Utility.GetStringFromDate(DateTime.Now);
		
		//WDEV-14583
		if (patient.getDob()!=null)
		{
			appointmentsRecord.DataCollection.get(0).Dob = patient.getDob().toString(DateFormat.ISO);			
		}
		
		appointmentsRecord.DataCollection.get(0).Forname = patient.getNameIsNotNull() ? patient.getName().getForename() : "";
		appointmentsRecord.DataCollection.get(0).Gp_let = form.GPLetter().getValue() ? "Y":"N";
		
		//appointmentsRecord.DataCollection.get(0).Hcp_booking = form.getGlobalContext().Common.getLoggedInUserID().toString();
		//appointmentsRecord.DataCollection.get(0).Hcp_booking = form.getGlobalContext().CcoSched.getLoggedInUserId();

		// WDEV-14225
		// Any member of staff can make a booking
		MemberOfStaffShortVo mosVo = (MemberOfStaffShortVo) domain.getMosUser();
		if (mosVo != null)
			appointmentsRecord.DataCollection.get(0).Hcp_booking =String.valueOf(mosVo.getIMosId());
		
		appointmentsRecord.DataCollection.get(0).Head_stat = "-2189";
		appointmentsRecord.DataCollection.get(0).Hospnum = patient.getHospnum().getValue();			
		appointmentsRecord.DataCollection.get(0).No_cancelled = "0";
		appointmentsRecord.DataCollection.get(0).No_dna = "0";
		appointmentsRecord.DataCollection.get(0).Pat_let = form.PatientLetter().getValue() ? "Y" : "N";
		appointmentsRecord.DataCollection.get(0).Pkey = patient.getPkey().getValue();
		appointmentsRecord.DataCollection.get(0).Patient = String.valueOf(patVo.getID_Patient());
		if(form.DateOffered().getValue() != null)
			appointmentsRecord.DataCollection.get(0).Priordatoff = form.DateOffered().getValue().toString(DateFormat.ISO);
		if (form.RelatedAppointment().getValue() != null && form.getGlobalContext().CcoSched.RelaitedAppointments.getRelaitedAppointments() != null)
			appointmentsRecord.DataCollection.get(0).Rel_appt_head_id = form.getGlobalContext().CcoSched.RelaitedAppointments.getRelaitedAppointments().Appt_head_id;// form.getGform.RelatedAppointment().getValue().attAppt_head_id;
		
		appointmentsRecord.DataCollection.get(0).Sex = patient.getSexIsNotNull() ? patient.getSex().toString() : "";
		appointmentsRecord.DataCollection.get(0).Surname = patient.getNameIsNotNull() ? patient.getName().getSurname() : "";
		appointmentsRecord.DataCollection.get(0).Title = patient.getNameIsNotNull() && patient.getName().getTitleIsNotNull() ? patient.getName().getTitle().toString() : "";
		
		// WDEV-13403 - set the new action id for update
		if (form.getGlobalContext().getPatTreatmentPlanActionIsNotNull())
		{
			PatTreatPlanActionVo actionPlan = form.getGlobalContext().getPatTreatmentPlanAction();
			if (actionPlan != null && actionPlan.getID_PatActionIsNotNull())
			{
				appointmentsRecord.DataCollection.get(0).Treatpl_act_id = String.valueOf(actionPlan.getID_PatAction());
			}
		}
		//appointmentsRecord.DataCollection.get(0).Treatpl_act_id = ((form.getGlobalContext().CcoSched.TreatmentPlan.getActionID() == null) || form.getGlobalContext().CcoSched.TreatmentPlan.getIgnoreActionID1().equals(Boolean.TRUE) ? "" : form.getGlobalContext().CcoSched.TreatmentPlan.getActionID());

		appointmentsRecord.DataCollection.get(0).Pat_stat = form.PatientStatus().getValue()!= null?Integer.toString(form.PatientStatus().getValue().getID()):"";
		//11/01/2005 - bug reported by Kevin - Save Modality, Energy & Unit
		ArrayList modalityList = form.getGlobalContext().CcoSched.Booking.getModalityArrayList();

		// Sequence Number
		String activityID = "";
		String defaultActionID = "";
		String defaultDuration = form.getGlobalContext().CcoSched.Booking.getTimeRequired().toString();

		if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof PatTreatPlanActionVo)
		{
			PatTreatPlanActionVo tmp = (PatTreatPlanActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
			defaultActionID = tmp.getActionIsNotNull()?tmp.getAction().getActionIsNotNull()?tmp.getAction().getAction().getID_Action().toString():"":"";
			activityID 		= tmp.getActivityIsNotNull()?tmp.getActivity().getActivityIdIsNotNull()?tmp.getActivity().getActivityId().toString():"":"";
		}
		else if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof ActivityActionVo)
		{
			ActivityActionVo activityAction = (ActivityActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
			defaultActionID = activityAction.getActionIsNotNull()?activityAction.getAction().getID_ActionIsNotNull()?activityAction.getAction().getID_Action().toString():"":"";
			activityID 		= activityAction.getActivityIdIsNotNull()?activityAction.getActivityId().toString():"";
		}

		// Sequence Appt_ID.
		appointmentsRecord.DataCollection.get(0).Appt_idCollection.clear();
		for (int i = 0; i<form.MainGrid().getRows().size(); i++)
		{
			String actionID = defaultActionID;
			String duration = defaultDuration;
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.add();
			//appointmentsRecord.Sd_apptCollection[0].Appt_idCollection[i].attAct_complete_tm = "";
			//appointmentsRecord.Sd_apptCollection[0].Appt_idCollection[i].attAct_loc_att 

			//10/01/2005 - If the action has changed for the date - get teh new it's new time duration 
			ActionSession actionSession = GetActionSession(form.MainGrid().getRows().get(i).getDate());
			if(actionSession != null)
			{
				actionID = actionSession.getAction();
				duration = Integer.toString(actionSession.getIntervalTimeRequired());
			}
			//------------------------------------------------------------------------------------------
			//10/01/2005 - Save the Modality, Energy & Unit if the case
			if(modalityList != null && modalityList.size() == 3)
			{

				Modality lkpModality = (Modality)modalityList.get(0);
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Mod_id 	 = lkpModality!=null?new Integer(lkpModality.getID()).toString():"";
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Energy_val = (String)modalityList.get(1);
				Unit lkpUnit = (Unit)modalityList.get(2);
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Unit_id 	 = lkpUnit!=null?new Integer(lkpUnit.getID()).toString():"";
			}
			//------------------------------------------------------------------------------------------
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Action_dets = actionID;								
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).App_stm = form.MainGrid().getRows().get(i).getAppointmentTime().toString(TimeFormat.FLAT6);				
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).App_dur = duration;
			Time app_etm = form.MainGrid().getRows().get(i).getAppointmentTime().copy();
			app_etm.addMinutes(getInt(duration)== -1?0:getInt(duration));
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).App_etm = app_etm.toString(TimeFormat.FLAT6);
			
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Appt_cmts = form.MainGrid().getRows().get(i).getComment();
			if(form.MainGrid().getRows().get(i).getDate() != null)
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Appt_dt = form.MainGrid().getRows().get(i).getDate().toString(DateFormat.ISO);
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Appt_stat ="-2189"; 
			if(form.MainGrid().getRows().get(i).getAttendanceTime() != null)
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Att_tm = form.MainGrid().getRows().get(i).getAttendanceTime().toString(TimeFormat.FLAT6);//Utility.GetStringFromTime(form.MainGrid[i].AttendanceTime);
			//appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Hcp_booking1 = form.getGlobalContext().CcoSched.getLoggedInUserId();
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Hcp_booking1  = appointmentsRecord.DataCollection.get(0).Hcp_booking;
			Sd_activstaff.Sd_activstaffRecord listowner = form.getGlobalContext().CcoSched.Booking.getListOwner();
			if (listowner != null)
			{
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Lo_id = listowner.Staff_no;
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Prfileass_id = listowner.Staffactiv_id;
			}

			if(form.getGlobalContext().CcoSched.Booking.getResourceSelected() != null)
			{
				if (form.getGlobalContext().CcoSched.Booking.getResourceSelected() instanceof Sd_modactmc.Sd_modactmcRecord)
					appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Mc_id = ((Sd_modactmc.Sd_modactmcRecord)form.getGlobalContext().CcoSched.Booking.getResourceSelected()).Mc_id;
				else
				{
					Sd_mc_act.Sd_mc_actRecord res2 = (Sd_mc_act.Sd_mc_actRecord)form.getGlobalContext().CcoSched.Booking.getResourceSelected();
					appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Mc_id = (res2 == null ? "" : res2.Mc_id);
				}
			}

			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Modality_id = ((!activityID.equals("-202") && !activityID.equals("-207")) ? "" : ((Sd_modactmc.Sd_modactmcRecord)form.getGlobalContext().CcoSched.Booking.getResourceSelected()).Modal_id);
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Pkey1 = patient.getPkey().getValue();
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Patient1 = String.valueOf(patVo.getID_Patient());
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Prfile_sess_id = form.MainGrid().getRows().get(i).getValue().getSessionId();
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Prfiled_sess_id = form.MainGrid().getRows().get(i).getValue().getSessionDetailsId();
			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Priorty = form.Priority().getValue() != null?Integer.toString(form.Priority().getValue().getID()):"";
			if(form.MainGrid().getRows().get(i).getTransport() != null)
				appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Trans_typ = form.MainGrid().getRows().get(i).getTransport() != null?Integer.toString(form.MainGrid().getRows().get(i).getTransport().getID()):"";

			appointmentsRecord.DataCollection.get(0).Appt_idCollection.get(i).Confirm_stat = form.ConfirmationStatus().getValue()!=null?Integer.toString(form.ConfirmationStatus().getValue().getID()):"";
		}

		// Sequence Special Requirements.
		appointmentsRecord.DataCollection.get(0).Spec_req_seqCollection.clear();
		for (int i = 0; i < form.SpecialRequirements().getRows().size(); i++)
		{				
			appointmentsRecord.DataCollection.get(0).Spec_req_seqCollection.add();
			appointmentsRecord.DataCollection.get(0).Spec_req_seqCollection.get(i).Act_ind = "Y";
			appointmentsRecord.DataCollection.get(0).Spec_req_seqCollection.get(i).Spec_req_id = form.SpecialRequirements().getRows().get(i).getRequirement() != null?Integer.toString(form.SpecialRequirements().getRows().get(i).getRequirement().getID()):"";
		}

		Result result = appointmentsRecord.insert();
		if (result.getId() > 0)
		{
			form.getGlobalContext().CcoSched.Booking.setBookingSucceeded(Boolean.TRUE);
			//UIEngine.Context.Set("10006:Booking succeeded", true);

			if(form.GPLetter().getValue() == true || form.PatientLetter().getValue() == true)
			{
				if(form.GPLetter().getValue() == true)
					form.getGlobalContext().CcoSched.LetterType.setGPLetter(Boolean.TRUE);
				if(form.PatientLetter().getValue() == true)
					form.getGlobalContext().CcoSched.LetterType.setPatientLetter(Boolean.TRUE);

				form.getGlobalContext().CcoSched.BookingConfirmation.setAPPT_UNID(new Integer(result.getId()));
				
				form.getGlobalContext().CcoSched.setAppointmentId(null); //form._GlobalContext.Scheduler.AppointmentId.Clear();
				form.getGlobalContext().CcoSched.setSelectLetterType("BOOKING");
				
				//WDEV-15837
				AppointmentRefVo refvo = new AppointmentRefVo();
				refvo.setID_Appointment(new Integer(result.getId()));
				form.getLocalContext().setappointmentid(refvo);				
				form.getGlobalContext().Core.setPrepareForPrinting(Boolean.FALSE);
				engine.open(form.getForms().CcoSched.PrintLetter);
				//engine.open(form.getForms().CcoSched.SelectLetter);
				//WDEV-15837
			}
			else
				engine.close(DialogResult.OK);
			
			notifyPathway(result.getId());
		}
		else
			ShowMessage(result.getMessage());		
	}

	/**
	 * wdev-6628
	 * Check if there is an rkey associated with this appointment
	 * If so, make a call to instantiate an event based on the referral
	 * @param appointmentsRecord
	 */
	private void notifyPathway(Integer newId) 
	{

		// Get the latest appointment record to retrieve the appt record
		Sd_appt newAppt = (Sd_appt)domain.getDTOInstance(Sd_appt.class);
		newAppt.Filter.clear();
		newAppt.Filter.Appt_head_id = String.valueOf(newId);
		Result result = newAppt.get();
		if (result != null && newAppt.DataCollection.count() == 0)
			return;
		
		
		// Get the activity from the session, this should be passed to the instantiate Event method
		Sd_session session = (Sd_session)domain.getDTOInstance(Sd_session.class);
		session.Filter.clear();
		
		session.Filter.Prfile_sess_id = newAppt.DataCollection.get(0).Appt_idCollection.get(0).Prfile_sess_id;
		result = session.get();
		if (result != null || session.DataCollection.count() == 0)
			return;

		try
		{
			// wdev-7174 include appt time in date information
			
			String apptDtDetails = newAppt.DataCollection.get(0).First_appt_date;
			if (newAppt.DataCollection.get(0).First_appt_att_time.length() == 5)
				apptDtDetails += "0";
			apptDtDetails += newAppt.DataCollection.get(0).First_appt_att_time;
			
			domain.instantiateEvent(null, newAppt.DataCollection.get(0).First_appt_id, apptDtDetails, session.DataCollection.get(0).Activ_id, "Event sent from Scheduling Booking Confirmation Screen", form.cmbEpisode().getValue());
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		} catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
		}

	}

	protected void OnFormClosing(CancelArgs args) 
	{
		//These are now local context variables and are cleared anyway 
		//Context.ContextBookingConfirmation.ClearCustomizedTransport();
		//Context.ContextBookingConfirmation.ClearCustomizedAttendanceTime();

		//Clear Related Appointment global context
		form.getGlobalContext().CcoSched.RelaitedAppointments.setRelaitedAppointments(null);
	}
	
	private Time GetRoundingTime(int rounding, Time time)
	{		
		int i;
		int hour = time.getHour();
		int min;
		String minStr;
		int remainder = 60%rounding;
		if (remainder != 0)
		{
			if (time.getMinute() < rounding)
			{
				if (time.getHour() == form.getGlobalContext().CcoSched.Booking.getStartTime().getHour())
					return form.getGlobalContext().CcoSched.Booking.getStartTime();

				time.addHours(-1);
				hour = time.getHour();
				for (i =60; (i%rounding) != 0; i--) {}
				min = i;
			}				
			else
			{
				for (i = 0; (rounding * (i+1)) <= time.getMinute(); i++) {}
				min = rounding * i;	
			}
		}
		else
		{
			for (i = 0; (rounding * (i+1)) <= time.getMinute(); i++) {}					
			min = rounding * i;	
		}

		if (min <= 9)
			minStr = "0" + Integer.toString(min);
		else
			minStr = Integer.toString(min);

		Time ddt = GetTimeFromString(String.valueOf(hour) +  minStr + "00");
		if (ddt == null)
		{
			ShowMessage("Wrong time format");
			return new Time(0,0);
		}
		
		return ddt;
	}

	protected void OnFormDialogClosed(FormName formName, DialogResult result) 
	{
		if (formName.equals(form.getForms().CcoSched.PrintLetter))
		{
			if(form.getGlobalContext().CcoSched.LetterType.getGPLetter() != null)
				form.getGlobalContext().CcoSched.LetterType.setGPLetter(null);
			if(form.getGlobalContext().CcoSched.LetterType.getPatientLetter() != null)
				form.getGlobalContext().CcoSched.LetterType.setPatientLetter(null);
			if(form.getGlobalContext().CcoSched.BookingConfirmation.getAPPT_UNID() != null)
				form.getGlobalContext().CcoSched.BookingConfirmation.setAPPT_UNID(null);
			
			engine.close(DialogResult.OK);
		}		
		
		if(formName.equals(form.getForms().CcoSched.RelaitedAppointments) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().CcoSched.RelaitedAppointments.getRelaitedAppointments() != null)
			{
				StringBuffer sb = new StringBuffer();
				Date Dtodt = null;
				if(form.getGlobalContext().CcoSched.RelaitedAppointments.getRelaitedAppointments().Sess_dt != null && (form.getGlobalContext().CcoSched.RelaitedAppointments.getRelaitedAppointments().Sess_dt.equals("") == false))
				{
					try{
					Dtodt = new Date(form.getGlobalContext().CcoSched.RelaitedAppointments.getRelaitedAppointments().Sess_dt, DateFormat.ISO);}catch(ParseException e){ShowMessage(e.getMessage());}
				}
				
				sb.append(Dtodt == null?"" : Dtodt.toString(DateFormat.STANDARD));
				sb.append(" ");
				sb.append(form.getGlobalContext().CcoSched.RelaitedAppointments.getRelaitedAppointments().Activitytxt);
				form.RelatedAppointment().setValue(sb.toString());
			}
		}	
	}

	protected void OnPatientDiary() 
	{
		engine.open(form.getForms().CcoSched.PatientDiaryDlg);
	}
	
	private void CheckPatientHasAlreadyAppointments()
	{
		//WDEV-15276
		Date minDate=new Date();
		if (form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList()!=null)
			minDate = ((DateSessionSlotsClass)form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList().get(0)).getDate();
			
		Date maxDate = minDate;
		
		for(int i=0;form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList()!=null &&  i<form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList().size(); i++) //WDEV-15276
			//foreach (DateSessionSlotsClass dateSession in Context.ContextBooking.DateSessionSlotsList)
		{
			DateSessionSlotsClass dateSession = (DateSessionSlotsClass)form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList().get(i);
			if ( minDate.isGreaterThan(dateSession.getDate()))
				minDate = dateSession.getDate();
			if ( maxDate.isLessThan(dateSession.getDate()))
				maxDate = dateSession.getDate();
		}
		
		//WDEV-15168
		PatientApptDiaryVoCollection appts = domain.listPatientAppts(form.getGlobalContext().Core.getPatientShort(), minDate, maxDate, true);
		
		if (appts != null && appts.getItems().length > 0)
			ShowMessage("The patient already has an appointment for some of the dates that you are about to book.");
	}
	
	private Time GetTimeFromString(String time)
	{
		Time tm = null;
		try{ tm = new Time(time, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
		return tm;
	}
	
	private void ShowMessage(String message)
	{
		engine.showMessage(message);
	}
	
	private int getInt(String val)
	{
		Integer value = GetInteger(val);
		return value != null?value.intValue():-1;
	}
	private Integer GetInteger(String val)
	{
		Integer newVal = null;
		if(val != null && !val.equals(""))
		{
			try{newVal = Integer.valueOf(val);}
			catch(NumberFormatException e)
			{ShowMessage(e.getMessage());}
		}

		return newVal;	
	}
	
	private ActionSession GetActionSession(Date apptDate)
	{
		if(form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDatesIsNotNull())
		{
			ArrayList actionSessions = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
			for(int i=0; i<actionSessions.size(); i++)
			{
				ActionSession actionSession = (ActionSession)actionSessions.get(i);
				if(apptDate.equals(actionSession.getSessionDate()))
					return actionSession;
			}
		}
		return null;
	}

	protected void onCmbEpisodeValueChanged() throws PresentationLogicException 
	{
		if (form.getLocalContext().getEpisodeListIsNotNull())
		{
			form.lblEpisode().setTooltip("Episode Selected: " + (String)form.getLocalContext().getEpisodeList().get(form.cmbEpisode().getValue()));
			form.cmbEpisode().setTooltip((String)form.getLocalContext().getEpisodeList().get(form.cmbEpisode().getValue()));
		}
	}
}
