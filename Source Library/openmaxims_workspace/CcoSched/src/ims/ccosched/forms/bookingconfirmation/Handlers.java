//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.bookingconfirmation;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindMainGridTransportLookup();
	abstract protected void bindPatientStatusLookup();
	abstract protected void defaultPatientStatusLookupValue();
	abstract protected void bindSpecialRequirementsRequirementLookup();
	abstract protected void bindPriorityLookup();
	abstract protected void defaultPriorityLookupValue();
	abstract protected void bindConfirmationStatusLookup();
	abstract protected void defaultConfirmationStatusLookupValue();
	abstract protected void bindBookingSystemTypeLookup();
	abstract protected void defaultBookingSystemTypeLookupValue();
	abstract protected void bindTransportListLookup();
	abstract protected void defaultTransportListLookupValue();
	abstract protected void OnFormClosing(CancelArgs args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnPatientDiary() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnCancel() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnBook() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnGridTransportChanged(int column, GenForm.MainGridRow row, Object value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnGridAttendanceTimeChanged(int column, GenForm.MainGridRow row, ims.framework.utils.Time value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbEpisodeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnMinus() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnPlus() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRelaitedAppointmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onPatientStatusValueSet(Object value);
	abstract protected void OnSpecialRequirements() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnEarlierDateOffered() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onPriorityValueSet(Object value);
	abstract protected void onConfirmationStatusValueSet(Object value);
	abstract protected void onBookingSystemTypeValueSet(Object value);
	abstract protected void DefaultAttendanceTime() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTransportListValueSet(Object value);
	abstract protected void OnTransportChanged() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormClosingEvent(new FormClosing()
		{
			private static final long serialVersionUID = 1L;
			public void handle(CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
			{
				OnFormClosing(args);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				OnFormDialogClosed(formName, result);
			}
		});
		this.form.PatientDiary().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnPatientDiary();
			}
		});
		this.form.Cancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnCancel();
			}
		});
		this.form.Book().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnBook();
			}
		});
		this.form.MainGrid().setGridComboBoxSelectionChangedEvent(new GridComboBoxSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, Object value) throws ims.framework.exceptions.PresentationLogicException
			{
				OnGridTransportChanged(column, new GenForm.MainGridRow(row), value);
			}
		});
		this.form.MainGrid().setGridTimeControlValueChangedEvent(new GridTimeControlValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, ims.framework.utils.Time value) throws ims.framework.exceptions.PresentationLogicException
			{
				OnGridAttendanceTimeChanged(column, new GenForm.MainGridRow(row), value);
			}
		});
		this.form.cmbEpisode().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbEpisodeValueChanged();
			}
		});
		this.form.imbMinus().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnMinus();
			}
		});
		this.form.imbPlus().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnPlus();
			}
		});
		this.form.btnRelaitedAppointment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRelaitedAppointmentClick();
			}
		});
		this.form.PatientStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onPatientStatusValueSet(value);
			}
		});
		this.form.SpecialRequirements().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				OnSpecialRequirements();
			}
		});
		this.form.EarlierDateOffered().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnEarlierDateOffered();
			}
		});
		this.form.Priority().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onPriorityValueSet(value);
			}
		});
		this.form.ConfirmationStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onConfirmationStatusValueSet(value);
			}
		});
		this.form.BookingSystemType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onBookingSystemTypeValueSet(value);
			}
		});
		this.form.DefaultAttendanceTime().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				DefaultAttendanceTime();
			}
		});
		this.form.TransportList().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onTransportListValueSet(value);
			}
		});
		this.form.TransportList().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnTransportChanged();
			}
		});
	}
	protected void bindLookups()
	{
		bindMainGridTransportLookup();
		bindPatientStatusLookup();
		bindSpecialRequirementsRequirementLookup();
		bindPriorityLookup();
		bindConfirmationStatusLookup();
		bindBookingSystemTypeLookup();
		bindTransportListLookup();
	}
	protected void rebindAllLookups()
	{
		bindMainGridTransportLookup();
		bindPatientStatusLookup();
		bindSpecialRequirementsRequirementLookup();
		bindPriorityLookup();
		bindConfirmationStatusLookup();
		bindBookingSystemTypeLookup();
		bindTransportListLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultPatientStatusLookupValue();
		defaultPriorityLookupValue();
		defaultConfirmationStatusLookupValue();
		defaultBookingSystemTypeLookupValue();
		defaultTransportListLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
