//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.55 build 2755.23108)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.unconfirmedappointments;

import ims.core.vo.PatientShort;
import ims.core.vo.lookups.ChannelType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.dto.Result;
import ims.dto.client.Go_ptplact;
import ims.dto.client.Go_ptreatpl;
import ims.dto.client.Lkup;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_activity_grp;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_appt_dts.Sd_appt_dtsRecord;
import ims.dto_move.vo.AppointmentRefVo;
import ims.framework.controls.TreeNode;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.util.ArrayList;

public class Logic extends BaseLogic
{

	private final String NEW_LINE = System.getProperty("line.separator");
	
	protected void onFormOpen()
	{
		if(Open() == 0)
		{
		}
	}
	private int Open()
	{
		// This method should return the number of records retrieved on success or a negative value on failure.
		EnableButtons(false);
		ClearPageControls();
		form.Appointments().clear();
		// Add code to retrieve and display the data here.
		LoadActivityGroup();
		loadActivities();
		return 0; // replace this value with the number of records retrieved.
	}
	private void LoadActivityGroup()
	{
		form.ActivityGroup().clear();
		form.Activity().clear();
		
		// load activity groups
		Sd_activity_grp activityGroups = form.getGlobalContext().CcoSched.ActivityView.getActivityGroups();
		if (activityGroups == null)
		{
			try
			{
				activityGroups = domain.listActivityGroups("Y");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
			}
			form.getGlobalContext().CcoSched.ActivityView.setActivityGroups(activityGroups);
		}
		
		for (int i = 0; activityGroups != null && i < activityGroups.DataCollection.count(); ++i)
			form.ActivityGroup().newRow(activityGroups.DataCollection.get(i), activityGroups.DataCollection.get(i).Grp_nm);
		
		// load activities
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();
		if (activities == null)
		{
			try
			{
				activities = domain.listActivities("Y", "Y");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
			}

			form.getGlobalContext().CcoSched.ActivityView.setActivities(activities);
		}

		loadActivities();
	}
	
	private void loadActivities()
	{
		if(form.ActivityGroup().getValue() == null)
			return;

		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();
		if(activities == null)
		{
			engine.showMessage("Please select an activity.");
			return;
		}

		String id = form.ActivityGroup().getValue().Grp_id;
		
		form.Activity().clear();
		for (int i = 0; i < activities.DataCollection.count(); ++i)
		{
			if (activities.DataCollection.get(i).Grp_id.equalsIgnoreCase(id))
				form.Activity().newRow(activities.DataCollection.get(i), activities.DataCollection.get(i).Activ_nm);
		}
	}
	private void ClearPageControls()
	{
		form.PatientHospitalNumber().setValue("");
		form.PatientName().setValue("");
		form.PatientDOB().setValue("");
		form.PatientAddress().setValue("");
		form.PatientCategory().setValue("");
		form.PatientHCP().setValue("");
		form.DayPhone().setValue("");
		form.NightPhone().setValue("");
		form.getGlobalContext().Core.setPatientShort(null);//WDEV-14332 
	}
	private void EnableButtons(boolean enable)
	{
		form.Confirm().setEnabled(enable);
		if(enable)
			form.Rebook().setEnabled(BookingEnable());
		else
			form.Rebook().setEnabled(enable);

		form.Cancel().setEnabled(enable);
	}
	private boolean BookingEnable()
	{
		//Find the root node 
		TreeNode rootNode = null;
		for (int i = 0; i < form.Appointments().getNodes().size(); i++)
		{
			TreeNode node = form.Appointments().getNodes().get(i);
			
			for(int x=0; x<node.getNodes().size(); x++)
				if(node.getNodes().get(x).isChecked())
				{
					rootNode = node;
					break;
				}
		}

		//Refresh the cancelled nodes
		if(rootNode != null)
		{
			for(int i=0; i<rootNode.getNodes().size(); i++)
			{
				if(rootNode.getNodes().get(i).isChecked())
				{
					//attAppt_stat -2190, -2191
					Object[] obj = (Object[])rootNode.getNodes().get(i).getValue();
					if(obj != null && obj.length == 2)
					{
						Sd_appt_dts.Sd_appt_dtsRecord Sd_appt_dtsDtoClient = (Sd_appt_dts.Sd_appt_dtsRecord)obj[0];
						//Check if "Cancelled reallocation required" or "DNA"
						if(Sd_appt_dtsDtoClient.Appt_stat.equals("-2190") ||
						   Sd_appt_dtsDtoClient.Appt_stat.equals("-2191"))
							return true;
					}
				}
			}
		}

		return false;
	}
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(result.equals(DialogResult.CANCEL))
			return;

		if(formName.equals(form.getForms().CcoSched.ClinicViewCancel))
		{
			//Comment this line
			onListAppointmentsClick();
		}
		else if(formName.equals(form.getForms().CcoSched.Rebooking))
		{	
			onListAppointmentsClick();
		}
		else if(formName.equals(form.getForms().CcoSched.LetterType))
		{
			form.getGlobalContext().CcoSched.BookingConfirmation.setAPPT_UNID(new Integer(form.getGlobalContext().CcoSched.getAppointmentHeaderId()));
			form.getGlobalContext().CcoSched.setSelectLetterType("BOOKING");
			engine.open(form.getForms().CcoSched.SelectLetter);
		}
		else if(formName.equals(form.getForms().CcoSched.BookingSystemType))
		{
			ConfirmBooking();
			onListAppointmentsClick();
		}
	}
	private void ConfirmBooking()
	{
		boolean nodeChecked = false;
		TreeNode rootNode = null;
		for (int i = 0; i < form.Appointments().getNodes().size(); i++)
		{
			TreeNode node = form.Appointments().getNodes().get(i);
			
			for(int x=0; x < node.getNodes().size(); x++)
			{
				if(node.getNodes().get(x).isChecked())
				{
					rootNode = node;
					nodeChecked = true;
					break;
				}
			}
		}

		if(!nodeChecked)
		{
			engine.showMessage("Please select an appointment.");
			return;
		}

		Object[] obj = (Object[])rootNode.getValue();
		if(obj != null && obj.length == 2)
		{
			Sd_appt_dts.Sd_appt_dtsRecord Sd_appt_dtsDtoClient = (Sd_appt_dts.Sd_appt_dtsRecord)obj[0];

			Sd_appt apptDto = null;
			try
			{
				apptDto = domain.getAndGetForUpdateAppointment(Sd_appt_dtsDtoClient.Appt_head_id);
			}
			catch(DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		
			form.getGlobalContext().CcoSched.setAppointmentId(null);
			for(int i=0; i<apptDto.DataCollection.count(); i++)
			{
				for(int j=0; j<apptDto.DataCollection.get(i).Appt_idCollection.count(); j++)
				{
					//Check to see if the appointments are checked in the tree - then Update with Confirm="-701"
					if(AppointmentChecked(apptDto.DataCollection.get(i).Appt_idCollection.get(j).Appt_id))
					{
						apptDto.DataCollection.get(i).Appt_idCollection.get(j).Confirm_stat = "-2225"; //"-701";
						
						if(form.getGlobalContext().CcoSched.getAppointmentId() != null)
						{
							if(form.getGlobalContext().CcoSched.getAppointmentId().length() > 0)
								form.getGlobalContext().CcoSched.setAppointmentId(form.getGlobalContext().CcoSched.getAppointmentId() + "||");

							form.getGlobalContext().CcoSched.setAppointmentId(form.getGlobalContext().CcoSched.getAppointmentId() + apptDto.DataCollection.get(i).Appt_idCollection.get(j).Appt_id);
						}
						else
						{
							form.getGlobalContext().CcoSched.setAppointmentId(apptDto.DataCollection.get(i).Appt_idCollection.get(j).Appt_id);
						}
					}
				}
			}
			
			//ICCO677
			if(form.getGlobalContext().CcoSched.BookingSystemType.getSystemType() != null)
				apptDto.DataCollection.get(0).Booking_sys_type = form.getGlobalContext().CcoSched.BookingSystemType.getSystemType();

			try
			{
				apptDto = domain.updateAppointment(apptDto);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			//Refresh the unconfirmed nodes
			if(rootNode != null)
			{
				EnableButtons(false);
				for(int i=0; i<rootNode.getNodes().size(); i++)
				{
					if(rootNode.getNodes().get(i).isChecked())
					{
						rootNode.getNodes().get(i).setChecked(false);
						rootNode.getNodes().get(i).setText(rootNode.getNodes().get(i).getText() + " Conf. Status: " + GetStatusText("-2225")); //"-701"));
					}
				}
			}

			form.getGlobalContext().CcoSched.setAppointmentHeaderId(apptDto.DataCollection.get(0).Appt_head_id);

			engine.open(form.getForms().CcoSched.LetterType);
			 
			//Form._GlobalContext.Common.TemplateCategoryIDList.Value = 
			//Add a dialog to display -"Do you want to print a letter?"
			//WDEV-15837
			//engine.open(form.getForms().CcoSched.LetterType);
			
			
			AppointmentRefVo refvo = new AppointmentRefVo();
			refvo.setID_Appointment(new Integer(form.getGlobalContext().CcoSched.getAppointmentHeaderId()));			
			form.getLocalContext().setappointmentid(refvo);			
			form.getGlobalContext().CcoSched.setSelectLetterType("BOOKINGCONFIRM");
			form.getGlobalContext().CcoSched.LetterType.setPatientLetter(true);
			engine.open(form.getForms().CcoSched.PrintLetter);
			//WDEV-15837
			
		}
	}
	private boolean AppointmentChecked(String apptId)
	{
		for (int i = 0; i < form.Appointments().getNodes().size(); i++)
		{
			TreeNode node = form.Appointments().getNodes().get(i);
		
			for(int j=0; j<node.getNodes().size(); j++)
			{
				if(node.getNodes().get(j).isChecked())
				{
					Object[] obj = (Object[])node.getNodes().get(j).getValue();
					if(obj != null && obj.length == 2)
					{
						Sd_appt_dts.Sd_appt_dtsRecord Sd_appt_dtsDtoClient = (Sd_appt_dts.Sd_appt_dtsRecord)obj[0];
						if(Sd_appt_dtsDtoClient.Appt_id.equals(apptId))
							return true;
					}
				}
			}
		}

		return false;
	}
	private String GetStatusText(String lkupId)
	{
		//Confirmation Status
		String StatusTxt = "Confirmed";
		Lkup lookup = null;
		if(form.getLocalContext().getConfirmationStatus() == null)
		{
			try
			{
				lookup = domain.getLookupInstance("3498");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
			}
			form.getLocalContext().setConfirmationStatus(lookup);
		}
		
		lookup = form.getLocalContext().getConfirmationStatus();

		for (int i = 0; lookup != null && i<lookup.DataCollection.count(); i++)
			if(lookup.DataCollection.get(i).Lkup_id.equals(lkupId))
				return lookup.DataCollection.get(i).Lkup_nm;

		return StatusTxt;
	}
	protected void onRebookClick() throws ims.framework.exceptions.PresentationLogicException
	{
//		 Info needed for the Context - Treatment Plan & Selected Action Id
		String actionId = GetSelectedAction();
		if(!actionId.equals(""))
		{
			Go_ptplact actions = null; 
			try
			{
				actions = domain.getAction(actionId);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			if (actions == null || actions.DataCollection.count() == 0)
			{
				engine.showMessage("Failed to get treatment plan actions.");
				return;
			}

			Go_ptreatpl tp = null;
			try
			{
				tp = domain.getTreatmentPlan(actions.DataCollection.get(0).Pt_tp_id);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			if (tp == null || tp.DataCollection.count() != 1)
			{
				engine.showMessage("Failed to get treatment plan details.");
				return;
			}

			form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(actionId);
			form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(tp.DataCollection.get(0));
		}

		engine.open(form.getForms().CcoSched.Rebooking);
	}
	protected void onCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
//		Build AppointmentsId ArrayList
		form.getGlobalContext().CcoSched.ClinicView.setAppointmentIDList(NodesSelected());

		String title = "Cancel Appointment ";
		   title += GetCancelApptTitle();
		form.getGlobalContext().CcoSched.ClinicViewCancel.setDialogTitle(title);
		engine.open(form.getForms().CcoSched.ClinicViewCancel,"Unconfirmed Appointments Cancel");
	}
	protected void onConfirmClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().CcoSched.BookingSystemType);
	}
	
	protected void onAppointmentsTreeViewCheck(ims.framework.controls.TreeNode selectedNode) throws ims.framework.exceptions.PresentationLogicException
	{
		if(selectedNode.isChecked())
		{
			if(selectedNode.getNodes().size() != 0)
			{
				//Root
				DeselectParents(selectedNode);
				SelectLeaves(selectedNode, true);
			}
			else
			{
				//Leaves
				DeselectNode(selectedNode);
			}

			EnableButtons(true);
			form.Appointments().setValue(selectedNode.getValue());
			OnAppointmentsChanged();
		}
		else
		{
			if(selectedNode.getNodes().size() != 0)
			{
				//Root
				SelectLeaves(selectedNode, false);
				EnableButtons(false);
				ClearPageControls();
			}
			else
			{	//Leaves
				if(!AnyLeavesSelected(selectedNode))
				{
					EnableButtons(false);
					ClearPageControls();
				}
			}
		}
	}
	private void OnAppointmentsChanged()
	{
		if(form.Appointments().getValue() == null)
			return;

		Object[] obj = (Object[])form.Appointments().getValue();
		if(obj != null && obj.length == 2)
		{
			boolean doPatientGet = true;
			Result result = null;
			Sd_appt_dts.Sd_appt_dtsRecord Sd_appt_dtsDtoClient = (Sd_appt_dts.Sd_appt_dtsRecord)obj[0];
			
			form.PatientCategory().setValue(Sd_appt_dtsDtoClient.Txcattypetxt);
			form.PatientHCP().setValue(Sd_appt_dtsDtoClient.Act_consulttxt);

			if(form.getGlobalContext().Core.getPatientShortIsNotNull()
				&& form.getGlobalContext().Core.getPatientShort().getPkey() != null)
			{
				//If the previous selected patient has the same pkey don't do a get again
				if(form.getGlobalContext().Core.getPatientShort().getPkey().getValue().equals(Sd_appt_dtsDtoClient.Pkey))
					doPatientGet = false;
			}

			//Patient Dto
			Patient patient = null;
			if(doPatientGet)
			{
				try
				{
					patient = domain.getPatient(Sd_appt_dtsDtoClient.Pkey);
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
				}
/*				if (result != null)
				{
					//ICCO687
					if(result.getId() == -2)
					{
						engine.showMessage("Error Getting Patient Details for pkey = "+Sd_appt_dtsDtoClient.Pkey);
						patient.DataCollection.add();					
						patient.DataCollection.get(0).Pkey = Sd_appt_dtsDtoClient.Pkey;
						patient.DataCollection.get(0).Fnm1 = "Unknown Patient";
						patient.DataCollection.get(0).Snm  = "Pkey="+Sd_appt_dtsDtoClient.Pkey;
					}
					else
					{
						engine.showMessage(result.getMessage());
						//continue;
					}
				}*/

				if(patient != null && patient.DataCollection.count() > 0)
				{
					setPatientIntoContext(patient.DataCollection.get(0).Pkey);
					setPIDTooltip();
				}
			}

			//Context details for ClinicViewCancelDialog & Rebooking - in FormClosing will be deleted
			//Appointment HeaderId
			form.getGlobalContext().CcoSched.ClinicView.setAppointmentHeaderID(Sd_appt_dtsDtoClient.Appt_head_id);
			//Rebooking
			form.getGlobalContext().CcoSched.CancelledAppointments.setRebookAppointmentDetail(Sd_appt_dtsDtoClient.Appt_head_id);
			//Patient dto
			if(patient != null)
				DisplayPatientRecord(form.getGlobalContext().Core.getPatientShort());
		}
	}
	
	private void setPIDTooltip()
	{
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
		engine.addAlert(new ims.alerts.PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltip(form.getGlobalContext().Core.getPatientShort(), null, null)));
	}
	
	private void setPatientIntoContext(String pkey)
	{
		PatientShort patientShort = new PatientShort();
	
		try
		{
			patientShort = domain.getPatientShort(pkey);
		}
		catch (DomainInterfaceException exc)
		{
			engine.showMessage(exc.getMessage());
		}
		
		form.getGlobalContext().Core.setPatientShort(patientShort);
	}
	private void DisplayPatientRecord(PatientShort patient)
	{
		if(patient == null)
			return;

		form.PatientHospitalNumber().setValue(patient.getHospnum() != null ? patient.getHospnum().getValue() : "");
		form.PatientName().setValue(patient.getNameIsNotNull() ? patient.getName().getForename() + " " + patient.getName().getSurname() : "");
		form.PatientDOB().setValue(patient.getDobIsNotNull() ? patient.getDob().toString() : "");

		if (patient.getAddressIsNotNull())
		{
			StringBuffer address = new StringBuffer(150);
			if(patient.getAddress().getLine1()!=null){
				address.append(patient.getAddress().getLine1());
				address.append(NEW_LINE);
			}
			if(patient.getAddress().getLine2()!=null){
				address.append(patient.getAddress().getLine2());
				address.append(NEW_LINE);
			}
			if(patient.getAddress().getLine3()!=null){
				address.append(patient.getAddress().getLine3());
				address.append(NEW_LINE);
			}
			if(patient.getAddress().getLine4()!=null){
				address.append(patient.getAddress().getLine4());
				address.append(NEW_LINE);
			}
			if(patient.getAddress().getLine5()!=null){
				address.append(patient.getAddress().getLine5());
				address.append(NEW_LINE);
			}
			form.PatientAddress().setValue(address.toString());
		}
		if(patient.getCommunicationChannel(ChannelType.WORK_PHONE)!=null)
			form.DayPhone().setValue(patient.getCommunicationChannel(ChannelType.WORK_PHONE).toString());
		if(patient.getCommunicationChannel(ChannelType.HOME_PHONE)!=null)
			form.NightPhone().setValue(patient.getCommunicationChannel(ChannelType.HOME_PHONE).toString());

		form.getGlobalContext().CcoSched.PatientSearch.setAlive(Boolean.TRUE);
	}
	private boolean AnyLeavesSelected(TreeNode selectedNode)
	{
		TreeNode parentNode = null;
		//Get the parent node
		for (int i = 0; i < form.Appointments().getNodes().size(); i++)
		{
			TreeNode node = form.Appointments().getNodes().get(i);
			
			for(int x=0; x < node.getNodes().size(); x++)
				if(node.getNodes().get(x).equals(selectedNode))
					parentNode = node;
		}
		
		if(parentNode != null)
			for(int i=0; i < parentNode.getNodes().size(); i++)
				if(parentNode.getNodes().get(i).isChecked())
					return true;
		
		return false;
	}
	private void DeselectNode(TreeNode selectedNode)
	{
		TreeNode parentNode = null;
		//Get the parent node
		for (int i = 0; i < form.Appointments().getNodes().size(); i++)
		{
			TreeNode node = form.Appointments().getNodes().get(i);
			
			for(int x=0; x < node.getNodes().size(); x++)
				if(node.getNodes().get(x).equals(selectedNode))
					parentNode = node;
		}

		//foreach(TreeNode node in Form.Appointments.Nodes)
		for (int i = 0; i < form.Appointments().getNodes().size(); i++)
		{
			TreeNode node = form.Appointments().getNodes().get(i);
			
			//deselect all the parents except the one that its leaf was selected
			if(parentNode != null && node.equals(parentNode) == false)
			{
				node.setChecked(false);
			
				for(int x=0; x<node.getNodes().size(); x++)
				{
					if(node.getNodes().get(x).equals(selectedNode) == false)
					{
						node.getNodes().get(x).setChecked(false);
					}
				}
			}
		}
	}
	private void SelectLeaves(TreeNode parentNode, boolean Select)
	{
		for(int x=0; x < parentNode.getNodes().size(); x++)
			parentNode.getNodes().get(x).setChecked(Select);
	}
	private void DeselectParents(TreeNode selectedNode)
	{
		for (int i = 0; i < form.Appointments().getNodes().size(); i++)
		{
			TreeNode node = form.Appointments().getNodes().get(i);
			
			if(node != selectedNode)
			{
				node.setChecked(false);
				
				for(int x=0; x<node.getNodes().size(); x++)
					if(node.getNodes().get(x).equals(selectedNode) == false)
						node.getNodes().get(x).setChecked(false);
			}
		}
	}
	protected void onListAppointmentsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ListAppointments(false);
	}
	private void ListAppointments(boolean bExpandPrevSelNode)
	{
		ClearContext();
		ClearPageControls();
		form.Appointments().clear();
		EnableButtons(false);
		if(form.ActivityGroup().getValue() == null)
		{
			engine.showMessage("Please select an Activity Group.");
			return;
		}
		if(form.Activity().getValue() == null)
		{
			engine.showMessage("Please select an Activity.");
			return;
		}

		String group_id = form.ActivityGroup().getValue().Grp_id;
		String activ_id = form.Activity().getValue().Activ_id;
		String confirm_stat = "-2226"; // "-700";
		String appt_stat = "-2189||-2190||-2194";
		
		Sd_appt_dts appointments = null;
		try
		{
			appointments = domain.listAppointments(group_id, activ_id, confirm_stat, appt_stat);	
		}
		catch(DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		if(appointments != null && appointments.DataCollection.count() == 0)
		{
			engine.showMessage("No records.");
		}

		//foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient appointment in appointments.Sd_appt_dtsCollection)
		for (int i = 0; i < appointments.DataCollection.count(); i++)
		{
			Sd_appt_dts.Sd_appt_dtsRecord appointment = appointments.DataCollection.get(i); 
			//Group by appt_head_id
			boolean nodeFound = false;
			//foreach(TreeNode node in Form.Appointments.Nodes)
			for (int j = 0; j < form.Appointments().getNodes().size(); j++)
			{
				TreeNode node = form.Appointments().getNodes().get(j);
				
				Object[] obj = (Object[])node.getValue();
				if(obj != null && obj.length == 2)
				{
					Sd_appt_dts.Sd_appt_dtsRecord Sd_appt_dtsDtoClient = (Sd_appt_dts.Sd_appt_dtsRecord)obj[0];
					if(Sd_appt_dtsDtoClient.Appt_head_id.equals(appointment.Appt_head_id))
					{
						//Existing node
						LoadChildNode(node, appointment);
						nodeFound=true;
						if(bExpandPrevSelNode && form.getGlobalContext().CcoSched.ClinicView.getAppointmentHeaderID() != null)
						{
							if(Sd_appt_dtsDtoClient.Appt_head_id.equals(form.getGlobalContext().CcoSched.ClinicView.getAppointmentHeaderID()))
								node.setExpanded(true);
						}
					}
				}
			}

			if(!nodeFound)
			{
				//TODO check patient
				Patient patient = null;//(Patient)domain.getDTOInstance(Patient.class);

				//New node
				Object[] parentNodeObj = new Object[]{appointment, patient};
				TreeNode parentNode = form.Appointments().getNodes().add(parentNodeObj, 
					"Hosp. No. " + appointment.Hospnum+//patient.PatientCollection[0].attHospnum + 
					" " + appointment.Fnm1+//patient.PatientCollection[0].attFnm1 +
					" " + appointment.Snm);//patient.PatientCollection[0].attSnm);
				LoadChildNode(parentNode, appointment);
			}
		}
	}
	private void LoadChildNode(TreeNode node, Sd_appt_dtsRecord appointment)
	{
		Object[] leafNodeObj = null;
		Object[] obj		 = null;
		obj = (Object[])node.getValue();
		if(obj != null && obj.length == 2)
		{
			Date sessDate = null;
			try
			{
				sessDate = new Date(appointment.Sess_dt, DateFormat.ISO);
			} catch (Exception e)
			{
				sessDate = null;
			}

			Time atTime = null;
			try
			{
				atTime = new Time(appointment.Att_tm, TimeFormat.FLAT6);
			} catch (Exception e)
			{
				atTime = null;
			}
			
			String attTime = atTime == null ? " " : atTime.toString();

			leafNodeObj = new Object[]{appointment, (Patient)obj[1]};
			TreeNode childNode = node.getNodes().add(leafNodeObj, sessDate == null ? "" : sessDate.toString() + " " +
				"Att. Time:" + attTime + " " +
				"Type:" + appointment.Trans_typtxt + " " +
				"Action:" + appointment.Action_idtxt + " " +
				"Appt. Status:" + appointment.Appt_stattxt);
		}
	}
	private void ClearContext()
	{
		form.getGlobalContext().CcoSched.ClinicView.setAppointmentIDList(null);
		form.getGlobalContext().CcoSched.CancelledAppointments.setRebookAppointmentDetail(null);
	}
	protected void onActivityGroupValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadActivities();
	}
	
//	Gets the selected node with Appointment Status=-2190 - Cancelled Reallocation Requireds
	private String GetSelectedAction()
	{
		TreeNode rootNode = GetSelectedRoot();
		if(rootNode == null)
			return "";

		for(int i=0; i<rootNode.getNodes().size(); i++)
		{
			if(rootNode.getNodes().get(i).isChecked())
			{
				//attAppt_stat -2190, -2191
				Object[] obj = (Object[])rootNode.getNodes().get(i).getValue();
				if(obj != null && obj.length == 2)
				{
					Sd_appt_dts.Sd_appt_dtsRecord Sd_appt_dtsDtoClient = (Sd_appt_dts.Sd_appt_dtsRecord)obj[0];
					//Check if "Cancelled reallocation required" or "DNA"
					if(Sd_appt_dtsDtoClient.Appt_stat != null &&
						(Sd_appt_dtsDtoClient.Appt_stat.equals("-2190") ||
						Sd_appt_dtsDtoClient.Appt_stat.equals("-2191")))
						return Sd_appt_dtsDtoClient.Treatpl_act_id;
				}
			}
		}

		return "";
	}
	
	private TreeNode GetSelectedRoot()
	{
		//foreach(TreeNode node in Form.Appointments.Nodes)
		TreeNode node;
		for(int i=0; i<form.Appointments().getNodes().size(); i++)
		{
			node = form.Appointments().getNodes().get(i);
			for(int x=0; x<node.getNodes().size(); x++)
				if(node.getNodes().get(x).isChecked())
					return node;
		}

		return null;
	}
	
	private ArrayList NodesSelected()
	{ 
		ArrayList nodelist = new ArrayList();
		TreeNode node;
		for(int i=0; i<form.Appointments().getNodes().size(); i++)
		//foreach(TreeNode node in Form.Appointments.Nodes)
		{
			node = form.Appointments().getNodes().get(i);
			for(int x=0; x<node.getNodes().size(); x++)
			{
				if(node.getNodes().get(x).isChecked())
				{
					Object[] obj = (Object[])node.getNodes().get(x).getValue();
					if(obj != null && obj.length == 2)
					{
						Sd_appt_dts.Sd_appt_dtsRecord Sd_appt_dtsDtoClient = (Sd_appt_dts.Sd_appt_dtsRecord)obj[0];
						nodelist.add(Sd_appt_dtsDtoClient.Appt_id);
					}
				}
			}
		}
		
		return nodelist;
	}
	protected void onFormClosing(CancelArgs args) throws PresentationLogicException 
	{
		//we set it to null as the variable is persistant
		form.getGlobalContext().CcoSched.BookingSystemType.setSystemType(null);
	}
	private String GetCancelApptTitle()
	{
		if(form.Appointments().getSelectedNode() != null)
		{
			if(countNodesSelected() > 1)
			{
				return form.Appointments().getSelectedNode().getParent() != null?form.Appointments().getSelectedNode().getParent().getText():"";
			}
			else
			{
				TreeNode node;
				for(int i=0; form.Appointments().getSelectedNode().getParent() != null && i<form.Appointments().getSelectedNode().getParent().getNodes().size(); i++)
				{
					node = form.Appointments().getSelectedNode().getParent().getNodes().get(i);
					if(node.isChecked())
						return node.getText();
				}
			}
		}
		
		return "";
	}
	private int countNodesSelected()
	{
		int count = 0;
		for(int i=0; form.Appointments().getSelectedNode().getParent() != null && i<form.Appointments().getSelectedNode().getParent().getNodes().size(); i++)
		{
			if(form.Appointments().getSelectedNode().getParent().getNodes().get(i).isChecked())
				count++;
		}

		return count;
	}

}
