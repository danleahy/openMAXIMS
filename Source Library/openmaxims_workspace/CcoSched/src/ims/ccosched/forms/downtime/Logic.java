//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.21 build 40924.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.downtime;

import ims.alerts.PatientAlertCCO;
import ims.ccosched.forms.downtime.GenForm.MainGridRow;
import ims.dto.Result;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_activity_grp;
import ims.dto.client.Sd_activstaff;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_mc_activ;
import ims.dto.client.Sd_sess_avail;
import ims.framework.delegates.CancelArgs;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;


public class Logic extends BaseLogicDTO
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.getGlobalContext().CcoSched.Reschedule.setListOfAppoinments(null);
		clearPIDAndPatient();
		form.ActivityGroup().clear();
		form.Activity().clear();
		form.Date().setValue((new DateTime()).getDate());
		Clean();
		form.Move().setEnabled(false);
		form.Cancel().setEnabled(false);

		// load activity groups
		Sd_activity_grp activityGroups = form.getGlobalContext().CcoSched.ActivityView.getActivityGroups();
		if (activityGroups == null)
		{
			activityGroups = (Sd_activity_grp)domain.getDTOInstance(Sd_activity_grp.class);
			activityGroups.Filter.clear();
			activityGroups.Filter.Act_ind_grp = "Y";

			Result result = activityGroups.list();
			if (result != null)
			{
				showMessage(result.getMessage());
				return;
			}
			form.getGlobalContext().CcoSched.ActivityView.setActivityGroups(activityGroups);
		}
		for (int i = 0; i < activityGroups.DataCollection.count(); ++i)
			form.ActivityGroup().newRow(activityGroups.DataCollection.get(i), activityGroups.DataCollection.get(i).Grp_nm);

		// load activities
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();
		if (activities == null)
		{
			activities = (Sd_activity) domain.getDTOInstance(Sd_activity.class);
			activities.Filter.clear();
			activities.Filter.Act_ind = "Y";
			activities.Filter.Grp_act_ind = "Y";

			Result result = activities.list();
			if (result != null)
			{
				showMessage(result.getMessage());
				return;
			}	
			form.getGlobalContext().CcoSched.ActivityView.setActivities(activities);
		}

		onActivityGroupValueChanged();
	}
	
	private void clearPIDAndPatient()
	{
		engine.clearAlertsByType(PatientAlertCCO.class);
		form.getGlobalContext().Core.setPatientShort(null);
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().CcoSched.Reschedule.setListOfAppoinments(null);
		onFindPatientsClick();
	}
	protected void onCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Sd_appt_dts sd_appt_dtsDto = (Sd_appt_dts) domain.getDTOInstance(Sd_appt_dts.class);
				
		for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
			if (form.MainGrid().getRows().get(i).getSelect())
				sd_appt_dtsDto.DataCollection.add(form.MainGrid().getRows().get(i).getValue());//Form._GlobalContext.Scheduler.Reschedule.SelectedAppointments.Value.Add(Form.MainGrid[i].Value);

		form.getGlobalContext().CcoSched.Reschedule.setSelectedAppointments(sd_appt_dtsDto.DataCollection);
		if (form.getGlobalContext().CcoSched.Reschedule.getSelectedAppointments().count() == 0)
			showMessage("Please select a patient to cancel.");
		else
			engine.open(form.getForms().CcoSched.AppointmentsCancel);
	}
	protected void onMoveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Sd_appt_dts sd_appt_dtsDto = (Sd_appt_dts) domain.getDTOInstance(Sd_appt_dts.class);
		for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
			if (form.MainGrid().getRows().get(i).getSelect())
				sd_appt_dtsDto.DataCollection.add(form.MainGrid().getRows().get(i).getValue());

		if (sd_appt_dtsDto.DataCollection.count() == 0)
			showMessage("Please select a patient to move.");
		else
		{
			form.getGlobalContext().CcoSched.Reschedule.setListOfAppoinments(sd_appt_dtsDto.DataCollection);
			engine.open(form.getForms().CcoSched.RescheduleMove);
		}
	}
	protected void onFindPatientsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.MainGrid().getRows().clear();
		//Context.ContextReschedule.ClearResourceSessions();
		form.getGlobalContext().CcoSched.Reschedule.setResourceSessions(null);
		//Context.ContextReschedule.ClearSelectedResource();
		form.getGlobalContext().CcoSched.Reschedule.setSelectedResource(null);
		//Context.ClearSelectedDate();
		form.getGlobalContext().CcoSched.Booking.setSelectedDate(null);
				
		if (form.ActivityGroup().getValue() == null)
		{
			showMessage("Please select an activity group");
			return;
		}
		if (form.Activity().getValue() == null)
		{
			showMessage("Please select an activity");
			return;
		}
		if (form.Resource().getValue() == null)
		{
			showMessage("Please select a resource");
			return;
		}
		if (form.Date().getValue() == null)
		{
			showMessage("Please select a date");
			return;
		}
		
		if (form.StartTime().getValue() != null && form.EndTime().getValue() != null && form.StartTime().getValue().isGreaterOrEqualThan(form.EndTime().getValue()))
		{
			showMessage("Start time must be lower than end time");
			return;
		}
		
		Sd_sess_avail sessions = (Sd_sess_avail) domain.getDTOInstance(Sd_sess_avail.class);
		sessions.Filter.clear();			
		sessions.Filter.Sess_dt = getStringFromDate(form.Date().getValue());
		sessions.Filter.Grp_id = form.ActivityGroup().getValue().Grp_id;
		sessions.Filter.Activ_id = form.Activity().getValue().Activ_id;
		if (form.ListOwner().getValue() != null)
            sessions.Filter.Lo_id = form.ListOwner().getValue().Staff_no;
		if (form.Resource().getValue() != null)
			sessions.Filter.Mc_id = form.Resource().getValue().Mc_id;

		Result result = sessions.list();
		if (result != null)
		{
			showMessage(result.getMessage());
			return;
		}			
		//Context.ContextReschedule.ResourceSessions = sessions;
		form.getGlobalContext().CcoSched.Reschedule.setResourceSessions(sessions);
		//Context.ContextReschedule.SelectedResource = form.Resource().getValue().Mc_id;
		form.getGlobalContext().CcoSched.Reschedule.setSelectedResource(form.Resource().getValue().Mc_id);
		//Context.ContextReschedule.SelectedResourceName = form.Resource().getValue().Mc_name;
		form.getGlobalContext().CcoSched.Reschedule.setSelectedResourceName(form.Resource().getValue().Mc_name);
		//Context.SelectedDate = form.Date().getValue();
		form.getGlobalContext().CcoSched.Booking.setSelectedDate(form.Date().getValue());

		Sd_sess_avail.Sd_sess_availRecord session;
		for(int k=0; k<sessions.DataCollection.count();k++)
		{
			session = sessions.DataCollection.get(k);  
			if (session.Mc_id.equals(form.Resource().getValue().Mc_id))
			{
				String[] tmp = StringUtils.splitString(session.Sessiond_ids, ",+");
				for (int i = 0; i < (tmp.length / 2); ++i)
				{
					Sd_appt_dts appointments = (Sd_appt_dts) domain.getDTOInstance(Sd_appt_dts.class);
					appointments.Filter.clear();
					appointments.Filter.Prfile_sess_id = tmp[2 * i];
					appointments.Filter.Prfiled_sess_id = tmp[2 * i + 1];
					// ********** Added Arrived Status, requested by Jacinta - 9 May 2003.
					appointments.Filter.Appt_stat = "-2189 || -2194 || -2195 || -2196"; //"-2189" Open, "-2194" Rebook, "-2195" Moved, "-2196" Arrived
					if (form.Category().getValue() != null)
						appointments.Filter.Txcattype = Integer.toString(form.Category().getValue().getID());
					if ((form.StartTime().getValue() != null) && (!form.StartTime().getValue().toString().equals("")))
						appointments.Filter.Stm = ">" + getStringFromTime(form.StartTime().getValue());
					if ((form.EndTime().getValue() != null) && (!form.EndTime().getValue().toString().equals("")))
						appointments.Filter.Etm = "<" + getStringFromTime(form.EndTime().getValue());
					result = appointments.list();
					if (result != null)
					{
						showMessage(result.getMessage());
						return;
					}
				
					for(int j=0; j<appointments.DataCollection.count(); j++)
					{
						Sd_appt_dts.Sd_appt_dtsRecord appointment = appointments.DataCollection.get(j);
						GenForm.MainGridRow row = form.MainGrid().getRows().newRow();
						row.setValue(appointment);

						if (appointment.First_appt_id.equals(appointment.Appt_id))
							row.setBooking(form.getImages().CcoSched.First);
						else if (appointment.Last_appt_id.equals(appointment.Appt_id))
							row.setBooking(form.getImages().CcoSched.Last);
						Time tm = getTimeFromString(appointment.Stm);
						row.setTime(tm != null?tm.toString(TimeFormat.DEFAULT):"");//(dt.IsNull ? "" : string.Format("{0:D2}.{1:D2}", dt.Value.Hour, dt.Value.Minute));

						row.setHospitalNumber(appointment.Hospnum);

						row.setName(appointment.Titl + " " + appointment.Fnm1 + " " + appointment.Snm);

						row.setCategory(appointment.Txcattypetxt);
						row.setAttendingAs(appointment.Attnd_astxt);
						row.setModality(appointment.Modidtxt);
						row.setEnergy(appointment.Modenrgy);
						row.setUnit(appointment.Modenrgyunittxt);
					}
				}
			}
		}
		if (form.MainGrid().getRows().size() == 0)
		{
			showMessage("No appointments found.");
			form.Move().setEnabled(false);
			form.Cancel().setEnabled(false);
		}
		else
		{
			form.Move().setEnabled(true);
			form.Cancel().setEnabled(true);
		}
		
		updateControlState(); // WDEV-18657 
	}
	protected void onActivityValueChanged()
	{
		Clean();
		if (form.Activity().getValue() != null)
		{
			Sd_activstaff listOwners = (Sd_activstaff)domain.getDTOInstance(Sd_activstaff.class);
			listOwners.Filter.clear();
			listOwners.Filter.Grp_id = form.ActivityGroup().getValue().Grp_id;
			listOwners.Filter.Activ_id = form.Activity().getValue().Activ_id;
			listOwners.Filter.Act_ind  	 = "Y";
			listOwners.Filter.Act_indstf = "Y";

			Result result = listOwners.list();
			if (result != null)
			{
				showMessage(result.getMessage());
				return;
			}
			
			for(int i=0; i<listOwners.DataCollection.count(); i++)
				form.ListOwner().newRow(listOwners.DataCollection.get(i), listOwners.DataCollection.get(i).Staff_name);

			Sd_mc_activ resources = (Sd_mc_activ) domain.getDTOInstance(Sd_mc_activ.class);
			resources.Filter.clear();
			resources.Filter.Group_id = form.ActivityGroup().getValue().Grp_id;
			resources.Filter.Activity_id = form.Activity().getValue().Activ_id;

			result = resources.list();
			if (result != null)
			{
				showMessage(result.getMessage());
				return;
			}
			for(int i=0; i<resources.DataCollection.count(); i++)
				form.Resource().newRow(resources.DataCollection.get(i), resources.DataCollection.get(i).Mc_name);
		}
	}
	protected void onActivityGroupValueChanged() //throws ims.framework.exceptions.PresentationLogicException
	{
		Clean(); //WDEV-18072 
		form.Activity().clear(); //WDEV-14601
		
        //23/01/2006 - the group doesn't default to the first value anymore...
        if(form.ActivityGroup().getValue() == null)
            return;
        
		String id = form.ActivityGroup().getValue().Grp_id;
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();

		if (activities == null)
		{
			showMessage("Please select activity.");
			return;
		}

		for (int i = 0; i < activities.DataCollection.count(); ++i)
		{
			if (activities.DataCollection.get(i).Grp_id.equals(id))
				form.Activity().newRow(activities.DataCollection.get(i), activities.DataCollection.get(i).Activ_nm);
		}

		onActivityValueChanged();
	}
	
	private void Clean()
	{
		form.MainGrid().getRows().clear();
		form.ListOwner().clear();
		form.Resource().clear();
		updateControlState();// WDEV-18657 
	}
	
	private String getStringFromDate(Date date)
	{
		if(date != null)
			return date.toString(DateFormat.ISO);
		return "";
	}
	
	private String getStringFromTime(Time time)
	{
		if(time != null)
			return time.toString(TimeFormat.FLAT6);
		return "";
	}
	
	private Time getTimeFromString(String time)
	{
		Time tm = null;
		
		try{
		tm = new Time(time, TimeFormat.FLAT6);}
		catch(RuntimeException e){showMessage(e.getMessage());}
		
		return tm;
	}
	
	private void showMessage(String message)
	{
		engine.showMessage(message);
	}
	protected void onFormClosing(CancelArgs args) throws PresentationLogicException 
	{
		//19/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getSelectedDateIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setSelectedDate(null);
	}

	//WDEV-18657 
	private void selectAll() 
	{
		if (form.MainGrid().getRows() != null && form.MainGrid().getRows().size() > 0)
		{
			for (int i =0 ; i < form.MainGrid().getRows().size(); i++)
			{
				form.MainGrid().getRows().get(i).setSelect(true);
			}
		}	
		setSelectAllText(false);
	}
	
	//WDEV-18657 
	private void unselectAll() 
	{
		if (form.MainGrid().getRows() != null && form.MainGrid().getRows().size() > 0)
		{
			for (int i =0 ; i < form.MainGrid().getRows().size(); i++)
			{
				form.MainGrid().getRows().get(i).setSelect(false);
			}
		}	
		setSelectAllText(true);
	}
	
	private void updateControlState() 
	{
		form.btnSelectAll().setVisible(true);
		form.btnSelectAll().setEnabled(form.MainGrid().getRows() != null && form.MainGrid().getRows().size() > 0);	
		setSelectAllText(true);
	}

	private void setSelectAllText(Boolean displaySelectAllText) 
	{
		if (Boolean.TRUE.equals(displaySelectAllText))
			form.btnSelectAll().setText("Select All");
		else
			form.btnSelectAll().setText("Unselect All");		
	}

	@Override
	protected void onBtnSelectAllClick() throws PresentationLogicException
	{
		if (form.btnSelectAll().getText() != null && form.btnSelectAll().getText().equals("Select All"))
			selectAll();
		else if (form.btnSelectAll().getText() != null && form.btnSelectAll().getText().equals("Unselect All"))
			unselectAll();
	}

	@Override
	protected void onMainGridGridCheckBoxClicked(int column, MainGridRow row, boolean isChecked) throws PresentationLogicException 
	{
		if (allRowsSelected())
			setSelectAllText(false);
		else
			setSelectAllText(true);
	}

	private Boolean allRowsSelected() 
	{
		if (form.MainGrid().getRows() != null && form.MainGrid().getRows().size() > 0)
		{
			for (int i =0 ; i < form.MainGrid().getRows().size(); i++)
			{
				if (Boolean.FALSE.equals(form.MainGrid().getRows().get(i).getSelect()))
				{
					return false;
				}
			}
		}
		return true;
	}
}
