//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.18 build 40604.1630)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.pattreatmentplan;

import ims.ccosched.forms.pattreatmentplan.GenForm.ctnDetailsContainer.grdDoseRow;
import ims.ccosched.forms.pattreatmentplan.GenForm.grdActionsGridRow;
import ims.ccosched.forms.pattreatmentplan.GenForm.grdTreatmentPlanGridRow;
import ims.ccosched.vo.PatTrPlanGroupSiteTechVo;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatPlanActionVoCollection;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.PatTreatmentPlanLiteVoCollection;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dtomove.vo.PatTreatPlanActionDoseVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;

import java.text.ParseException;
import java.util.Comparator;
import java.util.Iterator;

public class Logic extends BaseLogic
{
	private static final String	EDIT_COMPUTER_PLANNING	= "Update Pretreatment Plan";
	private static final String	ADD_COMPUTER_PLANNING	= "Add Pretreatment Plan";

	protected void OnFormOpen(Object[] args) throws PresentationLogicException 
	{
		form.chkTrPlanActive().setValue(true);
		form.chkActionActive().setValue(true);
		
		enableUpDownButton();
		form.btnSaveOrder().setVisible(false);
		setEnableCompPlan(false);

		setPageLoaded(Boolean.TRUE);//UIEngine.Context.Set("10002:Page Loaded", true);
		LoadGroupCombo(true);
		//LoadTrSiteGridCombos();
		
		//PopulatePatientDetails();
		EnableControls(false);
		try
		{
			Open(true);
			//PositionOnOpen(); //WDEV-13998
		} catch (PresentationLogicException e)
		{
			engine.showMessage(e.getMessage());
		}
		
	}
	
	//WDEV-13998
	private void PositionOnOpen() throws PresentationLogicException 
	{	
		PatTreatmentPlanLiteVoCollection voColl;
		try {
			voColl = domain.listTreatmentPlans(form.getGlobalContext().Core.getPatientShort());
			
			if (voColl == null)
			{
				return;
			}
			
			voColl.sort(new DateSeenComparator(SortOrder.DESCENDING));
			form.grdTreatmentPlanGrid().setValue(voColl.get(0));
			treatmentPlanGridChanged();
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		}			
}

	private void Open() throws PresentationLogicException
	{
		Open(false);
	}

	private void Open(boolean preselectTP) throws PresentationLogicException
	{
		form.grdTreatmentPlanGrid().getRows().clear();
		form.grdActionsGrid().getRows().clear();

		//Clear the context 
		if(!preselectTP)
		{
			//ICCO690
			//form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(null);
			form.getGlobalContext().setPatTreatmentPlan(null);
			form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);
			//form.getGlobalContext().CcoSched.ActivityView.setActionID(null);
		}
		//form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanActions(null);
		//form.getGlobalContext().setTreatmentPlanActions(null);
		form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID2(null);//UIEngine.Context.Remove("10002:Ignore ActionID");

		ShowExternalBeamDetails(false);
		ShowImagingDetails(false);
		ShowChemotherapyControls(false);
		ShowCommonControls(false);

		form.btnViewTreatmentPlan().setEnabled(false);
		form.btnNewTreatmentPlan().setEnabled(true);
		form.btnUpdateTreatmentPlan().setEnabled(false);
		SetInitialStateControls(false);
		
		try 
		{
			PatTreatmentPlanLiteVoCollection voColl = domain.listTreatmentPlans(form.getGlobalContext().Core.getPatientShort());
	
			if (voColl != null)
			{
				voColl.sort(new DateSeenComparator(SortOrder.DESCENDING)); //WDEV-13998
				
				for(int i =0; i < voColl.size(); i++)
				{
					if (( ! form.chkTrPlanActive().getValue())
						|| (form.chkTrPlanActive().getValue()
							&& voColl.get(i).getActiveStatusIsNotNull()
							&& voColl.get(i).getActiveStatus()) )
					{
						GenForm.grdTreatmentPlanGridRow grrow = form.grdTreatmentPlanGrid().getRows().newRow();
						grrow.setDateSeen(voColl.get(i).getDateSeen());
						grrow.setConsultant(voColl.get(i).getConsultantIsNotNull()?voColl.get(i).getConsultant().getName().toString():"");
						//TODO
						grrow.setHistology(voColl.get(i).getPrimaryTumourHistologyIsNotNull() ? voColl.get(i).getPrimaryTumourHistology().getHistologyDescription() :"");

						//grrow.setHistology(voColl.get(i).get..());
						grrow.setIntent(voColl.get(i).getTreatmentIntentIsNotNull()?voColl.get(i).getTreatmentIntent().getIItemText():"");
						grrow.setComment(voColl.get(i).getTreatmentplanComment());				
						grrow.setValue(voColl.get(i));
					}
				}
				//Set the cursor to the first record
				if(form.grdTreatmentPlanGrid().getRows().size() > 0)
				{
					if(form.getGlobalContext().getPatTreatmentPlan() == null)
						form.grdTreatmentPlanGrid().setValue(voColl.get(0));
					else
						form.grdTreatmentPlanGrid().setValue(form.getGlobalContext().getPatTreatmentPlan());

					if(form.grdTreatmentPlanGrid().getValue() != null)
						treatmentPlanGridChanged();
				}
			}
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		}
	
		
//TODO
// Replace this with Domain BO calls
//		Go_ptreatpl TrPlanDto = (Go_ptreatpl)domain.getDTOInstance(Go_ptreatpl.class);
//		Patient.PatientRecord patient = form.getGlobalContext().Cco REPLACE WITH PatientShort GC Sched.PatientSearch.getPatientDetails();//UIEngine.Context.Get("10008:Patient Details") as dto.PatientDTO.PatientClient;
//		Go_ptreatpl.Go_ptreatplRecord selectedRecord = null;
//		if(patient != null)
//		{
//			TrPlanDto.Filter.clear();
//			TrPlanDto.Filter.Pkey    = patient.Pkey;
//			if(form.chkTrPlanActive().getValue())
//				TrPlanDto.Filter.Actstat = "Y";
//
//			//List only Patient Selected
//			if(TrPlanDto.Filter.Pkey.length() > 0)
//			{
//				Result result = TrPlanDto.list();
//				if (result != null)
//				{
//					engine.showMessage(result.getMessage());
//					return;
//				}
//				
//				for(int x=0; x<TrPlanDto.DataCollection.count(); x++)
//				{
//					GenForm.grdTreatmentPlanGridRow row = form.grdTreatmentPlanGrid().getRows().newRow();
//					//SqlDateTime dt = Dtodt.IsNull ? SqlDateTime.Null : new SqlDateTime(Dtodt.Value);
//					row.setDateSeen(GetDateFromString(TrPlanDto.DataCollection.get(x).Dt_seen));
//					row.setConsultant(TrPlanDto.DataCollection.get(x).Chcptxt);
//					row.setHistology(TrPlanDto.DataCollection.get(x).Cshisttxt);
//					row.setIntent(TrPlanDto.DataCollection.get(x).Tr_intenttxt);
//					row.setComment(TrPlanDto.DataCollection.get(x).Tp_cmnt);
//					row.setTooltipForComment(TrPlanDto.DataCollection.get(x).Tp_cmnt);
//					row.setValue(TrPlanDto.DataCollection.get(x));
//
//					//ICCO690 - If TP selected from Cancelled ApptDNA, Activity View, etc - set the selection
//					Go_ptreatpl.Go_ptreatplRecord tp = form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanDetails();
//					if(tp != null)
//					{
//						if(tp.Unid.equals(TrPlanDto.DataCollection.get(x).Unid))
//							selectedRecord = TrPlanDto.DataCollection.get(x);
//					}
//
//					//Change the row color to red for inactive records
//					if(!TrPlanDto.DataCollection.get(x).Actstat.equals("Y"))
//						SetTreatmentPlanRowColor(row);
//				}
//
//				//Set the cursor to the first record
//				if(form.grdTreatmentPlanGrid().getRows().size() > 0)
//				{
//					//10/06/2003 - For the first time select the last record
//					if(form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanDetails() == null && selectedRecord == null)
//						selectedRecord = TrPlanDto.DataCollection.get(TrPlanDto.DataCollection.count() -1);
//					form.grdTreatmentPlanGrid().setValue(selectedRecord);
//					//Call manually the OnSelChange event
//					if(selectedRecord != null)
//						onTreatmentPlanGridSelectionChanged();
//				}
//			}
//		}
				
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnSaveOrder().setEnabled(false);

		if (result.equals(DialogResult.CANCEL))
			return;

		
		if(formName.equals(form.getForms().CcoSched.PatTreatmentPlanUpdate))
		{
			//update grid row
			if (form.getGlobalContext().getPatTreatmentPlanIsNotNull())
			{
				grdTreatmentPlanGridRow grrow = null;
				
				//check if it's an update
				if (form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanUpdateScreenMode())
				{
					//form.grdTreatmentPlanGrid().setValue(form.getGlobalContext().getPatTreatmentPlan());
					grrow = form.grdTreatmentPlanGrid().getSelectedRow();
				} 
				else
				{ 
					// it's a new record so add to grid
					grrow = form.grdTreatmentPlanGrid().getRows().newRow();
					//form.grdTreatmentPlanGrid().setValue(form.getGlobalContext().getPatTreatmentPlan());
				}
				Open(true);
				
				form.grdTreatmentPlanGrid().setValue(form.getGlobalContext().getPatTreatmentPlan());//WDEV-13998
				treatmentPlanGridChanged();//WDEV-13998
			}
		}		
		
		if(formName.equals(form.getForms().CcoSched.PatTreatmentPlanAction))
		{
			//get saved TP from GC
			form.grdTreatmentPlanGrid().setValue(form.getGlobalContext().getPatTreatmentPlan());
			
			grdTreatmentPlanGridRow row = form.grdTreatmentPlanGrid().getSelectedRow();
			row.setValue(form.getGlobalContext().getPatTreatmentPlan());
			
			//Refresh Action grid
			treatmentPlanGridChanged();
			form.grdActionsGrid().setValue(form.getGlobalContext().getPatTreatmentPlanAction());
			actionGridChanged();

		}
		else if(formName.equals(form.getForms().CcoSched.Rebooking))
		{
			if (form.getGlobalContext().CcoSched.Rebooking.getRebookingSucceeded() != null)
			{
				form.getGlobalContext().CcoSched.Rebooking.setRebookingSucceeded(null);
				engine.showMessage("Rebooking succeeded.");

				GenForm.grdTreatmentPlanGridRow grrow = form.grdTreatmentPlanGrid().getSelectedRow();		
				grrow.setValue(domain.getTreatmentPlan(grrow.getValue()));

				//Refresh Action grid
				treatmentPlanGridChanged();
			}
		}
//		else if(formName.equals(form.getForms().CcoSched.PretreatmentUpdate))
//		{
//			onTreatmentPlanGridSelectionChanged();
//		}
//		else if(formName.equals(form.getForms().CcoSched.PretreatmentNew))
//		{
//			onTreatmentPlanGridSelectionChanged();
//		}
	}
	
	private int GetTrPlanGridCurSel()
	{
		for(int i=0; i<form.grdTreatmentPlanGrid().getRows().size(); i++)
			if( form.grdTreatmentPlanGrid().getValue() != null && form.grdTreatmentPlanGrid().getValue().equals(form.grdTreatmentPlanGrid().getRows().get(i).getValue()))
				return i;
			
		return -1;
	}
	
	protected void OnFormClosing(ims.framework.delegates.CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
	{
		setPageLoaded(Boolean.FALSE);
		form.getGlobalContext().CcoSched.ActionUpdate.setActionInsertedId(null);
		form.getGlobalContext().CcoSched.TreatmentPlan.setFurtherAppointment(null);
		//25/11/04 - Clear persistant context		
	}
	protected void OnViewAction() throws ims.framework.exceptions.PresentationLogicException
	{
//		Sets the update mode to true
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionMode(new Boolean(true));
		
		form.getGlobalContext().setPatTreatmentPlanAction(form.grdActionsGrid().getValue());
		
//		if(actionUpdateDto != null)
//		{
//			Result result = actionUpdateDto.getForUpdate();
//			if (result != null)
//			{
//				engine.showMessage(result.getMessage());
//				return;
//			}
//		}

		form.getGlobalContext().CcoSched.TreatmentPlan.setActionUpdateMode(new Integer(0)); // View
		engine.open(form.getForms().CcoSched.PatTreatmentPlanAction, "View Action");
	}
	protected void OnUpdateAction() throws ims.framework.exceptions.PresentationLogicException
	{
//		Sets the update mode to true
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionMode(new Boolean(true));

		form.getGlobalContext().setPatTreatmentPlanAction(form.grdActionsGrid().getValue());

//		if(actionUpdateDto != null)
//		{
//			Result result = actionUpdateDto.getForUpdate();
//			if (result != null)
//			{
//				engine.showMessage(result.getMessage());
//				return;
//			}
//		}
		
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionUpdateMode(new Integer(1)); // Edit
				
		engine.open(form.getForms().CcoSched.PatTreatmentPlanAction, "Update Action");
	}
	protected void OnAddAction() throws ims.framework.exceptions.PresentationLogicException
	{
		//Do a get on the last action record for defaulting Priority, Transport, ActionStatus, ReasonDelayed
		
		//If greater than 1 - because if it has only one record it will be selected by default
		if(form.grdActionsGrid().getRows().size() > 1)
		{
			//Note not needed
//			Go_ptplact actionsDto = (Go_ptplact)domain.getDTOInstance(Go_ptplact.class);
//			actionsDto.Filter.clear();
//			actionsDto.Filter.Pt_act_id  = form.grdActionsGrid().getRows().get(form.grdActionsGrid().getRows().size()-1).getValue().Pt_act_id;
//			Result result = actionsDto.get();
//			
//			form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanGetActions(actionsDto);
		}

		//Sets the update mode to false
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionMode(new Boolean(false));
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionUpdateMode(new Integer(1)); // Edit
		
		engine.open(form.getForms().CcoSched.PatTreatmentPlanAction, "New Action");
	}
	protected void SaveOrder() throws ims.framework.exceptions.PresentationLogicException
	{
		boolean update = false;
		form.getGlobalContext().CcoSched.ActionUpdate.setActionInsertedId(null);
		for (int i = 0; i < form.grdActionsGrid().getRows().size(); i++)
		{
			grdActionsGridRow parentRow = form.grdActionsGrid().getRows().get(i);

			if (parentRow.getOrderNo() != null)
			{
				//String orderNo = parentRow.getOrderNo();
				String orderNo = String.valueOf(i);
				Integer pt_act_id = parentRow.getValue().getID_PatAction();

				update = updateAction(pt_act_id, orderNo);
				if(!update)
					break;
			}
			
			for (int j = 0; j < parentRow.getRows().size(); j++)
			{
				grdActionsGridRow childRow = parentRow.getRows().get(j);
				if(childRow.getOrderNo() != null)
				{
					//String orderNo = childRow.getOrderNo();
					String orderNo = String.valueOf(j);
					Integer pt_act_id = childRow.getValue().getID_PatAction();
	
					update = updateAction(pt_act_id, orderNo);
					if(!update)
						break;
				}
			}
		}

		//update TP in main grid
		GenForm.grdTreatmentPlanGridRow grrow = form.grdTreatmentPlanGrid().getSelectedRow();		
		grrow.setValue(domain.getTreatmentPlan(grrow.getValue()));
		
		if(update)
			treatmentPlanGridChanged();
	}

	private boolean updateAction(Integer pt_act_id, String orderNo)
	{
		//Go_ptplact actionUpdateDto = (Go_ptplact)domain.getDTOInstance(Go_ptplact.class);
		//actionUpdateDto.Filter.clear();
		
		//actionUpdateDto.Filter.Pt_act_id = pt_act_id;
		
		PatTreatPlanActionVo patTrPActionVo = domain.getAction(pt_act_id);
		
		patTrPActionVo.setAction_OrderNumber(new Integer(orderNo));
		
		//save it
		String[] arrErrors = patTrPActionVo.validate();
		if(arrErrors != null)
		{
			engine.showErrors("Validation Errors", arrErrors);
			return false;
		}
		
		try
		{
			domain.saveAction(patTrPActionVo);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		} 
				
		return true;
	}
	protected void MoveActionDown() throws ims.framework.exceptions.PresentationLogicException
	{
		//Ensure an action is selected
		if(form.grdActionsGrid().getValue() == null) 
			return;

		
		//Get the Actions DTO from the context
		PatTreatPlanActionVoCollection actionsDto = form.getGlobalContext().getPatTreatmentPlan().getActions();
		if(actionsDto != null)
		{
			//saveBtnVisible = MoveAction(actionsDto, form.grdActionsGrid().getValue().Pt_act_id, false);
			PatTreatPlanActionVo selectedValue = form.grdActionsGrid().getValue();
			PatTreatPlanActionVo movedValue = getMovedValue(false);
			form.grdActionsGrid().moveDown();
			enableUpDownButton();
			swapOrderNumbers(selectedValue, movedValue);			
			
			form.btnSaveOrder().setVisible(true);
			form.btnSaveOrder().setEnabled(true);
		}
	}
	

	private void swapOrderNumbers(PatTreatPlanActionVo selectedValue, PatTreatPlanActionVo movedValue)
	{

		grdActionsGridRow rowStart = form.grdActionsGrid().getRowByValue(movedValue);
		grdActionsGridRow rowEnd   = form.grdActionsGrid().getRowByValue(selectedValue);
		
		if(rowStart != null && rowEnd != null)
		{
			rowEnd.setOrderNo(rowStart.getValue().getAction_OrderNumber().toString());
			rowStart.setOrderNo(rowEnd.getValue().getAction_OrderNumber().toString());
		}
	}
	
	protected void MoveActionUp() throws ims.framework.exceptions.PresentationLogicException
	{
		//boolean saveBtnVisible = false; 

		//Ensure an action is selected
		if(form.grdActionsGrid().getValue() == null) 
			return;		

		//Get the Actions DTO from the context
		PatTreatPlanActionVoCollection actionsDto = form.getGlobalContext().getPatTreatmentPlan().getActions();
		if(actionsDto != null)
		{
			//saveBtnVisible = MoveAction(actionsDto, ((Go_ptplact.Go_ptplactRecord)form.grdActionsGrid().getValue()).Pt_act_id, true);
			PatTreatPlanActionVo selectedValue = form.grdActionsGrid().getValue();
			PatTreatPlanActionVo movedValue = getMovedValue(true); 
			form.grdActionsGrid().moveUp();
			swapOrderNumbers(selectedValue, movedValue);
			enableUpDownButton();
			form.btnSaveOrder().setVisible(true);
			form.btnSaveOrder().setEnabled(true);
		}
	}
		
	private PatTreatPlanActionVo getMovedValue(boolean up)
	{
		if (form.grdActionsGrid().getSelectedRow() != null)
		{
			// Parent Row
			if (form.grdActionsGrid().getSelectedRow().getParentRow() == null)
			{
				for (int i = 0; i < form.grdActionsGrid().getRows().size(); i++)
				{
					if (form.grdActionsGrid().getRows().get(i).getValue() != null
						&& form.grdActionsGrid().getValue() != null
						&& form.grdActionsGrid().getRows().get(i).getValue().equals(form.grdActionsGrid().getValue()))
					{
						if(up)
						{
							if ((i - 1) >= 0
								&& form.grdActionsGrid().getRows().get(i - 1) != null)
								return form.grdActionsGrid().getRows().get(i - 1).getValue();
						}
						else
						{
							if ((i + 1) < form.grdActionsGrid().getRows().size()
								&& form.grdActionsGrid().getRows().get(i + 1) != null)
								return form.grdActionsGrid().getRows().get(i + 1).getValue();
						}
					}
				}
			}
			else
			{
				for (int i = 0; i < form.grdActionsGrid().getRows().size(); i++)
				{
					for (int j = 0; j < form.grdActionsGrid().getRows().get(i).getRows().size(); j++)
					{
						if(form.grdActionsGrid().getRows().get(i) != null
							&& form.grdActionsGrid().getRows().get(i).getRows().get(j) != null
							&& form.grdActionsGrid().getValue() != null
							&& form.grdActionsGrid().getRows().get(i).getRows().get(j).getValue().equals(form.grdActionsGrid().getValue()))
						{
							if(up)
							{
								if ((j - 1) >= 0
									&& form.grdActionsGrid().getRows().get(i).getRows().get(j - 1) != null)
									return form.grdActionsGrid().getRows().get(i).getRows().get(j - 1).getValue();
							}
							else
							{
								if ((j + 1) < form.grdActionsGrid().getRows().get(i).getRows().size()
									&& form.grdActionsGrid().getRows().get(i).getRows().get(j + 1) != null)
									return form.grdActionsGrid().getRows().get(i).getRows().get(j + 1).getValue();
							}
						}
					}
				}
			}
		}

		return null;
	}

	protected void ActionDisplayActive() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14153
		//if(!isPageLoaded())
			//return;

		treatmentPlanGridChanged();
	}
	
	protected void onActionsGridSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		actionGridChanged();
	}
	
	private void actionGridChanged()
	{
		ClearControls();
		
		PatTreatPlanActionVo actionsDto = form.grdActionsGrid().getValue();
		if(actionsDto == null)
			return;

		form.ctnDetails().setCollapsed(false);
		form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID2(null);//UIEngine.Context.Remove("10002:Ignore ActionID");
		
		ShowExternalBeamDetails(false);
		ShowImagingDetails(false);
		ShowChemotherapyControls(false);
		ShowCommonControls(true);
		
		form.ctnDetails().gridTrSite().getRows().clear();
		form.ctnDetails().grdDose().getRows().clear();
		setDoseFooter();

		form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);
		form.getGlobalContext().CcoSched.ActivityView.setActionID(null);


//		//Set the Context Value
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(form.grdActionsGrid().getValue().getID_PatAction().toString());//)Context.ActionID
		form.getGlobalContext().CcoSched.ActivityView.setActionID(form.grdActionsGrid().getValue().getID_PatAction().toString());
		
		enableUpDownButton();
		
		//Flag to be used in Booking screen - 
		if(actionsDto.getAppDateIsNotNull())
			form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID2(new Boolean(false));
		else
			form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID2(null);

		form.btnViewAction().setEnabled(true);
		form.btnUpdateAction().setEnabled(true);
		form.ctnDetails().btnBookFurther().setVisible(isFurtherBtnEnableable(actionsDto));
		
		// WDEV-14227 NPE Fix
		boolean isComputerPlanning = false;
		if (actionsDto != null && actionsDto.getAction() != null && actionsDto.getAction().getAction() != null && actionsDto.getAction().getAction().getID_Action() != null)
			isComputerPlanning = actionsDto.getAction().getAction().getID_Action().equals("-101");
		if(isComputerPlanning)
		{
			boolean isPlanUpdatable = isPlanUpdatable(actionsDto.getID_PatAction());
			form.ctnDetails().btnComputerPlanning().setText(ADD_COMPUTER_PLANNING);
			if(isPlanUpdatable)
				form.ctnDetails().btnComputerPlanning().setText(EDIT_COMPUTER_PLANNING);
		}
		setEnableCompPlan(isComputerPlanning);
		
		
		form.ctnDetails().edtHCP().setValue(actionsDto.getTreatingConsultantIsNotNull()?actionsDto.getTreatingConsultant().getName().toString():"");
		form.ctnDetails().txtPatientCategory().setValue(actionsDto.getCategoryIsNotNull()?actionsDto.getCategory().getText():"");
		FillActivityDetailsFromScreen(actionsDto);

		//Treatment Site
		if (actionsDto.getGroupSiteTechIsNotNull())
		{
			for (Iterator iter = actionsDto.getGroupSiteTech().iterator(); iter.hasNext();) 
			{
				PatTrPlanGroupSiteTechVo element = (PatTrPlanGroupSiteTechVo) iter.next();
				
				if (element.getActiveStatusIsNotNull() && element.getActiveStatus().getID() == YesNo.YES.getID())
				{
					GenForm.ctnDetailsContainer.gridTrSiteRow row = form.ctnDetails().gridTrSite().getRows().newRow();
					if (element.getTreatmentGroupSiteIsNotNull())
					{
						if (element.getTreatmentGroupSite().getParentInstance() != null)
						{
						//	row.setGroup(element.getTreatmentGroupSite().getParentInstance().getText());
							row.setGroup(element.getTreatmentGroupSiteIsNotNull() 
									&& (element.getTreatmentGroupSite().getParentInstance() != null && element.getTreatmentGroupSite().getParentInstance().getParentInstance() != null) ? 
											element.getTreatmentGroupSite().getParentInstance().getParentInstance().getText() : ( element.getTreatmentGroupSite().getParentInstance() != null ? element.getTreatmentGroupSite().getParentInstance().getText() : element.getTreatmentGroupSite().getText()) );
							row.setTooltipForGroup(element.getTreatmentGroupSite().getParentInstance().getText());
						}
						else
						{
							row.setGroup(element.getTreatmentGroupSite().getText());
							row.setTooltipForGroup(element.getTreatmentGroupSite().getText());
						}
					}
					if (element.getTreatmentGroupSiteIsNotNull() && element.getTreatmentGroupSite().getParentInstance() != null)
					{
						row.setTreatmentSite(element.getTreatmentGroupSite().getText());
						row.setTooltipForTreatmentSite(element.getTreatmentGroupSite().getText());
					}
					else
					{
						row.setTreatmentSite(null);
						row.setTooltipForTreatmentSite(null);
					}

	                if (element.getTreatmentTechniqueIsNotNull())
	                {
                		row.setTechnique(element.getTreatmentTechnique().getText());
                		row.setTooltipForTechnique(element.getTreatmentTechnique().getText());
	                }
				}				
			}
		}

		form.getGlobalContext().setPatTreatmentPlanAction(actionsDto);

		setPID(form.getGlobalContext().getPatTreatmentPlan(), form.getGlobalContext().getPatTreatmentPlanAction());
	}

	//wdev-7410
	private String GetGrouptext(String id)
	{
		//TODO replace with Domain BO calls
//		Go_ptreatpl.Go_ptreatplRecord treatmentPlanDto = form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanDetails();
//		if (treatmentPlanDto != null)
//			for (int x = 0; x < treatmentPlanDto.SeqnoCollection.count(); x++)
//				if (treatmentPlanDto.SeqnoCollection.get(x).Tgroupid.equals(id))
//					return treatmentPlanDto.SeqnoCollection.get(x).Tgroupidtxt;

		return "";
	}
	//----

	private void enableUpDownButton()
	{
		form.btnUp().setEnabled(form.grdActionsGrid().canMoveCurrentUp());
		form.btnDown().setEnabled(form.grdActionsGrid().canMoveCurrentDown());
	}

    protected void onBtnViewTreatmentPlanClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanUpdateScreenMode(new Boolean(true));
		//TODO replace with Domain BO calls
//		Go_ptreatpl TrPlanDto = form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanGet();
//		if(TrPlanDto != null)
//		{
//			Result result = TrPlanDto.getForUpdate();
//			if (result != null)
//			{
//				engine.showMessage(result.getMessage());
//				return;
//			}
//		}
//
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanUpdateMode(new Integer(0)); // View
		engine.open(form.getForms().CcoSched.PatTreatmentPlanUpdate, "View Treatment Plan");
	}
	protected void onBtnUpdateTreatmentPlanClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanUpdateScreenMode(new Boolean(true));
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanUpdateMode(new Integer(1)); // Edit
		engine.open(form.getForms().CcoSched.PatTreatmentPlanUpdate, "Update Treatment Plan");
	}
	protected void onBtnNewTreatmentPlanClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		form.getGlobalContext().setPatTreatmentPlanAction(null);//WDEV-15542
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanUpdateScreenMode(new Boolean(false));
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanUpdateMode(new Integer(1)); // Edit
		engine.open(form.getForms().CcoSched.PatTreatmentPlanUpdate, "New Treatment Plan");
	}
	protected void onTreatmentPlanGridSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().setPatTreatmentPlanAction(null); //WDEV-14216
		treatmentPlanGridChanged();
	}
	
	private void treatmentPlanGridChanged()
	{
		
		//Clear context variables
		//form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanActions(null);
		
		//update LC
		form.getLocalContext().setpatTP(form.grdTreatmentPlanGrid().getValue());
		
		//update GC
		form.getGlobalContext().setPatTreatmentPlan(form.grdTreatmentPlanGrid().getValue());
		
		form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID2(null);
		form.btnSaveOrder().setVisible(false);
		
		form.grdActionsGrid().getRows().clear();
		//WDEV-14153
		//clear Details Container
		ClearControls();
		
		SetInitialStateControls(false);
		setEnableCompPlan(false);

		
		//Save in the context the treatment Plan
		if(form.grdTreatmentPlanGrid().getRows().size() == 0)
			return;
				
		//Save in the context the Actions
		form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(form.grdTreatmentPlanGrid().getValue() != null ? form.grdTreatmentPlanGrid().getValue().getActions():null); //wdev-14256
		
		//load actions grid order by 
		if (form.getLocalContext().getpatTPIsNotNull() && form.getLocalContext().getpatTP().getActionsIsNotNull())
		{			
			PatTreatPlanActionVoCollection voColl = form.grdTreatmentPlanGrid().getValue().getActions();
 			voColl.sort(SortOrder.ASCENDING);			
			
			form.grdActionsGrid().getRows().clear();
			for (int j=0; j<voColl.size();j++)
			{	
				//WDEV-14153
				if (form.chkActionActive().getValue() && voColl.get(j).getActionIsNotNull())
				{				
					if (voColl.get(j).getActive())
						populateActionRow(voColl, j);
				}
				else if (voColl.get(j).getActionIsNotNull())
				{
					populateActionRow(voColl, j);
				}		
			}

			//default selection of top row........wdev-14827
			if (form.getGlobalContext().getPatTreatmentPlanActionIsNotNull())
				form.grdActionsGrid().setValue(form.getGlobalContext().getPatTreatmentPlanAction());
			else if (form.grdActionsGrid().getRows().size() > 0)
				form.grdActionsGrid().setValue(form.grdActionsGrid().getRows().get(0).getValue());
				
			if (form.grdActionsGrid().getValue() != null)
				actionGridChanged();
			
			form.btnAddAction().setEnabled(true);
			form.chkActionActive().setEnabled(true);
			
		}
		else
		{
			form.btnAddAction().setEnabled(false);
			form.chkActionActive().setEnabled(false);
		}

		form.btnViewTreatmentPlan().setEnabled(true);
		form.btnUpdateTreatmentPlan().setEnabled(true);
		
	}

	//WDEV-14153
	private void populateActionRow(PatTreatPlanActionVoCollection voColl, int j) 
	{
		GenForm.grdActionsGridRow actionRow = form.grdActionsGrid().getRows().newRow();
		
		actionRow.setAction(voColl.get(j).getAction().getActionIsNotNull()?voColl.get(j).getAction().getAction().getName():"");
		actionRow.setPriority(voColl.get(j).getPriorityIsNotNull()?voColl.get(j).getPriority().getText():"");
		actionRow.setStatus(voColl.get(j).getStatusIsNotNull()?voColl.get(j).getStatus().getText():"");
		actionRow.setEstEndDate(voColl.get(j).getEendDateIsNotNull()?voColl.get(j).getEendDate().toString():"");
		actionRow.setEstStartDate(voColl.get(j).getEstartDateIsNotNull()?voColl.get(j).getEstartDate().toString():"");
		actionRow.setBookedDate(voColl.get(j).getBookedDateIsNotNull()?voColl.get(j).getBookedDate().toString():"");
		actionRow.setApptDate(voColl.get(j).getFirstApptDateIsNotNull()?voColl.get(j).getFirstApptDate().toString():"");
		actionRow.setApptStatus(voColl.get(j).getFirstApptStatusIsNotNull()?voColl.get(j).getFirstApptStatus().toString():"");
		actionRow.setStatus(voColl.get(j).getStatusIsNotNull()?voColl.get(j).getStatus().toString():"");
		actionRow.setLastApptDate(voColl.get(j).getLastAppointmentDateIsNotNull()?voColl.get(j).getLastAppointmentDate().toString():"");
		actionRow.setWaitingList(voColl.get(j).getWaitingListIsNotNull()?voColl.get(j).getWaitingList().toString():"");
		
//row.setWaitingList(go_ptplactRecord.Act_bk_date.length() > 0 ?"N":go_ptplactRecord.Act_wld_id.length() == 0?"N":"Y"); 

		actionRow.setWaitingList(voColl.get(j).getBookedDateIsNotNull() ? "N" : voColl.get(j).getWLId() == null ? "N" : "Y"); //wdev-14805

		actionRow.setValue(voColl.get(j));
		
		if ( ! voColl.get(j).getActive())
			actionRow.setBackColor(Color.Salmon);
	}
	
	private void setPID(PatTreatmentPlanLiteVo tpRecord, PatTreatPlanActionVo actionRecord)
	{
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
		engine.addAlert(new ims.alerts.PatientAlertCCO(
				new ims.ccosched.Helper.PIDTooltip().getTooltip2(form.getGlobalContext().Core.getPatientShort(), tpRecord, actionRecord)));
	}


	protected void TrPlanDisplayActive() throws ims.framework.exceptions.PresentationLogicException
	{
	//	if(!isPageLoaded())
	//		return;

		Open();
	}
	

//	#region 03/03/2003 - Treatment Group
	private void LoadGroupCombo(boolean activeLkup)
	{
		//TODO replace with Domain BO calls
//		Sd_gts_cfg Sd_gts_cfgDto = (Sd_gts_cfg)domain.getDTOInstance(Sd_gts_cfg.class);
//
//		Result result = Sd_gts_cfgDto.list();
//		if (result != null)
//		{
//			engine.showMessage(result.getMessage());
//			return;
//		}
//
//		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentSiteGroups(Sd_gts_cfgDto);
//		
////		for(int x=0; x<Sd_gts_cfgDto.Sd_gts_cfgCollection.Count; x++)
////		{
////			//Add Active/Inactive stuff - depending on the New/Update state
////			if(activeLkup)
////			{
////				if(Sd_gts_cfgDto.Sd_gts_cfgCollection[x].attAct_ind_grp == Domain.Lookups.ACTIVE)
////					Form.cmbGroup.NewRow(Sd_gts_cfgDto.Sd_gts_cfgCollection[x].attTgroup_id, Sd_gts_cfgDto.Sd_gts_cfgCollection[x].attTgroupnm);
////			}
////			else
////			{	//Load the active + existing (saved)
////				bool load = false;
////				dto.Go_ptreatplDTO.Go_ptreatplClient treatmentPlanDto = Context.TreatmentPlanDetails;
////				if(treatmentPlanDto != null && treatmentPlanDto.attTgroupid == Sd_gts_cfgDto.Sd_gts_cfgCollection[x].attTgroup_id)
////					load = true;
////				if(Sd_gts_cfgDto.Sd_gts_cfgCollection[x].attAct_ind_grp == Domain.Lookups.ACTIVE || load )
////					Form.cmbGroup.NewRow(Sd_gts_cfgDto.Sd_gts_cfgCollection[x].attTgroup_id, Sd_gts_cfgDto.Sd_gts_cfgCollection[x].attTgroupnm);
////			}
////		}
	}
	
	/*private void PopulatePatientDetails()
	{
		Patient.PatientRecord patientDto = form.getGlobalContext().Cc REPLACE WITH PatientShort GC oSched.PatientSearch.getPatientDetails();
		if(patientDto != null)
		{
			form.PatientHospitalNumber().setValue(patientDto.Hospnum);
			form.PatientName().setValue(patientDto.Fnm1 + " " + patientDto.Snm);

			Date Dtodt = DateHelper.GetDOBDateFromString(patientDto.Dob);
			form.PatientDOB().setValue(Dtodt == null ? "": Dtodt.toString(DateFormat.STANDARD));

			StringBuffer address = new StringBuffer(150);
			address.append(patientDto.Adr1);
			address.append(newLine);
			address.append(patientDto.Adr2);
			address.append(newLine);
			address.append(patientDto.Adr3);
			address.append(newLine);
			address.append(patientDto.Adr4);
			address.append(newLine);
			address.append(patientDto.Adr5);
			address.append(newLine);
			form.PatientAddress().setValue(address.toString());
		}
	}
*/	
	
	private boolean FillActivityDetailsFromScreen(PatTreatPlanActionVo actionUpdateDto)
	{
		if(actionUpdateDto != null)
		{
			Integer ActivityValue = actionUpdateDto.getActivity().getActivityId();
			switch(ActivityValue == null?0:ActivityValue.intValue())
			{
				case -202://External Beam Activity
					form.ctnDetails().edtModality().setValue(actionUpdateDto.getModalityIsNotNull()?actionUpdateDto.getModality().getText():"");
					form.ctnDetails().edtUnits().setValue(actionUpdateDto.getUnitIsNotNull()?actionUpdateDto.getUnit().getText():"");
					form.ctnDetails().edtEnergyValue().setValue(actionUpdateDto.getModalEnergyIsNotNull()?actionUpdateDto.getModalEnergy():"");
					PopulateDoseGrid(actionUpdateDto);
					ShowExternalBeamDetails(true);

					ShowImagingDetails(false);
					ShowChemotherapyControls(false);
					break;

				case -200://Imaging
					Date dtDate = actionUpdateDto.getImagingDate();
					form.ctnDetails().dtDate().setValue(dtDate == null? "": dtDate.toString(DateFormat.STANDARD));
					ShowImagingDetails(true);

					ShowExternalBeamDetails(false);
					ShowChemotherapyControls(false);
					break;

				case -201: //Chemotherapy
					Date st_dt = actionUpdateDto.getChemPlanStartDate();
					form.ctnDetails().dtStartDate().setValue(st_dt == null? "": st_dt.toString(DateFormat.STANDARD));
					form.ctnDetails().edtPlannedRegime().setValue(actionUpdateDto.getPlannedRegimeIsNotNull()?actionUpdateDto.getPlannedRegime().getText():"");
					form.ctnDetails().edtPlannedRegime().setTooltip(actionUpdateDto.getPlannedRegimeIsNotNull()?actionUpdateDto.getPlannedRegime().getText():""); //WDEV-16149
					ShowChemotherapyControls(true);

					ShowExternalBeamDetails(false);
					ShowImagingDetails(false);
					break;
				case -204: //Brachytherapy - the same as imaging
					//Imaging 
					Date imgDate = actionUpdateDto.getImagingDate();
					form.ctnDetails().txtBrachyDate().setValue(imgDate == null? "": imgDate.toString(DateFormat.STANDARD));
					form.ctnDetails().edtModality().setValue(actionUpdateDto.getModalityIsNotNull()?actionUpdateDto.getModality().getText():"");
					form.ctnDetails().txtAnaesthetic().setValue(actionUpdateDto.getAneastheticIsNotNull()?actionUpdateDto.getAneasthetic().getText():"");	//wdev-14137
					ShowImagingDetails(true, true);
					
					ShowExternalBeamDetails(false, true);
					ShowChemotherapyControls(false);

					break;
				case -207://Orthovoltage - The same as External Beam
					form.ctnDetails().edtModality().setValue(actionUpdateDto.getModalityIsNotNull()?actionUpdateDto.getModality().getText():"");
					form.ctnDetails().edtUnits().setValue(actionUpdateDto.getUnitIsNotNull()?actionUpdateDto.getUnit().getText():"");
					form.ctnDetails().edtEnergyValue().setValue(actionUpdateDto.getModalEnergy());
					PopulateDoseGrid(actionUpdateDto);
					ShowExternalBeamDetails(true);

					ShowImagingDetails(false);
					ShowChemotherapyControls(false);
					break;

				case -211://Other (The same as Imaging)
					//Imaging 
					Date imDate = actionUpdateDto.getImagingDate();
					form.ctnDetails().dtDate().setValue(imDate == null ? "": imDate.toString(DateFormat.STANDARD));
					ShowImagingDetails(true);

					ShowExternalBeamDetails(false);
					ShowChemotherapyControls(false);
					break;
				default: 
					ShowExternalBeamDetails(false);
					ShowImagingDetails(false);
					ShowChemotherapyControls(false);
					break;
			}
		}

		return true;
	}
	
	private void EnableControls(boolean enable)
	{
		form.ctnDetails().edtModality().setEnabled(enable);
		form.ctnDetails().edtModality().setEnabled(enable);
		form.ctnDetails().edtEnergyValue().setEnabled(enable);
		form.ctnDetails().edtUnits().setEnabled(enable);
		form.ctnDetails().dtDate().setEnabled(enable);
		form.ctnDetails().dtStartDate().setEnabled(enable);
		form.ctnDetails().edtPlannedRegime().setEnabled(enable);
		form.ctnDetails().edtHCP().setEnabled(enable);
		form.ctnDetails().txtPatientCategory().setEnabled(enable);
		form.ctnDetails().txtAnaesthetic().setEnabled(enable);
		form.ctnDetails().txtBrachyDate().setEnabled(enable);
	}
	
	private void ClearControls()
	{
		form.ctnDetails().gridTrSite().getRows().clear();
		form.ctnDetails().grdDose().getRows().clear();
		
		//WDEV-14153
		form.ctnDetails().grdDose().setFooterValue(null);

		form.ctnDetails().edtModality().setValue(null);
		form.ctnDetails().edtEnergyValue().setValue(null);
		form.ctnDetails().edtUnits().setValue(null);
		form.ctnDetails().dtDate().setValue(null);
		form.ctnDetails().dtStartDate().setValue(null);
		form.ctnDetails().edtPlannedRegime().setValue(null);
		form.ctnDetails().edtHCP().setValue(null);
		form.ctnDetails().txtPatientCategory().setValue(null);
		form.ctnDetails().txtAnaesthetic().setValue(null);
		form.ctnDetails().txtBrachyDate().setValue(null);
	}
	
	private Date GetDateFromString(String date)
	{
		Date dt = null;
		if(date != null && !date.equals(""))
			try{dt = new Date(date, DateFormat.ISO);}catch(ParseException e){e.printStackTrace();}
		return dt;
	}
	
	private Integer GetIntegerFromString(String sValue)
	{
		Integer newVal = null;
		if(sValue != null && !sValue.equals(""))
		{
			try{newVal = Integer.valueOf(sValue);}
			catch(NumberFormatException e)
			{e.printStackTrace();}
		}

		return newVal;
	}
	private int GetIntFromString(String sValue)
	{
		Integer value = GetIntegerFromString(sValue);
		return value != null?value.intValue():0;
	}
	
	private void ShowExternalBeamDetails(boolean bShow)
	{
		ShowExternalBeamDetails(bShow, false);
	}

	private void ShowExternalBeamDetails(boolean bShow, boolean bShowModality)
	{
		form.ctnDetails().lblModality().setVisible(bShowModality?bShowModality:bShow);
		form.ctnDetails().edtModality().setVisible(bShowModality?bShowModality:bShow);

		form.ctnDetails().lblEnergyValue().setVisible(bShow);
		form.ctnDetails().edtEnergyValue().setVisible(bShow);

		form.ctnDetails().lblUnits().setVisible(bShow);
		form.ctnDetails().edtUnits().setVisible(bShow);
//		#region 01.03.2004 - make the Dose new grid visible - hide the existing

		form.ctnDetails().grdDose().setVisible(bShow);
		form.ctnDetails().lblTotal().setVisible(bShow);
		setDoseFooter();
//		#endregion
		form.ctnDetails().gridTrSite().setVisible(bShow);
		form.ctnDetails().lblCategory().setVisible(bShow);
		form.ctnDetails().txtPatientCategory().setVisible(bShow);
	}
	
	private void ShowImagingDetails(boolean bShow)
	{
		ShowImagingDetails(bShow, false);
	}

	private void ShowImagingDetails(boolean bShow, boolean bBrachytherapy)
	{
		form.ctnDetails().lblDate().setVisible(bBrachytherapy?false:bShow);
		form.ctnDetails().dtDate().setVisible(bBrachytherapy?false:bShow);

		form.ctnDetails().txtAnaesthetic().setVisible(bBrachytherapy);
		form.ctnDetails().lblAnaesthetic1().setVisible(bBrachytherapy);
		form.ctnDetails().lblAnaesthetic2().setVisible(bBrachytherapy);
		form.ctnDetails().lblBrachyDate().setVisible(bBrachytherapy);
		form.ctnDetails().txtBrachyDate().setVisible(bBrachytherapy);
	}
	
	private void ShowChemotherapyControls(boolean bShow)
	{
		form.ctnDetails().lblStartDate().setVisible(bShow);
		form.ctnDetails().dtStartDate().setVisible(bShow);

		form.ctnDetails().lblPlannedRegime().setVisible(bShow);
		form.ctnDetails().edtPlannedRegime().setVisible(bShow);
	}

	private void ShowCommonControls(boolean bShow)
	{
		form.ctnDetails().lblHcp().setVisible(bShow);
		form.ctnDetails().edtHCP().setVisible(bShow);
	}
	private void SetInitialStateControls(boolean enabled)
	{
		form.btnViewAction().setEnabled(enabled);
		form.btnUpdateAction().setEnabled(enabled);
		form.ctnDetails().btnBookFurther().setVisible(enabled);
		form.btnAddAction().setEnabled(enabled);

		form.btnUp().setEnabled(enabled);
		form.btnDown().setEnabled(enabled);
		form.chkActionActive().setEnabled(enabled);
	}
	
	private void SetTreatmentPlanRowColor(GenForm.grdTreatmentPlanGridRow row)
	{
		row.setBackColor(Color.Salmon);//Color color = Color.FromArgb(247, 130, 132);
	}
	
	private void RestoreTreatmentPlanRowColor(GenForm.grdTreatmentPlanGridRow row)
	{
		row.setBackColor(Color.Default);
	}
	
	private void SetActionsGridRowColor(GenForm.grdActionsGridRow row)
	{
		row.setBackColor(Color.Salmon);//Color color = Color.FromArgb(247, 130, 132);
	}
//	TODO replace with Domain BO calls	
//	private String GetApptStatusText(String appt_statId)
//	{
//	Lkup lookupDto =  form.getLocalContext().getApptStatus();;
//	
//		if(lookupDto != null)
//			for(int i=0; i<lookupDto.DataCollection.count(); i++)
//				if(lookupDto.DataCollection.get(i).Lkup_id.equals(appt_statId))
//					return lookupDto.DataCollection.get(i).Lkup_nm;
//	
//		return "";
//	}
	
//	TODO replace with Domain BO calls	
//	private String GetCategoryComboText(String lkup_id)
//	{
//		//Category
//		Lkup lookupDto =  form.getGlobalContext().CcoSched.TreatmentPlan.getCategory();
//		if(lookupDto != null)
//		{
//			for(int i=0; i<lookupDto.DataCollection.count(); i++)
//			{
//				if(lookupDto.DataCollection.get(i).Lkup_id.equals(lkup_id))
//				{
//					return lookupDto.DataCollection.get(i).Lkup_nm;
//				}
//			}
//		}
//	
//		return "";
//	}
	
	private String GetAnaestheticText(String lkup_id)
	{
//		TODO replace with Domain BO calls
//		//Category
//		Lkup lookupDto =  form.getGlobalContext().CcoSched.TreatmentPlan.getAnaesthetic();
//		if(lookupDto != null)
//		{
//			for(int i=0; i<lookupDto.DataCollection.count(); i++)
//			{
//				if(lookupDto.DataCollection.get(i).Lkup_id.equals(lkup_id))
//				{
//					return lookupDto.DataCollection.get(i).Lkup_nm;
//				}
//			}
//		}
	
		return "";
	}
	
//	checking if the page was loaded
	private boolean isPageLoaded()
	{
//		TODO replace with Domain BO calls
//		if(form.getLocalContext().getPageLoaded() != null)
//			return form.getLocalContext().getPageLoaded().booleanValue();

		return false;
	}
	
	private void setPageLoaded(Boolean value)
	{
//		TODO replace with Domain BO calls
		//form.getLocalContext().setPageLoaded(value);
	}
	
	private void PopulateDoseGrid(PatTreatPlanActionVo actionRecord)
	{

		form.ctnDetails().grdDose().getRows().clear();
		setDoseFooter();
		if (actionRecord.getDoseIsNotNull())
		{
			for (Iterator iter = actionRecord.getDose().iterator(); iter.hasNext();) {
				PatTreatPlanActionDoseVo element = (PatTreatPlanActionDoseVo) iter.next();
				
				if(element.getEdoseastat().equals(ACTIVE))
				{
					grdDoseRow row = form.ctnDetails().grdDose().getRows().newRow();
					row.setDose(element.getEbdose());
					row.setFractions(element.getEbfractions());
					row.setDays(element.getEbdur());
					row.setValue(element);
				}
				
			}
		}		
		//Populate total
		setDoseFooter();
	}
		
	//24/11/2004 - Set Rebooking Data
//	TODO replace with Domain BO calls	
	protected void onBtnBookFurtherClick() throws PresentationLogicException 
	{		
		form.getGlobalContext().CcoSched.TreatmentPlan.setFurtherAppointment(new Boolean(true));
		form.getGlobalContext().CcoSched.CancelledAppointments.setRebookAppointmentDetail(form.grdActionsGrid().getValue()!=null?form.grdActionsGrid().getValue().getApptHeadIdIsNotNull()?form.grdActionsGrid().getValue().getApptHeadId().toString():"":"");		
		engine.open(form.getForms().CcoSched.Rebooking, "Book Further Appointments");			
	}
	
	//if there are less appointments booked that the total fractions
	//and if the appt_head_id has a value (it was booked before)
	private boolean isFurtherBtnEnableable(PatTreatPlanActionVo record)
	{
		if(record.getApptHeadIdIsNotNull())
		{
			if (record.getDoseIsNotNull())
			{
				for (Iterator iter = record.getDose().iterator(); iter.hasNext();) 
				{
					PatTreatPlanActionDoseVo element = (PatTreatPlanActionDoseVo) iter.next();
					if (element.getEdisbooked().equalsIgnoreCase("N"))//wdev-14634 was "Y"
						return true;
				}
			}
		}		
		return false;
	}
	
	protected void onBtnComputerPlanningClick() throws PresentationLogicException 
	{
//		TODO replace with Domain BO calls
//		if(form.getGlobalContext().CcoSched.TreatmentPlan.getSelectedPlanIsNotNull())
//		{
//			engine.open(form.getForms().CcoSched.PretreatmentUpdate);	
//		}
//		else if(form.grdActionsGrid().getValue() != null && form.grdActionsGrid().getValue().Action_id.equals("-101"))
//		{
//			engine.open(form.getForms().CcoSched.PretreatmentNew);
//		}
//		else
//		{
//			engine.showMessage("No Computer Plan associated to selected action");
//		}
	}
	//Check if there is a plan associated with this ID
	private boolean isPlanUpdatable(Integer actionID)
	{
//TODO
		return false;
//		form.getGlobalContext().CcoSched.TreatmentPlan.setSelectedPlan(null);
//		Sd_comp_plan compPlanDto = (Sd_comp_plan)domain.getDTOInstance(Sd_comp_plan.class);
//		compPlanDto.Filter.clear();
//		compPlanDto.Filter.Go_ptplactid = actionID;
//		Result res = compPlanDto.get();
//		if(res != null)
//		{
//			//engine.showMessage(res.getMessage());
//			return false;
//		}
//		
//		form.getGlobalContext().CcoSched.TreatmentPlan.setSelectedPlan(compPlanDto);
//		return true;
	}
	private void setEnableCompPlan(boolean bVal)
	{
		form.ctnDetails().btnComputerPlanning().setVisible(bVal);
	}

//	TODO replace with Domain BO calls
//    Go_ptplactRecord getActivity(Go_ptplact go_ptplact, String treatmentActionId)
//    {
//    	if(go_ptplact != null && treatmentActionId != null && treatmentActionId.length() > 0)
//    	{
//    		for (int i = 0; i < go_ptplact.DataCollection.count(); i++)
//			{
//    			if(go_ptplact.DataCollection.get(i).Pt_act_id.equals(treatmentActionId))
//    				return go_ptplact.DataCollection.get(i);
//			}
//    	}
//    	return null;
//    }
    
    private void setDoseFooter()
    {
		int dose = 0, fraction = 0, duration = 0;

		for (int i = 0; i < form.ctnDetails().grdDose().getRows().size(); i++)
		{
			GenForm.ctnDetailsContainer.grdDoseRow row = form.ctnDetails().grdDose().getRows().get(i);
			if(	row.getDose() != null)  //wdev-13962
				dose += row.getDose();
			if(	row.getFractions() != null) //wdev-13962
				fraction += row.getFractions();
			if( row.getDays() != null)		//wdev-13962
				duration += row.getDays();
		}

		form.ctnDetails().grdDose().setFooterValue(getTextAndSpaces(dose, fraction, duration));
	}

	private String getTextAndSpaces(int dose, int fraction, int duration)
	{
		StringBuilder sb = new StringBuilder();
		sb.append(dose);
		sb.append(dose > 9?getSpaces(16):getSpaces(18));
		sb.append(fraction);
		sb.append(fraction > 9?getSpaces(16):getSpaces(18));
		sb.append(duration);
		return sb.toString();
	}

	private String getSpaces(int i)
	{
		StringBuilder spaces = new StringBuilder();
		for (int j = 0; j < i; j++)
		{
			spaces.append("&nbsp;");
		}
		
		return spaces.toString();
	}

	//start WDEV-13998
	public class DateSeenComparator implements Comparator
	{
		private int direction = 1;
		
		public DateSeenComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateSeenComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			java.util.Date pdate1 = null;
			java.util.Date pdate2 = null;
			if(ob1 instanceof PatTreatmentPlanLiteVo )
			{
				PatTreatmentPlanLiteVo ps1 = (PatTreatmentPlanLiteVo)ob1;
				pdate1 = ps1 != null && ps1.getDateSeenIsNotNull() ? ps1.getDateSeen().getDate():null;
			}
			if(ob2 instanceof PatTreatmentPlanLiteVo)
			{
				PatTreatmentPlanLiteVo ps2 = (PatTreatmentPlanLiteVo)ob2;
				pdate2 = ps2 != null && ps2.getDateSeenIsNotNull() ? ps2.getDateSeen().getDate():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	}
	//end WDEV-13998
	
//	TODO replace with Domain BO calls
//	private String getTechniqueText(String lkupId)
//	{
//		Lkup lookupDto =  form.getGlobalContext().CcoSched.TreatmentPlan.getTechnique();//Context.ContextTreatmentPlanAction.Technique;
//		
//		for (int i = 0; lookupDto != null && i < lookupDto.DataCollection.count(); i++)
//		{
//			if(lookupDto.DataCollection.get(i).Lkup_id.equals(lkupId))
//			{
//				return lookupDto.DataCollection.get(i).Lkup_nm;
//			}
//		}
//		
//		return "";
//	}
	
	private  Integer ACTIVE	= -10100;
	private  Integer INACTIVE= -10101;
    private  String TECHNIQUE_LKP_TYPE = "3415";
}
