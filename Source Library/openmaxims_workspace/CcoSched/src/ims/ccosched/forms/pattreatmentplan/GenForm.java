//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.pattreatmentplan;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class gridTrSiteRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridTrSiteRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setGroupReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isGroupReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showGroupOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForGroup(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getGroup()
			{
				return (String)super.row.get(0);
			}
			public void setGroup(String value)
			{
				super.row.set(0, value);
			}
			public void setCellGroupTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setTreatmentSiteReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isTreatmentSiteReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showTreatmentSiteOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForTreatmentSite(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getTreatmentSite()
			{
				return (String)super.row.get(1);
			}
			public void setTreatmentSite(String value)
			{
				super.row.set(1, value);
			}
			public void setCellTreatmentSiteTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setTechniqueReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isTechniqueReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showTechniqueOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForTechnique(String value)
			{
				super.row.setTooltip(2, value);
			}
			public String getTechnique()
			{
				return (String)super.row.get(2);
			}
			public void setTechnique(String value)
			{
				super.row.set(2, value);
			}
			public void setCellTechniqueTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public String getValue()
			{
				return (String)super.row.getValue();
			}
			public void setValue(String value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridTrSiteRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridTrSiteRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridTrSiteRow get(int index)
			{
				return new gridTrSiteRow(super.collection.get(index));
			}
			public gridTrSiteRow newRow()
			{
				return new gridTrSiteRow(super.collection.newRow());
			}
			public gridTrSiteRow newRow(boolean autoSelect)
			{
				return new gridTrSiteRow(super.collection.newRow(autoSelect));
			}
			public gridTrSiteRow newRowAt(int index)
			{
				return new gridTrSiteRow(super.collection.newRowAt(index));
			}
			public gridTrSiteRow newRowAt(int index, boolean autoSelect)
			{
				return new gridTrSiteRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridTrSiteGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public String[] getValues()
			{
				String[] listOfValues = new String[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public String getValue()
			{
				return (String)super.grid.getValue();
			}
			public void setValue(String value)
			{
				super.grid.setValue(value);
			}
			public gridTrSiteRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridTrSiteRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridTrSiteRowCollection getRows()
			{
				return new gridTrSiteRowCollection(super.grid.getRows());
			}
			public gridTrSiteRow getRowByValue(String value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridTrSiteRow(row);
			}
			public void setGroupHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getGroupHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setTreatmentSiteHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getTreatmentSiteHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setTechniqueHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getTechniqueHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		public static class grdDoseRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdDoseRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setDoseReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isDoseReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showDoseOpened()
			{
				super.row.showOpened(0);
			}
			public Integer getDose()
			{
				return (Integer)super.row.get(0);
			}
			public void setDose(Integer value)
			{
				super.row.set(0, value);
			}
			public void setCellDoseTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setFractionsReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isFractionsReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showFractionsOpened()
			{
				super.row.showOpened(1);
			}
			public Integer getFractions()
			{
				return (Integer)super.row.get(1);
			}
			public void setFractions(Integer value)
			{
				super.row.set(1, value);
			}
			public void setCellFractionsTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setDaysReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isDaysReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showDaysOpened()
			{
				super.row.showOpened(2);
			}
			public Integer getDays()
			{
				return (Integer)super.row.get(2);
			}
			public void setDays(Integer value)
			{
				super.row.set(2, value);
			}
			public void setCellDaysTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.dtomove.vo.PatTreatPlanActionDoseVo getValue()
			{
				return (ims.dtomove.vo.PatTreatPlanActionDoseVo)super.row.getValue();
			}
			public void setValue(ims.dtomove.vo.PatTreatPlanActionDoseVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdDoseRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdDoseRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdDoseRow get(int index)
			{
				return new grdDoseRow(super.collection.get(index));
			}
			public grdDoseRow newRow()
			{
				return new grdDoseRow(super.collection.newRow());
			}
			public grdDoseRow newRow(boolean autoSelect)
			{
				return new grdDoseRow(super.collection.newRow(autoSelect));
			}
			public grdDoseRow newRowAt(int index)
			{
				return new grdDoseRow(super.collection.newRowAt(index));
			}
			public grdDoseRow newRowAt(int index, boolean autoSelect)
			{
				return new grdDoseRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdDoseGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
			{
				super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
			}
			public ims.dtomove.vo.PatTreatPlanActionDoseVoCollection getValues()
			{
				ims.dtomove.vo.PatTreatPlanActionDoseVoCollection listOfValues = new ims.dtomove.vo.PatTreatPlanActionDoseVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.dtomove.vo.PatTreatPlanActionDoseVo getValue()
			{
				return (ims.dtomove.vo.PatTreatPlanActionDoseVo)super.grid.getValue();
			}
			public void setValue(ims.dtomove.vo.PatTreatPlanActionDoseVo value)
			{
				super.grid.setValue(value);
			}
			public grdDoseRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdDoseRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdDoseRowCollection getRows()
			{
				return new grdDoseRowCollection(super.grid.getRows());
			}
			public grdDoseRow getRowByValue(ims.dtomove.vo.PatTreatPlanActionDoseVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdDoseRow(row);
			}
			public void setDoseHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getDoseHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setFractionsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getFractionsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setDaysHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getDaysHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 135, 37, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 5, 80, 56, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Needed:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 5, 64, 56, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Anaesthetic", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 207, 42, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 328, 42, 33, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Units:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 328, 10, 53, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Category:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 160, 42, 80, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Planned Regime:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 59, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Start Date:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 50, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Modality:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 7, 10, 29, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "HCP:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 159, 42, 73, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Energy Value:", new Integer(0), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 624, 128, 192, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Update Computer Planning", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 616, 128, 200, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Book Further Appointments", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 64, 72, 89, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 240, 40, 80, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 64, 40, 89, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 240, 40, 80, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 384, 40, 136, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 384, 8, 136, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 64, 40, 80, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 64, 40, 89, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 240, 40, 280, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 64, 8, 257, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 528, 8, 288, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Grid m_gridTrSiteTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridTrSiteTemp);
			gridTrSiteGrid gridTrSite = (gridTrSiteGrid)GridFlyweightFactory.getInstance().createGridBridge(gridTrSiteGrid.class, m_gridTrSiteTemp);
			gridTrSite.addStringColumn("Group", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridTrSite.addStringColumn("Treatment Site", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridTrSite.addStringColumn("Technique", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(gridTrSite);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 64, 72, 256, 80, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			Grid m_grdDoseTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.TRUE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdDoseTemp);
			grdDoseGrid grdDose = (grdDoseGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDoseGrid.class, m_grdDoseTemp);
			grdDose.addIntColumn("Dose", 0, 0, 60, true, true, null, false, 0, false, 0);
			grdDose.addIntColumn("Fractions", 0, 0, 60, true, true, null, false, 0, false, 0);
			grdDose.addIntColumn("Days", 0, 0, -1, true, true, null, false, 0, true, 0);
			super.addGrid(grdDose);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public Label lblTotal()
		{
			return (Label)super.getControl(0);
		}
		public Label lblAnaesthetic2()
		{
			return (Label)super.getControl(1);
		}
		public Label lblAnaesthetic1()
		{
			return (Label)super.getControl(2);
		}
		public Label lblBrachyDate()
		{
			return (Label)super.getControl(3);
		}
		public Label lblUnits()
		{
			return (Label)super.getControl(4);
		}
		public Label lblCategory()
		{
			return (Label)super.getControl(5);
		}
		public Label lblPlannedRegime()
		{
			return (Label)super.getControl(6);
		}
		public Label lblDate()
		{
			return (Label)super.getControl(7);
		}
		public Label lblStartDate()
		{
			return (Label)super.getControl(8);
		}
		public Label lblModality()
		{
			return (Label)super.getControl(9);
		}
		public Label lblHcp()
		{
			return (Label)super.getControl(10);
		}
		public Label lblEnergyValue()
		{
			return (Label)super.getControl(11);
		}
		public Button btnComputerPlanning()
		{
			return (Button)super.getControl(12);
		}
		public Button btnBookFurther()
		{
			return (Button)super.getControl(13);
		}
		public TextBox txtAnaesthetic()
		{
			return (TextBox)super.getControl(14);
		}
		public TextBox txtBrachyDate()
		{
			return (TextBox)super.getControl(15);
		}
		public TextBox edtModality()
		{
			return (TextBox)super.getControl(16);
		}
		public TextBox edtEnergyValue()
		{
			return (TextBox)super.getControl(17);
		}
		public TextBox edtUnits()
		{
			return (TextBox)super.getControl(18);
		}
		public TextBox txtPatientCategory()
		{
			return (TextBox)super.getControl(19);
		}
		public TextBox dtDate()
		{
			return (TextBox)super.getControl(20);
		}
		public TextBox dtStartDate()
		{
			return (TextBox)super.getControl(21);
		}
		public TextBox edtPlannedRegime()
		{
			return (TextBox)super.getControl(22);
		}
		public TextBox edtHCP()
		{
			return (TextBox)super.getControl(23);
		}
		public gridTrSiteGrid gridTrSite()
		{
			return (gridTrSiteGrid)super.getGrid(0);
		}
		public grdDoseGrid grdDose()
		{
			return (grdDoseGrid)super.getGrid(1);
		}
	}
	public static class grdActionsGridRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdActionsGridRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setActionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isActionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showActionOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForAction(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getAction()
		{
			return (String)super.row.get(0);
		}
		public void setAction(String value)
		{
			super.row.set(0, value);
		}
		public void setCellActionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setOrderNoReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isOrderNoReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showOrderNoOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForOrderNo(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getOrderNo()
		{
			return (String)super.row.get(1);
		}
		public void setOrderNo(String value)
		{
			super.row.set(1, value);
		}
		public void setCellOrderNoTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setPriorityReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isPriorityReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showPriorityOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForPriority(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getPriority()
		{
			return (String)super.row.get(2);
		}
		public void setPriority(String value)
		{
			super.row.set(2, value);
		}
		public void setCellPriorityTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isStatusReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showStatusOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForStatus(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getStatus()
		{
			return (String)super.row.get(3);
		}
		public void setStatus(String value)
		{
			super.row.set(3, value);
		}
		public void setCellStatusTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setEstStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isEstStartDateReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showEstStartDateOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForEstStartDate(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getEstStartDate()
		{
			return (String)super.row.get(4);
		}
		public void setEstStartDate(String value)
		{
			super.row.set(4, value);
		}
		public void setCellEstStartDateTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setEstEndDateReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isEstEndDateReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showEstEndDateOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForEstEndDate(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getEstEndDate()
		{
			return (String)super.row.get(5);
		}
		public void setEstEndDate(String value)
		{
			super.row.set(5, value);
		}
		public void setCellEstEndDateTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setBookedDateReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isBookedDateReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showBookedDateOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForBookedDate(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getBookedDate()
		{
			return (String)super.row.get(6);
		}
		public void setBookedDate(String value)
		{
			super.row.set(6, value);
		}
		public void setCellBookedDateTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setApptDateReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isApptDateReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showApptDateOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForApptDate(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getApptDate()
		{
			return (String)super.row.get(7);
		}
		public void setApptDate(String value)
		{
			super.row.set(7, value);
		}
		public void setCellApptDateTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setApptStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isApptStatusReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showApptStatusOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForApptStatus(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getApptStatus()
		{
			return (String)super.row.get(8);
		}
		public void setApptStatus(String value)
		{
			super.row.set(8, value);
		}
		public void setCellApptStatusTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setLastApptDateReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean isLastApptDateReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showLastApptDateOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForLastApptDate(String value)
		{
			super.row.setTooltip(9, value);
		}
		public String getLastApptDate()
		{
			return (String)super.row.get(9);
		}
		public void setLastApptDate(String value)
		{
			super.row.set(9, value);
		}
		public void setCellLastApptDateTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setWaitingListReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isWaitingListReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showWaitingListOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForWaitingList(String value)
		{
			super.row.setTooltip(10, value);
		}
		public String getWaitingList()
		{
			return (String)super.row.get(10);
		}
		public void setWaitingList(String value)
		{
			super.row.set(10, value);
		}
		public void setCellWaitingListTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.ccosched.vo.PatTreatPlanActionVo getValue()
		{
			return (ims.ccosched.vo.PatTreatPlanActionVo)super.row.getValue();
		}
		public void setValue(ims.ccosched.vo.PatTreatPlanActionVo value)
		{
			super.row.setValue(value);
		}
		public grdActionsGridRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdActionsGridRow(super.row.getParent());
		}
		public grdActionsGridRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdActionsGridRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdActionsGridRowCollection collection;
	}
	public static class grdActionsGridRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdActionsGridRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdActionsGridRow get(int index)
		{
			return new grdActionsGridRow(super.collection.get(index));
		}
		public grdActionsGridRow newRow()
		{
			return new grdActionsGridRow(super.collection.newRow());
		}
		public grdActionsGridRow newRow(boolean autoSelect)
		{
			return new grdActionsGridRow(super.collection.newRow(autoSelect));
		}
		public grdActionsGridRow newRowAt(int index)
		{
			return new grdActionsGridRow(super.collection.newRowAt(index));
		}
		public grdActionsGridRow newRowAt(int index, boolean autoSelect)
		{
			return new grdActionsGridRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdActionsGridGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdActionsGridRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdActionsGridRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdActionsGridRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdActionsGridRow[] result = new GenForm.grdActionsGridRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdActionsGridRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdActionsGridRow[] getAllRows(GenForm.grdActionsGridRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdActionsGridRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdActionsGridRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdActionsGridRow[] result = new GenForm.grdActionsGridRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdActionsGridRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdActionsGridRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdActionsGridRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdActionsGridRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.ccosched.vo.PatTreatPlanActionVoCollection getValues()
		{
			ims.ccosched.vo.PatTreatPlanActionVoCollection listOfValues = new ims.ccosched.vo.PatTreatPlanActionVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ccosched.vo.PatTreatPlanActionVo getValue()
		{
			return (ims.ccosched.vo.PatTreatPlanActionVo)super.grid.getValue();
		}
		public void setValue(ims.ccosched.vo.PatTreatPlanActionVo value)
		{
			super.grid.setValue(value);
		}
		public grdActionsGridRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdActionsGridRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdActionsGridRowCollection getRows()
		{
			return new grdActionsGridRowCollection(super.grid.getRows());
		}
		public grdActionsGridRow getRowByValue(ims.ccosched.vo.PatTreatPlanActionVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdActionsGridRow(row);
		}
		public void setActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setOrderNoHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getOrderNoHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setPriorityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getPriorityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setEstStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getEstStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setEstEndDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getEstEndDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setBookedDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getBookedDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setApptDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getApptDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setApptStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getApptStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setLastApptDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getLastApptDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setWaitingListHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getWaitingListHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
	}
	public static class grdTreatmentPlanGridRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTreatmentPlanGridRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setDateSeenReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isDateSeenReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showDateSeenOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForDateSeen(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Date getDateSeen()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setDateSeen(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellDateSeenTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isConsultantReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showConsultantOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForConsultant(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getConsultant()
		{
			return (String)super.row.get(1);
		}
		public void setConsultant(String value)
		{
			super.row.set(1, value);
		}
		public void setCellConsultantTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setHistologyReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isHistologyReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showHistologyOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForHistology(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getHistology()
		{
			return (String)super.row.get(2);
		}
		public void setHistology(String value)
		{
			super.row.set(2, value);
		}
		public void setCellHistologyTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setIntentReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isIntentReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showIntentOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForIntent(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getIntent()
		{
			return (String)super.row.get(3);
		}
		public void setIntent(String value)
		{
			super.row.set(3, value);
		}
		public void setCellIntentTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setCommentReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isCommentReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showCommentOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForComment(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getComment()
		{
			return (String)super.row.get(4);
		}
		public void setComment(String value)
		{
			super.row.set(4, value);
		}
		public void setCellCommentTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.ccosched.vo.PatTreatmentPlanLiteVo getValue()
		{
			return (ims.ccosched.vo.PatTreatmentPlanLiteVo)super.row.getValue();
		}
		public void setValue(ims.ccosched.vo.PatTreatmentPlanLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTreatmentPlanGridRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTreatmentPlanGridRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTreatmentPlanGridRow get(int index)
		{
			return new grdTreatmentPlanGridRow(super.collection.get(index));
		}
		public grdTreatmentPlanGridRow newRow()
		{
			return new grdTreatmentPlanGridRow(super.collection.newRow());
		}
		public grdTreatmentPlanGridRow newRow(boolean autoSelect)
		{
			return new grdTreatmentPlanGridRow(super.collection.newRow(autoSelect));
		}
		public grdTreatmentPlanGridRow newRowAt(int index)
		{
			return new grdTreatmentPlanGridRow(super.collection.newRowAt(index));
		}
		public grdTreatmentPlanGridRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTreatmentPlanGridRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTreatmentPlanGridGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addCommentColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int maxLength, boolean canGrow)
		{
			super.grid.addCommentColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, maxLength, canGrow);
		}
		public ims.ccosched.vo.PatTreatmentPlanLiteVoCollection getValues()
		{
			ims.ccosched.vo.PatTreatmentPlanLiteVoCollection listOfValues = new ims.ccosched.vo.PatTreatmentPlanLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ccosched.vo.PatTreatmentPlanLiteVo getValue()
		{
			return (ims.ccosched.vo.PatTreatmentPlanLiteVo)super.grid.getValue();
		}
		public void setValue(ims.ccosched.vo.PatTreatmentPlanLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdTreatmentPlanGridRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTreatmentPlanGridRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTreatmentPlanGridRowCollection getRows()
		{
			return new grdTreatmentPlanGridRowCollection(super.grid.getRows());
		}
		public grdTreatmentPlanGridRow getRowByValue(ims.ccosched.vo.PatTreatmentPlanLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTreatmentPlanGridRow(row);
		}
		public void setDateSeenHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getDateSeenHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setHistologyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getHistologyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setIntentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getIntentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setCommentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getCommentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 832, 248, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL," Actions", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 184, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT," Treatment Plan", new Integer(2), ""}));

		// Container Clasess
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 10, 448, 832, 176, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Action Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 176);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper29.getWidth(), anchoringHelper29.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 743, 214, 88, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save Order", Boolean.FALSE, "Save Order", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 402, 215, 88, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "View Action", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 493, 215, 96, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Add Action", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 592, 215, 96, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Update Action", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 295, 23, 160, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "View Treatment Plan", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 648, 24, 184, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Update Treatment Plan", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 459, 23, 184, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "New Treatment Plan", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 21, 222, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Display active actions only.", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 21, 31, 200, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Display active treatment plans only.", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 16, 241, 816, 173, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdActionsGridTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(38), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdActionsGridTemp);
		grdActionsGridGrid grdActionsGrid = (grdActionsGridGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActionsGridGrid.class, m_grdActionsGridTemp);
		grdActionsGrid.addTreeColumn("Action", 0, 150, false, true);
		grdActionsGrid.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Priority", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Status", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Est.Start Date", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Est.End Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Bkd.Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("1st App.Date", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Appt.Status", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Last App.Dte.", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdActionsGrid.addStringColumn("Wait.List", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdActionsGrid);
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdTreatmentPlanGridTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTreatmentPlanGridTemp);
		grdTreatmentPlanGridGrid grdTreatmentPlanGrid = (grdTreatmentPlanGridGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTreatmentPlanGridGrid.class, m_grdTreatmentPlanGridTemp);
		grdTreatmentPlanGrid.addDateColumn("Date Seen", 0, 0, 100, true, true, null, false, 1, true);
		grdTreatmentPlanGrid.addStringColumn("Consultant", 0, 0, 175, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTreatmentPlanGrid.addStringColumn("Histology", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTreatmentPlanGrid.addStringColumn("Intent", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTreatmentPlanGrid.addCommentColumn("Comment", 1, 1, -1, true, false,0, true);
		super.addGrid(grdTreatmentPlanGrid);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 717, 215, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Down, this.getImages().Core.DownDisabled, "Move Down", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 691, 215, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Up, this.getImages().Core.UpDisabled, "Move Up", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnSaveOrder()
	{
		return (Button)super.getControl(3);
	}
	public Button btnViewAction()
	{
		return (Button)super.getControl(4);
	}
	public Button btnAddAction()
	{
		return (Button)super.getControl(5);
	}
	public Button btnUpdateAction()
	{
		return (Button)super.getControl(6);
	}
	public Button btnViewTreatmentPlan()
	{
		return (Button)super.getControl(7);
	}
	public Button btnUpdateTreatmentPlan()
	{
		return (Button)super.getControl(8);
	}
	public Button btnNewTreatmentPlan()
	{
		return (Button)super.getControl(9);
	}
	public CheckBox chkActionActive()
	{
		return (CheckBox)super.getControl(10);
	}
	public CheckBox chkTrPlanActive()
	{
		return (CheckBox)super.getControl(11);
	}
	public grdActionsGridGrid grdActionsGrid()
	{
		return (grdActionsGridGrid)super.getGrid(0);
	}
	public grdTreatmentPlanGridGrid grdTreatmentPlanGrid()
	{
		return (grdTreatmentPlanGridGrid)super.getGrid(1);
	}
	public ImageButton btnDown()
	{
		return (ImageButton)super.getControl(14);
	}
	public ImageButton btnUp()
	{
		return (ImageButton)super.getControl(15);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			CcoSched = new CcoSchedForms();
		}
		public final class CcoSchedForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CcoSchedForms()
			{
				PatTreatmentPlanUpdate = new LocalFormName(128131);
				PatTreatmentPlanAction = new LocalFormName(128163);
				Rebooking = new LocalFormName(128140);
			}
			public final FormName PatTreatmentPlanUpdate;
			public final FormName PatTreatmentPlanAction;
			public final FormName Rebooking;
		}

		public CcoSchedForms CcoSched;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Down = new ImageHelper(102108, "Images/Core/down.gif", new Integer(16), new Integer(16));
				DownDisabled = new ImageHelper(102109, "Images/Core/down_disabled.gif", new Integer(16), new Integer(16));
				Up = new ImageHelper(102114, "Images/Core/up.gif", new Integer(16), new Integer(16));
				UpDisabled = new ImageHelper(102115, "Images/Core/up_disabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Down;
			public final ims.framework.utils.Image DownDisabled;
			public final ims.framework.utils.Image Up;
			public final ims.framework.utils.Image UpDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_patTP = new ims.framework.ContextVariable("patTP", prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier + "");
		}
		
		public boolean getpatTPIsNotNull()
		{
			return !cxl_patTP.getValueIsNull(context);
		}
		public ims.ccosched.vo.PatTreatmentPlanLiteVo getpatTP()
		{
			return (ims.ccosched.vo.PatTreatmentPlanLiteVo)cxl_patTP.getValue(context);
		}
		public void setpatTP(ims.ccosched.vo.PatTreatmentPlanLiteVo value)
		{
			cxl_patTP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_patTP = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[206];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ID", "ID_PatAction");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-BOOKEDDATE", "BookedDate");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-BOOKEDTIME", "BookedTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPTHEADID", "ApptHeadId");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPTID", "ApptId");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PRETREATMENTPLAN", "PretreatmentPlan");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-STATUS", "Status");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PRIORITY", "Priority");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PATIENTSTATUS", "PatientStatus");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ATTENDINGAS", "AttendingAs");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TRANSPORT", "Transport");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-REASON", "Reason");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-CATEGORY", "Category");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-UNIT", "Unit");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-MODALITY", "Modality");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ANEASTHETIC", "Aneasthetic");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTIVE", "Active");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ESTARTDATE", "EstartDate");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-EENDDATE", "EendDate");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTIONSTATUSDATE", "ActionStatusDate");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-WAITINGLIST", "WaitingList");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-MODALENERGY", "ModalEnergy");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-IMAGINGDATE", "ImagingDate");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-STARTDATEREGIME", "StartDateRegime");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTION_ORDERNUMBER", "Action_OrderNumber");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TREATMENACTION", "TreatmenAction");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-LASTAPPOINTMENTDATE", "LastAppointmentDate");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPDATE", "AppDate");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-CHEMPLANSTARTDATE", "ChemPlanStartDate");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPACLINIC", "OPAClinic");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPADATE", "OPADate");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPATIME", "OPATime");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-WLID", "WLId");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-SCHEDAPPDATE", "SchedAppDate");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-SCHEDAPPTIME", "SchedAppTIme");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TREATMENTACTION", "Treatmentaction");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_DOSE", "Tl_dose");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_FRACTIONS", "Tl_fractions");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_DURATION", "Tl_duration");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ID", "ID_PatTreatmentPlan");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-TREATMENTINTENT", "TreatmentIntent");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-DATESEEN", "DateSeen");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-DECISIONTOTREAT", "DecisionToTreat");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-PATIENT", "Patient");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-PKEY", "Pkey");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-RKEY", "Rkey");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-EPISODE", "Episode");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-TREATMENTPLANCOMMENT", "TreatmentplanComment");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ACTIVESTATUS", "ActiveStatus");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ECAD_DATE", "Ecad_date");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-ID", "ID_PatTreatmentPlan");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-TREATMENTINTENT", "TreatmentIntent");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-DATESEEN", "DateSeen");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-DECISIONTOTREAT", "DecisionToTreat");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-PATIENT", "Patient");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-PKEY", "Pkey");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-RKEY", "Rkey");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-EPISODE", "Episode");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-TREATMENTPLANCOMMENT", "TreatmentplanComment");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-ACTIVESTATUS", "ActiveStatus");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlan.__internal_x_context__patTP_" + componentIdentifier, "BO-1105100037-ECAD_DATE", "Ecad_date");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
