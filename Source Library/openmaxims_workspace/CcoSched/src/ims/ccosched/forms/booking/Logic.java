//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.14 build 40428.1120)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.booking;

import ims.alerts.PatientAlertCCO;
import ims.ccosched.ActionData.ActionData;
import ims.ccosched.ActionSession.ActionSession;
import ims.ccosched.DateSessionSlotsClass.DateSessionSlotsClass;
import ims.ccosched.SlotTime.SlotTime;
import ims.ccosched.forms.booking.GenForm.SlotsGridRow;
import ims.ccosched.vo.BookingDetailsVo;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatPlanActionVoCollection;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.core.vo.PatientShort;
import ims.dto.Result;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity_action;
import ims.dto.client.Sd_activstaff;
import ims.dto.client.Sd_mc_act;
import ims.dto.client.Sd_modactmc;
import ims.dto.client.Sd_modactmc.Sd_modactmcRecord;
import ims.dto.client.Sd_sess_appts;
import ims.dto.client.Sd_sess_avail;
import ims.dto.client.Sd_sessconflicts;
import ims.dtomove.vo.ActivityActionVo;
import ims.dtomove.vo.ActivityActionVoCollection;
import ims.dtomove.vo.ActivityGroupVo;
import ims.dtomove.vo.SchedActivityVo;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DayOfWeek;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.framework.utils.TimeSpan;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.Iterator;
public class Logic extends BaseLogic
{
	private Integer ACTION_ID = -101;
	protected void onFormOpen()
	{
		//The variable members don't get cleared when the session ends so we must initialise them again
		//BEGIN WORKAROUND
		m_NoActionsFlag = true;
		m_DoClear = true;
		bChangeResouces = true;
		m_Filter = null; // previously selected filter for GetAvailability
		//END WORKAROUND

		form.GenerateDates().setEnabled(true);
		form.RefreshAvailability().setEnabled(true);
		form.Reset().setEnabled(true);
		form.PreviousDate().setEnabled(false);
		form.NextDate().setEnabled(false);
		form.bActions().setEnabled(false);

//		#region In case of an internal error these controls must be explicitly enabled
		form.ListOwner().setEnabled(true);
		form.NumberOfAppointments().setEnabled(true);
		form.Resource().setEnabled(true);
		form.Hyperfractination().setEnabled(true);
		form.Sequence().setEnabled(true);
		onSequenceValueChanged();
		form.Mon().setEnabled(true);
		form.Tue().setEnabled(true);
		form.Wed().setEnabled(true);
		form.Thu().setEnabled(true);
		form.Fri().setEnabled(true);
		form.Sat().setEnabled(true);
		form.Sun().setEnabled(true);
		form.ConfirmBooking().setEnabled(true);
		form.PatientDiary().setEnabled(true);
		form.Level().setEnabled(true);
		form.Instances().setEnabled(true);
//		#endregion

		Date now = new Date();
		form.Calendar().setCurrentMonth(now);
		GregorianCalendar gregCalObject = new GregorianCalendar();
		//for (int i = 1; i <= DateTime.DaysInMonth(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth()); ++i)
		for (int i = 1; i <= gregCalObject.getActualMaximum(Calendar.DAY_OF_MONTH); ++i)
			form.Calendar().addNoSessionDates(new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), i));

		form.DateSelected().setValue("");
		
		form.htm1().setHTML("");//WDEV-14396
		form.LocationSelected().setValue("");
		form.Action().setValue("");
		form.NumResSelected().setValue("");
		form.NumberOfBookings().setValue("");
		form.NumberOfFirstAppointments().setValue("");
		form.Calendar().clearChecks();
		form.Calendar().clearConflicts();

		form.NumberOfAppointments().setValue(new Integer(1));
		OnNumberOfAppointments();
		setNumberOfConflicts(0);
		
		//load schedactivities
		if (!form.getLocalContext().getschedActivitiesIsNotNull())
			form.getLocalContext().setschedActivities(domain.getSchedActivities());
		
		//get actions from new gc
//		if (form.getGlobalContext().getPatTreatmentPlanIsNotNull() && form.getGlobalContext().getPatTreatmentPlan().getActionsIsNotNull())
//		{
			//load activity actions
			//TODO comment in
			if (form.getGlobalContext().CcoSched.ActivityView.getActions() == null)
				form.getGlobalContext().CcoSched.ActivityView.setActivityActions(domain.listActivityActions());
			
//		}
		
		// actions
		if (form.getGlobalContext().CcoSched.ActivityView.getActions()== null)
		{
			Sd_activity_action activityActions = (Sd_activity_action)domain.getDTOInstance(Sd_activity_action.class);
			activityActions.Filter.clear();
			activityActions.Filter.Action_act_ind = "Y";
			activityActions.Filter.Act_ind = "Y";
			Result result = activityActions.list();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return;
			}
			form.getGlobalContext().CcoSched.ActivityView.setActions(activityActions);

			if (activityActions.DataCollection.count() == 0)
			{
				ShowMessage("Error: No activities / actions configured on system.");
				return;
			}
		}

//
//		// Treatment Plan
		form.customControlTreamentPlan().clear();
		PatTreatmentPlanLiteVo tp = form.getGlobalContext().getPatTreatmentPlan();
		if (tp != null)
		{
			Date sd = tp.getDecisionToTreat();
			if (sd == null)
				ShowMessage("Decision to treat date is mandatory. Update treatment plan.");

			form.customControlTreamentPlan().setUpdateContext(Boolean.FALSE);
			//form.customControlTreamentPlan().displayRecords(tp.getID_PatTreatmentPlan().toString());
			form.customControlTreamentPlan().displayRecordsWithActiveACtions(tp.getID_PatTreatmentPlan().toString(),Boolean.TRUE); //wdev-13770
						
			setPIDTooltip(form.getGlobalContext().Core.getPatientShort(), tp, form.customControlTreamentPlan().getActions());			
		}

		
		if(tp!=null && !tp.getEcad_dateIsNotNull())
		{
			form.TreatmentPlanActivities().setValue(false);
			form.TreatmentPlanActivities().setEnabled(false);
			onTreatmentPlanActivitiesValueChanged();
			form.Calendar().setEnabled(false);
		}
		else
			form.Calendar().setEnabled(true);
		
		SetTreatmentPlanActivity();

		//start WDEV-14216
/*	
		int activities = 0;

		if (form.Activity().getNodes() != null)
		{
			activities = form.Activity().getNodes().size();
		}

		if (form.getGlobalContext().getPatTreatmentPlanAction() != null)
		{
			if (form.getGlobalContext().getPatTreatmentPlanAction().getActivityIsNotNull() 
				&& form.getGlobalContext().getPatTreatmentPlanAction().getActiveIsNotNull() 
				&& form.getGlobalContext().getPatTreatmentPlanAction().getActive().equals(true))
			{
				for (int i = 0; i < activities; i++)
				{
					if (form.Activity().getNodes().get(i).getText().equals(form.getGlobalContext().getPatTreatmentPlanAction().getActivity().getName()))
					{
						form.Activity().setValue(form.Activity().getNodes().get(i).getValue());
						if (form.Activity().getSelectedNode().getNodes().size() > 0)
						{
							form.Activity().getSelectedNode().setExpanded(true);
						}
						break;
					}
				}
			}
		}
		*/
		//end
	}

	private void setPIDTooltip(PatientShort patientShort, PatTreatmentPlanLiteVo treatmentPlan, PatTreatPlanActionVoCollection collection)
	{
		engine.clearAlertsByType(PatientAlertCCO.class);
		PatTreatPlanActionVo actionRecord = (collection!= null && collection.size() > 0?collection.get(0):null);
		engine.addAlert(new PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltip2(patientShort, treatmentPlan, actionRecord)));
		
//		engine.clearAlertsByType(PatientAlertCCO.class);
//		Go_ptplactRecord go_ptplactRecord = actions!= null && actions.DataCollection.count() > 0?actions.DataCollection.get(0):null;
//		engine.addAlert(new PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltip(patientShort, treatmentPlan, go_ptplactRecord)));
		
	}

	private void SetTreatmentPlanActivity()
	{

		// Activity
		PatTreatPlanActionVoCollection actionDetails = form.getGlobalContext().getPatTreatmentPlanIsNotNull()?form.getGlobalContext().getPatTreatmentPlan().getActions():null;
		if (form.getGlobalContext().CcoSched.TreatmentPlan.getIgnoreActionID2() != null || actionDetails == null)
		{
			//boolean oldVal = form.TreatmentPlanActivities().getValue(); 
			form.TreatmentPlanActivities().setValue(false);
			//if(oldVal == true)
				onTreatmentPlanActivitiesValueChanged();
			form.TreatmentPlanActivities().setEnabled(false);
			form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID1(Boolean.TRUE);
		}
		else
		{
			form.TreatmentPlanActivities().setEnabled(true);
			//boolean oldVal = form.TreatmentPlanActivities().getValue();
			form.TreatmentPlanActivities().setValue(form.getGlobalContext().CcoSched.TreatmentPlan.getActionID() != null);
			//if(oldVal != form.TreatmentPlanActivities().getValue())
			//	onTreatmentPlanActivitiesValueChanged();
			form.getLocalContext().setIgnoreMessage(new Boolean(false));
			onTreatmentPlanActivitiesValueChanged();
			form.getLocalContext().setIgnoreMessage(null);
			form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID1(form.getGlobalContext().CcoSched.TreatmentPlan.getActionID() == null?Boolean.TRUE:Boolean.FALSE);
		}
	}
	private void HideEverything()
	{
		form.LabelNumberOfAppointemnts().setVisible(false);
		form.NumberOfAppointments().setVisible(false);

		form.LabelModality().setVisible(false);
		form.Modality().setVisible(false);
		form.LabelEnergy().setVisible(false);
		form.Energy().setVisible(false);
		form.LabelUnit().setVisible(false);
		form.EnergyUnit().setVisible(false);

		form.LabelDose().setVisible(false);
		form.Dose().setVisible(false);
		form.LabelFractions().setVisible(false);
		form.Fractions().setVisible(false);
		form.LabelDuration().setVisible(false);
		form.Duration().setVisible(false);

		form.Hyperfractination().setVisible(false);
		form.LabelLevel().setVisible(false);
		form.Level().setVisible(false);
		form.LabelInstances().setVisible(false);
		form.Instances().setVisible(false);

		form.Sequence().setValue(false);
		onSequenceValueChanged();
		form.Sequence().setVisible(false);
		form.Mon().setValue(false);
		form.Tue().setValue(false);
		form.Wed().setValue(false);
		form.Thu().setValue(false);
		form.Fri().setValue(false);
		form.Sat().setValue(false);
		form.Sun().setValue(false);

		form.ListOwner().setVisible(false);
		form.LabelListOwner().setVisible(false);
		form.Resource().setVisible(false);
		form.LabelResource().setVisible(false);
	}

	protected void onTreatmentPlanActivitiesValueChanged() 
	{
		form.getLocalContext().setIgnoreMessage(new Boolean(false));
		TreatmentPlanActivitiesClick();
		form.getLocalContext().setIgnoreMessage(null);
	}

	private boolean TreatmentPlanActivitiesClick()
	{
		form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID1(form.TreatmentPlanActivities().getValue()?Boolean.FALSE:Boolean.TRUE);
		form.Activity().clear();
		Hashtable<Integer, Object> values = new Hashtable<Integer, Object>();
		int j = 0;
		form.getLocalContext().setActivityTree(values);

		boolean emptyFlag = false;
 		if (form.TreatmentPlanActivities().getValue())
		{
			//show actions from TP			
			PatTreatPlanActionVoCollection tpActivityActions = null;
			if (form.getGlobalContext().CcoSched.ActionUpdate.getTreatmentPlanActionsIsNotNull())
				tpActivityActions = form.getGlobalContext().CcoSched.ActionUpdate.getTreatmentPlanActions();
			else
				tpActivityActions = form.getGlobalContext().getPatTreatmentPlan().getActions();
			
			if ((tpActivityActions != null && tpActivityActions.size() == 0) || tpActivityActions == null)
			{
				HideEverything();
				ShowMessage("Error: No actions on selected treatment plan.");
				return false;
			}
			
			for (Iterator iter = tpActivityActions.iterator(); iter.hasNext();) 
			{
				PatTreatPlanActionVo tpActivityAction = (PatTreatPlanActionVo) iter.next();
				
				if(!tpActivityAction.getApptIdIsNotNull() 
					&& !tpActivityAction.getApptHeadIdIsNotNull() 
					&& isTPSchedulable(tpActivityAction)
					&& tpActivityAction.getActive())//wdev-13770
				{
					//WDEV-3368 - Remove the Pretreatment action from the upper tree.
					// WDEV-14227  NPE Fix
					if(tpActivityAction != null && tpActivityAction.getAction() != null && tpActivityAction.getAction().getAction() != null && tpActivityAction.getAction().getAction().getID_Action() != null && tpActivityAction.getAction().getAction().getID_Action().equals(ACTION_ID) == false)
					{
						values.put(new Integer(j), tpActivityAction);
						TreeNode node = form.Activity().getNodes().add(new Integer(j), tpActivityAction.getActivityIsNotNull()?tpActivityAction.getActivity().getName():"");
						j++;
						values.put(new Integer(j), tpActivityAction);
						node.getNodes().add(new Integer(j), tpActivityAction.getActivityIsNotNull()?tpActivityAction.getActionIsNotNull()?tpActivityAction.getAction().getActionIsNotNull()?tpActivityAction.getAction().getAction().getName():"":"":"");
						j++;
					}
				}
				
				
			}
			
//			replaced old code			
//			for(int i=0; i<tpActivityActions.DataCollection.count(); i++)
//			{
//				Go_ptplact.Go_ptplactRecord tpActivityAction = tpActivityActions.DataCollection.get(i);
//				//ICCO675 - 23/04/2003 - it should not add
//				//an action to the tree control if the action already has
//				//appointments booked for it i.e. the appt_head_id and appt_id will contain values
//				//17/02/2005 - don't display the schedulable
//				if(tpActivityAction.Appt_id.equals("") && tpActivityAction.Appt_head_id.equals("") && isTPSchedulable(tpActivityAction))
//				{
//					//WDEV-3368 - Remove the Pretreatment action from the upper tree. 
//					if(tpActivityAction.Action_id.equals(ACTION_ID) == false)
//					{
//						values.put(new Integer(j), tpActivityAction);
//						TreeNode node = form.Activity().getNodes().add(new Integer(j), tpActivityAction.Activity_idtxt);
//						j++;
//						values.put(new Integer(j), tpActivityAction);
//						node.getNodes().add(new Integer(j), tpActivityAction.Action_idtxt);
//						j++;
//					}
//				}
//			}
			
			//17/11/2004 - Fix related with the behaviour of the TreeControl in C# where
			//after populating the tree then the first root node is selected by default
			selectFirstNode();
			//End fix
			
			if (form.Activity().getNodes().size() == 0)
			{
				emptyFlag = true;
				form.TreatmentPlanActivities().setValue(false);
				//ICCO934 5) 09/11/04 - Fire manually the click event
				TreatmentPlanActivitiesClick();
			}
			else
			{
				// Default 
				boolean flag = false;
				for(int i=0; i<form.Activity().getNodes().size(); i++)
				{
					TreeNode root =  form.Activity().getNodes().get(i);
					if (flag)
						break;
					for(int k=0; k<root.getNodes().size();k++)
					{
						TreeNode node = root.getNodes().get(k);
						if (((PatTreatPlanActionVo)values.get(node.getValue())).getID_PatAction().toString().equals(form.getGlobalContext().CcoSched.TreatmentPlan.getActionID()))
						{
							if (form.getGlobalContext().getPatTreatmentPlanAction() != null
								&& form.getGlobalContext().getPatTreatmentPlanAction().getActivityIsNotNull() 
								&& form.getGlobalContext().getPatTreatmentPlanAction().getActiveIsNotNull() 
								&& form.getGlobalContext().getPatTreatmentPlanAction().getActive().equals(true))
							{
								form.Activity().setValue(node.getValue());
								//Manually fire the event
								onActivityTreeViewSelectionChanged(node);
								flag = true;
								break;
							}
						}
					}						
				}
				
				if ((!flag) && form.Activity().getNodes().size()>0)
				{
					//force selection
					TreeNode root =  form.Activity().getNodes().get(0);
					form.Activity().setValue(root.getValue());
					//Manually fire the event
					onActivityTreeViewSelectionChanged(root);

				}
				FieldsDependingActivity(((PatTreatPlanActionVo)values.get(form.Activity().getValue())).getActivity().getActivityId().toString());
			}
		}
		else
		{
			ActivityActionVoCollection activityActions = form.getGlobalContext().CcoSched.ActivityView.getActivityActions();

			// Adding the Activities.
			if (activityActions != null)
			{
				for (Iterator iter = activityActions.iterator(); iter.hasNext();) 
				{
					ActivityActionVo activityAction = (ActivityActionVo) iter.next();
					/*//17/02/2005 - don't display the records having the sched_flag = "N" (not schedulable)
					if(activityAction.Sched_flag.equals("N"))
					continue;*/
					
					boolean flag = true;
					for(int k=0; k<form.Activity().getNodes().size(); k++)
					{
						TreeNode node = form.Activity().getNodes().get(k);
						// WDEV-14164 - while fixing this issue, noticed that this code
						// is expecting type ActivityActionVo in form.Activity, when it is
						// now 	PatTreatPlanActionVo
						if (values.get(node.getValue()) instanceof PatTreatPlanActionVo)
						{
							PatTreatPlanActionVo tmp = (PatTreatPlanActionVo)values.get(node.getValue());
							if ((tmp.getActivityGroup().equals(activityAction.getGroup())) && (tmp.getActivity().getActivityId().equals(activityAction.getActivityId())))
							{
								flag = false;
								break;
							}
						}
						else if (values.get(node.getValue()) instanceof ActivityActionVo)
						{
							ActivityActionVo tmp = (ActivityActionVo)values.get(node.getValue());
							if ((tmp.getGroup().equals(activityAction.getGroup())) && (tmp.getActivityId().equals(activityAction.getActivityId())))
							{
								flag = false;
								break;
							}
						}
					}
					if (flag)
					{
					//	WDEV-3368 - Remove the Pretreatment action from the upper tree. 
						if(activityAction.getActionIsNotNull() && activityAction.getAction().getID_Action().equals(ACTION_ID) == false)
						{
							values.put(new Integer(j), activityAction);
						//	TODO may change BO to link activityaction to schedactivity instead of just an id
							form.Activity().getNodes().add(new Integer(j), getActivityName(activityAction.getActivityId(),activityAction.getGroup()));
							++j;
						}
					}
				}
			}
			
//			replaced old code			
//			// Adding the Activities.
//			for(int i=0; i< activityActions.DataCollection.count(); i++)
//			{
//				Sd_activity_action.Sd_activity_actionRecord activityAction = activityActions.DataCollection.get(i);
//				/*//17/02/2005 - don't display the records having the sched_flag = "N" (not schedulable)
//				if(activityAction.Sched_flag.equals("N"))
//					continue;*/
//					
//				boolean flag = true;
//				for(int k=0; k<form.Activity().getNodes().size(); k++)
//				{
//					TreeNode node = form.Activity().getNodes().get(k);
//					Sd_activity_action.Sd_activity_actionRecord tmp = (Sd_activity_action.Sd_activity_actionRecord)values.get(node.getValue());
//					if ((tmp.Grp_id.equals(activityAction.Grp_id)) && (tmp.Activ_id.equals(activityAction.Activ_id)))
//					{
//						flag = false;
//						break;
//					}
//				}
//				if (flag)
//				{
//					//WDEV-3368 - Remove the Pretreatment action from the upper tree. 
//					if(activityAction.Action_id.equals(ACTION_ID) == false)
//					{
//						values.put(new Integer(j), activityAction);
//						form.Activity().getNodes().add(new Integer(j), activityAction.Activ_nm);
//						++j;
//					}
//				}
//			}

			//17/11/2004 - Fix related with the behaviour of the TreeControl in C# where
			//after populating the tree then the first root node is selected by default
			selectFirstNode();
			//End Fix

			// Adding the Actions.
			//foreach (dto.Sd_activity_action.Sd_activity_actionClient activityAction in activityActions.Sd_activity_actionCollection)
			if (activityActions != null)
			{
				for (Iterator iter = activityActions.iterator(); iter.hasNext();) {
					ActivityActionVo activityAction = (ActivityActionVo) iter.next();
					for(int i=0; i<form.Activity().getNodes().size(); i++)
					{
						TreeNode node = form.Activity().getNodes().get(i);
						// WDEV-14164 - while fixing this issue, noticed that this code
						// is expecting type ActivityActionVo in form.Activity, when it is
						// now 	PatTreatPlanActionVo
						if (values.get(node.getValue()) instanceof PatTreatPlanActionVo)
						{
							PatTreatPlanActionVo tmp = (PatTreatPlanActionVo)values.get(node.getValue());
							if ((tmp.getActivityGroup().equals(activityAction.getGroup())) 
									&& (tmp.getActivity().getActivityId().equals(activityAction.getActivityId()))
									&& tmp.getActionIsNotNull()
									&& tmp.getAction().getAction().getSchedFlagIsNotNull()
									&& !tmp.getAction().getAction().getSchedFlag().equals("N"))
							{
								values.put(new Integer(j), activityAction);
								node.getNodes().add(new Integer(j), activityAction.getActionIsNotNull()?activityAction.getAction().getName():"");
								++j;
								break;
							}

						}
						else if (values.get(node.getValue()) instanceof ActivityActionVo)
						{
							ActivityActionVo tmp = (ActivityActionVo)values.get(node.getValue());
							//	17/02/2005 - don't add the actions not bookable -> sched_flag = "N"
							if ((tmp.getGroup().equals(activityAction.getGroup())) 
									&& (tmp.getActivityId().equals(activityAction.getActivityId()))
									&& tmp.getActionIsNotNull()
									&& tmp.getAction().getSchedFlagIsNotNull()
									&& !tmp.getAction().getSchedFlag().equals("N"))
							{
								values.put(new Integer(j), activityAction);
								node.getNodes().add(new Integer(j), activityAction.getActionIsNotNull()?activityAction.getAction().getName():"");
								++j;
								break;
							}
						}
					}
				}
				
			}
				
//			replaced old code			
//			// Adding the Actions.
//			//foreach (dto.Sd_activity_action.Sd_activity_actionClient activityAction in activityActions.Sd_activity_actionCollection)
//			for(int k=0; k<activityActions.DataCollection.count(); k++ )
//			{
//				Sd_activity_action.Sd_activity_actionRecord activityAction =  activityActions.DataCollection.get(k);
//				for(int i=0; i<form.Activity().getNodes().size(); i++)
//				{
//					TreeNode node = form.Activity().getNodes().get(i);
//					Sd_activity_action.Sd_activity_actionRecord tmp = (Sd_activity_action.Sd_activity_actionRecord)values.get(node.getValue());
//					//17/02/2005 - don't add the actions not bookable -> sched_flag = "N"
//					if ((tmp.Grp_id.equals(activityAction.Grp_id)) && (tmp.Activ_id.equals(activityAction.Activ_id)) && !tmp.Sched_flag.equals("N"))
//					{
//						values.put(new Integer(j), activityAction);
//						node.getNodes().add(new Integer(j), activityAction.Action_nm);
//						++j;
//						break;
//					}
//				}
//			}
			if (values != null && values.size() > 0)
			{
			FieldsDependingActivity(((ActivityActionVo)values.get(new Integer(0))).getActivityId().toString());
			}
			form.Activity().setValue(new Integer(0));
		}
		if (!emptyFlag)
		{
			ShowSequence(1);
			onActivityTreeViewSelectionChanged(form.Activity().getSelectedNode());
		}
		
//replaced old code
//		form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID1(form.TreatmentPlanActivities().getValue()?Boolean.FALSE:Boolean.TRUE);
//		form.Activity().clear();
//		Hashtable<Integer, Object> values = new Hashtable<Integer, Object>();
//		int j = 0;
//		form.getLocalContext().setActivityTree(values);
//
//		boolean emptyFlag = false;
//		if (form.TreatmentPlanActivities().getValue())
//		{
//			Go_ptplact tpActivityActions = form.getGlobalContext().CcoSched.ActionUpdate.getTreatmentPlanActions();
//			if (tpActivityActions.DataCollection.count() == 0 && m_NoActionsFlag)
//			{
//				HideEverything();
//				ShowMessage("Error: No actions on selected treatment plan.");
//				return false;
//			}
//			
//			for(int i=0; i<tpActivityActions.DataCollection.count(); i++)
//			{
//				Go_ptplact.Go_ptplactRecord tpActivityAction = tpActivityActions.DataCollection.get(i);
//				//ICCO675 - 23/04/2003 - it should not add
//				//an action to the tree control if the action already has
//				//appointments booked for it i.e. the appt_head_id and appt_id will contain values
//				//17/02/2005 - don't display the schedulable
//				if(tpActivityAction.Appt_id.equals("") && tpActivityAction.Appt_head_id.equals("") && isTPSchedulable(tpActivityAction))
//				{
//					//WDEV-3368 - Remove the Pretreatment action from the upper tree. 
//					if(tpActivityAction.Action_id.equals(ACTION_ID) == false)
//					{
//						values.put(new Integer(j), tpActivityAction);
//						TreeNode node = form.Activity().getNodes().add(new Integer(j), tpActivityAction.Activity_idtxt);
//						j++;
//						values.put(new Integer(j), tpActivityAction);
//						node.getNodes().add(new Integer(j), tpActivityAction.Action_idtxt);
//						j++;
//					}
//				}
//			}
//			//17/11/2004 - Fix related with the behaviour of the TreeControl in C# where
//			//after populating the tree then the first root node is selected by default
//			selectFirstNode();
//			//End fix
//			if (form.Activity().getNodes().size() == 0)
//			{
//				emptyFlag = true;
//				form.TreatmentPlanActivities().setValue(false);
//				//ICCO934 5) 09/11/04 - Fire manually the click event
//				TreatmentPlanActivitiesClick();
//			}
//			else
//			{
//				// Default 
//				boolean flag = false;
//				for(int i=0; i<form.Activity().getNodes().size(); i++)
//				{
//					TreeNode root =  form.Activity().getNodes().get(i);
//					if (flag)
//						break;
//					for(int k=0; k<root.getNodes().size();k++)
//					{
//						TreeNode node = root.getNodes().get(k);
//						if (((Go_ptplact.Go_ptplactRecord)values.get(node.getValue())).Pt_act_id.equals(form.getGlobalContext().CcoSched.TreatmentPlan.getActionID()))
//						{
//							form.Activity().setValue(node.getValue());
//							//Manually fire the event
//							onActivityTreeViewSelectionChanged(node);
//							flag = true;
//							break;
//						}
//					}
//				}
//				FieldsDependingActivity(((Go_ptplact.Go_ptplactRecord)values.get(form.Activity().getValue())).Activity_id);
//			}
//		}
//		else
//		{
//			Sd_activity_action activityActions = form.getGlobalContext().CcoSched.ActivityView.getActions();
//
//			// Adding the Activities.
//			for(int i=0; i< activityActions.DataCollection.count(); i++)
//			{
//				Sd_activity_action.Sd_activity_actionRecord activityAction = activityActions.DataCollection.get(i);
//				/*//17/02/2005 - don't display the records having the sched_flag = "N" (not schedulable)
//				if(activityAction.Sched_flag.equals("N"))
//					continue;*/
//					
//				boolean flag = true;
//				for(int k=0; k<form.Activity().getNodes().size(); k++)
//				{
//					TreeNode node = form.Activity().getNodes().get(k);
//					Sd_activity_action.Sd_activity_actionRecord tmp = (Sd_activity_action.Sd_activity_actionRecord)values.get(node.getValue());
//					if ((tmp.Grp_id.equals(activityAction.Grp_id)) && (tmp.Activ_id.equals(activityAction.Activ_id)))
//					{
//						flag = false;
//						break;
//					}
//				}
//				if (flag)
//				{
//					//WDEV-3368 - Remove the Pretreatment action from the upper tree. 
//					if(activityAction.Action_id.equals(ACTION_ID) == false)
//					{
//						values.put(new Integer(j), activityAction);
//						form.Activity().getNodes().add(new Integer(j), activityAction.Activ_nm);
//						++j;
//					}
//				}
//			}
//
//			//17/11/2004 - Fix related with the behaviour of the TreeControl in C# where
//			//after populating the tree then the first root node is selected by default
//			selectFirstNode();
//			//End Fix
//			
//			// Adding the Actions.
//			//foreach (dto.Sd_activity_action.Sd_activity_actionClient activityAction in activityActions.Sd_activity_actionCollection)
//			for(int k=0; k<activityActions.DataCollection.count(); k++ )
//			{
//				Sd_activity_action.Sd_activity_actionRecord activityAction =  activityActions.DataCollection.get(k);
//				for(int i=0; i<form.Activity().getNodes().size(); i++)
//				{
//					TreeNode node = form.Activity().getNodes().get(i);
//					Sd_activity_action.Sd_activity_actionRecord tmp = (Sd_activity_action.Sd_activity_actionRecord)values.get(node.getValue());
//					//17/02/2005 - don't add the actions not bookable -> sched_flag = "N"
//					if ((tmp.Grp_id.equals(activityAction.Grp_id)) && (tmp.Activ_id.equals(activityAction.Activ_id)) && !tmp.Sched_flag.equals("N"))
//					{
//						values.put(new Integer(j), activityAction);
//						node.getNodes().add(new Integer(j), activityAction.Action_nm);
//						++j;
//						break;
//					}
//				}
//			}
//			FieldsDependingActivity(((Sd_activity_action.Sd_activity_actionRecord)values.get(new Integer(0))).Activ_id);
//			form.Activity().setValue(new Integer(0));
//		}
//		if (!emptyFlag)
//		{
//			ShowSequence(1);
//			onActivityTreeViewSelectionChanged(form.Activity().getSelectedNode());
//		}
		return true;
	}

	private String getActivityName(Integer activityId, ActivityGroupVo group) 
	{
		if (form.getLocalContext().getschedActivitiesIsNotNull())
		{
			for (Iterator iter = form.getLocalContext().getschedActivities().iterator(); iter.hasNext();) 
			{
				SchedActivityVo element = (SchedActivityVo) iter.next();
				if (element.getGroup().equals(group) && element.getActivityId().equals(activityId))
					return element.getName();
			}
		}
			
		return "";
	}

	private void ShowSequence(int type)
	{
		if (form.getLocalContext().getActivityTree() == null)
			return;

		for(int i=0; i<form.Activity().getNodes().size(); i++)
			if(form.Activity().getNodes().get(i).getValue().equals(form.Activity().getValue()))
				return;


		String activityID = new String();
		Hashtable values = form.getLocalContext().getActivityTree();
		if (form.TreatmentPlanActivities().getValue() && form.Activity().getValue() != null)
		{
			PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(form.Activity().getValue());
			//activityID = tpActionSelected.getActionIsNotNull()?tpActionSelected.getAction().getActionIsNotNull()?tpActionSelected.getAction().getAction().getID_Action().toString():"":"";
			activityID = tpActionSelected.getActivity().getActivityId().toString();  // WDEV-14148
		}
		else if (values != null && values.size() > 0)
		{
			ActivityActionVo actionSelected = (ActivityActionVo)values.get(form.Activity().getValue());
			activityID = actionSelected.getActivityId().toString();
		}
		if (activityID.equals("-202") || activityID.equals("-207"))
		{
			boolean b = form.Resource().getValue() != null;
			form.GenerateDates().setEnabled(b);
			form.RefreshAvailability().setEnabled(b);
			form.Reset().setEnabled(b);

			form.AvailabilityDetails().setEnabled(true);
			if (type != 0)
			{
				form.Sequence().setVisible(true);
				form.Sequence().setValue(true);
				onSequenceValueChanged();
				form.Mon().setValue(true);
				form.Tue().setValue(true);
				form.Wed().setValue(true);
				form.Thu().setValue(true);
				form.Fri().setValue(true);
				form.Sat().setValue(false);
				form.Sun().setValue(false);
			}
		}
		else
		{
			if (form.NumberOfAppointments().getValue().intValue() <= 0)	//WDEV-18813
			{	
				ShowMessage("Number of appointments must be greater than 0.");
				form.NumberOfAppointments().setFocus();
			}	
			boolean b = (form.NumberOfAppointments().getValue().intValue() > 1 && form.ListOwner().getValue() != null);
			form.GenerateDates().setEnabled(b);
			form.RefreshAvailability().setEnabled(true);
			form.Reset().setEnabled(true);
			form.AvailabilityDetails().setEnabled(form.NumberOfAppointments().getValue().intValue() > 1);
			if (type != 0)
			{
				if (form.NumberOfAppointments().getValue().intValue() > 1)
				{
					form.Sequence().setVisible(true);
					form.Sequence().setValue(false);
					onSequenceValueChanged();
				}
				else
				{
					form.Sequence().setVisible(false);
					form.Sequence().setValue(false);
					onSequenceValueChanged();
					form.Mon().setValue(false);
					form.Tue().setValue(false);
					form.Wed().setValue(false);
					form.Thu().setValue(false);
					form.Fri().setValue(false);
					form.Sat().setValue(false);
					form.Sun().setValue(false);
				}
			}
		}
	}




	private void FieldsDependingActivity(String string)
	{
		if (string.equals("-202") || string.equals("-207")) // "External Beam"
		{
			form.LabelNumberOfAppointemnts().setVisible(false);
			form.NumberOfAppointments().setVisible(false);

			form.LabelModality().setVisible(true);
			form.Modality().setVisible(true);
			form.LabelEnergy().setVisible(true);
			form.Energy().setVisible(true);
			form.LabelUnit().setVisible(true);
			form.EnergyUnit().setVisible(true);

			form.LabelDose().setVisible(true);
			form.Dose().setVisible(true);
			form.LabelFractions().setVisible(true);
			form.Fractions().setVisible(true);
			form.LabelDuration().setVisible(true);
			form.Duration().setVisible(true);

			form.Hyperfractination().setVisible(true);
			form.Hyperfractination().setValue(false);
			OnHyperfractination();
		}
		else
		{
			form.LabelNumberOfAppointemnts().setVisible(true);
			form.NumberOfAppointments().setVisible(true);

			form.LabelModality().setVisible(false);
			form.Modality().setVisible(false);
			form.LabelEnergy().setVisible(false);
			form.Energy().setVisible(false);
			form.LabelUnit().setVisible(false);
			form.EnergyUnit().setVisible(false);

			form.LabelDose().setVisible(false);
			form.Dose().setVisible(false);
			form.LabelFractions().setVisible(false);
			form.Fractions().setVisible(false);
			form.LabelDuration().setVisible(false);
			form.Duration().setVisible(false);

			form.Hyperfractination().setVisible(false);
			form.LabelLevel().setVisible(false);
			form.Level().setVisible(false);
			form.LabelInstances().setVisible(false);
			form.Instances().setVisible(false);
		}
	}
	
	protected void OnNumberOfAppointments() 
	{
		if (form.NumberOfAppointments().getValue() == null) //WDEV-14486
		{
			ShowMessage("Number of appointments must be greater than 0.");
			form.NumberOfAppointments().setValue(0);
		}
		else if (form.NumberOfAppointments().getValue().intValue() <= 0) //WDEV-18813
		{
			ShowMessage("Number of appointments must be greater than 0.");
			form.NumberOfAppointments().setFocus();
		}

		boolean b = (form.NumberOfAppointments().getValue().intValue() > 1 && form.ListOwner().getValue() != null);
		form.GenerateDates().setEnabled(b);
		form.Reset().setEnabled(b);
		form.RefreshAvailability().setEnabled(b);
		form.AvailabilityDetails().setEnabled(form.NumberOfAppointments().getValue().intValue() > 1);
		if (form.NumberOfAppointments().getValue().intValue() > 1)
		{
			form.Sequence().setVisible(true);
			form.Sequence().setValue(false);
			onSequenceValueChanged();
		}
		else
		{
			form.Sequence().setVisible(false);
			form.Sequence().setValue(false);
			onSequenceValueChanged();
			form.Mon().setValue(false);
			form.Tue().setValue(false);
			form.Wed().setValue(false);
			form.Thu().setValue(false);
			form.Fri().setValue(false);
			form.Sat().setValue(false);
			form.Sun().setValue(false);
		}
	}
	
	private void GetAlreadyBookedSlots(Date date)
	{			
		ArrayList alreadyBooked = new ArrayList();
		form.getLocalContext().setAlreadyBooked(alreadyBooked);
		Hashtable sessionList = getSession(date);
		if(sessionList == null)
			sessionList = form.getGlobalContext().CcoSched.Booking.getSessionList();
		String[] sessions = StringUtils.splitString(((String)sessionList.get(date.toString(DateFormat.ISO))),",");
		String[] session = StringUtils.splitString(sessions[form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue()],"+"); // sessions[Context.ContextBooking.SessionIndex] is null ??????????
		if (session.length != 2)
		{
			InternalError("Invalid session / session detail format.");
			return;
		}

		form.getGlobalContext().CcoSched.Booking.setSessionId(session[0]);
		form.getGlobalContext().CcoSched.Booking.setSessionDetailsId(session[1]); 

		Sd_sess_appts sessionAppointments = (Sd_sess_appts)domain.getDTOInstance(Sd_sess_appts.class);
		sessionAppointments.Filter.clear();
		sessionAppointments.Filter.Prfile_sess_id = session[0];
		sessionAppointments.Filter.Prfiled_sess_id = session[1];
		sessionAppointments.Filter.Userrights = new Integer(engine.getLoggedInUser().getUserId()).toString();
		
		
		if (form.ListOwner().getValue() != null)
			sessionAppointments.Filter.Loid = form.ListOwner().getValue().Staff_no;
		Result result = sessionAppointments.get();
		if (result != null)
		{
			ShowMessage(result.getMessage());
			return;
		}
		if (sessionAppointments.DataCollection.count()  == 0)
		{
			InternalError("No data return for session.");
			return;
		}

		Sd_sess_appts.Sd_sess_apptsRecord sessionAppointment = sessionAppointments.DataCollection.get(0);
		
		Time startTime = null;
		try{ startTime = new Time(sessionAppointment.Stm, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
		if (startTime == null)
		{
			InternalError("Session start time not returned.");
			return;
		}
		form.getGlobalContext().CcoSched.Booking.setStartTime(startTime);
//
		Time endTime = null;
		try{ endTime = new Time(sessionAppointment.Etm, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
		if (endTime == null)
		{
			InternalError("Session end time not returned.");
			return;
		}
//
//		#region 1. find booked periods
		ArrayList bookedPeriods = new ArrayList();
		for (int k = 0; k < sessionAppointment.Seqno3Collection.count(); k++) 
		{
			Sd_sess_appts.Sd_sess_apptsSeqno3Record r = sessionAppointment.Seqno3Collection.get(k);
			if (!r.Appt_stat.equals("-2190") && !r.Appt_stat.equals("-2193") && !r.Appt_stat.equals("-2197")) //Cancelled
			{
				Time startTimeBooked = null;
				try{ startTimeBooked = new Time(r.Appt_stm, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
				if (startTimeBooked == null)
				{
					InternalError("Appointment start time not returned.");
					return;
				}
				
				Time endTimeBooked = null; 
				try{endTimeBooked = new Time(r.Appt_etm, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
				if (endTimeBooked == null)
				{
					InternalError("Appointment end time not returned.");
					return;
				}
				
				boolean self = r.Pkey.equals(form.getGlobalContext().Core.getPatientShort().getPkey().getValue());
				ArrayList intersectedPeriods = new ArrayList();
				for (int j = 0; j < bookedPeriods.size(); j++) 
				{
					Object[] period = (Object[])bookedPeriods.get(j);
					if (CompareTimes(startTimeBooked, (Time)period[1]) < 0 && CompareTimes(endTimeBooked, (Time)period[0]) > 0)
						intersectedPeriods.add(period);
				}

				Time min = startTimeBooked;
				Time max = endTimeBooked;
				for (int j = 0; j < intersectedPeriods.size(); j++) 
				{
					Object[] period = (Object[]) intersectedPeriods.get(j);
					if (CompareTimes((Time)period[0], min) < 0)
						min = (Time)period[0];
					if (CompareTimes((Time)period[1], max) > 0)
						max = (Time)period[1];
				}
				int i = 1;
				for (int j = 0; j < intersectedPeriods.size(); j++) 
				{
					Object[] o = (Object[])intersectedPeriods.get(j);
					i += ((Integer)o[2]).intValue();
					self |= ((Boolean)o[3]).booleanValue();
					bookedPeriods.remove(o);
				}

				bookedPeriods.add(new Object[]{min, max, new Integer(i), Boolean.valueOf(self)});
			}
		}
//		#endregion
//
//		#region 2. find exluded periods
		ArrayList excludedPeriods = new ArrayList();
		for (int i = 0; i < sessionAppointment.Seqno2Collection.count(); i++) 
		//foreach (dto.Sd_sess_apptsDTO.Seqno2Client r in sessionAppointment.Seqno2Collection)
		{
			Sd_sess_appts.Sd_sess_apptsSeqno2Record r =  sessionAppointment.Seqno2Collection.get(i);
			Time startTimeExclusion = null;
			try{startTimeExclusion = new Time(r.Stm2, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
			if (startTimeExclusion == null)
			{
				InternalError("failed to get exclusion time record.");
				return;
			}

			Time endTimeExclusion = null;
			try{endTimeExclusion = new Time(r.Etm2, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
			if (endTimeExclusion == null)
			{
				InternalError("failed to get exclusion time record.");
				return;
			}

			ArrayList intersectedPeriods = new ArrayList();
			for (int j = 0; j < excludedPeriods.size(); j++) 
			{
				Time[] period = (Time[])excludedPeriods.get(j);
				if (CompareTimes(startTimeExclusion, period[1]) <= 0 && CompareTimes(endTimeExclusion, period[0]) >= 0)
					intersectedPeriods.add(period);	
			}

			Time min = startTimeExclusion;
			Time max = endTimeExclusion;
			for (int j = 0; j < intersectedPeriods.size(); j++)
			{
				Time[] period = (Time[]) intersectedPeriods.get(j);
				if (CompareTimes(period[0], min) < 0)
					min = period[0];
				if (CompareTimes(period[1], max) > 0)
					max = period[1];
			}
			for (int j = 0; j < intersectedPeriods.size(); j++)
				excludedPeriods.remove(intersectedPeriods.get(j));

			excludedPeriods.add(new Time[]{min, max});
		}
//		#endregion
//
//		#region 3. find purely exluded periods
		ArrayList tmpArr = new ArrayList();
		for(int i=0; i<bookedPeriods.size(); i++)
		{
			Object[] bookedPeriod = (Object[])bookedPeriods.get(i);
			Time s = (Time)bookedPeriod[0];
			Time e = (Time)bookedPeriod[1];

			tmpArr.clear();
			for(int j=0; j<excludedPeriods.size(); j++)
				tmpArr.add(excludedPeriods.get(j));

			//http://jira/browse/SITE-370 SN comment in .clear() as loop is causing out of memory error
			if (excludedPeriods!= null && excludedPeriods.size()>0 && excludedPeriods.get(0) == null)
				excludedPeriods.clear();

			for(int j=0; j<tmpArr.size(); j++)
			{
				Time[] excludedPeriod = (Time[])tmpArr.get(j);
				// exclusion times typically start on the hour 
				if (CompareTimes(s, excludedPeriod[1]) >= 0 || CompareTimes(e, excludedPeriod[0]) <= 0)
					excludedPeriods.add(excludedPeriod);
				else if (CompareTimes(s,excludedPeriod[0]) >= 0 && CompareTimes(s, excludedPeriod[1]) <= 0 && CompareTimes(e, excludedPeriod[1]) > 0)
					excludedPeriods.add(new Time[]{excludedPeriod[1], e});
				else if (CompareTimes(s, excludedPeriod[0]) < 0 && CompareTimes(e, excludedPeriod[0]) >= 0 && CompareTimes(e, excludedPeriod[1]) <= 0)
					excludedPeriods.add(new Time[]{s, excludedPeriod[0]});
				else if (CompareTimes(s, excludedPeriod[0]) >= 0 && CompareTimes(s, excludedPeriod[1]) <= 0 && CompareTimes(e, excludedPeriod[0]) > 0 && CompareTimes(e, excludedPeriod[1]) < 0)
				{
					excludedPeriods.add(new Time[]{excludedPeriod[0], s});
					excludedPeriods.add(new Time[]{e, excludedPeriod[1]});
				}
			}			
		}
//		#endregion
//
//		#region 5. create slots
		//12/01/2005 - Check to see if there is different time for a date which actionID changed.
		int timeRequired = GetSlotTimeRequired(date);
		timeRequired = timeRequired !=-1 && timeRequired != 0?timeRequired:form.getGlobalContext().CcoSched.Booking.getTimeRequired().intValue();
		Time slotStartTime = new Time(startTime.getHour(),startTime.getMinute());
		
		while (true)
		{
			Time slotEndTime = new Time(slotStartTime.getHour(), slotStartTime.getMinute());
			slotEndTime.addMinutes(timeRequired);

			if (CompareTimes(slotEndTime,endTime) > 0)
				break;
			
			boolean flag = true;
			for(int i=0; i<bookedPeriods.size(); i++)
			{
				Object[] bookedPeriod = (Object[]) bookedPeriods.get(i);
				//if (CompareTimes(slotStartTime, (Time)bookedPeriod[1]) < 0 && CompareTimes(slotEndTime, (Time)bookedPeriod[0]) > 0)
				if (slotStartTime.isLessThan((Time)bookedPeriod[1]) && slotEndTime.isGreaterThan((Time)bookedPeriod[0]))
				{						
					slotStartTime = (Time)bookedPeriod[1];
					flag = false;
					if (((Boolean)bookedPeriod[3]).booleanValue())
						alreadyBooked.add(slotStartTime.toString(TimeFormat.DEFAULT));//ToString("HH:mm"));
					break;
				}
			}
			if (flag)
			{
				for(int i=0; i<excludedPeriods.size(); i++)
				{
					Time[] excludedPeriod = (Time[]) excludedPeriods.get(i);
					if (CompareTimes(slotStartTime, excludedPeriod[1]) < 0 && CompareTimes(slotEndTime, excludedPeriod[0]) > 0)
					{							
						slotStartTime = excludedPeriod[1];
						flag = false;
						break;
					}
				}
				if (flag)
					slotStartTime = new Time(slotEndTime.getHour(), slotEndTime.getMinute());					
			}
		}
//		#endregion
		form.getLocalContext().setAlreadyBooked(alreadyBooked);
	}
	
	protected void onFormClosing(ims.framework.delegates.CancelArgs args)
	{
		form.getGlobalContext().CcoSched.TreatmentPlan.setIgnoreActionID1(null);
		
		//Clear the context used in dialogs
		if(form.getGlobalContext().CcoSched.Booking.getTooltipArrayList() != null)
			form.getGlobalContext().CcoSched.Booking.getTooltipArrayList().clear();
		
		//19/11/2004 - Clear the context variable as it's marked as persistant 
		if(form.getGlobalContext().CcoSched.Booking.getTimeRequiredIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setTimeRequired(null);
		
		//19/11/2004 - Clear the context marked as persistant
		if(form.getGlobalContext().CcoSched.Booking.getStartTimeIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setStartTime(null);
		
		//19/11/2004 - Clear the context marked as persistant
		if(form.getGlobalContext().CcoSched.Booking.getStartDateIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setStartDate(null);
		
		//19/11/2004 - Clear the context marked as persistant
		if(form.getGlobalContext().CcoSched.Booking.getSessionListIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setSessionList(null);
		
		//19/11/2004 - Clear the context marked as persistant
		if(form.getGlobalContext().CcoSched.Booking.getSessionIndexIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setSessionIndex(null);
		
		//14/11/2004 - Clear the context marked as persistant
		if(form.getGlobalContext().CcoSched.Booking.getSelectedSessionsIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setSelectedSessions(null);
		
		//14/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getSelectedDateIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setSelectedDate(null);
		
		//23/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsListIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setDateSessionSlotsList(null);
		
		//23/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getDefaultTimeIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setDefaultTime(null);
		
		//23/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getEndDateIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setEndDate(null);
		
		//23/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getListOwnerIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setListOwner(null);
		
		//23/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getModalityArrayListIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setModalityArrayList(null);
		
		//23/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getResourceSelectedIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setResourceSelected(null);
		
		//23/11/2004 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getSelectedActionsIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setSelectedActions(null);
		
		//05/01/2005 - Clear persistant context
		if(form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDatesIsNotNull())
			form.getGlobalContext().CcoSched.Booking.setCalendarSelectedDates(null);
	}
	
	protected void OnPatientDiary() 
	{
		engine.open(form.getForms().CcoSched.PatientDiaryDlg);			
	}
	
	private void SetDefaultAppointmentTime(ArrayList list)
	{
		/*
		Form.DefaultAppointmentTime.Value = "";
		for (int i = 0; i < list.Count; i++)
		{
			if (Form.DefaultAppointmentTime.Value.Length > 0)
				Form.DefaultAppointmentTime.Value += " ";
			Form.DefaultAppointmentTime.Value += (string)list[i];
		}
		*/
		
		/*form.DefaultAppointmentTime().setValue("");
		for (int i = 0; i < list.size(); i++)
		{
			//ICCO934 3) the control returns null now, not empty strings 
			if (form.DefaultAppointmentTime().getValue() != null && form.DefaultAppointmentTime().getValue().length() > 0)
				form.DefaultAppointmentTime().setValue(form.DefaultAppointmentTime().getValue() != null?form.DefaultAppointmentTime().getValue():"" + " ");
			form.DefaultAppointmentTime().setValue(form.DefaultAppointmentTime().getValue() != null?form.DefaultAppointmentTime().getValue():"" + (String)list.get(i));
		}*/
	}
	
	//old method OnActivitySelected
	protected void onActivityTreeViewSelectionChanged(ims.framework.controls.TreeNode selectedNode)
	{
		bChangeResouces = false;

		form.Resource().clear();

		if (m_DoClear)
		{
			form.Calendar().clearChecks();
			form.Calendar().clearConflicts();
			form.Calendar().clearDisabledDaysOfWeek();
			form.Calendar().clearNoSessionDates();
			form.Calendar().clearPercentages();
			form.Calendar().setSelectedDay(null);
			
			Date dt = new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), 1);
			//for (int i = 1; i <= DateTime.DaysInMonth(form.Calendar().CurrentMonth.Year, form.Calendar().CurrentMonth.Month); ++i)
			for (int i = 1; i <= dt.getNumberOfDaysInTheMonth(); ++i)
				form.Calendar().addNoSessionDates(new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), i));
		}
		form.PreviousDate().setEnabled(false);
		form.NextDate().setEnabled(false);
		form.DateSelected().setValue("");
		
		form.htm1().setHTML("");//WDEV-14396
		form.NumResSelected().setValue("");
		form.LocationSelected().setValue("");
		form.Action().setValue("");
		form.NumberOfBookings().setValue("");
		form.NumberOfFirstAppointments().setValue("");
		form.SlotsGrid().getRows().clear();
		form.RefreshAvailability().setEnabled(false);
		form.Reset().setEnabled(false);
		/*form.PatientCategory().setValue("");
		form.Transport().setValue("");*/

		//Context.ClearSelectedDate();
		form.getGlobalContext().CcoSched.Booking.setSelectedDate(null);

		boolean tp = form.TreatmentPlanActivities().getValue();
		boolean flag = true;
		
		for(int i=0; i<form.Activity().getNodes().size(); i++)
			if(form.Activity().getNodes().get(i).getValue().equals(selectedNode.getValue())) 
			{
				flag = false;
				break;
			}

		form.ListOwner().setVisible(flag);
		form.LabelListOwner().setVisible(flag);
		form.Resource().setVisible(flag);
		form.LabelResource().setVisible(flag);

		if (!flag)
		{
			FieldsDependingActivity("");
			form.LabelNumberOfAppointemnts().setVisible(false);
			form.NumberOfAppointments().setVisible(false);
			ShowSequence(1);
		}
		else
		{
			form.Activity().collapseAll();

			String groupID = new String();
			String activityID = new String(); 
			String actionID = new String();
			Hashtable values = form.getLocalContext().getActivityTree();

			//Context.ContextBooking.IntervalRequired = 0;
			form.getGlobalContext().CcoSched.Booking.setIntervalRequired(new Integer(0));
			if(tp && values != null && selectedNode != null)
			{
				PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(selectedNode.getValue());
				form.getGlobalContext().setPatTreatmentPlanAction(tpActionSelected);
				form.getGlobalContext().CcoSched.Booking.setActivityActionSelected(tpActionSelected);
				groupID = tpActionSelected.getActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroup().toString():"";
				activityID = tpActionSelected.getActivityIsNotNull()?tpActionSelected.getActivity().getActivityIdIsNotNull()?tpActionSelected.getActivity().getActivityId().toString():"":"";
				actionID = tpActionSelected.getActionIsNotNull()?tpActionSelected.getAction().getActionIsNotNull()?tpActionSelected.getAction().getAction().getID_ActionIsNotNull()?tpActionSelected.getAction().getAction().getID_Action().toString():"":"":"";
				//#region Fix 25 June 2003
				form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(tpActionSelected.getActionIsNotNull()?tpActionSelected.getAction().getActionIsNotNull()?tpActionSelected.getAction().getAction().getID_Action().toString():"":"");
				//#endregion
				// Category
				//form.PatientCategory().setValue(tpActionSelected.Txcattypetxt);
				// Transport
				//form.Transport().setValue(tpActionSelected.Transreq_txt);

				// Interval Required
				ActivityActionVoCollection activityActions = form.getGlobalContext().CcoSched.ActivityView.getActivityActions();
				
				for (Iterator iter = activityActions.iterator(); iter.hasNext();) {
					ActivityActionVo activityAction = (ActivityActionVo) iter.next();
					if (activityAction.getGroup().equals(tpActionSelected.getActivityGroup()) 
							&& activityAction.getActivityId().equals(tpActionSelected.getActivity().getActivityId())
							&& activityAction.getActionIsNotNull()
							&& tpActionSelected.getAction().getAction().equals(activityAction.getAction())) //WDEV-14349
					{
						Integer i = activityAction.getActionIsNotNull()?activityAction.getAction().getIntervalRequired():null;
						form.getGlobalContext().CcoSched.Booking.setIntervalRequired( i==null ? new Integer(0) : i);
						break;
					}					
				}

//				replaced
//				for(int k=0;k<activityActions.DataCollection.count(); k++)
//				{
//					Sd_activity_action.Sd_activity_actionRecord activityAction = activityActions.DataCollection.get(k); 
//					if (activityAction.Grp_id.equals(tpActionSelected.Activitygrp) && activityAction.Activ_id.equals(tpActionSelected.Activity_id) && activityAction.Action_id.equals(tpActionSelected.Action_id))
//						{
//							Integer i = GetInteger(activityAction.Int_req);
//							form.getGlobalContext().CcoSched.Booking.setIntervalRequired( i==null ? new Integer(0) : i);
//							break;
//						}
//				}
			}
			else if (values != null && values.size() > 0)
			{
				//#region Fix 25 June 2003
				form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);
				//#endregion
				ActivityActionVo actionSelected = (ActivityActionVo)values.get(selectedNode.getValue());				
				form.getGlobalContext().CcoSched.Booking.setActivityActionSelected(actionSelected);
				groupID = actionSelected.getGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroup().toString():"";
				activityID = actionSelected.getActivityIdIsNotNull()?actionSelected.getActivityId().toString():"";
				actionID = actionSelected.getActionIsNotNull()?actionSelected.getAction().getID_ActionIsNotNull()?actionSelected.getAction().getID_Action().toString():"":"";

				// Interval Required
				Integer i = actionSelected.getActionIsNotNull()?actionSelected.getAction().getIntervalRequired():null;
				form.getGlobalContext().CcoSched.Booking.setIntervalRequired( i==null ? new Integer(0) : i);
			}	
		
			FieldsDependingActivity(activityID);

			// HCP
			form.ListOwner().clear();
			Sd_activstaff activstaff = (Sd_activstaff)domain.getDTOInstance(Sd_activstaff.class);
			activstaff.Filter.clear();
			activstaff.Filter.Grp_id = groupID;
			activstaff.Filter.Activ_id = activityID;
			activstaff.Filter.Act_indstf = "Y";
			activstaff.Filter.Act_ind	 = "Y";
			Result result = activstaff.list();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return;
			}
			
			for(int k=0; k<activstaff.DataCollection.count(); k++)
				form.ListOwner().newRow(activstaff.DataCollection.get(k), activstaff.DataCollection.get(k).Staff_name);

			//Context.ContextBooking.ClearListOwner();
			form.getGlobalContext().CcoSched.Booking.setListOwner(null);

			if (tp) // If there is treatment plan then there is a default.
			{
				if (values != null && selectedNode != null)
				{
				PatTreatPlanActionVo vo = (PatTreatPlanActionVo)values.get(selectedNode.getValue());
				if (vo.getTreatingConsultantIsNotNull() && vo.getTreatingConsultant().getMosIsNotNull())
				{
					String s = vo.getTreatingConsultant().getMos().getID_MemberOfStaffIsNotNull()?vo.getTreatingConsultant().getMos().getID_MemberOfStaff().toString():"";//WDEV-15156
					//String s = vo.getTreatingConsultant().getID_HcpIsNotNull()?vo.getTreatingConsultant().getID_Hcp().toString():"";
					//String s = ((Go_ptplact.Go_ptplactRecord)values.get(selectedNode.getValue())).Act_consult;

					for(int k=0; k<form.ListOwner().getValues().size(); k++)
					{	
						Sd_activstaff.Sd_activstaffRecord tmp = (Sd_activstaff.Sd_activstaffRecord)form.ListOwner().getValues().get(k);
						if (tmp.Staff_no.equals(s))
						{
							form.ListOwner().setValue(tmp);
							form.getGlobalContext().CcoSched.Booking.setListOwner(tmp);
							break;
						}
					}
				}
					
//replaced code					
//					for(int k=0; k<form.ListOwner().getValues().size(); k++)
//					{	
//						Sd_activstaff.Sd_activstaffRecord tmp = (Sd_activstaff.Sd_activstaffRecord)form.ListOwner().getValues().get(k);
//						if (tmp.Staff_no.equals(s))
//						{
//							form.ListOwner().setValue(tmp);
//							form.getGlobalContext().CcoSched.Booking.setListOwner(tmp);
//							break;
//						}
//					}
				}
			}
		
			// Modality, Energy, Unit, Dose, Fractions, Duration.
			if (activityID.equals("-202") || activityID.equals("-207"))
			{
				//form.Modality().clear();
				//form.EnergyUnit().clear();
				form.Modality().setEnabled(!tp);
				form.Energy().setEnabled(!tp);
				form.EnergyUnit().setEnabled(!tp);
				form.Dose().setEnabled(!tp);
				form.Fractions().setEnabled(!tp);
				form.Duration().setEnabled(!tp);
				if (tp)
				{
					// Modality
					PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(selectedNode.getValue());
					if (tpActionSelected.getModalityIsNotNull())
					{
						form.Modality().newRow(tpActionSelected.getModality(), tpActionSelected.getModalityIsNotNull()?tpActionSelected.getModality().getText():"");
						form.Modality().setValue(tpActionSelected.getModality());
						//Context.ContextBooking.ModalityId = tpActionSelected.attModality_id; // ???????????????????
						form.getLocalContext().setModalityId(tpActionSelected.getModalityIsNotNull()?tpActionSelected.getModality().toString():"");
					}
	
					// Unit
					//WDEV-14797
					if (tpActionSelected.getUnit()!=null)
					{
						form.EnergyUnit().newRow(tpActionSelected.getUnit(), tpActionSelected.getUnitIsNotNull()?tpActionSelected.getUnit().getText():"");
						form.EnergyUnit().setValue(tpActionSelected.getUnit());
					}
				
					// Dose
					Integer si = tpActionSelected.getTl_dose();
					form.Dose().setValue(si ==null ? new Integer(0) : si);
					if (si == null)
						ShowMessage("Dose is empty");
		
					// Fractions
					si = tpActionSelected.getTl_fractions();
					form.Fractions().setValue(si ==null ? new Integer(0) : si);
					if (si == null)
						ShowMessage("Fractions is empty");	
					// Duration
					si = tpActionSelected.getTl_duration();
					form.Duration().setValue(si ==null ? new Integer(0) : si);
					if (si == null)
						ShowMessage("Duration is empty");					
					// Energy
					Float sd = GetFloat(tpActionSelected.getModalEnergy());
					bChangeResouces = true;
					form.Energy().setValue( sd == null? new Float(0) : sd); // fire ChangeResources
					//Fire manually the event
					onEnergyValueChanged();
					if (sd == null)
						ShowMessage("Energy is empty");	
					
//replaced code					
//					// Modality
//					Go_ptplact.Go_ptplactRecord tpActionSelected = (Go_ptplact.Go_ptplactRecord)values.get(selectedNode.getValue());
//					form.Modality().newRow(tpActionSelected.Modality_id, tpActionSelected.Modality_idtxt);
//					form.Modality().setValue(tpActionSelected.Modality_id);
//					//Context.ContextBooking.ModalityId = tpActionSelected.attModality_id; // ???????????????????
//					form.getLocalContext().setModalityId(tpActionSelected.Modality_id);
//					// Unit
//					form.EnergyUnit().newRow(tpActionSelected.Modalty_unit_id, tpActionSelected.Modality_unit_idtxt);
//					form.EnergyUnit().setValue(tpActionSelected.Modalty_unit_id);
//					// Dose
//					Integer si = GetInteger(tpActionSelected.Tl_dose);
//					form.Dose().setValue(si ==null ? new Integer(0) : si);
//					if (si == null)
//						ShowMessage("Dose is empty");
//		
//					// Fractions
//					si = GetInteger(tpActionSelected.Tl_fractions);
//					form.Fractions().setValue(si ==null ? new Integer(0) : si);
//					if (si == null)
//						ShowMessage("Fractions is empty");	
//					// Duration
//					si = GetInteger(tpActionSelected.Tl_dur);
//					form.Duration().setValue(si ==null ? new Integer(0) : si);
//					if (si == null)
//						ShowMessage("Duration is empty");					
//					// Energy
//					Float sd = GetFloat(tpActionSelected.Modality_enrgy);
//					bChangeResouces = true;
//					form.Energy().setValue( sd == null? new Float(0) : sd); // fire ChangeResources
//					//Fire manually the event
//					onEnergyValueChanged();
//					if (sd == null)
//						ShowMessage("Energy is empty");	
				}
				else
				{
				
					//TODO may have to fire events here
					
//Replaced with bound lookups to controls					
//					Lkup lookup = (Lkup)domain.getDTOInstance(Lkup.class);
//					lookup.Filter.clear();
//					lookup.Filter.Lkup_typ = "3422"; 
//					result = lookup.list();
//					if (result != null)
//					{
//						ShowMessage(result.getMessage());
//						return;
//					}
//					for (int i = 0; i < lookup.DataCollection.count(); ++i)						
//						if (lookup.DataCollection.get(i).Lkup_stat.equals("Y") || lookup.DataCollection.get(i).Lkup_stat.equals("1"))
//							form.Modality().newRow(lookup.DataCollection.get(i).Lkup_id, lookup.DataCollection.get(i).Lkup_nm);
//
//					if (lookup.DataCollection.count() > 0)
//					{
//						String prevValue = form.Modality().getValue();
//						form.Modality().setValue(lookup.DataCollection.get(0).Lkup_id);  // fire ChangeResources
//						//We fire manually the event if teh value has changed
//						if(prevValue != null && !prevValue.equals(form.Modality().getValue()))
//							onModalityValueChanged();
//	
//						form.getLocalContext().setModalityId(lookup.DataCollection.get(0).Lkup_id); // ???????????????????
//					}
//
//					lookup.Filter.clear();
//					lookup.Filter.Lkup_typ = "3424"; 
//					result = lookup.list();
//					if (result != null)
//					{
//						ShowMessage(result.getMessage());
//						return;
//					}
//					for (int i = 0; i < lookup.DataCollection.count(); ++i)
//						if (lookup.DataCollection.get(i).Lkup_stat.equals("Y") || lookup.DataCollection.get(i).Lkup_stat.equals("1"))
//							form.EnergyUnit().newRow(lookup.DataCollection.get(i).Lkup_id, lookup.DataCollection.get(i).Lkup_nm);
//
//					if (lookup.DataCollection.count() > 0)
//					{
//						form.EnergyUnit().setValue(lookup.DataCollection.get(0).Lkup_id); // fire ChangeResources
//						//Manually firing the event
//						onEnergyUnitValueChanged();
//						
//					}		
					form.Dose().setValue(null);
					form.Fractions().setValue(new Integer(1));
					form.Duration().setValue(new Integer(1));
					bChangeResouces = true;
					form.Energy().setValue(null);// fire ChangeResources
					//Fire manually
					onEnergyValueChanged();
				}
			}
			else
			{
				form.NumberOfAppointments().setValue(new Integer(1));
			}
			onSequenceValueChanged();

			// Duration of Slots
			Sd_activity_action activityactions = form.getGlobalContext().CcoSched.ActivityView.getActions();
			for (int i = 0; i < activityactions.DataCollection.count(); i++)
			{
				Sd_activity_action.Sd_activity_actionRecord tmp = activityactions.DataCollection.get(i);
				if (tmp.Grp_id.equals(groupID) && tmp.Activ_id.equals(activityID) && tmp.Action_id.equals(actionID)
					&& !tmp.Sched_flag.equals("N"))
				{
					Integer si = GetInteger(tmp.Tim_req);
					if (si == null)
					{
						InternalError("Time required for the action is null.");
						return;
					}
					if (si.intValue() == 0)
					{
						InternalError("Time required for the action equals to 0.");
						return;
					}
					
					form.getGlobalContext().CcoSched.Booking.setTimeRequired(si);
					break;
				}
			}

			ShowSequence(1);
			onResetClick();
			GetAvailability();
		}
	}

	private void GetAvailability()
	{
		ShowSequence(0);

		String groupID = "";
		String activityID = "";
		String actionID = "";	
		Hashtable values = form.getLocalContext().getActivityTree();
		if (form.TreatmentPlanActivities().getValue() && values != null && form.Activity().getValue() != null)
		{
			if (values.get(form.Activity().getValue()) != null)
			{
				PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(form.Activity().getValue());
				groupID = tpActionSelected.getActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroup().toString():"":"";
				activityID = tpActionSelected.getActivityIsNotNull()?tpActionSelected.getActivity().getActivityIdIsNotNull()?tpActionSelected.getActivity().getActivityIdIsNotNull()?tpActionSelected.getActivity().getActivityId().toString():"":"":"";
				actionID = tpActionSelected.getActionIsNotNull()?tpActionSelected.getAction().getActionIsNotNull()?tpActionSelected.getAction().getAction().getID_ActionIsNotNull()?tpActionSelected.getAction().getAction().getID_Action().toString():"":"":"";
			}
		}
		else if (values != null && values.size() > 0)
		{
			ActivityActionVo actionSelected = (ActivityActionVo)values.get((Integer)form.Activity().getValue());
			groupID = actionSelected.getGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroup().toString():"":"";
			activityID = actionSelected.getActivityIdIsNotNull()?actionSelected.getActivityId().toString():"";
			actionID = actionSelected.getActionIsNotNull()?actionSelected.getAction().getID_ActionIsNotNull()?actionSelected.getAction().getID_Action().toString():"":"";
		}										

		
		if ((activityID.equals("-202") || activityID.equals("-207")) && form.Resource().getValue() == null)
		{
			if(form.Energy().getValue() != null)
			{
				//09/02/2005 - don't display the message twice;
				//set initially the boolean value to false then the second time if it's false set it to true
				if(form.getLocalContext().getIgnoreMessageIsNotNull())
				{
					if(form.getLocalContext().getIgnoreMessage().booleanValue())
						return;
					else
						form.getLocalContext().setIgnoreMessage(new Boolean(true));
				}
				//-------------------------------------------
				ShowMessage("Please select a resource.");
			}
			return;
		}

		if (form.ListOwner().getValue() == null)
			form.getGlobalContext().CcoSched.Booking.setListOwner(null);
		else
			form.getGlobalContext().CcoSched.Booking.setListOwner(form.ListOwner().getValue());

		if (form.Resource().getValue() == null)
			form.getGlobalContext().CcoSched.Booking.setResourceSelected(null);
		else
			form.getGlobalContext().CcoSched.Booking.setResourceSelected(form.Resource().getValue());

		Date dateInitial = new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), 1);
		//if (dateInitial < now)
		//	dateInitial = now;
		//Date dateEnd = new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(),1).getNumberOfDaysInTheMonth());
		Date dateEnd = new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), form.Calendar().getCurrentMonth().getNumberOfDaysInTheMonth());
//		#region Fix 25 June 2003
		String resourceID = new String();
		String listOwnerID = new String();
		if (activityID.equals("-202") || activityID.equals("-207"))
			resourceID = ((Sd_modactmc.Sd_modactmcRecord)form.Resource().getValue()).Mc_id;
		else
		{
			if (form.Resource().getValue() != null)
				resourceID = ((Sd_mc_act.Sd_mc_actRecord)form.Resource().getValue()).Mc_id;
			if (form.ListOwner().getValue() != null)
				listOwnerID = form.ListOwner().getValue().Staff_no;
		}

		Filter newFilter = new Filter();
		newFilter.GroupID = groupID;
		newFilter.ActivityID = activityID;
		newFilter.ActionID = actionID;
		newFilter.StartDate = dateInitial;
		newFilter.EndDate = dateEnd;
		newFilter.ResourceID = resourceID;
		newFilter.ListOwnerID = listOwnerID;

		if (m_Filter != null && m_Filter.GroupID.equals(groupID) && m_Filter.ActivityID.equals(activityID) && m_Filter.ActionID.equals(actionID) && m_Filter.StartDate.equals(dateInitial) && m_Filter.EndDate.equals(dateEnd) && m_Filter.ResourceID.equals(resourceID) && m_Filter.ListOwnerID.equals(listOwnerID))
			return;
//		#endregion
		m_DoClear = false;

		Sd_sess_avail sessionAvailability = (Sd_sess_avail)domain.getDTOInstance(Sd_sess_avail.class);
		sessionAvailability.Filter.clear();
		sessionAvailability.Filter.Grp_id = groupID;
		sessionAvailability.Filter.Activ_id = activityID;
		sessionAvailability.Filter.Act_id = actionID;
		sessionAvailability.Filter.Sess_dt  = dateInitial.toString(DateFormat.ISO) + "|" + dateEnd.toString(DateFormat.ISO);
		sessionAvailability.Filter.Mc_id = resourceID;
		sessionAvailability.Filter.Lo_id = listOwnerID;
		Result result = sessionAvailability.list();
		if (result != null)
		{
			ShowMessage(result.getMessage());
			return;
		}

		Hashtable sessionList = new Hashtable();
		for(int k=0; k<sessionAvailability.DataCollection.count(); k++)
		{
			Sd_sess_avail.Sd_sess_availRecord sa = sessionAvailability.DataCollection.get(k);
			Date ddt = GetDateFromString(sa.Sess_dt);
			if (ddt == null)
			{	
				InternalError("Session date is null.");
				return;
			}
			Date date = null;
			date = new Date(ddt.getYear(), ddt.getMonth(), ddt.getDay());
			Integer si = GetInteger(sa.Rem_tm);
			if (si == null)
			{
				InternalError("No value for remaining time.");
				return;
			}
			int remaining = si.intValue();

			Integer totalTime = GetInteger(sa.Total_tm);
			if (totalTime == null)
			{
				InternalError("No value for total time.");
				return;
			}
			int total = totalTime.intValue();
			if (remaining > total)
			{
				InternalError("Error calculating remaining or total time.");
				return;
			}
			if (form.ListOwner().getValue() != null)
			{
				String[] sessions = sa.Sessiond_ids.split(",");
				String[] session = StringUtils.splitString(sessions[form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue()],"+");
				Sd_sess_appts sessAppts = (Sd_sess_appts)domain.getDTOInstance(Sd_sess_appts.class);
				sessAppts.Filter.clear();
				sessAppts.Filter.Prfile_sess_id = session[0];
				sessAppts.Filter.Prfiled_sess_id = session[1];
				if (form.ListOwner().getValue() != null)
					sessAppts.Filter.Loid = form.ListOwner().getValue().Staff_no;
				result = sessAppts.get();
				if (result == null)
				{
					//foreach (dto.Sd_sess_apptsDTO.LoseqnoClient s in sessAppts.Sd_sess_apptsCollection[0].LoseqnoCollection)
					for(int j=0; j< sessAppts.DataCollection.get(0).LoseqnoCollection.count(); j++)
					{
						Sd_sess_appts.Sd_sess_apptsLoseqnoRecord s = sessAppts.DataCollection.get(0).LoseqnoCollection.get(j);
						if (s.Mos_id.equalsIgnoreCase(form.ListOwner().getValue().Staff_no))
						{
							Integer di1 = GetInteger(s.Lomaxnoapp);
							Integer di2 = GetInteger(s.Loremnoapp);
							if (di1 != null && di2 != null )
							{
								total = di1.intValue();
								remaining = di2.intValue();
								break;
							}
						}
					}						
				}
			}
			form.Calendar().addPercentage(date, (int)((total - remaining) * 100.0f / total));
			if (sa.Sessiond_ids.length() == 0)
			{
				InternalError("No session details return for " + date.toString(DateFormat.STANDARD));
				return;
			}
			if (sessionList.containsKey(date))
				sessionList.put(date.toString(DateFormat.ISO), sa.Sessiond_ids);
			else
				sessionList.put(date.toString(DateFormat.ISO), sa.Sessiond_ids);
		}

//		#region Fix 25 June 2003
		m_Filter = newFilter;
//		#endregion
		// Set the dates that do not have sessions.
		form.Calendar().clearNoSessionDates();
		Date dateSession = new Date(dateInitial.getYear(), dateInitial.getMonth(), dateInitial.getDay());
		//while (dateSession.getNumberOfDays() <= dateEnd.getNumberOfDays())
		while (dateSession.isLessOrEqualThan(dateEnd))
		{
			if (!sessionList.containsKey(dateSession.toString(DateFormat.ISO)))
			{
				form.Calendar().addNoSessionDates(new Date(dateSession));
				//System.out.println("No session date added: " + dateSession.toString());
			}
			dateSession.addDay(1);
		}

		if (form.getGlobalContext().CcoSched.Booking.getSessionList() != null)
		{	
			Enumeration objects = sessionList.keys();
			while(objects.hasMoreElements()) 
			{
				String o = (String)objects.nextElement();
				if (sessionList.containsKey(o))
					form.getGlobalContext().CcoSched.Booking.getSessionList().put(o, sessionList.get(o));
				else
					form.getGlobalContext().CcoSched.Booking.getSessionList().put(o, sessionList.get(o));
			}
		}
		else
			form.getGlobalContext().CcoSched.Booking.setSessionList(sessionList);

	}	
	
	private void SetStartAndEndDate()
	{
		Date min = maxDate;
		Date max = minDate;

		ArrayList a = form.Calendar().getSelectedDates();
		if (a != null && a.size() == 0)
		{
			form.getGlobalContext().CcoSched.Booking.setStartDate(null);
			form.getGlobalContext().CcoSched.Booking.setEndDate(null);
		}
		else
		{
			for(int i=0; i<a.size(); i++)
			{
				Date dt = (Date)a.get(i);
				if (dt.isLessThan(min))
					min = new Date(dt.getYear(), dt.getMonth(), dt.getDay());
				if (dt.isGreaterThan(max))
					max = new Date(dt.getYear(), dt.getMonth(), dt.getDay());
			}	
		
			form.getGlobalContext().CcoSched.Booking.setStartDate(min);
			form.getGlobalContext().CcoSched.Booking.setEndDate(max);
		}
	}
	

	private boolean HasTemporaryAddress(Patient.PatientRecord patientTmp)
	{
		if(!patientTmp.Tadr1.equals("") || !patientTmp.Tadr2.equals("") || !patientTmp.Tadr3.equals("") || !patientTmp.Tadr4.equals("") || 
		   !patientTmp.Tpost.equals("") || !patientTmp.Tdtel.equals("") || !patientTmp.Tntel.equals(""))
			return true;

		return false;
	}

	private Integer GetInteger(String val)
	{
		Integer newVal = null;
		if(val != null && !val.equals(""))
		{
			try{newVal = Integer.valueOf(val);}
			catch(NumberFormatException e)
			{ShowMessage(e.getMessage());}
		}

		return newVal;	
	}
	
	private Float GetFloat(String val)
	{
		Float newVal = null;
		if(val != null && !val.equals(""))
		{
			try{newVal = new Float(val);}
			catch(NumberFormatException e)
			{ShowMessage(e.getMessage());}	
		}
		return newVal;
	}
	
	private String GetStringFromFloat(Float value)
	{
		String empty = new String();
		if(value == null)
			return empty;
		
		return value.toString();
	}

	//variables
	private boolean m_NoActionsFlag = true;
	private boolean m_DoClear = true;
	private boolean bChangeResouces = true;
	private Date minDate = new Date(1, 1, 1);
	private Date maxDate = new Date(9999, 12, 31);
	//#region Fix 25 June 2003
	private Filter m_Filter = null; // previously selected filter for GetAvailability
	//#endregion

	//emulates enum Conflict = new enum(){None, Soft, Hard}
	public static class Conflict
	{
		private static int None = 0;
        private static int Soft = 1;
        private static int Hard = 2;
        public static synchronized int getHard() 
        {
            return Hard;
        }
        public static synchronized int getNone() 
        {
            return None;
        }
        public static synchronized int getSoft() 
        {
            return Soft;
        }
	}
	

	//#region Fix 25 June 2003
	private class Filter
	{
		public String GroupID;
		public String ActivityID;
		public String ActionID;
		public Date StartDate;
		public Date   EndDate;
		public String ResourceID;
		public String ListOwnerID;
	}


	//OnSequence
	protected void onSequenceValueChanged() 
	{
		boolean b = form.Sequence().getValue();
		form.Mon().setVisible( b);
		form.Tue().setVisible( b);
		form.Tue().setVisible( b);
		form.Wed().setVisible( b);
		form.Thu().setVisible( b);
		form.Fri().setVisible( b);
		form.Sat().setVisible( b);
		form.Sun().setVisible( b);
		
	}
	
	private void ChangeResources()
	{
		if (!bChangeResouces)
			return;

		onResetClick();
		form.Resource().clear();
		form.getGlobalContext().CcoSched.Booking.setResourceSelected(null);

		String groupID = new String();
		String activityID = new String();
		String actionID = new String(); 
		
		Hashtable values = form.getLocalContext().getActivityTree();
		if (form.TreatmentPlanActivities().getValue())
		{
			PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(form.Activity().getValue());
			groupID = tpActionSelected.getActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroup().toString():"":"";
			activityID = tpActionSelected.getActivityIsNotNull()?tpActionSelected.getActivity().getActivityIdIsNotNull()?tpActionSelected.getActivity().getActivityId().toString():"":"";
			actionID = tpActionSelected.getActionIsNotNull()?tpActionSelected.getAction().getActionIsNotNull()?tpActionSelected.getAction().getAction().getID_ActionIsNotNull()?tpActionSelected.getAction().getAction().getID_Action().toString():"":"":"";
//replaced code			
//			Go_ptplact.Go_ptplactRecord tpActionSelected = (Go_ptplact.Go_ptplactRecord)values.get((Integer)form.Activity().getValue());
//			groupID = tpActionSelected.Activitygrp;
//			activityID = tpActionSelected.Activity_id;
//			actionID = tpActionSelected.Action_id;
		}
		else if (values != null)
		{
			ActivityActionVo actionSelected = (ActivityActionVo)values.get((Integer)form.Activity().getValue());
			groupID = actionSelected.getGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroup().toString():"":"";
			activityID = actionSelected.getActivityIdIsNotNull()?actionSelected.getActivityId().toString():"";
			actionID = actionSelected.getActionIsNotNull()?actionSelected.getAction().getID_ActionIsNotNull()?actionSelected.getAction().getID_Action().toString():"":"";
		}										

		if (activityID.equals("-202") || activityID.equals("-207")) // "External Beam"
		{
			String sd = GetStringFromFloat(form.Energy().getValue());
			if (form.Modality().getValue() == null)
			{
				//					UIEngine.MessageBox("Error: Unable to find resources as no modality selected.");
				return;
			}
			if (sd.equals(""))
			{
				ShowMessage("Error: Unable to find resources as no energy value supplied.");
				return;
			}
			if (form.EnergyUnit().getValue() == null)
			{
				//					ShowMessage("Error: Unable to find resources as no energy unit selected.");
				return;
			}

			Sd_modactmc modactmc = (Sd_modactmc)domain.getDTOInstance(Sd_modactmc.class);
			modactmc.Filter.clear();
			modactmc.Filter.Modal_type_id = form.Modality().getValue()!=null?new Integer(form.Modality().getValue().getID()).toString():"";
			modactmc.Filter.Energy = sd;
			modactmc.Filter.Energy_unit = form.EnergyUnit().getValue()!=null?new Integer(form.EnergyUnit().getValue().getID()).toString():"";
			modactmc.Filter.Action_id = actionID;
			modactmc.Filter.Act_ind_mod = "Y";
			Result result = modactmc.list();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return;
			}
			for (int i = 0; i < modactmc.DataCollection.count(); i++)
			{
				boolean exist = false;
				if(form.Resource().getValues() != null)
				{
					for(int k=0; k<form.Resource().getValues().size(); k++)
					{
						if(modactmc.DataCollection.get(i).Mc_id.equals(((Sd_modactmc.Sd_modactmcRecord)form.Resource().getValues().get(k)).Mc_id))
						{
							exist = true;
						}
					}	
				}
	
				if (!exist)
					form.Resource().newRow(modactmc.DataCollection.get(i), modactmc.DataCollection.get(i).Mc_nm);
			}
		}
		else
		{
			Sd_mc_act resource_act = (Sd_mc_act)domain.getDTOInstance(Sd_mc_act.class);
			resource_act.Filter.clear();
			resource_act.Filter.Group_id = groupID;
			resource_act.Filter.Activity_id = activityID;
			resource_act.Filter.Action_id = actionID;
			Result result = resource_act.list();
			if (result != null)
			{
				ShowMessage(result.getMessage());
				return;
			}									
			for (int i = 0; i<resource_act.DataCollection.count(); i++)
			{
				boolean exist = false;
				
				if(form.Resource().getValues() != null)
				{
					for(int k=0; k<form.Resource().getValues().size(); k++)
					{
						if(resource_act.DataCollection.get(i).Mc_id.equals(((Sd_mc_act.Sd_mc_actRecord)form.Resource().getValues().get(k)).Mc_id))
							exist = true;	
					}
				}	
				
				if (!exist)
					form.Resource().newRow(resource_act.DataCollection.get(i), resource_act.DataCollection.get(i).Mc_name);
			}
		}

		form.getGlobalContext().CcoSched.Booking.setResourceSelected(form.Resource().getValue());
		ShowSequence(0);
	}
	
	protected void onResetClick() 
	{
		form.Calendar().setSelectedDay(null);//SqlDateTime.Null
		form.Calendar().clearChecks();
		form.Calendar().clearConflicts();
		form.Calendar().clearNoSlotDates();

		form.DateSelected().setValue("");
		form.htm1().setHTML("");//WDEV-14396
		form.LocationSelected().setValue("");
		form.Action().setValue("");
		form.NumResSelected().setValue("");
		form.SlotsGrid().getRows().clear();
		setBookingDetails("", "", "", "0");
		form.NumberOfBookings().setValue("");
		form.NumberOfFirstAppointments().setValue("");
		form.bActions().setEnabled(false);

		//Context.ContextBooking.ClearDateSessionSlotsList();
		form.getGlobalContext().CcoSched.Booking.setDateSessionSlotsList(null);
		//Context.ContextBooking.ClearSelectedSessions();
		form.getGlobalContext().CcoSched.Booking.setSelectedSessions(null);
		//Context.ContextBooking.SessionIndex = 0;
		form.getGlobalContext().CcoSched.Booking.setSessionIndex(new Integer(0));
		//05/01/2005 - Clear the Selected Session Dates
		form.getGlobalContext().CcoSched.Booking.setCalendarSelectedDates(null);
	}
	
	private void setBookingDetails(String startDate, String endDate, String defaultApptTime, String numberOfComflicts)
	{
		BookingDetailsVo voBookingDetails = form.getLocalContext().getBookingDetails();
		if(voBookingDetails == null)
			voBookingDetails = new BookingDetailsVo();
		
		voBookingDetails.setStartDate(startDate);
		voBookingDetails.setEndDate(endDate);
		voBookingDetails.setDefaultApptTime(defaultApptTime);
		voBookingDetails.setNumberOfConflicts(numberOfComflicts);
		
		form.getLocalContext().setBookingDetails(voBookingDetails);

		form.htmlBookingDetails().setHTML(voBookingDetails.toHtml());
	}

	public void InternalError(String message)
	{
		throw new RuntimeException(message);
	}

	protected void onModalityValueChanged() 
	{
		ChangeResources();
		form.getLocalContext().setModalityId(form.Modality().getValue()!=null?new Integer(form.Modality().getValue().getID()).toString():"");
	}

	protected void onEnergyUnitValueChanged() 
	{
		ChangeResources();
	}

	protected void onEnergyValueChanged() 
	{
		ChangeResources();		
	}
	
	protected void OnHyperfractination() 
	{
		boolean b = form.Hyperfractination().getValue();
		form.LabelLevel().setVisible(b);
		form.Level().setVisible(b);
		form.LabelInstances().setVisible(b);
		form.Instances().setVisible(b);
		if (b)
		{
			form.Level().setValue(new Integer(0));
			form.Instances().setValue(new Integer(0));
		}
	}

	protected void OnListOwner() 
	{
		onResetClick();
		GetAvailability();
	}

	protected void OnResource() 
	{
		onResetClick();
		GetAvailability();		
	}

	protected void OnGenerateDatesClick() 
	{
		int count = form.Calendar().getSelectedDates().size();
		if (count == 0)
		{
			ShowMessage("A start date must be selected.");
			return;
		}
		else if (count > 1)
		{
			ShowMessage("Only one start date may be selected.");
			return;
		}
		
		Date startDate = (Date)form.Calendar().getSelectedDates().get(0);
		if (form.Sequence().getValue())
		{
			boolean warning = false;				
			if(startDate.getDayOfWeek().equals(DayOfWeek.MONDAY))
			{
				if (!form.Mon().getValue()) warning = true;
			}
			else if(startDate.getDayOfWeek().equals(DayOfWeek.TUESDAY)) 
			{
				if (!form.Tue().getValue()) warning = true;
			}
			else if(startDate.getDayOfWeek().equals(DayOfWeek.WEDNESDAY)) 
			{
				if (!form.Wed().getValue()) warning = true;
			}
			else if(startDate.getDayOfWeek().equals(DayOfWeek.THURSDAY)) 
			{
				if (!form.Thu().getValue()) warning = true;
			}
			else if(startDate.getDayOfWeek().equals(DayOfWeek.FRIDAY))
			{
				if (!form.Fri().getValue()) warning = true;
			}
			else if(startDate.getDayOfWeek().equals(DayOfWeek.SATURDAY)) 
			{
				if (!form.Sat().getValue()) warning = true;
			}
			else if(startDate.getDayOfWeek().equals(DayOfWeek.SUNDAY)) 
			{
				if (!form.Sun().getValue()) warning = true;
			}
			if (warning)
			{
				ShowMessage("The start date is not in the sequence selected.");
				return;
			}
		}

		if ((!form.Sequence().getValue()) || !(form.Mon().getValue() || form.Tue().getValue() || form.Wed().getValue() || form.Thu().getValue() || form.Fri().getValue() || form.Sat().getValue() || form.Sun().getValue()))
		{
			ShowMessage("Please select relevant days in sequence.");
			return;
		}
		//Change to GetVisible
		if (form.Hyperfractination().isVisible() && form.Hyperfractination().getValue())
		{
			boolean flag = false;
			if (form.Level().getValue().intValue() <= 0)
			{
				ShowMessage("Hyperfractionation level must be set to a value greater than 0."); //WDEV-18813
				flag = true;
			}
			if (form.Instances().getValue().intValue() <= 0)
			{
				ShowMessage("Number of instances must be set to a value greater than 0."); //WDEV-18813
				flag = true;
			}
			if (flag)
				return;
		}

		int fractions = 0;
		//Change to GetVisible
		if (form.Fractions().isVisible())
		{
			fractions = form.Fractions().getValue().intValue();
			if (form.Hyperfractination().getValue())
			{
				fractions = fractions - (form.Level().getValue().intValue() * form.Instances().getValue().intValue()) + form.Instances().getValue().intValue();
				if (fractions < 0)
				{
					ShowMessage("Hyperfractionation level exceeds total number of fractions."); //WDEV-18762
					return;
				}
			}
			else
			{
				if (fractions < 1)
				{
					ShowMessage("Invalid number of fractions.");
					return;
				}
			}
		}
		else
			fractions = form.NumberOfAppointments().getValue().intValue();

		ArrayList m_DaysOfWeek = new ArrayList();
		if (form.Mon().getValue())
			m_DaysOfWeek.add(DayOfWeek.MONDAY);
		if (form.Tue().getValue())
			m_DaysOfWeek.add(DayOfWeek.TUESDAY);
		if (form.Wed().getValue())
			m_DaysOfWeek.add(DayOfWeek.WEDNESDAY);
		if (form.Thu().getValue())
			m_DaysOfWeek.add(DayOfWeek.THURSDAY);
		if (form.Fri().getValue())
			m_DaysOfWeek.add(DayOfWeek.FRIDAY);
		if (form.Sat().getValue())
			m_DaysOfWeek.add(DayOfWeek.SATURDAY);
		if (form.Sun().getValue())
			m_DaysOfWeek.add(DayOfWeek.SUNDAY);

		int numberFractions = 0;	
		ArrayList dates = new ArrayList();
		dates.add(new Date(startDate));
		numberFractions++;

		Date d = new Date(startDate);
//		#region Fix 25 June 2003
		//Change to getVisible
		Date estimatedEndDate = new Date(d);
		estimatedEndDate.addDay((form.Duration().isVisible() ? form.Duration().getValue().intValue() : form.NumberOfAppointments().getValue().intValue() * 7) - 1);
//		#endregion
		Hashtable sessionList = form.getGlobalContext().CcoSched.Booking.getSessionList();
		boolean firstTime = true;
		while (numberFractions < fractions)
		{
//			#region Fix 25 June 2003
			if (d.isGreaterOrEqualThan(estimatedEndDate))
			{
				ShowMessage("Insufficient number of sessions. Generated " + String.valueOf(numberFractions) + " day(s).");
				break;
			}
//			#endregion
			int month = d.getMonth();
			d.addDay(1);
			if (month != d.getMonth() && firstTime)
			{
				firstTime = false;
				String groupID = new String();
				String activityID = new String();
				String actionID = new String();
				Hashtable values = form.getLocalContext().getActivityTree();
				if (form.TreatmentPlanActivities().getValue())
				{
					PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(form.Activity().getValue());
					groupID = tpActionSelected.getActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroup().toString():"":"";
					activityID = tpActionSelected.getActivityIsNotNull()?tpActionSelected.getActivity().getActivityIdIsNotNull()?tpActionSelected.getActivity().getActivityIdIsNotNull()?tpActionSelected.getActivity().getActivityId().toString():"":"":"";
					actionID = tpActionSelected.getActionIsNotNull()?tpActionSelected.getAction().getActionIsNotNull()?tpActionSelected.getAction().getAction().getID_ActionIsNotNull()?tpActionSelected.getAction().getAction().getID_Action().toString():"":"":"";
//replaced code					
//					Go_ptplact.Go_ptplactRecord tpActionSelected = (Go_ptplact.Go_ptplactRecord)values.get((Integer)form.Activity().getValue());
//					groupID = tpActionSelected.Activitygrp;
//					activityID = tpActionSelected.Activity_id;
//					actionID = tpActionSelected.Action_id;
				}
				else
				{
					ActivityActionVo actionSelected = (ActivityActionVo)values.get((Integer)form.Activity().getValue());
					groupID = actionSelected.getGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroup().toString():"":"";
					activityID = actionSelected.getActivityIdIsNotNull()?actionSelected.getActivityId().toString():"";
					actionID = actionSelected.getActionIsNotNull()?actionSelected.getAction().getID_ActionIsNotNull()?actionSelected.getAction().getID_Action().toString():"":"";
				}										
				Sd_sess_avail sessionAvailability = (Sd_sess_avail)domain.getDTOInstance(Sd_sess_avail.class);
				sessionAvailability.Filter.clear();
				sessionAvailability.Filter.Grp_id = groupID;
				sessionAvailability.Filter.Activ_id = activityID;
				sessionAvailability.Filter.Act_id = actionID;
				sessionAvailability.Filter.Sess_dt  = d.toString(DateFormat.ISO) + "|" + estimatedEndDate.toString(DateFormat.ISO);
				// HCP
				if (activityID.equals("-202") || activityID.equals("-207"))
					sessionAvailability.Filter.Mc_id = ((Sd_modactmc.Sd_modactmcRecord)form.Resource().getValue()).Mc_id;
				else
				{
					sessionAvailability.Filter.Lo_id = form.ListOwner().getValue().Staff_no;
					if (form.Resource().getValue() != null)
						sessionAvailability.Filter.Mc_id = ((Sd_mc_act.Sd_mc_actRecord)form.Resource().getValue()).Mc_id;
				}
				Result result = sessionAvailability.list();
				if (result != null)
				{
					ShowMessage(result.getMessage());
					return;
				}
				for(int k=0; k<sessionAvailability.DataCollection.count(); k++)
				{
					Sd_sess_avail.Sd_sess_availRecord  sa = sessionAvailability.DataCollection.get(k); 
					Date sd = GetDateFromString(sa.Sess_dt);
					if (sd == null)
					{
						ShowMessage("A blank date was returned.");
						return;
					}
					Date date = new Date(sd.getYear(), sd.getMonth(), sd.getDay());
					if (sa.Sessiond_ids.length() == 0)
					{
						ShowMessage("No session details return for " + date.toString(DateFormat.STANDARD));
						return;
					}
					if (sessionList.containsKey(date.toString(DateFormat.ISO)))
						sessionList.put(date.toString(DateFormat.ISO), sa.Sessiond_ids);
					else
						sessionList.put(date.toString(DateFormat.ISO), sa.Sessiond_ids);
				}
			}
			for (int i = 0; i < m_DaysOfWeek.size(); i++)
				if (d.getDayOfWeek().equals((DayOfWeek)m_DaysOfWeek.get(i)) && sessionList.containsKey(d.toString(DateFormat.ISO)))
				{
					dates.add(new Date(d));
					++numberFractions;
					break;
				}
		}
		
		for (int i = 0; i < dates.size(); i++)
		{
			form.Calendar().check((Date)dates.get(i));
			//03/06/2004 - Simulate the DateCheck
			OnDateChecked((Date)dates.get(i), true);
		}

		BookingDetailsVo voBookingDetails = form.getLocalContext().getBookingDetails();
		if(voBookingDetails == null)
			voBookingDetails = new BookingDetailsVo();
		
		voBookingDetails.setStartDate(((Date)dates.get(0)).toString(DateFormat.STANDARD));
		voBookingDetails.setEndDate(((Date)dates.get(dates.size() - 1)).toString(DateFormat.STANDARD));
		form.getLocalContext().setBookingDetails(voBookingDetails);
		form.htmlBookingDetails().setHTML(voBookingDetails.toHtml());
		
		form.getGlobalContext().CcoSched.Booking.setSessionIndex(new Integer(0));

		SetStartAndEndDate();
		//10/01/2005 - clear the Action Dates
		form.getGlobalContext().CcoSched.Booking.setCalendarSelectedDates(null);
	}
	
	protected void OnMonthSelected(Date d)
	{
		Date date = new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), 1);
		for (int i = 1; i <= date.getNumberOfDaysInTheMonth(); ++i)
			form.Calendar().addNoSessionDates(new Date(form.Calendar().getCurrentMonth().getYear(), form.Calendar().getCurrentMonth().getMonth(), i));

		boolean flag = true;
		for(int j=0; j<form.Activity().getNodes().size(); j++)
		{
			if(form.Activity().getNodes().get(j).getValue().equals(form.Activity().getValue()))
			{
				flag = false;
				break;
			}	

		}	

		if (flag)
			GetAvailability();
	}

	protected void OnRefreshAvailabilityClick() 
	{
		GetAvailability();		
	}

	
	protected void OnDateSelected(Date date) 
	{
		if (date != null)
		{
			Date dt = new Date(date.getYear(), date.getMonth(), date.getDay());
			form.getGlobalContext().CcoSched.Booking.setSelectedDate(dt);
			form.getGlobalContext().CcoSched.Booking.setSessionIndex(new Integer(0));
			SetSlots();
		}
	}

	protected void OnDateChecked(Date dt, boolean value) 
	{
		if (value)
		{
			Hashtable ht = form.getGlobalContext().CcoSched.Booking.getSelectedSessions();
			if (ht == null)
			{
				ht = new Hashtable();
				form.getGlobalContext().CcoSched.Booking.setSelectedSessions(ht);
			}
			Object o = form.getGlobalContext().CcoSched.Booking.getSessionList().get(dt.toString(DateFormat.ISO));
			if (ht.containsKey(dt.toString(DateFormat.ISO)))
				ht.put(dt.toString(DateFormat.ISO), o);
			else
				ht.put(dt.toString(DateFormat.ISO), o);

		}
		else
		{
			Hashtable ht = form.getGlobalContext().CcoSched.Booking.getSelectedSessions();
			if (ht != null)
				form.getGlobalContext().CcoSched.Booking.getSelectedSessions().remove(dt.toString(DateFormat.ISO));

			//07/01/2005 - Remove the date from the ActionSession if is there
			ArrayList selectedDates = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
			if(selectedDates != null)
			{
				for(int i=0; i<selectedDates.size(); i++)
				{
					if(((ActionSession)selectedDates.get(i)).getAction().equals(dt))
					{
						selectedDates.remove(i);
						break;
					}
				}
			}	
			//End remove code
			ArrayList ds = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
			if (ds != null)
			{
				ArrayList ar = new ArrayList();
				for(int i=0; i<ds.size(); i++)
				{
					DateSessionSlotsClass d = (DateSessionSlotsClass)ds.get(i); 
					if(d.getDate().equals(dt))
						ar.add(d);
				}
				
				for(int i=0; i<ar.size(); i++)
					ds.remove(ar.get(i));
			
				if(form.getGlobalContext().CcoSched.Booking.getSelectedDate() != null && dt.equals(form.getGlobalContext().CcoSched.Booking.getSelectedDate()))
					SetSlots();
			}
		}
		SetStartAndEndDate();
		form.bActions().setEnabled(form.Calendar().getSelectedDates().size() > 0);
	}
	
	private void SetSlots()
	{	
		Date date = form.getGlobalContext().CcoSched.Booking.getSelectedDate();

		form.SlotsGrid().getRows().clear();
		ArrayList alreadyBooked = new ArrayList();
		form.getLocalContext().setAlreadyBooked(alreadyBooked);
		//07/01/2005 - Check if the date has the action changed - and load the appropriate session
		Hashtable sessionList = getSession(date);
		if(sessionList == null)
		{
			sessionList = form.getGlobalContext().CcoSched.Booking.getSessionList();
			form.Action().setValue(form.Activity().getSelectedNode() != null ? form.Activity().getSelectedNode().getText() : "");
		}
		else
		{
			//Display the action
			form.Action().setValue(getActionText(date));
		}
		String[] sessions = ((String)sessionList.get(date.toString(DateFormat.ISO))).split(",");
		String[] session = StringUtils.splitString(sessions[form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue()],"+"); // sessions[Context.ContextBooking.SessionIndex] is null ??????????
		if (session.length != 2)
		{
			ShowMessage("Invalid session / session detail format.");
			return;
		}

		form.DateSelected().setValue(date.toString(DateFormat.STANDARD));
		form.NumResSelected().setValue(Integer.toString(form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue() + 1) + "/" + Integer.toString(sessions.length));

		form.PreviousDate().setEnabled(form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue() > 0);
		form.NextDate().setEnabled((form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue() + 1) < sessions.length);
		
		form.getGlobalContext().CcoSched.Booking.setSessionId(session[0]);
		form.getGlobalContext().CcoSched.Booking.setSessionDetailsId(session[1]); 

		Sd_sess_appts sessionAppointments = (Sd_sess_appts)domain.getDTOInstance(Sd_sess_appts.class);
		sessionAppointments.Filter.clear();
		sessionAppointments.Filter.Prfile_sess_id = session[0];
		sessionAppointments.Filter.Prfiled_sess_id = session[1];
		
	//	if (form.getGlobalContext().CcoSched.getLoggedInUserIdIsNotNull())
		sessionAppointments.Filter.Userrights = new Integer(engine.getLoggedInUser().getUserId()).toString();
		
		if (form.ListOwner().getValue() != null)
			sessionAppointments.Filter.Loid = form.ListOwner().getValue().Staff_no;
		Result result = sessionAppointments.get();
		if (result != null)
		{
			ShowMessage(result.getMessage());
			return;
		}
		if (sessionAppointments.DataCollection.count() == 0)
		{
			InternalError("No data return for session.");
			return;
		}

		Sd_sess_appts.Sd_sess_apptsRecord sessionAppointment = sessionAppointments.DataCollection.get(0);
		
		form.htm1().setHTML("<b>"+sessionAppointment.Mc_nm+ "</b>");//WDEV-14396
		
		form.LocationSelected().setValue(sessionAppointment.Loc_nm);

		Time startTime = null;
		try{
			startTime = new Time(sessionAppointment.Stm, TimeFormat.FLAT6);
		}
		catch(RuntimeException e){ShowMessage(e.getMessage());}
		if (startTime == null)
		{
			InternalError("Session start time not returned.");
			return;
		}
		form.getGlobalContext().CcoSched.Booking.setStartTime(startTime);

		Time endTime = null;
		try{
		endTime = new Time(sessionAppointment.Etm, TimeFormat.FLAT6);
		}catch(RuntimeException e){ShowMessage(e.getMessage());}
		if (endTime == null)
		{
			InternalError("Session end time not returned.");
			return;
		}
		
//		#region 1. find booked periods
		ArrayList bookedPeriods = new ArrayList();
		for(int k=0; k<sessionAppointment.Seqno3Collection.count(); k++)
		{
			Sd_sess_appts.Sd_sess_apptsSeqno3Record r = sessionAppointment.Seqno3Collection.get(k);
			if (!r.Appt_stat.equals("-2190") && !r.Appt_stat.equals("-2193") && !r.Appt_stat.equals("-2197")) //Cancelled
			{
				Time startTimeBooked = null;
				try{
					startTimeBooked = new Time(r.Appt_stm, TimeFormat.FLAT6);
				}catch(RuntimeException e){ShowMessage(e.getMessage());}
				if (startTimeBooked == null)
				{
					InternalError("Appointment start time not returned.");
					return;
				}

				Time endTimeBooked = null;
				try{endTimeBooked = new Time(r.Appt_etm, TimeFormat.FLAT6);
				}catch(RuntimeException e){ShowMessage(e.getMessage());}
				if (endTimeBooked == null)
				{
					InternalError("Appointment end time not returned.");
					return;
				}

				boolean self = r.Pkey.equals(form.getGlobalContext().Core.getPatientShort().getPkey().getValue());
				ArrayList intersectedPeriods = new ArrayList();
				for(int j=0; j<bookedPeriods.size(); j++)
				{
					Object[] period = (Object[])bookedPeriods.get(j);
					if (CompareTimes(startTimeBooked, (Time)period[1]) < 0 && CompareTimes(endTimeBooked, (Time)period[0]) > 0 )//Michael's change
						intersectedPeriods.add(period);
				}	
				
				Time min = startTimeBooked;
				Time max = endTimeBooked;
				for(int j=0; j<intersectedPeriods.size(); j++)
				{
					Object[] period = (Object[])intersectedPeriods.get(j);
					if (CompareTimes((Time)period[0], min) < 0)
						min = (Time)period[0];
					if (CompareTimes((Time)period[1], max) > 0)
						max = (Time)period[1];
				}
				int i = 1;
				for(int j=0; j<intersectedPeriods.size(); j++)
				{
					Object[] o = (Object[])intersectedPeriods.get(j);
					i += ((Integer)o[2]).intValue();
					self |= ((Boolean)o[3]).booleanValue();
					bookedPeriods.remove(o);
				}	
				
				bookedPeriods.add(new Object[]{min, max, new Integer(i), Boolean.valueOf(self)});
			}
		}
//		#endregion

//		#region 2. find exluded periods
		ArrayList<Time[]> excludedPeriods = new ArrayList<Time[]>();
		for(int k=0; k<sessionAppointment.Seqno2Collection.count();k++ )
		{
			Sd_sess_appts.Sd_sess_apptsSeqno2Record r =  sessionAppointment.Seqno2Collection.get(k);
			
			if(!"Y".equalsIgnoreCase(r.Act_ind_tm))
				continue;
			
			Time startTimeExclusion = null;
			try{ startTimeExclusion = new Time(r.Stm2, TimeFormat.FLAT6);
			}
			catch(RuntimeException e){ShowMessage(e.getMessage());}
			if (startTimeExclusion == null)
			{
				InternalError("failed to get exclusion time record.");
				return;
			}

			Time endTimeExclusion = null;
			try{ endTimeExclusion = new Time(r.Etm2, TimeFormat.FLAT6);
			}catch(RuntimeException e){ShowMessage(e.getMessage());}
			
			if (endTimeExclusion == null)
			{
				InternalError("failed to get exclusion time record.");
				return;
			}

			ArrayList<Time[]> intersectedPeriods = new ArrayList<Time[]>();
			for(int j=0; j<excludedPeriods.size(); j++)
			{
				Time[] period = excludedPeriods.get(j);
				if (CompareTimes(startTimeExclusion, period[1]) <=0 && CompareTimes(endTimeExclusion, period[0]) >= 0)
					intersectedPeriods.add(period);
			}

			Time min = startTimeExclusion;
			Time max = endTimeExclusion;
			for(int j=0; j<intersectedPeriods.size(); j++)
			{
				Time[] period= intersectedPeriods.get(j);
				if (CompareTimes(period[0], min) < 0)
					min = period[0];
				if (CompareTimes(period[1], max) > 0)
					max = period[1];
			}
			for(int j=0; j<intersectedPeriods.size(); j++)
				excludedPeriods.remove(intersectedPeriods.get(j));

			excludedPeriods.add(new Time[]{min, max});
		}
//		#endregion

//		#region 3. find purely exluded periods
		ArrayList<Time[]> tmpArr = new ArrayList<Time[]>();
		for(int k=0; k<bookedPeriods.size(); k++)
		{
			Object[] bookedPeriod = (Object[])bookedPeriods.get(k);
			Time s = (Time)bookedPeriod[0];
			Time e = (Time)bookedPeriod[1];

			tmpArr.clear();
			for(int j=0; j<excludedPeriods.size(); j++)
				tmpArr.add(excludedPeriods.get(j));
			
			//http://jira/browse/SITE-370 SN comment in .clear() as loop is causing out of memory error
			if (excludedPeriods!= null && excludedPeriods.size()>0 && excludedPeriods.get(0) == null)
				excludedPeriods.clear();
			
			for(int j=0; j<tmpArr.size(); j++)
			{
				Time[] excludedPeriod = tmpArr.get(j);
				// exclusion times typically start on the hour 
				if (CompareTimes(s, excludedPeriod[1]) >= 0 || CompareTimes(e, excludedPeriod[0]) <= 0)
					excludedPeriods.add(excludedPeriod);
				else if (CompareTimes(s,excludedPeriod[0]) >= 0 && CompareTimes(s, excludedPeriod[1]) <= 0 && CompareTimes(e, excludedPeriod[1]) > 0)
					excludedPeriods.add(new Time[]{excludedPeriod[1], e});
				else if (CompareTimes(s, excludedPeriod[0]) < 0 && CompareTimes(e, excludedPeriod[0]) >= 0 && CompareTimes(e, excludedPeriod[1]) <= 0)
					excludedPeriods.add(new Time[]{s, excludedPeriod[0]});
				else if (CompareTimes(s, excludedPeriod[0]) >= 0 && CompareTimes(s, excludedPeriod[1]) <= 0 && CompareTimes(e, excludedPeriod[0]) > 0 && CompareTimes(e, excludedPeriod[1]) < 0)
				{
					excludedPeriods.add(new Time[]{excludedPeriod[0], s});
					excludedPeriods.add(new Time[]{e, excludedPeriod[1]});
				}
			}
		}
//		#endregion
//
//		#region 4. find HCP period
		Time startTimeListOwner = null;
		Time endTimeListOwner = null;
		if (form.ListOwner().getValue() != null)
		{
			for(int k=0; k<sessionAppointment.LoseqnoCollection.count(); k++)
			{
				Sd_sess_appts.Sd_sess_apptsLoseqnoRecord listOwner = sessionAppointment.LoseqnoCollection.get(k);
				if (listOwner.Mos_id.equals(form.ListOwner().getValue().Staff_no)) // WDEV-14146 
				{
					startTimeListOwner = null;
					try{ startTimeListOwner = new Time(listOwner.Stm1, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());};
					if (startTimeListOwner == null)
					{
						InternalError("start time for list owner is not supplied.");
						return;
					}
					//startTimeListOwner = new SqlDateTime(ddt.Value);

					endTimeListOwner = null;
					try{ endTimeListOwner = new Time(listOwner.Etm1, TimeFormat.FLAT6);}
					catch(RuntimeException e){ShowMessage(e.getMessage());}
					if (endTimeListOwner == null)
					{
						InternalError("end time for list owner is not supplied.");
						return;
					}
					//endTimeListOwner = new SqlDateTime(ddt.Value);
					break;
				}
			}
			if (startTimeListOwner == null)
			{
				//InternalError("list owner is not found.");
				ShowMessage("list owner is not found.");
				return;
			}
		}
//		#endregion
//
//		#region 5. create slots
		boolean flag = true;
		
		if (sessionAppointment.Userrights.equals("-100"))
			flag = false;
		else if (form.ListOwner().getValue() != null && sessionAppointment.Userrights.equals("-101"))
		{	
			for(int k=0; k<sessionAppointment.LoseqnoCollection.count(); k++)
			{
				Sd_sess_appts.Sd_sess_apptsLoseqnoRecord listOwner = sessionAppointment.LoseqnoCollection.get(k);
				if (listOwner.Mos_id.equals(form.ListOwner().getValue().Staff_no)) // WDEV-14146 
				{
					Integer si = GetInteger(listOwner.Loremnoapp);
					if (si != null && si.intValue() == 0)
						flag = false;
					break;
				}
			}
		}
		if (flag)
		{         				
			ArrayList dateSessionSlots = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
			//12/01/2005 - Check to see if there is different time for a date which actionID changed.
			int timeRequired = GetSlotTimeRequired(date);
			timeRequired = timeRequired !=-1 && timeRequired != 0 ? timeRequired : (form.getGlobalContext().CcoSched.Booking.getTimeRequiredIsNotNull()?form.getGlobalContext().CcoSched.Booking.getTimeRequired().intValue() : 0);
			
			// WDEV-14164  For some reason, timeRequired can be set to zero and this is causing the system to get stuck in the
			// following loop.  We need to find the correct timeRequired at this stage should this happen
			if (timeRequired == 0)
			{
				Hashtable values = form.getLocalContext().getActivityTree();
				if (values.get((Integer)form.Activity().getValue()) != null
						&& values.get((Integer)form.Activity().getValue()) instanceof PatTreatPlanActionVo)
					{
						PatTreatPlanActionVo actionSelected = (PatTreatPlanActionVo)values.get((Integer)form.Activity().getValue());
					    if (actionSelected != null && actionSelected.getActionIsNotNull() && actionSelected.getAction().getActionIsNotNull() && (actionSelected.getAction().getAction().getTimeRequired() == null || actionSelected.getAction().getAction().getTimeRequired() == 0))
					    {
					    	System.out.println("WARNING: Action Time Required not specified for " + actionSelected.getAction().getAction().getName() + ", default value 0 may cause application issues");
					    	engine.showMessage("WARNING: Action Time Required not specified for " + actionSelected.getAction().getAction().getName() + ", default value 0 may cause application issues");
					    	return;
					    }
					    else
					    {
					    	timeRequired=actionSelected.getAction().getAction().getTimeRequired();
					    	form.getGlobalContext().CcoSched.Booking.setTimeRequired(timeRequired);
					    }
					}
				
				// WDEV-16155 - If time required is still zero, get the value from the selected activity
				if (timeRequired == 0)
				{
					ActivityActionVo act = (ActivityActionVo) values.get(form.Activity().getValue());
					if (act != null && act instanceof ActivityActionVo)
					{
						timeRequired=act.getAction().getTimeRequired();
				    	form.getGlobalContext().CcoSched.Booking.setTimeRequired(timeRequired);
					}
				}
			}
			
			Time slotStartTime = new Time(startTime.getHour(), startTime.getMinute());
			int slotIndex = -1;//used for getting the index of the line
			while (true)
			{
				Time slotEndTime = new Time(slotStartTime.getHour(), slotStartTime.getMinute());
				slotEndTime.addMinutes(timeRequired);
				if (CompareTimes(slotEndTime,endTime) > 0)
					break;
				
				flag = false;
				if (sessionAppointment.Userrights.equals("-102"))
					flag = true;
				else
				{
					if (form.ListOwner().getValue() == null)
						flag = true;
					else
					{
						if ((CompareTimes(startTimeListOwner, slotStartTime) <= 0 ) && CompareTimes(slotStartTime, endTimeListOwner) < 0)
							flag = true;
						else
							slotStartTime = new Time(slotEndTime.getHour(),slotEndTime.getMinute());
					}
				}
				
				if (flag)
				{
					GenForm.SlotsGridRow row = form.SlotsGrid().getRows().newRow();
					row.setSlots(slotStartTime.toString(TimeFormat.DEFAULT));//ToString("HH:mm");
					row.setValue(Integer.toString(++slotIndex));
					if (dateSessionSlots == null)
						row.setSelect(false);
					else
					{
						for (int i = 0; i < dateSessionSlots.size(); ++i)
						{
							DateSessionSlotsClass tmp = (DateSessionSlotsClass)dateSessionSlots.get(i);
							if (date.equals(tmp.getDate()) && session[0].equals(tmp.getSessionId()) && session[1].equals(tmp.getSessionDetailsId()))
							{
								boolean flag2 = false;
								for (int j = 0; j < tmp.getSlotList().size(); ++j)
									if (row.getSlots().equals(tmp.getSlotList().get(j)))
									{
										flag2 = true;
										break;
									}
								row.setSelect(flag2);
								break;
							}
						}
					}
					if (startTimeListOwner != null)
					{
						if (CompareTimes(startTimeListOwner, slotStartTime) <= 0 && CompareTimes(slotStartTime,endTimeListOwner) < 0)
							row.setBackColor(Color.LightYellow);
					}
					
					flag = true;
					for(int k=0; k<bookedPeriods.size(); k++)
					{
						Object[] bookedPeriod = (Object[])bookedPeriods.get(k);
						if (CompareTimes(slotStartTime, (Time)bookedPeriod[1]) < 0 && CompareTimes(slotEndTime, (Time)bookedPeriod[0]) > 0)
						{
							row.setStatus("Booked (" + bookedPeriod[2].toString() + ")");
							row.setBackColor((((Boolean)bookedPeriod[3]).booleanValue() ? Color.PaletTurquoise : Color.White));
							slotStartTime = (Time)bookedPeriod[1];
							if (((Boolean)bookedPeriod[3]).booleanValue())
								alreadyBooked.add(row.getSlots());
							flag = false;
							break;
						}
					}
					if (flag)
					{
						for(int k=0; k<excludedPeriods.size(); k++)
						{
							Time[] excludedPeriod = excludedPeriods.get(k);
							if (CompareTimes(slotStartTime, excludedPeriod[1]) < 0 && CompareTimes(slotEndTime, excludedPeriod[0]) > 0)
							{
								row.setStatus("Excluded");
								row.setBackColor(Color.LightGray);
								slotStartTime = excludedPeriod[1];
								flag = false;
								break;
							}
						}
							
						if (flag)
						{
							row.setStatus("Available");
							slotStartTime = new Time(slotEndTime.getHour(), slotEndTime.getMinute());
						}
					}
				}
			}
		}
//		#endregion

		form.NumberOfBookings().setValue(sessionAppointment.Tno_appts);
		form.NumberOfFirstAppointments().setValue(sessionAppointment.Tno_fappts);
		form.SessionList().setEnabled(form.SlotsGrid().getRows().size() > 0);
	}
	
	//#endregion
	
	

	protected void OnPreviousDateClick() 
	{
		Integer prevIndex = new Integer(form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue() - 1);		
		form.getGlobalContext().CcoSched.Booking.setSessionIndex(prevIndex);
		SetSlots();
	}

	protected void OnNextDateClick() 
	{
		Integer nextIndex = new Integer(form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue()+1);
		form.getGlobalContext().CcoSched.Booking.setSessionIndex(nextIndex);			
		SetSlots();
	}

	protected void OnGridCheckBoxClicked(int column, SlotsGridRow row, boolean isChecked) 
	{
		String sessionId = form.getGlobalContext().CcoSched.Booking.getSessionId();
		String sessionDetailsId = form.getGlobalContext().CcoSched.Booking.getSessionDetailsId();
		Date selectedDate = form.getGlobalContext().CcoSched.Booking.getSelectedDate();
		ArrayList dateSessionSlots = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
		ArrayList alreadyBooked = form.getLocalContext().getAlreadyBooked();

		if (form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue() > 0)
		{
			for(int k=0; k<alreadyBooked.size(); k++)
			{
				String s = (String)alreadyBooked.get(k);		 
				String[] time2 = s.split(":");
				Time t2 = null;
				try{ t2 = new Time((time2[0] + time2[1] + "00"),TimeFormat.FLAT6);}
				catch(RuntimeException e){
					ShowMessage(e.getMessage());
				}
					
				if (t2 == null)
				{
					InternalError("Wrong time format");
					return;
				}
				//DateTime t2 = ddt.Value;

				String[] time = row.getSlots().split(":");
				Time t1 = null;
				try{ t1 = new Time((time[0] + time[1] + "00"), TimeFormat.FLAT6);}
				catch(RuntimeException e){ShowMessage(e.getMessage());}
				if (t1 == null)
				{
					InternalError("Wrong time format");
					return;
				}
				//replacing C# code if (!((t2 > t1 && (t2 - t1).Hours >= Context.ContextBooking.IntervalRequired) || (t2 < t1 && (t1 - t2).Hours >= Context.ContextBooking.IntervalRequired)))
				if (!((CompareTimes(t2, t1) > 0 && ((TimeSpan.getTimeSpan(t2, t1).getMinutes()) >= form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue()*60)) || (CompareTimes(t2, t1) < 0 && ((TimeSpan.getTimeSpan(t1, t2).getMinutes()) >= form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue()*60))))
				{
					row.setSelect(false);
					ShowMessage("The interval required must be " + form.getGlobalContext().CcoSched.Booking.getIntervalRequired().toString() + " hour(s).");
					return;
				}
			}
		}

		if ((form.NumberOfAppointments().isVisible() == true) && (form.NumberOfAppointments().getValue().intValue() == 1))
		{
			dateSessionSlots = new ArrayList();
			if (isChecked)
			{
				DateSessionSlotsClass ds = new DateSessionSlotsClass(selectedDate, sessionId, sessionDetailsId, new ArrayList());
				ds.getSlotList().add(row.getSlots());
				dateSessionSlots.add(ds);
			}

			// Deselect in the grid.
			for (int i = 0; i < form.SlotsGrid().getRows().size(); ++i)
				if (!form.SlotsGrid().getRows().get(i).getValue().equals(row.getValue()))
					form.SlotsGrid().getRows().get(i).setSelect(false);
				
			form.Calendar().getSelectedDates().clear();
			form.Calendar().clearChecks();
		}
		else
		{
			if (dateSessionSlots == null)
			{
				dateSessionSlots = new ArrayList();
				DateSessionSlotsClass ds = new DateSessionSlotsClass(selectedDate, sessionId, sessionDetailsId, new ArrayList());
				ds.getSlotList().add(row.getSlots());
				dateSessionSlots.add(ds);
			}
			else
			{					
				boolean flag = true;
				for (int i = 0; i < dateSessionSlots.size(); ++i)
				{
					DateSessionSlotsClass ds = (DateSessionSlotsClass)dateSessionSlots.get(i);
					if (ds.getDate().equals(selectedDate) && ds.getSessionId().equals(sessionId) && ds.getSessionDetailsId().equals(sessionDetailsId))
					{
						boolean flag2 = true;

						for (int j = 0; j < ds.getSlotList().size(); ++j)
						{
							if (((String)ds.getSlotList().get(j)).equals(row.getSlots()))
							{
								if (ds.getSlotList().size() == 1)
									dateSessionSlots.remove(i);
								else
									ds.getSlotList().remove(j);
								flag2 = false;
								break;
							}
						}
						if (flag2)
						{
							boolean error = false;
							for (int j = 0; j < ds.getSlotList().size(); j++)
							{
								String [] time = ((String)ds.getSlotList().get(j)).split(":");
								Time t = null;
								try{t= new Time((time[0] + time[1] + "00"), TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
								if (t== null)
								{
									InternalError("Wrong time format");
									return;
								}
								//DateTime t = ddt.Value;

								time = row.getSlots().split(":");
								Time t1 = null; 
								try{ t1 = new Time((time[0] + time[1] + "00"), TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
								if (t1 == null)
								{
									InternalError("Wrong time format");
									return;
								}
								//DateTime t1 = ddt.Value;

								if (!((CompareTimes(t,t1) > 0  && (TimeSpan.getTimeSpan(t, t1).getMinutes() >= form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue() * 60)) || (CompareTimes(t,t1) < 0 && (TimeSpan.getTimeSpan(t1, t).getMinutes() >= form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue() * 60))))
								{
									row.setSelect(false);
									ShowMessage("The interval required must be " + form.getGlobalContext().CcoSched.Booking.getIntervalRequired().toString() + " hour(s).");
									error = true;
									break;
								}
							}
							if (!error)
								ds.getSlotList().add(row.getSlots());
						}

						flag = false;
						break;
					}
				}
				if (flag)
				{
					DateSessionSlotsClass ds = new DateSessionSlotsClass(selectedDate, sessionId, sessionDetailsId, new ArrayList());
					ds.getSlotList().add(row.getSlots());
					dateSessionSlots.add(ds);
				}
			}
		}	

		if (!form.Calendar().getSelectedDates().contains(selectedDate))
		{
			form.Calendar().getSelectedDates().add(selectedDate);
			form.Calendar().check(selectedDate);
			//03/06/2004 - Simulate OnDateChecked
			OnDateChecked(selectedDate, true);
		}
		
		//			Context.DatesSelectedList = Form.Calendar.SelectedDates;
		form.getGlobalContext().CcoSched.Booking.setDateSessionSlotsList(dateSessionSlots);
		//			Context.StartDate = ((DateTime) Form.Calendar.SelectedDates[0]);
		//			Context.EndDate = (DateTime) Form.Calendar.SelectedDates[Form.Calendar.SelectedDates.Count-1];			


		ArrayList slots = new ArrayList(form.Calendar().getNoSlotDates());
		form.Calendar().clearNoSlotDates();
		for(int k=0; k<slots.size(); k++)
		{
			Date d = (Date)slots.get(k);
			if (!d.equals(selectedDate))
				form.Calendar().addNoSlotDate(d);
		}
		
		if(form.SlotsGrid().getRows().size() > 0)
			form.SlotsGrid().setValue(row.getValue());
	}
	
	private int GetRowIndex(SlotsGridRow row)
	{
		for(int i=0; i<form.SlotsGrid().getRows().size(); i++)
			if(form.SlotsGrid().getRows().get(i).equals(row))
					return i;
			
		return -1;
	}

	protected void OnAvailabilityDetails() 
	{
		/*form.getGlobalContext().CcoSched.Booking.setCategory(form.PatientCategory().getValue());
		form.getGlobalContext().CcoSched.Booking.setTransport(form.Transport().getValue());*/

		int i = form.Calendar().getSelectedDates().size();
		if (i > 0)
			engine.open(form.getForms().CcoSched.ResourceAvailabilty);
		else
			ShowMessage("No date selected.");
	}


	protected void OnConfirmBooking() 
	{
		int numSelectedDates = form.Calendar().getSelectedDates().size();
		int fractions = (form.Fractions().isVisible() && form.Fractions().getValue()!=null ? form.Fractions().getValue().intValue() : form.NumberOfAppointments().getValue().intValue());//WDEV-15276
		int numAppointments = 0;

		//Bug reported by Kevin but not logged - if a previous booking involved Hyperfractination to be checked
		//a subsequent booking when Hyperfractination was made invisible the numAppointments was calculated
		//based on Hyperfractination details (Level and the Instances) which was wrong
		if (form.Hyperfractination().isVisible() && form.Hyperfractination().getValue() && form.Fractions().getValue()!=null && form.Level().getValue() != null && form.Instances().getValue() != null)//WDEV-15276,wdev-16132
			numAppointments = form.Fractions().getValue().intValue() - (form.Level().getValue().intValue() * form.Instances().getValue().intValue()) + form.Instances().getValue().intValue();
		else
 			numAppointments = fractions;

		if (numSelectedDates < numAppointments)
		{
			ShowMessage("Insufficient number of selected appointments.");
			return;
		}
		if (numSelectedDates > numAppointments)
		{
			ShowMessage("Excess number of selected appointments.");
			return;
		}

		int i = 0;
		ArrayList dateSessionSlotsList = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
		if (dateSessionSlotsList != null)
			for (int j = 0; j < dateSessionSlotsList.size(); ++j)
				i += ((DateSessionSlotsClass)dateSessionSlotsList.get(j)).getSlotList().size();			

		if (i < fractions)
		{
			ShowMessage("Insufficient number of selected appointments with slot.");
			return;
		}
		if (i > fractions)
		{
			ShowMessage("Excess number of selected appointments with slot.");
			return;
		}

		if (SetConflicts() == Conflict.getHard())
		{
			ShowMessage("Insufficient privileges.");
			return;
		}
//		#region Get Modality, Energy, Unit
		//08/10/2003 - Get the Modality ID, Energy value and Unit ID for the Booking Confirmation
		if(form.getGlobalContext().CcoSched.Booking.getModalityArrayList() != null)
			form.getGlobalContext().CcoSched.Booking.getModalityArrayList().clear();
		ArrayList Modality = new ArrayList();
		String activityID = "";
		if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() != null)
		{
			if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof PatTreatPlanActionVo)
			{
				PatTreatPlanActionVo	tmp = (PatTreatPlanActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
				activityID = tmp.getActivityIsNotNull()?tmp.getActivity().getID_SchedActivityIsNotNull()?tmp.getActivity().getID_SchedActivity().toString():"":"";
			}
			else if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof ActivityActionVo)
			{
				ActivityActionVo activityAction = (ActivityActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
				activityID = activityAction.getActivityIdIsNotNull()?activityAction.getActivityId().toString():"";

//				Sd_activity_action.Sd_activity_actionRecord activityAction = (Sd_activity_action.Sd_activity_actionRecord)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
//				activityID = activityAction.Activ_id;
			}
		}
		if(activityID.equals("-202") || activityID.equals("-207"))
		{
			Modality.add(form.Modality().getValue());
			Modality.add(form.Energy().getValue() != null?form.Energy().getValue().toString():"");
			Modality.add(form.EnergyUnit().getValue());
			form.getGlobalContext().CcoSched.Booking.setModalityArrayList(Modality);
		}
		//---------------------------------------------------------------------------------------
//		#endregion
		engine.open(form.getForms().CcoSched.BookingConfirmation);
	}
	
	private int SetConflicts()
	{
		int conflictResult = Conflict.getNone();
		form.Calendar().clearConflicts();

		Sd_sessconflicts conflicts = (Sd_sessconflicts)domain.getDTOInstance(Sd_sessconflicts.class);
		conflicts.DataCollection.add();
		Sd_sessconflicts.Sd_sessconflictsRecord conflict = conflicts.DataCollection.get(0);
		conflict.Userid = new Integer(engine.getLoggedInUser().getUserId()).toString();
		ArrayList ds = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
		for(int k=0;ds!=null && k<ds.size(); k++)//WDEV-15276
		{
			DateSessionSlotsClass dataSlot = (DateSessionSlotsClass)ds.get(k);
			//12/01/2005 - Check to see if there is different time for a date having actionID changed.
			int timeRequired = GetSlotTimeRequired(dataSlot.getDate());
			timeRequired  = timeRequired !=-1 && timeRequired != 0 ?timeRequired:form.getGlobalContext().CcoSched.Booking.getTimeRequired().intValue();
			for(int m=0; m<dataSlot.getSlotList().size(); m++)
			{
				String s =  (String)dataSlot.getSlotList().get(m);
				int i = conflict.SeqnoCollection.add();
				Sd_sessconflicts.Sd_sessconflictsSeqnoRecord rep = conflict.SeqnoCollection.get(i);
				rep.Sessionid = dataSlot.getSessionId();
				rep.Sessiondid = dataSlot.getSessionDetailsId();
				String[] str = s.split(":");
				Time dt = new Time(Integer.parseInt(str[0]), Integer.parseInt(str[1]));
				//rep.App_stm = String.Format("{0:D2}{1:D2}00", dt.getHour(), dt.getMinute());
				rep.App_stm = FormatTime(dt.getHour(), dt.getMinute());
				dt.addMinutes(timeRequired);
				//rep.App_etm = String.Format("{0:D2}{1:D2}00", dt.getHour(), dt.getMinute());
				rep.App_etm = FormatTime(dt.getHour(), dt.getMinute());
			}
		}
		Result result = conflicts.transferData("VERIFY");
		if (result != null)
		{
			ShowMessage(result.getMessage());
			return conflictResult;
		}

		int j = 0;
		ArrayList wrongSlots = new ArrayList();
		if(conflicts.DataCollection.count() > 0)
		{
			conflict = conflicts.DataCollection.get(0);
			for(int k=0; k<conflict.SeqnoCollection.count(); k++)
			{
				Sd_sessconflicts.Sd_sessconflictsSeqnoRecord rep = conflict.SeqnoCollection.get(k);
				for(int l=0;ds!=null && l<ds.size(); l++)//WDEV-15276
				{
					DateSessionSlotsClass dataSlot = (DateSessionSlotsClass)ds.get(l);
					if (dataSlot.getSessionId().equals(rep.Sessionid) && dataSlot.getSessionDetailsId().equals(rep.Sessiondid))
					{
						if (rep.Timavail.equals("N") || rep.Userstatusflg.equals("N") || (rep.Userstatusflg.equals("U") && rep.Conflictflg.equals("Y")))
						{
							form.Calendar().addConflict(dataSlot.getDate());
							conflictResult = Conflict.getHard();
							wrongSlots.add(dataSlot);
							++j;
						}
						if (rep.Userstatusflg.equals("S") && rep.Conflictflg.equals("Y"))
						{
							if (conflictResult != Conflict.getHard())
								conflictResult = Conflict.Soft;
							form.Calendar().addConflict(dataSlot.getDate());
							++j;
						}
					}
				}
			}
		}
			
		for(int m=0;ds!=null &&  m<wrongSlots.size(); m++)//WDEV-15276
			ds.remove(wrongSlots.get(m));

		setNumberOfConflicts(j);

		return conflictResult;
	}

	private void setNumberOfConflicts(int value)
	{
		BookingDetailsVo voBookingDetails = form.getLocalContext().getBookingDetails();
		if(voBookingDetails == null)
			voBookingDetails = new BookingDetailsVo();
		
		voBookingDetails.setNumberOfConflicts(Integer.toString(value));
		form.getLocalContext().setBookingDetails(voBookingDetails);
		form.htmlBookingDetails().setHTML(voBookingDetails.toHtml());
	}

	//formatiing the time hhmmss
	private String FormatTime(int hour, int minute)
	{
		StringBuffer time = new StringBuffer(6);
		time.append(hour<10?"0"+ Integer.toString(hour):Integer.toString(hour));
		time.append(minute<10?"0"+ Integer.toString(minute):Integer.toString(minute));
		time.append("00");
		return time.toString();
	}

	protected void OnSessionList() 
	{
		if(form.getGlobalContext().CcoSched.Booking.getSelectedDate() != null)
			engine.open(form.getForms().CcoSched.SessionList);	
	}

//	#region 27/02/2004 Actions dialog changes
	//Actions dialog added
	protected void Actions_Click() 
	{
		form.getGlobalContext().CcoSched.Booking.setCalendarSelectedDates(GetSelectedCalendarDates());
		form.getGlobalContext().CcoSched.Booking.setSelectedActions(GetSelectedActions());

		engine.open(form.getForms().CcoSched.BookingAction);
	} 
	
	private ArrayList GetSelectedCalendarDates()
	{
		//copy the old objects
		ArrayList selectedDates = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
		String action_id = getCurrentActionSelected();
		Date date;
		boolean deleted = true;
		
		//Remove unselected dates (when the user selects a date, changes the action but then deselects that date
		do{
			deleted = false;
			if(selectedDates != null)
			{
				for(int i=0; i<selectedDates.size(); i++)
				{
					int dateIndex = form.Calendar().getSelectedDates().indexOf(((ActionSession)selectedDates.get(i)).getSessionDate());
					if(dateIndex < 0)
					{
						selectedDates.remove(i);
						deleted = true;
						break;
					}
				}
			}
		}
		while(deleted);
		
	
		if(selectedDates == null)
			selectedDates = new ArrayList();
		
		for(int i=0; i<form.Calendar().getSelectedDates().size(); i++)
		{
			date = (Date)form.Calendar().getSelectedDates().get(i);
			//Avoid adding duplicate dates
			if(!DateExists(date, selectedDates))
			{
				//Add a new ActionSession with the date, time and session
				selectedDates.add(new ActionSession(date, action_id, null, getActionData()));
			}
		}
		
		return (ArrayList)selectedDates.clone();
	}
	private String getCurrentActionSelected()
	{
		if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() != null)
		{
			if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof PatTreatPlanActionVo)
			{
				PatTreatPlanActionVo	tmp = (PatTreatPlanActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
				return tmp.getActionIsNotNull()?tmp.getAction().getActionIsNotNull()?tmp.getAction().getAction().getID_ActionIsNotNull()?tmp.getAction().getAction().getID_Action().toString():"":"":"";
			}
			else if(form.getGlobalContext().CcoSched.Booking.getActivityActionSelected() instanceof ActivityActionVo)
			{
				ActivityActionVo activityAction = (ActivityActionVo)form.getGlobalContext().CcoSched.Booking.getActivityActionSelected();
				return activityAction.getActionIsNotNull()?activityAction.getAction().getID_ActionIsNotNull()?activityAction.getAction().getID_Action().toString():"":"";
			}
		}
		
		return "";
	}
	//Check to see if the date has been added in the list (has associated actioID) 
	private boolean DateExists(Date date, ArrayList selectedDates)
	{
		if(selectedDates != null)
		{
			for(int i=0; i<selectedDates.size(); i++)
			{
				if(((ActionSession)selectedDates.get(i)).getSessionDate().equals(date))
					return true;
			}
		}
		return false;
	}
	private ArrayList GetSelectedActions()
	{
		ArrayList actions = new ArrayList();
		String actionID = new String(""), actionTxt = new String("");
		
		if(form.getLocalContext().getActivityTree() != null && form.Activity().getSelectedNode() != null)
		{
			if(form.Activity().getSelectedNode() != null && form.Activity().getSelectedNode().getParent() != null)
			{
				if(form.TreatmentPlanActivities().getValue())
				{
					Hashtable values = form.getLocalContext().getActivityTree();
					PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(form.Activity().getSelectedNode().getParent().getValue());
					ActivityActionVoCollection activityActions = form.getGlobalContext().CcoSched.ActivityView.getActivityActions();

					for (Iterator iter = activityActions.iterator(); iter.hasNext();) {
						ActivityActionVo activityAction = (ActivityActionVo) iter.next();
						//Check if the group and Activity match
						//17/02/2005 - Check if the action is schedulable
						if(activityAction.getGroup().equals(tpActionSelected.getActivityGroup())
								&& tpActionSelected.getActivityIsNotNull()
								&& activityAction.getActivityId().equals(tpActionSelected.getActivity().getActivityId())
								&& activityAction.getActionIsNotNull()
								&& !activityAction.getAction().getSchedFlag().equals("N"))
						{
							actionID	= activityAction.getActionIsNotNull()?activityAction.getAction().getID_ActionIsNotNull()?activityAction.getAction().getID_Action().toString():"":"";
							actionTxt   = activityAction.getActionIsNotNull()?activityAction.getAction().getName():"";
							actions.add(new Object[]{actionID, actionTxt});
						}												
					}
				}
				else
				{
					//Collect all the actions from the tree
					for(int i=0; i< form.Activity().getSelectedNode().getParent().getNodes().size(); i++)
					{
						Hashtable values = form.getLocalContext().getActivityTree();
						ActivityActionVo actionSelected = (ActivityActionVo)values.get(((Integer)form.Activity().getSelectedNode().getParent().getNodes().get(i).getValue()));
						actionID	= actionSelected.getActionIsNotNull()?actionSelected.getAction().getID_ActionIsNotNull()?actionSelected.getAction().getID_Action().toString():"":"";
						actionTxt   = actionSelected.getActionIsNotNull()?actionSelected.getAction().getName():"";
						actions.add(new Object[]{actionID, actionTxt});
					}
				}
			}
		}

		return actions;
	}
//		#endregion 

	private void RemoveActivityActionFromContext()
	{
		Hashtable values = form.getLocalContext().getActivityTree();
		if (form.TreatmentPlanActivities().getValue())
		{
			PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get(form.Activity().getValue());
			PatTreatPlanActionVoCollection tpActivityActions = form.getGlobalContext().CcoSched.ActionUpdate.getTreatmentPlanActions();
			PatTreatPlanActionVoCollection tpUpdatedActivityActions = new PatTreatPlanActionVoCollection();
			if (tpActivityActions != null)
			{
				for (Iterator iter = tpActivityActions.iterator(); iter.hasNext();) 
				{
					PatTreatPlanActionVo tpActivityAction = (PatTreatPlanActionVo) iter.next();
					//Test if the selected activity & action is in the context 
					//http://jira/browse/WDEV-14157
					if(!tpActivityAction.equals(tpActionSelected))
					{
						tpUpdatedActivityActions.add(tpActivityAction);
					}
					//http://jira/browse/WDEV-14157
				}
			}
			
//replaced code
//			Go_ptplact.Go_ptplactRecord tpActionSelected = (Go_ptplact.Go_ptplactRecord)values.get((Integer)form.Activity().getValue());
//			Go_ptplact tpActivityActions = form.getGlobalContext().CcoSched.ActionUpdate.getTreatmentPlanActions();
//			Go_ptplact tpUpdatedActivityActions = (Go_ptplact)domain.getDTOInstance(Go_ptplact.class);
//			for(int i=0; i<tpActivityActions.DataCollection.count(); i++)
//			{
//				Go_ptplact.Go_ptplactRecord tpActivityAction = tpActivityActions.DataCollection.get(i);
//				//Test if the selected activity & action is in the context 
//				if(!tpActivityAction.Activity_id.equals(tpActionSelected.Activity_id) && 
//				   !tpActivityAction.Action_id.equals(tpActionSelected.Action_id))
//				{
//					tpUpdatedActivityActions.DataCollection.add(tpActivityAction);
//				}
//			}

			//Set the value to the context
			if(tpUpdatedActivityActions != null)
				form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(tpUpdatedActivityActions);
		}
	}

	protected void OnFormDialogClosed(FormName formName, DialogResult result) 
	{
		if (result.equals(DialogResult.CANCEL))
			return;

		if (formName.equals(form.getForms().CcoSched.BookingConfirmation))
		{
			if (form.getGlobalContext().CcoSched.Booking.getBookingSucceeded() != null)
			{
				form.getGlobalContext().CcoSched.Booking.setBookingSucceeded(null);
				ShowMessage("Booking succeeded.");
				m_Filter = null; //to refresh booking percentage
				//ICCO675
				RemoveActivityActionFromContext();
				//If there are no activities reload all of them
				if (form.TreatmentPlanActivities().getValue())
				{
					m_NoActionsFlag = false;
					TreatmentPlanActivitiesClick();
					m_NoActionsFlag = true;
				}
			}
            //Set m_DoClear to true for clearing the Calendar after a successful booking
            boolean bClear = false;
            if(m_DoClear == false)
            {
                m_DoClear = true;
                bClear = true;
            }
			onActivityTreeViewSelectionChanged(form.Activity().getSelectedNode());
            //Restore the value
            if(bClear)
                m_DoClear = false;
		}
		else if(formName.equals(form.getForms().CcoSched.BookingAction))
		{
			//Check to see if the actionID has changed from the default value, otherwise delete these dates from the list
			ArrayList selectedDates = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
			ActionSession actionSession;
			boolean bDeleted;
			Date sessionDate = null;
			//Set the percentage for every date
			for(int i=0; i<selectedDates.size(); i++)
			{
				actionSession = (ActionSession)selectedDates.get(i);
				form.Calendar().addPercentage(actionSession.getSessionDate(), actionSession.getPercentage());
			}
			//If the action has changed, reset the old slot time if it was set (as it might differ for the new action selectedfrom)
			//e.g. the time set was 09.18 ( 18 mins time interval) and if the action changed has 20 mins time interval
			//the 09.18 cannot be set
			for(int i=0; i<selectedDates.size(); i++)
			{
				actionSession = (ActionSession)selectedDates.get(i);
				if(actionSession.isActionChanged())
				{
					//Set the session date if it was changed 
					if(form.getGlobalContext().CcoSched.Booking.getSelectedDateIsNotNull() && 
					   form.getGlobalContext().CcoSched.Booking.getSelectedDate().equals(actionSession.getSessionDate()))
					   	sessionDate = actionSession.getSessionDate();
					
					//Clear the flag
					actionSession.setActionChanged(false);
					//Clear the slots time 
					ArrayList dateSessionSlots = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
					if(dateSessionSlots != null)
					{
						for (int j = 0; j < dateSessionSlots.size(); ++j)
						{
							 DateSessionSlotsClass ds = (DateSessionSlotsClass)dateSessionSlots.get(j);
							 if(ds.getDate().equals(actionSession.getSessionDate()))
							 {
							 	ds.setSlotList(new ArrayList());
							 	break;
							 }
						}
					}
				}
			}
			//------end clear slots time----------------------------------
			
			//Delete the dates having the same action as the selected one
			do{
				bDeleted = false; 
				for(int i=0; i<selectedDates.size(); i++)
				{
					actionSession = (ActionSession)selectedDates.get(i);
					if(actionSession.getAction().equals(getCurrentActionSelected()))
					{
						selectedDates.remove(i);
						bDeleted = true;
						break;
					}
				}
			}while(bDeleted);
			//Set the time required
			for(int i=0; i<selectedDates.size(); i++)
			{
				actionSession = (ActionSession)selectedDates.get(i);
				form.Calendar().addPercentage(actionSession.getSessionDate(), actionSession.getPercentage());
				actionSession.setIntervalTimeRequired(GetIntervalTimeRequired(actionSession));
			}
			
			//If the action has changed for the date selected, refresh the Slots
			if(sessionDate != null)
				OnDateSelected(sessionDate);
			
			form.getGlobalContext().CcoSched.Booking.setCalendarSelectedDates(selectedDates);
		}
		else if (formName.equals(form.getForms().CcoSched.ResourceAvailabilty))
		{								
			ArrayList ar = form.getGlobalContext().CcoSched.Booking.getDefaultTime();//Context.ContextBooking.DefaultTime;
			//23/12/2004 - Array list of times - if different from the default time
			ArrayList newTimes = new ArrayList();
			if (ar.size() > 0)
			{	
				form.Calendar().clearNoSlotDates();
//				#region Check the Default Slot that exist for all dates
				for(int i=0; i<form.Calendar().getSelectedDates().size(); i++)
				{
					Date date =  (Date)form.Calendar().getSelectedDates().get(i);
					ArrayList slotsAvailable = GetSlotArrayList(date);
					for(int j=0; j<ar.size(); j++)
					{
						String a = (String)ar.get(j);
						boolean ok = false;
						if(slotsAvailable.contains(a))
							ok = true;
						else
						{
							//04/01/2005
							//apply the +- 10 mins rule (the flag - ims.configuration.gen.ConfigFlag.DTO.SCHEDULER_APPT_INTERVAL.getValue())
							Time newTime = GetRoundedTime((String)ar.get(j), slotsAvailable);
							if(newTime != null)
							{
								newTimes.add(new SlotTime(date, newTime));
								ok = true;
							}
						}
						/*for(int k=0; k<slotsAvailable.size(); k++)
						{
							String s = (String)slotsAvailable.get(k);
							if (s.equals(a))
							{
								ok = true;
								break;
							}
						}*/
						if (!ok)
						{
							ShowMessage("The slot selected is not available for the date " + date.toString(DateFormat.STANDARD));
							form.Calendar().addNoSlotDate(date);
						}
					}
				}
//				#endregion

//				#region Check IntervalRequired of the selected slots.
				ArrayList DatesNoIntervalRequired = new ArrayList();
				for(int i = 0; i<form.Calendar().getSelectedDates().size(); i++)
				{
					Date date = (Date)form.Calendar().getSelectedDates().get(i);				
					GetAlreadyBookedSlots(date);
					ArrayList alreadyBooked = form.getLocalContext().getAlreadyBooked();
					boolean errorIntervalRequired = false;
					if (form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue() > 0)
					{
						for(int j=0; j<alreadyBooked.size(); j++)
						{
							String s = (String) alreadyBooked.get(j);
							String[] time2 = s.split(":");
							
							Time t2 = null;
							try{ t2 = new Time((time2[0] + time2[1] + "00"), TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
							if (t2 == null)
							{
								ShowMessage("Wrong time format");
								return;
							}

							for(int k=0; k<ar.size(); k++)
							{
								String timeS = (String) ar.get(k);
								String[] time = timeS.split(":");
								Time t1 = null;
								try{t1 = new Time((time[0] + time[1] + "00"), TimeFormat.FLAT6);}catch(RuntimeException e ){ShowMessage(e.getMessage());} 
								if (t1 == null)
								{
									ShowMessage("Wrong time format");
									return;
								}

								if (!((CompareTimes(t2, t1) > 0 && (TimeSpan.getTimeSpan(t2, t1).getMinutes() >= form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue()*60)) || (CompareTimes(t2, t1) < 0 && (TimeSpan.getTimeSpan(t1, t2).getMinutes() >= form.getGlobalContext().CcoSched.Booking.getIntervalRequired().intValue()*60))))
								{
									DatesNoIntervalRequired.add(date);
									errorIntervalRequired = true;
									break;
								}
							}
							if (errorIntervalRequired)
								break;
						}
					}
					if (errorIntervalRequired)
					{
						boolean added = false;
						for(int l=0; l<form.Calendar().getNoSlotDates().size(); l++)
						{
							Date d = (Date)form.Calendar().getNoSlotDates().get(l);
							if (d.equals(date)) added = true;
						}
						if (!added)
						{
							ShowMessage("The interval required for the date " + date.toString(DateFormat.STANDARD) + " must be " + form.getGlobalContext().CcoSched.Booking.getIntervalRequired().toString() + " hour(s).");										
							form.Calendar().addNoSlotDate(date);
						}
					}
					
				}
//				#endregion

				ArrayList ds = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
				if (ds == null)
				{
					ds = new ArrayList();
					form.getGlobalContext().CcoSched.Booking.setDateSessionSlotsList(ds);
				}
				ArrayList u = new ArrayList();

				Enumeration objects = form.getGlobalContext().CcoSched.Booking.getSelectedSessions().keys();
				while(objects.hasMoreElements()) 
				{
					Date dt = GetDateFromString((String)objects.nextElement());
					boolean flag = false;
					for (int i = 0; i < ds.size(); i++) 				
					{
						DateSessionSlotsClass d = (DateSessionSlotsClass)ds.get(i);
						if (dt != null && d.getDate().equals(dt))
						{
							boolean bSetSlot = true;
							for (int j = 0; j < form.Calendar().getNoSlotDates().size(); j++) 
							{
								Date noSlotDate = (Date)form.Calendar().getNoSlotDates().get(j);
								if (noSlotDate.equals(d.getDate()))
								{
									bSetSlot = false;
									break;
								}
									
							}
							if (bSetSlot)
							{
								for (int j = 0; j < DatesNoIntervalRequired.size(); j++) 
								{
									Date dIntervalRequired = (Date)DatesNoIntervalRequired.get(j);
									if (dIntervalRequired.equals(d.getDate()))
									{
										bSetSlot = false;
										break;
									}
								}
								if (bSetSlot)
								{
									flag = true;
									boolean bTimeChanged = false;
									d.getSlotList().clear();
									//04/01/2005 - Check if the time has been changed (rounded)
									for(int k=0; k<newTimes.size(); k++)
									{
										SlotTime newTime = (SlotTime)newTimes.get(k);
										if(newTime.getDate().equals(dt))
										{
											//Time in hh:mm format
											d.getSlotList().add(newTime.getTime().toString());
											bTimeChanged = true;
										}
									}
									//end check
									if(!bTimeChanged)
									{
										for (int j = 0; j < ar.size(); j++) 
											d.getSlotList().add(ar.get(j));
									}
									break;
								}
							}								
						}
					}
					if (!flag)
					{
						//Simulate replace split(new char[]{',','+'} C# code
						String[] tmp = StringUtils.splitString(((String)form.getGlobalContext().CcoSched.Booking.getSelectedSessions().get(dt.toString(DateFormat.ISO))).replace(',','+'),"+");
						boolean bSetSlot = true;
						for (int i = 0; i < form.Calendar().getNoSlotDates().size(); i++) 
						{
							Date noSlotDate = (Date)form.Calendar().getNoSlotDates().get(i);
							if (dt != null && noSlotDate.equals(dt))
							{
								bSetSlot = false;
								break;
							}			
						}
						if (bSetSlot)
						{
							for (int i = 0; i < DatesNoIntervalRequired.size(); i++) 
							//foreach (DateTime dIntervalRequired in DatesNoIntervalRequired)
							{
								Date dIntervalRequired = (Date)DatesNoIntervalRequired.get(i);
								if (dt != null && dIntervalRequired.equals(dt))
								{
									bSetSlot = false;
									break;
								}
							}
							if (bSetSlot)
							{
								ArrayList a = new ArrayList();
								boolean bTimeChanged = false;
								//04/01/2005 - Check if the time has been changed (rounded)
								for(int i=0; i<newTimes.size(); i++)
								{
									SlotTime newTime = (SlotTime)newTimes.get(i);
									if(newTime.getDate().equals(dt))
									{
										//Time in hh:mm format
										a.add(newTime.getTime().toString());
										bTimeChanged = true;
									}
								}
								//end check
								if(!bTimeChanged)
								{
									for (int j = 0; j < ar.size(); j++) 
										a.add(ar.get(j));
								}
																
								u.add(new DateSessionSlotsClass(dt, tmp[0], tmp[1], a));
							}
						}
					}
				}
				for (int l = 0; l < u.size(); l++) 
					ds.add(u.get(l));
				//04/03/2004 - set the Slots List 
				form.getGlobalContext().CcoSched.Booking.setDateSessionSlotsList(ds);				
				
				SetDefaultAppointmentTime(ar);
				SetConflicts();
			}
			form.getGlobalContext().CcoSched.Booking.setDefaultTime(null);

			if (form.getGlobalContext().CcoSched.Booking.getSelectedDate() != null)
				SetSlots();
		}		
	}

	private ArrayList GetSlotArrayList(Date date)
	{	
		ArrayList slotAvailable = new ArrayList();
		ArrayList alreadyBooked = new ArrayList();
		form.getLocalContext().setAlreadyBooked(alreadyBooked);
		//07/01/2005 - Check if the date has the action changed - and load the appropriate session
		Hashtable sessionList = getSession(date);
		if(sessionList == null)
			sessionList = form.getGlobalContext().CcoSched.Booking.getSessionList();
		
		String[] sessions = ((String)sessionList.get(date.toString(DateFormat.ISO))).split(",");
		String[] session = StringUtils.splitString(sessions[form.getGlobalContext().CcoSched.Booking.getSessionIndex().intValue()],"+"); // sessions[Context.ContextBooking.SessionIndex] is null ??????????
		if (session.length != 2)
		{
			ShowMessage("Invalid session / session detail format.");
			return new ArrayList();
		}

		form.getGlobalContext().CcoSched.Booking.setSessionId(session[0]);
		form.getGlobalContext().CcoSched.Booking.setSessionDetailsId(session[1]); 

		Sd_sess_appts sessionAppointments = (Sd_sess_appts)domain.getDTOInstance(Sd_sess_appts.class);
		sessionAppointments.Filter.clear();
		sessionAppointments.Filter.Prfile_sess_id = session[0];
		sessionAppointments.Filter.Prfiled_sess_id = session[1];		
		sessionAppointments.Filter.Userrights = new Integer(engine.getLoggedInUser().getUserId()).toString();		
		
		if (form.ListOwner().getValue() != null)
			sessionAppointments.Filter.Loid = form.ListOwner().getValue().Staff_no;
		Result result = sessionAppointments.get();
		if (result != null)
		{
			ShowMessage(result.getMessage());
			return new ArrayList();
		}
		if (sessionAppointments.DataCollection.count() == 0)
		{
			InternalError("No data return for session.");
			return new ArrayList();
		}

		Sd_sess_appts.Sd_sess_apptsRecord sessionAppointment = sessionAppointments.DataCollection.get(0);
		
		Time startTime = null;
		try{startTime = new Time(sessionAppointment.Stm, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());};
		if (startTime == null)
		{
			InternalError("Session start time not returned.");
			return new ArrayList();
		}
		
		Time endTime = null;
		try{ endTime = new Time(sessionAppointment.Etm, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
		if (endTime == null)
		{
			InternalError("Session end time not returned.");
			return new ArrayList();
		}
//			#region 1. find booked periods
		ArrayList bookedPeriods = new ArrayList();
		for (int k = 0; k < sessionAppointment.Seqno3Collection.count(); k++) 
		{
			Sd_sess_appts.Sd_sess_apptsSeqno3Record r = sessionAppointment.Seqno3Collection.get(k);
			if (!r.Appt_stat.equals("-2190") && !r.Appt_stat.equals("-2193") && !r.Appt_stat.equals("-2197")) //Cancelled
			{
				Time startTimeBooked = null;
				try{startTimeBooked = new Time(r.Appt_stm,TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());};
				if (startTimeBooked == null)
				{
					InternalError("Appointment start time not returned.");
					return new ArrayList();
				}
				Time endTimeBooked = null;		
				try{endTimeBooked = new Time(r.Appt_etm, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
				if (endTimeBooked == null)
				{
					InternalError("Appointment end time not returned.");
					return new ArrayList();
				}
				
				boolean self = r.Pkey.equals(form.getGlobalContext().Core.getPatientShort().getPkey().getValue());
				ArrayList intersectedPeriods = new ArrayList();
				for (int l = 0; l < bookedPeriods.size(); l++) 
				{
					Object[] period = (Object[])bookedPeriods.get(l);
					if (CompareTimes(startTimeBooked, (Time)period[1]) < 0 && CompareTimes(endTimeBooked,(Time)period[0]) > 0)
						intersectedPeriods.add(period);
				}

				Time min = startTimeBooked;
				Time max = endTimeBooked;
				for(int l=0; l<intersectedPeriods.size(); l++)
				{
					Object[] period = (Object[])intersectedPeriods.get(l);
					if (CompareTimes((Time)period[0],min) < 0)
						min = (Time)period[0];
					if (CompareTimes((Time)period[1], max) > 0)
						max = (Time)period[1];
				}
				int i = 1;
				for(int l=0; l<intersectedPeriods.size(); l++)
				{
					Object[] o = (Object[])intersectedPeriods.get(l);
					i += ((Integer)o[2]).intValue();
					self |= ((Boolean)o[3]).booleanValue();
					bookedPeriods.remove(o);
				}

				bookedPeriods.add(new Object[]{min, max, new Integer(i), new Boolean(self)});
			}
		}
//			#endregion
//
//			#region 2. find exluded periods
		ArrayList<Time[]> excludedPeriods = new ArrayList<Time[]>();
		for (int i = 0; i < sessionAppointment.Seqno2Collection.count(); i++) 
		{
			Sd_sess_appts.Sd_sess_apptsSeqno2Record r = sessionAppointment.Seqno2Collection.get(i);
			Time startTimeExclusion = null;
			try{ startTimeExclusion = new Time(r.Stm2, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());};
			if (startTimeExclusion == null)
			{
				InternalError("failed to get exclusion time record.");
				return new ArrayList();
			}
			Time endTimeExclusion = null;
			try{endTimeExclusion = new Time(r.Etm2, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());};
			if (endTimeExclusion == null)
			{
				InternalError("failed to get exclusion time record.");
				return new ArrayList();
			}
			ArrayList<Time[]> intersectedPeriods = new ArrayList<Time[]>();
			for (int j = 0; j < excludedPeriods.size(); j++) 
			{	
				Time[] period = excludedPeriods.get(j);
				if (CompareTimes(startTimeExclusion, period[1]) <= 0 && CompareTimes(endTimeExclusion, period[0]) >= 0)
					intersectedPeriods.add(period);
			}

			Time min = startTimeExclusion;
			Time max = endTimeExclusion;
			for (int k = 0; k < intersectedPeriods.size(); k++) 
			{
				Time[] period = intersectedPeriods.get(k);
				if (CompareTimes(period[0], min) < 0)
					min = period[0];
				if (CompareTimes(period[1], max) > 0)
					max = period[1];
			}
			for (int k = 0; k < intersectedPeriods.size(); k++) 
				excludedPeriods.remove(intersectedPeriods.get(k));

			excludedPeriods.add(new Time[]{min, max});
		}
//			#endregion
//
//			#region 3. find purely exluded periods
		ArrayList<Time[]> tmpArr = new ArrayList<Time[]>();
		for (int i = 0; i < bookedPeriods.size(); i++) 
		{
			Object[] bookedPeriod = (Object[]) bookedPeriods.get(i);
			Time s = (Time)bookedPeriod[0];
			Time e = (Time)bookedPeriod[1];

			tmpArr.clear();
			for (int j = 0; j < excludedPeriods.size(); j++) 
				tmpArr.add(excludedPeriods.get(j));

			//http://jira/browse/SITE-370 SN comment in .clear() as loop is causing out of memory error
			if (excludedPeriods!= null && excludedPeriods.size()>0 && excludedPeriods.get(0) == null)
				excludedPeriods.clear();

			for(int j=0; j<tmpArr.size(); j++)
			{
				Time[] excludedPeriod = tmpArr.get(j);
				// exclusion times typically start on the hour 
				if (CompareTimes(s, excludedPeriod[1]) >= 0 || CompareTimes(e, excludedPeriod[0]) <= 0)
					excludedPeriods.add(excludedPeriod);
				else if (CompareTimes(s,excludedPeriod[0]) >= 0 && CompareTimes(s, excludedPeriod[1]) <= 0 && CompareTimes(e, excludedPeriod[1]) > 0)
					excludedPeriods.add(new Time[]{excludedPeriod[1], e});
				else if (CompareTimes(s, excludedPeriod[0]) < 0 && CompareTimes(e, excludedPeriod[0]) >= 0 && CompareTimes(e, excludedPeriod[1]) <= 0)
					excludedPeriods.add(new Time[]{s, excludedPeriod[0]});
				else if (CompareTimes(s, excludedPeriod[0]) >= 0 && CompareTimes(s, excludedPeriod[1]) <= 0 && CompareTimes(e, excludedPeriod[0]) > 0 && CompareTimes(e, excludedPeriod[1]) < 0)
				{
					excludedPeriods.add(new Time[]{excludedPeriod[0], s});
					excludedPeriods.add(new Time[]{e, excludedPeriod[1]});
				}
			}
		}
//			#endregion
//
//			#region 4. find HCP period
		Time startTimeListOwner = null;
		Time endTimeListOwner = null;
		if (form.ListOwner().getValue() != null)
		{
			for (int i = 0; i < sessionAppointment.LoseqnoCollection.count(); i++) 
			//foreach ( dto.Sd_sess_apptsDTO.LoseqnoClient listOwner in sessionAppointment.LoseqnoCollection)
			{
				Sd_sess_appts.Sd_sess_apptsLoseqnoRecord listOwner = sessionAppointment.LoseqnoCollection.get(i);
				if (listOwner.Mos_id.equals(form.ListOwner().getValue().Staff_no)) // WDEV-14146 
				{
					try{startTimeListOwner = new Time(listOwner.Stm1, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
					if (startTimeListOwner == null)
					{
						InternalError("start time for list owner is not supplied.");
						return new ArrayList();
					}
					

					try{ endTimeListOwner = new Time(listOwner.Etm1, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());};
					if (endTimeListOwner == null)
					{
						InternalError("end time for list owner is not supplied.");
						return new ArrayList();
					}
					break;
				}
			}
			if (startTimeListOwner == null)
			{
				//InternalError("list owner is not found.");
				ShowMessage("list owner is not found.");
				return new ArrayList();
			}
		}
//			#endregion
//			
//			#region 5. create slots
		boolean flag = true;
		
		if (sessionAppointment.Userrights.equals("-100"))
			flag = false;
		else if (form.ListOwner().getValue() != null && sessionAppointment.Userrights.equals("-101"))
			for (int i = 0; i < sessionAppointment.LoseqnoCollection.count(); i++) 
			{	
				Sd_sess_appts.Sd_sess_apptsLoseqnoRecord listOwner = sessionAppointment.LoseqnoCollection.get(i);
				if (listOwner.Mos_id.equals(form.ListOwner().getValue().Staff_no)) // WDEV-14146 
				{
					Integer si = GetInteger(listOwner.Loremnoapp);
					if (si != null && si.intValue() == 0)
						flag = false;
					break;
				}
			}
		if (flag)
		{         		
			ArrayList dateSessionSlots = form.getGlobalContext().CcoSched.Booking.getDateSessionSlotsList();
			int timeRequired = GetSlotTimeRequired(date);
			timeRequired = timeRequired !=-1 && timeRequired != 0?timeRequired:form.getGlobalContext().CcoSched.Booking.getTimeRequired().intValue();
			Time slotStartTime = startTime;
			while (true)
			{
				Time slotEndTime = new Time(slotStartTime.getHour(), slotStartTime.getMinute());
				slotEndTime.addMinutes(timeRequired);
				if (CompareTimes(slotEndTime, endTime) > 0)
					break;
				
				flag = false;
				if (sessionAppointment.Userrights.equals("-102"))
					flag = true;
				else
				{
					if (form.ListOwner().getValue() == null)
						flag = true;
					else
					{
						if (CompareTimes(startTimeListOwner, slotStartTime) <= 0 && CompareTimes(slotStartTime, endTimeListOwner) < 0)
							flag = true;
						else
							slotStartTime = new Time(slotEndTime.getHour(), slotEndTime.getMinute());
					}
				}
						
				if (flag)
				{
					for (int i = 0; i < bookedPeriods.size(); i++)
					{
						Object[] bookedPeriod = (Object[])bookedPeriods.get(i);
						if (CompareTimes(slotStartTime, (Time)bookedPeriod[1]) < 0 && CompareTimes(slotEndTime, (Time)bookedPeriod[0]) > 0)
						{
							slotStartTime = (Time)bookedPeriod[1];
							flag = false;
							break;
						}
					}
					if (flag)
					{
						for (int i = 0; i < excludedPeriods.size(); i++)
						//foreach (DateTime[] excludedPeriod in excludedPeriods)
						{
							Time[] excludedPeriod  = excludedPeriods.get(i);
							if (CompareTimes(slotStartTime, excludedPeriod[1]) < 0 && CompareTimes(slotEndTime, excludedPeriod[0]) > 0)
							{							
								slotStartTime = excludedPeriod[1];
								flag = false;
								break;
							}
						}
						if (flag)
						{
							slotAvailable.add(slotStartTime.toString(TimeFormat.DEFAULT));
							slotStartTime = slotEndTime;					
						}
					}
				}
			}
		}
//			#endregion		
		
		return slotAvailable;
	}
	
	protected void TempAddress_Click() 
	{
		engine.open(form.getForms().CcoSched.TemporaryAddress);			
	}
	
	private int CompareTimes(Time t1, Time t2)
	{	
		if(t1.isGreaterThan(t2))
			return 1;
		else if (t1.isLessThan(t2))
			return -1;
		
		return 0;
	}
	
	private void ShowMessage(String message)
	{
		engine.showMessage(message);
	}
	
	private Date GetDateFromString(String date)
	{
		Date dt = null;
		if(date != null && (date.equals("")== false))
		{
			try{dt = new Date(date, DateFormat.ISO);}catch(ParseException e){ShowMessage(e.getMessage());}
		}
		return dt;
	}
    
	private void selectFirstNode()
	{
		if(form.Activity().getNodes().size() > 0 && form.Activity().getValue() == null)
			form.Activity().setValue(form.Activity().getNodes().get(0).getValue());
	}
//	Checks the nearest Time in +-SCHEDULER_APPT_INTERVAL interval
	private Time GetRoundedTime(String slotTime, ArrayList slotsAvailable)
	{
		int nbrMinutes = ims.configuration.gen.ConfigFlag.DTO.SCHEDULER_APPT_INTERVAL.getValue();

		String arTime[] = slotTime.split(":");
		Time selTime = GetTimeFromString(arTime[0]+arTime[1]+"00");
		for(int k=0; k<slotsAvailable.size()-1; k++)
		{
			String[] time1 = ((String)slotsAvailable.get(k)).split(":");
			String[] time2 = ((String)slotsAvailable.get(k+1)).split(":");
			Time lowerBound = GetTimeFromString(time1[0] + time1[1] + "00");
			Time upperBound = GetTimeFromString(time2[0] + time2[1] + "00");
			//Apply the following rule:
			//if between the times get the lowest (if between the boundaries) otherwise the closest
			if(selTime.isGreaterThan(lowerBound) && selTime.isLessThan(upperBound))
			{
				if(TimeInInterval(selTime, lowerBound))
					return lowerBound;
				else if(TimeInInterval(selTime, upperBound))
					return upperBound;
			}
		}
		return null;
	}
	//Checks the time to be in the interval
	private boolean TimeInInterval(Time slotTime, Time boundTime)
	{
		Time upperBoundTime = slotTime.copy(), lowerBoundTime = slotTime.copy();
		int nbrMinutes = ims.configuration.gen.ConfigFlag.DTO.SCHEDULER_APPT_INTERVAL.getValue();
		//Clone the object
		Time newBoundTime = boundTime.copy(); 
		if(slotTime.isGreaterThan(newBoundTime))
		{
			newBoundTime.addMinutes(nbrMinutes);
			if(slotTime.isLessOrEqualThan(newBoundTime))
				return true;
		}
		else if(slotTime.isLessThan(newBoundTime))
		{
			newBoundTime.addMinutes(-nbrMinutes);
			if(slotTime.isGreaterOrEqualThan(newBoundTime))
				return true;
		}
		else
			return true;//equal
		
		return false;
	}
	private Time GetTimeFromString(String time)
	{
		Time tm = null;
		if(time != null && !time.equals(""))
		try{ tm = new Time(time, TimeFormat.FLAT6);}catch(RuntimeException e){ShowMessage(e.getMessage());}
		return tm;
	}
	private ActionData getActionData()
	{
		String groupID = "";
		String activityID = "";
			
		Hashtable values = form.getLocalContext().getActivityTree();
		if (form.TreatmentPlanActivities().getValue())
		{
			PatTreatPlanActionVo tpActionSelected = (PatTreatPlanActionVo)values.get((Integer)form.Activity().getValue());
			groupID = tpActionSelected.getActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroupIsNotNull()?tpActionSelected.getActivityGroup().getID_ActivityGroup().toString():"":"";
			activityID = tpActionSelected.getActivityIsNotNull()?tpActionSelected.getActivity().getID_SchedActivityIsNotNull()?tpActionSelected.getActivity().getID_SchedActivity().toString():"":"";
			
//			Go_ptplact.Go_ptplactRecord tpActionSelected = (Go_ptplact.Go_ptplactRecord)values.get((Integer)form.Activity().getValue());
//			groupID = tpActionSelected.Activitygrp;
//			activityID = tpActionSelected.Activity_id;
		}
		else
		{
			ActivityActionVo actionSelected = (ActivityActionVo)values.get((Integer)form.Activity().getValue());
			groupID = actionSelected.getGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroupIsNotNull()?actionSelected.getGroup().getID_ActivityGroup().toString():"":"";
			activityID = actionSelected.getActivityIdIsNotNull()?actionSelected.getActivityId().toString():"";
		}										

		if ((activityID.equals("-202") || activityID.equals("-207")) && form.Resource().getValue() == null)
		{
			if(form.Energy().getValue() != null)
				ShowMessage("Please select a resource.");
			return null;
		}

		String resourceID = new String();
		String listOwnerID = new String();
		if (activityID.equals("-202") || activityID.equals("-207"))
			resourceID = ((Sd_modactmc.Sd_modactmcRecord)form.Resource().getValue()).Mc_id;
		else
		{
			if (form.Resource().getValue() != null)
			{
				if (form.Resource().getValue() instanceof Sd_mc_act.Sd_mc_actRecord)
				{
					resourceID = ((Sd_mc_act.Sd_mc_actRecord)form.Resource().getValue()).Mc_id;
				}
				else if (form.Resource().getValue() instanceof Sd_modactmcRecord) //WDEV-16936
				{
					resourceID = ((Sd_modactmcRecord)form.Resource().getValue()).Mc_id;
				}
			}
						
			if (form.ListOwner().getValue() != null)
				listOwnerID = form.ListOwner().getValue().Staff_no;
		}

		ActionData actionData = new ActionData();
		actionData.setActivityID(activityID);
		actionData.setGroupID(groupID);
		actionData.setListOwnerID(listOwnerID);
		actionData.setResourceID(resourceID);
		
		return actionData;
	}
	
	private Hashtable getSession(Date selectedDate)
	{
		ArrayList selectedDates = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
		if(selectedDates == null)
			return null;
		ActionSession actionSession;
		for(int i=0; i<selectedDates.size(); i++)
		{
			actionSession = (ActionSession)selectedDates.get(i);
			if(actionSession.getSessionDate().equals(selectedDate))
				return actionSession.getSession();
		}
		
		return null;
	}
	private String getActionText(Date selectedDate)
	{
		ArrayList selectedDates = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
		if(selectedDates == null)
			return "";
		ActionSession actionSession;
		String ActionID = "";
		//Get the ActionID
		for(int i=0; i<selectedDates.size(); i++)
		{
			actionSession = (ActionSession)selectedDates.get(i);
			if(actionSession.getSessionDate().equals(selectedDate))
			{
				ActionID = actionSession.getAction();
				break;
			}
		}
		
		//Get the Action text
		ArrayList actions = GetSelectedActions();
		for(int i=0; i < actions.size(); i++)
		{
			Object[] actionObj = (Object[])actions.get(i);
			if(actionObj[0].toString().equals(ActionID))
				return actionObj[1].toString();
		}
		
		return "";
	}

	//Checks and returns the time required for a date that have the actionID changed
	private int GetSlotTimeRequired(Date sessionDate)
	{
		ArrayList selectedDates = form.getGlobalContext().CcoSched.Booking.getCalendarSelectedDates();
		if(selectedDates != null)
		{
			ActionSession actionSession = null;
			//Find the Action Session for a specified date
			for(int i=0; i<selectedDates.size(); i++)
			{
				actionSession = (ActionSession)selectedDates.get(i);
				if(actionSession.getSessionDate().equals(sessionDate))
					return actionSession.getIntervalTimeRequired();
			}
		}

		return -1;
	}
	
	private int GetIntervalTimeRequired(ActionSession actionSession)
	{
		int defaultInterval = form.getGlobalContext().CcoSched.Booking.getTimeRequired()== null?0:form.getGlobalContext().CcoSched.Booking.getTimeRequired().intValue();
		if(actionSession != null)
		{
			//Use the Group, Activity and Action and obtain the time required.
			Sd_activity_action activityactions = form.getGlobalContext().CcoSched.ActivityView.getActions();
			for (int i = 0; i < activityactions.DataCollection.count(); i++)
			{
				Sd_activity_action.Sd_activity_actionRecord tmp = activityactions.DataCollection.get(i);
				if (tmp.Grp_id.equals(actionSession.getActionData().getGroupID()) && tmp.Activ_id.equals(actionSession.getActionData().getActivityID()) && tmp.Action_id.equals(actionSession.getAction()))
				{
					Integer si = GetInteger(tmp.Tim_req);
					if (si == null)
					{
						InternalError("Time required for the action is null.");
						return defaultInterval;
					}
					if (si.intValue() == 0)
					{
						InternalError("Time required for the action equals to 0.");
						return defaultInterval;
					}
					
					//form.getGlobalContext().Scheduler.Booking.setTimeRequired(si);
					return si.intValue();
				}
			}
		}
		//return default
		return defaultInterval;
	}
	
	//Checks if the sched_flag is set to "N"
	private boolean isTPSchedulable(PatTreatPlanActionVo tpActionSelected)
	{
		ActivityActionVoCollection activityActions = form.getGlobalContext().CcoSched.ActivityView.getActivityActions();		
		
		for (Iterator iter = activityActions.iterator(); iter.hasNext();) {
			ActivityActionVo activityAction = (ActivityActionVo) iter.next();
			
			if (activityAction.getGroup().equals(tpActionSelected.getActivityGroup())  && 
				activityAction.getActivityIdIsNotNull() && 
				activityAction.getActivityId().equals(tpActionSelected.getActivity().getActivityId())&& 
				activityAction.getActionIsNotNull() &&
				activityAction.getAction().equals(tpActionSelected.getAction()) && 
				activityAction.getAction().getSchedFlag().equals("N"))
			{
				return false;
			}

		}
		
		form.getGlobalContext().CcoSched.TreatmentPlan.getAnaesthetic();
		return true;
		
//		Sd_activity_action activityActions = form.getGlobalContext().CcoSched.ActivityView.getActions();
//		Sd_activity_action.Sd_activity_actionRecord activityAction;
//		for(int k=0;k<activityActions.DataCollection.count(); k++)
//		{
//			activityAction = activityActions.DataCollection.get(k); 
//			if (activityAction.Grp_id.equals(tpActionSelected.Activitygrp)  && 
//				activityAction.Activ_id.equals(tpActionSelected.Activity_id)&& 
//				activityAction.Action_id.equals(tpActionSelected.Action_id) && 
//				activityAction.Sched_flag.equals("N"))
//			{
//				return false;
//			}
//		}
//		form.getGlobalContext().CcoSched.TreatmentPlan.getAnaesthetic();
//		return true;
	}
}		
