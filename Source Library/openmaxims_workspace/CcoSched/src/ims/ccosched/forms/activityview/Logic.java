//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.12 build 40412.930)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.activityview;
import ims.alerts.PatientAlertCCO;
import ims.ccosched.Helper.PatientShortHelper;
import ims.ccosched.vo.ActivityViewFilterVo;
import ims.ccosched.vo.PatTreatPlanActionVoCollection;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.lookups.ActionStatusReason;
import ims.ccosched.vo.lookups.ActionStatusReasonCollection;
import ims.ccosched.vo.lookups.LookupHelper;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.dto.client.Lkup;
import ims.dto.client.Patient;
import ims.dto.client.Sd_aalst;
import ims.dto.client.Sd_aalst_pb;
import ims.dto.client.Sd_aalst_pb.Sd_aalst_pbRecord;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_activity_action;
import ims.dto.client.Sd_activity_grp;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupMappingVoCollection;
import ims.vo.LookupTypeVo;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

public class Logic extends BaseLogic
{
	protected void onFormOpen() 
	{
		//wdev-15154
		LookupInstanceCollection voASRColl = domain.getLookupInstances(new LookupTypeVo(1281026));
		for (int j = 0; j < voASRColl.size(); j++)
		{
			LookupInstVo voASR = voASRColl.getIndex(j);
			LookupInstVo instMap = domain.getMappings(voASR);
			LookupMappingVoCollection mapColl = instMap.getMappings();
			
			for (int i = 0; i < mapColl.size(); i++)
			{
				if(mapColl.get(i).getExtCode()!=null && mapColl.get(i).getExtCode().equals("-220")
					&& mapColl.get(i).getExtSystem()!=null && mapColl.get(i).getExtSystem().equals("Maxims Internal"))
					form.getLocalContext().setMinus220(voASR.getID());

				if(mapColl.get(i).getExtCode()!=null && mapColl.get(i).getExtCode().equals("-221")
					&& mapColl.get(i).getExtSystem()!=null && mapColl.get(i).getExtSystem().equals("Maxims Internal"))
					form.getLocalContext().setMinus221(voASR.getID());
				
				if(mapColl.get(i).getExtCode()!=null && mapColl.get(i).getExtCode().equals("-224")
					&& mapColl.get(i).getExtSystem()!=null && mapColl.get(i).getExtSystem().equals("Maxims Internal"))
					form.getLocalContext().setMinus224(voASR.getID());
			}
		}
		
		
/*		Lkup lookupDto = null;
		try
		{
			lookupDto = domain.getLookupInstance(Lookups.SchedulerActionActReason);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
//		form.getLocalContext().setStatus(lookupDto);  
		for(int i=0; lookupDto != null && i<lookupDto.DataCollection.count(); i++)
		{
//			if (lookupDto.DataCollection.get(i).Lkup_id.equals("-2189")) // Open
//				form.Status().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm + " / Arrived");
//			else if ((!lookupDto.DataCollection.get(i).Lkup_id.equals("-2194")) && // if not Arrived, Moved or Rebooked
//					(!lookupDto.DataCollection.get(i).Lkup_id.equals("-2195")) &&
//					(!lookupDto.DataCollection.get(i).Lkup_id.equals("-2196")))
//				form.Status().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm);
			
			if(mapColl.get(i).getExtCode()!=null && mapColl.get(i).getExtCode().equals("-224")
					&& mapColl.get(i).getExtSystem()!=null && mapColl.get(i).getExtSystem().equals("MAXIMS"))
					form.getLocalContext().setMinus224(voASR.getID());
*/
	//	}

		//wdev-15154
			
				
		//Set the default to OrderBy
		clearPIDAndPatient();	
		form.getLocalContext().setChecking(Boolean.FALSE);
		form.DaysWaiting().setValue(true);
		form.getLocalContext().setChecking(Boolean.TRUE);
		form.chkFurtherBooking().setEnabled(false);

		form.ActivityGroup().clear();
		form.Activity().clear();
		form.Action().clear();
		form.Priority().clear();
		form.HCP().clear();
		Clean();

		try
		{
			loadDtoAndLookups();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
		
		loadLastSearchFields();
	}

	private void loadLastSearchFields() {
		ActivityViewFilterVo voActivityViewFilter = form.getGlobalContext().CcoSched.ActivityView.getActivityViewFilterVo();
		if(voActivityViewFilter!=null){
			if(voActivityViewFilter.getActivityGroupIsNotNull()){
				form.ActivityGroup().setValue(voActivityViewFilter.getActivityGroup());
				onActivityGroupValueChanged();
				if(voActivityViewFilter.getActivityIsNotNull()){
					form.Activity().setValue(voActivityViewFilter.getActivity());
					onActivityValueChanged();
				}
				if(voActivityViewFilter.getActionIsNotNull())
					form.Action().setValue(voActivityViewFilter.getAction());
			}
			if(voActivityViewFilter.getPriorityIsNotNull())
				form.Priority().setValue(voActivityViewFilter.getPriority());
			if(voActivityViewFilter.getHCPIsNotNull())
				form.HCP().setValue(voActivityViewFilter.getHCP());
			if(voActivityViewFilter.getDaysWaitingIsNotNull())
				form.DaysWaiting().setValue(voActivityViewFilter.getDaysWaiting());
			if(voActivityViewFilter.getEstStartDateIsNotNull())
				form.EstStartDate().setValue(voActivityViewFilter.getEstStartDate());
			if(voActivityViewFilter.getDateIsNotNull())
				form.Date().setValue(voActivityViewFilter.getDate());			
			if(voActivityViewFilter.getExcludeDelayedIsNotNull())
				form.ExcludeDelayed().setValue(voActivityViewFilter.getExcludeDelayed());
			if(voActivityViewFilter.getFurtherBookingIsNotNull())
				form.chkFurtherBooking().setValue(voActivityViewFilter.getFurtherBooking());
			
			onListPatientsClick();
		}
	}
	
	private void setActivityViewFilter() {
		ActivityViewFilterVo voActivityViewFilter = new ActivityViewFilterVo();
		if(voActivityViewFilter!=null){
			voActivityViewFilter.setActivityGroup(form.ActivityGroup().getValue());
			voActivityViewFilter.setActivity(form.Activity().getValue());
			voActivityViewFilter.setAction(form.Action().getValue());
			voActivityViewFilter.setPriority(form.Priority().getValue());
			voActivityViewFilter.setHCP(form.HCP().getValue());
			voActivityViewFilter.setDaysWaiting(form.DaysWaiting().getValue());
			voActivityViewFilter.setEstStartDate(form.EstStartDate().getValue());
			voActivityViewFilter.setDate(form.Date().getValue());			
			voActivityViewFilter.setExcludeDelayed(form.ExcludeDelayed().getValue());
			voActivityViewFilter.setFurtherBooking(form.chkFurtherBooking().getValue());
		}
		
		form.getGlobalContext().CcoSched.ActivityView.setActivityViewFilterVo(voActivityViewFilter);
	}

	private void clearPIDAndPatient()
	{
		engine.clearAlertsByType(PatientAlertCCO.class);
		form.getGlobalContext().Core.setPatientShort(null);
	}

	private void loadDtoAndLookups() throws DomainInterfaceException
	{
		// load activity groups
		Sd_activity_grp activityGroups = form.getGlobalContext().CcoSched.ActivityView.getActivityGroups();
		if (activityGroups == null)
		{
			activityGroups = domain.listActivityGroups("Y");
			form.getGlobalContext().CcoSched.ActivityView.setActivityGroups(activityGroups);
		}
		for (int i = 0; i < activityGroups.DataCollection.count(); ++i)
			form.ActivityGroup().newRow(activityGroups.DataCollection.get(i).Grp_id, activityGroups.DataCollection.get(i).Grp_nm);

//		if (activitygroupSelected != null)
//			form.ActivityGroup().setValue()Value = activitygroupSelected;
//		
		// load activities
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();
		if (activities == null)
		{
			activities = domain.listActivities("Y", "Y");
			form.getGlobalContext().CcoSched.ActivityView.setActivities(activities);
		}

		// load actions
		Sd_activity_action actions = form.getGlobalContext().CcoSched.ActivityView.getActions(); 
		if (actions == null)
		{
			actions = domain.listActivityAction("Y", "Y");
			form.getGlobalContext().CcoSched.ActivityView.setActions(actions);
		}

		//Forcing to load initial Activity & Action values base on the default selection in the Group combo
		onActivityGroupValueChanged();
		onActivityValueChanged();
//
//		if (activitySelected != null)
//			Form.Activity.Value = activitySelected;
//		if (actionSelected != null)
//			Form.Action.Value = actionSelected;

		// load prioriteis

		Lkup prioriteis = form.getLocalContext().getPriorities();
		if (prioriteis == null)
		{
			prioriteis = domain.getLookupInstance("3201");
			form.getLocalContext().setPriorities(prioriteis);
		}

		for (int i = 0; i < prioriteis.DataCollection.count(); ++i)
			if (prioriteis.DataCollection.get(i).Lkup_stat.equalsIgnoreCase("y") || prioriteis.DataCollection.get(i).Lkup_stat.equals("1"))
				form.Priority().newRow(prioriteis.DataCollection.get(i).Lkup_id, prioriteis.DataCollection.get(i).Lkup_nm);

//		if (prioritySelected != null)
//			Form.Priority.Value = prioritySelected;

		// load HCPs
		//wdev-14544
		HcpLiteVoCollection hcps = form.getLocalContext().getHCPLites();
		form.HCP().clear();
		if(hcps == null)
		{
			hcps = domain.listHCPs();
			form.getLocalContext().setHCPLites(hcps);
		}
		if(hcps != null)
		{
			//hcpVoColl.sort(new ConsultatntNameComparator(SortOrder.ASCENDING)); //wdev-13961  //WDEV-14301
			for (int i = 0; i < hcps.size(); ++i)
			{
				HcpLiteVo consultant = hcps.get(i);
				if(consultant.getIsActiveIsNotNull() && consultant.getIsActive()) 
						form.HCP().newRow(consultant.getID_Hcp().toString(),(consultant.getName().getSurnameIsNotNull() ? consultant.getName().getSurname() : "")  + ", " +(consultant.getName().getForenameIsNotNull()?consultant.getName().getForename():"") );
			}
		}
	

//		if (HCPSelected != null)
//			Form.HCP.Value = HCPSelected;
//
		//Anaesthetic
		Lkup lookupDto =  form.getLocalContext().getAnaesthetic();
		if (lookupDto == null)
		{
			lookupDto = domain.getLookupInstance("3541");
			form.getLocalContext().setAnaesthetic(lookupDto);
		}

		//Technique
		lookupDto =  form.getLocalContext().getTechnique();
		if (lookupDto == null)
		{
			lookupDto = domain.getLookupInstance("3415");
			form.getLocalContext().setTechnique(lookupDto);
		}
	}

	protected void onEstStartDateValueChanged() 
	{
		if(form.getLocalContext().getChecking() != null)
		{	
			if (form.getLocalContext().getChecking().booleanValue())
			{
				if(form.EstStartDate().getValue())
					form.DaysWaiting().setValue(false);
				else
				{
					form.getLocalContext().setChecking(Boolean.FALSE);
					form.DaysWaiting().setValue(true);
				}
			}			
			form.getLocalContext().setChecking(Boolean.TRUE);	
		}
	}

	protected void onDaysWaitingValueChanged() 
	{
		if(form.getLocalContext().getChecking() != null)
		{
			if (form.getLocalContext().getChecking().booleanValue())
			{
				if(form.DaysWaiting().getValue())
					form.EstStartDate().setValue(false);
				else
				{
					form.getLocalContext().setChecking(Boolean.FALSE);
					form.EstStartDate().setValue(true);
				}
			}
			form.getLocalContext().setChecking(Boolean.TRUE);	
		}
	}

	protected void onMainGridSelectionChanged() 
	{
		//03/02/2005 - Set the ActionID in the Context
		String Pt_act_id = "", Pt_tp_id = "", txcattypetxt = "", Act_consultxt = "", Pkey = "", Action_id = "";
		if(form.MainGrid().getValue() instanceof Sd_aalst.Sd_aalstRecord)
		{
			Sd_aalst.Sd_aalstRecord Sd_aalstDto = (Sd_aalst.Sd_aalstRecord)form.MainGrid().getValue();
			Pt_act_id 	= Sd_aalstDto.Pt_act_id;
			Pt_tp_id	= Sd_aalstDto.Pt_tp_id;
			txcattypetxt= Sd_aalstDto.Txcattypetxt;
			Act_consultxt= Sd_aalstDto.Act_consultxt;
			Pkey		= Sd_aalstDto.Pkey;
			Action_id 	= Sd_aalstDto.Action_id;
		}
		else if(form.MainGrid().getValue() instanceof Sd_aalst_pb.Sd_aalst_pbRecord)
		{
			Sd_aalst_pb.Sd_aalst_pbRecord Sd_aalst_pbDto = (Sd_aalst_pb.Sd_aalst_pbRecord)form.MainGrid().getValue();
			Pt_act_id 	= Sd_aalst_pbDto.Pt_act_id;
			Pt_tp_id	= Sd_aalst_pbDto.Pt_tp_id;
			txcattypetxt= Sd_aalst_pbDto.Txcattypetxt;
			Act_consultxt= Sd_aalst_pbDto.Act_consultxt;
			Pkey		= Sd_aalst_pbDto.Pkey;
			Action_id 	= Sd_aalst_pbDto.Action_id;
		}
					
		form.getGlobalContext().CcoSched.ActivityView.setActionID(Pt_act_id);

		form.customControlTreatmentPlan().clear();
		if(Pt_tp_id.length() > 0)
		{
			PatTreatmentPlanLiteVo tpVo = null;
			try
			{
				//actions = domain.getGo_ptplact(form.MainGrid().getValue().Treatpl_act_id);
				tpVo = domain.getTreatmentPlan(new Integer(Pt_act_id));
				if (tpVo.getPatientIsNotNull())
				{
					PatientShort patientVo = domain.getPatient(tpVo.getPatient());
					form.getGlobalContext().Core.setPatientShort(patientVo);
				}
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			form.getGlobalContext().setPatTreatmentPlan(tpVo);

			form.customControlTreatmentPlan().setUpdateContext(Boolean.TRUE);
			form.customControlTreatmentPlan().displayRecordsWithActiveACtions(Pt_tp_id, true);
			form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(Pt_act_id);
		}
		else
		{
			//Clear the TrPlan context variables when no TrPlan associated
			form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);
			form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(null);
			form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(null);
		}

		
		if (!form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			ims.dto.client.Patient patient = null;
			try
			{
				patient = domain.getPatient(Pkey);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			setPatientIntoContext(patient.DataCollection.get(0));

		}
		
		setPIDTooltip(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().getPatTreatmentPlan(), form.getGlobalContext().getPatTreatmentPlan() == null ? null:form.getGlobalContext().getPatTreatmentPlan().getActions());
	}
	
	private void setPIDTooltip(PatientShort patientShort, PatTreatmentPlanLiteVo vo, PatTreatPlanActionVoCollection collection)
	{
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
		engine.addAlert(new ims.alerts.PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltip2(patientShort, vo, collection != null && collection.size() > 0?collection.get(0):null)));
	}

	private void setPatientIntoContext(Patient.PatientRecord patient)
	{
		PatientShort patientShort = new PatientShortHelper().getPatientShort(patient);
		
		ims.core.vo.Patient voPatient = null;

		if(patientShort != null)
		{
			try
			{
				voPatient = domain.getPatient(patientShort);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(e.getMessage());
			}
			catch(DomainInterfaceException exc)
			{
				engine.showMessage(exc.getMessage());
			}
		}
		
		form.getGlobalContext().Core.setPatientShort(voPatient);
	}

	protected void onListPatientsClick() 
	{
		//Force an "Order By" selection
		if(!form.DaysWaiting().getValue() && !form.EstStartDate().getValue())
		{
			engine.showMessage("Please select Order By.");
			return;
		}
		
		//form.Context.ClearActionID();
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);
		//Context.ClearPatientDetails();
		//Context.ClearTreatmentPlanDetails();
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(null);
		//Context.ClearTreatmentPlanActions();
		form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(null);

		Clean();
		if (form.ActivityGroup().getValue() == null || form.Activity().getValue() == null)
		{
			engine.showMessage("Please select activity group and activity.");
			return;
		}

		if(form.chkFurtherBooking().getValue())
			displayBookedPatients();
		else
			displayPatients();
		
		setActivityViewFilter();
	}

	private void displayBookedPatients() 
	{
		String appt_head_id, eb_isbooked, activitygrp, activity_id, eststartdt = null, opa_date, action_id = null, act_priorty = null, act_consult = null, act_status = null, actstat, actdstat;
		
		//13/05/2005 - filter the not booked once (the records with Further Appointments)
		appt_head_id ="!~";
		eb_isbooked  = "N";
		//---------------------------------
		
		//attGrp_id
		activitygrp = form.ActivityGroup().getValue();
		//attActiv_id
		activity_id = form.Activity().getValue();
		if(form.DaysWaiting().getValue() && form.Date().getValue() == null)
			eststartdt = "";
		else if(form.EstStartDate().getValue() && form.Date().getValue() == null)
			eststartdt   = "!~";
		else if (form.Date().getValue() != null)
			eststartdt   = form.Date().getValue().toString(DateFormat.ISO);
		//ICCO691
		opa_date = "~";
		if (form.Action().getValue() != null)
			action_id = form.Action().getValue();
		if (form.Priority().getValue() != null)
			act_priorty = form.Priority().getValue();
		if (form.HCP().getValue() != null)
			act_consult = form.HCP().getValue();
		//ICCO702
		//wdev-15154
		if(!form.ExcludeDelayed().getValue())
			act_status = "!" + (form.getLocalContext().getMinus220IsNotNull() ? form.getLocalContext().getMinus220().toString() : "")
				+ (form.getLocalContext().getMinus224IsNotNull() ? "||" : "")
				+ (form.getLocalContext().getMinus224IsNotNull() ? form.getLocalContext().getMinus224().toString() : ""); //-220||-224";
		else //ICCO681 - added "||-224" to the filter
			act_status = "!" + (form.getLocalContext().getMinus220IsNotNull() ? form.getLocalContext().getMinus220().toString() : "") 
				+ (form.getLocalContext().getMinus221IsNotNull() ? "||" : "")
				+ (form.getLocalContext().getMinus221IsNotNull() ? form.getLocalContext().getMinus221().toString(): "") //-220||-221||-224"
				+ (form.getLocalContext().getMinus224IsNotNull() ? "||" : "")
				+ (form.getLocalContext().getMinus224IsNotNull() ? form.getLocalContext().getMinus224().toString() : ""); //-220||-221||-224";

		actstat = "1";
		actdstat = "1";
		
		Sd_aalst_pb patients = null;
		try
		{
			patients = domain.listBookedPatients(appt_head_id, eb_isbooked, activitygrp, activity_id, eststartdt, opa_date, action_id, act_priorty, act_consult, act_status, actstat, actdstat);
		}
		catch (DomainInterfaceException e1)
		{
			engine.showMessage(e1.getMessage());
			return;
		}
		
		//domain.listBookedPatients(appt_head_id, eb_isbooked, activitygrp, activity_id, eststartdt, opa_date, action_id, act_priorty, act_consult, act_status, actstat, actdstat);
		
		if(form.EstStartDate().getValue())
		{
			ArrayList<Sd_aalst_pbRecord> patientArrayList = new ArrayList<Sd_aalst_pbRecord>();
			for(int i=0; i<patients.DataCollection.count(); i++)
				patientArrayList.add(patients.DataCollection.get(i));
			
			Collections.sort(patientArrayList, new DtoComparer());
			patients.DataCollection.clear();
			
			for(int i=0; i<patientArrayList.size(); i++)
				patients.DataCollection.add(patientArrayList.get(i));
		}

		populateGrid(patients);	
	}

	private void populateGrid(Sd_aalst_pb patients)
	{
		for (int i = 0; i < patients.DataCollection.count(); ++i)
		{
			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();

			Sd_aalst_pbRecord sd_aalst_pbRecord = patients.DataCollection.get(i);
			row.setHospitalNumber(sd_aalst_pbRecord.Hospnum);
			row.setName(sd_aalst_pbRecord.Fnm + " " + sd_aalst_pbRecord.Snm);
			row.setDaysWaiting(getInteger(sd_aalst_pbRecord.Durwait));
			row.setPriority(getPriorityText(sd_aalst_pbRecord.Act_priorty));
			row.setActionStatus(sd_aalst_pbRecord.Act_statustxt);
			row.setStartDate(getDateFromString(sd_aalst_pbRecord.Eststartdt));
			row.setEndDate(getDateFromString(sd_aalst_pbRecord.Estenddate));
			//02/09/2003 - Consultant
			row.setConsultant(sd_aalst_pbRecord.Act_consultxt);

			row.setValue(sd_aalst_pbRecord);
		}

		if (patients.DataCollection.count() == 0)
			engine.showMessage("No records.");
	}

	private Date getDateFromString(String date)
	{
		Date sd = null;
		if(date != null && (date.equals("")== false))
		{
			try{ sd = new Date(date, DateFormat.ISO);
			}
			catch (ParseException e)
			{
				//better not to do anything here as this is mainly used for listing existing appointments.
			}
		}
		return sd;
	}

	private void displayPatients() 
	{
		String appt_head_id, activitygrp, activity_id, eststartdt = null, opa_date, action_id = null, act_priorty = null, act_consult = null, act_status, actstat, actdstat;
		appt_head_id = "~";
		//attGrp_id
		activitygrp = form.ActivityGroup().getValue();
		//attActiv_id
		activity_id = form.Activity().getValue();
		if(form.DaysWaiting().getValue() && form.Date().getValue() == null)
			eststartdt = "";
		else if(form.EstStartDate().getValue() && form.Date().getValue() == null)
			eststartdt   = "!~";
		else if (form.Date().getValue() != null)
			eststartdt   = form.Date().getValue().toString(DateFormat.ISO);
		//ICCO691
		opa_date	   = "~";
		if (form.Action().getValue() != null)
			action_id = form.Action().getValue();
		if (form.Priority().getValue() != null)
			act_priorty = form.Priority().getValue();
		if (form.HCP().getValue() != null)
			act_consult = form.HCP().getValue();
		//ICCO702
		//wdev-15154
		if(!form.ExcludeDelayed().getValue())
			act_status = "!" + (form.getLocalContext().getMinus220IsNotNull() ? form.getLocalContext().getMinus220().toString() : "")
				+ (form.getLocalContext().getMinus224IsNotNull() ? "||" : "")
				+ (form.getLocalContext().getMinus224IsNotNull() ? form.getLocalContext().getMinus224().toString() : ""); //-220||-224";
		else //ICCO681 - added "||-224" to the filter
			act_status = "!" + (form.getLocalContext().getMinus220IsNotNull() ? form.getLocalContext().getMinus220().toString() : "") 
				+ (form.getLocalContext().getMinus221IsNotNull() ? "||" : "")
				+ (form.getLocalContext().getMinus221IsNotNull() ? form.getLocalContext().getMinus221().toString(): "") //-220||-221||-224"
				+ (form.getLocalContext().getMinus224IsNotNull() ? "||" : "")
				+ (form.getLocalContext().getMinus224IsNotNull() ? form.getLocalContext().getMinus224().toString() : ""); //-220||-221||-224";
		
		
//			act_status = "!-220||-224";
//		else //ICCO681 - added "||-224" to the filter
//			act_status = "!-220||-221||-224";

		actstat = "Y";
		actdstat = "Y";
		actstat = "1";
		actdstat = "1";
	
		Sd_aalst patients = null;
		try
		{
			patients = domain.lisPatients(appt_head_id, activitygrp, activity_id, eststartdt, opa_date, action_id, act_priorty, act_consult, act_status, actstat, actdstat);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
				
		if(form.EstStartDate().getValue())
		{
			ArrayList patientArrayList = new ArrayList();
			for(int i=0; patients != null && i<patients.DataCollection.count(); i++)
				patientArrayList.add(patients.DataCollection.get(i));
			
			Collections.sort(patientArrayList, new DtoComparer());
			patients.DataCollection.clear();
			
			for(int i=0; i<patientArrayList.size(); i++)
				patients.DataCollection.add((Sd_aalst.Sd_aalstRecord)patientArrayList.get(i));
		}

		for (int i = 0; i < patients.DataCollection.count(); ++i)
		{
			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();

			row.setHospitalNumber(patients.DataCollection.get(i).Hospnum);
			String name = patients.DataCollection.get(i).Fnm + " " + patients.DataCollection.get(i).Snm;
			row.setName(name);
			row.setTooltipForName(name);
			row.setDaysWaiting(getInteger(patients.DataCollection.get(i).Durwait));

			String priorityText = getPriorityText(patients.DataCollection.get(i).Act_priorty);
			row.setPriority(priorityText);
			row.setTooltipForPriority(priorityText);

			row.setActionStatus(patients.DataCollection.get(i).Act_statustxt);
			row.setTooltipForActionStatus(patients.DataCollection.get(i).Act_statustxt);
			Date sd = getDateFromString(patients.DataCollection.get(i).Eststartdt);
			row.setStartDate(sd);
			
			Date ed = getDateFromString(patients.DataCollection.get(i).Estenddate);
			row.setEndDate(ed);
			//02/09/2003 - Consultant
			row.setConsultant(patients.DataCollection.get(i).Act_consultxt);
			row.setTooltipForConsultant(patients.DataCollection.get(i).Act_consultxt);

			row.setValue(patients.DataCollection.get(i));
		}

		if (patients.DataCollection.count() == 0)
			engine.showMessage("No records.");
	}

	private String getPriorityText(String act_priorty)
	{
		Lkup priorities = form.getLocalContext().getPriorities();
		if(priorities != null)
		{
			for (int j = 0; j < priorities.DataCollection.count(); ++j)
			if (priorities.DataCollection.get(j).Lkup_id.equals(act_priorty))
				return priorities.DataCollection.get(j).Lkup_nm;
		}
		
		return "";
	}

	protected void onActivityValueChanged() 
	{
		Clean();
		if (form.Activity().getValue() != null)
		{
			//Activ_id
			String id = form.Activity().getValue();
			//Grp_id
			String groupId = form.ActivityGroup().getValue();

			//Enable Further Bookink checkbox if -202 or -207  
			form.chkFurtherBooking().setEnabled(id.equals("-202") || id.equals("-207"));
			
			Sd_activity_action actions = form.getGlobalContext().CcoSched.ActivityView.getActions();

			if (actions == null)
				return;
			form.Action().clear();
			for (int i = 0; i < actions.DataCollection.count(); ++i)
			{
				if (actions.DataCollection.get(i).Activ_id.equals(id) && actions.DataCollection.get(i).Grp_id.equals(groupId))
					form.Action().newRow(actions.DataCollection.get(i).Action_id, actions.DataCollection.get(i).Action_nm);
			}
		}
		else //WDEV-14846
		{
			form.Action().clear();
		}
		
	}
	protected void onActivityGroupValueChanged() 
	{
		if(form.ActivityGroup().getValue() == null)
		{
			form.Activity().clear(); //WDEV-14846
			form.Action().clear();
			return;
		}
		String id = form.ActivityGroup().getValue();
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();

		if (activities == null)
		{
			engine.showMessage("Please select activity.");
			return;
		}

		form.Activity().clear();
		for (int i = 0; i < activities.DataCollection.count(); ++i)
		{
			if (activities.DataCollection.get(i).Grp_id.equals(id))
				form.Activity().newRow(activities.DataCollection.get(i).Activ_id, activities.DataCollection.get(i).Activ_nm);
		}

		onActivityValueChanged();
	}
	
	public class DtoComparer implements Comparator
	{
		public int compare(Object x, Object y) 
		{
			if(x instanceof Sd_aalst.Sd_aalstRecord)
			{
				Sd_aalst.Sd_aalstRecord x1 = (Sd_aalst.Sd_aalstRecord)x;
				Sd_aalst.Sd_aalstRecord y1 = (Sd_aalst.Sd_aalstRecord)y;
				return y1.Eststartdt.compareTo(x1.Eststartdt);
			}

            Sd_aalst_pb.Sd_aalst_pbRecord x1 = (Sd_aalst_pb.Sd_aalst_pbRecord)x;
			Sd_aalst_pb.Sd_aalst_pbRecord y1 = (Sd_aalst_pb.Sd_aalst_pbRecord)y;
			return y1.Eststartdt.compareTo(x1.Eststartdt);
		}
	}
	
	private void Clean()
	{
		form.MainGrid().getRows().clear();
		form.customControlTreatmentPlan().clear();
		engine.clearAlertsByType(PatientAlertCCO.class);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().CcoSched.PretreatmentNew) && result.equals(DialogResult.OK))
		{
			//List the patient againwe we did an insert - as the selected record should not appear anymore
			onListPatientsClick();
			form.chkFurtherBooking().setEnabled(false);
		}
	}
	
	private Integer getInteger(String durwait)
	{
		if(durwait != null && durwait.length() > 0)
		{
			try
			{
				return Integer.valueOf(durwait);
			}
			catch(NumberFormatException e)
			{
				engine.showMessage(e.getMessage());
			}
		}
			
		return null;
	}
	
	public void setAnaesthetic(Lkup value)
	{
		form.getGlobalContext().CcoSched.TreatmentPlan.setAnaesthetic(value);
	}
	
	public Lkup getAnaesthetic()
	{
		return form.getGlobalContext().CcoSched.TreatmentPlan.getAnaesthetic();
	}
}
