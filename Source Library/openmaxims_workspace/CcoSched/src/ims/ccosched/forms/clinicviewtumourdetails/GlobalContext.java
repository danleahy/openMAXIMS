//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.clinicviewtumourdetails;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		CcoSched = new CcoSchedContext(context);
		Oncology = new OncologyContext(context);
	}
	public final class CcoSchedContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CcoSchedContext(ims.framework.Context context)
		{
			this.context = context;

			ClinicView = new ClinicViewContext(context);
			TreatmentPlan = new TreatmentPlanContext(context);
		}
		public final class ClinicViewContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private ClinicViewContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getActionIdIsNotNull()
			{
				return !cx_CcoSchedClinicViewActionId.getValueIsNull(context);
			}
			public String getActionId()
			{
				return (String)cx_CcoSchedClinicViewActionId.getValue(context);
			}
		public void setActionId(String value)
		{
				cx_CcoSchedClinicViewActionId.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedClinicViewActionId = new ims.framework.ContextVariable("CcoSched.ClinicView.ActionId", "_cv_CcoSched.ClinicView.ActionId");
			private ims.framework.Context context;
		}
		public final class TreatmentPlanContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private TreatmentPlanContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getTechniqueIsNotNull()
			{
				return !cx_CcoSchedTreatmentPlanTechnique.getValueIsNull(context);
			}
			public ims.dto.client.Lkup getTechnique()
			{
				return (ims.dto.client.Lkup)cx_CcoSchedTreatmentPlanTechnique.getValue(context);
			}
		public void setTechnique(ims.dto.client.Lkup value)
		{
				cx_CcoSchedTreatmentPlanTechnique.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedTreatmentPlanTechnique = new ims.framework.ContextVariable("CcoSched.TreatmentPlan.Technique", "_cv_CcoSched.TreatmentPlan.Technique");
			private ims.framework.Context context;
		}


		public ClinicViewContext ClinicView;
		public TreatmentPlanContext TreatmentPlan;
		private ims.framework.Context context;
	}
	public final class OncologyContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private OncologyContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getSelectedPrimaryTumourDetailIsNotNull()
		{
			return !cx_OncologySelectedPrimaryTumourDetail.getValueIsNull(context);
		}
		public ims.oncology.vo.PrimaryTumourDetailsShortVo getSelectedPrimaryTumourDetail()
		{
			return (ims.oncology.vo.PrimaryTumourDetailsShortVo)cx_OncologySelectedPrimaryTumourDetail.getValue(context);
		}

		private ims.framework.ContextVariable cx_OncologySelectedPrimaryTumourDetail = new ims.framework.ContextVariable("Oncology.SelectedPrimaryTumourDetail", "_cv_Oncology.SelectedPrimaryTumourDetail");

		private ims.framework.Context context;
	}
	public boolean getPatTreatmentPlanIsNotNull()
	{
		return !cx_PatTreatmentPlan.getValueIsNull(context);
	}
	public ims.ccosched.vo.PatTreatmentPlanLiteVo getPatTreatmentPlan()
	{
		return (ims.ccosched.vo.PatTreatmentPlanLiteVo)cx_PatTreatmentPlan.getValue(context);
	}
		public void setPatTreatmentPlan(ims.ccosched.vo.PatTreatmentPlanLiteVo value)
		{
		cx_PatTreatmentPlan.setValue(context, value);
		}

	private ims.framework.ContextVariable cx_PatTreatmentPlan = new ims.framework.ContextVariable("PatTreatmentPlan", "_cv_PatTreatmentPlan");

	public CcoSchedContext CcoSched;
	public OncologyContext Oncology;
}
