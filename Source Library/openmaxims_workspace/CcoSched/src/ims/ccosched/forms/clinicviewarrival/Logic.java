//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.18 build 40610.1450)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.clinicviewarrival;

import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.dto.Result;
import ims.dto.client.Lkup;
import ims.dto.client.Sd_appt_dts;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
public class Logic extends BaseLogicDTO
{
	private final static String NewLine = System.getProperty("line.separator");
	
	protected void onFormOpen()
	{
		// load actions
		Lkup actions = (Lkup)domain.getDTOInstance(Lkup.class);
		actions.Filter.clear();
		actions.Filter.Lkup_typ = "3485";
		Result result = actions.list();
		if (result != null)
		{
			engine.showMessage(result.getMessage());
			return;
		}
		for (int i = 0; i < actions.DataCollection.count(); ++i)
			if (actions.DataCollection.get(i).Lkup_stat.equalsIgnoreCase("Y") || actions.DataCollection.get(i).Lkup_stat.equals("1"))
				form.Action().newRow(actions.DataCollection.get(i).Lkup_id, actions.DataCollection.get(i).Lkup_nm);

		// load patient information
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		form.PatientHospitalNumber().setValue(patient.getHospnum() != null ? patient.getHospnum().getValue() : "");
		form.PatientName().setValue(patient.getNameIsNotNull() ? patient.getName().getForename() + " " + patient.getName().getSurname() : "");
		form.PatientDOB().setValue(patient.getDobIsNotNull() ? patient.getDob().toString() : "");

		if (patient.getAddressIsNotNull()) //WDEV-14471
		{
			PersonAddress tempAddress = patient.getAddress();
			
			if (tempAddress != null)
			{
			StringBuffer address = new StringBuffer(200);

			if (tempAddress.getLine1IsNotNull())
			{
			address.append(tempAddress.getLine1());
			address.append(NewLine);
			}

			if (tempAddress.getLine2IsNotNull())
			{
			address.append(tempAddress.getLine2());
			address.append(NewLine);
			}

			if (tempAddress.getLine3IsNotNull())
			{
			address.append(tempAddress.getLine3());
			address.append(NewLine);
			}

			if (tempAddress.getLine4IsNotNull())
			{
			address.append(tempAddress.getLine4());
			address.append(NewLine);
			}

			form.PatientAddress().setValue(address.toString());
			}
		}
		
	
		form.PatientCategory().setValue(form.getGlobalContext().CcoSched.ClinicView.getCategory() != null ? form.getGlobalContext().CcoSched.ClinicView.getCategory() : "");
		form.Comment().setValue(form.getGlobalContext().CcoSched.ClinicView.getBookingComment());

		EnableArrivalControls(false);

		OpenAppointments();

	}
	protected void onAppointmentsGridSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		appointmentsGridSelectionChanged();
	}
    private void appointmentsGridSelectionChanged() 
    {
        DisplayArrivalDetails();
		form.Save().setEnabled(isSaveBtnEnableable());
    }
	protected void onAllAppointmentsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		DisplayArrivalDetails();
		form.Save().setEnabled(isSaveBtnEnableable());
	}
	protected void onSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.Time().getValue() == null)
		{
			engine.showMessage("Please select a time.");
			return;
		}

		if(form.Action().getValue() == null)
		{
			engine.showMessage("Please select a Location.");
			return;
		}

		//Update all the records - apply to all appointments
		//except Cancelled reallocate, Cancel not Reallocate & Arrived
		if(form.AllAppointments().getValue())
		{
			for(int i=0; i<form.AppointmentsGrid().getRows().size(); i++)
			{
				//12/06/2003 - Allow only 
				if(form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2189") || //Open
						form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2194") || //Rebooked
						form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2195") || //Moved
						form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2197"))   //Cancel Died
				{
					
					Sd_appt_dts appts = (Sd_appt_dts)domain.getDTOInstance(Sd_appt_dts.class);
					appts.Filter.clear();
					appts.Filter.Appt_head_id = form.AppointmentsGrid().getRows().get(i).getValue().Appt_head_id;
					appts.Filter.Appt_id = form.AppointmentsGrid().getRows().get(i).getValue().Appt_id;

					Result result = appts.get();
					if(result != null)
					{
						engine.showMessage(result.getMessage());
						return;
					}

					result = appts.getForUpdate();
					if(result != null)
					{
						engine.showMessage(result.getMessage());
						return;
					}

					appts.DataCollection.get(0).Arr_tme = form.Time().getValue().toString(TimeFormat.FLAT6);
					appts.DataCollection.get(0).Att_stat = form.Action().getValue();
					//appts.Sd_appt_dtsCollection[0].attHcp_booking1 = Context.UserID;
					appts.DataCollection.get(0).Appt_stat = "-2196"; // Arrived
					//19/01/2005 - Please update Apptinpatstat depending on the ploc value (0 = No Impat)
					appts.DataCollection.get(0).Appinpatstat = isInpatient(appts.DataCollection.get(0).Ploc)?"Y":"N";
					//---------------------------------------------------------------------

					result = appts.update();
					if (result != null)
					{
						engine.showMessage(result.getMessage());
						return;
					}                        
				}
			}
		}
		else
		{
			//10/06/2003 - Update the Sd_appt_dtsDTO
			if(form.getLocalContext().getappt_dts() != null)
			{
				Sd_appt_dts appts = form.getLocalContext().getappt_dts();
								
				Result result = appts.getForUpdate();
				if(result != null)
				{
					engine.showMessage(result.getMessage());
					return;
				}
				
				appts.DataCollection.get(0).Arr_tme = form.Time().getValue().toString(TimeFormat.FLAT6);
				appts.DataCollection.get(0).Att_stat = form.Action().getValue();
				//appts.Sd_appt_dtsCollection[0].attHcp_booking1 = Context.UserID;
				appts.DataCollection.get(0).Appt_stat = "-2196"; // Arrived
				//19/01/2005 - Please update Apptinpatstat depending on the ploc value (0 = No Impat)
				appts.DataCollection.get(0).Appinpatstat = isInpatient(appts.DataCollection.get(0).Ploc)?"Y":"N";
				//---------------------------------------------------------------------
				result = appts.update();
				if(result != null)
				{
					engine.showMessage(result.getMessage());
					return;
				}
			}
		}

		engine.close(DialogResult.OK);
	}
	protected void onCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private void EnableArrivalControls(boolean bEnable)
	{
		form.Time().setEnabled(bEnable);
		form.Action().setEnabled(bEnable);
		form.AllAppointments().setEnabled(bEnable); 
	}
	
	private void OpenAppointments()
	{
		Sd_appt_dts appDetails = (Sd_appt_dts)domain.getDTOInstance(Sd_appt_dts.class);
		appDetails.Filter.clear();
		//Pkey
		if(form.getGlobalContext().Core.getPatientShortIsNotNull()
			&& form.getGlobalContext().Core.getPatientShort().getPkey() != null)
			appDetails.Filter.Pkey = form.getGlobalContext().Core.getPatientShort().getPkey().getValue();
		//Date			
		if(form.getGlobalContext().CcoSched.ClinicView.getDate().length() > 0)
			appDetails.Filter.Sess_dt = form.getGlobalContext().CcoSched.ClinicView.getDate();

		Result result = appDetails.list();
		if (result != null)
		{
			engine.showMessage(result.getMessage());
			return;
		}

		for (int i = 0; i < appDetails.DataCollection.count(); ++i)
		{
			GenForm.AppointmentsGridRow row = form.AppointmentsGrid().getRows().newRow();
			
			if (appDetails.DataCollection.get(i).First_appt_id.equalsIgnoreCase(appDetails.DataCollection.get(i).Appt_id))
				row.setBooking(form.getImages().CcoSched.First);
			else if (appDetails.DataCollection.get(i).Last_appt_id.equalsIgnoreCase(appDetails.DataCollection.get(i).Appt_id))
				row.setBooking(form.getImages().CcoSched.Last);
			Time dt = null;
			try
			{
				dt = new Time(appDetails.DataCollection.get(i).Stm, TimeFormat.FLAT6);
			}
			catch (Exception e)
			{
				dt = null;
			}
			
			row.setAppointmentTime(dt == null ? "" : dt.toString());
			row.setClinicName(appDetails.DataCollection.get(i).Prfile_sess_idtxt);
			row.setConsultant(appDetails.DataCollection.get(i).Act_consulttxt);
			row.setStatus(appDetails.DataCollection.get(i).Appt_stattxt);

			row.setValue(appDetails.DataCollection.get(i));
		}

		int nCount = form.AppointmentsGrid().getRows().size();
		if (nCount == 0)
			engine.showMessage("No records.");			

		//Select the record from the parent
		if(nCount > 0)
		{
			for(int i=0; i<nCount;i++)
			{
				if(form.AppointmentsGrid().getRows().get(i).getValue().Appt_id.equalsIgnoreCase(form.getGlobalContext().CcoSched.ClinicView.getApptId()) && form.AppointmentsGrid().getRows().get(i).getValue().Appt_head_id.equalsIgnoreCase(form.getGlobalContext().CcoSched.ClinicView.getApptHead_id()))
				{
					form.AppointmentsGrid().setValue(form.AppointmentsGrid().getRows().get(i).getValue());
                    appointmentsGridSelectionChanged();
					break;
				}
			}
		}
	}
	
	private boolean isSaveBtnEnableable()
	{
		Sd_appt_dts.Sd_appt_dtsRecord val = null;
		
		if(form.AppointmentsGrid().getSelectedRowIndex() >=0)
		{
			val = (Sd_appt_dts.Sd_appt_dtsRecord)form.AppointmentsGrid().getValue();
			
			if(val.Appt_stat.equals("-2190") || val.Appt_stat.equals("-2193"))
			{
				if(form.AllAppointments().getValue() && RecordsToBeArrived())
					return true;
				else
					return false;
			}
		}

		return true;
	}
	
	private boolean RecordsToBeArrived()
	{
		for(int i=0; i<form.AppointmentsGrid().getRows().size(); i++)
		{
			if(form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2189") || //Open
					form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2194") || //Rebooked
					form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2195") || //Moved
					form.AppointmentsGrid().getRows().get(i).getValue().Appt_stat.equals("-2197"))   //Cancel Died
				return true;
		}

		return false;
	}

	
	private void DisplayArrivalDetails()
	{
		form.Comment().setValue(form.getGlobalContext().CcoSched.ClinicView.getBookingComment());
		
		Sd_appt_dts.Sd_appt_dtsRecord val = (Sd_appt_dts.Sd_appt_dtsRecord)form.AppointmentsGrid().getValue();
		//10/06/2003 - Do a Get in Sd_appt_dtsDTO (instead of sd_appt)
		Sd_appt_dts appts = (Sd_appt_dts)domain.getDTOInstance(Sd_appt_dts.class);
		appts.Filter.clear();
		appts.Filter.Appt_head_id = val.Appt_head_id;//Context.ContextClinicView.AppointmentHeaderID;
		appts.Filter.Appt_id = val.Appt_id;//Context.ContextClinicView.AppointmentID;

		Result result = appts.get();
		if(result != null)
		{
			engine.showMessage(result.getMessage());
			return;
		}
		
		form.getLocalContext().setappt_dts(appts);
		
		EnableArrivalControls(true);
		//If Unarrival was pressed don't default the Time to now.
		boolean defaultTime = true;
		
		if(appts.DataCollection.count()  > 0)
		{
			Time Dtodt = null;
			
			try
			{
				Dtodt = new Time(appts.DataCollection.get(0).Arr_tme, TimeFormat.FLAT6);
			}
			catch (Exception e)
			{
				Dtodt = null;
			}
			
			if(Dtodt != null)
				form.Time().setEnabled(false);
			
			if(defaultTime)
				form.Time().setValue(Dtodt == null ? new Time() : Dtodt);
			else
				form.Time().setValue(null);

			//15/02/2006 - Kevin requirement - don't refresh the Location
			//form.Action().setValue(appts.DataCollection.get(0).Att_stat);
		}
	}
	
	protected void onFormClosing(CancelArgs args) throws PresentationLogicException
	{
		//10018:Appointments is no longer used
		//UIEngine.Context.Remove("10018:Appointments");
	}
	
	private boolean isInpatient(String Ploc)
	{
		Integer ploc = GetInteger(Ploc);
		if(ploc == null || ploc.intValue() == 0)
			return false;
		else
			return true;
	}
	private Integer GetInteger(String val)
	{
		Integer newVal = null;
		if(val != null && !val.equals(""))
		{
			try{newVal = Integer.valueOf(val);}
			catch(NumberFormatException e)
			{engine.showMessage(e.getMessage());}
		}

		return newVal;	
	}
}
