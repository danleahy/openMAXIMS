//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
 // This code was generated by Alexie Ursache using IMS Development Environment (version 1.22 build 41124.1200)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.firstappointmentsearch;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import ims.alerts.PatientAlertCCO;
import ims.ccosched.Helper.PatientShortHelper;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_activity_grp;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Patient.PatientRecord;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		clearPIDAndPatient();
		loadData();
	}
	
	private void clearPIDAndPatient()
	{
		engine.clearAlertsByType(PatientAlertCCO.class);
		form.getGlobalContext().Core.setPatientShort(null);
	}
	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(checkManadatory())
		{
			form.grdPatients().getRows().clear();
			Sd_appt sd_appt;
			try
			{
				sd_appt = domain.listAppointments(form.cmbGroup().getValue(), form.cmbActivity().getValue(), form.dteDate().getValue().toString(DateFormat.ISO));
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			ArrayList<Appointment> appointments = new ArrayList<Appointment>(sd_appt.DataCollection.count());
			for(int i=0; i<sd_appt.DataCollection.count(); i++)
			{
				Appointment appt = new Appointment();
				appt.setName(sd_appt.DataCollection.get(i).Forname + " " + sd_appt.DataCollection.get(i).Surname);
				appt.setHospNum(sd_appt.DataCollection.get(i).Hospnum);
				appt.setAge(getAge(sd_appt.DataCollection.get(i).Dob));
				appt.setMachine(getMachine(sd_appt.DataCollection.get(i)));
				appt.setConsultant(sd_appt.DataCollection.get(i).Act_consulttxt);
				appt.setFirstAppTime(getTime(sd_appt.DataCollection.get(i).First_appt_att_time));
				appt.setPkey(sd_appt.DataCollection.get(i).Pkey);
				
				appointments.add(appt);
			}

			sortAppointmentsByMachineAndAttTime(appointments);
			
			for(int i=0; i<appointments.size(); i++)
			{
				Appointment appt = appointments.get(i);
				GenForm.grdPatientsRow row = form.grdPatients().getRows().newRow();
				row.setName(appt.getName());
				row.setHospNum(appt.getHospNum());
				row.setAge(appt.getAge());
				row.setMachine(appt.getMachine());
				row.setConsultant(appt.getConsultant());
				row.setAttTime(appt.getFirstAppTime());
				row.setValue(appt.getPkey());
			}
			//wdev-12471
			if(appointments == null || appointments.size() == 0)
				engine.showMessage("No records found.");
			//----------
		}
	}
	protected void onCmbGroupValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		groupValueChanged();
	}
	
	protected void onGrdPatientsSelectionChanged() throws PresentationLogicException
	{
		Patient patient;
		try
		{
			if(form.grdPatients().getValue() == null)
			{
				engine.showMessage("Cannot get Patient for null pkey");
				return;
			}
			patient = domain.getPatient(form.grdPatients().getValue());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Core.setPatientShort(null);//WDEV-15386
			return;
		}
	
		if(patient.DataCollection.count() > 0)
		{
			PatientRecord patientRecord = patient.DataCollection.get(0);
			
			if(patientRecord.Dod == "" || patientRecord.Dod.equals("0"))
				form.getGlobalContext().CcoSched.PatientSearch.setAlive(Boolean.TRUE);
			else
				form.getGlobalContext().CcoSched.PatientSearch.setAlive(null);
			
			setPatientIntoContext(patientRecord);
			setPIDTooltip();
		}
	}
	private void setPIDTooltip()
	{
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
		engine.addAlert(new ims.alerts.PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltip(form.getGlobalContext().Core.getPatientShort(), null, null)));
	}
	
	private void setPatientIntoContext(Patient.PatientRecord patient)
	{
		PatientShort patientShort = new PatientShortHelper().getPatientShort(patient);
		
		ims.core.vo.Patient voPatient = null;

		if(patientShort != null)
		{
			try
			{
				voPatient = domain.getPatient(patientShort);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(e.getMessage());
			}
			catch (DomainInterfaceException exc)
			{
				engine.showMessage(exc.getMessage());
			}
		}
		
		form.getGlobalContext().Core.setPatientShort(voPatient);
	}
	
    private void groupValueChanged() 
    {
        String id = form.cmbGroup().getValue();
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();

		if (activities == null)
		{
			showMessage("Please select Activity.");
			return;
		}

		form.cmbActivity().clear();
		for (int i = 0; i < activities.DataCollection.count(); ++i)
		{
			if (activities.DataCollection.get(i).Grp_id.equals(id))
				form.cmbActivity().newRow(activities.DataCollection.get(i).Activ_id, activities.DataCollection.get(i).Activ_nm);
		}
    }
	private void loadData()
	{
		LoadGroups();
		LoadActivities();
		form.dteDate().setValue(new Date());
	}
	private void LoadGroups()
	{
		Sd_activity_grp activityGroups = form.getGlobalContext().CcoSched.ActivityView.getActivityGroups();
		if (activityGroups == null)
		{
			try
			{
				activityGroups = domain.listGroups("Y");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			form.getGlobalContext().CcoSched.ActivityView.setActivityGroups(activityGroups);
		}
		for (int i = 0; i < activityGroups.DataCollection.count(); ++i)
			form.cmbGroup().newRow(activityGroups.DataCollection.get(i).Grp_id, activityGroups.DataCollection.get(i).Grp_nm);

		if(form.cmbGroup().getValue() != null)
		{
			LoadActivities();
			groupValueChanged();
		}
	}
	private void LoadActivities()
	{
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();
		if (activities == null)
		{
			try
			{
				activities = domain.listActivities("Y", "Y");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			form.getGlobalContext().CcoSched.ActivityView.setActivities(activities);
		}
	}
	private boolean checkManadatory()
	{
		if(form.cmbGroup().getValue() == null)
		{
			showMessage("Activity Group is mandatory.");
			return false;
		}
		if(form.cmbActivity().getValue() == null)
		{
			showMessage("Activity is mandatory.");
			return false;
		}
		if(form.dteDate().getValue() == null)
		{
			showMessage("Date is mandatory");
			return false;
		}
		
		return true;
	}
	private String getAge(String dob)
	{
		Date dateSvrDate = domain.getDateTime().getDate();
		Date dateDob 	 = getDate(dob);
		if(dateDob != null)
			return String.valueOf(dateSvrDate.yearDiff(dateDob));
		
		return "";
	}
	private Date getDate(String date)
	{
		Date dt = null;
		if(date != null && !date.equals(""))
		try{dt = new Date(date, DateFormat.ISO);}catch(ParseException e){showMessage(e.getMessage());}
		return dt;
	}
	private String getTime(String isoTime)
	{
		Time tm = null;
		if(isoTime != null && !isoTime.equals(""))
		try{ tm = new Time(isoTime, TimeFormat.FLAT6);}catch(RuntimeException e){showMessage(e.getMessage());}
		if(tm != null)
			return tm.toString(TimeFormat.DEFAULT);
		
		return "";
	}
	private void showMessage(String message)
	{
		engine.showMessage(message);
	}
	private String getMachine(Sd_appt.Sd_apptRecord sd_apptRecord)
	{
		Sd_appt_dts app_dtsRec = null;
		try
		{
			app_dtsRec = domain.getMachine(sd_apptRecord.Appt_head_id, sd_apptRecord.First_appt_id);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
		
		return app_dtsRec != null?app_dtsRec.DataCollection.get(0).Mc_nm:"";
	}
	
	private void sortAppointmentsByMachineAndAttTime(ArrayList appointments) 
	{
		Collections.sort(appointments, new MachineAndTimeComparer());
	}
	
	public class MachineAndTimeComparer implements Comparator
	{
		public int compare(Object o1, Object o2)
		{
			if(o1 instanceof Appointment && o2 instanceof Appointment)
			{
				Appointment appt1 = (Appointment)o1;
				Appointment appt2 = (Appointment)o2;
				
				return (appt1.getMachine() + appt1.getFirstAppTime()).compareTo(appt2.getMachine() + appt2.getFirstAppTime());
			}
			
			return 0;
		}		
	}
	
	public class Appointment
	{
		private String	name;
		private String	hospNum;
		private String	age;
		private String	machine;
		private String	consultant;
		private String	firstAppTime;
		private String	pkey;

		public Appointment(){}
				
		public String getAge()
		{
			return age;
		}

		public void setAge(String age)
		{
			this.age = age;
		}

		public String getFirstAppTime()
		{
			return firstAppTime;
		}

		public void setFirstAppTime(String attTime)
		{
			this.firstAppTime = attTime;
		}

		public String getConsultant()
		{
			return consultant;
		}

		public void setConsultant(String consultant)
		{
			this.consultant = consultant;
		}

		public String getHospNum()
		{
			return hospNum;
		}

		public void setHospNum(String hospNum)
		{
			this.hospNum = hospNum;
		}

		public String getMachine()
		{
			return machine;
		}

		public void setMachine(String machine)
		{
			this.machine = machine;
		}

		public String getName()
		{
			return name;
		}

		public void setName(String name)
		{
			this.name = name;
		}

		public String getPkey()
		{
			return pkey;
		}

		public void setPkey(String pkey)
		{
			this.pkey = pkey;
		}
	}
}
