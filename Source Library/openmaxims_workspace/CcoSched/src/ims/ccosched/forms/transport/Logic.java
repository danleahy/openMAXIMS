//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.20 build 40806.1730)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.transport;

import ims.ccosched.Helper.DateHelper;
import ims.ccosched.Helper.PatientShortHelper;
import ims.ccosched.vo.TransportFilterDataVo;
import ims.core.helper.DTOHelper;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CommChannelVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.lookups.AddressType;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupMapping;
import ims.dto.client.Go_ptplact;
import ims.dto.client.Lkup;
import ims.dto.client.Patient;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Patient.PatientRecord;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.vo.LookupInstVo;
import ims.vo.LookupMappingVo;
import ims.vo.LookupMappingVoCollection;

public class Logic extends BaseLogic
{
	private final static String NewLine = System.getProperty("line.separator");
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		Clean();
		ClearPatientControls();
		form.bTransport().setEnabled(false);
		EnableStatusControls(false);
		LoadAppointmentStatus();
	}
	private void LoadAppointmentStatus()
	{
		// Status
		if (form.Status().getValues().size() == 0)
		{
			Lkup lookupDto = domain.getLookupInstance("3449");
			form.getLocalContext().setStatus(lookupDto);  
			if (lookupDto != null && lookupDto.DataCollection.count() > 1)
			{
				form.Status().newRow("-1", "All Status");
				//03/06/2003 - ICCO705
				form.Status().newRow("-2", GetStatusText("-2189")+" / "+GetStatusText("-2196")+" / "+GetStatusText("-2192"));//Open/Arrived/Attended
			}
			for(int i=0; lookupDto != null && i<lookupDto.DataCollection.count(); i++)
			{
				if (lookupDto.DataCollection.get(i).Lkup_id == "-2189") // Open
					form.Status().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm + " / Arrived");
				else if ((lookupDto.DataCollection.get(i).Lkup_id != "-2194") && // if not Arrived, Moved or Rebooked
					(lookupDto.DataCollection.get(i).Lkup_id != "-2195") &&
					(lookupDto.DataCollection.get(i).Lkup_id != "-2196"))
					form.Status().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm);
			}

			//12/06/2003 - Change the default to Open/Arrived/Attended
			form.Status().setValue("-2");
		}
	}
	private String GetStatusText(String lkup_id)
	{
		if(form.getLocalContext().getStatus() != null)
		{
			Lkup lookupDto = form.getLocalContext().getStatus();
			for(int i=0; i<lookupDto.DataCollection.count(); i++)
			{
				if (lookupDto.DataCollection.get(i).Lkup_id.equals(lkup_id))
					return lookupDto.DataCollection.get(i).Lkup_nm;
			}
		}

		return "";
	}
	private void EnableStatusControls(boolean bEnable)
	{
		form.Status().setVisible(bEnable);
		form.lblStatus().setVisible(bEnable);
	}
	private void ClearPatientControls()
	{
		form.PatientHospitalNumber().setValue("");
		form.PatientName().setValue("");
		form.PatientDOB().setValue("");
		form.PatientAddress().setValue("");
		form.PatientPostCode().setValue("");
		form.PatientCategory().setValue("");
		form.PatientHCP().setValue("");
		form.DayPhone().setValue("");
		form.NightPhone().setValue("");
		form.tempAddress().setValue("");
		form.tempPostCode().setValue("");
		form.tempDayPhone().setValue("");
		form.tempNightPhone().setValue("");

		SetTransportUpdateContext(form.PatientCategory().getValue(), form.PatientHCP().getValue());
	}
	private void SetTransportUpdateContext(String category, String hcp)
	{
		form.getGlobalContext().CcoSched.Transport.setCategory(category);
		form.getGlobalContext().CcoSched.Transport.setHCP(hcp);
	}
	private void Clean()
	{
		form.MainGrid().getRows().clear();
		form.DetailsGrid().getRows().clear();
		form.getGlobalContext().Core.setPatientShort(null);
	}
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().CcoSched.TransportUpdate) && result.equals(DialogResult.OK))
		{				
			OnListAppointments();				
		}
	}
	protected void onFormClosing(ims.framework.delegates.CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
	{
		//Variables used only for TransportUpdate dialog
		form.getGlobalContext().CcoSched.Transport.setCategory(null);
		form.getGlobalContext().CcoSched.Transport.setHCP(null);
	}
	protected void onDetailsGridSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//
	}
	protected void onStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.Status().getVisible() && form.MainGrid().getSelectedRowIndex() >= 0)
			DisplayDetails();
	}
	protected void onMainGridSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		setSelectionMainGrid();//WDEV-16569
		
	}
	
	//WDEV-16569
	private void setSelectionMainGrid() 
	{
		if(form.Status().getVisible() == false)
		{
			EnableStatusControls(true);
		}

		DisplayDetails();
		setPIDTooltip();	
	}
	private void setPIDTooltip()
	{
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
		engine.addAlert(new ims.alerts.PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltip(form.getGlobalContext().Core.getPatientShort(), null, null)));
	}
	
	private void displayPatientRecord(ims.core.vo.Patient patient)
	{
		if(patient == null)
			return;
		 
		//Context.ContextClinicView.PatientDetails = patient;

		form.PatientHospitalNumber().setValue(patient.getPatId((PatIdType.HOSPNUM)).getValue());
		form.PatientName().setValue(patient.getName().getForename() + " " + patient.getName().getSurname());
		
		if (patient.getDobIsNotNull())
			form.PatientDOB().setValue(patient.getDob().toString());

		StringBuffer address = new StringBuffer(150);
		if (patient.getAddress() != null && patient.getAddress().getAddressBuildingName() != null)
		{
			address.append(patient.getAddress().getAddressBuildingName());
			address.append(NewLine);
		}
		if (patient.getAddressIsNotNull() && patient.getAddress().getAddressStreet() != null)
		{
			address.append(patient.getAddress().getAddressStreet());
			address.append(NewLine);
		}
		
		if (patient.getAddressIsNotNull() && patient.getAddress().getAddressLocality() != null)
		{
			address.append(patient.getAddress().getAddressLocality());
			address.append(NewLine);
		}
		
		if (patient.getAddressIsNotNull() && patient.getAddress().getAddressPostTown() != null)
		{
			address.append(patient.getAddress().getAddressPostTown());
			address.append(NewLine);
		}
		
		if (patient.getAddressIsNotNull() && patient.getAddress().getAddressLine5() != null)
			address.append(patient.getAddress().getAddressLine5());
		
		form.PatientAddress().setValue(address.toString());
		
		if (patient.getAddressIsNotNull() && patient.getAddress().getPostCode() != null)
			form.PatientPostCode().setValue(patient.getAddress().getPostCode());
		CommChannelVo homePhone =patient.getCommunicationChannel(ChannelType.HOME_PHONE);
		if (homePhone != null)
			form.DayPhone().setValue(homePhone.getCommValue());
		
		CommChannelVo workPhone =patient.getCommunicationChannel(ChannelType.WORK_PHONE);
		if (workPhone != null)
			form.NightPhone().setValue(workPhone.getCommValue());

		for( int i = 0 ; i < patient.getAddresses().size() ; i++)
		{
			if (patient.getAddresses().get(i).getAddressTypeIsNotNull())
			{
				LookupInstVo instMap = domain.getMappings(patient.getAddresses().get(i).getAddressType());
				LookupMappingVoCollection mapColl = instMap.getMappings();
				for (int j = 0; j < mapColl.size(); j++)
				{
					LookupMappingVo valueObject = mapColl.get(j);
				
					if(valueObject.getExtCode()!=null && valueObject.getExtCode().equals("C")
						&& valueObject.getExtSystem()!=null && valueObject.getExtSystem().equals("PAS"))
					{
						PersonAddress voTempAddress = patient.getAddresses().get(i);
						
						//start WDEV-14811
						StringBuffer tempAddress = new StringBuffer(150);
						
						if (voTempAddress != null && voTempAddress.getLine1() != null)
						{
							tempAddress.append(voTempAddress.getLine1());
							tempAddress.append(NewLine);
						}
						
						if (voTempAddress != null && voTempAddress.getLine2() != null)
						{
							tempAddress.append(voTempAddress.getLine2());
							tempAddress.append(NewLine);
						}
						
						if (voTempAddress != null && voTempAddress.getLine3() != null)
						{
							tempAddress.append(voTempAddress.getLine3());
							tempAddress.append(NewLine);
						}
						
						if (voTempAddress != null && voTempAddress.getLine4() != null)
						{
							tempAddress.append(voTempAddress.getLine4());
							tempAddress.append(NewLine);
						}
						
						form.tempAddress().setValue(tempAddress.toString());
						
						if (voTempAddress.getPostCodeIsNotNull())
						{
							form.tempPostCode().setValue(voTempAddress.getPostCode());
						}
						
						if (voTempAddress.getOtherphoneIsNotNull())
						{
							form.tempDayPhone().setValue(voTempAddress.getOtherphone());
						}
						
						if (voTempAddress.getPhoneIsNotNull())
						{
							form.tempNightPhone().setValue(voTempAddress.getPhone());
						}
						//end WDEV-14811
					}
				}
			}
		}
		
		form.PatientCategory().setValue("");
		form.PatientHCP().setValue("");
		TransportFilterDataVo voData = form.MainGrid().getValue();
		//if(ids.length > 2 && !ids[2].equals(""))
		if(voData != null && voData.getTreatpl_act_idIsNotNull() && voData.getTreatpl_act_id().equals("") == false)
		{
			Go_ptplact actionsDto;
			try
			{
				actionsDto = domain.getActionDto(voData.getTreatpl_act_id());
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			form.PatientCategory().setValue(actionsDto.DataCollection.get(0).Txcattypetxt);
			form.PatientHCP().setValue(actionsDto.DataCollection.get(0).Act_consultxt);
			SetTransportUpdateContext(form.PatientCategory().getValue(), form.PatientHCP().getValue());
		}

		SetTransportUpdateContext(form.PatientCategory().getValue(), form.PatientHCP().getValue());
	}

	private void DisplayDetails() 
	{
		ClearPatientControls(); //WDEV-14811
		TransportFilterDataVo vo = form.MainGrid().getValue();
		if (!form.getGlobalContext().Core.getPatientShortIsNotNull() || (form.getGlobalContext().Core.getPatientShortIsNotNull() && (vo == null || !vo.getPatient().equals(form.getGlobalContext().Core.getPatientShort().getID_Patient()))))
		{
			form.getGlobalContext().Core.setPatientShort(null);  // reset it as it's different
			// Set GC for Patient Short if not already set
			if (vo != null && vo.getPatient() != null && !vo.getPatient().equals(""))
			{
				try 
				{
					ims.core.vo.Patient voFullPatient= domain.getFullPatient(new PatientRefVo(Integer.valueOf(vo.getPatient()),0));
					form.getGlobalContext().Core.setPatientShort(voFullPatient);
					displayPatientRecord(voFullPatient);
				} 
				catch (NumberFormatException e)
				{
					engine.showMessage(e.getMessage());
					return;
				} catch (DomainInterfaceException e) 
				{
					engine.showMessage(e.getMessage());
					return;
				} catch (StaleObjectException e) 
				{
					engine.showMessage(e.getMessage());
					return;
				}
			}
		}
		
		form.DetailsGrid().getRows().clear();
		
		String appt_head_id = form.MainGrid().getValue().getAppt_head_id();
		String appt_stat = null;
		String act_comp_flg = null;
//		02/09/2003 - Add the Patient Appointment Status as per Clinic View
		if(form.Status().getValue() != null && form.Status().getValue() != "-1")
		{
			if (form.Status().getValue().equals("-2189")) // When Open we want the Moved, Arrived and Rebooked as well.
			{
				appt_stat = form.Status().getValue() + " || " + "-2194" + " || " + "-2195" + " || " + "-2196"; 
				act_comp_flg = "~";
			}
			else if (form.Status().getValue().equals("-2198")) 
			{
				act_comp_flg = "Y";
			}
			else if(form.Status().getValue().equals("-2"))
			{
				//ICCO705
				appt_stat = "-2189|-2192|-2194|-2195|-2196";//Open/Attended/Rebooked/Moved/Arrived
				act_comp_flg = "~";
			}
			else
				appt_stat = form.Status().getValue();
		}
		
		Sd_appt_dts apptDetails;
		try
		{
			apptDetails = domain.getAppointments(appt_head_id, appt_stat, act_comp_flg);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		//foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient ap in apptDetails.Sd_appt_dtsCollection)
		for (int i = 0; i < apptDetails.DataCollection.count(); i++)
		{
			Sd_appt_dts.Sd_appt_dtsRecord ap = apptDetails.DataCollection.get(i);

			GenForm.DetailsGridRow row = form.DetailsGrid().getRows().newRow();
			//row.Value	= new object[]{ap.Appt_head_id, ap.Appt_id};

			//#region 11/03/2004 - Change Impatient to Attended As - why is not coming back in a LIST????
			row.setAttendingAs(ap.Attnd_astxt);
//			if (ap.Attnd_asid == "-401" || ap.Attnd_asid == "-402")
//				row.Inpatient = Form._Images.Scheduler.Inpatient;
			//#endregion
			Date sessDate = null;
			try
			{
				sessDate = new Date(ap.Sess_dt, DateFormat.ISO);
			} catch (Exception e)
			{
				sessDate = null;
			}
			row.setDate(sessDate == null ? "" : sessDate.toString());
			
			Time apptTime = null;
			try
			{
				apptTime = new Time(ap.Att_tm, TimeFormat.FLAT6);
			} catch (Exception e)
			{
				apptTime = null;
			}
			row.setAttTime(apptTime == null ? "" : apptTime.toString());
			
			row.setType(ap.Trans_typtxt);
			row.setClinicName(ap.Prfile_sess_idtxt);
			row.setStatus(ap.Appt_stattxt);
			
		}
		
	}
	protected void onListAppointmentsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		OnListAppointments();
	}
	protected void onBTransportClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.MainGrid().getValue()!= null)
		{
			form.getGlobalContext().CcoSched.Trasport.setAppointmentHeaderID(form.MainGrid().getValue().getAppt_head_id());
			engine.open(form.getForms().CcoSched.TransportUpdate);
		}
	}

	private void OnListAppointments()
	{
		Clean();	
		ClearPatientControls();
		EnableStatusControls(false);

		if(!CheckDates())
			return;

		String first_appt_date = null;
		String tran_arrnge_req = null;
		//ICCO647 - 10/04/2003
		if(form.StartDate().getValue() != null && form.EndDate().getValue() == null)
		{
			first_appt_date = ">" + form.StartDate().getValue().toString(DateFormat.ISO);
		}
		if(form.StartDate().getValue() == null && form.EndDate().getValue() != null)
		{
			first_appt_date = "<" + form.EndDate().getValue().toString(DateFormat.ISO);
		}
		else if(form.StartDate().getValue() != null && form.EndDate().getValue() != null)
		{
			first_appt_date = form.StartDate().getValue().toString(DateFormat.ISO) + "|" + form.EndDate().getValue().toString(DateFormat.ISO);
		}

		tran_arrnge_req = "Y";
		
		Sd_appt appointment;
		try
		{
			appointment = domain.listAppointments(first_appt_date, tran_arrnge_req);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		//foreach (dto.Sd_apptDTO.Sd_apptClient ap in appointment.Sd_apptCollection)
		for (int i = 0; i < appointment.DataCollection.count(); i++)
		{
			Sd_appt.Sd_apptRecord ap = appointment.DataCollection.get(i);
			
			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();
			//31/08/05 - move the Object[]{ap.Appt_head_id, ap.Pkey, ap.Treatpl_act_id} into a new vo
			//as the getValues() framework method cannot instantiate a [][n] object but a [n][n] one..
			TransportFilterDataVo voData = new TransportFilterDataVo();
			voData.setAppt_head_id(ap.Appt_head_id);
			voData.setPkey(ap.Pkey);
			voData.setTreatpl_act_id(ap.Treatpl_act_id);
			voData.setPatient(ap.Patient);
			row.setValue(voData);
			row.setHospNum(ap.Hospnum);
			row.setName(ap.Forname + " " + ap.Surname);
			row.setHCP(ap.Act_consulttxt);
			Date firstApp = null;
			try
			{
				firstApp = new Date(ap.First_appt_date, DateFormat.ISO);
			} 
			catch (Exception e)
			{
				firstApp = null;
			}
			row.setFirstApp(firstApp == null ? "" : firstApp.toString());
			row.setActivity(ap.First_appt_activitytxt);
		}

		if (appointment.DataCollection.count() == 0)
			engine.showMessage("No records.");


		if (appointment.DataCollection.count() == 0)
			form.bTransport().setEnabled(false);
		else
		{
			
			if(form.MainGrid().getRows().size()> 0)
			{
				form.MainGrid().setValue(form.MainGrid().getRows().get(0).getValue());
				
				//WDEV-16569
				setSelectionMainGrid();
				
				form.bTransport().setEnabled(true);
			}
			
			//Force a selection
			//OnTreeViewSelectionChanged(null);
		}
	}
	private boolean CheckDates()
	{
		if(form.StartDate().getValue() != null && form.EndDate().getValue() != null)
		{
			if(form.StartDate().getValue().isGreaterThan(form.EndDate().getValue()))
			{
				engine.showMessage("Start Date must be greater than End Date.");
				return false;
			}
		}
		else if(form.StartDate().getValue() == null && form.EndDate().getValue() == null)
		{
			engine.showMessage("Please enter Start Date or End Date.");
			return false;
		}

		return true;
	}
}
