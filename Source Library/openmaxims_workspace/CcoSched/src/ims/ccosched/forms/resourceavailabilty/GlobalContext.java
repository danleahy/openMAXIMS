//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.resourceavailabilty;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		CcoSched = new CcoSchedContext(context);
		Core = new CoreContext(context);
	}
	public final class CcoSchedContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CcoSchedContext(ims.framework.Context context)
		{
			this.context = context;

			Booking = new BookingContext(context);
			Rebooking = new RebookingContext(context);
		}
		public final class BookingContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private BookingContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getCategoryIsNotNull()
			{
				return !cx_CcoSchedBookingCategory.getValueIsNull(context);
			}
			public String getCategory()
			{
				return (String)cx_CcoSchedBookingCategory.getValue(context);
			}
		public void setCategory(String value)
		{
				cx_CcoSchedBookingCategory.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingCategory = new ims.framework.ContextVariable("CcoSched.Booking.Category", "_cv_CcoSched.Booking.Category");
			public boolean getDefaultTimeIsNotNull()
			{
				return !cx_CcoSchedBookingDefaultTime.getValueIsNull(context);
			}
			public java.util.ArrayList getDefaultTime()
			{
				return (java.util.ArrayList)cx_CcoSchedBookingDefaultTime.getValue(context);
			}
		public void setDefaultTime(java.util.ArrayList value)
		{
				cx_CcoSchedBookingDefaultTime.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingDefaultTime = new ims.framework.ContextVariable("CcoSched.Booking.DefaultTime", "_cv_CcoSched.Booking.DefaultTime");
			public boolean getSelectedSessionsIsNotNull()
			{
				return !cx_CcoSchedBookingSelectedSessions.getValueIsNull(context);
			}
			public java.util.Hashtable getSelectedSessions()
			{
				return (java.util.Hashtable)cx_CcoSchedBookingSelectedSessions.getValue(context);
			}
		public void setSelectedSessions(java.util.Hashtable value)
		{
				cx_CcoSchedBookingSelectedSessions.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingSelectedSessions = new ims.framework.ContextVariable("CcoSched.Booking.SelectedSessions", "_cv_CcoSched.Booking.SelectedSessions");
			public boolean getStartDateIsNotNull()
			{
				return !cx_CcoSchedBookingStartDate.getValueIsNull(context);
			}
			public ims.framework.utils.Date getStartDate()
			{
				return (ims.framework.utils.Date)cx_CcoSchedBookingStartDate.getValue(context);
			}
		public void setStartDate(ims.framework.utils.Date value)
		{
				cx_CcoSchedBookingStartDate.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingStartDate = new ims.framework.ContextVariable("CcoSched.Booking.StartDate", "_cv_CcoSched.Booking.StartDate");
			public boolean getEndDateIsNotNull()
			{
				return !cx_CcoSchedBookingEndDate.getValueIsNull(context);
			}
			public ims.framework.utils.Date getEndDate()
			{
				return (ims.framework.utils.Date)cx_CcoSchedBookingEndDate.getValue(context);
			}
		public void setEndDate(ims.framework.utils.Date value)
		{
				cx_CcoSchedBookingEndDate.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingEndDate = new ims.framework.ContextVariable("CcoSched.Booking.EndDate", "_cv_CcoSched.Booking.EndDate");
			public boolean getIntervalRequiredIsNotNull()
			{
				return !cx_CcoSchedBookingIntervalRequired.getValueIsNull(context);
			}
			public Integer getIntervalRequired()
			{
				return (Integer)cx_CcoSchedBookingIntervalRequired.getValue(context);
			}
		public void setIntervalRequired(Integer value)
		{
				cx_CcoSchedBookingIntervalRequired.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingIntervalRequired = new ims.framework.ContextVariable("CcoSched.Booking.IntervalRequired", "_cv_CcoSched.Booking.IntervalRequired");
			public boolean getListOwnerIsNotNull()
			{
				return !cx_CcoSchedBookingListOwner.getValueIsNull(context);
			}
			public ims.dto.client.Sd_activstaff.Sd_activstaffRecord getListOwner()
			{
				return (ims.dto.client.Sd_activstaff.Sd_activstaffRecord)cx_CcoSchedBookingListOwner.getValue(context);
			}
		public void setListOwner(ims.dto.client.Sd_activstaff.Sd_activstaffRecord value)
		{
				cx_CcoSchedBookingListOwner.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingListOwner = new ims.framework.ContextVariable("CcoSched.Booking.ListOwner", "_cv_CcoSched.Booking.ListOwner");
			public boolean getTimeRequiredIsNotNull()
			{
				return !cx_CcoSchedBookingTimeRequired.getValueIsNull(context);
			}
			public Integer getTimeRequired()
			{
				return (Integer)cx_CcoSchedBookingTimeRequired.getValue(context);
			}
		public void setTimeRequired(Integer value)
		{
				cx_CcoSchedBookingTimeRequired.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingTimeRequired = new ims.framework.ContextVariable("CcoSched.Booking.TimeRequired", "_cv_CcoSched.Booking.TimeRequired");
			public boolean getTransportIsNotNull()
			{
				return !cx_CcoSchedBookingTransport.getValueIsNull(context);
			}
			public String getTransport()
			{
				return (String)cx_CcoSchedBookingTransport.getValue(context);
			}
		public void setTransport(String value)
		{
				cx_CcoSchedBookingTransport.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedBookingTransport = new ims.framework.ContextVariable("CcoSched.Booking.Transport", "_cv_CcoSched.Booking.Transport");
			private ims.framework.Context context;
		}
		public final class RebookingContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private RebookingContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getActivityIsNotNull()
			{
				return !cx_CcoSchedRebookingActivity.getValueIsNull(context);
			}
			public String getActivity()
			{
				return (String)cx_CcoSchedRebookingActivity.getValue(context);
			}
		public void setActivity(String value)
		{
				cx_CcoSchedRebookingActivity.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CcoSchedRebookingActivity = new ims.framework.ContextVariable("CcoSched.Rebooking.Activity", "_cv_CcoSched.Rebooking.Activity");
			private ims.framework.Context context;
		}

		public boolean getLoggedInUserIdIsNotNull()
		{
			return !cx_CcoSchedLoggedInUserId.getValueIsNull(context);
		}
		public String getLoggedInUserId()
		{
			return (String)cx_CcoSchedLoggedInUserId.getValue(context);
		}

		private ims.framework.ContextVariable cx_CcoSchedLoggedInUserId = new ims.framework.ContextVariable("CcoSched.LoggedInUserId", "_cvp_CcoSched.LoggedInUserId");

		public BookingContext Booking;
		public RebookingContext Rebooking;
		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		private ims.framework.Context context;
	}

	public CcoSchedContext CcoSched;
	public CoreContext Core;
}
