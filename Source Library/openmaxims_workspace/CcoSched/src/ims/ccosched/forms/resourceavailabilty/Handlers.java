//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.resourceavailabilty;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void OnFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnDefaultTime(int column, GenForm.SetDefaultGridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnCancel() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnRefresh() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnOk() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnPattern() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnAvailabilityPatternClick(ims.framework.utils.Time value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void OnDateSelected(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				OnFormOpen();
			}
		});
		this.form.SetDefaultGrid().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				OnDefaultTime(column, new GenForm.SetDefaultGridRow(row), isChecked);
			}
		});
		this.form.Cancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnCancel();
			}
		});
		this.form.Refresh().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnRefresh();
			}
		});
		this.form.Ok().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnOk();
			}
		});
		this.form.Pattern().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				OnPattern();
			}
		});
		this.form.AvailabilityPattern().setAvailabilityControlClickEvent(new AvailabilityControlClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.utils.Time value) throws ims.framework.exceptions.PresentationLogicException
			{
				OnAvailabilityPatternClick(value);
			}
		});
		this.form.DateRange().setTreeViewSelectionChangedEvent(new TreeViewSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
			{
				OnDateSelected(node);
			}
		});
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
