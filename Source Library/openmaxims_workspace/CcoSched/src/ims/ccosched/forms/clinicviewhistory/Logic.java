//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.18 build 40610.1200)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.clinicviewhistory;

import java.text.ParseException;
import java.util.Iterator;
import java.util.TreeMap;

import ims.dto.Result;
import ims.dto.client.Sd_appt_hist;
import ims.dto.client.Sd_appt_hist.Sd_appt_histRecord;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;

public class Logic extends BaseLogicDTO
{
	protected void onFormOpen()
	{
		if(form.getGlobalContext().CcoSched.ClinicView.getApptHead_id() != null &&  form.getGlobalContext().CcoSched.ClinicView.getApptId() != null)
		{     
			Sd_appt_hist sd_appt_histDto = (Sd_appt_hist)domain.getDTOInstance(Sd_appt_hist.class);
			if(!form.getGlobalContext().CcoSched.ClinicView.getApptId().equals(""))
				sd_appt_histDto.Filter.Appt_id = form.getGlobalContext().CcoSched.ClinicView.getApptId();
			if(!form.getGlobalContext().CcoSched.ClinicView.getApptHead_id().equals(""))
				sd_appt_histDto.Filter.Appt_head_id = form.getGlobalContext().CcoSched.ClinicView.getApptHead_id();
			
			Result result = sd_appt_histDto.list();

			if(result != null)
			{
				engine.showMessage(result.getMessage());
				return;
			}

			//Treemap sorts automatically the based on the key
			TreeMap<String, Sd_appt_histRecord> mapCollection = new TreeMap<String, Sd_appt_histRecord>();
			for(int i=0; i<sd_appt_histDto.DataCollection.count(); i++)
			{
				Sd_appt_histRecord sd_appt_histRecord = sd_appt_histDto.DataCollection.get(i);
				mapCollection.put(sd_appt_histRecord.Appt_hist_id + "_" + sd_appt_histRecord.Appt_id3, sd_appt_histRecord);
			}
			
			//Populate the grid 
			for (Iterator iter = mapCollection.values().iterator(); iter.hasNext();)
			{
				GenForm.TreatmentSiteRow row = form.TreatmentSite().getRows().newRowAt(0);
				Sd_appt_histRecord sd_appt_histRecord = (Sd_appt_histRecord) iter.next();
				Date dt = getDateFromString(sd_appt_histRecord.Hist_dt);
				row.setDateOfAppt(dt == null ? "" : dt.toString(DateFormat.STANDARD));
				row.setStatus(sd_appt_histRecord.Hist_typetxt);
				dt = getDateFromString(sd_appt_histRecord.Hist_cdate);
				row.setDateChanged(dt == null ? "" : dt.toString(DateFormat.STANDARD));
				row.setReason(sd_appt_histRecord.Hist_reastxt);

			}
		}
	}
	
	private Date getDateFromString(String date)
	{
		try
		{
			return new Date(date, DateFormat.ISO);
		}
		catch(ParseException e){}
		
		return null;
	}
	protected void onOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
}
