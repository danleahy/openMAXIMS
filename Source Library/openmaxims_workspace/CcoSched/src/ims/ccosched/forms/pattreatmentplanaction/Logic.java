//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ccosched.forms.pattreatmentplanaction;

import ims.ccosched.forms.pattreatmentplanaction.GenForm.GridStatusRow;
import ims.ccosched.forms.pattreatmentplanaction.GenForm.GridTrSiteRow;
import ims.ccosched.forms.pattreatmentplanaction.GenForm.gDoseRow;
import ims.ccosched.vo.PatActionStatusPointVo;
import ims.ccosched.vo.PatActionStatusPointVoCollection;
import ims.ccosched.vo.PatTrPlanGroupSiteTechVo;
import ims.ccosched.vo.PatTrPlanGroupSiteTechVoCollection;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatPlanActionVoCollection;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.PatTreatmentPlanVo;
import ims.ccosched.vo.lookups.ActionStatusReason;
import ims.ccosched.vo.lookups.ActionStatusReasonCollection;
import ims.ccosched.vo.lookups.LookupHelper;
import ims.ccosched.vo.lookups.Techniques;
import ims.ccosched.vo.lookups.TechniquesCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dtomove.vo.ActivityActionVo;
import ims.dtomove.vo.ActivityActionVoCollection;
import ims.dtomove.vo.ActivityGroupVo;
import ims.dtomove.vo.ActivityGroupVoCollection;
import ims.dtomove.vo.GroupSiteVo;
import ims.dtomove.vo.PatTreatPlanActionDoseVo;
import ims.dtomove.vo.PatTreatPlanActionDoseVoCollection;
import ims.dtomove.vo.SchedActivityVoCollection;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.oncology.vo.lookups.TreatmentGroupSite;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;

public class Logic extends BaseLogic
{
	private static final String	END_DATE	= "End Date: ";
	private static final String	START_DATE	= "Start Date: ";
	private static final String	STATUS		= "Status: ";
	private static final String	PRIORITY	= "Priority: ";
	private static final String	ACTION		= "Action: ";
	private static final String	ACTIVITY	= "Activity: ";
	private final static String	newLine		= System.getProperty("line.separator");

	private Integer	ACTIVE		= -10100;
	private int		DOSE		= 1;
	private int		FRACTIONS	= 2;
	private int		DURATION	= 3;
	private Integer	ACTION_ID	= -101;

	private static final long serialVersionUID = 1L;

	@Override
	protected void OnFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open() throws PresentationLogicException
	{
		clearControls();
		displayTopPanelTitle();

		populatePatientDetails();
		populateTreatmentPlanDetails();

		fillCombo();
		fillTrSiteGridCombos();

		//WDEV-14167
		fillActionStatusCombo();
		form.cmbReason().clear();
		
		showExternalBeamControls(false);
		showImagingControls(false);
		showChemotherapyControls(false);
		setEnableTrSiteButtons(false);
		setVisibleTreatmentActionControl(false);

		//get TP for adding action to collection if new
		if (form.getGlobalContext().getPatTreatmentPlanIsNotNull()
				&& form.getGlobalContext().getPatTreatmentPlan().getID_PatTreatmentPlanIsNotNull())
				form.getLocalContext().setPatTreatmentPlanVo(domain.getTreatmentPlan(form.getGlobalContext().getPatTreatmentPlan()));
		
		if (ScreenInUpdateMode())
		{
			//get TP Action to update if updating
			PatTreatPlanActionVo actionVo = form.getGlobalContext().getPatTreatmentPlanAction();
			
			if (actionVo != null)
				actionVo = domain.getTreatmentPlanAction(actionVo);
			
			//set local context with up to date action
			form.getLocalContext().setAction(actionVo);

			// Load Update mode configuration
			loadGroupConfiguration(false);
			populateControlsFromDto();
			populateStateGrid();
			if (form.getMode().equals(FormMode.VIEW))
				form.btnUpdate().setVisible(form.isReadOnly());
		}
		else
		{ // Load New mode configuration
			// Load only the active groups, activities, etc
			loadGroupConfiguration(true);

			// Set the default data
			setDefaultData();
		}

		onGridTrSiteSelectionChanged();
	}

	
	//WDEV-14167
	private void fillActionStatusCombo() 
	{
		ActionStatusReasonCollection lkpActionStatus = LookupHelper.getActionStatusReason(domain.getLookupService());
		
		TreeNode[] rootNodes = null;
		rootNodes = lkpActionStatus.getRootNodes();
		form.cmbActionStatus().clear();
		for (int i = 0; i < rootNodes.length; i++)
		{
			ActionStatusReason	 inst = (ActionStatusReason) rootNodes[i];
			form.cmbActionStatus().newRow(inst, inst.getText());
		}
	}

	private void displayTopPanelTitle()
	{
		if (form.getGlobalContext().CcoSched.TreatmentPlan.getActionUpdateMode().intValue() == 0)
		{
			form.setMode(FormMode.VIEW);
			form.panelTop().setValue("View Action");
		}
		else
		{
			form.setMode(FormMode.EDIT);
			if (ScreenInUpdateMode())
				form.panelTop().setValue("Update Action");
			else
				form.panelTop().setValue("New Action");
		}
	}

	protected void OnOk() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void SelChangeActionStatus() throws ims.framework.exceptions.PresentationLogicException
	{
		loadReasonCombo();
	}
	
	private void loadReasonCombo()
	{
		//WDEV-14167
		form.cmbReason().clear();
		loadComboReason(form.cmbActionStatus().getID());
		
		// Make Action Status Date = now if the value changed in an update
		if (ScreenInUpdateMode())
			form.dtActStatusDate().setValue(new Date());// DateTime.Now;
		
//		TODO do form references for Domain BO versions
//		Lkup lookupDto = (Lkup) domain.getDTOInstance(Lkup.class);
//		lookupDto.Filter.clear();
//		lookupDto.Filter.Lkup_typ = "3195";
//		if (form.cmbActionStatus().getValue() != null)
//			lookupDto.Filter.Lkup_parent = form.cmbActionStatus().getValue();
//		else
//			return;
//
//		Result result = lookupDto.list();
//		if (result != null)
//		{
//			ShowMessage(result.getMessage());
//			return;
//		}
//
//		Go_ptplact actionUpdateDto = form.getGlobalContext().CcoSched.TreatmentPlan.getTreatmentPlanGetActions();// UIEngine.Context.Get("10002:Treatment
//																													// Plan
//																													// Get
//																													// Actions")
//																													// as
//																													// dto.Go_ptplactDTO;
//		Go_ptplact.Go_ptplactRecord actionDto = null;
//		if (ScreenInUpdateMode() && actionUpdateDto != null && actionUpdateDto.DataCollection.count() > 0)
//			actionDto = actionUpdateDto.DataCollection.get(0);
//
//		// Fill the reason combo
//		if (lookupDto != null)
//		{
//			for (int i = 0; i < lookupDto.DataCollection.count(); ++i)
//				if (lookupDto.DataCollection.get(i).Lkup_stat.equals("Y") || (actionDto != null && actionDto.Stat_reas.equals(lookupDto.DataCollection.get(i).Lkup_id)))
//					form.cmbReason().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm);
//
//		}
	}

	//WDEV-14167
	private void loadComboReason(int idFromCombo) 
	{
		ActionStatusReasonCollection lkpActionStatus = LookupHelper.getActionStatusReason(domain.getLookupService());
		
		if (form.cmbActionStatus().getValue() == null)
			return;
		
		ArrayList<?> childColl = null;

		for (int i = 0 ; i < lkpActionStatus.size() ; i++)
		{
			ActionStatusReason inst = lkpActionStatus.get(i);
			Boolean bFillCombo = Boolean.FALSE;
			
			if (form.cmbActionStatus().getID() == idFromCombo)
			{
				form.cmbReason().clear();
				if (form.cmbActionStatus().getValue() != null && form.cmbActionStatus().getValue().equals(inst))  
					bFillCombo = Boolean.TRUE;
			}
			
			if (bFillCombo.booleanValue())
			{	
				childColl = inst.getChildInstances();
				if (childColl != null)
				{
					for (int p = 0; p < childColl.size(); p++)
					{
						ActionStatusReason instChild = (ActionStatusReason) childColl.get(p);
						
						if (form.cmbActionStatus().getID() == idFromCombo)
							form.cmbReason().newRow(instChild, instChild.getText());
					}
				}
				break;
			}
		}
		
	}

	protected void RemoveTreatmentSite() throws ims.framework.exceptions.PresentationLogicException
	{
		int nCurSel = form.GridTrSite().getSelectedRowIndex();
		
		//TODO Review , for now I'm going to recreate the collection each time an acrion is updated.
//		if (nCurSel >= 0)
//		{
//			//TODO mark as inactive in list
//			if (form.getLocalContext().getAction().getGroupSiteTechIsNotNull())
//				for (Iterator iter = form.getLocalContext().getAction().getGroupSiteTech().iterator(); iter.hasNext();) {
//					PatTrPlanGroupSiteTechVo element = (PatTrPlanGroupSiteTechVo) iter.next();
//					if (element.)
//				}
//		}
		
		form.GridTrSite().getRows().remove(nCurSel);
		form.btnRemoveTrSite().setEnabled(false);
		
	}

	private void PopulateGroupGridCombo()
	{
		form.GridTrSite().GroupComboBox().clear();
		
		if (form.getGlobalContext().getPatTreatmentPlanIsNotNull() && form.getGlobalContext().getPatTreatmentPlan().getTreatmentSitesIsNotNull())
		{
			for (int i = 0 ; i < form.getGlobalContext().getPatTreatmentPlan().getTreatmentSites().size(); i++) 
			{
				if (form.getGlobalContext().getPatTreatmentPlan().getTreatmentSites().get(i).isActive()
					&& form.getGlobalContext().getPatTreatmentPlan().getTreatmentSites().get(i).getParent() == null	)	
					form.GridTrSite().GroupComboBox().newRow(form.getGlobalContext().getPatTreatmentPlan().getTreatmentSites().get(i), form.getGlobalContext().getPatTreatmentPlan().getTreatmentSites().get(i).getText());	
			}
		}
	}

	protected void onGridTrSiteSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		int nCurSel = form.GridTrSite().getSelectedRowIndex();
		if (nCurSel >= 0 && form.getMode().equals(FormMode.EDIT))
			form.btnRemoveTrSite().setEnabled(true);
		else
			form.btnRemoveTrSite().setEnabled(false);
	}

	protected void SelChangeActivity() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbAction().clear();

		if (form.cmbActivity().getValue() != null)
		{
			Integer id = form.cmbActivity().getValue().getActivityId();
			ActivityGroupVo groupId = form.cmbGroup().getValue();

			ActivityActionVoCollection actions = form.getLocalContext().getActivityActions();// UIEngine.Context.Get("10003:Actions")
																				// as
																				// dto.Sd_activity_actionDTO;

			if (actions == null)
				return;

			for (Iterator<?> iter = actions.iterator(); iter.hasNext();)
			{
				ActivityActionVo action = (ActivityActionVo) iter.next();
				
				if (action.getActivityId().equals(id.intValue()) && action.getGroup().getID_ActivityGroup().equals(groupId.getID_ActivityGroup()))
				
					// Update mode
					if (ScreenInUpdateMode())
					{
						PatTreatPlanActionVo actionsDto = GetActionsDto();

						if (action.getActive().equals("Y") && action.getActionIsNotNull() )
						{
							if( action.getActionIsNotNull() && action.getAction().getActiveIsNotNull() && action.getAction().getActive().equals("Y")) //wdev-15183
								form.cmbAction().newRow(action, action.getAction().getName());
						}
						else
						{
							if (actionsDto != null && actionsDto.getAction().equals(action.getAction()))
								form.cmbAction().newRow(action, action.getAction().getNameIsNotNull()?action.getAction().getName():"");
						}
					}
					else
					{
						if ( action.getActiveIsNotNull() && action.getActive().equals("Y") && action.getActionIsNotNull() && action.getAction().getActiveIsNotNull() && action.getAction().getActive().equals("Y")) //wdev-15183
							 form.cmbAction().newRow(action, action.getActionIsNotNull()?action.getAction().getName():"");
					}
					
			}
//			for (int i = 0; i < actions.DataCollection.count(); ++i)
//			{
//				if (actions.DataCollection.get(i).Activ_id.equals(id) && actions.DataCollection.get(i).Grp_id.equals(groupId))
//				{
//					// Update mode
//					if (ScreenInUpdateMode())
//					{
//						PatTreatPlanActionVo actionsDto = GetActionsDto();
//
//						if (actions.DataCollection.get(i).Action_act_ind.equals("Y"))
//						{
//							form.cmbAction().newRow(actions.DataCollection.get(i).Action_id, actions.DataCollection.get(i).Action_nm);
//						}
//						else
//						{
//							if (actionsDto != null && actionsDto.Action_id.equals(actions.DataCollection.get(i).Action_id))
//								form.cmbAction().newRow(actions.DataCollection.get(i).Action_id, actions.DataCollection.get(i).Action_nm);
//						}
//					}
//					else
//					{
//						if (actions.DataCollection.get(i).Action_act_ind.equals("Y"))
//							form.cmbAction().newRow(actions.DataCollection.get(i).Action_id, actions.DataCollection.get(i).Action_nm);
//					}
//				}
//			}
		}

		if (form.cmbActivity().getValue() != null)
		{
			displayActivityControls(form.cmbActivity().getValue().getActivityId());
		}
		else
			displayActivityControls(0);
	}

	protected void SelChangeGroup() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbGroup().getValue() == null)
		{
			form.cmbActivity().clear();
			form.cmbAction().clear();
			displayActivityControls(0);//WDEV-14318
			return;
		}

		ActivityGroupVo id = form.cmbGroup().getValue();
		SchedActivityVoCollection activities = form.getLocalContext().getActivities();// UIEngine.Context.Get("10003:Activities")
																		// as
																		// dto.Sd_activityDTO;

		if (activities == null)
		{
			ShowMessage("Please select activity.");
			return;
		}

		form.cmbActivity().clear();
		for (int i = 0; i < activities.size(); ++i)
		{
			if (activities.get(i).getGroupIsNotNull())
			{
				if (activities.get(i).getGroup().getID_ActivityGroup().equals(id.getID_ActivityGroup()))
				{
					// Update mode
					if (ScreenInUpdateMode())
					{
						PatTreatPlanActionVo actionsDto = GetActionsDto();
	
						if (activities.get(i).getActive().equals("Y"))
						{
							form.cmbActivity().newRow(activities.get(i), activities.get(i).getName());
						}
						else
						{
							if (actionsDto != null && actionsDto.getActivity().getActivityId().equals(activities.get(i).getActivityId()))
								form.cmbActivity().newRow(activities.get(i), activities.get(i).getNameIsNotNull()?activities.get(i).getName():"");
						}
					}
					else
					{
						if (activities.get(i).getActiveIsNotNull() && activities.get(i).getActive().equals("Y"))
							form.cmbActivity().newRow(activities.get(i), activities.get(i).getNameIsNotNull()?activities.get(i).getName():"");
					}
				}
			}
		}

		SelChangeActivity();
	}

	@Override
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionMode(Boolean.TRUE);
		form.getGlobalContext().CcoSched.TreatmentPlan.setActionUpdateMode(new Integer(1));
		displayTopPanelTitle();

		form.setMode(FormMode.EDIT);
		displayActivityControls(form.cmbActivity().getValue().getActivityId(), false);
	}

	protected void OnCancel() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void OnBtnSave() throws ims.framework.exceptions.PresentationLogicException
	{
		if (checkMandatory() == false)
			return;

		//get action to be updated
		PatTreatPlanActionVo actionVo = form.getGlobalContext().getPatTreatmentPlanAction();
		if (actionVo != null)
			actionVo = domain.getTreatmentPlanAction(actionVo);
		
		// UIEngine.Context.Get("10002:Treatment 
		// Plan
		// Get
		// Actions")
		// as
		// dto.Go_ptplactDTO;

		if (ScreenInUpdateMode())
		{
	//		boolean hcpHasChanged = false;
			
	//		if (form.cmbHcp().getValue() != null)
	//		{
	//			if (!form.cmbHcp().getValue().equals(actionVo.getTreatingConsultant()))
	//			{
	//				hcpHasChanged = true;
	//			}
	//		}
						
			// Update Action only
			if (actionVo != null)
			{
				if (!PopulateDtoFromScreen(actionVo))
					return;
									
				//save it
				String[] arrErrors = actionVo.validate();
				if(arrErrors != null)
				{
					engine.showErrors("Validation Errors", arrErrors);
					return;
				}
				
				try
				{
					form.getGlobalContext().setPatTreatmentPlanAction(domain.saveAction(actionVo));
					form.getGlobalContext().setPatTreatmentPlan(domain.getTreatmentPlan(form.getGlobalContext().getPatTreatmentPlan()));
				} 
				catch (StaleObjectException e)
				{
					engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					return;
				} 
				catch (DomainInterfaceException e) {
					engine.showMessage(e.getMessage());
				}

				//TODO
//				if (hcpHasChanged)
//				{
//					// hcp has changed, we need to update HCP for children
//					// records
//
//					Go_ptplact actions = form.getGlobalContext().CcoSched.ActionUpdate.getTreatmentPlanActions();
//
//					for (int i = 0; i < actions.DataCollection.count(); i++)
//					{
//						if (actions.DataCollection.get(i).Treatmentaction != null && actions.DataCollection.get(i).Treatmentaction.equalsIgnoreCase(actionUpdateDto.DataCollection.get(0).Pt_act_id))
//						{
//							Go_ptplact action = (Go_ptplact) domain.getDTOInstance(Go_ptplact.class);
//
//							action.Filter.Pt_act_id = actions.DataCollection.get(i).Pt_act_id;
//							action.get();
//							action.getForUpdate();
//
//							action.DataCollection.get(0).Act_consult = form.cmbHcp().getValue().Hcp_id;
//
//							result = action.update();
//
//							if (result != null)
//							{
//								ShowMessage(result.getMessage());
//								return;
//							}
//						}
//					}
//				}

				form.getGlobalContext().CcoSched.ActionUpdate.setActionInsertedId(actionVo.getID_PatAction().toString());
			}
		}
		else
		{
			// do an Insert
			//save the treatment plan with added action
			actionVo = new PatTreatPlanActionVo();
			
			if (!PopulateDtoFromScreen(actionVo))
				return;

	//		if (form.getLocalContext().getPatTreatmentPlanVo().getActionsIsNotNull())
	//			form.getLocalContext().getPatTreatmentPlanVo().getActions().add(actionVo);
	//		else
	//		{
	//			PatTreatPlanActionVoCollection actionCollection = new PatTreatPlanActionVoCollection();
	//			actionCollection.add(actionVo);
	//			form.getLocalContext().getPatTreatmentPlanVo().setActions(actionCollection);
	//		}
				
			//save it
			String[] arrErrors = form.getLocalContext().getPatTreatmentPlanVo().validate();
			if(arrErrors != null)
			{
				engine.showErrors("Validation Errors", arrErrors);
				return;
			}
			
			try
			{				
				form.getGlobalContext().setPatTreatmentPlanAction(domain.saveTreatmentPlan(form.getLocalContext().getPatTreatmentPlanVo(), actionVo));
				form.getGlobalContext().setPatTreatmentPlan(domain.getTreatmentPlan(form.getLocalContext().getPatTreatmentPlanVo()));
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return; 
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
			}
		}

		engine.close(DialogResult.OK);
	}

	private boolean checkMandatory()
	{
		ActivityActionVo action_id = form.cmbAction().getValue();
		if (action_id != null && action_id.getID_ActivityAction().equals(ACTION_ID))
		{
			if (form.cmbTreatAction().getValue() == null)
			{
				engine.showErrors(new String[]{"Treatment Action is mandatory"});
				return false;
			}
		}
		//wdev-13692
		if(form.getLocalContext().getIsDoseGridVisibleIsNotNull() && form.getLocalContext().getIsDoseGridVisible().equals(Boolean.TRUE))
		{
			for (int i = 0; i < form.gDose().getRows().size(); i++)
			{			
				Integer DoseValue = form.gDose().getRows().get(i).getDose();
				Integer FractionValue = form.gDose().getRows().get(i).getFractions();
				Integer DurationValue = form.gDose().getRows().get(i).getDays();
				if(DoseValue == null && FractionValue == null && DurationValue == null)
				{
					engine.showErrors(new String[]{"The Dose Fractions Days grid cannot have empty rows!"});
					return false;
				}
			}
		}

		return true;
	}

	public boolean PopulateDtoFromScreen(PatTreatPlanActionVo actionVo)
	{
			if (form.cmbGroup().getValue() == null)
			{
				ShowMessage("Please select a Group.");
				return false;
			}
			actionVo.setActivityGroup(form.cmbGroup().getValue());

			if (form.cmbActivity().getValue() == null)
			{
				ShowMessage("Please select an Activity.");
				return false;
			}
			actionVo.setActivity(form.cmbActivity().getValue());

			// Order number
			if (actionVo.getID_PatAction() == null)
				actionVo.setAction_OrderNumber( GetNextAlailableOrderNo());

			// Action - 06/05/2003 - kevin's change - Action updatable
			if (form.cmbAction().getValue() != null)
				actionVo.setAction(form.cmbAction().getValue());
			else
				actionVo.setAction(null);

			if (!actionVo.getActionIsNotNull())
			{
				ShowMessage("Please select an Action.");
				return false;
			}

			// Priority
			if (form.cmbPriority().getValue() == null)
			{
				ShowMessage("Please select a Priority.");
				return false;
			}
			actionVo.setPriority(form.cmbPriority().getValue());

			// Transport
			if (form.cmbTransport().getValue() == null)
			{
				ShowMessage("Please select a Transport.");
				return false;
			}
			actionVo.setTransport(form.cmbTransport().getValue());

			// Patient Status
			if (form.cmbStatus().getValue() == null)
			{
				ShowMessage("Please select a Patient Status.");
				return false;
			}
			actionVo.setPatientStatus(form.cmbStatus().getValue());

			// Attending As - (if Patient Required = "N" then the Attending As
			// is not mandatory)
			if (form.cmbAttendingAs().getValue() == null && isPatientRequired())
			{
				ShowMessage("Please select an option in Attending As combo"); //WDEV-14592
				return false;
			}
			actionVo.setAttendingAs(form.cmbAttendingAs().getValue());

			// Action status
			//WDEV-14839
			if (form.cmbActionStatus().getValue()!=null)
				actionVo.setStatus(form.cmbActionStatus().getValue());

			// Reason
			actionVo.setReason(form.cmbReason().getValue());
			
			//if (form.dtActStatusDate().getValue() != null) WDEV-15415
			//{
				//save Action Status Point
				if (!actionVo.getActionStatusPointIsNotNull())
					actionVo.setActionStatusPoint(new PatActionStatusPointVoCollection());
				else
				{
					if (actionVo.getActionStatusPoint().size() > 0)
					{
						actionVo.getActionStatusPoint().sort(SortOrder.DESCENDING);
						actionVo.getActionStatusPoint().get(0).setSpEndDate(form.dtActStatusDate().getValue());
					}
				}
				PatActionStatusPointVo statusPointVO = new PatActionStatusPointVo();
				statusPointVO.setActionStatusReason(form.cmbReason().getValue());
				statusPointVO.setActionStatus(form.cmbActionStatus().getValue());
				
				if (form.dtActStatusDate().getValue() != null)
				{
					statusPointVO.setSpStartDate(form.dtActStatusDate().getValue()); //WDEV-15415
				}
				
				statusPointVO.setSpEndDate(null);
				
				actionVo.getActionStatusPoint().add(statusPointVO);
			//}			
			
			// Category - save only if Activity = External Beam selected
			Integer sqlActivityValue = actionVo.getActivity().getActivityId();			
			if (sqlActivityValue != null)
				if (sqlActivityValue.intValue() == -202 || sqlActivityValue.intValue() == -207)
					actionVo.setCategory(form.cmbCategory().getValue());
				else
					actionVo.setCategory(null);
			else
				actionVo.setCategory(null);
			
			// Hcp
			if (form.cmbHcp().getValue() == null)
			{
				ShowMessage("Please select a Treating Consultant.");
				return false;
			}
			actionVo.setTreatingConsultant(form.cmbHcp().getValue());
			actionVo.setActive(form.chkActive().getValue() ? true : false);
			actionVo.setEstartDate(form.dtEdtStartDate().getValue());
			actionVo.setEendDate((form.dtEstEndDate().getValue()));			
			actionVo.setActionStatusDate(form.dtActStatusDate().getValue());
			
			if (isTreatmentActionMandatory())
				actionVo.setTreatmenAction(form.cmbTreatAction().getValue());

			// Update/Insert Mode - Active/Inactive - also summ the active into
			// the old field
			if (!FillActivityDetailsFromScreen(actionVo))
				return false;
			
			// Get the new Group/Treatment Sites/techniques			
			//create new collection for inserts and updates
			
			//TODO http://jira/browse/WDEV-13830
			//actionVo.setGroupSiteTech(null);
			
			//if (patGSTVoColl == null)
			PatTrPlanGroupSiteTechVoCollection patGSTVoColl = new PatTrPlanGroupSiteTechVoCollection();
			
			for (int x = 0; x < form.GridTrSite().getRows().size(); x++)
			{
				PatTrPlanGroupSiteTechVo tpGSTVo = new PatTrPlanGroupSiteTechVo();
				
				if (form.GridTrSite().getRows().get(x).getGroup() == null)
				{
					ShowMessage("Please select a Group.");
					return false;
				}
				else
				{						
					tpGSTVo.setTreatmentGroupSite((TreatmentGroupSite)form.GridTrSite().getRows().get(x).getGroup());
					if (form.GridTrSite().getRows().get(x).getTreatmentSite().getValue() != null)
						tpGSTVo.setTreatmentGroupSite((TreatmentGroupSite)form.GridTrSite().getRows().get(x).getTreatmentSite().getValue());
				}

				if (form.GridTrSite().getRows().get(x).getTechnique() == null)
				{
					ShowMessage("Please select Technique.");
					return false;
				}
				else
					tpGSTVo.setTreatmentTechnique((Techniques)form.GridTrSite().getRows().get(x).getTechnique().getValue());
				
				//set active status
				tpGSTVo.setActiveStatus(ims.core.vo.lookups.YesNo.YES);
				
				patGSTVoColl.add(x,tpGSTVo);
												
			}				
			//TODO http://jira/browse/WDEV-13830
			actionVo.setGroupSiteTech(patGSTVoColl);

			if (DuplicatesExist(actionVo))
				return false;
	
		return true;
	}


	private boolean DuplicatesExist(PatTreatPlanActionVo actionVo)
	{
		//TODO
//		for (int i = 0; i < actionVo.DataCollection.get(0).SeqnoCollection.count(); i++)
//			if (actionVo.DataCollection.get(0).SeqnoCollection.get(i).Sntact_stat.equals(ACTIVE) 
//					&& isDuplicate(actionVo, actionVo.DataCollection.get(0).SeqnoCollection.get(i), i))
//				return true;

		return false;
	}

	private boolean FillActivityDetailsFromScreen(PatTreatPlanActionVo actionVo)
	{
		if (actionVo != null)
		{
			Integer sqlActivityValue = actionVo.getActivity().getActivityId();
			switch (sqlActivityValue == null ? 0 : sqlActivityValue.intValue())
			{
				case -202 :// External Beam Activity

					actionVo.setModality(form.cmbModality().getValue());
					Float energy = form.edtEnergyValue().getValue();
					actionVo.setModalEnergy(energy != null ? energy.toString() : "");
					actionVo.setUnit(form.cmbUnit().getValue());

					// Integer nValue = form.edtDose().getValue();
					actionVo.setTl_dose(GetTotalValue(DOSE));// nValue
																						// !=
																						// null?nValue.toString():"";
					// nValue = form.edtFractions().getValue();
					actionVo.setTl_fractions(GetTotalValue(FRACTIONS));// nValue
																									// !=
																									// null?nValue.toString():"";
					// nValue = form.edtDuration().getValue();
					actionVo.setTl_duration(GetTotalValue(DURATION));// nValue
																							// !=
																							// null?nValue.toString():"";
					GetExternalBeamDetails(actionVo);
					// Clear the rest of the details
					ClearImagingDetails(actionVo);
					ClearChemotherapyControls(actionVo);
				break;

				case -200 :// Imaging

					actionVo.setImagingDate(form.dtDate().getValue());

					// Clear the rest of the details
					ClearExternalBeamDetails(actionVo);
					ClearChemotherapyControls(actionVo);
				break;

				case -201 : // Chemotherapy

					actionVo.setChemPlanStartDate(form.dtStartDate().getValue());
					actionVo.setPlannedRegime(form.cmbPlannedRegime().getValue());

					// Clear the rest of the details
					ClearExternalBeamDetails(actionVo);
					ClearImagingDetails(actionVo);
				break;
				case -204 : // Brachytherapy - the same as imaging
					actionVo.setImagingDate(form.dtDate().getValue());
					// Modality
					actionVo.setModality(form.cmbModality().getValue());
					actionVo.setAneasthetic(form.Anaesthetic().getValue());
					// Clear the rest of the details
					ClearExternalBeamDetails(actionVo, false);
					ClearChemotherapyControls(actionVo);

				break;
				case -207 :// Orthovoltage - the same as External Beam

					actionVo.setModality(form.cmbModality().getValue());
					Float energy_orth = form.edtEnergyValue().getValue();
					actionVo.setModalEnergy(energy_orth != null ? energy_orth.toString() : "");
					actionVo.setUnit(form.cmbUnit().getValue());

					// Integer nOrthValue = form.edtDose().getValue();
					actionVo.setTl_dose(GetTotalValue(DOSE));// nOrthValue
																						// !=
																						// null?nOrthValue.toString():"";
					// nOrthValue = form.edtFractions().getValue();
					actionVo.setTl_fractions(GetTotalValue(FRACTIONS));// nOrthValue
																									// !=
																									// null?nOrthValue.toString():"";
					// nOrthValue = form.edtDuration().getValue();
					actionVo.setTl_duration(GetTotalValue(DURATION));// nOrthValue
																							// !=
																							// null?nOrthValue.toString():"";
					GetExternalBeamDetails(actionVo);
					// Clear the rest of the details
					ClearImagingDetails(actionVo);
					ClearChemotherapyControls(actionVo);
				break;
				case -211 :// Other (The same as Imaging)
					actionVo.setImagingDate(form.dtDate().getValue());

					// Clear the rest of the details
					ClearExternalBeamDetails(actionVo);
					ClearChemotherapyControls(actionVo);
				break;
				default :
					// Clear all the details
					ClearExternalBeamDetails(actionVo);
					ClearImagingDetails(actionVo);
					ClearChemotherapyControls(actionVo);
				break;
			}
		}

		return true;
	}

	private void ClearExternalBeamDetails(PatTreatPlanActionVo actionVo)
	{
		ClearExternalBeamDetails(actionVo, true);
	}

	private void ClearExternalBeamDetails(PatTreatPlanActionVo actionUpdateDto, boolean bClearModality)
	{
		if (bClearModality)
			actionUpdateDto.setModality(null);
		actionUpdateDto.setModalEnergy(null);
		actionUpdateDto.setUnit(null);

		actionUpdateDto.setTl_dose(null);
		actionUpdateDto.setTl_fractions(null);
		actionUpdateDto.setTl_duration(null);
		//actionUpdateDto.DataCollection.get(0).Dose_seqCollection.clear();
	}

	private void ClearChemotherapyControls(PatTreatPlanActionVo actionVo)
	{
		actionVo.setChemPlanStartDate(null);
		actionVo.setPlannedRegime(null);
	}

	private void ClearImagingDetails(PatTreatPlanActionVo actionVo)
	{
		actionVo.setImagingDate(null);
		actionVo.setAneasthetic(null);
	}

	// return the screen mode new/update as it was set in the parent
	private boolean ScreenInUpdateMode()
	{
		return form.getGlobalContext().CcoSched.TreatmentPlan.getActionMode() == null ? false : form.getGlobalContext().CcoSched.TreatmentPlan.getActionMode().booleanValue();
	}

	private void fillCombo() throws PresentationLogicException
	{
		//TODO Review
		//FillLkupDtos();

		//Automatic binding
		// Action Status
//		lookupDto = form.getLocalContext().getActionStatus();
//		if (lookupDto != null)
//		{
//			for (int i = 0; i < lookupDto.DataCollection.count(); ++i)
//				if ((lookupDto.DataCollection.get(i).Lkup_stat.equals("Y") && lookupDto.DataCollection.get(i).Lkup_parent.equals("0")) || (actionDto != null && actionDto.Act_status.equals(lookupDto.DataCollection.get(i).Lkup_id) && lookupDto.DataCollection.get(i).Lkup_parent.equals("0")))
//					form.cmbActionStatus().newRow(lookupDto.DataCollection.get(i).Lkup_id, lookupDto.DataCollection.get(i).Lkup_nm);
//
//			SelChangeActionStatus();
//		}

		//wdev-13667
		HcpLiteVoCollection hcpVoColl = domain.listConsultants();
		
		if(hcpVoColl != null)
		{
			//hcpVoColl.sort(new ConsultatntNameComparator(SortOrder.ASCENDING)); //wdev-13961  //WDEV-14301
			for (int i = 0; i < hcpVoColl.size(); ++i)
			{
				HcpLiteVo consultant = hcpVoColl.get(i);
				if((consultant.getIsActiveIsNotNull() && consultant.getIsActive()) || 
					//(treatmentPlanDto != null && treatmentPlanDto.Chcp.equals(consultant.getID_Hcp())))
					(form.getGlobalContext().getPatTreatmentPlanIsNotNull() && form.getGlobalContext().getPatTreatmentPlan().equals(consultant)))
				form.cmbHcp().newRow(consultant,(consultant.getName().getSurnameIsNotNull() ? consultant.getName().getSurname() : "")  + ", " +(consultant.getName().getForenameIsNotNull()?consultant.getName().getForename():"") );//WDEV-14526
			}
		}
		
		// Hcp
//		Clinical_team hcps = form.getLocalContext().getHCPs();;
//		if (hcps != null)
//		{
//			for (int i = 0; i < hcps.DataCollection.count(); ++i)
//			{
//				if (hcps.DataCollection.get(i).Stat.equals("Y") || (actionDto != null && actionDto.Act_consult.equals(hcps.DataCollection.get(i).Hcp_id)))
//					form.cmbHcp().newRow(hcps.DataCollection.get(i), hcps.DataCollection.get(i).Hcp_txt);
//			}
//		}
	}

	private void fillTrSiteGridCombos()
	{
		PopulateGroupGridCombo();
	}

	private void populatePatientDetails()
	{
		PatientShort patVo = form.getGlobalContext().Core.getPatientShort();
		if (patVo != null)
		{
			PatientId patIdVo = patVo.getPatId(PatIdType.HOSPNUM);
			if (patIdVo != null)
				form.PatientHospitalNumber().setValue(patIdVo.getIdValue());
			PersonName patName = patVo.getName();
			if (patName != null)
				form.PatientName().setValue(patName.getForename()+ " " + patName.getSurname());
			
			//Date dt = DateHelper.GetDOBDateFromString(patientDto.Dob);
			if (patVo.getDob() != null)
				form.PatientDOB().setValue(patVo.getDob().toString());
			
			PersonAddress patAddr = patVo.getAddress();
			StringBuffer address = new StringBuffer(150);
			if (patAddr != null)
			{
				if ((patAddr.getAddressBuildingName() !=  null && !patAddr.getAddressBuildingName().equals("")))
				{
					//address with building name
					if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
					{
						if(patAddr.getAddressBuildingName()!=null)
							address.append(patAddr.getAddressBuildingName());
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressBuildingNumber()!=null)
							address.append(patAddr.getAddressBuildingNumber());
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressLocality()!=null)
							address.append(patAddr.getAddressLocality());
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressPostTown()!=null)
							address.append(patAddr.getAddressPostTown());	
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressPostCode()!=null)
							address.append(patAddr.getAddressPostCode());	
					}
					else
					{
						if(patAddr.getAddressBuildingName()!=null)
							address.append(patAddr.getAddressBuildingName());
						if (!address.toString().equals(""))
							address.append(newLine);
						if (patAddr.getAddressStreet() != null && !patAddr.getAddressStreet().equals(""))
						{
							if (patAddr.getAddressLocality() != null && !patAddr.getAddressLocality().equals(""))
							{
								if(patAddr.getAddressStreet()!=null)
									address.append(patAddr.getAddressStreet());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressLocality()!=null)
									address.append(patAddr.getAddressLocality());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressPostTown()!=null)
									address.append(patAddr.getAddressPostTown());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressCounty()!=null)
									address.append(patAddr.getAddressCounty());	
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressPostCode()!=null)
									address.append(patAddr.getAddressPostCode());	
							}
							else
							{
								if(patAddr.getAddressStreet()!=null)
									address.append(patAddr.getAddressStreet());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressPostTown()!=null)
									address.append(patAddr.getAddressPostTown());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressCounty()!=null)
									address.append(patAddr.getAddressCounty());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressPostCode()!=null)
									address.append(patAddr.getAddressPostCode());	
							}
							if (patAddr.getCounty()!=null)
								address.append(patAddr.getCounty());
							if (!address.toString().equals(""))
								address.append(newLine);
						}
						else
						{
							if (patAddr.getAddressLocality() != null && !patAddr.getAddressLocality().equals(""))
							{
								if(patAddr.getAddressLocality()!=null)
									address.append(patAddr.getAddressLocality());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressPostTown()!=null)
									address.append(patAddr.getAddressPostTown());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressCounty()!=null)
									address.append(patAddr.getAddressCounty());					
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressPostCode()!=null)
									address.append(patAddr.getAddressPostCode());	
							}
							else
							{
								if(patAddr.getAddressPostTown()!=null)
									address.append(patAddr.getAddressPostTown());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressCounty()!=null)
									address.append(patAddr.getAddressCounty());
								if (!address.toString().equals(""))
									address.append(newLine);
								if(patAddr.getAddressPostCode()!=null)
									address.append(patAddr.getAddressPostCode());	
							}					
						}
					}
				}
				else
				{
					if(patAddr.getAddressStreet()!=null)
						address.append(patAddr.getAddressStreet());
					if (patAddr.getAddressLocality() != null && !patAddr.getAddressLocality().equals(""))
					{
						if(patAddr.getAddressLocality()!=null)
							address.append(patAddr.getAddressLocality());
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressPostTown()!=null)
							address.append(patAddr.getAddressPostTown());
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressCounty()!=null)
							address.append(patAddr.getAddressCounty());	
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressPostCode()!=null)
							address.append(patAddr.getAddressPostCode());	
					}
					else
					{
						if(patAddr.getAddressPostTown()!=null)
							address.append(patAddr.getAddressPostTown());
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressCounty()!=null)
							address.append(patAddr.getAddressCounty());
						if (!address.toString().equals(""))
							address.append(newLine);
						if(patAddr.getAddressPostCode()!=null)
							address.append(patAddr.getAddressPostCode());	
					}					
				}
			}
			if (!address.toString().equals(""))
				address.append(newLine);

			form.PatientAddress().setValue(address.toString());
		}
		
	}

	private void populateTreatmentPlanDetails()
	{
		PatTreatmentPlanLiteVo trPlan = form.getGlobalContext().getPatTreatmentPlan();
		if (trPlan != null)
		{
			form.edtDateSeen().setValue(trPlan.getDateSeenIsNotNull()?trPlan.getDateSeen().toString():"");
			form.edtConsultant().setValue(trPlan.getConsultantIsNotNull()?trPlan.getConsultant().toString():"");

			form.edtHistology().setValue(trPlan.getPrimaryTumourHistologyIsNotNull() ? trPlan.getPrimaryTumourHistology().getHistologyDescription() : "");
			form.edtIntent().setValue(trPlan.getTreatmentIntentIsNotNull()?trPlan.getTreatmentIntent().getIItemText():"");
		}
	}

	private Float GetFloatFromString(String val)
	{
		Float newVal = null;
		if (val != null && !val.equals(""))
		{
			try
			{
				newVal = new Float(val);
			}
			catch (NumberFormatException e)
			{
				displayMessage(e.getMessage());
			}
		}
		return newVal;
	}

	private void ShowExternalBeamControls(boolean bVisible, boolean bModalityVisible)
	{
		if (bVisible)
		{
			showImagingControls(false);
			showChemotherapyControls(false);
		}

		form.lblModality().setVisible(bVisible ? bVisible : bModalityVisible);
		form.cmbModality().setVisible(bVisible ? bVisible : bModalityVisible);
		form.cmbModality().setEnabled(form.getMode().equals(FormMode.EDIT));

		form.lblEnergyValue().setVisible(bVisible);
		form.edtEnergyValue().setVisible(bVisible);
		form.edtEnergyValue().setEnabled(form.getMode().equals(FormMode.EDIT));

		form.lbUnit().setVisible(bVisible);
		form.cmbUnit().setVisible(bVisible);
		form.cmbUnit().setEnabled(form.getMode().equals(FormMode.EDIT));

		form.btnAddTrSite().setEnabled(bVisible && form.getMode().equals(FormMode.EDIT));

		// #region 01/03/2004 - Dose, Fractions, Days
		form.gDose().setVisible(bVisible);
		form.getLocalContext().setIsDoseGridVisible(bVisible);
		form.gDose().setReadOnly(!form.getMode().equals(FormMode.EDIT));
		form.btnAddDose().setVisible(bVisible);
		form.btnAddDose().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.btnRemoveDose().setVisible(bVisible);
		form.btnRemoveDose().setEnabled((form.getMode().equals(FormMode.EDIT)) && form.gDose().getSelectedRowIndex() >= 0);
		// #endregion

		form.cmbCategory().setEnabled(bVisible && form.getMode().equals(FormMode.EDIT));
		if (!bVisible)
			form.cmbCategory().setValue(null);
	}

	private void showExternalBeamControls(boolean bVisible)
	{
		ShowExternalBeamControls(bVisible, false);
	}

	private void showImagingControls(boolean bVisible)
	{
		ShowImagingControls(bVisible, false);
	}

	private void ShowImagingControls(boolean bVisible, boolean bModalityVisible)
	{
		if (bVisible)
		{
			ShowExternalBeamControls(false, bModalityVisible);
			showChemotherapyControls(false);
		}

		form.lblDate().setVisible(bVisible);
		form.dtDate().setVisible(bVisible);
		form.dtDate().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lblAnaesthetic1().setVisible(bModalityVisible);
		form.lblAnaesthetic2().setVisible(bModalityVisible);
		form.Anaesthetic().setVisible(bModalityVisible);
		form.Anaesthetic().setEnabled(form.getMode().equals(FormMode.EDIT));
	}

	private void showChemotherapyControls(boolean bVisible)
	{
		if (bVisible)
		{
			showExternalBeamControls(false);
			showImagingControls(false);
		}

		form.lblStartDate().setVisible(bVisible);
		form.dtStartDate().setVisible(bVisible);
		form.dtStartDate().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lblPlannedRegime1().setVisible(bVisible);
		form.lblPlannedRegime2().setVisible(bVisible);
		form.cmbPlannedRegime().setVisible(bVisible);
		form.cmbPlannedRegime().setEnabled(form.getMode().equals(FormMode.EDIT));
	}

	private void loadGroupConfiguration(boolean activeLkup) throws PresentationLogicException
	{
		showExternalBeamControls(false);

		form.cmbGroup().clear();
		form.cmbActivity().clear();
		form.cmbAction().clear();

		PatTreatPlanActionVo actionsDto = GetActionsDto();
		// load activity groups
		ActivityGroupVoCollection activityGroups = form.getLocalContext().getActivityGroups();// UIEngine.Context.Get("10003:Activity
																					// Groups")
																					// Sd_activity_grp;
		if (activityGroups == null)
		{
//			activityGroups = (Sd_activity_grp) domain.getDTOInstance(Sd_activity_grp.class);
//			activityGroups.Filter.clear();
//			Result result = activityGroups.list();
//			if (result != null)
//			{
//				ShowMessage(result.getMessage());
//				return;
//			}
			activityGroups = domain.listActivityGroups();
			
			form.getLocalContext().setActivityGroups(activityGroups);
		}
		else
		{
			form.getLocalContext().setActivityGroups(activityGroups);
		}

		if (activityGroups != null)
		{
			for (Iterator<?> iter = activityGroups.iterator(); iter.hasNext();) 
			{
				ActivityGroupVo actGroupVo = (ActivityGroupVo) iter.next();
				
				if (actGroupVo.getActive().equals("Y"))
					form.cmbGroup().newRow(actGroupVo, actGroupVo.getActivityGroupNameIsNotNull()?actGroupVo.getActivityGroupName():"");
				else
					if (!activeLkup && actionsDto != null && (actionsDto.getActivityGroup().equals(actGroupVo.getID_ActivityGroup())))
					{
						form.cmbGroup().newRow(actGroupVo, actGroupVo.getActivityGroupNameIsNotNull()?actGroupVo.getActivityGroupName():"");
					}
					
			}
		}
		
		// load activities
		SchedActivityVoCollection activities = form.getLocalContext().getActivities();// UIEngine.Context.Get("10003:Activities") as  dto.Sd_activityDTO;
		if (activities == null)
		{
			activities = domain.listActivities();
			form.getLocalContext().setActivities(activities);
		}
		else
		{
			form.getLocalContext().setActivities(activities);
		}

		// load actions
		ActivityActionVoCollection actions = form.getLocalContext().getActivityActions();// UIEngine.Context.Get("10003:Actions") as dto.Sd_activity_actionDTO;
		if (actions == null)
		{
			actions = domain.listActivityActions();
			form.getLocalContext().setActivityActions(actions);
		}
		else
		{
			form.getLocalContext().setActivityActions(actions);
		}

		SelChangeGroup();
	}

	private void setDefaultData() throws PresentationLogicException
	{
		// Record Active
		form.chkActive().setValue(true);

		this.defaultAllLookupValues();
		// Default Action Reason to Normals
		
		form.cmbActionStatus().setValue((ims.ccosched.vo.lookups.ActionStatusReason)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.ActionStatusReason.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.ActionStatusReason.TYPE_ID));
		if (form.cmbActionStatus().getValue() != null)
			loadReasonCombo();
		
		// Clear Waiting List
		form.edtWaitingList().setValue("");

		// Default the Action Status Date to Date Seen & Consultant & Status
		PatTreatPlanActionVo trPlan = form.getLocalContext().getPatTPAction();
		PatTreatmentPlanVo tpVo = form.getLocalContext().getPatTreatmentPlanVo();
		
		if (tpVo != null)
		{
			form.dtActStatusDate().setValue(trPlan != null ? trPlan.getActionStatusDate() : tpVo.getDateSeen()); //WDEV-15415 
			
			if (tpVo.getConsultantIsNotNull())
				SetHcpComboValue(tpVo.getConsultant());
			if (tpVo.getPatientStatusIsNotNull())
				this.setcmbStatusLookupValue(tpVo.getPatientStatus().getID());
			//http://jira/browse/WDEV-11927
			if (tpVo.getActionsIsNotNull() && tpVo.getActions().size()>0)
			{
				form.cmbAttendingAs().setValue(tpVo.getActions().get(0).getAttendingAs());
			}
			//http://jira/browse/WDEV-11927
		}

		// Prepopulate Priority, Transport, Action Status & Reason with the
		// previous Action record saved
		PatTreatPlanActionVo actionGetDto = form.getGlobalContext().getPatTreatmentPlanAction();
		if (actionGetDto != null)
		{
			// Priority
			// form.cmbPriority().setValue(actionGetDto.DataCollection.get(0).Act_priorty);
			this.setcmbPriorityLookupValue(actionGetDto.getPriority().getID());
			// Transport
			// form.cmbTransport().setValue(actionGetDto.DataCollection.get(0).Trans_req);
			this.setcmbTransportLookupValue(actionGetDto.getTransport().getID());
			// Action Status
			form.cmbActionStatus().setValue(actionGetDto.getStatus());
			SelChangeActionStatus();
			// Reason
			form.cmbReason().setValue(actionGetDto.getReason());

			// HCP - only if not selected in TP
			if (tpVo != null && tpVo.getConsultantIsNotNull())
				SetHcpComboValue(tpVo.getConsultant());
			if (trPlan != null && trPlan.getPatientStatusIsNotNull())
				this.setcmbStatusLookupValue(trPlan.getPatientStatus().getID());
		}
	}

	private void populateControlsFromDto() throws PresentationLogicException
	{

		PatTreatPlanActionVo tpActionVo = form.getLocalContext().getAction();
		
		if (ScreenInUpdateMode())
		{
			form.cmbGroup().setEnabled(false);
			// form.cmbAction.Enabled = false;
			form.cmbActivity().setEnabled(false);
		}

		if (tpActionVo != null)
		{
			form.cmbGroup().setValue(tpActionVo.getActivityGroupIsNotNull()?tpActionVo.getActivityGroup():null);
			SelChangeGroup();
			form.cmbActivity().setValue(tpActionVo.getActivityIsNotNull()?tpActionVo.getActivity():null);
			SelChangeActivity();
			
			//WDEV-15155
			if (tpActionVo.getAction().getActive().equals("N"))
			{
				form.cmbAction().newRow(tpActionVo.getAction(), tpActionVo.getAction().getAction().getName());
			}
			if( tpActionVo.getActionIsNotNull()) //wdev-15183
			{
				ArrayList<ActivityActionVo> actions = form.cmbAction().getValues();
				if( !actions.contains(tpActionVo.getAction()))
					form.cmbAction().newRow(tpActionVo.getAction(), tpActionVo.getAction().getActionIsNotNull() ? tpActionVo.getAction().getAction().getName():"");
			}
			
			form.cmbAction().setValue(tpActionVo.getAction());
			onCmbActionValueChanged();
			form.cmbTreatAction().setValue(tpActionVo.getTreatmenAction());

			// Attending As
			if (tpActionVo.getAttendingAsIsNotNull())
				this.setcmbAttendingAsLookupValue(tpActionVo.getAttendingAs().getID());
			// Priority
			if (tpActionVo.getPriorityIsNotNull())
				this.setcmbPriorityLookupValue(tpActionVo.getPriority().getID());
			// Transport
			if(tpActionVo.getTransportIsNotNull())
				this.setcmbTransportLookupValue(tpActionVo.getTransport().getID());
			// Patient Status
			if (tpActionVo.getPatientStatusIsNotNull())
				this.setcmbStatusLookupValue(tpActionVo.getPatientStatus().getID());
			// Action status
			form.cmbActionStatus().setValue(tpActionVo.getStatus());
			SelChangeActionStatus();
			// Reason
			form.cmbReason().setValue(tpActionVo.getReason());
			// Category
			if(	tpActionVo.getCategoryIsNotNull()) 		//wdev-14111
				this.setcmbCategoryLookupValue(tpActionVo.getCategory().getID());
			else
				form.cmbCategory().setValue(null);		//wdev-14111	
			// Unit
			
			if (tpActionVo.getUnitIsNotNull())
				this.setcmbUnitLookupValue(tpActionVo.getUnit().getID());
			// Modality
			if(tpActionVo.getModalityIsNotNull()) //wdev-14111
				this.setcmbModalityLookupValue(tpActionVo.getModality().getID());
			else
				form.cmbModality().setValue(null);
			// Anaesthetic
			if(tpActionVo.getAneastheticIsNotNull())   //wdev-14111
				this.setAnaestheticLookupValue(tpActionVo.getAneasthetic().getID());
			else
				form.Anaesthetic().setValue(null);		//wdev-14111
			// Planned Regime
			if (tpActionVo.getPlannedRegimeIsNotNull())
				this.setcmbPlannedRegimeLookupValue(tpActionVo.getPlannedRegime().getID());
			// Hcp
			SetHcpComboValue(tpActionVo.getTreatingConsultant());

			form.chkActive().setValue(tpActionVo.getActive());

			form.dtEdtStartDate().setValue(tpActionVo.getEstartDate());
			form.dtEstEndDate().setValue(tpActionVo.getEendDate());
			form.dtActStatusDate().setValue(tpActionVo.getActionStatusDate());

			// Waiting list
//			if (tpActionVo.getWaitingListIsNotNull())//wdev-14805
//				form.edtWaitingList().setValue(tpActionVo.getWaitingList().length() > 0 ? "N" : tpActionVo.getWaitingList().length() == 0 ? "N" : "Y");
				form.edtWaitingList().setValue(tpActionVo.getBookedDateIsNotNull() ? "N" : tpActionVo.getWLId() == null ? "N" : "Y"); //wdev-14805
//			else//wdev-14805
//				form.edtWaitingList().setValue(null);//wdev-14805

			// External Beam
			if (tpActionVo.getModalEnergyIsNotNull())
			{
				Float sdec = GetFloatFromString(tpActionVo.getModalEnergy());			
				form.edtEnergyValue().setValue(sdec);
			}
			else
				form.edtEnergyValue().setValue(null);
						
			PopulateDoseGrid(tpActionVo.getDose());

			// Imaging Date
			form.dtDate().setValue(tpActionVo.getImagingDate());
	
			if (tpActionVo.getActivityIsNotNull() && tpActionVo.getActivity().getActivityId() == -201) //WDEV-16127
			{
				form.dtStartDate().setValue(tpActionVo.getChemPlanStartDate());
			}
			else
			{
				// Start Date Regime
				form.dtStartDate().setValue(tpActionVo.getStartDateRegime());
			}

			// Treatment Group/Site/Technique`
			if (tpActionVo.getGroupSiteTechIsNotNull())
			{
				for (Iterator<?> iter = tpActionVo.getGroupSiteTech().iterator(); iter.hasNext();) 
				{
					PatTrPlanGroupSiteTechVo element = (PatTrPlanGroupSiteTechVo) iter.next();
					if (element.getActiveStatusIsNotNull())
					{
						if (element.getActiveStatus().equals(ims.core.vo.lookups.YesNo.YES))
						{
							GridTrSiteRow row = form.GridTrSite().getRows().newRow();
							row.setGroup(element.getTreatmentGroupSiteIsNotNull() 
								&& (element.getTreatmentGroupSite().getParentInstance() != null && element.getTreatmentGroupSite().getParentInstance().getParentInstance() != null) ? 
										element.getTreatmentGroupSite().getParentInstance().getParentInstance() : ( element.getTreatmentGroupSite().getParentInstance() != null ? element.getTreatmentGroupSite().getParentInstance() : element.getTreatmentGroupSite()) );

							row.getTreatmentSite().clear();
													
							PopulateSiteGridCombo(row, row.getGroup());//WDEV-14611
							
							
							//WDEV-14611
							if (element.getTreatmentGroupSite().getParentInstance() != null)
							{
								row.getTreatmentSite().setValue(element.getTreatmentGroupSiteIsNotNull() && element.getTreatmentGroupSite() != null ? element.getTreatmentGroupSite() : null);
								row.setTooltipForTreatmentSite(element.getTreatmentGroupSiteIsNotNull() && element.getTreatmentGroupSite() != null ? element.getTreatmentGroupSite().getText() : "");
							}

							row.getTechnique().clear();
							PopulateTechniqueCombo(row, row.getGroup());//WDEV-14611
							row.getTechnique().setValue(element.getTreatmentTechniqueIsNotNull() ? element.getTreatmentTechnique() : null);
							row.setTooltipForTechnique(element.getTreatmentTechniqueIsNotNull() ? element.getTreatmentTechnique().getText() : "");

							row.setValue(element.getID_PatTreatmentPlanGroupSiteTech());
						}
					}
				}
			}
		}
	}

	private void populateStateGrid()
	{
		PatTreatPlanActionVo actionUpdateDto = form.getLocalContext().getAction();
		
		if (actionUpdateDto == null)
			return;

		// TODO Populate the grid in the reverse order
		actionUpdateDto.getActionStatusPoint().sort(SortOrder.DESCENDING);
		for (Iterator<?> iter = actionUpdateDto.getActionStatusPoint().iterator(); iter.hasNext();) 
		{
			PatActionStatusPointVo element = (PatActionStatusPointVo) iter.next();
			GridStatusRow row = form.GridStatus().getRows().newRow();
			row.setStatusPoint(element.getActionStatusIsNotNull() ? element.getActionStatus().getText() : "" );
			row.setStartDate(element.getSpStartDateIsNotNull()?element.getSpStartDate().toString():"");
			row.setEndDate(element.getSpEndDateIsNotNull()?element.getSpEndDate().toString():"");
			row.setReasonStatusPoint(element.getActionStatusReasonIsNotNull()?element.getActionStatusReason().getText():"");
			row.setValue(element);
		}
	}

	private PatTreatPlanActionVo GetActionsDto()
	{
		return form.getGlobalContext().getPatTreatmentPlanAction();
	}

	private void SetHcpComboValue(HcpLiteVo vo)
	{
		form.cmbHcp().setValue(vo);
//		TODO clinical team link up for hcp
		// Hcp
//		HcpLiteVoCollection hcps = form.getLocalContext().getHCPs();
//		if (hcps != null)
//		{
//			for (Iterator iter = hcps.iterator(); iter.hasNext();) {
//				HcpLiteVo element = (HcpLiteVo) iter.next();
//				
//				if (element.getID_Hcp().equals(vo.getID_Hcp()))
//				{
//					form.cmbHcp().setValue(element);
//					break;
//				}
//				
//			}
//		}
		
//		if (hcps != null)
//		{
//			for (int i = 0; i < hcps.DataCollection.count(); ++i)
//			{
//				if (hcps.DataCollection.get(i).Hcp_id.equals(vo))
//				{
//					form.cmbHcp().setValue(hcps.DataCollection.get(i));
//					break;
//				}
//			}
//		}
	}

	// #region 01.03.2003
	protected void OnAddDose() throws ims.framework.exceptions.PresentationLogicException
	{
		form.gDose().getRows().newRow(true);
		Dose_SelectionChanged();
	}

	protected void OnRemoveDose() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.gDose().getSelectedRowIndex() >= 0)
		{
			form.gDose().getRows().remove(form.gDose().getSelectedRowIndex());
			form.btnRemoveDose().setEnabled(form.getMode().equals(FormMode.EDIT) && form.gDose().getSelectedRowIndex() >= 0);
		}
	}

	protected void Dose_SelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		int selIndex = form.gDose().getSelectedRowIndex();
		// flags the dose if it have been booked
		boolean buttonEnableble = true;
		if (selIndex >= 0)
		{
			PatTreatPlanActionDoseVo doseRecord = form.gDose().getRows().get(selIndex).getValue();
			if (doseRecord != null && doseRecord.getEdisbooked().equalsIgnoreCase("Y"))
				buttonEnableble = false;

		}
		form.btnRemoveDose().setEnabled(buttonEnableble && form.getMode().equals(FormMode.EDIT) && form.gDose().getSelectedRowIndex() >= 0);
	}

	private void PopulateDoseGrid(PatTreatPlanActionDoseVoCollection doseCollVo)
	{
		form.gDose().getRows().clear();
		
		if (doseCollVo != null)
		{
			for (Iterator<?> iter = doseCollVo.iterator(); iter.hasNext();) 
			{
				PatTreatPlanActionDoseVo element = (PatTreatPlanActionDoseVo) iter.next();
				if (element.getEdoseastat().equals(ACTIVE))
				{
					gDoseRow row = form.gDose().getRows().newRow();
					row.setDose(element.getEbdose());
					row.setFractions(element.getEbfractions());
					row.setDays(element.getEbdur());
					row.setValue(element);
					if (element.getEdisbookedIsNotNull() && element.getEdisbooked().equalsIgnoreCase("Y"))
						row.setReadOnly(true);
				}				
			}
		}
		
	}

	private void GetExternalBeamDetails(PatTreatPlanActionVo actionVo)
	{
		//WDEV-15157 if (!ScreenInUpdateMode() )
		//{
			actionVo.setDose(null);
			
			// Insert
			for (int i = 0; i < form.gDose().getRows().size(); i++)
			{
				//int seqNoIndex = actionVo.Dose_seqCollection.add();
				PatTreatPlanActionDoseVo doseRecord = form.gDose().getRows().get(i).getValue();
				String Booked = doseRecord != null ? doseRecord.getEdisbooked() : "N";
				Integer DoseValue = form.gDose().getRows().get(i).getDose();
				Integer FractionValue = form.gDose().getRows().get(i).getFractions();
				Integer DurationValue = form.gDose().getRows().get(i).getDays();
				
				if (actionVo.getDose() == null)
					actionVo.setDose(new PatTreatPlanActionDoseVoCollection());
				
				actionVo.getDose().add(PopulateDoseCollectionRecord(new PatTreatPlanActionDoseVo(), DoseValue, FractionValue, DurationValue, Booked));
			}

			// Check Duplicates
		/*} WDEV-15157 
		else
		{
			// Update - take care of the inactive records
			//actionVo.setDose(null);
			for (int i = 0; i < form.gDose().getRows().size(); i++)
			{
				PatTreatPlanActionDoseVo doseRecord = form.gDose().getRows().get(i).getValue();
				String Booked = doseRecord != null ? doseRecord.getEdisbooked() : "N";
				Integer DoseValue = form.gDose().getRows().get(i).getDose();
				Integer FractionValue = form.gDose().getRows().get(i).getFractions();
				Integer DurationValue = form.gDose().getRows().get(i).getDays();
				if (form.gDose().getRows().get(i).getValue() != null)
				{
					//update
					//int recIndex = GetSeqNoRecord(actionVo.Dose_seqCollection, form.gDose().getRows().get(i).getValue());
					//if (recIndex >= 0)
					Integer index = 0;
					for (Iterator<?> iter = actionVo.getDose().iterator(); iter.hasNext();) 
					{						
						PatTreatPlanActionDoseVo element = (PatTreatPlanActionDoseVo) iter.next();
						if (element.equals(form.gDose().getRows().get(i).getValue()))
						{
							//update it
							actionVo.getDose().set(index, PopulateDoseCollectionRecord(form.gDose().getRows().get(i).getValue(), DoseValue, FractionValue, DurationValue, Booked));
						}
						index++;
					}
					
				}
				else
				{	
					//just add to collection
					if (actionVo.getDose() == null)
						actionVo.setDose(new PatTreatPlanActionDoseVoCollection());

					actionVo.getDose().add(PopulateDoseCollectionRecord(new PatTreatPlanActionDoseVo(), DoseValue, FractionValue, DurationValue, Booked));
				}
			}
		}*/
	}

	private PatTreatPlanActionDoseVo PopulateDoseCollectionRecord(PatTreatPlanActionDoseVo doseVo, Integer doseValue, Integer fractionValue, Integer durationValue, String Booked)
	{
		// save here the ED_ISBOOKED
		doseVo.setEdisbooked(Booked);
		doseVo.setEbdose(doseValue);
		doseVo.setEbfractions(fractionValue);
		doseVo.setEbdur(durationValue);
		doseVo.setEdoseastat(ACTIVE);
		
		return doseVo;
	}

	private void displayActivityControls(Integer schedActivityId)
	{
		displayActivityControls(schedActivityId, true);
	}

	private void displayActivityControls(Integer activityId, boolean clearGrids)
	{
		int activity = activityId != null ? activityId : 0;
		switch (activity)
		{
			case -200 :// Imaging
				showImagingControls(true);
			break;
			case -201 : // Chemotherapy
				showChemotherapyControls(true);
			break;
			case -202 :// External Beam Activity
				showExternalBeamControls(true);
			break;
			case -204 : // Brachytherapy
				ShowImagingControls(true, true);
			break;
			case -207 : // Orthovoltage
				showExternalBeamControls(true);
			break;
			case -211 :// Other (The same as Imaging)
				// Teletherapy controls
				showImagingControls(true);
			break;
			default :
				showExternalBeamControls(false);
				showImagingControls(false);
				showChemotherapyControls(false);
			break;
		}

		if (clearGrids && (activity != -202 || activity != -207))
		{
			// SetEnableTrSiteButtons(false);
			if (form.GridTrSite().getRows().size() > 0)
				form.GridTrSite().getRows().clear();
			if (form.gDose().getRows().size() > 0)
				form.gDose().getRows().clear();
		}
		else
		{
			// SetEnableTrSiteButtons(true);
		}
	}

	private void setEnableTrSiteButtons(boolean bEnable)
	{
		form.btnAddTrSite().setEnabled(bEnable);
		form.btnRemoveTrSite().setEnabled(bEnable);
	}

	private Integer GetNextAlailableOrderNo()
	{
		int orderNo = 0;
		int newOrderNo = 0;
		PatTreatmentPlanLiteVo actionGetDto = form.getGlobalContext().getPatTreatmentPlan();
		if (actionGetDto != null && actionGetDto.getActionsIsNotNull())
		{
			for (Iterator<?> iter = actionGetDto.getActions().iterator(); iter.hasNext();)
			{
				PatTreatPlanActionVo actionVo = (PatTreatPlanActionVo) iter.next();
				Integer SqlnewOrderNo = actionVo.getAction_OrderNumber();
				newOrderNo = SqlnewOrderNo == null ? 0 : SqlnewOrderNo.intValue();
				if (orderNo < newOrderNo)
					orderNo = newOrderNo;
				
			}
		}

		orderNo += 1;

		return new Integer(orderNo);
	}

	private Integer GetValue(int nColumn)
	{
		int totalValue = 0;
		for (int i = 0; i < form.gDose().getRows().size(); i++)
		{
			switch (nColumn)
			{
				case 1 :
					if (form.gDose().getRows().get(i).getDose() != null)
						totalValue += form.gDose().getRows().get(i).getDose().intValue();
				break;
				case 2 :
					if (form.gDose().getRows().get(i).getFractions() != null)
						totalValue += form.gDose().getRows().get(i).getFractions().intValue();
				break;
				case 3 :
					if (form.gDose().getRows().get(i).getDays() != null)
						totalValue += form.gDose().getRows().get(i).getDays().intValue();
			}
		}

		return totalValue;
	}

	private Integer GetTotalValue(int columnIndex)
	{
		switch (columnIndex)
		{
			case 1 :
				return GetValue(DOSE);
			case 2 :
				return GetValue(FRACTIONS);
			case 3 :
				return GetValue(DURATION);
		}

		return 0;
	}

	private void ShowMessage(String message)
	{
		engine.showMessage(message);
	}

	protected void onGridTrSiteGridComboBoxSelectionChanged(int column, ims.ccosched.forms.pattreatmentplanaction.GenForm.GridTrSiteRow row, Object value) throws PresentationLogicException
	{
		if (column == 0)
		{
			PopulateSiteGridCombo(row, value);
			PopulateTechniqueCombo(row, value);
		}
	}

	private void PopulateTechniqueCombo(GridTrSiteRow row, Object value)
	{
		ims.framework.controls.GridMutableComboBox cmbTechnique = row.getTechnique();
		cmbTechnique.clear();
		
		TechniquesCollection collLkups = domain.listTreatmentGroupsTechniques((TreatmentGroupSite) value);
		for (int i = 0 ; collLkups != null && i < collLkups.size() ; i++) 
		{
			if (collLkups.get(i).isActive()) 
				cmbTechnique.newRow(collLkups.get(i), collLkups.get(i).getText());
		}
	}

	private void PopulateSiteGridCombo(GridTrSiteRow row, Object parentValue)
	{
		PopulateSiteGridCombo(row, parentValue, null);
	}

	private void PopulateSiteGridCombo(GridTrSiteRow row, Object parentValue, String value)
	{
		ims.framework.controls.GridMutableComboBox cmbTrSite = row.getTreatmentSite();
		cmbTrSite.clear();
		
		// GridComboBox cmbTrSite = form.GridTrSite().TreatmentSiteComboBox();
		PatTreatmentPlanLiteVo treatmentPlanDto = form.getGlobalContext().getPatTreatmentPlan();
							
		// Load Treatment Sites for that selected group
		if (treatmentPlanDto != null && treatmentPlanDto.getTreatmentSitesIsNotNull())
		{
			for (int i = 0 ; i < treatmentPlanDto.getTreatmentSites().size() ; i++) 
			{
				if ( (treatmentPlanDto.getTreatmentSites().get(i).getParent() != null && treatmentPlanDto.getTreatmentSites().get(i).getParent().equals(((TreatmentGroupSite) parentValue)))
					|| (treatmentPlanDto.getTreatmentSites().get(i).getParent() != null 
							&& treatmentPlanDto.getTreatmentSites().get(i).getParent().getParent() != null
							&& treatmentPlanDto.getTreatmentSites().get(i).getParent().getParent().equals(((TreatmentGroupSite) parentValue))))
				{
					//if (!treatSite.getTreatmentSiteIsNotNull() && (treatSite.getActiveStatusIsNotNull() && treatSite.getActiveStatus().equals(ims.core.vo.lookups.YesNo.YES) || SiteSaved(treatSite.getTreatmentSite())))
					if (treatmentPlanDto.getTreatmentSites().get(i).isActive()) 
						cmbTrSite.newRow(treatmentPlanDto.getTreatmentSites().get(i), treatmentPlanDto.getTreatmentSites().get(i).getText());
				}
			}
		}
		
		//TODO
		// Add Active/Inactive logic
		
		
//			for (int x = 0; x < treatmentPlanDto.SeqnoCollection.count(); x++)
//			{
//				// Add Active/Inactive logic
//				if (parentValue != null && parentValue.toString().equals(treatmentPlanDto.SeqnoCollection.get(x).Tgroupid))
//				{
//					if (!treatmentPlanDto.SeqnoCollection.get(x).Txsite.equals("") && (treatmentPlanDto.SeqnoCollection.get(x).Act_stat.equals(ACTIVE) || SiteSaved(treatmentPlanDto.SeqnoCollection.get(x).Txsite)))
//					{
//						cmbTrSite.newRow(treatmentPlanDto.SeqnoCollection.get(x), treatmentPlanDto.SeqnoCollection.get(x).Tsitetxt);
//					}
//				}
//			}

		
		if (value != null && cmbTrSite != null && parentValue != null)
		{
			GroupSiteVo vo = (GroupSiteVo)parentValue;
			cmbTrSite.newRow(vo, vo.getDescriptionIsNotNull()?vo.getDescription():"");
			cmbTrSite.setValue(value);
		}
	}

	private void clearControls()
	{
		form.gDose().getRows().clear();
		form.GridTrSite().getRows().clear();
		form.GridStatus().getRows().clear();
		
	}

	private void displayMessage(String message)
	{
		engine.showMessage(message);
	}

	// checks the Pat_req flag
	private boolean isPatientRequired()
	{
//TODO
//		Sd_activity_action actions = form.getLocalContext().getActions();// UIEngine.Context.Get("10003:Actions")
//																			// as
//																			// dto.Sd_activity_actionDTO;
//		String groupId = form.cmbGroup().getValue() != null ? form.cmbGroup().getValue() : null;
//		String activityId = form.cmbActivity().getValue() != null ? form.cmbActivity().getValue().Activ_id : null;
//		String actionId = form.cmbAction().getValue() != null ? form.cmbAction().getValue() : null;
//		for (int i = 0; actions != null && i < actions.DataCollection.count(); ++i)
//		{
//			// Check the Group, Activity, Action and
//			if (actions.DataCollection.get(i).Grp_id.equals(groupId) && actions.DataCollection.get(i).Activ_id.equals(activityId) && actions.DataCollection.get(i).Action_id.equals(actionId) && actions.DataCollection.get(i).Pat_req.equals("N"))
//			{
//				return false;
//			}
//		}

		return true;
	}

	@Override
	protected void onCmbActionValueChanged() throws PresentationLogicException
	{
		
		ActivityActionVo action_id = form.cmbAction().getValue();		
		if (action_id != null && action_id.getActionIsNotNull() && action_id.getAction().getID_Action().equals(ACTION_ID))
		{
			loadTreatmentActionCmb();
			setVisibleTreatmentActionControl(true);
		}
		else
		{
			form.cmbTreatAction().clear();
			setVisibleTreatmentActionControl(false);
		}
	}

	private void setVisibleTreatmentActionControl(boolean value)
	{
		form.lblTreatmentAction1().setVisible(value);
		form.lblTreatmentAction2().setVisible(value);
		form.cmbTreatAction().setVisible(value);
	}

	private void loadTreatmentActionCmb()
	{
		form.cmbTreatAction().clear();

		PatTreatPlanActionVoCollection actions = form.getGlobalContext().getPatTreatmentPlan().getActions();
		
		for (Iterator<?> iter = actions.iterator(); iter.hasNext();) 
		{
			PatTreatPlanActionVo go_ptplactRecord = (PatTreatPlanActionVo) iter.next();
			
			if (go_ptplactRecord.getAction().getActivityId().equals(-202) || go_ptplactRecord.getAction().getActivityId().equals("-207"))
			{
				StringBuilder actionText = new StringBuilder();
				actionText.append(ACTIVITY + (go_ptplactRecord.getActivity().getNameIsNotNull()?go_ptplactRecord.getActivity().getName():""));
				actionText.append("; ");
				actionText.append(ACTION + (go_ptplactRecord.getAction().getActionIsNotNull()?go_ptplactRecord.getAction().getAction().getName():""));
				if (go_ptplactRecord.getPriorityIsNotNull())
				{
					actionText.append("; ");
					actionText.append(PRIORITY + go_ptplactRecord.getPriority().getText());
				}
				if (go_ptplactRecord.getStatusIsNotNull())
				{
					actionText.append("; ");
					actionText.append(STATUS + go_ptplactRecord.getStatus().getText());
				}
				Date startDate = go_ptplactRecord.getEstartDate();
				if (startDate != null)
				{
					actionText.append("; ");
					actionText.append(START_DATE + startDate.toString(DateFormat.ISO));
				}
				Date endDate = go_ptplactRecord.getEendDate();
				if (endDate != null)
				{
					actionText.append("; ");
					actionText.append(END_DATE + endDate.toString(DateFormat.ISO));
				}
				form.cmbTreatAction().newRow(actionText.toString(), actionText.toString());
			}
		}
	}

	private boolean isTreatmentActionMandatory()
	{
		if (form.cmbAction().getValue().getActionIsNotNull())
		{
			Integer action_id = form.cmbAction().getValue().getAction().getID_Action();
			return action_id != null && action_id.equals(ACTION_ID);
		}
		
		return false;
	}


	@Override
	protected void AddTreatmentSite() throws PresentationLogicException
	{
		form.GridTrSite().getRows().newRow(true);
		onGridTrSiteSelectionChanged();
	}
	//wdev-13961
	public class ConsultatntNameComparator implements Comparator
	{
		private int direction = 1;
		
		public ConsultatntNameComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ConsultatntNameComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String name1 = null;
			String name2 = null;
			if(ob1 instanceof HcpLiteVo )
			{
				HcpLiteVo ps1 = (HcpLiteVo)ob1;
				name1 = ps1 != null ? ps1.getIMosName():null;
			}
			if(ob2 instanceof HcpLiteVo)
			{
				HcpLiteVo ps2 = (HcpLiteVo)ob2;
				name2 = ps2 != null ? ps2.getIMosName():null;
			}
			if(name1 != null )
				return  name1.compareTo(name2)*direction;
			if(name2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}


}
