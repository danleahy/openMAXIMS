//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.pattreatmentplanaction;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.ccosched.domain.PatTreatmentPlanAction.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.ccosched.domain.PatTreatmentPlanAction domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbPlannedRegimeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPlannedRegime().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RegimenAcronym existingInstance = (ims.oncology.vo.lookups.RegimenAcronym)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPlannedRegimeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.RegimenAcronym)
		{
			ims.oncology.vo.lookups.RegimenAcronym instance = (ims.oncology.vo.lookups.RegimenAcronym)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPlannedRegimeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RegimenAcronym existingInstance = (ims.oncology.vo.lookups.RegimenAcronym)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPlannedRegime().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPlannedRegimeLookup()
	{
		this.form.cmbPlannedRegime().clear();
		ims.oncology.vo.lookups.RegimenAcronymCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getRegimenAcronym(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPlannedRegime().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPlannedRegimeLookupValue(int id)
	{
		ims.oncology.vo.lookups.RegimenAcronym instance = ims.oncology.vo.lookups.LookupHelper.getRegimenAcronymInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPlannedRegime().setValue(instance);
	}
	protected final void defaultcmbPlannedRegimeLookupValue()
	{
		this.form.cmbPlannedRegime().setValue((ims.oncology.vo.lookups.RegimenAcronym)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.RegimenAcronym.class, engine.getFormName().getID(), ims.oncology.vo.lookups.RegimenAcronym.TYPE_ID));
	}
	protected final void oncmbUnitValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbUnit().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Unit existingInstance = (ims.ccosched.vo.lookups.Unit)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUnitLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Unit)
		{
			ims.ccosched.vo.lookups.Unit instance = (ims.ccosched.vo.lookups.Unit)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUnitLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Unit existingInstance = (ims.ccosched.vo.lookups.Unit)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbUnit().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUnitLookup()
	{
		this.form.cmbUnit().clear();
		ims.ccosched.vo.lookups.UnitCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getUnit(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbUnit().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUnitLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Unit instance = ims.ccosched.vo.lookups.LookupHelper.getUnitInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbUnit().setValue(instance);
	}
	protected final void defaultcmbUnitLookupValue()
	{
		this.form.cmbUnit().setValue((ims.ccosched.vo.lookups.Unit)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Unit.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Unit.TYPE_ID));
	}
	protected final void oncmbModalityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbModality().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Modality existingInstance = (ims.ccosched.vo.lookups.Modality)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbModalityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Modality)
		{
			ims.ccosched.vo.lookups.Modality instance = (ims.ccosched.vo.lookups.Modality)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbModalityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Modality existingInstance = (ims.ccosched.vo.lookups.Modality)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbModality().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbModalityLookup()
	{
		this.form.cmbModality().clear();
		ims.ccosched.vo.lookups.ModalityCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getModality(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbModality().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbModalityLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Modality instance = ims.ccosched.vo.lookups.LookupHelper.getModalityInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbModality().setValue(instance);
	}
	protected final void defaultcmbModalityLookupValue()
	{
		this.form.cmbModality().setValue((ims.ccosched.vo.lookups.Modality)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Modality.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Modality.TYPE_ID));
	}
	protected final void oncmbCategoryValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCategory().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.SchedCategory existingInstance = (ims.ccosched.vo.lookups.SchedCategory)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCategoryLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.SchedCategory)
		{
			ims.ccosched.vo.lookups.SchedCategory instance = (ims.ccosched.vo.lookups.SchedCategory)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCategoryLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.SchedCategory existingInstance = (ims.ccosched.vo.lookups.SchedCategory)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCategoryLookup()
	{
		this.form.cmbCategory().clear();
		ims.ccosched.vo.lookups.SchedCategoryCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getSchedCategory(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCategoryLookupValue(int id)
	{
		ims.ccosched.vo.lookups.SchedCategory instance = ims.ccosched.vo.lookups.LookupHelper.getSchedCategoryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCategory().setValue(instance);
	}
	protected final void defaultcmbCategoryLookupValue()
	{
		this.form.cmbCategory().setValue((ims.ccosched.vo.lookups.SchedCategory)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.SchedCategory.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.SchedCategory.TYPE_ID));
	}
	protected final void oncmbAttendingAsValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAttendingAs().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.AttendingAs existingInstance = (ims.ccosched.vo.lookups.AttendingAs)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAttendingAsLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.AttendingAs)
		{
			ims.ccosched.vo.lookups.AttendingAs instance = (ims.ccosched.vo.lookups.AttendingAs)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAttendingAsLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.AttendingAs existingInstance = (ims.ccosched.vo.lookups.AttendingAs)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAttendingAs().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAttendingAsLookup()
	{
		this.form.cmbAttendingAs().clear();
		ims.ccosched.vo.lookups.AttendingAsCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getAttendingAs(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAttendingAs().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAttendingAsLookupValue(int id)
	{
		ims.ccosched.vo.lookups.AttendingAs instance = ims.ccosched.vo.lookups.LookupHelper.getAttendingAsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAttendingAs().setValue(instance);
	}
	protected final void defaultcmbAttendingAsLookupValue()
	{
		this.form.cmbAttendingAs().setValue((ims.ccosched.vo.lookups.AttendingAs)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.AttendingAs.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.AttendingAs.TYPE_ID));
	}
	protected final void oncmbTransportValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTransport().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Transport existingInstance = (ims.ccosched.vo.lookups.Transport)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransportLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Transport)
		{
			ims.ccosched.vo.lookups.Transport instance = (ims.ccosched.vo.lookups.Transport)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransportLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Transport existingInstance = (ims.ccosched.vo.lookups.Transport)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTransport().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransportLookup()
	{
		this.form.cmbTransport().clear();
		ims.ccosched.vo.lookups.TransportCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getTransport(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTransport().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransportLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Transport instance = ims.ccosched.vo.lookups.LookupHelper.getTransportInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTransport().setValue(instance);
	}
	protected final void defaultcmbTransportLookupValue()
	{
		this.form.cmbTransport().setValue((ims.ccosched.vo.lookups.Transport)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Transport.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Transport.TYPE_ID));
	}
	protected final void oncmbStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Status existingInstance = (ims.ccosched.vo.lookups.Status)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Status)
		{
			ims.ccosched.vo.lookups.Status instance = (ims.ccosched.vo.lookups.Status)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Status existingInstance = (ims.ccosched.vo.lookups.Status)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatusLookup()
	{
		this.form.cmbStatus().clear();
		ims.ccosched.vo.lookups.StatusCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatusLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Status instance = ims.ccosched.vo.lookups.LookupHelper.getStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbStatus().setValue(instance);
	}
	protected final void defaultcmbStatusLookupValue()
	{
		this.form.cmbStatus().setValue((ims.ccosched.vo.lookups.Status)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Status.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Status.TYPE_ID));
	}
	protected final void oncmbPriorityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPriority().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Priority existingInstance = (ims.ccosched.vo.lookups.Priority)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPriorityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Priority)
		{
			ims.ccosched.vo.lookups.Priority instance = (ims.ccosched.vo.lookups.Priority)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPriorityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Priority existingInstance = (ims.ccosched.vo.lookups.Priority)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPriority().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPriorityLookup()
	{
		this.form.cmbPriority().clear();
		ims.ccosched.vo.lookups.PriorityCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getPriority(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPriority().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPriorityLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Priority instance = ims.ccosched.vo.lookups.LookupHelper.getPriorityInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPriority().setValue(instance);
	}
	protected final void defaultcmbPriorityLookupValue()
	{
		this.form.cmbPriority().setValue((ims.ccosched.vo.lookups.Priority)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Priority.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Priority.TYPE_ID));
	}
	protected final void onAnaestheticValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.Anaesthetic().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Anaesthetic existingInstance = (ims.ccosched.vo.lookups.Anaesthetic)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindAnaestheticLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Anaesthetic)
		{
			ims.ccosched.vo.lookups.Anaesthetic instance = (ims.ccosched.vo.lookups.Anaesthetic)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindAnaestheticLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Anaesthetic existingInstance = (ims.ccosched.vo.lookups.Anaesthetic)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.Anaesthetic().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindAnaestheticLookup()
	{
		this.form.Anaesthetic().clear();
		ims.ccosched.vo.lookups.AnaestheticCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getAnaesthetic(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.Anaesthetic().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setAnaestheticLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Anaesthetic instance = ims.ccosched.vo.lookups.LookupHelper.getAnaestheticInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.Anaesthetic().setValue(instance);
	}
	protected final void defaultAnaestheticLookupValue()
	{
		this.form.Anaesthetic().setValue((ims.ccosched.vo.lookups.Anaesthetic)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Anaesthetic.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Anaesthetic.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.ccosched.domain.PatTreatmentPlanAction domain;
}
