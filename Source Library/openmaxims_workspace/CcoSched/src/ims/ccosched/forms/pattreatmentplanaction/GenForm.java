//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.pattreatmentplanaction;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTreatActionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPlannedRegimeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.oncology.vo.lookups.RegimenAcronym value)
		{
			return super.control.removeRow(value);
		}
		public ims.oncology.vo.lookups.RegimenAcronym getValue()
		{
			return (ims.oncology.vo.lookups.RegimenAcronym)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.RegimenAcronym value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbUnitComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Unit value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Unit value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Unit getValue()
		{
			return (ims.ccosched.vo.lookups.Unit)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Unit value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbModalityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Modality value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Modality value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Modality getValue()
		{
			return (ims.ccosched.vo.lookups.Modality)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Modality value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.ActionStatusReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.ActionStatusReason getValue()
		{
			return (ims.ccosched.vo.lookups.ActionStatusReason)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.ActionStatusReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.SchedCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.SchedCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.SchedCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.SchedCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.SchedCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.SchedCategory getValue()
		{
			return (ims.ccosched.vo.lookups.SchedCategory)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.SchedCategory value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActionStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.ActionStatusReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.ActionStatusReason getValue()
		{
			return (ims.ccosched.vo.lookups.ActionStatusReason)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.ActionStatusReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAttendingAsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.AttendingAs value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.AttendingAs value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.AttendingAs value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.AttendingAs value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.AttendingAs value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.AttendingAs getValue()
		{
			return (ims.ccosched.vo.lookups.AttendingAs)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.AttendingAs value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHcpComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTransportComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Transport value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Transport value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Transport value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Transport value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Transport value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Transport getValue()
		{
			return (ims.ccosched.vo.lookups.Transport)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Transport value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Status value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Status value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Status value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Status value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Status value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Status getValue()
		{
			return (ims.ccosched.vo.lookups.Status)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Status value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPriorityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Priority value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Priority getValue()
		{
			return (ims.ccosched.vo.lookups.Priority)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Priority value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.dtomove.vo.ActivityActionVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.dtomove.vo.ActivityActionVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.dtomove.vo.ActivityActionVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.dtomove.vo.ActivityActionVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.dtomove.vo.ActivityActionVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.dtomove.vo.ActivityActionVo getValue()
		{
			return (ims.dtomove.vo.ActivityActionVo)super.control.getValue();
		}
		public void setValue(ims.dtomove.vo.ActivityActionVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActivityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.dtomove.vo.SchedActivityVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.dtomove.vo.SchedActivityVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.dtomove.vo.SchedActivityVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.dtomove.vo.SchedActivityVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.dtomove.vo.SchedActivityVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.dtomove.vo.SchedActivityVo getValue()
		{
			return (ims.dtomove.vo.SchedActivityVo)super.control.getValue();
		}
		public void setValue(ims.dtomove.vo.SchedActivityVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbGroupComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.dtomove.vo.ActivityGroupVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.dtomove.vo.ActivityGroupVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.dtomove.vo.ActivityGroupVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.dtomove.vo.ActivityGroupVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.dtomove.vo.ActivityGroupVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.dtomove.vo.ActivityGroupVo getValue()
		{
			return (ims.dtomove.vo.ActivityGroupVo)super.control.getValue();
		}
		public void setValue(ims.dtomove.vo.ActivityGroupVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class AnaestheticComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Anaesthetic value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Anaesthetic value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Anaesthetic value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Anaesthetic value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Anaesthetic value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Anaesthetic getValue()
		{
			return (ims.ccosched.vo.lookups.Anaesthetic)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Anaesthetic value)
		{
			super.control.setValue(value);
		}
	}
	public static class gDoseRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gDoseRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setDoseReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isDoseReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showDoseOpened()
		{
			super.row.showOpened(0);
		}
		public Integer getDose()
		{
			return (Integer)super.row.get(0);
		}
		public void setDose(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellDoseTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setFractionsReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isFractionsReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showFractionsOpened()
		{
			super.row.showOpened(1);
		}
		public Integer getFractions()
		{
			return (Integer)super.row.get(1);
		}
		public void setFractions(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellFractionsTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setDaysReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isDaysReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showDaysOpened()
		{
			super.row.showOpened(2);
		}
		public Integer getDays()
		{
			return (Integer)super.row.get(2);
		}
		public void setDays(Integer value)
		{
			super.row.set(2, value);
		}
		public void setCellDaysTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.dtomove.vo.PatTreatPlanActionDoseVo getValue()
		{
			return (ims.dtomove.vo.PatTreatPlanActionDoseVo)super.row.getValue();
		}
		public void setValue(ims.dtomove.vo.PatTreatPlanActionDoseVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class gDoseRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gDoseRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gDoseRow get(int index)
		{
			return new gDoseRow(super.collection.get(index));
		}
		public gDoseRow newRow()
		{
			return new gDoseRow(super.collection.newRow());
		}
		public gDoseRow newRow(boolean autoSelect)
		{
			return new gDoseRow(super.collection.newRow(autoSelect));
		}
		public gDoseRow newRowAt(int index)
		{
			return new gDoseRow(super.collection.newRowAt(index));
		}
		public gDoseRow newRowAt(int index, boolean autoSelect)
		{
			return new gDoseRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gDoseGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
		}
		public ims.dtomove.vo.PatTreatPlanActionDoseVoCollection getValues()
		{
			ims.dtomove.vo.PatTreatPlanActionDoseVoCollection listOfValues = new ims.dtomove.vo.PatTreatPlanActionDoseVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.dtomove.vo.PatTreatPlanActionDoseVo getValue()
		{
			return (ims.dtomove.vo.PatTreatPlanActionDoseVo)super.grid.getValue();
		}
		public void setValue(ims.dtomove.vo.PatTreatPlanActionDoseVo value)
		{
			super.grid.setValue(value);
		}
		public gDoseRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gDoseRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gDoseRowCollection getRows()
		{
			return new gDoseRowCollection(super.grid.getRows());
		}
		public gDoseRow getRowByValue(ims.dtomove.vo.PatTreatPlanActionDoseVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gDoseRow(row);
		}
		public void setDoseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getDoseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setFractionsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getFractionsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setDaysHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getDaysHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class GridStatusRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected GridStatusRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setStatusPointReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isStatusPointReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showStatusPointOpened()
		{
			super.row.showOpened(0);
		}
		public String getStatusPoint()
		{
			return (String)super.row.get(0);
		}
		public void setStatusPoint(String value)
		{
			super.row.set(0, value);
		}
		public void setCellStatusPointTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isStartDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showStartDateOpened()
		{
			super.row.showOpened(1);
		}
		public String getStartDate()
		{
			return (String)super.row.get(1);
		}
		public void setStartDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellStartDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setEndDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isEndDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showEndDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getEndDate()
		{
			return (String)super.row.get(2);
		}
		public void setEndDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellEndDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setReasonStatusPointReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isReasonStatusPointReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showReasonStatusPointOpened()
		{
			super.row.showOpened(3);
		}
		public String getReasonStatusPoint()
		{
			return (String)super.row.get(3);
		}
		public void setReasonStatusPoint(String value)
		{
			super.row.set(3, value);
		}
		public void setCellReasonStatusPointTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.ccosched.vo.PatActionStatusPointVo getValue()
		{
			return (ims.ccosched.vo.PatActionStatusPointVo)super.row.getValue();
		}
		public void setValue(ims.ccosched.vo.PatActionStatusPointVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class GridStatusRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private GridStatusRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public GridStatusRow get(int index)
		{
			return new GridStatusRow(super.collection.get(index));
		}
		public GridStatusRow newRow()
		{
			return new GridStatusRow(super.collection.newRow());
		}
		public GridStatusRow newRow(boolean autoSelect)
		{
			return new GridStatusRow(super.collection.newRow(autoSelect));
		}
		public GridStatusRow newRowAt(int index)
		{
			return new GridStatusRow(super.collection.newRowAt(index));
		}
		public GridStatusRow newRowAt(int index, boolean autoSelect)
		{
			return new GridStatusRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class GridStatusGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.ccosched.vo.PatActionStatusPointVoCollection getValues()
		{
			ims.ccosched.vo.PatActionStatusPointVoCollection listOfValues = new ims.ccosched.vo.PatActionStatusPointVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ccosched.vo.PatActionStatusPointVo getValue()
		{
			return (ims.ccosched.vo.PatActionStatusPointVo)super.grid.getValue();
		}
		public void setValue(ims.ccosched.vo.PatActionStatusPointVo value)
		{
			super.grid.setValue(value);
		}
		public GridStatusRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new GridStatusRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public GridStatusRowCollection getRows()
		{
			return new GridStatusRowCollection(super.grid.getRows());
		}
		public GridStatusRow getRowByValue(ims.ccosched.vo.PatActionStatusPointVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new GridStatusRow(row);
		}
		public void setStatusPointHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getStatusPointHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setEndDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getEndDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setReasonStatusPointHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getReasonStatusPointHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	public static class GridTrSiteRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected GridTrSiteRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setGroupReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isGroupReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showGroupOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForGroup(String value)
		{
			super.row.setTooltip(0, value);
		}
		public Object getGroup()
		{
			return super.row.get(0);
		}
		public void setGroup(Object value)
		{
			super.row.set(0, value);
		}
		public void setCellGroupTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setTreatmentSiteReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isTreatmentSiteReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showTreatmentSiteOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForTreatmentSite(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.controls.GridMutableComboBox getTreatmentSite()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 1);
		}
		public void setCellTreatmentSiteTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setTechniqueReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isTechniqueReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showTechniqueOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForTechnique(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.controls.GridMutableComboBox getTechnique()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 2);
		}
		public void setCellTechniqueTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public Integer getValue()
		{
			return (Integer)super.row.getValue();
		}
		public void setValue(Integer value)
		{
			super.row.setValue(value);
		}
	}
	public static class GridTrSiteRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private GridTrSiteRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public GridTrSiteRow get(int index)
		{
			return new GridTrSiteRow(super.collection.get(index));
		}
		public GridTrSiteRow newRow()
		{
			return new GridTrSiteRow(super.collection.newRow());
		}
		public GridTrSiteRow newRow(boolean autoSelect)
		{
			return new GridTrSiteRow(super.collection.newRow(autoSelect));
		}
		public GridTrSiteRow newRowAt(int index)
		{
			return new GridTrSiteRow(super.collection.newRowAt(index));
		}
		public GridTrSiteRow newRowAt(int index, boolean autoSelect)
		{
			return new GridTrSiteRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class GridTrSiteGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public Integer[] getValues()
		{
			Integer[] listOfValues = new Integer[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public Integer getValue()
		{
			return (Integer)super.grid.getValue();
		}
		public void setValue(Integer value)
		{
			super.grid.setValue(value);
		}
		public GridTrSiteRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new GridTrSiteRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public GridTrSiteRowCollection getRows()
		{
			return new GridTrSiteRowCollection(super.grid.getRows());
		}
		public GridTrSiteRow getRowByValue(Integer value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new GridTrSiteRow(row);
		}
		public void setGroupHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getGroupHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox GroupComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setTreatmentSiteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getTreatmentSiteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setTechniqueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getTechniqueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 664);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 248, 0, 592, 624, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Action Update", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 232, 280, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT," Patient Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 288, 232, 336, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,"Treatment Plan", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 256, 598, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Action:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 256, 585, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 528, 104, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Needed:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 256, 459, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 256, 199, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 528, 64, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 528, 64, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 528, 64, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Energy Value:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 528, 96, 38, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 683, 66, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Units:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 528, 34, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Modality:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 536, 454, 64, 18, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Waiting List:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 256, 445, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Action Status", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 536, 423, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 256, 423, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Action Status:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 528, 226, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 528, 194, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Attending As:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 256, 185, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treating", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 256, 226, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 256, 162, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Status:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 256, 130, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Priority:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 256, 98, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Action:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 256, 66, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Activity:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 256, 34, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Group:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 528, 94, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 528, 108, 38, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regime:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 256, 397, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 536, 398, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "End Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 536, 384, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 256, 383, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 24, 128, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 24, 98, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 24, 66, 37, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 24, 34, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hosp. No.", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 24, 386, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histology:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 24, 354, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 24, 418, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Intent:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 24, 322, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Seen:", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 631, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Update", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 687, 632, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Ok", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 765, 632, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 687, 632, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 608, 453, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 88, 131, 144, 125, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 88, 96, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 88, 64, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 88, 384, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 88, 320, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 88, 352, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 88, 416, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 600, 64, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 600, 64, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 328, 453, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 328, 389, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 608, 389, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 328, 590, 488, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbTreatActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTreatActionTemp);
		cmbTreatActionComboBox cmbTreatAction = (cmbTreatActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatActionComboBox.class, m_cmbTreatActionTemp);
		super.addComboBox(cmbTreatAction);
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 600, 100, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbPlannedRegimeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPlannedRegimeTemp);
		cmbPlannedRegimeComboBox cmbPlannedRegime = (cmbPlannedRegimeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlannedRegimeComboBox.class, m_cmbPlannedRegimeTemp);
		super.addComboBox(cmbPlannedRegime);
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 720, 64, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbUnitTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbUnitTemp);
		cmbUnitComboBox cmbUnit = (cmbUnitComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUnitComboBox.class, m_cmbUnitTemp);
		super.addComboBox(cmbUnit);
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 600, 33, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbModalityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbModalityTemp);
		cmbModalityComboBox cmbModality = (cmbModalityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbModalityComboBox.class, m_cmbModalityTemp);
		super.addComboBox(cmbModality);
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 608, 421, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbReasonTemp);
		cmbReasonComboBox cmbReason = (cmbReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonComboBox.class, m_cmbReasonTemp);
		super.addComboBox(cmbReason);
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 600, 224, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbCategoryTemp);
		cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
		super.addComboBox(cmbCategory);
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 328, 421, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbActionStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbActionStatusTemp);
		cmbActionStatusComboBox cmbActionStatus = (cmbActionStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionStatusComboBox.class, m_cmbActionStatusTemp);
		super.addComboBox(cmbActionStatus);
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 600, 192, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAttendingAsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbAttendingAsTemp);
		cmbAttendingAsComboBox cmbAttendingAs = (cmbAttendingAsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAttendingAsComboBox.class, m_cmbAttendingAsTemp);
		super.addComboBox(cmbAttendingAs);
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 328, 192, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbHcpTemp);
		cmbHcpComboBox cmbHcp = (cmbHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHcpComboBox.class, m_cmbHcpTemp);
		super.addComboBox(cmbHcp);
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 328, 224, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTransportTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTransportTemp);
		cmbTransportComboBox cmbTransport = (cmbTransportComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportComboBox.class, m_cmbTransportTemp);
		super.addComboBox(cmbTransport);
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 328, 160, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 328, 128, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbPriorityTemp);
		cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
		super.addComboBox(cmbPriority);
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 328, 96, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActionTemp);
		cmbActionComboBox cmbAction = (cmbActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionComboBox.class, m_cmbActionTemp);
		super.addComboBox(cmbAction);
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 328, 64, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbActivityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActivityTemp);
		cmbActivityComboBox cmbActivity = (cmbActivityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActivityComboBox.class, m_cmbActivityTemp);
		super.addComboBox(cmbActivity);
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 328, 32, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbGroupTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbGroupTemp);
		cmbGroupComboBox cmbGroup = (cmbGroupComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGroupComboBox.class, m_cmbGroupTemp);
		super.addComboBox(cmbGroup);
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 600, 100, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_AnaestheticTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_AnaestheticTemp);
		AnaestheticComboBox Anaesthetic = (AnaestheticComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(AnaestheticComboBox.class, m_AnaestheticTemp);
		super.addComboBox(Anaesthetic);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 680, 455, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 528, 100, 280, 84, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_gDoseTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gDoseTemp);
		gDoseGrid gDose = (gDoseGrid)GridFlyweightFactory.getInstance().createGridBridge(gDoseGrid.class, m_gDoseTemp);
		gDose.addIntColumn("Dose", 0, 0, 85, false, true, null, false, 0, true, 0);
		gDose.addIntColumn("Fractions", 0, 0, 85, false, true, null, false, 0, true, 0);
		gDose.addIntColumn("Days", 0, 0, -1, false, true, null, false, 0, true, 0);
		super.addGrid(gDose);
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 328, 485, 488, 98, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_GridStatusTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_GridStatusTemp);
		GridStatusGrid GridStatus = (GridStatusGrid)GridFlyweightFactory.getInstance().createGridBridge(GridStatusGrid.class, m_GridStatusTemp);
		GridStatus.addStringColumn("Status Point", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		GridStatus.addStringColumn("Start Date", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		GridStatus.addStringColumn("End Date", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		GridStatus.addStringColumn("Reason Status Point", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(GridStatus);
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 328, 264, 480, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_GridTrSiteTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_GridTrSiteTemp);
		GridTrSiteGrid GridTrSite = (GridTrSiteGrid)GridFlyweightFactory.getInstance().createGridBridge(GridTrSiteGrid.class, m_GridTrSiteTemp);
		GridTrSite.addComboBoxColumn("Group", 0, 0, 135, false, true, true, false, true, -1);
		GridTrSite.addMutableComboBoxColumn("Treatment Site", 0, 0, 180, false, true, false, false, false, true, -1);
		GridTrSite.addMutableComboBoxColumn("Technique", 0, 0, -1, false, true, false, false, false, true, -1);
		super.addGrid(GridTrSite);

		// DecimalBox Controls
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 600, 64, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 813, 125, 22, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Minus, this.getImages().Core.MinusDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 813, 100, 22, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Plus, this.getImages().Core.PlusDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 813, 291, 20, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Minus, this.getImages().Core.MinusDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 813, 267, 20, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.Plus, this.getImages().Core.PlusDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel panelTop()
	{
		return (Panel)super.getControl(0);
	}
	public Label lblTreatmentAction2()
	{
		return (Label)super.getControl(3);
	}
	public Label lblTreatmentAction1()
	{
		return (Label)super.getControl(4);
	}
	public Label lblAnaesthetic2()
	{
		return (Label)super.getControl(5);
	}
	public Label lblDate()
	{
		return (Label)super.getControl(8);
	}
	public Label lblStartDate()
	{
		return (Label)super.getControl(9);
	}
	public Label lblEnergyValue()
	{
		return (Label)super.getControl(10);
	}
	public Label lblPlannedRegime1()
	{
		return (Label)super.getControl(11);
	}
	public Label lbUnit()
	{
		return (Label)super.getControl(12);
	}
	public Label lblModality()
	{
		return (Label)super.getControl(13);
	}
	public Label lblAnaesthetic1()
	{
		return (Label)super.getControl(27);
	}
	public Label lblPlannedRegime2()
	{
		return (Label)super.getControl(28);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(41);
	}
	public Button bOk()
	{
		return (Button)super.getControl(42);
	}
	public Button Cancel()
	{
		return (Button)super.getControl(43);
	}
	public Button Save()
	{
		return (Button)super.getControl(44);
	}
	public TextBox edtWaitingList()
	{
		return (TextBox)super.getControl(45);
	}
	public TextBox PatientAddress()
	{
		return (TextBox)super.getControl(46);
	}
	public TextBox PatientDOB()
	{
		return (TextBox)super.getControl(47);
	}
	public TextBox PatientName()
	{
		return (TextBox)super.getControl(48);
	}
	public TextBox PatientHospitalNumber()
	{
		return (TextBox)super.getControl(49);
	}
	public TextBox edtHistology()
	{
		return (TextBox)super.getControl(50);
	}
	public TextBox edtDateSeen()
	{
		return (TextBox)super.getControl(51);
	}
	public TextBox edtConsultant()
	{
		return (TextBox)super.getControl(52);
	}
	public TextBox edtIntent()
	{
		return (TextBox)super.getControl(53);
	}
	public DateControl dtDate()
	{
		return (DateControl)super.getControl(54);
	}
	public DateControl dtStartDate()
	{
		return (DateControl)super.getControl(55);
	}
	public DateControl dtActStatusDate()
	{
		return (DateControl)super.getControl(56);
	}
	public DateControl dtEdtStartDate()
	{
		return (DateControl)super.getControl(57);
	}
	public DateControl dtEstEndDate()
	{
		return (DateControl)super.getControl(58);
	}
	public cmbTreatActionComboBox cmbTreatAction()
	{
		return (cmbTreatActionComboBox)super.getComboBox(0);
	}
	public cmbPlannedRegimeComboBox cmbPlannedRegime()
	{
		return (cmbPlannedRegimeComboBox)super.getComboBox(1);
	}
	public cmbUnitComboBox cmbUnit()
	{
		return (cmbUnitComboBox)super.getComboBox(2);
	}
	public cmbModalityComboBox cmbModality()
	{
		return (cmbModalityComboBox)super.getComboBox(3);
	}
	public cmbReasonComboBox cmbReason()
	{
		return (cmbReasonComboBox)super.getComboBox(4);
	}
	public cmbCategoryComboBox cmbCategory()
	{
		return (cmbCategoryComboBox)super.getComboBox(5);
	}
	public cmbActionStatusComboBox cmbActionStatus()
	{
		return (cmbActionStatusComboBox)super.getComboBox(6);
	}
	public cmbAttendingAsComboBox cmbAttendingAs()
	{
		return (cmbAttendingAsComboBox)super.getComboBox(7);
	}
	public cmbHcpComboBox cmbHcp()
	{
		return (cmbHcpComboBox)super.getComboBox(8);
	}
	public cmbTransportComboBox cmbTransport()
	{
		return (cmbTransportComboBox)super.getComboBox(9);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(10);
	}
	public cmbPriorityComboBox cmbPriority()
	{
		return (cmbPriorityComboBox)super.getComboBox(11);
	}
	public cmbActionComboBox cmbAction()
	{
		return (cmbActionComboBox)super.getComboBox(12);
	}
	public cmbActivityComboBox cmbActivity()
	{
		return (cmbActivityComboBox)super.getComboBox(13);
	}
	public cmbGroupComboBox cmbGroup()
	{
		return (cmbGroupComboBox)super.getComboBox(14);
	}
	public AnaestheticComboBox Anaesthetic()
	{
		return (AnaestheticComboBox)super.getComboBox(15);
	}
	public CheckBox chkActive()
	{
		return (CheckBox)super.getControl(75);
	}
	public gDoseGrid gDose()
	{
		return (gDoseGrid)super.getGrid(0);
	}
	public GridStatusGrid GridStatus()
	{
		return (GridStatusGrid)super.getGrid(1);
	}
	public GridTrSiteGrid GridTrSite()
	{
		return (GridTrSiteGrid)super.getGrid(2);
	}
	public DecimalBox edtEnergyValue()
	{
		return (DecimalBox)super.getControl(79);
	}
	public ImageButton btnRemoveDose()
	{
		return (ImageButton)super.getControl(80);
	}
	public ImageButton btnAddDose()
	{
		return (ImageButton)super.getControl(81);
	}
	public ImageButton btnRemoveTrSite()
	{
		return (ImageButton)super.getControl(82);
	}
	public ImageButton btnAddTrSite()
	{
		return (ImageButton)super.getControl(83);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Plus = new ImageHelper(102116, "Images/Core/plus.gif", new Integer(16), new Integer(16));
				PlusDisabled = new ImageHelper(102117, "Images/Core/plus_disabled.gif", new Integer(16), new Integer(16));
				Minus = new ImageHelper(102118, "Images/Core/minus.gif", new Integer(16), new Integer(16));
				MinusDisabled = new ImageHelper(102119, "Images/Core/minus_disabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Plus;
			public final ims.framework.utils.Image PlusDisabled;
			public final ims.framework.utils.Image Minus;
			public final ims.framework.utils.Image MinusDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Action = new ims.framework.ContextVariable("Action", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier + "");
			cxl_groupGST = new ims.framework.ContextVariable("groupGST", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__groupGST_" + componentIdentifier + "");
			cxl_ActivityGroups = new ims.framework.ContextVariable("ActivityGroups", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__ActivityGroups_" + componentIdentifier + "");
			cxl_Activities = new ims.framework.ContextVariable("Activities", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Activities_" + componentIdentifier + "");
			cxl_ActivityActions = new ims.framework.ContextVariable("ActivityActions", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__ActivityActions_" + componentIdentifier + "");
			cxl_PatTreatmentPlanVo = new ims.framework.ContextVariable("PatTreatmentPlanVo", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier + "");
			cxl_PatTPAction = new ims.framework.ContextVariable("PatTPAction", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier + "");
			cxl_HCPs = new ims.framework.ContextVariable("HCPs", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__HCPs_" + componentIdentifier + "");
			cxl_GroupSites = new ims.framework.ContextVariable("GroupSites", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__GroupSites_" + componentIdentifier + "");
			cxl_IsDoseGridVisible = new ims.framework.ContextVariable("IsDoseGridVisible", prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__IsDoseGridVisible_" + componentIdentifier + "");
		}
		
		public boolean getActionIsNotNull()
		{
			return !cxl_Action.getValueIsNull(context);
		}
		public ims.ccosched.vo.PatTreatPlanActionVo getAction()
		{
			return (ims.ccosched.vo.PatTreatPlanActionVo)cxl_Action.getValue(context);
		}
		public void setAction(ims.ccosched.vo.PatTreatPlanActionVo value)
		{
			cxl_Action.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Action = null;
		public boolean getgroupGSTIsNotNull()
		{
			return !cxl_groupGST.getValueIsNull(context);
		}
		public ims.dtomove.vo.GroupVoCollection getgroupGST()
		{
			return (ims.dtomove.vo.GroupVoCollection)cxl_groupGST.getValue(context);
		}
		public void setgroupGST(ims.dtomove.vo.GroupVoCollection value)
		{
			cxl_groupGST.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_groupGST = null;
		public boolean getActivityGroupsIsNotNull()
		{
			return !cxl_ActivityGroups.getValueIsNull(context);
		}
		public ims.dtomove.vo.ActivityGroupVoCollection getActivityGroups()
		{
			return (ims.dtomove.vo.ActivityGroupVoCollection)cxl_ActivityGroups.getValue(context);
		}
		public void setActivityGroups(ims.dtomove.vo.ActivityGroupVoCollection value)
		{
			cxl_ActivityGroups.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActivityGroups = null;
		public boolean getActivitiesIsNotNull()
		{
			return !cxl_Activities.getValueIsNull(context);
		}
		public ims.dtomove.vo.SchedActivityVoCollection getActivities()
		{
			return (ims.dtomove.vo.SchedActivityVoCollection)cxl_Activities.getValue(context);
		}
		public void setActivities(ims.dtomove.vo.SchedActivityVoCollection value)
		{
			cxl_Activities.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Activities = null;
		public boolean getActivityActionsIsNotNull()
		{
			return !cxl_ActivityActions.getValueIsNull(context);
		}
		public ims.dtomove.vo.ActivityActionVoCollection getActivityActions()
		{
			return (ims.dtomove.vo.ActivityActionVoCollection)cxl_ActivityActions.getValue(context);
		}
		public void setActivityActions(ims.dtomove.vo.ActivityActionVoCollection value)
		{
			cxl_ActivityActions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActivityActions = null;
		public boolean getPatTreatmentPlanVoIsNotNull()
		{
			return !cxl_PatTreatmentPlanVo.getValueIsNull(context);
		}
		public ims.ccosched.vo.PatTreatmentPlanVo getPatTreatmentPlanVo()
		{
			return (ims.ccosched.vo.PatTreatmentPlanVo)cxl_PatTreatmentPlanVo.getValue(context);
		}
		public void setPatTreatmentPlanVo(ims.ccosched.vo.PatTreatmentPlanVo value)
		{
			cxl_PatTreatmentPlanVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatTreatmentPlanVo = null;
		public boolean getPatTPActionIsNotNull()
		{
			return !cxl_PatTPAction.getValueIsNull(context);
		}
		public ims.ccosched.vo.PatTreatPlanActionVo getPatTPAction()
		{
			return (ims.ccosched.vo.PatTreatPlanActionVo)cxl_PatTPAction.getValue(context);
		}
		public void setPatTPAction(ims.ccosched.vo.PatTreatPlanActionVo value)
		{
			cxl_PatTPAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatTPAction = null;
		public boolean getHCPsIsNotNull()
		{
			return !cxl_HCPs.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVoCollection getHCPs()
		{
			return (ims.core.vo.HcpLiteVoCollection)cxl_HCPs.getValue(context);
		}
		public void setHCPs(ims.core.vo.HcpLiteVoCollection value)
		{
			cxl_HCPs.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HCPs = null;
		public boolean getGroupSitesIsNotNull()
		{
			return !cxl_GroupSites.getValueIsNull(context);
		}
		public ims.dtomove.vo.GroupSiteVoCollection getGroupSites()
		{
			return (ims.dtomove.vo.GroupSiteVoCollection)cxl_GroupSites.getValue(context);
		}
		public void setGroupSites(ims.dtomove.vo.GroupSiteVoCollection value)
		{
			cxl_GroupSites.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GroupSites = null;
		public boolean getIsDoseGridVisibleIsNotNull()
		{
			return !cxl_IsDoseGridVisible.getValueIsNull(context);
		}
		public Boolean getIsDoseGridVisible()
		{
			return (Boolean)cxl_IsDoseGridVisible.getValue(context);
		}
		public void setIsDoseGridVisible(Boolean value)
		{
			cxl_IsDoseGridVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsDoseGridVisible = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[292];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ID", "ID_PatAction");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-BOOKEDDATE", "BookedDate");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-BOOKEDTIME", "BookedTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPTHEADID", "ApptHeadId");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPTID", "ApptId");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PRETREATMENTPLAN", "PretreatmentPlan");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-STATUS", "Status");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PRIORITY", "Priority");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PATIENTSTATUS", "PatientStatus");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ATTENDINGAS", "AttendingAs");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TRANSPORT", "Transport");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-REASON", "Reason");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-CATEGORY", "Category");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-UNIT", "Unit");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-MODALITY", "Modality");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ANEASTHETIC", "Aneasthetic");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTIVE", "Active");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ESTARTDATE", "EstartDate");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-EENDDATE", "EendDate");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTIONSTATUSDATE", "ActionStatusDate");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-WAITINGLIST", "WaitingList");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-MODALENERGY", "ModalEnergy");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-IMAGINGDATE", "ImagingDate");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-STARTDATEREGIME", "StartDateRegime");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-ACTION_ORDERNUMBER", "Action_OrderNumber");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TREATMENACTION", "TreatmenAction");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-LASTAPPOINTMENTDATE", "LastAppointmentDate");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-APPDATE", "AppDate");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-CHEMPLANSTARTDATE", "ChemPlanStartDate");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPACLINIC", "OPAClinic");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPADATE", "OPADate");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-OPATIME", "OPATime");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-WLID", "WLId");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-SCHEDAPPDATE", "SchedAppDate");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-SCHEDAPPTIME", "SchedAppTIme");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TREATMENTACTION", "Treatmentaction");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_DOSE", "Tl_dose");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_FRACTIONS", "Tl_fractions");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlanAction", "BO-1105100038-TL_DURATION", "Tl_duration");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ID", "ID_PatTreatmentPlan");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-TREATMENTINTENT", "TreatmentIntent");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-DATESEEN", "DateSeen");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-DECISIONTOTREAT", "DecisionToTreat");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-PATIENT", "Patient");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-PKEY", "Pkey");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-RKEY", "Rkey");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-EPISODE", "Episode");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-TREATMENTPLANCOMMENT", "TreatmentplanComment");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ACTIVESTATUS", "ActiveStatus");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_PatTreatmentPlan", "BO-1105100037-ECAD_DATE", "Ecad_date");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-ID", "ID_PatAction");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-BOOKEDDATE", "BookedDate");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-BOOKEDTIME", "BookedTime");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-APPTHEADID", "ApptHeadId");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-APPTID", "ApptId");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-PRETREATMENTPLAN", "PretreatmentPlan");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-STATUS", "Status");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-PRIORITY", "Priority");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-PATIENTSTATUS", "PatientStatus");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-ATTENDINGAS", "AttendingAs");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-TRANSPORT", "Transport");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-REASON", "Reason");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-CATEGORY", "Category");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-UNIT", "Unit");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-MODALITY", "Modality");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-ANEASTHETIC", "Aneasthetic");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-ACTIVE", "Active");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-ESTARTDATE", "EstartDate");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-EENDDATE", "EendDate");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-ACTIONSTATUSDATE", "ActionStatusDate");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-WAITINGLIST", "WaitingList");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-MODALENERGY", "ModalEnergy");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-IMAGINGDATE", "ImagingDate");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-STARTDATEREGIME", "StartDateRegime");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-ACTION_ORDERNUMBER", "Action_OrderNumber");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-TREATMENACTION", "TreatmenAction");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-LASTAPPOINTMENTDATE", "LastAppointmentDate");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-APPDATE", "AppDate");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-CHEMPLANSTARTDATE", "ChemPlanStartDate");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-OPACLINIC", "OPAClinic");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-OPADATE", "OPADate");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-OPATIME", "OPATime");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-WLID", "WLId");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-SCHEDAPPDATE", "SchedAppDate");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-SCHEDAPPTIME", "SchedAppTIme");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-TREATMENTACTION", "Treatmentaction");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-TL_DOSE", "Tl_dose");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-TL_FRACTIONS", "Tl_fractions");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__Action_" + componentIdentifier, "BO-1105100038-TL_DURATION", "Tl_duration");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-ID", "ID_PatTreatmentPlan");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-TREATMENTINTENT", "TreatmentIntent");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-DATESEEN", "DateSeen");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-DECISIONTOTREAT", "DecisionToTreat");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-PATIENT", "Patient");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-PKEY", "Pkey");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-RKEY", "Rkey");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-EPISODE", "Episode");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-TREATMENTPLANCOMMENT", "TreatmentplanComment");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-ACTIVESTATUS", "ActiveStatus");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-ECAD_DATE", "Ecad_date");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-CREATIONUSER", "CreationUser");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-PATIENTSTATUS", "PatientStatus");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-AUTHUSER", "AuthUser");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-MODU", "Modu");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-SURGERYREQUIRED", "SurgeryRequired");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTreatmentPlanVo_" + componentIdentifier, "BO-1105100037-SEENLOCATION", "SeenLocation");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-ID", "ID_PatAction");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-BOOKEDDATE", "BookedDate");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-BOOKEDTIME", "BookedTime");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-APPTHEADID", "ApptHeadId");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-APPTID", "ApptId");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-PRETREATMENTPLAN", "PretreatmentPlan");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-STATUS", "Status");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-PRIORITY", "Priority");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-PATIENTSTATUS", "PatientStatus");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-ATTENDINGAS", "AttendingAs");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-TRANSPORT", "Transport");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-REASON", "Reason");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-CATEGORY", "Category");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-UNIT", "Unit");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-MODALITY", "Modality");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-ANEASTHETIC", "Aneasthetic");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-ACTIVE", "Active");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-ESTARTDATE", "EstartDate");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-EENDDATE", "EendDate");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-ACTIONSTATUSDATE", "ActionStatusDate");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-WAITINGLIST", "WaitingList");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-MODALENERGY", "ModalEnergy");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-IMAGINGDATE", "ImagingDate");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-STARTDATEREGIME", "StartDateRegime");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-ACTION_ORDERNUMBER", "Action_OrderNumber");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-TREATMENACTION", "TreatmenAction");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-LASTAPPOINTMENTDATE", "LastAppointmentDate");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-APPDATE", "AppDate");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-CHEMPLANSTARTDATE", "ChemPlanStartDate");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-OPACLINIC", "OPAClinic");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-OPADATE", "OPADate");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-OPATIME", "OPATime");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-WLID", "WLId");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-SCHEDAPPDATE", "SchedAppDate");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-SCHEDAPPTIME", "SchedAppTIme");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-TREATMENTACTION", "Treatmentaction");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-TL_DOSE", "Tl_dose");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-TL_FRACTIONS", "Tl_fractions");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_CcoSched.PatTreatmentPlanAction.__internal_x_context__PatTPAction_" + componentIdentifier, "BO-1105100038-TL_DURATION", "Tl_duration");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
