//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.1 build 40203.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.reschedulemove;


import ims.core.vo.MemberOfStaffShortVo;
import ims.dto.Result;
import ims.dto.client.Lkup;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_appt_dts.Sd_appt_dtsRecord;
import ims.dto.client.Sd_mc;
import ims.dto.client.Sd_sess_avail;
import ims.dto.client.Sd_sess_misctrl;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.util.ArrayList;

public class Logic extends BaseLogicDTO
{
	private final String newline = new String("<br>");
	protected void onFormOpen() throws FormOpenException 
	{
		form.ViewSession().setEnabled(false);
		form.MoveTo().setEnabled(false);
		form.ResourceFrom().setValue(form.getGlobalContext().CcoSched.Reschedule.getSelectedResourceName());
		form.getGlobalContext().CcoSched.Reschedule.getListOfAppoinments();//Context.ContextReschedule.ListOfAppointments;
		//foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient appointment in ar)
		for(int i=0; i<form.getGlobalContext().CcoSched.Reschedule.getListOfAppoinments().count(); i++)
		{
			Sd_appt_dts.Sd_appt_dtsRecord appointment = form.getGlobalContext().CcoSched.Reschedule.getListOfAppoinments().get(i);
			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();
			row.setValue(appointment);

			Time Dtodt = getTimeFromString(appointment.Stm);
			row.setTime(Dtodt != null?Dtodt.toString(TimeFormat.DEFAULT):"");// (dt.IsNull ? "" : string.Format("{0:D2}.{1:D2}", dt.Value.Hour, dt.Value.Minute));

			row.setHospitalNumber(appointment.Hospnum);

			row.setName(appointment.Titl + " " + getPatientName(appointment));

			row.setCategory(appointment.Txcattypetxt);
			row.setAttendingAs(appointment.Attnd_astxt);
			row.setModality(appointment.Modidtxt);
			row.setEnergy(appointment.Modenrgy);
			row.setUnit(appointment.Modenrgyunittxt);
			//ICCO939 - Images are not pulled through
			if (appointment.First_appt_id.equals(appointment.Appt_id))
				row.setBooking(form.getImages().CcoSched.First);
			else if (appointment.Last_appt_id.equals(appointment.Appt_id))
				row.setBooking(form.getImages().CcoSched.Last);
		}
		GetResourcesAndGraph();
	}
	
	private void GetResourcesAndGraph()
	{
		form.ResourceGrid().getRows().clear();
		form.Bar().clear();

		Sd_sess_avail sessions = (Sd_sess_avail) domain.getDTOInstance(Sd_sess_avail.class);
		sessions.Filter.clear();			
		sessions.Filter.Sess_dt = form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Sess_dt;//Context.ContextReschedule.ResourceSessions.Sd_sess_availCollection[0].attSess_dt;
		sessions.Filter.Grp_id = form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Grp_id; //Context.ContextReschedule.ResourceSessions.Sd_sess_availCollection[0].attGrp_id;
		sessions.Filter.Activ_id = form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Activ_id; //Context.ContextReschedule.ResourceSessions.Sd_sess_availCollection[0].attActiv_id;
		if ((form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Lo_id != null) && (!form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Lo_id.equals("")))
			sessions.Filter.Lo_id = "!" + form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Lo_id;
		if ((form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Mc_id != null) && (!form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Mc_id.equals("")))
			sessions.Filter.Mc_id = "!" + form.getGlobalContext().CcoSched.Reschedule.getResourceSessions().DataCollection.get(0).Mc_id;

		Result result = sessions.list();
		if (result != null)
		{
			showMessage(result.getMessage());
			return;
		}
		for(int j=0; j<sessions.DataCollection.count(); j++)
		//foreach (dto.Sd_sess_availDTO.Sd_sess_availClient session in sessions.Sd_sess_availCollection)
		{
			Sd_sess_avail.Sd_sess_availRecord session = sessions.DataCollection.get(j);
			String[] tmp = StringUtils.splitString(session.Sessiond_ids, ",+");
			for (int i = 0; i < (tmp.length / 2); ++i)
			{
				Sd_sess_misctrl machineControls = (Sd_sess_misctrl) domain.getDTOInstance(Sd_sess_misctrl.class);
				machineControls.Filter.clear();
				machineControls.Filter.Session_id = tmp[2 * i];
				machineControls.Filter.Sessiond_id = tmp[2 * i + 1];					

				result = machineControls.get();
				if (result != null)
				{
					showMessage(result.getMessage());
					return;
				}

				if (machineControls.DataCollection.count() != 1)
				{
					showMessage("Failed to get alternative resource information.");
					return;
				}

				Sd_sess_misctrl.Sd_sess_misctrlRecord machineControl = machineControls.DataCollection.get(0);

				Integer total = getIntegerFromString(machineControl.Max_apps);
				if (total == null)
					total = new Integer(0);

				Integer completed = getIntegerFromString(machineControl.Rem_apps);//Dtocompleted.IsNull ? SqlInt32.Null : new SqlInt32(Dtocompleted.Value);
				if (completed == null)
					completed = new Integer(0);

				GenForm.ResourceGridRow r = form.ResourceGrid().getRows().newRow();
				int number = i+1;
				r.setNumber(Integer.toString(number));
				r.setName(machineControl.Sess_mcnm);
				r.setLocation(machineControl.Sess_lcnm);
				r.setValue(machineControl);
				String startBold = "<b>", endBold = "</b>";
				StringBuffer tooltip = new StringBuffer(400);
				
				tooltip.append(startBold);
				tooltip.append("Machine Name: ");
				tooltip.append(endBold);
				tooltip.append(machineControl.Sess_mcnm);
				
				tooltip.append(newline);
				tooltip.append(startBold);
				tooltip.append("Machine Location: ");
				tooltip.append(endBold);
				tooltip.append(machineControl.Sess_lcnm);
				
				tooltip.append(newline);
				tooltip.append(startBold);
				tooltip.append("Total Number of Appointments: ");
				tooltip.append(endBold);
				tooltip.append(machineControl.Max_apps);
				
				tooltip.append(newline);
				tooltip.append(startBold);
				tooltip.append("Number of Appointments Completed: ");
				tooltip.append(endBold);
				tooltip.append(machineControl.Rem_apps);
				
				form.Bar().addResource(total.intValue(), completed.intValue(), tooltip.toString());
			}
		}
	}

	protected void OnResourceChanged() throws PresentationLogicException 
	{
		for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
			form.MainGrid().getRows().get(i).setBackColor(Color.LightSteelBlue);

		// Checking that there are patients selected.
		ArrayList a = new ArrayList();
		for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
			if (form.MainGrid().getRows().get(i).getSelect())
				a.add(form.MainGrid().getRows().get(i).getValue());

		if (a.size() == 0)
		{
			showMessage("Please select a patient to move.");			
			form.ResourceGrid().setValue(null);//CurrentSelection = -1;
			return;
		}
		else
		{
			form.getLocalContext().setListOfAppointmentsSelected(a);
			//Context.ContextRescheduleMove.ListOfAppointmentsSelected = a;
		}

		//05/02/2004 - Populate ModalitySupported Array
		//Form._LocalContext.ModalityNotSupported.Value = new ArrayList();
		form.getLocalContext().setModalityNotSupported(new ArrayList());

		Sd_mc machines = (Sd_mc) domain.getDTOInstance(Sd_mc.class);
		machines.Filter.clear();
		machines.Filter.Mc_id = form.ResourceGrid().getValue().Mc_id;
		Result result = machines.get();
		if (result != null)
		{
			showMessage(result.getMessage());
			return;
		}
		if (machines.DataCollection.count() != 1)
		{
			showMessage("Failed to get resource information.");
			return;
		}

		// Checking Modality
		boolean flag = true;
		
		//foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient appDts in Context.ContextRescheduleMove.ListOfAppointmentsSelected)
		if(form.getLocalContext().getListOfAppointmentsSelectedIsNotNull())
		{
			for(int k=0; k<form.getLocalContext().getListOfAppointmentsSelected().size(); k++)
			{
				Sd_appt_dts.Sd_appt_dtsRecord appDts = (Sd_appt_dts.Sd_appt_dtsRecord)form.getLocalContext().getListOfAppointmentsSelected().get(k);
				
				if(appDts.Mod_id == null || appDts.Mod_id.length() == 0)
				{
					//WDEV-4184
					flag = false;
				}
				else
				{
					flag = true;
					for(int j=0; j<machines.DataCollection.get(0).Modal_idCollection.count(); j++)
					//foreach (dto.Sd_mcDTO.Modal_idClient m in machines.Sd_mcCollection[0].Modal_idCollection)
					{
						//10/05/2005 - Changed the Modality, Energy and Unit to be a valid one (Kevin suggestion)
						//Also the break(s) for displaying all the error messages if any.
						//WDEV-3370
						Sd_mc.Sd_mcModal_idRecord m = machines.DataCollection.get(0).Modal_idCollection.get(j);
						if ((appDts.Mod_id.equals(m.Modal_type_id)) &&
							(isFloatValueEqual(appDts.Energy_val, m.Energy)) &&
							(appDts.Unit_id.equals(m.Energy_unit)))
						{
							flag = false;
							//05/02/2004 - Get the new modality_id for later used in the update of Sd_apptDTO
							//form.getLocalContext.ModalityNotSupported.Value.Add();
							ArrayList ar = form.getLocalContext().getModalityNotSupported();
							ar.add(new Object[]{appDts.Appt_id, m.Modal_id});
							form.getLocalContext().setModalityNotSupported(ar);
							break;
						}
					}
				}
				
				// If Modality not supported then show messagebox and change color of row.
				if (flag)
				{
					String name = appDts.Titl + " " + getPatientName(appDts);
					showMessage("This resource does not support the required modality by " + name + ".");
					for (int i = 0; i < form.MainGrid().getRows().size(); ++i)
					{
						//TODO - Check what this equals is doing
						if (form.MainGrid().getRows().get(i).getValue().equals(appDts))
						{					
							showMessage("This Modality: " + getModalityTxt(appDts.Mod_id) + 
										  ", Energy: "	  + appDts.Energy_val + 
										  " and Unit: "   + getUnitTxt(appDts.Unit_id) + " is not supported on this resource.");
							form.MainGrid().getRows().get(i).setBackColor(Color.Tan);
							//break;
						}
					}
					//break;
				}
				//--------------------------------------------------------------------------
			}
		}

			// Checking Treatment Group, Site & Technique.						
//			foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient appDts in Context.ContextRescheduleMove.ListOfAppointmentsSelected)
//			{
//				if (appDts.attTreatpl_act_id != "")
//				{
////					//remove from here
////					dto.Go_ptplactDTO ptplact = Domain.Go_ptplactDTO;
////					ptplact.Filter.Clear();
////					ptplact.Filter.attPt_act_id = appDts.attTreatpl_act_id;
////					result = ptplact.Get();
////					if (result != null)
////					{
////						UIEngine.MessageBox(result.message);
////						return;
////					}
////					dto.Go_ptreatplDTO ptreatpl = Domain.Go_ptreatplDTO;
////					ptreatpl.Filter.Clear();
////					ptreatpl.Filter.attUnid = ptplact.Go_ptplactCollection[0].attPt_tp_id;
////					result = ptreatpl.Get();
////					if (result != null)
////					{
////						UIEngine.MessageBox(result.message);
////						return;
////					}
////					//22/08/2003 - If no Tumour Group for treatment plan, there will be no
////					//sites or techniques set up for an action.
////					if(!ptreatpl.Go_ptreatplCollection[0].attTgroupid.Equals(string.Empty))
////					{
////						// To get the description of tumour group, Site and Technique.
////						dto.Sd_gts_cfgDTO gts = Domain.Sd_gts_cfgDTO;
////						gts.Filter.Clear();
////						gts.Filter.attTgroup_id = ptreatpl.Go_ptreatplCollection[0].attTgroupid;
////						result = gts.Get();
////						if (result != null)
////							UIEngine.MessageBox(result.message);
////						dto.LkupDTO lkup = Domain.LkupDTO;
////						lkup.Filter.Clear();
////						lkup.Filter.attLkup_typ = "3415";
////						result = lkup.List();
////						if (result != null)
////							UIEngine.MessageBox(result.message);
////
////						//remove up to here 
////						foreach (dto.Sd_mcDTO.Sitech_idClient m in machines.Sd_mcCollection[0].Sitech_idCollection)
////						{
////							if ((ptreatpl.Go_ptreatplCollection[0].attTgroupid == m.attGroup_id) && (m.attSite_id == "") && (m.attSitech_id == ""))
////							{
////								UIEngine.MessageBox("This " + gts.Sd_gts_cfgCollection[0].attTgroupnm + " is not supported on this resource.");
////							}
////						}				
////
////						foreach (dto.Go_ptplactDTO.SeqnoClient p in ptplact.Go_ptplactCollection[0].SeqnoCollection)
////						{
////							foreach (dto.Sd_mcDTO.Sitech_idClient m in machines.Sd_mcCollection[0].Sitech_idCollection)
////							{
////								if ((ptreatpl.Go_ptreatplCollection[0].attTgroupid ==  m.attGroup_id) && 
////									(p.attTxsite == m.attSite_id) && 
////									(p.attTechniq == m.attTech_id))
////								{
////									string site = "";
////									string technique = "";
////									foreach (dto.Sd_gts_cfgDTO.SiteidClient g in gts.Sd_gts_cfgCollection[0].SiteidCollection)
////										if (g.attSiteid == m.attSite_id)
////											site = g.attSitedesc;
////									foreach (dto.LkupDTO.LkupClient l in lkup.LkupCollection)
////										if (l.attLkup_id == m.attSitech_id)
////											technique= l.attLkup_nm;									
////									UIEngine.MessageBox("This " + gts.Sd_gts_cfgCollection[0].attTgroupnm + " , " + site + " and " + technique +" is not supported on this resource");
////								}
////							}
////						}
////					}
//				}
//			}

			form.getGlobalContext().CcoSched.Booking.setSessionId(form.ResourceGrid().getValue().Session_id);
			form.getGlobalContext().CcoSched.Booking.setSessionDetailsId(form.ResourceGrid().getValue().Sessiond_id);

			form.ViewSession().setEnabled(true);
			form.MoveTo().setEnabled(true);		
	}

	private String getUnitTxt(String unit_id) 
	{
		Lkup lookup = (Lkup)domain.getDTOInstance(Lkup.class);
		if(form.getLocalContext().getUnitLkupIsNotNull())
		{
			lookup = form.getLocalContext().getUnitLkup();
		}
		else
		{
			lookup.Filter.clear();
			lookup.Filter.Lkup_typ = "3424"; 
			Result result = lookup.list();
			if (result != null)
			{
				engine.showMessage(result.getMessage());
				return "";
			}
			form.getLocalContext().setUnitLkup(lookup);
		}
		
		for (int i = 0; lookup!= null && i < lookup.DataCollection.count(); ++i)
			if (lookup.DataCollection.get(i).Lkup_id.equals(unit_id))
				return lookup.DataCollection.get(i).Lkup_nm;
		
		return "";
	}

	private String getModalityTxt(String mod_id) 
	{
		Lkup lookup = (Lkup)domain.getDTOInstance(Lkup.class);
		if(form.getLocalContext().getModalityLkupIsNotNull())
		{
			lookup = form.getLocalContext().getModalityLkup();
		}
		else
		{
			lookup.Filter.clear();
			lookup.Filter.Lkup_typ = "3422"; 
			Result result = lookup.list();
			if (result != null)
			{
				engine.showMessage(result.getMessage());
				return "";
			}
			form.getLocalContext().setModalityLkup(lookup);
		}
		
		for (int i = 0; lookup!= null && i < lookup.DataCollection.count(); ++i)
			if (lookup.DataCollection.get(i).Lkup_id.equals(mod_id))
				return lookup.DataCollection.get(i).Lkup_nm;
		
		return "";
	}

	protected void OnCancel() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void OnMove() throws PresentationLogicException 
	{
		//foreach (dto.Sd_appt_dtsDTO.Sd_appt_dtsClient appDtsSelected in Context.ContextRescheduleMove.ListOfAppointmentsSelected)
		boolean success = true;
		for(int k = 0; k<form.getLocalContext().getListOfAppointmentsSelected().size(); k++)
		{
			Sd_appt_dtsRecord appDtsSelected = (Sd_appt_dtsRecord) form.getLocalContext().getListOfAppointmentsSelected().get(k);
			Sd_appt appointments = (Sd_appt) domain.getDTOInstance(Sd_appt.class);
			appointments.Filter.clear();
			appointments.Filter.Appt_head_id = appDtsSelected.Appt_head_id;

			Result result = appointments.get();
			if (result != null)
			{
				showMessage(result.getMessage());
				return;
			}
			if (appointments.DataCollection.count() != 1)
			{
				showMessage("Failed to get appointment information.");
				return;
			}

			result = appointments.getForUpdate();
			if (result != null)
			{
				showMessage(result.getMessage());
				return;
			}

			// WDEV-14218
			// Any member of staff can make a booking
			MemberOfStaffShortVo mosVo = (MemberOfStaffShortVo) domain.getMosUser();
			if (mosVo != null)
			{
				appointments.DataCollection.get(0).Hcp_booking =String.valueOf(mosVo.getIMosId());
			}
			
			//foreach (dto.Sd_apptDTO.Appt_idClient appointmentDetail in appointments.Sd_apptCollection[0].Appt_idCollection)
			for(int m=0; m<appointments.DataCollection.get(0).Appt_idCollection.count(); m++)
			{
				Sd_appt.Sd_apptAppt_idRecord appointmentDetail = appointments.DataCollection.get(0).Appt_idCollection.get(m);
				if (appointmentDetail.Appt_id.equals(appDtsSelected.Appt_id))
				{
					appointmentDetail.Appt_stat = "-2195";
					appointmentDetail.Mc_id = form.ResourceGrid().getValue().Mc_id;
					appointmentDetail.Prfile_sess_id = form.ResourceGrid().getValue().Session_id;
					appointmentDetail.Prfiled_sess_id = form.ResourceGrid().getValue().Sessiond_id;
					appointmentDetail.Modality_id = "";
					//08/01/04 - If the Modality not supported (different modality_type_id, energy and unit
					//then set modality_id to null otherwise or update the modality_id
					for(int i=0; i<form.MainGrid().getRows().size(); i++)
					{
						if(form.MainGrid().getRows().get(i).getValue().Appt_id.equals(appDtsSelected.Appt_id))
						{
							appointmentDetail.Modality_id = GetModalityID(appDtsSelected.Appt_id);
							break;
						}
					}
					//-------------------------------------------------------------------------------------
					break;
				}
			}

			result = appointments.update();
			if (result != null)
			{
				showMessage("Failed to update record.");
				showMessage(result.getMessage());
				success = false;
			}
			else
			{
				for (int i = 0; i < form.MainGrid().getRows().size(); i++)
					if (form.MainGrid().getRows().get(i).getValue().equals(appDtsSelected))
					{
						form.MainGrid().getRows().remove(i);
						break;
					}
			}
		}
		if(success)
			showMessage("Patient(s) successfully moved.");
		
		GetResourcesAndGraph();	
	}
	
	private String GetModalityID(String appt_id)
	{
		if(form.getLocalContext().getModalityNotSupportedIsNotNull())
		{
			ArrayList modalities = form.getLocalContext().getModalityNotSupported();
			if(modalities != null)
			{
				for(int i=0; i<modalities.size(); i++)
				{
					if(((Object[])modalities.get(i))[0].toString().equals(appt_id))
					{
						return ((Object[])modalities.get(i))[1].toString();
					}
				}
			}
		}

		return "";
	}

	/* (non-Javadoc)
	 * @see ims.scheduler.forms.reschedulemove.Handlers#OnViewSession()
	 */
	protected void OnViewSession() throws PresentationLogicException 
	{
		if (form.getGlobalContext().CcoSched.Booking.getSelectedDateIsNotNull())
			engine.open(form.getForms().CcoSched.SessionList);
	}
	
	private Time getTimeFromString(String time)
	{
		Time tm = null;
		
		try{
		tm = new Time(time, TimeFormat.FLAT6);}
		catch(RuntimeException e){showMessage(e.getMessage());}
		
		return tm;
	}
	
	private Integer getIntegerFromString(String value)
	{
		Integer nValue = null;
		if(value != null && !value.equals(""))
		{
			try
			{
				return Integer.valueOf(value);
			}
			catch(NumberFormatException excp)
			{
				showMessage(excp.getMessage());
			}
		}
		return nValue;
	}
	
	private String getPatientName(Sd_appt_dtsRecord appDtsSelected)
	{
		return appDtsSelected.Fnm1 + " " + appDtsSelected.Snm;
	}
	
	private void showMessage(String message)
	{
		engine.showMessage(message);
	}

	private boolean isFloatValueEqual(String energy_val1, String energy_val2)
	{
		float val1 = energy_val1 != null && energy_val1.length() > 0 ? Float.valueOf(energy_val1).floatValue() : 0;
		float val2 = energy_val2 != null && energy_val2.length() > 0 ? Float.valueOf(energy_val2).floatValue() : 0;
		
		return val1 == val2;
	}
}
