//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.forms.printletter;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		CcoSched = new CcoSchedContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

			LkupSelect = new LkupSelectContext(context);
		}
		public final class LkupSelectContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private LkupSelectContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getLkupTypeIDIsNotNull()
			{
				return !cx_CoreLkupSelectLkupTypeID.getValueIsNull(context);
			}
			public String getLkupTypeID()
			{
				return (String)cx_CoreLkupSelectLkupTypeID.getValue(context);
			}

			private ims.framework.ContextVariable cx_CoreLkupSelectLkupTypeID = new ims.framework.ContextVariable("Core.LkupSelect.LkupTypeID", "_cv_Core.LkupSelect.LkupTypeID");
			private ims.framework.Context context;
		}

		public boolean getPrinterSelectIsNotNull()
		{
			return !cx_CorePrinterSelect.getValueIsNull(context);
		}
		public String getPrinterSelect()
		{
			return (String)cx_CorePrinterSelect.getValue(context);
		}
		public void setPrinterSelect(String value)
		{
			cx_CorePrinterSelect.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePrinterSelect = new ims.framework.ContextVariable("Core.PrinterSelect", "_cv_Core.PrinterSelect");
		public boolean getTemplateIsNotNull()
		{
			return !cx_CoreTemplate.getValueIsNull(context);
		}
		public String getTemplate()
		{
			return (String)cx_CoreTemplate.getValue(context);
		}
		public void setTemplate(String value)
		{
			cx_CoreTemplate.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreTemplate = new ims.framework.ContextVariable("Core.Template", "_cv_Core.Template");
		public boolean getReportIsNotNull()
		{
			return !cx_CoreReport.getValueIsNull(context);
		}
		public String getReport()
		{
			return (String)cx_CoreReport.getValue(context);
		}
		public void setReport(String value)
		{
			cx_CoreReport.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreReport = new ims.framework.ContextVariable("Core.Report", "_cv_Core.Report");
		public boolean getPrepareForPrintingIsNotNull()
		{
			return !cx_CorePrepareForPrinting.getValueIsNull(context);
		}
		public Boolean getPrepareForPrinting()
		{
			return (Boolean)cx_CorePrepareForPrinting.getValue(context);
		}

		private ims.framework.ContextVariable cx_CorePrepareForPrinting = new ims.framework.ContextVariable("Core.PrepareForPrinting", "_cv_Core.PrepareForPrinting");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		public LkupSelectContext LkupSelect;
		private ims.framework.Context context;
	}
	public final class CcoSchedContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CcoSchedContext(ims.framework.Context context)
		{
			this.context = context;

			LetterType = new LetterTypeContext(context);
			LkupSelect = new LkupSelectContext(context);
			ClinicView = new ClinicViewContext(context);
			PatientAppointments = new PatientAppointmentsContext(context);
		}
		public final class LetterTypeContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private LetterTypeContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getGPLetterIsNotNull()
			{
				return !cx_CcoSchedLetterTypeGPLetter.getValueIsNull(context);
			}
			public Boolean getGPLetter()
			{
				return (Boolean)cx_CcoSchedLetterTypeGPLetter.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedLetterTypeGPLetter = new ims.framework.ContextVariable("CcoSched.LetterType.GPLetter", "_cv_CcoSched.LetterType.GPLetter");
			public boolean getPatientLetterIsNotNull()
			{
				return !cx_CcoSchedLetterTypePatientLetter.getValueIsNull(context);
			}
			public Boolean getPatientLetter()
			{
				return (Boolean)cx_CcoSchedLetterTypePatientLetter.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedLetterTypePatientLetter = new ims.framework.ContextVariable("CcoSched.LetterType.PatientLetter", "_cv_CcoSched.LetterType.PatientLetter");
			private ims.framework.Context context;
		}
		public final class LkupSelectContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private LkupSelectContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getLkupTypeIDIsNotNull()
			{
				return !cx_CcoSchedLkupSelectLkupTypeID.getValueIsNull(context);
			}
			public String getLkupTypeID()
			{
				return (String)cx_CcoSchedLkupSelectLkupTypeID.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedLkupSelectLkupTypeID = new ims.framework.ContextVariable("CcoSched.LkupSelect.LkupTypeID", "_cv_CcoSched.LkupSelect.LkupTypeID");
			public boolean getLkupIDIsNotNull()
			{
				return !cx_CcoSchedLkupSelectLkupID.getValueIsNull(context);
			}
			public String getLkupID()
			{
				return (String)cx_CcoSchedLkupSelectLkupID.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedLkupSelectLkupID = new ims.framework.ContextVariable("CcoSched.LkupSelect.LkupID", "_cv_CcoSched.LkupSelect.LkupID");
			private ims.framework.Context context;
		}
		public final class ClinicViewContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private ClinicViewContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getClinicDetailsIsNotNull()
			{
				return !cx_CcoSchedClinicViewClinicDetails.getValueIsNull(context);
			}
			public String[] getClinicDetails()
			{
				return (String[])cx_CcoSchedClinicViewClinicDetails.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedClinicViewClinicDetails = new ims.framework.ContextVariable("CcoSched.ClinicView.ClinicDetails", "_cvp_CcoSched.ClinicView.ClinicDetails");
			public boolean getAppt_statIsNotNull()
			{
				return !cx_CcoSchedClinicViewAppt_stat.getValueIsNull(context);
			}
			public String getAppt_stat()
			{
				return (String)cx_CcoSchedClinicViewAppt_stat.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedClinicViewAppt_stat = new ims.framework.ContextVariable("CcoSched.ClinicView.Appt_stat", "_cv_CcoSched.ClinicView.Appt_stat");
			private ims.framework.Context context;
		}
		public final class PatientAppointmentsContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private PatientAppointmentsContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getApptStartDateIsNotNull()
			{
				return !cx_CcoSchedPatientAppointmentsApptStartDate.getValueIsNull(context);
			}
			public String getApptStartDate()
			{
				return (String)cx_CcoSchedPatientAppointmentsApptStartDate.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedPatientAppointmentsApptStartDate = new ims.framework.ContextVariable("CcoSched.PatientAppointments.ApptStartDate", "_cv_CcoSched.PatientAppointments.ApptStartDate");
			public boolean getApptEndDateIsNotNull()
			{
				return !cx_CcoSchedPatientAppointmentsApptEndDate.getValueIsNull(context);
			}
			public String getApptEndDate()
			{
				return (String)cx_CcoSchedPatientAppointmentsApptEndDate.getValue(context);
			}

			private ims.framework.ContextVariable cx_CcoSchedPatientAppointmentsApptEndDate = new ims.framework.ContextVariable("CcoSched.PatientAppointments.ApptEndDate", "_cv_CcoSched.PatientAppointments.ApptEndDate");
			private ims.framework.Context context;
		}

		public boolean getSelectLetterTypeIsNotNull()
		{
			return !cx_CcoSchedSelectLetterType.getValueIsNull(context);
		}
		public String getSelectLetterType()
		{
			return (String)cx_CcoSchedSelectLetterType.getValue(context);
		}

		private ims.framework.ContextVariable cx_CcoSchedSelectLetterType = new ims.framework.ContextVariable("CcoSched.SelectLetterType", "_cv_CcoSched.SelectLetterType");
		public boolean getTemplateCategoryIDListIsNotNull()
		{
			return !cx_CcoSchedTemplateCategoryIDList.getValueIsNull(context);
		}
		public String getTemplateCategoryIDList()
		{
			return (String)cx_CcoSchedTemplateCategoryIDList.getValue(context);
		}

		private ims.framework.ContextVariable cx_CcoSchedTemplateCategoryIDList = new ims.framework.ContextVariable("CcoSched.TemplateCategoryIDList", "_cv_CcoSched.TemplateCategoryIDList");

		public LetterTypeContext LetterType;
		public LkupSelectContext LkupSelect;
		public ClinicViewContext ClinicView;
		public PatientAppointmentsContext PatientAppointments;
		private ims.framework.Context context;
	}

	public CoreContext Core;
	public CcoSchedContext CcoSched;
}
