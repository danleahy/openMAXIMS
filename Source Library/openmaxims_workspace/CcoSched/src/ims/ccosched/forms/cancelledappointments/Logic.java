//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.12 build 40422.1000)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.forms.cancelledappointments;
import ims.alerts.PatientAlertCCO;
import ims.ccosched.Helper.PatientShortHelper;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatPlanActionVoCollection;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.Result;
import ims.dto.client.Lkup;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_activity_grp;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.framework.FormName;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.text.ParseException;

public class Logic extends BaseLogic
{
	public static final String INCOMPLETE = "N";

	protected void onFormOpen()
	{
		clearPIDAndPatient();
		LoadLookups();
		//If a patient was selected don't disable the buttons
		if(form.MainGrid().getValue() == null)
		{
			form.Rebook().setEnabled(false);
			form.RebookingNotReq().setEnabled(false);
			form.PatientDiary().setEnabled(false);
		}
	}
	private void clearPIDAndPatient()
	{
		engine.clearAlertsByType(PatientAlertCCO.class);
		form.getGlobalContext().Core.setPatientShort(null);
	}
	protected void onPatientDiaryClick()
	{
		engine.open(form.getForms().CcoSched.PatientDiaryDlg);
	}
	protected void onListPatientsClick()
	{
		clearPIDAndPatient();
		form.Rebook().setEnabled(false);
		form.RebookingNotReq().setEnabled(false);
		form.PatientDiary().setEnabled(false);

		form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);
		form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(null);
		form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(null);
		form.getGlobalContext().CcoSched.CancelledAppointments.setRebookAppointmentDetail(null);

		Clean();
		if (form.ActivityGroup().getValue() == null || form.Activity().getValue() == null)
		{
			engine.showMessage("Please select activity group and activity.");
			return;
		}

		String grp_id	= form.ActivityGroup().getValue();
		String activ_id = form.Activity().getValue();
		String prty = form.Priority().getValue() != null?Integer.toString(form.Priority().getValue().getID()):null;

		//Cancelled requiring rebooking
		String appt_stat = null;
		String act_comp_flg = null;
		if(form.chkIncompleteAppts().getValue())
		{
			appt_stat 	 = "-2192";//Attended
			act_comp_flg = INCOMPLETE;
		}
		else
			appt_stat = "-2190 || -2191";//Open and Cancelled Reallocate

		Sd_appt_dts patients = null;
		try
		{
			patients = domain.listSd_appt_dts(grp_id, activ_id, prty, appt_stat, act_comp_flg);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		for (int i = 0; patients != null && i < patients.DataCollection.count(); ++i)
		{
			GenForm.MainGridRow row = form.MainGrid().getRows().newRow();

			row.setHospitalNumber(patients.DataCollection.get(i).Hospnum);
			String name = patients.DataCollection.get(i).Fnm1+ " " + patients.DataCollection.get(i).Snm;
			row.setName(name);
			row.setTooltipForName(name);
			row.setPriority(patients.DataCollection.get(i).Prtytxt);
			row.setTooltipForPriority(patients.DataCollection.get(i).Prtytxt);

			Date DtodAppDate = null;
            if(patients.DataCollection.get(i).Sess_dt.equals("") == false)
            {
    			try 
                {
    				DtodAppDate = new Date(patients.DataCollection.get(i).Sess_dt, DateFormat.ISO);
    			} 
                catch (ParseException e) {}
            }
			if(DtodAppDate != null)
				row.setInitAppDate(DtodAppDate);

			row.setCategory(patients.DataCollection.get(i).Txcattypetxt);
			row.setTooltipForCategory(patients.DataCollection.get(i).Txcattypetxt);

			Time DtodAppTime = null;
            if(patients.DataCollection.get(i).Stm.equals("") == false)
            {    
    			try 
                {
    				DtodAppTime = new Time(patients.DataCollection.get(i).Stm, TimeFormat.FLAT6);
                }
    		    catch (RuntimeException e) {}
			} 
                
			if(DtodAppTime != null)
				row.setApptTime(DtodAppTime.toString());
			row.setAppointmentStatus(patients.DataCollection.get(i).Appt_stattxt);
			row.setTooltipForAppointmentStatus(patients.DataCollection.get(i).Appt_stattxt);
			row.setValue(patients.DataCollection.get(i));
		}

		if (patients == null || patients.DataCollection.count() == 0)
			engine.showMessage("No records.");
		
		form.MainGrid().sort(3);
	}
	protected void onMainGridSelectionChanged()
	{
	    form.customControlActivity().clear();
		form.Rebook().setEnabled(false);
		form.RebookingNotReq().setEnabled(false);
		form.PatientDiary().setEnabled(false);

		PatientShort patient = null;
		try
		{
			if (form.MainGrid().getValue().Patient != null)
			{
				patient = domain.getPatient(new PatientRefVo(Integer.valueOf(form.MainGrid().getValue().Patient), 0));
				form.getGlobalContext().Core.setPatientShort(patient);
				
			}
			else
			{
				Patient dtoPatient = domain.getPatient(form.MainGrid().getValue().Pkey);
				setPatientIntoContext(dtoPatient);
			}
		}
		catch (Exception e)
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Core.setPatientShort(null);
			engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);
			return;
		} 

		//Save the patient in the context before calling other services that might fail!!!!

		form.getGlobalContext().CcoSched.PatientSearch.setAlive(Boolean.TRUE);
		form.getGlobalContext().CcoSched.CancelledAppointments.setRebookAppointmentDetail(form.MainGrid().getValue().Appt_head_id);

		
		//Continue here

			/*form.PatientHospitalNumber().setValue(patient.DataCollection.get(0).Hospnum);
			form.PatientName().setValue(patient.DataCollection.get(0).Fnm1 + " " + patient.DataCollection.get(0).Snm);
			Date Dtodt = DateHelper.GetDOBDateFromString(patient.DataCollection.get(0).Dob);

//			DTODateTime Dtodt = Utility.GetDTODateFromString(patient.PatientCollection[0].attDob);
//			SqlDateTime dt = Dtodt.IsNull ? SqlDateTime.Null : new SqlDateTime(Dtodt.Value);
//			Form.PatientDOB.Value = dt.IsNull?"":dt.Value.ToString("d");
			if(Dtodt != null)
				form.PatientDOB().setValue(Dtodt.toString(DateFormat.STANDARD));			

			StringBuffer address = new StringBuffer(200);
			address.append(patient.DataCollection.get(0).Adr1);
			address.append(NewLine);
			address.append(patient.DataCollection.get(0).Adr2);
			address.append(NewLine);
			address.append(patient.DataCollection.get(0).Adr3);
			address.append(NewLine);
			address.append(patient.DataCollection.get(0).Adr4);
			address.append(NewLine);
			address.append(patient.DataCollection.get(0).Adr5);
			address.append(NewLine);
			form.PatientAddress().setValue(address.toString());

			form.PatientCategory().setValue(((Sd_appt_dts.Sd_appt_dtsRecord)form.MainGrid().getValue()).Txcattypetxt);
			form.PatientHCP().setValue(((Sd_appt_dts.Sd_appt_dtsRecord)form.MainGrid().getValue()).Act_consulttxt);
*/
			/*Go_ptplact actions = (Go_ptplact)domain.getDTOInstance(Go_ptplact.class);
			actions.Filter.clear();
			actions.Filter.Pt_act_id = ((Sd_appt_dts.Sd_appt_dtsRecord)form.MainGrid().getValue()).Treatpl_act_id;*/
		
			if(form.MainGrid().getValue() != null && form.MainGrid().getValue().Treatpl_act_id != null && form.MainGrid().getValue().Treatpl_act_id.length() > 0)
			{
				PatTreatmentPlanLiteVo tpVo = null;
				try
				{
					//actions = domain.getGo_ptplact(form.MainGrid().getValue().Treatpl_act_id);
					tpVo = domain.getTreatmentPlan(new Integer(form.MainGrid().getValue().Treatpl_act_id));
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
				
				form.getGlobalContext().setPatTreatmentPlan(tpVo);
				form.customControlActivity().displayRecordsWithActiveACtions(tpVo.getID_PatTreatmentPlan().toString(),Boolean.TRUE);//WDEV-14508 
				setPIDTooltip(form.getGlobalContext().Core.getPatientShort(), form.customControlActivity().getTreatmentPlan(), form.customControlActivity().getActions());
				form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(form.MainGrid().getValue().Treatpl_act_id);
				
			}
			else
			{
				form.getGlobalContext().CcoSched.TreatmentPlan.setActionID(null);
				form.getGlobalContext().CcoSched.TreatmentPlan.setTreatmentPlanDetails(null);
				form.getGlobalContext().CcoSched.ActionUpdate.setTreatmentPlanActions(null);
				setPIDTooltip(form.getGlobalContext().Core.getPatientShort(), null, null);
			}

			form.Rebook().setEnabled(form.MainGrid().getValue().Appt_stat.equals("-2193")?false:true);
			form.RebookingNotReq().setEnabled(true);
			form.PatientDiary().setEnabled(true);
	}

	private void setPIDTooltip(PatientShort patientShort, PatTreatmentPlanLiteVo vo, PatTreatPlanActionVoCollection collection)
	{
		engine.clearAlertsByType(ims.alerts.PatientAlertCCO.class);		
		PatTreatPlanActionVo go_ptplactRecord = collection != null && collection.size() >0?collection.get(0):null;
		engine.addAlert(new ims.alerts.PatientAlertCCO(new ims.ccosched.Helper.PIDTooltip().getTooltip2(patientShort, vo, go_ptplactRecord)));
	}
	
	private void setPatientIntoContext(Patient patient)
	{
		PatientShort patientShort = new PatientShortHelper().getPatientShort(patient.DataCollection.get(0));
		
		ims.core.vo.PatientShort voPatient = null;

		if(patientShort != null)
		{
			try
			{
				voPatient = domain.getPatient(patientShort);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(e.getMessage());
			}
		}
		
		form.getGlobalContext().Core.setPatientShort(voPatient);
	
	}
	protected void onActivityGroupValueChanged()
	{
		//Group Id
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();

		if (activities == null)
		{
			engine.showMessage("Please select activity.");
			return;
		}

		form.Activity().clear();
		for (int i = 0; i < activities.DataCollection.count(); ++i)
		{
			//Check the group
			if (activities.DataCollection.get(i).Grp_id.equals(form.ActivityGroup().getValue()))
				form.Activity().newRow(activities.DataCollection.get(i).Activ_id, activities.DataCollection.get(i).Activ_nm);
		}
	}

	protected void onRebookingNotReqClick()
	{
		//Do a get in sd_appt
		Sd_appt_dts.Sd_appt_dtsRecord appt_dtsRecord = form.MainGrid().getValue();
		if(appt_dtsRecord != null && appt_dtsRecord.Appt_head_id.length() > 0)
		{
			Sd_appt apptDto = null;
			try
			{
				apptDto = domain.getAndGetForUpdateSd_appt(appt_dtsRecord.Appt_head_id);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		
			boolean bFound = false;
			//Loop throught the details to find the repeating that has the same Appt_id as the one selected from the grid
			if(apptDto != null && apptDto.DataCollection.count() > 0)
				for(int x=0; x<apptDto.DataCollection.get(0).Appt_idCollection.count(); x++)
					if(apptDto.DataCollection.get(0).Appt_idCollection.get(x).Appt_id.equals(appt_dtsRecord.Appt_id))
					{
						//Update the appointment status to Cancelled Reallocation not  required
						apptDto.DataCollection.get(0).Appt_idCollection.get(x).Appt_stat ="-2193";
						//11/02/2005 - if the record is incomplete then update the completed flag to "F"
						if(isIncomplete(appt_dtsRecord))
							apptDto.DataCollection.get(0).Appt_idCollection.get(x).Act_comp_flg = "F";
						bFound = true;
						break;
					}

			if(bFound)
			{
				try
				{
					domain.updateSd_appt(apptDto);
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
			
				//Repopulate the grid with the new status
				if(form.MainGrid().getValue() != null)
				{
					GenForm.MainGridRow row = form.MainGrid().getRowByValue(form.MainGrid().getValue());
					row.setAppointmentStatus(GetApptStatusText("-2193"));
					row.getValue().Appt_stat = "-2193";
					onMainGridSelectionChanged();
				}
			}
		}
	}

	private String GetApptStatusText(String appt_statId)
	{
		Lkup lookupDto = form.getLocalContext().getApptStatus();
		if (lookupDto != null)
			for (int i = 0; i < lookupDto.DataCollection.count(); i++)
				if (lookupDto.DataCollection.get(i).Lkup_id.equals(appt_statId))
					return lookupDto.DataCollection.get(i).Lkup_nm;

		return "";
	}

	protected void onRebookClick()
	{
		//11/02/2004 - If imcomplete appointments - open the Rebooking dialog having
		if(isIncomplete(form.MainGrid().getValue()))
		{
			//TODO - Set the variables to flag that is opened from Incomplete
			form.getGlobalContext().CcoSched.CancelledAppointments.setRebookAppointmentDetail(form.MainGrid().getValue().Appt_head_id);
			form.getGlobalContext().CcoSched.CancelledAppointments.setIncompleteAppointment(new Boolean(true));
		}
		engine.open(form.getForms().CcoSched.Rebooking);
	}
	
	private void LoadLookups()
	{
		//Appointment Status
		Lkup lookupDto =  form.getLocalContext().getApptStatus();
		if (lookupDto == null)
		{
			try
			{
				lookupDto = domain.getLookupInstance("3449");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			form.getLocalContext().setApptStatus(lookupDto);
		}

		// load activity groups
		Sd_activity_grp activityGroups = form.getGlobalContext().CcoSched.ActivityView.getActivityGroups();
		if (activityGroups == null)
		{
			try
			{
				activityGroups = domain.listSd_activity_grp("Y");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			form.getGlobalContext().CcoSched.ActivityView.setActivityGroups(activityGroups);
		}
		
		boolean loadActivity = false;
		if(form.ActivityGroup().size() == 0)
		{
			form.ActivityGroup().clear();
			for (int i = 0; activityGroups != null && i < activityGroups.DataCollection.count(); ++i)
				form.ActivityGroup().newRow(activityGroups.DataCollection.get(i).Grp_id, activityGroups.DataCollection.get(i).Grp_nm);

			loadActivity = true;
		}
		
		// load activities
		Sd_activity activities = form.getGlobalContext().CcoSched.ActivityView.getActivities();
		if (activities == null)
		{
			try
			{
				activities = domain.listSd_activity("Y", "Y");
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			Result result = activities.list();
			if (result != null)
			{
				engine.showMessage(result.getMessage());
				return;
			}
			form.getGlobalContext().CcoSched.ActivityView.setActivities(activities);
		}
		
		if(form.ActivityGroup().getValue() != null && loadActivity)
			onActivityGroupValueChanged();
	}
	
	private void Clean()
	{
		form.MainGrid().getRows().clear();
		form.customControlActivity().clear();
		engine.clearAlertsByType(PatientAlertCCO.class);
		/*form.PatientHospitalNumber().setValue("");		
		form.PatientName().setValue("");
		form.PatientDOB().setValue("");	
		form.PatientAddress().setValue("");
		form.PatientCategory().setValue("");
		form.PatientHCP().setValue("");*/
	}
	
	protected void onFormClosing(CancelArgs args) 
	{
		form.getGlobalContext().CcoSched.Booking.setTooltipArrayList(null);
		//Form._GlobalContext.Scheduler.Booking.TooltipArrayList.Clear();
		
		//Clear Oncomplete Appointment Flag as it's marked as persistant  
		form.getGlobalContext().CcoSched.CancelledAppointments.setIncompleteAppointment(null);
	}
	
	protected void OnFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().CcoSched.Rebooking))
			if (form.getGlobalContext().CcoSched.Rebooking.getRebookingSucceeded() != null)
			{
				form.getGlobalContext().CcoSched.Rebooking.setRebookingSucceeded(null);
				engine.showMessage("Rebooking succeeded.");
				onListPatientsClick();
			}
	}
	//Checks the incomplete status
	private boolean isIncomplete(Sd_appt_dts.Sd_appt_dtsRecord appt_dtsRecord)
	{
		return appt_dtsRecord.Act_comp_flg.equals(INCOMPLETE) && appt_dtsRecord.Appt_stat.equals("-2192");
	}
}
