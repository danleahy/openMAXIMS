//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.54 build 2714.21485)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.domain.impl;

import ims.ccosched.domain.ActivityView;
import ims.ccosched.domain.PatientDiary;
import ims.ccosched.domain.base.impl.BaseClinicViewImpl;
import ims.ccosched.vo.PatTreatPlanActionLiteDisplayVo;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.domain.PatTreatPlanActionLiteDisplayVoAssembler;
import ims.ccosched.vo.domain.PatTreatmentPlanLiteVoAssembler;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.domain.Demographics;
import ims.core.domain.impl.DemographicsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientApptDiaryVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImplFlyweightFactory;
import ims.domain.servicemanager.ServiceManager;
import ims.domain.servicemanager.ServiceManagerFactory;
import ims.dto.Result;
import ims.dto.client.Doctype;
import ims.dto.client.Generic_schedule;
import ims.dto.client.Go_ptplact;
import ims.dto.client.Go_ptreatpl;
import ims.dto.client.Lkup;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity_action;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_appt_dts.Sd_appt_dtsRecord;
import ims.dto.client.Sd_clinicview;
import ims.dto.client.Sd_prfile;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.ocrr.vo.ProviderSystemVo;
import ims.ocrr.vo.domain.ProviderSystemVoAssembler;
import ims.oncology.domain.objects.PatAction;
import ims.oncology.domain.objects.PrimaryTumourDetails;
import ims.oncology.vo.PrimaryTumourDetailsShortVo;
import ims.oncology.vo.domain.PrimaryTumourDetailsShortVoAssembler;
import ims.pathways.domain.HL7PathwayIf;
import ims.pathways.domain.impl.HL7PathwayIfImpl;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.vo.EventVo;
import ims.pathways.vo.ExternalEventMappingVo;
import ims.pathways.vo.PatientEventVo;
import ims.pathways.vo.PatientJourneyVo;
import ims.pathways.vo.domain.PatientJourneyVoAssembler;
import ims.pathways.vo.lookups.PathwaysDetail;
import ims.pathways.vo.lookups.PathwaysGroup;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ClinicViewImpl extends BaseClinicViewImpl
{
	private static final long	serialVersionUID	= 7831890658778413574L;
	private static final org.apache.log4j.Logger LOG = ims.utils.Logging.getLogger(ClinicViewImpl.class);


	public Lkup getLookupInstance(String lkup_type) throws ims.domain.exceptions.DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getLookupInstance(lkup_type);

	}

	public Sd_activity_action listSd_activity_action() throws DomainInterfaceException
	{
		Sd_activity_action actions = (Sd_activity_action)getDTOInstance(Sd_activity_action.class);
		actions.Filter.clear();

		Result result = actions.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return actions;
	}

	public Sd_appt_dts listSd_appt_dts(String prfile_sess_id, String prfiled_sess_id, String appt_stat, String act_comp_flg, String action_id) throws DomainInterfaceException
	{
		Sd_appt_dts appointments = (Sd_appt_dts)getDTOInstance(Sd_appt_dts.class);
		appointments.Filter.clear();		
		
		if(prfile_sess_id != null)
			appointments.Filter.Prfile_sess_id = prfile_sess_id;
		
		if(prfiled_sess_id != null)
			appointments.Filter.Prfiled_sess_id = prfiled_sess_id;
		
		if(appt_stat != null)
			appointments.Filter.Appt_stat = appt_stat;
		
		if(act_comp_flg != null)
			appointments.Filter.Act_comp_flg = act_comp_flg;
		
		if(action_id != null)
			appointments.Filter.Action_id = action_id;
		
		Result result = appointments.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		// WDEV-14158 - need to sort the result by session date and attendance times
		// Convert collection to a list
		java.util.List<Object> newList = new ArrayList<Object>();
		if (appointments.DataCollection.count() > 0)
		{
			
			for (int i=0; i<appointments.DataCollection.count(); i++)
			{
				// If the attendance time is only 4 digits, we need to prepend
				// and zero to it
				Sd_appt_dts.Sd_appt_dtsRecord appointment = appointments.DataCollection.get(i);
				if (appointment.Att_tm != null && appointment.Att_tm.length() == 5)
				{
					appointment.Att_tm = "0" + appointment.Att_tm;
				}
				newList.add(appointment);
			}
			
			Collections.sort(newList, new AppointmentListComparator());
			
			appointments.DataCollection.clear();
			// Convert back to appointments collection
			for (int i=0; i<newList.size(); i++)
			{
				appointments.DataCollection.add((Sd_appt_dtsRecord) newList.get(i));
			}
		}
		
		return appointments;
	}

	public Doctype getDoctype(String doc_id) throws DomainInterfaceException
	{
		Doctype doctype = (Doctype) getDTOInstance(Doctype.class);
		doctype.Filter.clear();
		doctype.Filter.Doc_id = doc_id;

		Result res = doctype.get();

		if (res != null)
		{
			throw new DomainInterfaceException(res.getMessage());
		}
		
		return doctype;
	}

	public Sd_clinicview getSd_clinicview(String prfile_id, String sess_dt) throws DomainInterfaceException
	{
		Sd_clinicview sessions = (Sd_clinicview) getDTOInstance(Sd_clinicview.class);
		sessions.Filter.clear();
		sessions.Filter.Prfile_id = prfile_id;
		sessions.Filter.Sess_dt = sess_dt;
		Result result = sessions.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return sessions;
	}

	public Sd_clinicview listSd_clinicview(String prfile_sess_id) throws DomainInterfaceException
	{
		Sd_clinicview tmp = (Sd_clinicview) getDTOInstance(Sd_clinicview.class);
		tmp.Filter.clear();
		tmp.Filter.Prfile_sess_id = prfile_sess_id;
		Result result = tmp.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return tmp;
	}

	public Patient getPatient(String pkey) throws DomainInterfaceException
	{
		Patient patient = (Patient) getDTOInstance(Patient.class);
		patient.Filter.clear();
		patient.Filter.Pkey = pkey;

		Result result = patient.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		if (patient.DataCollection.count() != 1)
		{
			throw new DomainInterfaceException("Failed to get patient record.");
		}

		return patient;
	}

	public Generic_schedule getGeneric_schedule(String pkey, String st_time) throws DomainInterfaceException
	{
		Generic_schedule genericSchedules = (Generic_schedule)getDTOInstance(Generic_schedule.class);
		genericSchedules.Filter.clear();
		genericSchedules.Filter.Pkey = pkey;	
		genericSchedules.Filter.St_time = st_time;
		Result result = genericSchedules.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return genericSchedules;
	}

	public Sd_appt getSd_appt(String appt_head_id) throws DomainInterfaceException
	{
		Sd_appt appointments = (Sd_appt) getDTOInstance(Sd_appt.class);
		appointments.Filter.clear();
		appointments.Filter.Appt_head_id = appt_head_id;
		Result result = appointments.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return appointments;
	}

	public Sd_appt getAndGetForUpdateSd_appt(String appt_head_id) throws DomainInterfaceException
	{
		Sd_appt appointments = (Sd_appt) getDTOInstance(Sd_appt.class);
		appointments.Filter.clear();
		appointments.Filter.Appt_head_id = appt_head_id;
		Result result = appointments.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		result = appointments.getForUpdate();
		if (result != null)
		{
			if (result.getId() < 0)
				throw new DomainInterfaceException(result.getMessage());

			throw new DomainInterfaceException("Data was changed.");
		}

		return appointments;
	}

	public Sd_appt updateSd_appt(Sd_appt sd_appt) throws DomainInterfaceException
	{
		if(sd_appt != null)
		{
			Result result = sd_appt.update();
			if(result != null)
			{
				throw new DomainInterfaceException(result.getMessage());
			}
		}
		
		return sd_appt;
	}
	
	public ims.dto.DTODomain getDtoDomain()
	{
		ServiceManager sm =  ServiceManagerFactory.getServiceManager();
		return (ims.dto.DTODomain)sm.getServiceObject(getSession(),ims.dto.DTODomainImplementation.class);
	}

	public Sd_prfile listSd_prfile(String act_ind) throws DomainInterfaceException
	{
		Sd_prfile profiles = (Sd_prfile)getDTOInstance(Sd_prfile.class);
		profiles.Filter.clear();
		if(act_ind != null)
			profiles.Filter.Act_ind = "Y";
		Result result = profiles.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return profiles;
	}

	public ims.core.vo.PatientShort getPatient(PatientRefVo patient) throws DomainInterfaceException, StaleObjectException
	{
		Demographics demographicsImpl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return demographicsImpl.getPatient(patient);
	} 
	

	public ims.core.vo.PatientShort getPatient(ims.core.vo.PatientShort patient) throws DomainInterfaceException, StaleObjectException
	{
		Demographics demographicsImpl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return demographicsImpl.getPatient(patient);
	} 
	
	/** wdev-7173
	 * Look for an existing patient journey for the given rkey.  If one found, instantiate an event with Appointment Attended Details
	 */
	public void instantiateEvent(String treatmentplan, String firstApptId, String firstApptDt, String activity) throws DomainInterfaceException, StaleObjectException 
	{
		// Check to see if the treatment plan has an associated rkey
		Go_ptplact ptAction = (Go_ptplact)getDTOInstance(Go_ptplact.class);
		ptAction.Filter.clear();
		ptAction.Filter.Pt_act_id= treatmentplan;
		Result result = ptAction.get();
		if (result != null)
		{
			LOG.error("Error occurred getting treatment plan action for event " + treatmentplan + " - (" + result.getId() + ") " + result.getMessage());
			return;
		}
		if (ptAction.DataCollection.count() == 0)
		{
			LOG.error("Error occurred getting treatment plan action for event " + treatmentplan + " - (" + result.getId() + ") " + result.getMessage());
			return;
		}
		Go_ptreatpl treatPln = (Go_ptreatpl)getDTOInstance(Go_ptreatpl.class);
		treatPln.Filter.clear();
		treatPln.Filter.Unid= ptAction.DataCollection.get(0).Pt_tp_id;
		result = treatPln.get();
		if (result != null)
		{
			LOG.error("Error occurred getting treatment plan for event " + treatmentplan + " - (" + result.getId() + ") " + result.getMessage());
			return;
		}
		if (treatPln.DataCollection.count() == 0)
		{
			LOG.error("Error occurred getting treatment plan for event " + treatmentplan + " - (" + result.getId() + ") " + result.getMessage());
			return;
		}
		
		String rkey = treatPln.DataCollection.get(0).Rkey;
		if (rkey == null || rkey.equals(""))
			return;

		
		DomainFactory factory = getDomainFactory();
		String hql = " select j from PatientPathwayJourney j, Referral r where r.extReferralKey = :rkey and j.referral = r.id";
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<String> values = new ArrayList<String>();

		names.add("rkey");
		values.add(rkey);
		List l = factory.find(hql, names, values);
		if (l == null || l.size() == 0)
			return;
		if (l.size() > 1)
			throw new DomainInterfaceException("More than one PatientPathwayJourney found for this referral - cannot send event (" + rkey + ")");
		
		
		PatientJourneyVo voJourney = PatientJourneyVoAssembler.create((PatientPathwayJourney) l.get(0));
		PatientEventVo patientEvent = new PatientEventVo();
		patientEvent.setActionCode("UP");
		patientEvent.setDescription("Event sent from Scheduling Clinic View Screen");
		try {
			patientEvent.setEventDateTime(new DateTime(firstApptDt));
		} catch (ParseException e1) {
			LOG.error("Invalid date specified for FirstApptDt = " + firstApptDt);
		}
		patientEvent.setJourney(voJourney);
		patientEvent.setMessageId("FromMaxims");
		patientEvent.setExternalEventId(Integer.valueOf(firstApptId));
		patientEvent.setPatient(voJourney.getPatient());

		// Get the PAS Provider System
		ProviderSystemVo voProv = ProviderSystemVoAssembler.create(ProviderSystem.getProviderSystemFromHl7Application(factory, "HEARTS"));
		if (voProv == null)
		{
			throw new DomainInterfaceException("Provider System not found with HL7App = HEARTS");
		}
		
		// Get the lookup with the external mapping the same as the negative value for ACTIVITY
		// As this impl uses dto for lookupService, we want to get the localLookupService too in order to get the PathwaysDetails value
		ims.domain.lookups.LookupService localLookupService;
		try {
			localLookupService = (ims.domain.lookups.LookupService) DomainImplFlyweightFactory.getInstance().create(ims.domain.lookups.impl.LookupServiceImpl.class, getDomainFactory().getDomainSession(), getDomainFactory());
		} catch (InstantiationException e) 
		{
			throw new DomainInterfaceException("InstantiationException occurred creating localLookupService - " + e.getMessage(), e);
		} catch (IllegalAccessException e) {
			throw new DomainInterfaceException("IllegalAccessException occurred creating localLookupService - " + e.getMessage(), e);		}
		
		// For the attended events, we cannot use the activity value as the external mapping for the lookup
		// as this is already used for the first appointments.  We can use the positive value of the equivalent
		// so for Simulation -115, the mapping value for it's attended equivalent will be 115
		if (activity != null && activity.startsWith("-"))
			activity = activity.substring(1);
		PathwaysDetail pthDetailLkp =(PathwaysDetail) localLookupService.getLocalLookup(PathwaysDetail.class, PathwaysDetail.TYPE_ID, voProv.getCodeSystem().getText(), activity);
		if (pthDetailLkp == null)
		{
			throw new DomainInterfaceException("PathwaysDetails lookup not found for activity " + activity);
		}
		
		HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
		
		// Get the External Event
		ExternalEventMappingVo extMap = new ExternalEventMappingVo();
		extMap.setDetail(pthDetailLkp);
		extMap.setGroup(PathwaysGroup.CPT);
		extMap.setProviderSystem(voProv);
		ExternalEventMappingVo extEvt = impl.getExternalEventMappings(extMap);
		if (extEvt == null)
		{
			throw new DomainInterfaceException("ExternalEventMapping not found for CPT and Pathways Details " + pthDetailLkp.getText());
		}
		
		// Get the Actual Event
		EventVo event = impl.getEventByExternalMappings(extEvt);
		if (event == null)
		{
			throw new DomainInterfaceException("Event not found for ExternalEventMapping - "+ extEvt.getID_ExternalEventMapping());
		}
		patientEvent.setEvent(event);
		patientEvent.setExternalEvent(extEvt);
		
		impl.instantiatePatientEvent(patientEvent);
	}

	public PatTreatmentPlanLiteVo getTreatmentPlan(Integer actionIdFromDTO) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select ptp from PatTreatmentPlan as ptp left join ptp.actions as acts where "); 
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
	
		hql.append(" acts.id = :aptId");
		markers.add("aptId");
		values.add(actionIdFromDTO);

		hql.append(" and ptp.isRIE is null");

		List listPTP = factory.find(hql.toString(), markers,values);
		if (listPTP != null && listPTP.size() > 0) 
			return PatTreatmentPlanLiteVoAssembler.create((ims.oncology.domain.objects.PatTreatmentPlan)listPTP.get(0));
		else
			return null;
	}

	public PrimaryTumourDetailsShortVo getPrimaryTumourDetailRecordFromEpisode(EpisodeOfCareRefVo episode) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select p from PrimaryTumourDetails as p where "); 
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
	
		hql.append(" p.episodeOfCare.id = :episode");
		markers.add("episode");
		values.add(episode.getID_EpisodeOfCare());

		hql.append(" and (p.isRIE is null or p.isRIE = 0 ) and p.endDate is null");

		List l = factory.find(hql.toString(), markers,values);
		if (l != null && l.size() > 0) 
			return PrimaryTumourDetailsShortVoAssembler.create((PrimaryTumourDetails) l.get(0));
		else
			return null;
	}

	/*** WDEV-13756
	 * List all patient appointments for the patient
	 */
	public PatientApptDiaryVoCollection listPatientAppts(PatientRefVo patient, Date fromDate, Date toDate, Boolean activeOnly) 
	{
		PatientDiary diaryImpl = (PatientDiary) getDomainImpl(PatientDiaryImpl.class);
		return diaryImpl.listPatientAppts(patient, fromDate, toDate, activeOnly);
	}

	public String getLocationText(String lkup_id) throws DomainInterfaceException
	{
		// TODO Auto-generated method stub
		Lkup actions = (Lkup)getDTOInstance(Lkup.class);;
		actions.Filter.clear();
		actions.Filter.Lkup_typ = "3485";
		Result result = actions.list();
		if (result != null)
		{			
			return "";
		}
		
		for(int i=0; i<actions.DataCollection.count(); i++)
		   { 
				if(actions.DataCollection.get(i).Lkup_id.equals(lkup_id))
				{
					return actions.DataCollection.get(i).Lkup_nm;
				}
		   }
		
		return "";	
	}

	//WDEV-16919 get PatAction for a appt id

	public PatTreatPlanActionLiteDisplayVo getPatTreatActionDisplayData(Integer app_id)
	{
		if (app_id == null)
		{
			throw new CodingRuntimeException("Cannot get action details for a null id");
		}
		
		DomainFactory factory = getDomainFactory();
		PatAction patAct = (PatAction)factory.getDomainObject(PatAction.class, app_id);
		return PatTreatPlanActionLiteDisplayVoAssembler.create(patAct);	
	}
	
}

// WDEV-14158
// New Comparator class for the appointment list so that
// data is returned in the correct order
// i.e. session date and attendance time
class AppointmentListComparator implements Comparator
{
	public int compare(Object obj1, Object obj2)
	{
		Sd_appt_dts.Sd_appt_dtsRecord voObj1 = (Sd_appt_dts.Sd_appt_dtsRecord)obj1;
		Sd_appt_dts.Sd_appt_dtsRecord voObj2 = (Sd_appt_dts.Sd_appt_dtsRecord)obj2;
		
		// compare session date and attendance time
		if (voObj1.Sess_dt != null && voObj2.Sess_dt != null)
		{
			int result =voObj1.Sess_dt.compareTo(voObj2.Sess_dt); 
			if (result < 0)  // Negative voObj1 less than obj2
				return -1;
			else if (result > 0)  // Positive voObj1 greater than obj2
				return 1;
			else if (result == 0)  // Values Equal - check times
			{
				if (voObj1.Att_tm != null && voObj2.Att_tm != null)
				{
					int timeResult = voObj1.Att_tm.compareTo(voObj2.Att_tm);
					if (timeResult < 0)
						return -1;
					else if (timeResult > 0)
						return 1;
					else 
						return 0;
				}
			}
		}
		return 0;
	}
}
