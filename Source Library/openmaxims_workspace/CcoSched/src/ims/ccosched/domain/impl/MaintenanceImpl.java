//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.54 build 2714.21485)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.domain.impl;

import ims.ccosched.domain.ActivityView;
import ims.ccosched.domain.base.impl.BaseMaintenanceImpl;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.Result;
import ims.dto.client.Lkup;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_clinicview;
import ims.dto.client.Sd_prfile;

public class MaintenanceImpl extends BaseMaintenanceImpl
{
	private static final long	serialVersionUID	= -197849886528917459L;

	public Patient getPatient(PatientShort patient) throws StaleObjectException, DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getPatient(patient);
	}

	public ims.dto.client.Patient getPatient(String pkey) throws DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getPatient(pkey);
	}

	public Sd_appt getSd_appt(String appt_head_id) throws DomainInterfaceException
	{
		Sd_appt appointments = (Sd_appt)getDTOInstance(Sd_appt.class);
		appointments.Filter.clear();
		appointments.Filter.Appt_head_id = appt_head_id;

		Result result = appointments.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return appointments;
	}

	public Sd_prfile listProfiles() throws DomainInterfaceException
	{
		Sd_prfile profiles = (Sd_prfile)getDTOInstance(Sd_prfile.class);
		profiles.Filter.clear();
		Result result = profiles.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return profiles;
	}

	public Sd_clinicview getClinicDetails(String prfile_sess_id) throws DomainInterfaceException
	{
		Sd_clinicview session = (Sd_clinicview)getDTOInstance(Sd_clinicview.class);
		session.Filter.clear();
		session.Filter.Prfile_sess_id = prfile_sess_id;
		Result result = session.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return session;
	}

	public Sd_clinicview listClinicDetails(String prfile_id, String sess_dt) throws DomainInterfaceException
	{
		Sd_clinicview sessions = (Sd_clinicview)getDTOInstance(Sd_clinicview.class);
		sessions.Filter.clear();
		sessions.Filter.Prfile_id = prfile_id;
		sessions.Filter.Sess_dt = sess_dt;
		Result result = sessions.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return sessions;
	}

	public Sd_appt_dts listSd_appt_dts(String prfile_sess_id, String prfiled_sess_id, String appt_stat, String act_comp_flg) throws DomainInterfaceException
	{
		Sd_appt_dts appointments = (Sd_appt_dts) getDTOInstance(Sd_appt_dts.class);
		appointments.Filter.clear();

		if (prfile_sess_id != null)
			appointments.Filter.Prfile_sess_id = prfile_sess_id;

		if (prfiled_sess_id != null)
			appointments.Filter.Prfiled_sess_id = prfiled_sess_id;

		if (appt_stat != null)
			appointments.Filter.Appt_stat = appt_stat;

		if (act_comp_flg != null)
			appointments.Filter.Act_comp_flg = act_comp_flg;

		Result result = appointments.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return appointments;
	}

	public Lkup getLookupInstance(String lkup_type) throws DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getLookupInstance(lkup_type);
	}

	public Sd_appt getForUpdate(Sd_appt sd_appt) throws DomainInterfaceException
	{
		if(sd_appt == null)
			throw new DomainRuntimeException("Cannot get for update null sd_appt");
		
		Result result = sd_appt.getForUpdate();
		if (result != null)
		{
			if (result.getId() < 0)
				throw new DomainInterfaceException(result.getMessage());

			throw new DomainInterfaceException("Data was changed.");
		}
		
		return sd_appt;
	}

	public Sd_appt update(Sd_appt sd_appt) throws DomainInterfaceException
	{
		if(sd_appt == null)
			throw new DomainInterfaceException("Cannot update null Sd_appt");
		
		Result result = sd_appt.update();
		if (result != null)
		{
			throw new DomainInterfaceException("Failed to update record " + result.getMessage());
		}	

		return sd_appt;
	}
}
