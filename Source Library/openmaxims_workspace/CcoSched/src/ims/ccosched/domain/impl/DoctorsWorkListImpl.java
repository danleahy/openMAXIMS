//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.55 build 2755.18939)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.domain.impl;

import ims.ccosched.domain.ActivityView;
import ims.ccosched.domain.ClinicView;
import ims.ccosched.domain.base.impl.BaseDoctorsWorkListImpl;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.DTODomain;
import ims.dto.Result;
import ims.dto.client.Clinical_team;
import ims.dto.client.Doctype;
import ims.dto.client.Lkup;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Sd_comp_plan_lst;

public class DoctorsWorkListImpl extends BaseDoctorsWorkListImpl
{

	private static final long serialVersionUID = 1L;

	public Doctype getDoctype(String doc_id) throws DomainInterfaceException
	{
		ClinicView implClinicView = (ClinicView)getDomainImpl(ClinicViewImpl.class);
		return implClinicView.getDoctype(doc_id);
	}

	public DTODomain getDtoDomain()
	{
		ClinicView implClinicView = (ClinicView)getDomainImpl(ClinicViewImpl.class);
		return implClinicView.getDtoDomain();
	}

	public Sd_appt_dts listAppointments(String act_consult, String appt_dt, String grp_id, String activity_id) throws DomainInterfaceException
	{
		Sd_appt_dts floorClinic = (Sd_appt_dts) getDTOInstance(Sd_appt_dts.class);
		floorClinic.Filter.clear();
		
		if (act_consult != null)
			floorClinic.Filter.Act_consult = act_consult;

		if (appt_dt != null)
			floorClinic.Filter.Appt_dt = appt_dt;

		if (grp_id != null)
			floorClinic.Filter.Grp_id = grp_id;

		if (activity_id != null)
			floorClinic.Filter.Activity_id = activity_id;

		Result res = floorClinic.list();

		if (res != null)
			throw new DomainInterfaceException(res.getMessage());

		return floorClinic;
	}

	public Clinical_team listHCP(String cons_firm_id) throws DomainInterfaceException
	{
		Clinical_team hcps = (Clinical_team) getDTOInstance(Clinical_team.class);
		hcps.Filter.clear();
		hcps.Filter.Cons_firm_id = cons_firm_id;
		Result result = hcps.list();
		if (result != null)
			throw new DomainInterfaceException(result.getMessage());
		
		return hcps;
	}

	public Lkup getLookupInstance(String lkup_type) throws DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getLookupInstance(lkup_type);
	}

	public Sd_comp_plan_lst listComputerPlanning(String act_consult, String requiresconsultant, String targetdate, String activdone) throws DomainInterfaceException
	{
		Sd_comp_plan_lst pretreatment = (Sd_comp_plan_lst)getDTOInstance(Sd_comp_plan_lst.class);
		pretreatment.Filter.clear();
		
		if(act_consult == null)
			throw new DomainInterfaceException("Cannot list Pre-Treatment Activity records for null act_consult");
		
		if(activdone == null)
			throw new DomainInterfaceException("Cannot list Pre-Treatment Activity records for null activdone");
		
		if(requiresconsultant == null)
			throw new DomainInterfaceException("Cannot list Pre-Treatment Activity as requiresconsultant is mandatory");
		
		pretreatment.Filter.Act_consult = act_consult;
		pretreatment.Filter.Activdone = activdone;
		pretreatment.Filter.Requiresconsultant = requiresconsultant;
		
		if(targetdate != null)
			pretreatment.Filter.Targetdate = targetdate;
		
		Result res = pretreatment.list();
		if(res != null)
			throw new DomainInterfaceException(res.getMessage());
		
		return pretreatment;
	}

	public ims.dto.client.Patient getPatient(String pkey) throws ims.domain.exceptions.DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getPatient(pkey);
	}
	
	public Patient getPatient(PatientShort patient) throws DomainInterfaceException, StaleObjectException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getPatient(patient);
	}
}
