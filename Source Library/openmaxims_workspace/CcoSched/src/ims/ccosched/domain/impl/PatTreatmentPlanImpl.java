//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ccosched.domain.impl;
 
import ims.ccosched.domain.base.impl.BasePatTreatmentPlanImpl;
import ims.ccosched.vo.PatTreatPlanActionVo;
import ims.ccosched.vo.PatTreatPlanActionVoCollection;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.PatTreatmentPlanLiteVoCollection;
import ims.ccosched.vo.PatTreatmentPlanVo;
import ims.ccosched.vo.domain.PatTreatPlanActionVoAssembler;
import ims.ccosched.vo.domain.PatTreatmentPlanLiteVoAssembler;
import ims.ccosched.vo.domain.PatTreatmentPlanVoAssembler;
import ims.ccosched.vo.lookups.AppointmentStatus;
import ims.clinicaladmin.vo.domain.TumourGroupLiteVoAssembler;
import ims.clinicaladmin.vo.domain.TumourHistologyLiteVoAssembler;
import ims.clinicaladmin.vo.domain.TumourSiteLiteVoAssembler;
import ims.core.patient.vo.PatientRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.dto_move.domain.objects.Appointment;
import ims.dto_move.domain.objects.AppointmentDetail;
import ims.oncology.domain.objects.PatAction;
import ims.oncology.domain.objects.PatTreatmentPlan;
import ims.oncology.domain.objects.PrimaryTumourDetails;

import java.util.Iterator;
import java.util.List;

public class PatTreatmentPlanImpl extends BasePatTreatmentPlanImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* get core_patient from ccosched patient pkey
	*/
	public ims.core.vo.PatientShort getPatient(Integer pkey) throws ims.domain.exceptions.DomainInterfaceException
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	/**
	* get list of activity groups
	*/
	public ims.dtomove.vo.ActivityGroupVoCollection listActivityGroup() throws ims.domain.exceptions.DomainInterfaceException
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	public ims.dtomove.vo.ActionVoCollection listActivityActions(ims.dto_move.vo.ActivityGroupRefVo activityGroup) throws ims.domain.exceptions.DomainInterfaceException
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	/**
	* list sessions
	*/
	public ims.dtomove.vo.SessionVoCollection listsessions(ims.framework.utils.Date from, ims.framework.utils.Date to) throws ims.domain.exceptions.DomainInterfaceException
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	public PatTreatmentPlanLiteVoCollection listTreatmentPlans(PatientRefVo patient) throws DomainInterfaceException 
	{
		DomainFactory factory = getDomainFactory();

		List<?> ptList = factory.find("from PatTreatmentPlan as ptTp where ptTp.patient.id = :patientid", new String[] {"patientid"}, new Object[] {patient.getID_Patient()});
		
		if(ptList == null || ptList.size() == 0)
			return null;
		
		// WDEV-13470 - For each record, get Tumour Details
		PatTreatmentPlanLiteVoCollection coll = new PatTreatmentPlanLiteVoCollection();
		for (int i=0; i<ptList.size(); i++)
		{
			PatTreatmentPlan doTP = (PatTreatmentPlan) ptList.get(i);
			PatTreatmentPlanLiteVo vo = PatTreatmentPlanLiteVoAssembler.create(doTP);
			if (vo.getEpisodeIsNotNull())
			{
				List<?> tmList = factory.find("from PrimaryTumourDetails as ptd where ptd.episodeOfCare.id = :eps order by ptd.authoringInformation.authoringDateTime desc ", new String[] {"eps"}, new Object[] {vo.getEpisode().getID_EpisodeOfCare()});
				if (tmList != null && tmList.size() > 0)
				{
					// Take the latest one
					PrimaryTumourDetails ptm = (PrimaryTumourDetails) tmList.get(0);
					vo.setPrimaryTumourGroup(TumourGroupLiteVoAssembler.create(ptm.getTumourGroup()));
					vo.setPrimaryTumourHistology(TumourHistologyLiteVoAssembler.create(ptm.getTumourHistology()));
					vo.setPrimaryTumourSite(TumourSiteLiteVoAssembler.create(ptm.getTumourSite()));
				}
			}
			
			// WDEV-14151  For each treatment plan action, we need to get the relevant appt details
			if (vo.getActionsIsNotNull() && vo.getActions().size() > 0)
			{
				populateApptDetails(factory, vo.getActions());
			}
			
			coll.add(vo);
		}
		
		return coll;
	}

	private void populateApptDetails(DomainFactory factory, PatTreatPlanActionVoCollection actions)
	{
		Iterator it = actions.iterator();
		while (it.hasNext())
		{
			PatTreatPlanActionVo voPTPAct = (PatTreatPlanActionVo) it.next();
			if (voPTPAct != null && voPTPAct.getApptHeadId() != null)
			{
				Appointment doAppt = (Appointment) factory.getDomainObject(Appointment.class, voPTPAct.getApptHeadId());
				if (doAppt != null)
				{
					// 	First appt is the first in list and last appt is the last in list as this is saved as a list
					if (doAppt.getApptDetail() != null && doAppt.getApptDetail().size() > 0)
					{
					//	AppointmentDetail doFirstAppt=null;
					//	AppointmentDetail doLastAppt=null;
						// as idx is not guaranteed to be in order and some list items could be null we have to list until we find the first one
						for (int x=0; x<doAppt.getApptDetail().size(); x++)
						{
							AppointmentDetail doThisAppt = (AppointmentDetail) doAppt.getApptDetail().get(x);

							if (doThisAppt != null && doThisAppt.getApptDate() != null)
							{
								if (voPTPAct.getFirstApptDate() == null)
								{
									voPTPAct.setFirstApptDate(new ims.framework.utils.Date(doThisAppt.getApptDate()));
									voPTPAct.setFirstApptStatus((AppointmentStatus) getLookupService().getLookupInstance(AppointmentStatus.class, doThisAppt.getApptStatus()));
								}
								else if (voPTPAct.getFirstApptDate().isGreaterOrEqualThan(new ims.framework.utils.Date(doThisAppt.getApptDate()))) 
								{
									voPTPAct.setFirstApptDate(new ims.framework.utils.Date(doThisAppt.getApptDate()));
									voPTPAct.setFirstApptStatus((AppointmentStatus) getLookupService().getLookupInstance(AppointmentStatus.class, doThisAppt.getApptStatus()));
								}

								if (voPTPAct.getLastAppointmentDate() == null)
									voPTPAct.setLastAppointmentDate(new ims.framework.utils.Date(doThisAppt.getApptDate()));
								else if (voPTPAct.getLastAppointmentDate().isLessOrEqualThan(new ims.framework.utils.Date(doThisAppt.getApptDate()))) 
									voPTPAct.setLastAppointmentDate(new ims.framework.utils.Date(doThisAppt.getApptDate()));
							}
						}
					}
				}
			}
			
		}
	}

	public PatTreatPlanActionVo getAction(Integer actionId) 
	{
		if(actionId == null)
			throw new DomainRuntimeException("Cannot get PatTreatPlanActionVo for null actionId");
		
		DomainFactory factory = getDomainFactory();
		PatAction doPTPAct = (PatAction)factory.getDomainObject(PatAction.class,actionId);
		
		return PatTreatPlanActionVoAssembler.create(doPTPAct);
	}

	public PatTreatPlanActionVo saveAction(PatTreatPlanActionVo actionVo) throws StaleObjectException 
	{
		if (!actionVo.isValidated())
		{
			throw new DomainRuntimeException("actionVo VO has not be validated.");
		}

		DomainFactory factory = getDomainFactory();
		
		PatAction patTPAction = PatTreatPlanActionVoAssembler.extractPatAction(factory, actionVo);
		
		try
		{
			factory.save(patTPAction);
		} 
		catch (UnqViolationUncheckedException e) 
		{	
			throw (e);
		}
		
		return PatTreatPlanActionVoAssembler.create(patTPAction);
	}

	public PatTreatmentPlanVo getTreatmentPlan(PatTreatmentPlanLiteVo treatmentPlanLiteVo) 
	{
		if(treatmentPlanLiteVo == null)
			throw new DomainRuntimeException("Cannot get PatTreatmentPlanLiteVo for null voTreatmentPlan");
		
		DomainFactory factory = getDomainFactory();
		PatTreatmentPlan doPTP = (PatTreatmentPlan)factory.getDomainObject(PatTreatmentPlan.class,treatmentPlanLiteVo.getID_PatTreatmentPlan());
		PatTreatmentPlanVo vo = PatTreatmentPlanVoAssembler.create(doPTP);		
		populateApptDetails(factory, vo.getActions());
		return vo;

	}
}
