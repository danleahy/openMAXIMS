//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.60 build 2791.17293)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.domain.impl;

import ims.ccosched.domain.base.impl.BaseTransportImpl;
import ims.core.domain.Demographics;
import ims.core.domain.impl.DemographicsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupMapping;
import ims.dto.Result;
import ims.dto.client.Go_ptplact;
import ims.dto.client.Lkup;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.LookupInstVo;
import ims.vo.LookupMappingVo;
import ims.vo.LookupMappingVoCollection;

import java.util.Iterator;
import java.util.Set;

public class TransportImpl extends BaseTransportImpl
{
	private static final long serialVersionUID = 1L;
	
	public Lkup getLookupInstance(String lkup_type)
	{
		if(lkup_type == null || lkup_type.length() == 0)
			throw new CodingRuntimeException("Cannot get lookup for null lookup type"); 
			
		Lkup lkup = (Lkup)getDTOInstance(Lkup.class);
		lkup.Filter.Lkup_typ = lkup_type;
		
		Result res = lkup.list();
		
		if(res != null && res.getId() != -2)
		{
			throw new DomainRuntimeException(res.getMessage());
		}
		
		return lkup;
	}
	
	public ims.core.vo.PatientShort getPatient(PatientRefVo patient) throws DomainInterfaceException, StaleObjectException
	{
		Demographics demographicsImpl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return demographicsImpl.getPatient(patient);
	} 
	
	public ims.dto.client.Patient getPatient(String pkey) throws DomainInterfaceException
	{
		if(pkey == null)
			throw new DomainRuntimeException("Cannot get Patient for null pkey");
		
		ims.dto.client.Patient patient = (ims.dto.client.Patient)getDTOInstance(ims.dto.client.Patient.class);
		patient.Filter.clear();
		patient.Filter.Pkey = pkey;
		
		Result result = patient.get();
		if (result != null)
		{
			if(result.getId() == -2)
				throw new DomainInterfaceException("Error Getting Patient Details for pkey = " + pkey);

			throw new DomainInterfaceException(result.getMessage());
		}

		if (patient.DataCollection.count()!= 1)
			throw new DomainInterfaceException("Failed to get patient record.");
		
		return patient;
	}
	
	public Patient getPatient(PatientShort patient) throws StaleObjectException, DomainInterfaceException
	{
		Demographics demographicsImpl = (Demographics) getDomainImpl(DemographicsImpl.class);
		
		Patient pat = null;
		try
		{
			pat = demographicsImpl.getPatient(patient);
		}
		catch (DomainRuntimeException e)
		{
			throw new DomainInterfaceException(e.getMessage());
		}

		return pat;
	}
	
	public Go_ptplact getActionDto(String action_id) throws DomainInterfaceException
	{
		Go_ptplact actionsDto = (Go_ptplact)getDTOInstance(Go_ptplact.class);
		actionsDto.Filter.clear();
		actionsDto.Filter.Pt_act_id  = action_id;
		Result result = actionsDto.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return actionsDto;
	}
	
	public Sd_appt_dts getAppointments(String appt_head_id, String appt_stat, String act_comp_flg)throws DomainInterfaceException
	{
		Sd_appt_dts apptDetails = (Sd_appt_dts) getDTOInstance(Sd_appt_dts.class);
		apptDetails.Filter.clear();

		if (appt_head_id != null)
			apptDetails.Filter.Appt_head_id = appt_head_id;

		if (appt_stat != null)
			apptDetails.Filter.Appt_stat = appt_stat;

		if (act_comp_flg != null)
			apptDetails.Filter.Act_comp_flg = act_comp_flg;

		Result result = apptDetails.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return apptDetails;
	}
	
	public Sd_appt listAppointments(String first_appt_date, String tran_arrnge_req) throws DomainInterfaceException
	{
		Sd_appt appointment = (Sd_appt) getDTOInstance(Sd_appt.class);
		appointment.Filter.clear();
		//ICCO647 - 10/04/2003

		if (first_appt_date != null)
			appointment.Filter.First_appt_date = first_appt_date;

		if (tran_arrnge_req != null)
			appointment.Filter.Tran_arrnge_req = tran_arrnge_req;
		Result result = appointment.list();

		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return appointment;
	}

	public Patient getFullPatient(PatientRefVo patient) throws DomainInterfaceException, StaleObjectException
	{
		Demographics demographicsImpl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return demographicsImpl.getPatient(patient);
	}

	public LookupInstVo getMappings(LookupInstVo instance)
	{
		DomainFactory factory = getDomainFactory();
		ims.domain.lookups.LookupInstance doInst = factory.getLookupInstance(instance.getId());
		Set mappings = doInst.getMappings();
		LookupMappingVoCollection mapColl = new LookupMappingVoCollection();
		Iterator iter = mappings.iterator();
		LookupMapping doMapping;
		while (iter.hasNext())
		{
			doMapping = (LookupMapping) iter.next();
			mapColl.add(new LookupMappingVo(doMapping.getExtSystem(), doMapping.getExtCode()));
		}
		mapColl.sort();
		instance.setMappings(mapColl);
		return instance;
	}
}
