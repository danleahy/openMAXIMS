//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.54 build 2699.23990)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.domain.impl;

import ims.ccosched.domain.ActivityView;
import ims.ccosched.domain.base.impl.BaseCancelledAppointmentsImpl;
import ims.ccosched.vo.PatTreatmentPlanLiteVo;
import ims.ccosched.vo.domain.PatTreatmentPlanLiteVoAssembler;
import ims.core.domain.Demographics;
import ims.core.domain.impl.DemographicsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientShort;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.Result;
import ims.dto.client.Go_ptplact;
import ims.dto.client.Lkup;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_activity_grp;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;

import java.util.ArrayList;
import java.util.List;

public class CancelledAppointmentsImpl extends BaseCancelledAppointmentsImpl
{

	public Sd_appt_dts listSd_appt_dts(String grp_id, String activ_id, String prty, String appt_stat, String act_comp_flg) throws DomainInterfaceException
	{
		Sd_appt_dts patients = (Sd_appt_dts)getDTOInstance(Sd_appt_dts.class);
		patients.Filter.clear();
		patients.Filter.Grp_id	 = grp_id;
		patients.Filter.Activ_id = activ_id;
		if (prty != null)
			patients.Filter.Prty = prty;

		//Cancelled requiring rebooking
		if(appt_stat != null && act_comp_flg != null)
		{
			patients.Filter.Appt_stat 	 = appt_stat;//Attended
			patients.Filter.Act_comp_flg = act_comp_flg;
		}
		else
			patients.Filter.Appt_stat = "-2190 || -2191";//Open and Cancelled Reallocate  WDEV-13705

		Result result = patients.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return patients;
	}

	public Patient getPatient(String pkey) throws DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getPatient(pkey);
	}

	public Go_ptplact getGo_ptplact(String pt_act_id) throws DomainInterfaceException
	{
		Go_ptplact actions = (Go_ptplact)getDTOInstance(Go_ptplact.class);
		actions.Filter.clear();
		actions.Filter.Pt_act_id = pt_act_id;
	
		ims.dto.Result result = actions.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		if (actions.DataCollection.count() == 0)
		{
			throw new DomainInterfaceException("Failed to get treatment plan actions.");
		}
		
		return actions;
	}

	public Lkup getLookupInstance(String lkup_typ) throws DomainInterfaceException
	{
		Lkup lookupDto = (Lkup)getDTOInstance(Lkup.class);
		lookupDto.Filter.clear();
		lookupDto.Filter.Lkup_typ = lkup_typ;
		Result result = lookupDto.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return lookupDto;
	}

	public Sd_appt getAndGetForUpdateSd_appt(String appt_head_id) throws DomainInterfaceException
	{
		Sd_appt apptDto = (Sd_appt)getDTOInstance(Sd_appt.class);
		apptDto.Filter.Appt_head_id = appt_head_id;
		Result result  = apptDto.get();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		//Get for Update
		result = apptDto.getForUpdate();
		if (result != null)
		{
			if (result.getId() < 0)
				throw new DomainInterfaceException(result.getMessage());

			throw new DomainInterfaceException("Data was changed by another user. The Screen will be refreshed");
		}
		
		return apptDto;
	}
	
	public Sd_appt updateSd_appt(Sd_appt sd_appt) throws DomainInterfaceException
	{
		if(sd_appt == null)
			throw new DomainRuntimeException("Cannot update null Sd_appt");
		
		ims.dto.Result result = sd_appt.update();
		if (result != null)
		{
			throw new DomainRuntimeException(result.getMessage());
		}
		
		return sd_appt;
	}

	public Sd_activity listSd_activity(String act_ind, String grp_act_ind) throws DomainInterfaceException
	{
		Sd_activity activities = (Sd_activity)getDTOInstance(Sd_activity.class);
		activities.Filter.clear();
		activities.Filter.Act_ind = act_ind;
		activities.Filter.Grp_act_ind = grp_act_ind;

		Result result = activities.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return activities;
	}

	public Sd_activity_grp listSd_activity_grp(String act_ind_grp) throws DomainInterfaceException
	{
		Sd_activity_grp activityGroups = (Sd_activity_grp)getDTOInstance(Sd_activity_grp.class);
		activityGroups.Filter.clear();
		activityGroups.Filter.Act_ind_grp = act_ind_grp;

		Result result = activityGroups.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return activityGroups;
	}

	public ims.core.vo.Patient getPatient(PatientShort patient) throws StaleObjectException
	{
		Demographics demographicsImpl = (Demographics)getDomainImpl(DemographicsImpl.class);
		return demographicsImpl.getPatient(patient);
	}
	
	public ims.core.vo.PatientShort getPatient(PatientRefVo patient)
	{
		Demographics demographicsImpl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return demographicsImpl.getPatient(patient);
	} 

	public PatTreatmentPlanLiteVo getTreatmentPlan(Integer actionIdFromDTO) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select ptp from PatTreatmentPlan as ptp left join ptp.actions as acts where "); 
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		hql.append(" acts.id = :aptId");
		markers.add("aptId");
		values.add(actionIdFromDTO);

		hql.append(" and ptp.isRIE is null");

		List listPTP = factory.find(hql.toString(), markers,values);
		if (listPTP != null && listPTP.size() > 0) 
			return PatTreatmentPlanLiteVoAssembler.create((ims.oncology.domain.objects.PatTreatmentPlan)listPTP.get(0));
		else
			return null;
	}
}
