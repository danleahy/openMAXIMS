//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.54 build 2714.21485)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ccosched.domain.impl;

import java.util.List;

import ims.ccosched.domain.ActivityView;
import ims.ccosched.domain.base.impl.BaseFirstAppointmentSearchImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PatientCollection;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.PatientAssembler;
import ims.core.vo.lookups.PatIdType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.dto.Result;
import ims.dto.client.Demographics;
import ims.dto.client.Patient;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_activity_grp;
import ims.dto.client.Sd_appt;
import ims.dto.client.Sd_appt_dts;

public class FirstAppointmentSearchImpl extends BaseFirstAppointmentSearchImpl
{
	private static final long serialVersionUID = 1L;

	public Patient getPatient(String pkey) throws DomainInterfaceException
	{
		ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
		return impl.getPatient(pkey);	
	}

	public Sd_appt listAppointments(String first_appt_activity_gr, String first_appt_activity, String first_appt_date) throws DomainInterfaceException
	{
		Sd_appt sd_appt = (Sd_appt) getDTOInstance(Sd_appt.class);
		sd_appt.Filter.First_appt_activity_gr = first_appt_activity_gr;
		sd_appt.Filter.First_appt_activity	  = first_appt_activity;
		sd_appt.Filter.First_appt_date		  = first_appt_date;
		
		Result result = sd_appt.list();
		if(result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return sd_appt;
	}

	public Sd_activity_grp listGroups(String act_ind_grp) throws DomainInterfaceException
	{
		Sd_activity_grp activityGroups = (Sd_activity_grp)getDTOInstance(Sd_activity_grp.class);
		activityGroups.Filter.clear();
		activityGroups.Filter.Act_ind_grp = act_ind_grp;

		Result result = activityGroups.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}
		
		return activityGroups;
	}

	public Sd_appt_dts getMachine(String appt_head_id, String appt_id) throws DomainInterfaceException
	{
		Sd_appt_dts app_dtsRec = (Sd_appt_dts) getDTOInstance(Sd_appt_dts.class);
		app_dtsRec.Filter.clear();
		app_dtsRec.Filter.Appt_head_id = appt_head_id;
		app_dtsRec.Filter.Appt_id 	   = appt_id;
		
		Result res = app_dtsRec.get();
		if(res != null)
		{
			throw new DomainInterfaceException(res.getMessage());
		}
		return app_dtsRec;
	}

	public Sd_activity listActivities(String act_ind, String grp_act_ind) throws DomainInterfaceException
	{
		Sd_activity activities = (Sd_activity) getDTOInstance(Sd_activity.class);
		activities.Filter.clear();
		activities.Filter.Act_ind = act_ind;
		activities.Filter.Grp_act_ind = grp_act_ind;

		Result result = activities.list();
		if (result != null)
		{
			throw new DomainInterfaceException(result.getMessage());
		}

		return activities;
	}

	public ims.core.vo.Patient getPatient(PatientShort patient) throws DomainInterfaceException, StaleObjectException
	{
		//WDEV-15386
		
		//ActivityView impl = (ActivityView)getDomainImpl(ActivityViewImpl.class);
				//return impl.getPatient(patient); 
		
		if (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL"))
			return getLocalPatient(patient);
		
		return null;
	}

	//WDEV-15386
	private ims.core.vo.Patient getLocalPatient(PatientShort patVo) 
	{
		DomainFactory factory = getDomainFactory();

		if (patVo.getIdentifiers() == null || patVo.getIdentifiers().size() == 0 || (patVo.getIdentifiers().get(0)) == null)
		{
			throw new DomainRuntimeException("Patient Get call must contain valid identifier");
		}	
	
		PatientIdCollection identifiers = patVo.getIdentifiers();
		for (int i = 0; i < identifiers.size(); i++)
		{
			if (identifiers.get(i).getType().equals(PatIdType.PKEY))
			{
				String idVal = identifiers.get(i).getIdValue().trim();
				String hql = " from Patient p join p.identifiers as ids where ids.type = :idType and ids.value = :idValue ";
		
				java.util.List<?> patientList = factory.find(hql, new String[]{"idValue", "idType"}, new Object[]{idVal, getDomLookup(identifiers.get(i).getType())});
				
				PatientCollection patients = PatientAssembler.createPatientCollectionFromPatient(patientList);
				
				if (patients!=null && patients.size()>0)
				{
					return patients.get(0);
				}
			}
		}
		
		return null;
		
	}
}
