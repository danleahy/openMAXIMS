//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.52 build 2505.17727)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.gpsearch;

import ims.admin.forms.gpsearch.GenForm.grdGpsRow;
import ims.admin.vo.GPSearchCriteriaVo;
import ims.admin.vo.enums.GPAction;
import ims.admin.vo.enums.GPSelectedRecordType;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.GpRefVo;
import ims.core.vo.GP;
import ims.core.vo.GPLiteWithPracticesVo;
import ims.core.vo.GPLiteWithPracticesVoCollection;
import ims.core.vo.GpLiteToPracticeLiteVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.GpPracticeLiteVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocSiteShortVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.GPStatus;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final int COL_GP_NAME = 0;
	private static final int COL_SURGERY_ADDR = 1;
		private static final int COL_PRACTICE_ADDR  = 2;
	private static final int COL_GP_PRACTICE_CODE  = 3;
	
	private static final long	serialVersionUID	= 1L;

	// ------ Component Interface Methods ---------------------

		
	public GP getFullGpVo()
	{
		ValueObject gpComponentSelValue = getSelectedValue();
		GpRefVo refGP = getGpReferenceforSelectedRow(form.dynGrdGps().getSelectedRow()); // WDEV-18377
		GpLiteVo voGpLite = null;
		if (gpComponentSelValue instanceof  GpLiteVo)
		{	
			voGpLite  = (GpLiteVo) getSelectedValue();
		}
		if (gpComponentSelValue instanceof GpLiteToPracticeLiteVo)
		{	
			voGpLite = ((GpLiteToPracticeLiteVo) getSelectedValue()).getGp();
		}	
		if (gpComponentSelValue instanceof LocShortVo)
		{	
			voGpLite = ((GpLiteVo) domain.getGpLite(refGP));
		}	
		if(voGpLite != null)
			return domain.getGpFull(voGpLite);

		return null;
	}

	public void setVisibleContextMenu(Boolean value)
	{
		setCanBeVisibleContextMenu(value);
		enableContextMenu();
	}

	public void setValue(GpLiteVo value)
	{
		setValueInGrid(value);
	}
	
	public void setValue(GpRefVo value)
	{
		GPLiteWithPracticesVo voGpLite = null;
		
		if (value != null)
			voGpLite = domain.getGpLite(value);

		setValueInGrid(voGpLite);
	}

	public void clear()
	{
		clearControls();
		clearAction();
		enableContextMenu();
	}

	public void setEnabled(Boolean value)
	{
		enableControls(value != null ? value.booleanValue() : false);
	}

	public GPAction getActionEvent()
	{
		return getGPAction();
	}

	public void setSearchCriteria(GPSearchCriteriaVo criteria)
	{
		populateDataFromScreen(criteria);
		enableCodeText();
	}
	
	public void search()
	{
		doSearch();
	}
	
	public GpShortVo getNewGpBasedOnSearchCriteria()
	{
		GpShortVo voGpShort = new GpShortVo();
		voGpShort.setName(new PersonName());

		String forname = form.txtSearchForename().getValue();
		String surname = form.txtSearchSurname().getValue();
		TaxonomyType type = form.cmbSearchCodeType().getValue();

		voGpShort.getName().setForename(forname);
		voGpShort.getName().setUpperForename(forname != null ? forname.toUpperCase().substring(0, Math.min(voGpShort.getName().getUpperForenameMaxLength(), forname.length())) : null);
		voGpShort.getName().setSurname(surname);
		voGpShort.getName().setUpperSurname(surname != null ? surname.toUpperCase().substring(0, Math.min(voGpShort.getName().getUpperSurnameMaxLength(), surname.length())) : null);

		if (type != null)
		{
			voGpShort.setCodeMappings(new TaxonomyMapCollection());
			TaxonomyMap taxonomyMap = new TaxonomyMap();
			taxonomyMap.setTaxonomyName(type);
			taxonomyMap.setTaxonomyCode(form.txtSearchCode().getValue());
			voGpShort.getCodeMappings().add(taxonomyMap);
		}

		return voGpShort;
	}
	
	public void setSearchButtonAsDefault()
	{
		form.imbSearch().setAsDefaultButton();
	}
	
	public void showStatus(Boolean bShow)
	{
		form.lblStatus().setVisible(bShow);
		form.cmbStatus().setVisible(bShow);
	}

	//WDEV-18377
	public void initialize(Boolean isStatusSearchCriteriaVisible, Boolean areDistinctRecRetrieved)
	{		
		showStatus(isStatusSearchCriteriaVisible);
		initialize();
		form.grdGps().setVisible(isStatusSearchCriteriaVisible );
		form.dynGrdGps().setVisible(!isStatusSearchCriteriaVisible);
		boolean isPracticeAndSurgeryColsVisible = ConfigFlag.UI.SHOW_SURGERY_WITH_PRACTICE_DETAILS.getValue();
		
		if (!isStatusSearchCriteriaVisible)
		{	
			initializeGPDynGrid(isPracticeAndSurgeryColsVisible);
		}
		
		form.cmbStatus().setValue(GPStatus.ACTIVE);
		form.getLocalContext().setSearchForDistinctRecords(areDistinctRecRetrieved);
						
	}
	
	public GPSelectedRecordType getComponentGridSelectedRecordType()
	{
		return getSelectedRecordType();
	}

	public ValueObject getValue()
	{
		return getSelectedValue();
	}
	
	// ---------------------------------------------------------

	// -------- Protected Methods ------------------------------
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
	}

	protected void onFormModeChanged()
	{
		enableCodeText();
		enableContextMenu();
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		doSearch();
	}

	protected void onImbClearClick() throws PresentationLogicException
	{
		clearControls();
		setGpAction(GPAction.CLEAR);
		setSelectedRecordType(GPSelectedRecordType.NONE);
	}

	protected void onGrdGpsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
		setSelectedRecordType(GPSelectedRecordType.GP);
		setActionAndFireEvent(GPAction.SELECT);
	}

	protected void onCmbSearchCodeTypeValueChanged() throws PresentationLogicException
	{
		enableCodeText();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GPGrid.NEWGP :
				setActionAndFireEvent(GPAction.NEW);
			break;

			case GenForm.ContextMenus.GPGrid.EDITGP :
				setActionAndFireEvent(GPAction.EDIT);
			break;
		}
	}
	
	protected void onDynGrdGpsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		enableContextMenu();
		if (row.getValue() instanceof GpLiteVo) 
			setSelectedRecordType(GPSelectedRecordType.GP);
		else if (row.getValue() instanceof GpLiteToPracticeLiteVo) 
			setSelectedRecordType(GPSelectedRecordType.PRACTICE);
		else if (row.getValue() instanceof LocShortVo) 
			setSelectedRecordType(GPSelectedRecordType.SURGERY);
		else
			setSelectedRecordType(GPSelectedRecordType.NONE); 
		setActionAndFireEvent(GPAction.SELECT);
	}

	// -------- Protected Methods ------------------------------

	// -------- Private Methods --------------------------------
	private void doSearch()
	{
		searchGps();
		setGpAction(GPAction.SEARCH);
		setSelectedRecordType(GPSelectedRecordType.NONE);
	}

	private void searchGps()
	{
		GPSearchCriteriaVo voGP = new GPSearchCriteriaVo();

		String searchCode = form.txtSearchCode().getValue();
		if (searchCode != null)
		{
			// Search by code instead
			TaxonomyType codeType = form.cmbSearchCodeType().getValue();
			if (codeType == null)
			{
				engine.showMessage("Please specify a Code Type when providing a Code");
				form.cmbSearchCodeType().setFocus();
				return;
			}

			voGP.setCode(searchCode);
			voGP.setCodeType(codeType);
			
			GPStatus lkupGPStatus = form.cmbStatus().getValue();
			if (lkupGPStatus != null)
			{
				voGP.setStatus(lkupGPStatus);
			}
			
			clearNonCodeTypeControls();
		}
		else
		{
				
			String surname = form.txtSearchSurname().getValue();
			String addressPart = form.txtAddressContains().getValue();
			
			if ((surname == null || surname.equals("")) && addressPart == null)
			{
				engine.showMessage("Please enter some search criteria into the Surname or Address Contains  fields");
				form.txtSearchSurname().setFocus();
				return;
			}
			if (surname != null && surname.length() < 3 && voGP.getPracticeName() == null)
			{
				engine.showMessage("Please specify a search Surname of at least 3 characters");
				form.txtSearchSurname().setFocus();
				return;
			}

			if(surname != null)//WDEV-4996
			{
				surname = surname.replaceAll("[^a-zA-Z]", "");//wdev-4923
				voGP.setSurname(surname);
			}

			String forname = form.txtSearchForename().getValue();
			if (forname != null)
			{
				forname = forname.replaceAll("[^a-zA-Z]", "");//wdev-4923
				voGP.setForename(forname);
			}

			String addressContains = form.txtAddressContains().getValue();
			if (addressContains != null && addressContains.trim().length() > 0)
			{
				voGP.setAddressContains(addressContains.trim());
			}
			
			GPStatus lkupGPStatus = form.cmbStatus().getValue();
			if (lkupGPStatus != null)
			{
				voGP.setStatus(lkupGPStatus);
			}
			voGP.setAreDistinctRecToBeRetrieved(form.getLocalContext().getSearchForDistinctRecords());
			
		}
		
		if(form.getGlobalContext().Core.getFilterGpByPracticeIsNotNull() && voGP != null)
			voGP.setPractice(form.getGlobalContext().Core.getFilterGpByPractice());

		GPLiteWithPracticesVoCollection listGps = domain.listGps(voGP);
		//WDEV-18377
		if (form.dynGrdGps().isVisible())
		{	
			populateGpDynGrid(listGps);
		}
		else
		{
			populateGpGrid(listGps);
		}
		if(listGps == null || listGps.size() == 0)
		{
			engine.showMessage("No records found matching the search criteria");			
		}

	}

	private void populateGpDynGrid(GPLiteWithPracticesVoCollection voGPcollection)
	{
		form.dynGrdGps().getRows().clear();
		
		if (voGPcollection == null || voGPcollection.size() == 0)
			return;

		for (int i = 0; i < voGPcollection.size(); i++)
		{
			if (voGPcollection.get(i) == null)
				continue;
			addGpRow(voGPcollection.get(i), getRowforGridValue(voGPcollection.get(i)));
		}
	}
	
	private void addGpRow(GpLiteVo gp, DynamicGridRow row) 
	{
		if(gp == null)
			return;

		if(gp instanceof GPLiteWithPracticesVo)
		{

			GPLiteWithPracticesVo voGpWithPractice = (GPLiteWithPracticesVo)gp;

			DynamicGridRow gpRow = form.dynGrdGps().getRows().newRow();
			gpRow.setSelectable(Boolean.TRUE);
			gpRow.setReadOnly(Boolean.TRUE);

			DynamicGridCell gpNmeCell = gpRow.getCells().newCell(getColumn(COL_GP_NAME), DynamicCellType.HTMLVIEW);
			gpNmeCell.setValue(voGpWithPractice.getName().toString() + (voGpWithPractice.getNationalCode() != null ? "<br/>" + voGpWithPractice.getNationalCode(): "")); //WDEV-18739
			gpNmeCell.setTooltip("GP Name: " + voGpWithPractice.getName().toString() + "<br/>"+ (voGpWithPractice.getNationalCode() != null ? "National GP Code: " +  voGpWithPractice.getNationalCode(): ""));
			
			gpRow.setValue(gp);
			gpRow.setIdentifier((GpRefVo)gp);
			populatePracticesInGrid (voGpWithPractice,gpRow);

		}
	}

	private void populatePracticesInGrid(GPLiteWithPracticesVo voGpWithPractice,  DynamicGridRow gpRow)
	{
		if (voGpWithPractice.getPracticesIsNotNull() && voGpWithPractice.getPractices().size() > 0)
		{	
			for (int i=0; i < voGpWithPractice.getPractices().size();i++)
			{
				if (voGpWithPractice.getPractices().get(i) == null)
					continue;

				if (voGpWithPractice.getPractices().get(i) != null && voGpWithPractice.getPractices().get(i).getPractice() != null)
				{
					if ((ConfigFlag.DOM.GP_USE_SURGERIES.getValue() && !hasActiveSurgeries(voGpWithPractice.getPractices().get(i).getPractice())) || !Boolean.TRUE.equals(voGpWithPractice.getPractices().get(i).getPractice().getIsActive()))
						continue;
										
					if (gpRow == null)
					{	
						gpRow = form.dynGrdGps().getRows().newRow();
						
						if (getColumn(COL_GP_NAME) != null)
						{
							DynamicGridCell gpNameCell = gpRow.getCells().newCell(getColumn(COL_GP_NAME), DynamicCellType.HTMLVIEW);
							String gpNameFormatted = "GP Name: " + voGpWithPractice.getName().toString() + "<br/>"+ (voGpWithPractice.getNationalCode() != null ? "National GP Code: " +  voGpWithPractice.getNationalCode(): "");
							gpNameCell.setValue(voGpWithPractice.getName().toString() + (voGpWithPractice.getNationalCode() != null ? "<br/>" +  voGpWithPractice.getNationalCode(): "")); //WDEV-18739
							gpNameCell.setTooltip(gpNameFormatted);
						}
					}

					
					if (getColumn(COL_GP_PRACTICE_CODE) != null)
					{	
						DynamicGridCell gpPracticeCodeCell = gpRow.getCells().newCell(getColumn(COL_GP_PRACTICE_CODE), DynamicCellType.HTMLVIEW);
						String practiceCodeFormatted = voGpWithPractice.getPractices().get(i).getPractice().getNationalCode() != null ? voGpWithPractice.getPractices().get(i).getPractice().getNationalCode() :"" ;
						gpPracticeCodeCell.setValue(practiceCodeFormatted);
						gpPracticeCodeCell.setTooltip(practiceCodeFormatted);
					}
															
					if (getColumn(COL_PRACTICE_ADDR) != null)
					{	
						DynamicGridCell practiceAddrCell = gpRow.getCells().newCell(getColumn(COL_PRACTICE_ADDR), DynamicCellType.HTMLVIEW);
						practiceAddrCell.setValue(buildPracticeDisplayData(voGpWithPractice.getPractices().get(i).getPractice(), false));
						practiceAddrCell.setTooltip(buildPracticeDisplayData(voGpWithPractice.getPractices().get(i).getPractice(), true));

					}

					gpRow.setSelectable(Boolean.TRUE);
					gpRow.setReadOnly(Boolean.TRUE);
					gpRow.setValue(voGpWithPractice.getPractices().get(i));
					gpRow.setIdentifier((GpRefVo)voGpWithPractice);

					if (ConfigFlag.DOM.GP_USE_SURGERIES.getValue())
					{	
						populateSurgeriesInGrid(voGpWithPractice, voGpWithPractice.getPractices().get(i).getPractice(), gpRow);
					}

					gpRow = null;
					
				}
			}
		}
	}
	
	//http://jira/browse/WDEV-13537
	private LocSiteShortVoCollection getHeartsSurgery(LocSiteShortVoCollection surgeries, String gMCCode)
	{
		if (ConfigFlag.HL7.HEARTS_GP_MODEL.getValue()&& surgeries != null)
		{
			LocSiteShortVoCollection surgeriesForGp = new LocSiteShortVoCollection();
			for (LocSiteShortVo surgery : surgeries)
			{
				if(surgery.getIsActiveIsNotNull() && 
						surgery.getIsActive().equals(Boolean.TRUE)&&
						surgery.getPasCode()!=null&&
						gMCCode!=null&&
						gMCCode.trim()!=null&&
						surgery.getPasCode().toUpperCase().matches("\\S+_"+gMCCode.trim().toUpperCase()+"_\\S+")) //http://jira/browse/WDEV-15535 changed filter from PAS to GMC 
				{
					surgeriesForGp.add(surgery);
				}
			}
			return surgeriesForGp;
		}
		return null;
	}

	
	private void populateSurgeriesInGrid(GPLiteWithPracticesVo voGpWithPractice, GpPracticeLiteVo gppractice, DynamicGridRow row)
	{
		String gMCCode = null;

		if (voGpWithPractice != null)
		{
			if(voGpWithPractice.getCodeMappingsIsNotNull())
			{
				gMCCode = voGpWithPractice.getCodeMappings().getMappingValue(TaxonomyType.NAT_GP_CODE);
			}
		}

		if (gppractice.getSurgeries() != null && gppractice.getSurgeries().size() > 0)
		{	
			
			LocSiteShortVoCollection heartsSurgeries = getHeartsSurgery(gppractice.getSurgeries(), gMCCode);

			if (heartsSurgeries != null && heartsSurgeries.size() > 0)
			{
				populateSurgeriesFromCollection(voGpWithPractice, gppractice, row, heartsSurgeries);          
			}	

			else
			{	
				populateSurgeriesFromCollection(voGpWithPractice, gppractice, row, gppractice.getSurgeries()); 
			}
		}
	}
	
	private boolean hasActiveSurgeries (GpPracticeLiteVo gppractice)
	{
		if (gppractice.getSurgeriesIsNotNull() && gppractice.getSurgeries().size() > 0)
		{
			for (int i=0; i<gppractice.getSurgeries().size(); i++)
			{
				if (gppractice.getSurgeries().get(i) != null && Boolean.TRUE.equals(gppractice.getSurgeries().get(i).getIsActive()))
					return true;
				
			}
		}
		return false;
	}
	private void populateSurgeriesFromCollection(GPLiteWithPracticesVo voGpWithPractice,	GpPracticeLiteVo gppractice, DynamicGridRow row, LocSiteShortVoCollection surgeries)
	{
		for (LocSiteShortVo surgery : surgeries)
		{	
			if (surgery == null || (surgery != null && !(Boolean.TRUE.equals(surgery.getIsActive()))))
				continue;	
			
			addSurgeryRow(voGpWithPractice, gppractice, row, surgery);
			
			row = null;
		}
	}

	private void addSurgeryRow(GPLiteWithPracticesVo voGpWithPractice,GpPracticeLiteVo gppractice, DynamicGridRow row, LocSiteShortVo surg)
	{
		if (row == null)
		{					
			row = form.dynGrdGps().getRows().newRow();
								
			if (getColumn(COL_GP_NAME) != null)
			{	
				DynamicGridCell gpNameCell = row.getCells().newCell(getColumn(COL_GP_NAME), DynamicCellType.HTMLVIEW);
				String gpNameFormatted = "GP Name: " + voGpWithPractice.getName().toString() + "<br/>"+ (voGpWithPractice.getNationalCode() != null ? "National GP Code: " +  voGpWithPractice.getNationalCode(): ""); //WDEV-18739
				gpNameCell.setValue(voGpWithPractice.getName().toString() + (voGpWithPractice.getNationalCode() != null ? "<br/>" + voGpWithPractice.getNationalCode(): "")); //WDEV-18739
				gpNameCell.setTooltip(gpNameFormatted);
										
			}
			if (getColumn(COL_GP_PRACTICE_CODE) != null)
			{	
				DynamicGridCell gpCodeCell = row.getCells().newCell(getColumn(COL_GP_PRACTICE_CODE), DynamicCellType.HTMLVIEW);
				String practiceCodeFormatted = gppractice.getNationalCode() != null ? gppractice.getNationalCode() :"" ;
				gpCodeCell.setValue(practiceCodeFormatted);
				gpCodeCell.setTooltip(practiceCodeFormatted);
			}

			if (getColumn(COL_PRACTICE_ADDR) != null)
			{
				DynamicGridCell practAddressCell = row.getCells().newCell(getColumn(COL_PRACTICE_ADDR), DynamicCellType.HTMLVIEW);
				practAddressCell.setValue(buildPracticeDisplayData(gppractice, false));
				practAddressCell.setTooltip(buildPracticeDisplayData(gppractice, true));
				
			}			
		}
		row.setReadOnly(Boolean.TRUE);

		if (getColumn(COL_SURGERY_ADDR) != null)
		{	
			DynamicGridCell surgerycelladdr = row.getCells().newCell(getColumn(COL_SURGERY_ADDR), DynamicCellType.HTMLVIEW);
			surgerycelladdr.setValue(buildSurgeryDisplayData(surg,false));
			surgerycelladdr.setTooltip(buildSurgeryDisplayData(surg,true));
		}

		row.setIdentifier((GpRefVo)voGpWithPractice);
		row.setValue(surg);
	}
	
	//WDEV-18739
	private String buildPracticeDisplayData(GpPracticeLiteVo practice, boolean showLabels)
	{
		if (practice == null)
			return "";	
		String displayData = "";

		if (showLabels)
		{	
			displayData = "Practice: " +  practice.getName() + (practice.getAddressIsNotNull() && practice.getAddress().toDisplayString() != null && practice.getAddress().toDisplayString().length() > 0 ? "<br/>Address: " + practice.getAddress().toDisplayString() : "");
		}
		else
		{
			displayData =  practice.getName() + (practice.getAddressIsNotNull() && practice.getAddress().toDisplayString() != null && practice.getAddress().toDisplayString().length() > 0 ? "<br/>"  + practice.getAddress().toDisplayString() : "");
		}
		if (displayData.contains(",") && displayData.substring(displayData.lastIndexOf(",") + 1, displayData.length()).trim().length() == 0)
		{		
			displayData = displayData.substring(0, displayData.lastIndexOf(","));
		}
		
		return displayData;
	}
	//WDEV-18739
	private String buildSurgeryDisplayData(LocSiteShortVo surgery, boolean showLabels)
	{
		if (surgery == null)
			return "";	
		String displayData = "";

		if (showLabels)
		{	
			displayData =  "Surgery: " + surgery.getName().toString() + (surgery.getAddressIsNotNull() && surgery.getAddress().toDisplayString() != null && surgery.getAddress().toDisplayString().length() > 0 ? "<br/>Address: " + surgery.getAddress().toDisplayString() : "");
		}
		else
		{
			displayData =  surgery.getName().toString() + (surgery.getAddressIsNotNull() && surgery.getAddress().toDisplayString() != null && surgery.getAddress().toDisplayString().length() > 0 ? "<br/>" + surgery.getAddress().toDisplayString() : "");
		}
		if (displayData.contains(",") && displayData.substring(displayData.lastIndexOf(",")+ 1, displayData.length()).trim().length() == 0)
		{		
			displayData = displayData.substring(0, displayData.lastIndexOf(","));
		}
		
		return displayData;
	}

	private void populateGpRow(GpLiteVo voLiteVo, GenForm.grdGpsRow row)
	{
		if(voLiteVo == null)
			return;
		row.setGpName(voLiteVo.getNameIsNotNull()?voLiteVo.getName().toString():"");
		
		String strDisplay = "";
		if(voLiteVo instanceof GPLiteWithPracticesVo)
		{
			GPLiteWithPracticesVo voGpWithPractice = (GPLiteWithPracticesVo)voLiteVo;
			if(voGpWithPractice.getPracticesIsNotNull() && voGpWithPractice.getPractices().size() > 0)
			{
				int count = 0;
				for(GpLiteToPracticeLiteVo voGpToPractice : voGpWithPractice.getPractices())
				{
					if(voGpToPractice.getPracticeIsNotNull())
					{
						count++;
						strDisplay += voGpToPractice.getPractice().getName();
						strDisplay += count < (voGpWithPractice.getPractices().size()) ? "," : "";
					}
				}
			}
		}

		
		row.setColPractice(strDisplay);
		row.setTooltipForColPractice(strDisplay);
		
		row.setNatCode(voLiteVo.getNationalCode());
		row.setValue(voLiteVo);
	}
	
	private void populateGpGrid(GPLiteWithPracticesVoCollection collection)
	{
		form.grdGps().getRows().clear();
		if (collection == null || collection.size() == 0)
			return;	

		for (int i = 0; i < collection.size(); i++)
		{
			populateGpRow(collection.get(i), form.grdGps().getRows().newRow());
		}
	}
	private void enableContextMenu()
	{
		boolean canBeVisible = getCanMakeVisibleContextMenu();
		boolean recordSelected = form.grdGps().getSelectedRowIndex() >= 0;

		form.getContextMenus().getGPGridNEWGPItem().setVisible(canBeVisible);
		form.getContextMenus().getGPGridEDITGPItem().setVisible(canBeVisible && recordSelected);
	}

	private boolean getCanMakeVisibleContextMenu()
	{
		Boolean isContextMenuVisible = form.getLocalContext().getCanContextMenuBeVisible();
		return isContextMenuVisible != null ? isContextMenuVisible.booleanValue() : false;
	}

	private void setCanBeVisibleContextMenu(Boolean value)
	{
		form.getLocalContext().setCanContextMenuBeVisible(value);
	}
	//WDEV-18377
	private ValueObject getSelectedValue()
	{
		if (form.grdGps().getValue() != null)
			return (GpLiteVo) form.grdGps().getSelectedRow().getValue();
		
		if (form.dynGrdGps().getValue() != null && form.dynGrdGps().isVisible())
		{
			if (form.dynGrdGps().getValue() instanceof GpLiteVo)
				return (GpLiteVo) form.dynGrdGps().getValue();
			if (form.dynGrdGps().getValue() instanceof GpLiteToPracticeLiteVo)
				return (GpLiteToPracticeLiteVo) form.dynGrdGps().getValue();
			
			if (form.dynGrdGps().getValue() instanceof LocSiteShortVo)
				return ((LocSiteShortVo) form.dynGrdGps().getValue());
		}
		return null;
	}
	//WDEV-18377
	private GpRefVo getGpReferenceforSelectedRow(DynamicGridRow row)
	{
		if (row == null)
			return null;
		return (row.getIdentifier() instanceof GpRefVo ?(GpRefVo)form.dynGrdGps().getSelectedRow().getIdentifier() : null);
	}

	private DynamicGridRow getRowforGridValue(GpLiteVo value)
	{
		for (int i=0;i<form.dynGrdGps().getRows().size();i++)
		{
			if (form.dynGrdGps().getRows().get(i).getValue() instanceof GpLiteVo && form.dynGrdGps().getRows().get(i).getValue().equals(value))
				return form.dynGrdGps().getRows().get(i);
			
		}
		return null;	
	}
	
	private void setValueInGrid(GpLiteVo value)
	{
		if (value != null)
		{
			if (form.grdGps().getValues().indexOf(value) < 0)
			{
				populateGpRow(value, form.grdGps().getRows().newRow());
			}
			else
			{
				grdGpsRow row = form.grdGps().getRowByValue(value);
				if(row != null)
					populateGpRow(value, row);	
			}
		}
		form.grdGps().setValue(value);
		enableContextMenu();
	}

	private void clearControls()
	{
		super.clearScreen();
		//setDefaultCodeType(); //WDEV-13987 
		form.cmbStatus().setValue(Boolean.TRUE.equals(form.cmbStatus().getVisible()) ? null : GPStatus.ACTIVE);
		form.grdGps().getRows().clear();
		form.dynGrdGps().getRows().clear();
	}

	private void enableControls(boolean enable)
	{
		form.txtSearchSurname().setEnabled(enable);
		form.txtSearchForename().setEnabled(enable);
		form.txtAddressContains().setEnabled(enable);
		form.cmbSearchCodeType().setEnabled(enable);
		form.txtSearchCode().setEnabled(enable);
	}

	private void initialize()
	{
		form.txtSearchSurname().setFocus();
		setDefaultCodeType();
		enableCodeText();
	}

	private void enableCodeText()
	{
		boolean codeTypeSelected = form.cmbSearchCodeType().getValue() != null;
		form.txtSearchCode().setEnabled(codeTypeSelected);
		if(codeTypeSelected == false)
			form.txtSearchCode().setValue("");
	}
	//WDEV-18377
	private void initializeGPDynGrid(boolean showAdditionalColumns)
	{
		form.dynGrdGps().clear();

		DynamicGridColumn col = form.dynGrdGps().getColumns().newColumn("GP Name", COL_GP_NAME);
		col.setWidth(175);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
		col.setSortMode(SortMode.AUTOMATIC);
		
		if (ConfigFlag.DOM.GP_USE_SURGERIES.getValue())
		{
			
			col = form.dynGrdGps().getColumns().newColumn("Surgery",COL_SURGERY_ADDR);
			col.setWidth(Boolean.TRUE.equals(showAdditionalColumns) ?  225:450);
			col.setCanGrow(Boolean.TRUE);
			col.setReadOnly(Boolean.TRUE);
		}
		
		if (!ConfigFlag.DOM.GP_USE_SURGERIES.getValue() ||(ConfigFlag.DOM.GP_USE_SURGERIES.getValue() && showAdditionalColumns))
		{
			col = form.dynGrdGps().getColumns().newColumn("Practice",COL_PRACTICE_ADDR);
			col.setWidth(Boolean.TRUE.equals(ConfigFlag.DOM.GP_USE_SURGERIES.getValue()) ?  225:450);
			col.setCanGrow(Boolean.TRUE);
			col.setReadOnly(Boolean.TRUE);

		}
		
		col = form.dynGrdGps().getColumns().newColumn("Practice Code",COL_GP_PRACTICE_CODE);
		col.setWidth(-1);
		col.setCanGrow(Boolean.TRUE);
		col.setReadOnly(Boolean.TRUE);
		
	}
	
	private DynamicGridColumn getColumn(Integer colFieldName) 
	{
		return form.dynGrdGps().getColumns().getByIdentifier(colFieldName);
	}	

	private void setGpAction(GPAction enumValue)
	{
		form.getLocalContext().setGpAction(enumValue);
	}

	private GPAction getGPAction()
	{
		return form.getLocalContext().getGpAction();
	}
	//WDEV-18377
	private void setSelectedRecordType(GPSelectedRecordType enumVal)
	{
		form.getLocalContext().setSelectedRecordType(enumVal);
		
	}
	private GPSelectedRecordType getSelectedRecordType()
	{
		return form.getLocalContext().getSelectedRecordType();
	}
	//----
	private void clearAction()
	{
		form.getLocalContext().setGpAction(null);
	}
	
	private void setActionAndFireEvent(GPAction action)
	{
		setGpAction(action);
		form.fireCustomControlValueChanged();
	}
	
	private void setDefaultCodeType()
	{
		form.cmbSearchCodeType().setValue(TaxonomyType.NAT_GP_CODE);
		form.cmbStatus().setValue(GPStatus.ACTIVE);
	}

	private void clearNonCodeTypeControls()
	{
		this.form.txtSearchSurname().setValue("");
		this.form.txtSearchForename().setValue("");
		this.form.txtAddressContains().setValue("");
	}
	// ---------------------------------------------------
}
