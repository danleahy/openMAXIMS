//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.dmdadmin;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbSpecialtyLookup();
	abstract protected void defaultcmbSpecialtyLookupValue();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdVTMHotlistSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSpecialtyValueSet(Object value);
	abstract protected void onCmbSpecialtyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbLoadAMPClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onfileupldAMPFileUploaded(String fileName);
	abstract protected void onImbLoadVTMClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onfileupldVTMFileUploaded(String fileName);
	abstract protected void onImbLoadVMPClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onfileupldVMPFileUploaded(String fileName);
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.lyrBrowser().tabBrowser().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrBrowsertabBrowserActivated();
			}
		});
		this.form.lyrBrowser().tabHotlist().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrBrowsertabHotlistActivated();
			}
		});
		this.form.lyrBrowser().tabHotlist().grdVTMHotlist().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdVTMHotlistSelectionChanged();
			}
		});
		this.form.lyrBrowser().tabHotlist().cmbSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecialtyValueSet(value);
			}
		});
		this.form.lyrBrowser().tabHotlist().cmbSpecialty().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbSpecialtyValueChanged();
			}
		});
		this.form.imbLoadAMP().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLoadAMPClick();
			}
		});
		this.form.fileupldAMP().setFileUploadedEvent(new FileUploaded()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String fileName) throws ims.framework.exceptions.PresentationLogicException
			{
				onfileupldAMPFileUploaded(fileName);
			}
		});
		this.form.imbLoadVTM().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLoadVTMClick();
			}
		});
		this.form.fileupldVTM().setFileUploadedEvent(new FileUploaded()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String fileName) throws ims.framework.exceptions.PresentationLogicException
			{
				onfileupldVTMFileUploaded(fileName);
			}
		});
		this.form.imbLoadVMP().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbLoadVMPClick();
			}
		});
		this.form.fileupldVMP().setFileUploadedEvent(new FileUploaded()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String fileName) throws ims.framework.exceptions.PresentationLogicException
			{
				onfileupldVMPFileUploaded(fileName);
			}
		});
		this.form.getContextMenus().Admin.getDMD_VTMADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.DMD_VTM.ADD, sender);
			}
		});
		this.form.getContextMenus().Admin.getDMD_VTMREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.DMD_VTM.REMOVE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbSpecialtyLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbSpecialtyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbSpecialtyLookupValue();
	}
	private void onlyrBrowsertabBrowserActivated()
	{
		this.form.lyrBrowser().showtabBrowser();
	}
	private void onlyrBrowsertabHotlistActivated()
	{
		this.form.lyrBrowser().showtabHotlist();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
