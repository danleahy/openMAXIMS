//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.serviceconfiguration;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbSpecialtyLookup();
	abstract protected void defaultcmbSpecialtyLookupValue();
	abstract protected void bindcmbCategoryLookup();
	abstract protected void defaultcmbCategoryLookupValue();
	abstract protected void bindcmbTurnAroundMeasureLookup();
	abstract protected void defaultcmbTurnAroundMeasureLookupValue();
	abstract protected void bindcmbSpecLookup();
	abstract protected void defaultcmbSpecLookupValue();
	abstract protected void bindcmbCatLookup();
	abstract protected void defaultcmbCatLookupValue();
	abstract protected void bindcmbHcpTypeLookup();
	abstract protected void defaultcmbHcpTypeLookupValue();
	abstract protected void bindcmbDAForCBReferralLookup();
	abstract protected void defaultcmbDAForCBReferralLookupValue();
	abstract protected void bindcmbDAForManualReferralLookup();
	abstract protected void defaultcmbDAForManualReferralLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditHcpClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrServiceTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdServiceSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSpecialtyValueSet(Object value);
	abstract protected void oncmbCategoryValueSet(Object value);
	abstract protected void onChkCanReferIntoTheServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTurnAroundMeasureValueSet(Object value);
	abstract protected void oncmbSpecValueSet(Object value);
	abstract protected void oncmbCatValueSet(Object value);
	abstract protected void onCmbCatValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRemoveServiceFunctionTaxonomyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddServiceFunctionTaxonomyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcFunctionCodeMappingsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdServiceFunctionSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdServiceFunctionGridCheckBoxClicked(int column, GenForm.lyrServiceLayer.tabActivityandFunctionsContainer.grdServiceFunctionRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddFunctionClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAppointmentTypesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAppointmentTypesGridCheckBoxClicked(int column, GenForm.lyrServiceLayer.tabActivityandFunctionsContainer.grdAppointmentTypesRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbAppointmentTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbAppointmentTypeTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddAppointmentTypeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdHcpSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbHcpTypeValueSet(Object value);
	abstract protected void onImbHcpSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbHcpClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkOtherHCPValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCABOPAandDirectToListValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkChangeCABOPAandDirectToListValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkChangeCABOPACBValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDAForCBReferralValueSet(Object value);
	abstract protected void oncmbDAForManualReferralValueSet(Object value);
	abstract protected void onChkCBLinkedOPAAndDiagnosticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkManualOPAValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkManualOPAAndDiagnosticRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkManualDirectToListValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkManualDirectToListAndOPAValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCBLinkedDiagnosticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCBLinkedOPAValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkManualLinkedOPAValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbServiceTriageValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbServiceTriageTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbServiceDiagnosticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbServiceDiagnosticTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.btnEditHcp().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditHcpClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.lyrService().tabServiceList().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrServicetabServiceListActivated();
			}
		});
		this.form.lyrService().tabServiceDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrServicetabServiceDetailsActivated();
			}
		});
		this.form.lyrService().tabActivityandFunctions().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrServicetabActivityandFunctionsActivated();
			}
		});
		this.form.lyrService().tabServiceandFunctionsbyHCP().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrServicetabServiceandFunctionsbyHCPActivated();
			}
		});
		this.form.lyrService().tabTriageActions().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrServicetabTriageActionsActivated();
			}
		});
		this.form.lyrService().tabDiagnostics().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrServicetabDiagnosticsActivated();
			}
		});
		this.form.lyrService().tabServiceList().imbSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchClick();
			}
		});
		this.form.lyrService().tabServiceList().imbClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearClick();
			}
		});
		this.form.lyrService().tabServiceList().grdService().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdServiceSelectionChanged();
			}
		});
		this.form.lyrService().tabServiceList().cmbSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecialtyValueSet(value);
			}
		});
		this.form.lyrService().tabServiceList().cmbCategory().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCategoryValueSet(value);
			}
		});
		this.form.lyrService().tabServiceDetails().chkCanReferIntoTheService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCanReferIntoTheServiceValueChanged();
			}
		});
		this.form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTurnAroundMeasureValueSet(value);
			}
		});
		this.form.lyrService().tabServiceDetails().cmbSpec().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecValueSet(value);
			}
		});
		this.form.lyrService().tabServiceDetails().cmbCat().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCatValueSet(value);
			}
		});
		this.form.lyrService().tabServiceDetails().cmbCat().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbCatValueChanged();
			}
		});
		this.form.lyrService().tabActivityandFunctions().btnRemoveServiceFunctionTaxonomy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRemoveServiceFunctionTaxonomyClick();
			}
		});
		this.form.lyrService().tabActivityandFunctions().btnAddServiceFunctionTaxonomy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddServiceFunctionTaxonomyClick();
			}
		});
		this.form.lyrService().tabActivityandFunctions().setccFunctionCodeMappingsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcFunctionCodeMappingsValueChanged();
			}
		});
		this.form.lyrService().tabActivityandFunctions().grdServiceFunction().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdServiceFunctionSelectionChanged();
			}
		});
		this.form.lyrService().tabActivityandFunctions().grdServiceFunction().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdServiceFunctionGridCheckBoxClicked(column, new GenForm.lyrServiceLayer.tabActivityandFunctionsContainer.grdServiceFunctionRow(row), isChecked);
			}
		});
		this.form.lyrService().tabActivityandFunctions().btnAddFunction().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddFunctionClick();
			}
		});
		this.form.lyrService().tabActivityandFunctions().grdAppointmentTypes().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAppointmentTypesSelectionChanged();
			}
		});
		this.form.lyrService().tabActivityandFunctions().grdAppointmentTypes().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAppointmentTypesGridCheckBoxClicked(column, new GenForm.lyrServiceLayer.tabActivityandFunctionsContainer.grdAppointmentTypesRow(row), isChecked);
			}
		});
		this.form.lyrService().tabActivityandFunctions().qmbAppointmentType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbAppointmentTypeValueChanged();
			}
		});
		this.form.lyrService().tabActivityandFunctions().qmbAppointmentType().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbAppointmentTypeTextSubmited(value);
			}
		});
		this.form.lyrService().tabActivityandFunctions().btnAddAppointmentType().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddAppointmentTypeClick();
			}
		});
		this.form.lyrService().tabActivityandFunctions().qmbService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceValueChanged();
			}
		});
		this.form.lyrService().tabActivityandFunctions().qmbService().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceTextSubmited(value);
			}
		});
		this.form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdHcpSelectionChanged();
			}
		});
		this.form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbHcpTypeValueSet(value);
			}
		});
		this.form.lyrService().tabServiceandFunctionsbyHCP().imbHcpSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbHcpSearchClick();
			}
		});
		this.form.lyrService().tabServiceandFunctionsbyHCP().imbHcpClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbHcpClearClick();
			}
		});
		this.form.lyrService().tabTriageActions().chkOtherHCP().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkOtherHCPValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkCABOPAandDirectToList().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCABOPAandDirectToListValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkChangeCABOPAandDirectToListValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkChangeCABOPACB().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkChangeCABOPACBValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().cmbDAForCBReferral().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDAForCBReferralValueSet(value);
			}
		});
		this.form.lyrService().tabTriageActions().cmbDAForManualReferral().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDAForManualReferralValueSet(value);
			}
		});
		this.form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCBLinkedOPAAndDiagnosticValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkManualOPA().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkManualOPAValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkManualOPAAndDiagnosticRequiredValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkManualDirectToList().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkManualDirectToListValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkManualDirectToListAndOPAValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCBLinkedDiagnosticValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkCBLinkedOPA().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCBLinkedOPAValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().chkManualLinkedOPA().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkManualLinkedOPAValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().qmbServiceTriage().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceTriageValueChanged();
			}
		});
		this.form.lyrService().tabTriageActions().qmbServiceTriage().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceTriageTextSubmited(value);
			}
		});
		this.form.lyrService().tabDiagnostics().qmbServiceDiagnostic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceDiagnosticValueChanged();
			}
		});
		this.form.lyrService().tabDiagnostics().qmbServiceDiagnostic().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbServiceDiagnosticTextSubmited(value);
			}
		});
		this.form.getContextMenus().Admin.getServiceConfigurationHCPMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.ServiceConfigurationHCPMenu.EDIT, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbSpecialtyLookup();
		bindcmbCategoryLookup();
		bindcmbTurnAroundMeasureLookup();
		bindcmbSpecLookup();
		bindcmbCatLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbSpecialtyLookup();
		bindcmbCategoryLookup();
		bindcmbTurnAroundMeasureLookup();
		bindcmbSpecLookup();
		bindcmbCatLookup();
		bindcmbHcpTypeLookup();
		bindcmbDAForCBReferralLookup();
		bindcmbDAForManualReferralLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbSpecialtyLookupValue();
		defaultcmbCategoryLookupValue();
		defaultcmbTurnAroundMeasureLookupValue();
		defaultcmbSpecLookupValue();
		defaultcmbCatLookupValue();
		defaultcmbHcpTypeLookupValue();
		defaultcmbDAForCBReferralLookupValue();
		defaultcmbDAForManualReferralLookupValue();
	}
	private void onlyrServicetabServiceListActivated()
	{
		this.form.lyrService().showtabServiceList();
		onlyrServiceTabChanged(this.form.lyrService().tabServiceList());
	}
	private void onlyrServicetabServiceDetailsActivated()
	{
		this.form.lyrService().showtabServiceDetails();
		onlyrServiceTabChanged(this.form.lyrService().tabServiceDetails());
	}
	private void onlyrServicetabActivityandFunctionsActivated()
	{
		this.form.lyrService().showtabActivityandFunctions();
		onlyrServiceTabChanged(this.form.lyrService().tabActivityandFunctions());
	}
	private void onlyrServicetabServiceandFunctionsbyHCPActivated()
	{
		this.form.lyrService().showtabServiceandFunctionsbyHCP();
		onlyrServiceTabChanged(this.form.lyrService().tabServiceandFunctionsbyHCP());
	}
	private void onlyrServicetabTriageActionsActivated()
	{
		this.form.lyrService().showtabTriageActions();
		onlyrServiceTabChanged(this.form.lyrService().tabTriageActions());
	}
	private void onlyrServicetabDiagnosticsActivated()
	{
		this.form.lyrService().showtabDiagnostics();
		onlyrServiceTabChanged(this.form.lyrService().tabDiagnostics());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
